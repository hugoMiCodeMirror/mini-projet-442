
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eddc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e57c  0800efac  0800efac  0000ffac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d528  0801d528  0001f0b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d528  0801d528  0001e528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d530  0801d530  0001f0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d530  0801d530  0001e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d534  0801d534  0001e534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801d538  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c70  200000b4  0801d5ec  0001f0b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d24  0801d5ec  0001fd24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000313ac  00000000  00000000  0001f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074da  00000000  00000000  00050490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  00057970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f15  00000000  00000000  0005a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003139d  00000000  00000000  0005c0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003640a  00000000  00000000  0008d472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011947b  00000000  00000000  000c387c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dccf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b244  00000000  00000000  001dcd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001e7f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ef94 	.word	0x0800ef94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800ef94 	.word	0x0800ef94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f005 f801 	bl	8005608 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f002 fbfa 	bl	8002e04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f005 f99b 	bl	800595c <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f002 fbea 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000d0 	.word	0x200000d0
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f004 ffaf 	bl	8005608 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f002 fba8 	bl	8002e04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f005 f949 	bl	800595c <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f002 fb98 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000118 	.word	0x20000118
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f006 fa71 	bl	8006c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f006 fa46 	bl	8006c34 <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DAC_Init+0x50>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007da:	f005 fbf1 	bl	8005fc0 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e4:	f002 fb0e 	bl	8002e04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007f8:	f005 fc68 	bl	80060cc <HAL_DAC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000802:	f002 faff 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000160 	.word	0x20000160
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_DAC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_DAC_MspInit+0x8c>)
 800087e:	f006 f9d9 	bl	8006c34 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	2036      	movs	r0, #54	@ 0x36
 8000888:	f005 fb70 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	@ 0x36
 800088e:	f005 fb89 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40007400 	.word	0x40007400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_DMA2D_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008de:	f005 fe0d 	bl	80064fc <HAL_DMA2D_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e8:	f002 fa8c 	bl	8002e04 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008f0:	f006 f872 	bl	80069d8 <HAL_DMA2D_ConfigLayer>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f002 fa83 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000174 	.word	0x20000174
 8000908:	4002b000 	.word	0x4002b000

0800090c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <HAL_DMA2D_MspInit+0x44>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d113      	bne.n	8000946 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	205a      	movs	r0, #90	@ 0x5a
 800093c:	f005 fb16 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000940:	205a      	movs	r0, #90	@ 0x5a
 8000942:	f005 fb2f 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	4002b000 	.word	0x4002b000
 8000954:	40023800 	.word	0x40023800

08000958 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FMC_Init+0x9c>)
 8000974:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FMC_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000984:	2204      	movs	r2, #4
 8000986:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FMC_Init+0x98>)
 800098a:	2210      	movs	r2, #16
 800098c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000996:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800099a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_FMC_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009bc:	2307      	movs	r3, #7
 80009be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009da:	f009 fa85 	bl	8009ee8 <HAL_SDRAM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e4:	f002 fa0e 	bl	8002e04 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001b4 	.word	0x200001b4
 80009f4:	a0000140 	.word	0xa0000140

080009f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d16d      	bne.n	8000af0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a14:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a1e:	4a37      	ldr	r2, [pc, #220]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a32:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a36:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FMC_MspInit+0x108>)
 8000a4e:	f006 f8f1 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a52:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a56:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <HAL_FMC_MspInit+0x10c>)
 8000a6e:	f006 f8e1 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a76:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <HAL_FMC_MspInit+0x110>)
 8000a8e:	f006 f8d1 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a96:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <HAL_FMC_MspInit+0x114>)
 8000aae:	f006 f8c1 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ab2:	2328      	movs	r3, #40	@ 0x28
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <HAL_FMC_MspInit+0x118>)
 8000acc:	f006 f8b2 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	@ (8000b14 <HAL_FMC_MspInit+0x11c>)
 8000aea:	f006 f8a3 	bl	8006c34 <HAL_GPIO_Init>
 8000aee:	e000      	b.n	8000af2 <HAL_FMC_MspInit+0xfa>
    return;
 8000af0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001e8 	.word	0x200001e8
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b20:	f7ff ff6a 	bl	80009f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <vApplicationGetIdleTaskMemory+0x30>)
 8000b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200003c8 	.word	0x200003c8
 8000b5c:	20000468 	.word	0x20000468

08000b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b0a6      	sub	sp, #152	@ 0x98
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 8000b72:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00a fd8d 	bl	800b696 <osMutexCreate>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <MX_FREERTOS_Init+0xe4>)
 8000b80:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b82:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <MX_FREERTOS_Init+0xe8>)
 8000b84:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000b88:	461d      	mov	r5, r3
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b96:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00a fd1a 	bl	800b5d6 <osThreadCreate>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a29      	ldr	r2, [pc, #164]	@ (8000c4c <MX_FREERTOS_Init+0xec>)
 8000ba6:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_FREERTOS_Init+0xf0>)
 8000baa:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8000bbc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00a fd07 	bl	800b5d6 <osThreadCreate>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <MX_FREERTOS_Init+0xf4>)
 8000bcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_FREERTOS_Init+0xf8>)
 8000bd0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8000be2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00a fcf4 	bl	800b5d6 <osThreadCreate>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c5c <MX_FREERTOS_Init+0xfc>)
 8000bf2:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_FREERTOS_Init+0x100>)
 8000bf6:	f107 0420 	add.w	r4, r7, #32
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f00a fce1 	bl	800b5d6 <osThreadCreate>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <MX_FREERTOS_Init+0x104>)
 8000c18:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_FREERTOS_Init+0x108>)
 8000c1c:	1d3c      	adds	r4, r7, #4
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f00a fcd0 	bl	800b5d6 <osThreadCreate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <MX_FREERTOS_Init+0x10c>)
 8000c3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c3c:	bf00      	nop
 8000c3e:	3798      	adds	r7, #152	@ 0x98
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	200003c4 	.word	0x200003c4
 8000c48:	0800efb8 	.word	0x0800efb8
 8000c4c:	200003b0 	.word	0x200003b0
 8000c50:	0800efe0 	.word	0x0800efe0
 8000c54:	200003b4 	.word	0x200003b4
 8000c58:	0800f00c 	.word	0x0800f00c
 8000c5c:	200003b8 	.word	0x200003b8
 8000c60:	0800f038 	.word	0x0800f038
 8000c64:	200003bc 	.word	0x200003bc
 8000c68:	0800f064 	.word	0x0800f064
 8000c6c:	200003c0 	.word	0x200003c0

08000c70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f00a fcf8 	bl	800b66e <osDelay>
 8000c7e:	e7fb      	b.n	8000c78 <StartDefaultTask+0x8>

08000c80 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0b6      	sub	sp, #216	@ 0xd8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if (gameOver || gamePaused || !gameStarted) {
 8000c88:	4bbf      	ldr	r3, [pc, #764]	@ (8000f88 <StartDisplayTask+0x308>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d107      	bne.n	8000ca0 <StartDisplayTask+0x20>
 8000c90:	4bbe      	ldr	r3, [pc, #760]	@ (8000f8c <StartDisplayTask+0x30c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d103      	bne.n	8000ca0 <StartDisplayTask+0x20>
 8000c98:	4bbd      	ldr	r3, [pc, #756]	@ (8000f90 <StartDisplayTask+0x310>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d110      	bne.n	8000cc2 <StartDisplayTask+0x42>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8000ca0:	4bbc      	ldr	r3, [pc, #752]	@ (8000f94 <StartDisplayTask+0x314>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00b f86d 	bl	800bd88 <xQueueSemaphoreTake>
      displayGameStatus();
 8000cae:	f000 fef7 	bl	8001aa0 <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 8000cb2:	4bb8      	ldr	r3, [pc, #736]	@ (8000f94 <StartDisplayTask+0x314>)
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f00a ff5a 	bl	800bb74 <xQueueGenericSend>
 8000cc0:	e1fd      	b.n	80010be <StartDisplayTask+0x43e>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 8000cc2:	4bb5      	ldr	r3, [pc, #724]	@ (8000f98 <StartDisplayTask+0x318>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d826      	bhi.n	8000d18 <StartDisplayTask+0x98>
 8000cca:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <StartDisplayTask+0x50>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000ce1 	.word	0x08000ce1
 8000cd4:	08000cef 	.word	0x08000cef
 8000cd8:	08000cfd 	.word	0x08000cfd
 8000cdc:	08000d0b 	.word	0x08000d0b
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	49ad      	ldr	r1, [pc, #692]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00d f84a 	bl	800dd80 <siprintf>
          break;
 8000cec:	e014      	b.n	8000d18 <StartDisplayTask+0x98>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	49ab      	ldr	r1, [pc, #684]	@ (8000fa0 <StartDisplayTask+0x320>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00d f843 	bl	800dd80 <siprintf>
          break;
 8000cfa:	e00d      	b.n	8000d18 <StartDisplayTask+0x98>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	49a8      	ldr	r1, [pc, #672]	@ (8000fa4 <StartDisplayTask+0x324>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00d f83c 	bl	800dd80 <siprintf>
          break;
 8000d08:	e006      	b.n	8000d18 <StartDisplayTask+0x98>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	49a6      	ldr	r1, [pc, #664]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00d f835 	bl	800dd80 <siprintf>
          break;
 8000d16:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 8000d18:	4ba4      	ldr	r3, [pc, #656]	@ (8000fac <StartDisplayTask+0x32c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d22:	49a3      	ldr	r1, [pc, #652]	@ (8000fb0 <StartDisplayTask+0x330>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00d f82b 	bl	800dd80 <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8000d2a:	4b9a      	ldr	r3, [pc, #616]	@ (8000f94 <StartDisplayTask+0x314>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d32:	4618      	mov	r0, r3
 8000d34:	f00b f828 	bl	800bd88 <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8000d38:	489e      	ldr	r0, [pc, #632]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000d3a:	f002 fc87 	bl	800364c <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 8000d3e:	f002 fbed 	bl	800351c <BSP_LCD_GetXSize>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f002 fdfd 	bl	800394c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 8000d52:	f002 fbe3 	bl	800351c <BSP_LCD_GetXSize>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f240 1101 	movw	r1, #257	@ 0x101
 8000d60:	2000      	movs	r0, #0
 8000d62:	f002 fdf3 	bl	800394c <BSP_LCD_DrawHLine>

      // On affiche la direction et le score
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 8000d66:	f107 0208 	add.w	r2, r7, #8
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000d70:	2000      	movs	r0, #0
 8000d72:	f002 fd23 	bl	80037bc <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8000d76:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000d80:	20c8      	movs	r0, #200	@ 0xc8
 8000d82:	f002 fd1b 	bl	80037bc <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      switch (headPart) {
 8000d86:	4b8c      	ldr	r3, [pc, #560]	@ (8000fb8 <StartDisplayTask+0x338>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d83a      	bhi.n	8000e04 <StartDisplayTask+0x184>
 8000d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d94 <StartDisplayTask+0x114>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000dbd 	.word	0x08000dbd
 8000d98:	08000da5 	.word	0x08000da5
 8000d9c:	08000dd5 	.word	0x08000dd5
 8000da0:	08000ded 	.word	0x08000ded
        case HeadBottom:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8000da4:	4b85      	ldr	r3, [pc, #532]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	015b      	lsls	r3, r3, #5
 8000daa:	4618      	mov	r0, r3
 8000dac:	4b83      	ldr	r3, [pc, #524]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	015b      	lsls	r3, r3, #5
 8000db2:	4a83      	ldr	r2, [pc, #524]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000db4:	4619      	mov	r1, r3
 8000db6:	f002 fe6f 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 8000dba:	e023      	b.n	8000e04 <StartDisplayTask+0x184>
        case HeadTop:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 8000dbc:	4b7f      	ldr	r3, [pc, #508]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	015b      	lsls	r3, r3, #5
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	4b7d      	ldr	r3, [pc, #500]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4a7e      	ldr	r2, [pc, #504]	@ (8000fc4 <StartDisplayTask+0x344>)
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f002 fe63 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 8000dd2:	e017      	b.n	8000e04 <StartDisplayTask+0x184>
        case HeadLeft:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8000dd4:	4b79      	ldr	r3, [pc, #484]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	015b      	lsls	r3, r3, #5
 8000dda:	4618      	mov	r0, r3
 8000ddc:	4b77      	ldr	r3, [pc, #476]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	015b      	lsls	r3, r3, #5
 8000de2:	4a79      	ldr	r2, [pc, #484]	@ (8000fc8 <StartDisplayTask+0x348>)
 8000de4:	4619      	mov	r1, r3
 8000de6:	f002 fe57 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 8000dea:	e00b      	b.n	8000e04 <StartDisplayTask+0x184>
        case HeadRight:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 8000dec:	4b73      	ldr	r3, [pc, #460]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	015b      	lsls	r3, r3, #5
 8000df2:	4618      	mov	r0, r3
 8000df4:	4b71      	ldr	r3, [pc, #452]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	015b      	lsls	r3, r3, #5
 8000dfa:	4a74      	ldr	r2, [pc, #464]	@ (8000fcc <StartDisplayTask+0x34c>)
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f002 fe4b 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 8000e02:	bf00      	nop
      }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e0a:	e08e      	b.n	8000f2a <StartDisplayTask+0x2aa>
        switch (snakeBodyParts[i]) {
 8000e0c:	4a70      	ldr	r2, [pc, #448]	@ (8000fd0 <StartDisplayTask+0x350>)
 8000e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	f200 8082 	bhi.w	8000f20 <StartDisplayTask+0x2a0>
 8000e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <StartDisplayTask+0x1a4>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e3d 	.word	0x08000e3d
 8000e28:	08000e63 	.word	0x08000e63
 8000e2c:	08000e89 	.word	0x08000e89
 8000e30:	08000eaf 	.word	0x08000eaf
 8000e34:	08000ed5 	.word	0x08000ed5
 8000e38:	08000efb 	.word	0x08000efb
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8000e3c:	4a65      	ldr	r2, [pc, #404]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e46:	015b      	lsls	r3, r3, #5
 8000e48:	4618      	mov	r0, r3
 8000e4a:	4a62      	ldr	r2, [pc, #392]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000e4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	015b      	lsls	r3, r3, #5
 8000e58:	4a5f      	ldr	r2, [pc, #380]	@ (8000fd8 <StartDisplayTask+0x358>)
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f002 fe1c 	bl	8003a98 <BSP_LCD_DrawBitmap>
            break;
 8000e60:	e05e      	b.n	8000f20 <StartDisplayTask+0x2a0>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8000e62:	4a5c      	ldr	r2, [pc, #368]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e68:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e6c:	015b      	lsls	r3, r3, #5
 8000e6e:	4618      	mov	r0, r3
 8000e70:	4a58      	ldr	r2, [pc, #352]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	785b      	ldrb	r3, [r3, #1]
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	4a57      	ldr	r2, [pc, #348]	@ (8000fdc <StartDisplayTask+0x35c>)
 8000e80:	4619      	mov	r1, r3
 8000e82:	f002 fe09 	bl	8003a98 <BSP_LCD_DrawBitmap>
            break;
 8000e86:	e04b      	b.n	8000f20 <StartDisplayTask+0x2a0>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8000e88:	4a52      	ldr	r2, [pc, #328]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e8e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	4618      	mov	r0, r3
 8000e96:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	015b      	lsls	r3, r3, #5
 8000ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f002 fdf6 	bl	8003a98 <BSP_LCD_DrawBitmap>
            break;
 8000eac:	e038      	b.n	8000f20 <StartDisplayTask+0x2a0>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 8000eae:	4a49      	ldr	r2, [pc, #292]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000eb4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000eb8:	015b      	lsls	r3, r3, #5
 8000eba:	4618      	mov	r0, r3
 8000ebc:	4a45      	ldr	r2, [pc, #276]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	015b      	lsls	r3, r3, #5
 8000eca:	4a46      	ldr	r2, [pc, #280]	@ (8000fe4 <StartDisplayTask+0x364>)
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f002 fde3 	bl	8003a98 <BSP_LCD_DrawBitmap>
            break;
 8000ed2:	e025      	b.n	8000f20 <StartDisplayTask+0x2a0>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8000ed4:	4a3f      	ldr	r2, [pc, #252]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000eda:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ede:	015b      	lsls	r3, r3, #5
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	015b      	lsls	r3, r3, #5
 8000ef0:	4a3d      	ldr	r2, [pc, #244]	@ (8000fe8 <StartDisplayTask+0x368>)
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f002 fdd0 	bl	8003a98 <BSP_LCD_DrawBitmap>
            break;
 8000ef8:	e012      	b.n	8000f20 <StartDisplayTask+0x2a0>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 8000efa:	4a36      	ldr	r2, [pc, #216]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f00:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4618      	mov	r0, r3
 8000f08:	4a32      	ldr	r2, [pc, #200]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	4a35      	ldr	r2, [pc, #212]	@ (8000fec <StartDisplayTask+0x36c>)
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f002 fdbd 	bl	8003a98 <BSP_LCD_DrawBitmap>
            break;
 8000f1e:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 8000f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f24:	3301      	adds	r3, #1
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <StartDisplayTask+0x32c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f34:	4293      	cmp	r3, r2
 8000f36:	f6ff af69 	blt.w	8000e0c <StartDisplayTask+0x18c>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <StartDisplayTask+0x370>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d876      	bhi.n	8001030 <StartDisplayTask+0x3b0>
 8000f42:	a201      	add	r2, pc, #4	@ (adr r2, 8000f48 <StartDisplayTask+0x2c8>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f71 	.word	0x08000f71
 8000f50:	08001001 	.word	0x08001001
 8000f54:	08001019 	.word	0x08001019
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8000f58:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <StartDisplayTask+0x374>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	015b      	lsls	r3, r3, #5
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <StartDisplayTask+0x374>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	4a24      	ldr	r2, [pc, #144]	@ (8000ff8 <StartDisplayTask+0x378>)
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f002 fd95 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 8000f6e:	e05f      	b.n	8001030 <StartDisplayTask+0x3b0>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8000f70:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <StartDisplayTask+0x374>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	015b      	lsls	r3, r3, #5
 8000f76:	4618      	mov	r0, r3
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <StartDisplayTask+0x374>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ffc <StartDisplayTask+0x37c>)
 8000f80:	4619      	mov	r1, r3
 8000f82:	f002 fd89 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 8000f86:	e053      	b.n	8001030 <StartDisplayTask+0x3b0>
 8000f88:	200002a8 	.word	0x200002a8
 8000f8c:	200002ac 	.word	0x200002ac
 8000f90:	200002b0 	.word	0x200002b0
 8000f94:	200003c4 	.word	0x200003c4
 8000f98:	20000224 	.word	0x20000224
 8000f9c:	0800f080 	.word	0x0800f080
 8000fa0:	0800f094 	.word	0x0800f094
 8000fa4:	0800f0a8 	.word	0x0800f0a8
 8000fa8:	0800f0bc 	.word	0x0800f0bc
 8000fac:	200002a0 	.word	0x200002a0
 8000fb0:	0800f0d0 	.word	0x0800f0d0
 8000fb4:	ffa52a2a 	.word	0xffa52a2a
 8000fb8:	20000225 	.word	0x20000225
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	0801238c 	.word	0x0801238c
 8000fc4:	08013018 	.word	0x08013018
 8000fc8:	08013ca4 	.word	0x08013ca4
 8000fcc:	08014930 	.word	0x08014930
 8000fd0:	20000228 	.word	0x20000228
 8000fd4:	200002b4 	.word	0x200002b4
 8000fd8:	0800fde8 	.word	0x0800fde8
 8000fdc:	08010a74 	.word	0x08010a74
 8000fe0:	08011700 	.word	0x08011700
 8000fe4:	080155bc 	.word	0x080155bc
 8000fe8:	08016248 	.word	0x08016248
 8000fec:	08016ed4 	.word	0x08016ed4
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	08017b60 	.word	0x08017b60
 8000ffc:	080187ec 	.word	0x080187ec
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 8001000:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <StartDisplayTask+0x448>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	015b      	lsls	r3, r3, #5
 8001006:	4618      	mov	r0, r3
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <StartDisplayTask+0x448>)
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	4a2f      	ldr	r2, [pc, #188]	@ (80010cc <StartDisplayTask+0x44c>)
 8001010:	4619      	mov	r1, r3
 8001012:	f002 fd41 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 8001016:	e00b      	b.n	8001030 <StartDisplayTask+0x3b0>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 8001018:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <StartDisplayTask+0x448>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	4618      	mov	r0, r3
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <StartDisplayTask+0x448>)
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	015b      	lsls	r3, r3, #5
 8001026:	4a2a      	ldr	r2, [pc, #168]	@ (80010d0 <StartDisplayTask+0x450>)
 8001028:	4619      	mov	r1, r3
 800102a:	f002 fd35 	bl	8003a98 <BSP_LCD_DrawBitmap>
          break;
 800102e:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8001030:	4b28      	ldr	r3, [pc, #160]	@ (80010d4 <StartDisplayTask+0x454>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d11a      	bne.n	800106e <StartDisplayTask+0x3ee>
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <StartDisplayTask+0x458>)
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <StartDisplayTask+0x45c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d105      	bne.n	8001050 <StartDisplayTask+0x3d0>
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <StartDisplayTask+0x458>)
 8001046:	785a      	ldrb	r2, [r3, #1]
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <StartDisplayTask+0x45c>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	429a      	cmp	r2, r3
 800104e:	d00e      	beq.n	800106e <StartDisplayTask+0x3ee>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8001050:	4823      	ldr	r0, [pc, #140]	@ (80010e0 <StartDisplayTask+0x460>)
 8001052:	f002 fafb 	bl	800364c <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <StartDisplayTask+0x45c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	015b      	lsls	r3, r3, #5
 800105c:	b298      	uxth	r0, r3
 800105e:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <StartDisplayTask+0x45c>)
 8001060:	785b      	ldrb	r3, [r3, #1]
 8001062:	015b      	lsls	r3, r3, #5
 8001064:	b299      	uxth	r1, r3
 8001066:	2320      	movs	r3, #32
 8001068:	2220      	movs	r2, #32
 800106a:	f002 fdc7 	bl	8003bfc <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001074:	e016      	b.n	80010a4 <StartDisplayTask+0x424>
        BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 8001076:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <StartDisplayTask+0x464>)
 8001078:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800107c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001080:	015b      	lsls	r3, r3, #5
 8001082:	4618      	mov	r0, r3
 8001084:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <StartDisplayTask+0x464>)
 8001086:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	015b      	lsls	r3, r3, #5
 8001092:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <StartDisplayTask+0x468>)
 8001094:	4619      	mov	r1, r3
 8001096:	f002 fcff 	bl	8003a98 <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++) {
 800109a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800109e:	3301      	adds	r3, #1
 80010a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80010a4:	2304      	movs	r3, #4
 80010a6:	461a      	mov	r2, r3
 80010a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80010ac:	4293      	cmp	r3, r2
 80010ae:	dbe2      	blt.n	8001076 <StartDisplayTask+0x3f6>
      }
      xSemaphoreGive(displayMutexHandle);
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <StartDisplayTask+0x46c>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	2300      	movs	r3, #0
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	f00a fd5b 	bl	800bb74 <xQueueGenericSend>
    }

    osDelay(100);
 80010be:	2064      	movs	r0, #100	@ 0x64
 80010c0:	f00a fad5 	bl	800b66e <osDelay>
    if (gameOver || gamePaused || !gameStarted) {
 80010c4:	e5e0      	b.n	8000c88 <StartDisplayTask+0x8>
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	08019478 	.word	0x08019478
 80010d0:	0801a104 	.word	0x0801a104
 80010d4:	200002a4 	.word	0x200002a4
 80010d8:	20000004 	.word	0x20000004
 80010dc:	200003a4 	.word	0x200003a4
 80010e0:	ff81cd4b 	.word	0xff81cd4b
 80010e4:	200003a8 	.word	0x200003a8
 80010e8:	0800f15c 	.word	0x0800f15c
 80010ec:	200003c4 	.word	0x200003c4

080010f0 <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 80010f8:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <StartJoystickTask+0xcc>)
 80010fa:	2208      	movs	r2, #8
 80010fc:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80010fe:	492f      	ldr	r1, [pc, #188]	@ (80011bc <StartJoystickTask+0xcc>)
 8001100:	482f      	ldr	r0, [pc, #188]	@ (80011c0 <StartJoystickTask+0xd0>)
 8001102:	f004 fc2b 	bl	800595c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8001106:	482e      	ldr	r0, [pc, #184]	@ (80011c0 <StartJoystickTask+0xd0>)
 8001108:	f004 fac2 	bl	8005690 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 800110c:	bf00      	nop
 800110e:	2164      	movs	r1, #100	@ 0x64
 8001110:	482b      	ldr	r0, [pc, #172]	@ (80011c0 <StartJoystickTask+0xd0>)
 8001112:	f004 fb8b 	bl	800582c <HAL_ADC_PollForConversion>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f8      	bne.n	800110e <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 800111c:	4828      	ldr	r0, [pc, #160]	@ (80011c0 <StartJoystickTask+0xd0>)
 800111e:	f004 fc10 	bl	8005942 <HAL_ADC_GetValue>
 8001122:	4603      	mov	r3, r0
 8001124:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <StartJoystickTask+0xd4>)
 8001126:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8001128:	4827      	ldr	r0, [pc, #156]	@ (80011c8 <StartJoystickTask+0xd8>)
 800112a:	f004 fab1 	bl	8005690 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 800112e:	bf00      	nop
 8001130:	2164      	movs	r1, #100	@ 0x64
 8001132:	4825      	ldr	r0, [pc, #148]	@ (80011c8 <StartJoystickTask+0xd8>)
 8001134:	f004 fb7a 	bl	800582c <HAL_ADC_PollForConversion>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f8      	bne.n	8001130 <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800113e:	4822      	ldr	r0, [pc, #136]	@ (80011c8 <StartJoystickTask+0xd8>)
 8001140:	f004 fbff 	bl	8005942 <HAL_ADC_GetValue>
 8001144:	4603      	mov	r3, r0
 8001146:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <StartJoystickTask+0xdc>)
 8001148:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <StartJoystickTask+0xd4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001152:	d207      	bcs.n	8001164 <StartJoystickTask+0x74>
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <StartJoystickTask+0xe0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <StartJoystickTask+0x74>
      direction = Down;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <StartJoystickTask+0xe4>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e027      	b.n	80011b4 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001164:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <StartJoystickTask+0xd4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800116c:	4293      	cmp	r3, r2
 800116e:	d907      	bls.n	8001180 <StartJoystickTask+0x90>
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <StartJoystickTask+0xe0>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d003      	beq.n	8001180 <StartJoystickTask+0x90>
      direction = Up;
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <StartJoystickTask+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e019      	b.n	80011b4 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <StartJoystickTask+0xdc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001188:	d207      	bcs.n	800119a <StartJoystickTask+0xaa>
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <StartJoystickTask+0xe0>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d003      	beq.n	800119a <StartJoystickTask+0xaa>
      direction = Right;
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <StartJoystickTask+0xe4>)
 8001194:	2203      	movs	r2, #3
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e00c      	b.n	80011b4 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <StartJoystickTask+0xdc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d906      	bls.n	80011b4 <StartJoystickTask+0xc4>
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <StartJoystickTask+0xe0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d002      	beq.n	80011b4 <StartJoystickTask+0xc4>
      direction = Left;
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <StartJoystickTask+0xe4>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 80011b4:	200a      	movs	r0, #10
 80011b6:	f00a fa5a 	bl	800b66e <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 80011ba:	e79d      	b.n	80010f8 <StartJoystickTask+0x8>
 80011bc:	200007c0 	.word	0x200007c0
 80011c0:	20000118 	.word	0x20000118
 80011c4:	2000021c 	.word	0x2000021c
 80011c8:	200000d0 	.word	0x200000d0
 80011cc:	20000220 	.word	0x20000220
 80011d0:	20000225 	.word	0x20000225
 80011d4:	20000224 	.word	0x20000224

080011d8 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b08c      	sub	sp, #48	@ 0x30
 80011dc:	af02      	add	r7, sp, #8
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80011e0:	f00b fb7e 	bl	800c8e0 <xTaskGetTickCount>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
  const TickType_t delay = pdMS_TO_TICKS(speed);
 80011e8:	23fa      	movs	r3, #250	@ 0xfa
 80011ea:	461a      	mov	r2, r3
 80011ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	4a6e      	ldr	r2, [pc, #440]	@ (80013b0 <StartManageBodyParts+0x1d8>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	099b      	lsrs	r3, r3, #6
 80011fc:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 80011fe:	4b6d      	ldr	r3, [pc, #436]	@ (80013b4 <StartManageBodyParts+0x1dc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 8274 	bne.w	80016f0 <StartManageBodyParts+0x518>
 8001208:	4b6b      	ldr	r3, [pc, #428]	@ (80013b8 <StartManageBodyParts+0x1e0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 826f 	bne.w	80016f0 <StartManageBodyParts+0x518>
 8001212:	4b6a      	ldr	r3, [pc, #424]	@ (80013bc <StartManageBodyParts+0x1e4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 826a 	beq.w	80016f0 <StartManageBodyParts+0x518>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 800121c:	4b68      	ldr	r3, [pc, #416]	@ (80013c0 <StartManageBodyParts+0x1e8>)
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	4b68      	ldr	r3, [pc, #416]	@ (80013c4 <StartManageBodyParts+0x1ec>)
 8001222:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001224:	4b66      	ldr	r3, [pc, #408]	@ (80013c0 <StartManageBodyParts+0x1e8>)
 8001226:	785a      	ldrb	r2, [r3, #1]
 8001228:	4b66      	ldr	r3, [pc, #408]	@ (80013c4 <StartManageBodyParts+0x1ec>)
 800122a:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 800122c:	4b66      	ldr	r3, [pc, #408]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	723b      	strb	r3, [r7, #8]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001232:	4b65      	ldr	r3, [pc, #404]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	727b      	strb	r3, [r7, #9]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001238:	4b64      	ldr	r3, [pc, #400]	@ (80013cc <StartManageBodyParts+0x1f4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d833      	bhi.n	80012a8 <StartManageBodyParts+0xd0>
 8001240:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <StartManageBodyParts+0x70>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	08001259 	.word	0x08001259
 800124c:	0800126d 	.word	0x0800126d
 8001250:	08001281 	.word	0x08001281
 8001254:	08001295 	.word	0x08001295
        case Up:
          headPart = HeadTop;
 8001258:	4b5d      	ldr	r3, [pc, #372]	@ (80013d0 <StartManageBodyParts+0x1f8>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 800125e:	4b5a      	ldr	r3, [pc, #360]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001260:	785b      	ldrb	r3, [r3, #1]
 8001262:	3b01      	subs	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b58      	ldr	r3, [pc, #352]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001268:	705a      	strb	r2, [r3, #1]
          break;
 800126a:	e01d      	b.n	80012a8 <StartManageBodyParts+0xd0>
        case Down:
          headPart = HeadBottom;
 800126c:	4b58      	ldr	r3, [pc, #352]	@ (80013d0 <StartManageBodyParts+0x1f8>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001272:	4b55      	ldr	r3, [pc, #340]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 800127c:	705a      	strb	r2, [r3, #1]
          break;
 800127e:	e013      	b.n	80012a8 <StartManageBodyParts+0xd0>
        case Left:
          headPart = HeadLeft;
 8001280:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <StartManageBodyParts+0x1f8>)
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001286:	4b50      	ldr	r3, [pc, #320]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	3b01      	subs	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b4e      	ldr	r3, [pc, #312]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001290:	701a      	strb	r2, [r3, #0]
          break;
 8001292:	e009      	b.n	80012a8 <StartManageBodyParts+0xd0>
        case Right:
          headPart = HeadRight;
 8001294:	4b4e      	ldr	r3, [pc, #312]	@ (80013d0 <StartManageBodyParts+0x1f8>)
 8001296:	2203      	movs	r2, #3
 8001298:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 800129a:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b49      	ldr	r3, [pc, #292]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 80012a4:	701a      	strb	r2, [r3, #0]
          break;
 80012a6:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 80012a8:	4b47      	ldr	r3, [pc, #284]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	220f      	movs	r2, #15
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d204      	bcs.n	80012bc <StartManageBodyParts+0xe4>
 80012b2:	4b45      	ldr	r3, [pc, #276]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 80012b4:	785b      	ldrb	r3, [r3, #1]
 80012b6:	2208      	movs	r2, #8
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d303      	bcc.n	80012c4 <StartManageBodyParts+0xec>
        // On a touché un mur
        gameOver = 1;
 80012bc:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <StartManageBodyParts+0x1dc>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e01f      	b.n	8001304 <StartManageBodyParts+0x12c>

        // displayGameStatus();
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c8:	e016      	b.n	80012f8 <StartManageBodyParts+0x120>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 80012ca:	4b3f      	ldr	r3, [pc, #252]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4941      	ldr	r1, [pc, #260]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d10b      	bne.n	80012f2 <StartManageBodyParts+0x11a>
 80012da:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 80012dc:	785a      	ldrb	r2, [r3, #1]
 80012de:	493d      	ldr	r1, [pc, #244]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 80012e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	440b      	add	r3, r1
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d102      	bne.n	80012f2 <StartManageBodyParts+0x11a>
            // On a touché notre corps
            gameOver = 1;
 80012ec:	4b31      	ldr	r3, [pc, #196]	@ (80013b4 <StartManageBodyParts+0x1dc>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	3301      	adds	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f8:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <StartManageBodyParts+0x200>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	4293      	cmp	r3, r2
 8001302:	dbe2      	blt.n	80012ca <StartManageBodyParts+0xf2>
      */


      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001304:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <StartManageBodyParts+0x204>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	e0cb      	b.n	80014a8 <StartManageBodyParts+0x2d0>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	4932      	ldr	r1, [pc, #200]	@ (80013e0 <StartManageBodyParts+0x208>)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 80c0 	bne.w	80014a2 <StartManageBodyParts+0x2ca>
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <StartManageBodyParts+0x1f0>)
 8001324:	785a      	ldrb	r2, [r3, #1]
 8001326:	492e      	ldr	r1, [pc, #184]	@ (80013e0 <StartManageBodyParts+0x208>)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	429a      	cmp	r2, r3
 8001332:	f040 80b6 	bne.w	80014a2 <StartManageBodyParts+0x2ca>
          snakeSize++;
 8001336:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <StartManageBodyParts+0x200>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <StartManageBodyParts+0x200>)
 8001340:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <StartManageBodyParts+0x204>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001348:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <StartManageBodyParts+0x200>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	e020      	b.n	8001394 <StartManageBodyParts+0x1bc>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <StartManageBodyParts+0x20c>)
 8001358:	5cd1      	ldrb	r1, [r2, r3]
 800135a:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <StartManageBodyParts+0x20c>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	460a      	mov	r2, r1
 8001362:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	3b01      	subs	r3, #1
 8001368:	4a1a      	ldr	r2, [pc, #104]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 800136a:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b01      	subs	r3, #1
 800137a:	4a16      	ldr	r2, [pc, #88]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	7859      	ldrb	r1, [r3, #1]
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	460a      	mov	r2, r1
 800138c:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b01      	subs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dcdb      	bgt.n	8001352 <StartManageBodyParts+0x17a>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <StartManageBodyParts+0x200>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d922      	bls.n	80013e8 <StartManageBodyParts+0x210>
            backX = snakeBodyPosition[0][0];
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	76fb      	strb	r3, [r7, #27]
            backY = snakeBodyPosition[0][1];
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <StartManageBodyParts+0x1fc>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	76bb      	strb	r3, [r7, #26]
 80013ae:	e021      	b.n	80013f4 <StartManageBodyParts+0x21c>
 80013b0:	10624dd3 	.word	0x10624dd3
 80013b4:	200002a8 	.word	0x200002a8
 80013b8:	200002ac 	.word	0x200002ac
 80013bc:	200002b0 	.word	0x200002b0
 80013c0:	20000008 	.word	0x20000008
 80013c4:	200003a4 	.word	0x200003a4
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000224 	.word	0x20000224
 80013d0:	20000225 	.word	0x20000225
 80013d4:	200002b4 	.word	0x200002b4
 80013d8:	200002a0 	.word	0x200002a0
 80013dc:	200002a4 	.word	0x200002a4
 80013e0:	200003a8 	.word	0x200003a8
 80013e4:	20000228 	.word	0x20000228
          }
          else {
            backX = snakeTailPosition[0];
 80013e8:	4ba0      	ldr	r3, [pc, #640]	@ (800166c <StartManageBodyParts+0x494>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	76fb      	strb	r3, [r7, #27]
            backY = snakeTailPosition[1];
 80013ee:	4b9f      	ldr	r3, [pc, #636]	@ (800166c <StartManageBodyParts+0x494>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	76bb      	strb	r3, [r7, #26]
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 80013f4:	4b9e      	ldr	r3, [pc, #632]	@ (8001670 <StartManageBodyParts+0x498>)
 80013f6:	7818      	ldrb	r0, [r3, #0]
 80013f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001670 <StartManageBodyParts+0x498>)
 80013fa:	7859      	ldrb	r1, [r3, #1]
 80013fc:	7a3b      	ldrb	r3, [r7, #8]
 80013fe:	7a7a      	ldrb	r2, [r7, #9]
 8001400:	7ebd      	ldrb	r5, [r7, #26]
 8001402:	7efc      	ldrb	r4, [r7, #27]
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	462b      	mov	r3, r5
 800140a:	4622      	mov	r2, r4
 800140c:	f000 f9ea 	bl	80017e4 <whatBodyPart>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	4b97      	ldr	r3, [pc, #604]	@ (8001674 <StartManageBodyParts+0x49c>)
 8001416:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001418:	7a3a      	ldrb	r2, [r7, #8]
 800141a:	4b97      	ldr	r3, [pc, #604]	@ (8001678 <StartManageBodyParts+0x4a0>)
 800141c:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 800141e:	7a7a      	ldrb	r2, [r7, #9]
 8001420:	4b95      	ldr	r3, [pc, #596]	@ (8001678 <StartManageBodyParts+0x4a0>)
 8001422:	705a      	strb	r2, [r3, #1]

          // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
          // TODO: Si on arrive a la fin du jeu, on ne peut plus générer de pomme car toutes les cases sont prises
          do {
            applePosition[i][0] = rand() % gridSizeX;
 8001424:	f00c fbac 	bl	800db80 <rand>
 8001428:	4603      	mov	r3, r0
 800142a:	220f      	movs	r2, #15
 800142c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001430:	fb01 f202 	mul.w	r2, r1, r2
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	b2d9      	uxtb	r1, r3
 8001438:	4a90      	ldr	r2, [pc, #576]	@ (800167c <StartManageBodyParts+0x4a4>)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = rand() % gridSizeY;
 8001440:	f00c fb9e 	bl	800db80 <rand>
 8001444:	4603      	mov	r3, r0
 8001446:	2208      	movs	r2, #8
 8001448:	fb93 f1f2 	sdiv	r1, r3, r2
 800144c:	fb01 f202 	mul.w	r2, r1, r2
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	b2d9      	uxtb	r1, r3
 8001454:	4a89      	ldr	r2, [pc, #548]	@ (800167c <StartManageBodyParts+0x4a4>)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	460a      	mov	r2, r1
 800145e:	705a      	strb	r2, [r3, #1]
          } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001460:	4a86      	ldr	r2, [pc, #536]	@ (800167c <StartManageBodyParts+0x4a4>)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001468:	4984      	ldr	r1, [pc, #528]	@ (800167c <StartManageBodyParts+0x4a4>)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f000 fa17 	bl	80018a8 <isSnakePosition>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1d1      	bne.n	8001424 <StartManageBodyParts+0x24c>
 8001480:	4a7e      	ldr	r2, [pc, #504]	@ (800167c <StartManageBodyParts+0x4a4>)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001488:	4a7c      	ldr	r2, [pc, #496]	@ (800167c <StartManageBodyParts+0x4a4>)
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f000 fa52 	bl	8001940 <isApplePosition>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1c0      	bne.n	8001424 <StartManageBodyParts+0x24c>
      for (int i = 0; i < NBApple; i++) {
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	3301      	adds	r3, #1
 80014a6:	623b      	str	r3, [r7, #32]
 80014a8:	2304      	movs	r3, #4
 80014aa:	461a      	mov	r2, r3
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	f6ff af2e 	blt.w	8001310 <StartManageBodyParts+0x138>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 80014b4:	4b72      	ldr	r3, [pc, #456]	@ (8001680 <StartManageBodyParts+0x4a8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f040 8119 	bne.w	80016f0 <StartManageBodyParts+0x518>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 80014be:	4b71      	ldr	r3, [pc, #452]	@ (8001684 <StartManageBodyParts+0x4ac>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d011      	beq.n	80014ea <StartManageBodyParts+0x312>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 80014c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001684 <StartManageBodyParts+0x4ac>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001678 <StartManageBodyParts+0x4a0>)
 80014ce:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80014d2:	4b66      	ldr	r3, [pc, #408]	@ (800166c <StartManageBodyParts+0x494>)
 80014d4:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 80014d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001684 <StartManageBodyParts+0x4ac>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4a66      	ldr	r2, [pc, #408]	@ (8001678 <StartManageBodyParts+0x4a0>)
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	785a      	ldrb	r2, [r3, #1]
 80014e4:	4b61      	ldr	r3, [pc, #388]	@ (800166c <StartManageBodyParts+0x494>)
 80014e6:	705a      	strb	r2, [r3, #1]
 80014e8:	e005      	b.n	80014f6 <StartManageBodyParts+0x31e>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 80014ea:	7a3a      	ldrb	r2, [r7, #8]
 80014ec:	4b5f      	ldr	r3, [pc, #380]	@ (800166c <StartManageBodyParts+0x494>)
 80014ee:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 80014f0:	7a7a      	ldrb	r2, [r7, #9]
 80014f2:	4b5e      	ldr	r3, [pc, #376]	@ (800166c <StartManageBodyParts+0x494>)
 80014f4:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 80014f6:	4b63      	ldr	r3, [pc, #396]	@ (8001684 <StartManageBodyParts+0x4ac>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e020      	b.n	8001542 <StartManageBodyParts+0x36a>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3b01      	subs	r3, #1
 8001504:	4a5b      	ldr	r2, [pc, #364]	@ (8001674 <StartManageBodyParts+0x49c>)
 8001506:	5cd1      	ldrb	r1, [r2, r3]
 8001508:	4a5a      	ldr	r2, [pc, #360]	@ (8001674 <StartManageBodyParts+0x49c>)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	4413      	add	r3, r2
 800150e:	460a      	mov	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3b01      	subs	r3, #1
 8001516:	4a58      	ldr	r2, [pc, #352]	@ (8001678 <StartManageBodyParts+0x4a0>)
 8001518:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800151c:	4a56      	ldr	r2, [pc, #344]	@ (8001678 <StartManageBodyParts+0x4a0>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3b01      	subs	r3, #1
 8001528:	4a53      	ldr	r2, [pc, #332]	@ (8001678 <StartManageBodyParts+0x4a0>)
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	7859      	ldrb	r1, [r3, #1]
 8001530:	4a51      	ldr	r2, [pc, #324]	@ (8001678 <StartManageBodyParts+0x4a0>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	460a      	mov	r2, r1
 800153a:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3b01      	subs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dcdb      	bgt.n	8001500 <StartManageBodyParts+0x328>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001548:	4b4e      	ldr	r3, [pc, #312]	@ (8001684 <StartManageBodyParts+0x4ac>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80b0 	beq.w	80016b2 <StartManageBodyParts+0x4da>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001552:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <StartManageBodyParts+0x498>)
 8001554:	7818      	ldrb	r0, [r3, #0]
 8001556:	4b46      	ldr	r3, [pc, #280]	@ (8001670 <StartManageBodyParts+0x498>)
 8001558:	7859      	ldrb	r1, [r3, #1]
 800155a:	4b47      	ldr	r3, [pc, #284]	@ (8001678 <StartManageBodyParts+0x4a0>)
 800155c:	781c      	ldrb	r4, [r3, #0]
 800155e:	4b46      	ldr	r3, [pc, #280]	@ (8001678 <StartManageBodyParts+0x4a0>)
 8001560:	785d      	ldrb	r5, [r3, #1]
 8001562:	7a3b      	ldrb	r3, [r7, #8]
 8001564:	7a7a      	ldrb	r2, [r7, #9]
 8001566:	9201      	str	r2, [sp, #4]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	462b      	mov	r3, r5
 800156c:	4622      	mov	r2, r4
 800156e:	f000 f939 	bl	80017e4 <whatBodyPart>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <StartManageBodyParts+0x49c>)
 8001578:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 800157a:	7a3a      	ldrb	r2, [r7, #8]
 800157c:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <StartManageBodyParts+0x4a0>)
 800157e:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001580:	7a7a      	ldrb	r2, [r7, #9]
 8001582:	4b3d      	ldr	r3, [pc, #244]	@ (8001678 <StartManageBodyParts+0x4a0>)
 8001584:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001586:	4b3f      	ldr	r3, [pc, #252]	@ (8001684 <StartManageBodyParts+0x4ac>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	4a39      	ldr	r2, [pc, #228]	@ (8001674 <StartManageBodyParts+0x49c>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	2b05      	cmp	r3, #5
 8001592:	f200 80ad 	bhi.w	80016f0 <StartManageBodyParts+0x518>
 8001596:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <StartManageBodyParts+0x3c4>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015d9 	.word	0x080015d9
 80015a4:	080015fd 	.word	0x080015fd
 80015a8:	08001623 	.word	0x08001623
 80015ac:	08001647 	.word	0x08001647
 80015b0:	0800168d 	.word	0x0800168d
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 80015b4:	4b33      	ldr	r3, [pc, #204]	@ (8001684 <StartManageBodyParts+0x4ac>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001678 <StartManageBodyParts+0x4a0>)
 80015bc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80015c0:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <StartManageBodyParts+0x494>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d103      	bne.n	80015d0 <StartManageBodyParts+0x3f8>
                tailPart = TailTop;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <StartManageBodyParts+0x4b0>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 80015ce:	e08f      	b.n	80016f0 <StartManageBodyParts+0x518>
                tailPart = TailRight;
 80015d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <StartManageBodyParts+0x4b0>)
 80015d2:	2203      	movs	r2, #3
 80015d4:	701a      	strb	r2, [r3, #0]
              break;
 80015d6:	e08b      	b.n	80016f0 <StartManageBodyParts+0x518>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 80015d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <StartManageBodyParts+0x4ac>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	3b01      	subs	r3, #1
 80015de:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <StartManageBodyParts+0x4a0>)
 80015e0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <StartManageBodyParts+0x494>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d103      	bne.n	80015f4 <StartManageBodyParts+0x41c>
                tailPart = TailTop;
 80015ec:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <StartManageBodyParts+0x4b0>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 80015f2:	e07d      	b.n	80016f0 <StartManageBodyParts+0x518>
                tailPart = TailLeft;
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <StartManageBodyParts+0x4b0>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
              break;
 80015fa:	e079      	b.n	80016f0 <StartManageBodyParts+0x518>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <StartManageBodyParts+0x4ac>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <StartManageBodyParts+0x4a0>)
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	785a      	ldrb	r2, [r3, #1]
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <StartManageBodyParts+0x494>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	429a      	cmp	r2, r3
 8001610:	d203      	bcs.n	800161a <StartManageBodyParts+0x442>
                tailPart = TailTop;
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <StartManageBodyParts+0x4b0>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001618:	e06a      	b.n	80016f0 <StartManageBodyParts+0x518>
                tailPart = TailBottom;
 800161a:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <StartManageBodyParts+0x4b0>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
              break;
 8001620:	e066      	b.n	80016f0 <StartManageBodyParts+0x518>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <StartManageBodyParts+0x4ac>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3b01      	subs	r3, #1
 8001628:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <StartManageBodyParts+0x4a0>)
 800162a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <StartManageBodyParts+0x494>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d203      	bcs.n	800163e <StartManageBodyParts+0x466>
                tailPart = TailLeft;
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <StartManageBodyParts+0x4b0>)
 8001638:	2202      	movs	r2, #2
 800163a:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 800163c:	e058      	b.n	80016f0 <StartManageBodyParts+0x518>
                tailPart = TailRight;
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <StartManageBodyParts+0x4b0>)
 8001640:	2203      	movs	r2, #3
 8001642:	701a      	strb	r2, [r3, #0]
              break;
 8001644:	e054      	b.n	80016f0 <StartManageBodyParts+0x518>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <StartManageBodyParts+0x4ac>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3b01      	subs	r3, #1
 800164c:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <StartManageBodyParts+0x4a0>)
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	785a      	ldrb	r2, [r3, #1]
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <StartManageBodyParts+0x494>)
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	429a      	cmp	r2, r3
 800165a:	d103      	bne.n	8001664 <StartManageBodyParts+0x48c>
                tailPart = TailRight;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <StartManageBodyParts+0x4b0>)
 800165e:	2203      	movs	r2, #3
 8001660:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001662:	e045      	b.n	80016f0 <StartManageBodyParts+0x518>
                tailPart = TailBottom;
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <StartManageBodyParts+0x4b0>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
              break;
 800166a:	e041      	b.n	80016f0 <StartManageBodyParts+0x518>
 800166c:	20000008 	.word	0x20000008
 8001670:	20000004 	.word	0x20000004
 8001674:	20000228 	.word	0x20000228
 8001678:	200002b4 	.word	0x200002b4
 800167c:	200003a8 	.word	0x200003a8
 8001680:	200002a4 	.word	0x200002a4
 8001684:	200002a0 	.word	0x200002a0
 8001688:	20000000 	.word	0x20000000
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <StartManageBodyParts+0x528>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a1c      	ldr	r2, [pc, #112]	@ (8001704 <StartManageBodyParts+0x52c>)
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	785a      	ldrb	r2, [r3, #1]
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <StartManageBodyParts+0x530>)
 800169c:	785b      	ldrb	r3, [r3, #1]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d103      	bne.n	80016aa <StartManageBodyParts+0x4d2>
                tailPart = TailLeft;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <StartManageBodyParts+0x534>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 80016a8:	e022      	b.n	80016f0 <StartManageBodyParts+0x518>
                tailPart = TailBottom;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <StartManageBodyParts+0x534>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
              break;
 80016b0:	e01e      	b.n	80016f0 <StartManageBodyParts+0x518>
          }
        }
        else {
          switch (headPart) {
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <StartManageBodyParts+0x538>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d81a      	bhi.n	80016f0 <StartManageBodyParts+0x518>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <StartManageBodyParts+0x4e8>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016d9 	.word	0x080016d9
 80016c8:	080016e1 	.word	0x080016e1
 80016cc:	080016e9 	.word	0x080016e9
            case HeadTop:
              tailPart = TailTop;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <StartManageBodyParts+0x534>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
              break;
 80016d6:	e00b      	b.n	80016f0 <StartManageBodyParts+0x518>
            case HeadBottom:
              tailPart = TailBottom;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <StartManageBodyParts+0x534>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
              break;
 80016de:	e007      	b.n	80016f0 <StartManageBodyParts+0x518>
            case HeadLeft:
              tailPart = TailLeft;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <StartManageBodyParts+0x534>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
              break;
 80016e6:	e003      	b.n	80016f0 <StartManageBodyParts+0x518>
            case HeadRight:
              tailPart = TailRight;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <StartManageBodyParts+0x534>)
 80016ea:	2203      	movs	r2, #3
 80016ec:	701a      	strb	r2, [r3, #0]
              break;
 80016ee:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	6939      	ldr	r1, [r7, #16]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00a ff18 	bl	800c52c <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 80016fc:	e57f      	b.n	80011fe <StartManageBodyParts+0x26>
 80016fe:	bf00      	nop
 8001700:	200002a0 	.word	0x200002a0
 8001704:	200002b4 	.word	0x200002b4
 8001708:	20000008 	.word	0x20000008
 800170c:	20000000 	.word	0x20000000
 8001710:	20000225 	.word	0x20000225

08001714 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 800171c:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <StartTsHandlerTask+0xb4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <StartTsHandlerTask+0x14>
      rand();
 8001724:	f00c fa2c 	bl	800db80 <rand>
    

    BSP_TS_GetState(&TS_State);
 8001728:	4828      	ldr	r0, [pc, #160]	@ (80017cc <StartTsHandlerTask+0xb8>)
 800172a:	f002 ff33 	bl	8004594 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <StartTsHandlerTask+0xb8>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d139      	bne.n	80017aa <StartTsHandlerTask+0x96>
 8001736:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <StartTsHandlerTask+0xbc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d035      	beq.n	80017aa <StartTsHandlerTask+0x96>
      if (gameOver) {
 800173e:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <StartTsHandlerTask+0xc0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d008      	beq.n	8001758 <StartTsHandlerTask+0x44>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001746:	4824      	ldr	r0, [pc, #144]	@ (80017d8 <StartTsHandlerTask+0xc4>)
 8001748:	f001 ffcc 	bl	80036e4 <BSP_LCD_Clear>
        gameOver = 0;
 800174c:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <StartTsHandlerTask+0xc0>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
        restartGame();
 8001752:	f000 f929 	bl	80019a8 <restartGame>
 8001756:	e028      	b.n	80017aa <StartTsHandlerTask+0x96>
      }
      else if (gamePaused) {
 8001758:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <StartTsHandlerTask+0xc8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d014      	beq.n	800178a <StartTsHandlerTask+0x76>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <StartTsHandlerTask+0xcc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	4618      	mov	r0, r3
 800176a:	f00a fb0d 	bl	800bd88 <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800176e:	481a      	ldr	r0, [pc, #104]	@ (80017d8 <StartTsHandlerTask+0xc4>)
 8001770:	f001 ffb8 	bl	80036e4 <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <StartTsHandlerTask+0xcc>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	f00a f9f9 	bl	800bb74 <xQueueGenericSend>
        gamePaused = 0;
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <StartTsHandlerTask+0xc8>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e00f      	b.n	80017aa <StartTsHandlerTask+0x96>
      }
      else if (!gameStarted) {
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <StartTsHandlerTask+0xb4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d108      	bne.n	80017a4 <StartTsHandlerTask+0x90>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001792:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <StartTsHandlerTask+0xc4>)
 8001794:	f001 ffa6 	bl	80036e4 <BSP_LCD_Clear>
        restartGame();
 8001798:	f000 f906 	bl	80019a8 <restartGame>
        gameStarted = 1;
 800179c:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <StartTsHandlerTask+0xb4>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e002      	b.n	80017aa <StartTsHandlerTask+0x96>
      }
      else {
        gamePaused = 1;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <StartTsHandlerTask+0xc8>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <StartTsHandlerTask+0xb8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <StartTsHandlerTask+0xa6>
      screenPressed = 1;
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <StartTsHandlerTask+0xbc>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e002      	b.n	80017c0 <StartTsHandlerTask+0xac>
    }
    else {
      screenPressed = 0;
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <StartTsHandlerTask+0xbc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 80017c0:	200a      	movs	r0, #10
 80017c2:	f009 ff54 	bl	800b66e <osDelay>
    if (!gameStarted)
 80017c6:	e7a9      	b.n	800171c <StartTsHandlerTask+0x8>
 80017c8:	200002b0 	.word	0x200002b0
 80017cc:	200001ec 	.word	0x200001ec
 80017d0:	20000218 	.word	0x20000218
 80017d4:	200002a8 	.word	0x200002a8
 80017d8:	ff81cd4b 	.word	0xff81cd4b
 80017dc:	200002ac 	.word	0x200002ac
 80017e0:	200003c4 	.word	0x200003c4

080017e4 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 80017e4:	b490      	push	{r4, r7}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4604      	mov	r4, r0
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	4603      	mov	r3, r0
 80017f8:	71bb      	strb	r3, [r7, #6]
 80017fa:	460b      	mov	r3, r1
 80017fc:	717b      	strb	r3, [r7, #5]
 80017fe:	4613      	mov	r3, r2
 8001800:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 8001802:	79fa      	ldrb	r2, [r7, #7]
 8001804:	797b      	ldrb	r3, [r7, #5]
 8001806:	429a      	cmp	r2, r3
 8001808:	d101      	bne.n	800180e <whatBodyPart+0x2a>
    return BottomTop;
 800180a:	2302      	movs	r3, #2
 800180c:	e046      	b.n	800189c <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 800180e:	79ba      	ldrb	r2, [r7, #6]
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	d101      	bne.n	800181a <whatBodyPart+0x36>
    return LeftRight;
 8001816:	2303      	movs	r3, #3
 8001818:	e040      	b.n	800189c <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	797b      	ldrb	r3, [r7, #5]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20b      	bcs.n	800183a <whatBodyPart+0x56>
 8001822:	79ba      	ldrb	r2, [r7, #6]
 8001824:	793b      	ldrb	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d907      	bls.n	800183a <whatBodyPart+0x56>
    if (missingX == frontX)
 800182a:	7c3a      	ldrb	r2, [r7, #16]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	429a      	cmp	r2, r3
 8001830:	d101      	bne.n	8001836 <whatBodyPart+0x52>
      return BottomRight;
 8001832:	2301      	movs	r3, #1
 8001834:	e032      	b.n	800189c <whatBodyPart+0xb8>
    else
      return LeftTop;
 8001836:	2304      	movs	r3, #4
 8001838:	e030      	b.n	800189c <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	797b      	ldrb	r3, [r7, #5]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20b      	bcs.n	800185a <whatBodyPart+0x76>
 8001842:	79ba      	ldrb	r2, [r7, #6]
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	d207      	bcs.n	800185a <whatBodyPart+0x76>
    if (missingX == frontX)
 800184a:	7c3a      	ldrb	r2, [r7, #16]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	429a      	cmp	r2, r3
 8001850:	d101      	bne.n	8001856 <whatBodyPart+0x72>
      return RightTop;
 8001852:	2305      	movs	r3, #5
 8001854:	e022      	b.n	800189c <whatBodyPart+0xb8>
    else
      return BottomLeft;
 8001856:	2300      	movs	r3, #0
 8001858:	e020      	b.n	800189c <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	429a      	cmp	r2, r3
 8001860:	d90b      	bls.n	800187a <whatBodyPart+0x96>
 8001862:	79ba      	ldrb	r2, [r7, #6]
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d207      	bcs.n	800187a <whatBodyPart+0x96>
    if (missingX == frontX)
 800186a:	7c3a      	ldrb	r2, [r7, #16]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	429a      	cmp	r2, r3
 8001870:	d101      	bne.n	8001876 <whatBodyPart+0x92>
      return LeftTop;
 8001872:	2304      	movs	r3, #4
 8001874:	e012      	b.n	800189c <whatBodyPart+0xb8>
    else
      return BottomRight;
 8001876:	2301      	movs	r3, #1
 8001878:	e010      	b.n	800189c <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	797b      	ldrb	r3, [r7, #5]
 800187e:	429a      	cmp	r2, r3
 8001880:	d90b      	bls.n	800189a <whatBodyPart+0xb6>
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	793b      	ldrb	r3, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	d907      	bls.n	800189a <whatBodyPart+0xb6>
    if (missingX == frontX)
 800188a:	7c3a      	ldrb	r2, [r7, #16]
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	429a      	cmp	r2, r3
 8001890:	d101      	bne.n	8001896 <whatBodyPart+0xb2>
      return BottomLeft;
 8001892:	2300      	movs	r3, #0
 8001894:	e002      	b.n	800189c <whatBodyPart+0xb8>
    else
      return RightTop;
 8001896:	2305      	movs	r3, #5
 8001898:	e000      	b.n	800189c <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 800189a:	2302      	movs	r3, #2
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc90      	pop	{r4, r7}
 80018a4:	4770      	bx	lr
	...

080018a8 <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <isSnakePosition+0x88>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	79fa      	ldrb	r2, [r7, #7]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d106      	bne.n	80018d0 <isSnakePosition+0x28>
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <isSnakePosition+0x88>)
 80018c4:	785b      	ldrb	r3, [r3, #1]
 80018c6:	79ba      	ldrb	r2, [r7, #6]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d101      	bne.n	80018d0 <isSnakePosition+0x28>
    return 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e029      	b.n	8001924 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e013      	b.n	80018fe <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 80018d6:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <isSnakePosition+0x8c>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d109      	bne.n	80018f8 <isSnakePosition+0x50>
 80018e4:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <isSnakePosition+0x8c>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	79ba      	ldrb	r2, [r7, #6]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d101      	bne.n	80018f8 <isSnakePosition+0x50>
      return 1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e015      	b.n	8001924 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3301      	adds	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <isSnakePosition+0x90>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4293      	cmp	r3, r2
 8001908:	dbe5      	blt.n	80018d6 <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <isSnakePosition+0x94>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	429a      	cmp	r2, r3
 8001912:	d106      	bne.n	8001922 <isSnakePosition+0x7a>
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <isSnakePosition+0x94>)
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	d101      	bne.n	8001922 <isSnakePosition+0x7a>
    return 1;
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <isSnakePosition+0x7c>

  return 0;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	20000004 	.word	0x20000004
 8001934:	200002b4 	.word	0x200002b4
 8001938:	200002a0 	.word	0x200002a0
 800193c:	20000008 	.word	0x20000008

08001940 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	460b      	mov	r3, r1
 800194c:	71bb      	strb	r3, [r7, #6]
 800194e:	4613      	mov	r3, r2
 8001950:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e018      	b.n	800198a <isApplePosition+0x4a>
    if (i == appleIndex)
 8001958:	797b      	ldrb	r3, [r7, #5]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d010      	beq.n	8001982 <isApplePosition+0x42>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 8001960:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <isApplePosition+0x64>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	429a      	cmp	r2, r3
 800196c:	d10a      	bne.n	8001984 <isApplePosition+0x44>
 800196e:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <isApplePosition+0x64>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	785b      	ldrb	r3, [r3, #1]
 8001978:	79ba      	ldrb	r2, [r7, #6]
 800197a:	429a      	cmp	r2, r3
 800197c:	d102      	bne.n	8001984 <isApplePosition+0x44>
      return 1;
 800197e:	2301      	movs	r3, #1
 8001980:	e009      	b.n	8001996 <isApplePosition+0x56>
      continue;
 8001982:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	2304      	movs	r3, #4
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4293      	cmp	r3, r2
 8001992:	dbe1      	blt.n	8001958 <isApplePosition+0x18>
  }

  return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200003a8 	.word	0x200003a8

080019a8 <restartGame>:

void restartGame()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  snakeSize = 0;
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <restartGame+0xd8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 80019b4:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <restartGame+0xdc>)
 80019b6:	2207      	movs	r2, #7
 80019b8:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 80019ba:	4b32      	ldr	r3, [pc, #200]	@ (8001a84 <restartGame+0xdc>)
 80019bc:	2206      	movs	r2, #6
 80019be:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <restartGame+0xe0>)
 80019c2:	2207      	movs	r2, #7
 80019c4:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 80019c6:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <restartGame+0xe0>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	705a      	strb	r2, [r3, #1]
  direction = Up;
 80019cc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a8c <restartGame+0xe4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <restartGame+0xe8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 80019d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <restartGame+0xec>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	e041      	b.n	8001a68 <restartGame+0xc0>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 80019e4:	f00c f8cc 	bl	800db80 <rand>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220f      	movs	r2, #15
 80019ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80019f0:	fb01 f202 	mul.w	r2, r1, r2
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	b2d9      	uxtb	r1, r3
 80019f8:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <restartGame+0xf0>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 8001a00:	f00c f8be 	bl	800db80 <rand>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2208      	movs	r2, #8
 8001a08:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a0c:	fb01 f202 	mul.w	r2, r1, r2
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	b2d9      	uxtb	r1, r3
 8001a14:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <restartGame+0xf0>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <restartGame+0xf0>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001a28:	491b      	ldr	r1, [pc, #108]	@ (8001a98 <restartGame+0xf0>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	440b      	add	r3, r1
 8001a30:	785b      	ldrb	r3, [r3, #1]
 8001a32:	4619      	mov	r1, r3
 8001a34:	4610      	mov	r0, r2
 8001a36:	f7ff ff37 	bl	80018a8 <isSnakePosition>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1d1      	bne.n	80019e4 <restartGame+0x3c>
 8001a40:	4a15      	ldr	r2, [pc, #84]	@ (8001a98 <restartGame+0xf0>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001a48:	4a13      	ldr	r2, [pc, #76]	@ (8001a98 <restartGame+0xf0>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff ff72 	bl	8001940 <isApplePosition>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1c0      	bne.n	80019e4 <restartGame+0x3c>
  for (int i = 0; i < NBApple; i++) {
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	2304      	movs	r3, #4
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	dbb8      	blt.n	80019e4 <restartGame+0x3c>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001a72:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <restartGame+0xf4>)
 8001a74:	f001 fe36 	bl	80036e4 <BSP_LCD_Clear>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200002a0 	.word	0x200002a0
 8001a84:	20000004 	.word	0x20000004
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000224 	.word	0x20000224
 8001a90:	20000225 	.word	0x20000225
 8001a94:	20000000 	.word	0x20000000
 8001a98:	200003a8 	.word	0x200003a8
 8001a9c:	ff81cd4b 	.word	0xff81cd4b

08001aa0 <displayGameStatus>:

void displayGameStatus()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  if (gameOver) {
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <displayGameStatus+0xa4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d015      	beq.n	8001ad8 <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001aac:	4826      	ldr	r0, [pc, #152]	@ (8001b48 <displayGameStatus+0xa8>)
 8001aae:	f001 fdcd 	bl	800364c <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001ab2:	4826      	ldr	r0, [pc, #152]	@ (8001b4c <displayGameStatus+0xac>)
 8001ab4:	f001 fdfc 	bl	80036b0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8001ab8:	2301      	movs	r3, #1
 8001aba:	4a25      	ldr	r2, [pc, #148]	@ (8001b50 <displayGameStatus+0xb0>)
 8001abc:	2164      	movs	r1, #100	@ 0x64
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f001 fe7c 	bl	80037bc <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001ac4:	4823      	ldr	r0, [pc, #140]	@ (8001b54 <displayGameStatus+0xb4>)
 8001ac6:	f001 fdf3 	bl	80036b0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8001aca:	2301      	movs	r3, #1
 8001acc:	4a22      	ldr	r2, [pc, #136]	@ (8001b58 <displayGameStatus+0xb8>)
 8001ace:	2182      	movs	r1, #130	@ 0x82
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f001 fe73 	bl	80037bc <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 8001ad6:	e032      	b.n	8001b3e <displayGameStatus+0x9e>
  else if (gamePaused) {
 8001ad8:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <displayGameStatus+0xbc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d015      	beq.n	8001b0c <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001ae0:	4819      	ldr	r0, [pc, #100]	@ (8001b48 <displayGameStatus+0xa8>)
 8001ae2:	f001 fdb3 	bl	800364c <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001ae6:	4819      	ldr	r0, [pc, #100]	@ (8001b4c <displayGameStatus+0xac>)
 8001ae8:	f001 fde2 	bl	80036b0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8001aec:	2301      	movs	r3, #1
 8001aee:	4a1c      	ldr	r2, [pc, #112]	@ (8001b60 <displayGameStatus+0xc0>)
 8001af0:	2164      	movs	r1, #100	@ 0x64
 8001af2:	2000      	movs	r0, #0
 8001af4:	f001 fe62 	bl	80037bc <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001af8:	4816      	ldr	r0, [pc, #88]	@ (8001b54 <displayGameStatus+0xb4>)
 8001afa:	f001 fdd9 	bl	80036b0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 8001afe:	2301      	movs	r3, #1
 8001b00:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <displayGameStatus+0xc4>)
 8001b02:	2182      	movs	r1, #130	@ 0x82
 8001b04:	2000      	movs	r0, #0
 8001b06:	f001 fe59 	bl	80037bc <BSP_LCD_DisplayStringAt>
}
 8001b0a:	e018      	b.n	8001b3e <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <displayGameStatus+0xc8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d114      	bne.n	8001b3e <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <displayGameStatus+0xa8>)
 8001b16:	f001 fd99 	bl	800364c <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001b1a:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <displayGameStatus+0xac>)
 8001b1c:	f001 fdc8 	bl	80036b0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 8001b20:	2301      	movs	r3, #1
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <displayGameStatus+0xcc>)
 8001b24:	2164      	movs	r1, #100	@ 0x64
 8001b26:	2000      	movs	r0, #0
 8001b28:	f001 fe48 	bl	80037bc <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001b2c:	4809      	ldr	r0, [pc, #36]	@ (8001b54 <displayGameStatus+0xb4>)
 8001b2e:	f001 fdbf 	bl	80036b0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 8001b32:	2301      	movs	r3, #1
 8001b34:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <displayGameStatus+0xd0>)
 8001b36:	2182      	movs	r1, #130	@ 0x82
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f001 fe3f 	bl	80037bc <BSP_LCD_DisplayStringAt>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200002a8 	.word	0x200002a8
 8001b48:	ffa52a2a 	.word	0xffa52a2a
 8001b4c:	20000034 	.word	0x20000034
 8001b50:	0800f0dc 	.word	0x0800f0dc
 8001b54:	2000003c 	.word	0x2000003c
 8001b58:	0800f0e8 	.word	0x0800f0e8
 8001b5c:	200002ac 	.word	0x200002ac
 8001b60:	0800f104 	.word	0x0800f104
 8001b64:	0800f110 	.word	0x0800f110
 8001b68:	200002b0 	.word	0x200002b0
 8001b6c:	0800f12c 	.word	0x0800f12c
 8001b70:	0800f138 	.word	0x0800f138

08001b74 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001b7e:	20c8      	movs	r0, #200	@ 0xc8
 8001b80:	f001 fc50 	bl	8003424 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001b84:	f000 fa7a 	bl	800207c <ft5336_I2C_InitializeIfRequired>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001bbc:	f000 fa5e 	bl	800207c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e010      	b.n	8001be8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	21a8      	movs	r1, #168	@ 0xa8
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fc0b 	bl	80033e8 <TS_IO_Read>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001bd6:	7b7b      	ldrb	r3, [r7, #13]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b51      	cmp	r3, #81	@ 0x51
 8001bdc:	d101      	bne.n	8001be2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	3301      	adds	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d802      	bhi.n	8001bf4 <ft5336_ReadID+0x4e>
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0e8      	beq.n	8001bc6 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001bf4:	7b7b      	ldrb	r3, [r7, #13]
 8001bf6:	b2db      	uxtb	r3, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fa45 	bl	800209c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f933 	bl	8001e80 <ft5336_TS_DisableIT>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2102      	movs	r1, #2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fbd5 	bl	80033e8 <TS_IO_Read>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d901      	bls.n	8001c5a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <ft5336_TS_DetectTouch+0x50>)
 8001c60:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001c62:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <ft5336_TS_DetectTouch+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	b2db      	uxtb	r3, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000668 	.word	0x20000668

08001c78 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e50 <ft5336_TS_GetXY+0x1d8>)
 8001c9c:	789a      	ldrb	r2, [r3, #2]
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001e50 <ft5336_TS_GetXY+0x1d8>)
 8001ca0:	785b      	ldrb	r3, [r3, #1]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	f080 80cf 	bcs.w	8001e46 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001ca8:	4b69      	ldr	r3, [pc, #420]	@ (8001e50 <ft5336_TS_GetXY+0x1d8>)
 8001caa:	789b      	ldrb	r3, [r3, #2]
 8001cac:	2b09      	cmp	r3, #9
 8001cae:	d871      	bhi.n	8001d94 <ft5336_TS_GetXY+0x11c>
 8001cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <ft5336_TS_GetXY+0x40>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001ce1 	.word	0x08001ce1
 8001cbc:	08001cf3 	.word	0x08001cf3
 8001cc0:	08001d05 	.word	0x08001d05
 8001cc4:	08001d17 	.word	0x08001d17
 8001cc8:	08001d29 	.word	0x08001d29
 8001ccc:	08001d3b 	.word	0x08001d3b
 8001cd0:	08001d4d 	.word	0x08001d4d
 8001cd4:	08001d5f 	.word	0x08001d5f
 8001cd8:	08001d71 	.word	0x08001d71
 8001cdc:	08001d83 	.word	0x08001d83
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001ce8:	2306      	movs	r3, #6
 8001cea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001cec:	2305      	movs	r3, #5
 8001cee:	753b      	strb	r3, [r7, #20]
      break;
 8001cf0:	e051      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001cf2:	230a      	movs	r3, #10
 8001cf4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001cf6:	2309      	movs	r3, #9
 8001cf8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001cfe:	230b      	movs	r3, #11
 8001d00:	753b      	strb	r3, [r7, #20]
      break;
 8001d02:	e048      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001d04:	2310      	movs	r3, #16
 8001d06:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001d08:	230f      	movs	r3, #15
 8001d0a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001d10:	2311      	movs	r3, #17
 8001d12:	753b      	strb	r3, [r7, #20]
      break;
 8001d14:	e03f      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001d16:	2316      	movs	r3, #22
 8001d18:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001d1a:	2315      	movs	r3, #21
 8001d1c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001d1e:	2318      	movs	r3, #24
 8001d20:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001d22:	2317      	movs	r3, #23
 8001d24:	753b      	strb	r3, [r7, #20]
      break;
 8001d26:	e036      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001d28:	231c      	movs	r3, #28
 8001d2a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001d2c:	231b      	movs	r3, #27
 8001d2e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001d30:	231e      	movs	r3, #30
 8001d32:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001d34:	231d      	movs	r3, #29
 8001d36:	753b      	strb	r3, [r7, #20]
      break;
 8001d38:	e02d      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001d3a:	2322      	movs	r3, #34	@ 0x22
 8001d3c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001d3e:	2321      	movs	r3, #33	@ 0x21
 8001d40:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001d42:	2324      	movs	r3, #36	@ 0x24
 8001d44:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001d46:	2323      	movs	r3, #35	@ 0x23
 8001d48:	753b      	strb	r3, [r7, #20]
      break;
 8001d4a:	e024      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001d4c:	2328      	movs	r3, #40	@ 0x28
 8001d4e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001d50:	2327      	movs	r3, #39	@ 0x27
 8001d52:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001d54:	232a      	movs	r3, #42	@ 0x2a
 8001d56:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001d58:	2329      	movs	r3, #41	@ 0x29
 8001d5a:	753b      	strb	r3, [r7, #20]
      break;
 8001d5c:	e01b      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001d5e:	232e      	movs	r3, #46	@ 0x2e
 8001d60:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001d62:	232d      	movs	r3, #45	@ 0x2d
 8001d64:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001d66:	2330      	movs	r3, #48	@ 0x30
 8001d68:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001d6a:	232f      	movs	r3, #47	@ 0x2f
 8001d6c:	753b      	strb	r3, [r7, #20]
      break;
 8001d6e:	e012      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001d70:	2334      	movs	r3, #52	@ 0x34
 8001d72:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001d74:	2333      	movs	r3, #51	@ 0x33
 8001d76:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001d78:	2336      	movs	r3, #54	@ 0x36
 8001d7a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001d7c:	2335      	movs	r3, #53	@ 0x35
 8001d7e:	753b      	strb	r3, [r7, #20]
      break;
 8001d80:	e009      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001d82:	233a      	movs	r3, #58	@ 0x3a
 8001d84:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001d86:	2339      	movs	r3, #57	@ 0x39
 8001d88:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001d8a:	233c      	movs	r3, #60	@ 0x3c
 8001d8c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001d8e:	233b      	movs	r3, #59	@ 0x3b
 8001d90:	753b      	strb	r3, [r7, #20]
      break;
 8001d92:	e000      	b.n	8001d96 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001d94:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001d96:	89fb      	ldrh	r3, [r7, #14]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	7dfa      	ldrb	r2, [r7, #23]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fb22 	bl	80033e8 <TS_IO_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001da8:	7cfb      	ldrb	r3, [r7, #19]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001db0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001db2:	89fb      	ldrh	r3, [r7, #14]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	7dba      	ldrb	r2, [r7, #22]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fb14 	bl	80033e8 <TS_IO_Read>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001dde:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001de2:	881a      	ldrh	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001de8:	89fb      	ldrh	r3, [r7, #14]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	7d7a      	ldrb	r2, [r7, #21]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 faf9 	bl	80033e8 <TS_IO_Read>
 8001df6:	4603      	mov	r3, r0
 8001df8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001e02:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	7d3a      	ldrb	r2, [r7, #20]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 faeb 	bl	80033e8 <TS_IO_Read>
 8001e12:	4603      	mov	r3, r0
 8001e14:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001e30:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <ft5336_TS_GetXY+0x1dc>)
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <ft5336_TS_GetXY+0x1d8>)
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <ft5336_TS_GetXY+0x1d8>)
 8001e44:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000668 	.word	0x20000668
 8001e54:	2000066c 	.word	0x2000066c

08001e58 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	21a4      	movs	r1, #164	@ 0xa4
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 fa9e 	bl	80033b4 <TS_IO_Write>
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	21a4      	movs	r1, #164	@ 0xa4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fa8a 	bl	80033b4 <TS_IO_Write>
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	6039      	str	r1, [r7, #0]
 8001ee0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2101      	movs	r1, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 fa7b 	bl	80033e8 <TS_IO_Read>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4603      	mov	r3, r0
 8001f16:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001f28:	4b4d      	ldr	r3, [pc, #308]	@ (8002060 <ft5336_TS_GetTouchInfo+0x158>)
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	f080 8090 	bcs.w	8002056 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d85d      	bhi.n	8001ff8 <ft5336_TS_GetTouchInfo+0xf0>
 8001f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <ft5336_TS_GetTouchInfo+0x3c>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	08001f7b 	.word	0x08001f7b
 8001f4c:	08001f89 	.word	0x08001f89
 8001f50:	08001f97 	.word	0x08001f97
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fb3 	.word	0x08001fb3
 8001f5c:	08001fc1 	.word	0x08001fc1
 8001f60:	08001fcf 	.word	0x08001fcf
 8001f64:	08001fdd 	.word	0x08001fdd
 8001f68:	08001feb 	.word	0x08001feb
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001f70:	2307      	movs	r3, #7
 8001f72:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001f74:	2308      	movs	r3, #8
 8001f76:	757b      	strb	r3, [r7, #21]
      break;
 8001f78:	e03f      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001f7a:	2309      	movs	r3, #9
 8001f7c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001f7e:	230d      	movs	r3, #13
 8001f80:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001f82:	230e      	movs	r3, #14
 8001f84:	757b      	strb	r3, [r7, #21]
      break;
 8001f86:	e038      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001f8c:	2313      	movs	r3, #19
 8001f8e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001f90:	2314      	movs	r3, #20
 8001f92:	757b      	strb	r3, [r7, #21]
      break;
 8001f94:	e031      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001f96:	2315      	movs	r3, #21
 8001f98:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001f9a:	2319      	movs	r3, #25
 8001f9c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001f9e:	231a      	movs	r3, #26
 8001fa0:	757b      	strb	r3, [r7, #21]
      break;
 8001fa2:	e02a      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001fa4:	231b      	movs	r3, #27
 8001fa6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001fa8:	231f      	movs	r3, #31
 8001faa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001fac:	2320      	movs	r3, #32
 8001fae:	757b      	strb	r3, [r7, #21]
      break;
 8001fb0:	e023      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001fb2:	2321      	movs	r3, #33	@ 0x21
 8001fb4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001fb6:	2325      	movs	r3, #37	@ 0x25
 8001fb8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001fba:	2326      	movs	r3, #38	@ 0x26
 8001fbc:	757b      	strb	r3, [r7, #21]
      break;
 8001fbe:	e01c      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001fc0:	2327      	movs	r3, #39	@ 0x27
 8001fc2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001fc4:	232b      	movs	r3, #43	@ 0x2b
 8001fc6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001fc8:	232c      	movs	r3, #44	@ 0x2c
 8001fca:	757b      	strb	r3, [r7, #21]
      break;
 8001fcc:	e015      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001fce:	232d      	movs	r3, #45	@ 0x2d
 8001fd0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001fd2:	2331      	movs	r3, #49	@ 0x31
 8001fd4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001fd6:	2332      	movs	r3, #50	@ 0x32
 8001fd8:	757b      	strb	r3, [r7, #21]
      break;
 8001fda:	e00e      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001fdc:	2333      	movs	r3, #51	@ 0x33
 8001fde:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001fe0:	2337      	movs	r3, #55	@ 0x37
 8001fe2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001fe4:	2338      	movs	r3, #56	@ 0x38
 8001fe6:	757b      	strb	r3, [r7, #21]
      break;
 8001fe8:	e007      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001fea:	2339      	movs	r3, #57	@ 0x39
 8001fec:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001fee:	233d      	movs	r3, #61	@ 0x3d
 8001ff0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001ff2:	233e      	movs	r3, #62	@ 0x3e
 8001ff4:	757b      	strb	r3, [r7, #21]
      break;
 8001ff6:	e000      	b.n	8001ffa <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001ff8:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	7dfa      	ldrb	r2, [r7, #23]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f001 f9f0 	bl	80033e8 <TS_IO_Read>
 8002008:	4603      	mov	r3, r0
 800200a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800200c:	7d3b      	ldrb	r3, [r7, #20]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	119b      	asrs	r3, r3, #6
 8002012:	f003 0203 	and.w	r2, r3, #3
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	7dba      	ldrb	r2, [r7, #22]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f001 f9e0 	bl	80033e8 <TS_IO_Read>
 8002028:	4603      	mov	r3, r0
 800202a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800202c:	7d3b      	ldrb	r3, [r7, #20]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	7d7a      	ldrb	r2, [r7, #21]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f001 f9d2 	bl	80033e8 <TS_IO_Read>
 8002044:	4603      	mov	r3, r0
 8002046:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8002048:	7d3b      	ldrb	r3, [r7, #20]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	111b      	asrs	r3, r3, #4
 800204e:	f003 0204 	and.w	r2, r3, #4
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000668 	.word	0x20000668

08002064 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800206a:	781b      	ldrb	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000668 	.word	0x20000668

0800207c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002080:	f7ff fff0 	bl	8002064 <ft5336_Get_I2C_InitializedStatus>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800208a:	f001 f989 	bl	80033a0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800208e:	4b02      	ldr	r3, [pc, #8]	@ (8002098 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
  }
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000668 	.word	0x20000668

0800209c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b090      	sub	sp, #64	@ 0x40
 80020bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ce:	4baf      	ldr	r3, [pc, #700]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4aae      	ldr	r2, [pc, #696]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4bac      	ldr	r3, [pc, #688]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e6:	4ba9      	ldr	r3, [pc, #676]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4aa8      	ldr	r2, [pc, #672]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80020ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4ba6      	ldr	r3, [pc, #664]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	4ba3      	ldr	r3, [pc, #652]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4aa2      	ldr	r2, [pc, #648]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4ba0      	ldr	r3, [pc, #640]	@ (800238c <MX_GPIO_Init+0x2d4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	623b      	str	r3, [r7, #32]
 8002114:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	4b9d      	ldr	r3, [pc, #628]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a9c      	ldr	r2, [pc, #624]	@ (800238c <MX_GPIO_Init+0x2d4>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b9a      	ldr	r3, [pc, #616]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b97      	ldr	r3, [pc, #604]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a96      	ldr	r2, [pc, #600]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b94      	ldr	r3, [pc, #592]	@ (800238c <MX_GPIO_Init+0x2d4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b91      	ldr	r3, [pc, #580]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a90      	ldr	r2, [pc, #576]	@ (800238c <MX_GPIO_Init+0x2d4>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b8e      	ldr	r3, [pc, #568]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800215e:	4b8b      	ldr	r3, [pc, #556]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a8a      	ldr	r2, [pc, #552]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002164:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b88      	ldr	r3, [pc, #544]	@ (800238c <MX_GPIO_Init+0x2d4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002176:	4b85      	ldr	r3, [pc, #532]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a84      	ldr	r2, [pc, #528]	@ (800238c <MX_GPIO_Init+0x2d4>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b82      	ldr	r3, [pc, #520]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800218e:	4b7f      	ldr	r3, [pc, #508]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a7e      	ldr	r2, [pc, #504]	@ (800238c <MX_GPIO_Init+0x2d4>)
 8002194:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b7c      	ldr	r3, [pc, #496]	@ (800238c <MX_GPIO_Init+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a6:	4b79      	ldr	r3, [pc, #484]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a78      	ldr	r2, [pc, #480]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b76      	ldr	r3, [pc, #472]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021be:	4b73      	ldr	r3, [pc, #460]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a72      	ldr	r2, [pc, #456]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b70      	ldr	r3, [pc, #448]	@ (800238c <MX_GPIO_Init+0x2d4>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2160      	movs	r1, #96	@ 0x60
 80021da:	486d      	ldr	r0, [pc, #436]	@ (8002390 <MX_GPIO_Init+0x2d8>)
 80021dc:	f004 ffe2 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80021e0:	2201      	movs	r2, #1
 80021e2:	2120      	movs	r1, #32
 80021e4:	486b      	ldr	r0, [pc, #428]	@ (8002394 <MX_GPIO_Init+0x2dc>)
 80021e6:	f004 ffdd 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2108      	movs	r1, #8
 80021ee:	4869      	ldr	r0, [pc, #420]	@ (8002394 <MX_GPIO_Init+0x2dc>)
 80021f0:	f004 ffd8 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2108      	movs	r1, #8
 80021f8:	4867      	ldr	r0, [pc, #412]	@ (8002398 <MX_GPIO_Init+0x2e0>)
 80021fa:	f004 ffd3 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002204:	4865      	ldr	r0, [pc, #404]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002206:	f004 ffcd 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800220a:	2200      	movs	r2, #0
 800220c:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002210:	4863      	ldr	r0, [pc, #396]	@ (80023a0 <MX_GPIO_Init+0x2e8>)
 8002212:	f004 ffc7 	bl	80071a4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	21c8      	movs	r1, #200	@ 0xc8
 800221a:	4862      	ldr	r0, [pc, #392]	@ (80023a4 <MX_GPIO_Init+0x2ec>)
 800221c:	f004 ffc2 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002220:	2308      	movs	r3, #8
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002230:	4619      	mov	r1, r3
 8002232:	4857      	ldr	r0, [pc, #348]	@ (8002390 <MX_GPIO_Init+0x2d8>)
 8002234:	f004 fcfe 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002238:	2304      	movs	r3, #4
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002248:	2309      	movs	r3, #9
 800224a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002250:	4619      	mov	r1, r3
 8002252:	484f      	ldr	r0, [pc, #316]	@ (8002390 <MX_GPIO_Init+0x2d8>)
 8002254:	f004 fcee 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002258:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800226a:	230b      	movs	r3, #11
 800226c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800226e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002272:	4619      	mov	r1, r3
 8002274:	484b      	ldr	r0, [pc, #300]	@ (80023a4 <MX_GPIO_Init+0x2ec>)
 8002276:	f004 fcdd 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800227a:	f643 0323 	movw	r3, #14371	@ 0x3823
 800227e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800228c:	230a      	movs	r3, #10
 800228e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002294:	4619      	mov	r1, r3
 8002296:	4844      	ldr	r0, [pc, #272]	@ (80023a8 <MX_GPIO_Init+0x2f0>)
 8002298:	f004 fccc 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80022ac:	2308      	movs	r3, #8
 80022ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80022b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022b4:	4619      	mov	r1, r3
 80022b6:	4837      	ldr	r0, [pc, #220]	@ (8002394 <MX_GPIO_Init+0x2dc>)
 80022b8:	f004 fcbc 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80022bc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022ce:	230c      	movs	r3, #12
 80022d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d6:	4619      	mov	r1, r3
 80022d8:	4834      	ldr	r0, [pc, #208]	@ (80023ac <MX_GPIO_Init+0x2f4>)
 80022da:	f004 fcab 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 80022de:	f248 1340 	movw	r3, #33088	@ 0x8140
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e4:	2300      	movs	r3, #0
 80022e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f0:	4619      	mov	r1, r3
 80022f2:	482f      	ldr	r0, [pc, #188]	@ (80023b0 <MX_GPIO_Init+0x2f8>)
 80022f4:	f004 fc9e 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80022f8:	2360      	movs	r3, #96	@ 0x60
 80022fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230c:	4619      	mov	r1, r3
 800230e:	4820      	ldr	r0, [pc, #128]	@ (8002390 <MX_GPIO_Init+0x2d8>)
 8002310:	f004 fc90 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002314:	2340      	movs	r3, #64	@ 0x40
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002324:	230a      	movs	r3, #10
 8002326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800232c:	4619      	mov	r1, r3
 800232e:	481e      	ldr	r0, [pc, #120]	@ (80023a8 <MX_GPIO_Init+0x2f0>)
 8002330:	f004 fc80 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002346:	4619      	mov	r1, r3
 8002348:	481a      	ldr	r0, [pc, #104]	@ (80023b4 <MX_GPIO_Init+0x2fc>)
 800234a:	f004 fc73 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800234e:	2340      	movs	r3, #64	@ 0x40
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002352:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002360:	4619      	mov	r1, r3
 8002362:	480c      	ldr	r0, [pc, #48]	@ (8002394 <MX_GPIO_Init+0x2dc>)
 8002364:	f004 fc66 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002368:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800237a:	230a      	movs	r3, #10
 800237c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002382:	4619      	mov	r1, r3
 8002384:	480a      	ldr	r0, [pc, #40]	@ (80023b0 <MX_GPIO_Init+0x2f8>)
 8002386:	f004 fc55 	bl	8006c34 <HAL_GPIO_Init>
 800238a:	e015      	b.n	80023b8 <MX_GPIO_Init+0x300>
 800238c:	40023800 	.word	0x40023800
 8002390:	40021000 	.word	0x40021000
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40022800 	.word	0x40022800
 800239c:	40022000 	.word	0x40022000
 80023a0:	40021c00 	.word	0x40021c00
 80023a4:	40021800 	.word	0x40021800
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80023b8:	23f0      	movs	r3, #240	@ 0xf0
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80023c8:	230a      	movs	r3, #10
 80023ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023d0:	4619      	mov	r1, r3
 80023d2:	4891      	ldr	r0, [pc, #580]	@ (8002618 <MX_GPIO_Init+0x560>)
 80023d4:	f004 fc2e 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80023d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80023ea:	230a      	movs	r3, #10
 80023ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80023ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f2:	4619      	mov	r1, r3
 80023f4:	4889      	ldr	r0, [pc, #548]	@ (800261c <MX_GPIO_Init+0x564>)
 80023f6:	f004 fc1d 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80023fa:	2328      	movs	r3, #40	@ 0x28
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fe:	2301      	movs	r3, #1
 8002400:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240e:	4619      	mov	r1, r3
 8002410:	4883      	ldr	r0, [pc, #524]	@ (8002620 <MX_GPIO_Init+0x568>)
 8002412:	f004 fc0f 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002416:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241c:	2300      	movs	r3, #0
 800241e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	487e      	ldr	r0, [pc, #504]	@ (8002624 <MX_GPIO_Init+0x56c>)
 800242c:	f004 fc02 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002430:	2308      	movs	r3, #8
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002434:	2301      	movs	r3, #1
 8002436:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002444:	4619      	mov	r1, r3
 8002446:	4878      	ldr	r0, [pc, #480]	@ (8002628 <MX_GPIO_Init+0x570>)
 8002448:	f004 fbf4 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 800244c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800245a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800245e:	4619      	mov	r1, r3
 8002460:	486e      	ldr	r0, [pc, #440]	@ (800261c <MX_GPIO_Init+0x564>)
 8002462:	f004 fbe7 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002466:	2310      	movs	r3, #16
 8002468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	4869      	ldr	r0, [pc, #420]	@ (8002620 <MX_GPIO_Init+0x568>)
 800247a:	f004 fbdb 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800247e:	2304      	movs	r3, #4
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800248e:	230c      	movs	r3, #12
 8002490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	4861      	ldr	r0, [pc, #388]	@ (8002620 <MX_GPIO_Init+0x568>)
 800249a:	f004 fbcb 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 800249e:	f24a 0304 	movw	r3, #40964	@ 0xa004
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b0:	4619      	mov	r1, r3
 80024b2:	485e      	ldr	r0, [pc, #376]	@ (800262c <MX_GPIO_Init+0x574>)
 80024b4:	f004 fbbe 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80024b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4851      	ldr	r0, [pc, #324]	@ (8002618 <MX_GPIO_Init+0x560>)
 80024d2:	f004 fbaf 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80024d6:	f645 6340 	movw	r3, #24128	@ 0x5e40
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	484f      	ldr	r0, [pc, #316]	@ (800262c <MX_GPIO_Init+0x574>)
 80024f0:	f004 fba0 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80024f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002508:	4619      	mov	r1, r3
 800250a:	4843      	ldr	r0, [pc, #268]	@ (8002618 <MX_GPIO_Init+0x560>)
 800250c:	f004 fb92 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002510:	2310      	movs	r3, #16
 8002512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002520:	230a      	movs	r3, #10
 8002522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002528:	4619      	mov	r1, r3
 800252a:	4840      	ldr	r0, [pc, #256]	@ (800262c <MX_GPIO_Init+0x574>)
 800252c:	f004 fb82 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002530:	23c8      	movs	r3, #200	@ 0xc8
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002540:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002544:	4619      	mov	r1, r3
 8002546:	4835      	ldr	r0, [pc, #212]	@ (800261c <MX_GPIO_Init+0x564>)
 8002548:	f004 fb74 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800254c:	2305      	movs	r3, #5
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800255c:	230a      	movs	r3, #10
 800255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002564:	4619      	mov	r1, r3
 8002566:	482f      	ldr	r0, [pc, #188]	@ (8002624 <MX_GPIO_Init+0x56c>)
 8002568:	f004 fb64 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800256c:	2332      	movs	r3, #50	@ 0x32
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257c:	230b      	movs	r3, #11
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	4827      	ldr	r0, [pc, #156]	@ (8002624 <MX_GPIO_Init+0x56c>)
 8002588:	f004 fb54 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800258c:	2304      	movs	r3, #4
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800259c:	2309      	movs	r3, #9
 800259e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a4:	4619      	mov	r1, r3
 80025a6:	4822      	ldr	r0, [pc, #136]	@ (8002630 <MX_GPIO_Init+0x578>)
 80025a8:	f004 fb44 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80025ac:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025be:	2309      	movs	r3, #9
 80025c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025c6:	4619      	mov	r1, r3
 80025c8:	4815      	ldr	r0, [pc, #84]	@ (8002620 <MX_GPIO_Init+0x568>)
 80025ca:	f004 fb33 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025ce:	2386      	movs	r3, #134	@ 0x86
 80025d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025de:	230b      	movs	r3, #11
 80025e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025e6:	4619      	mov	r1, r3
 80025e8:	4812      	ldr	r0, [pc, #72]	@ (8002634 <MX_GPIO_Init+0x57c>)
 80025ea:	f004 fb23 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80025ee:	2328      	movs	r3, #40	@ 0x28
 80025f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025fe:	230a      	movs	r3, #10
 8002600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002606:	4619      	mov	r1, r3
 8002608:	480a      	ldr	r0, [pc, #40]	@ (8002634 <MX_GPIO_Init+0x57c>)
 800260a:	f004 fb13 	bl	8006c34 <HAL_GPIO_Init>

}
 800260e:	bf00      	nop
 8002610:	3740      	adds	r7, #64	@ 0x40
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40022000 	.word	0x40022000
 800261c:	40021800 	.word	0x40021800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	40020800 	.word	0x40020800
 8002628:	40022800 	.word	0x40022800
 800262c:	40021c00 	.word	0x40021c00
 8002630:	40020400 	.word	0x40020400
 8002634:	40020000 	.word	0x40020000

08002638 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <MX_I2C1_Init+0x74>)
 800263e:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <MX_I2C1_Init+0x78>)
 8002640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002642:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002644:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <MX_I2C1_Init+0x7c>)
 8002646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002648:	4b18      	ldr	r3, [pc, #96]	@ (80026ac <MX_I2C1_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800264e:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002650:	2201      	movs	r2, #1
 8002652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002654:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800265a:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <MX_I2C1_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <MX_I2C1_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002672:	480e      	ldr	r0, [pc, #56]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002674:	f004 fdb0 	bl	80071d8 <HAL_I2C_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800267e:	f000 fbc1 	bl	8002e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002682:	2100      	movs	r1, #0
 8002684:	4809      	ldr	r0, [pc, #36]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002686:	f005 fb3d 	bl	8007d04 <HAL_I2CEx_ConfigAnalogFilter>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002690:	f000 fbb8 	bl	8002e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002694:	2100      	movs	r1, #0
 8002696:	4805      	ldr	r0, [pc, #20]	@ (80026ac <MX_I2C1_Init+0x74>)
 8002698:	f005 fb7f 	bl	8007d9a <HAL_I2CEx_ConfigDigitalFilter>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026a2:	f000 fbaf 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000670 	.word	0x20000670
 80026b0:	40005400 	.word	0x40005400
 80026b4:	00c0eaff 	.word	0x00c0eaff

080026b8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <MX_I2C3_Init+0x74>)
 80026be:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <MX_I2C3_Init+0x78>)
 80026c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <MX_I2C3_Init+0x74>)
 80026c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002734 <MX_I2C3_Init+0x7c>)
 80026c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80026c8:	4b18      	ldr	r3, [pc, #96]	@ (800272c <MX_I2C3_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ce:	4b17      	ldr	r3, [pc, #92]	@ (800272c <MX_I2C3_Init+0x74>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d4:	4b15      	ldr	r3, [pc, #84]	@ (800272c <MX_I2C3_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026da:	4b14      	ldr	r3, [pc, #80]	@ (800272c <MX_I2C3_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e0:	4b12      	ldr	r3, [pc, #72]	@ (800272c <MX_I2C3_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e6:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_I2C3_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <MX_I2C3_Init+0x74>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026f2:	480e      	ldr	r0, [pc, #56]	@ (800272c <MX_I2C3_Init+0x74>)
 80026f4:	f004 fd70 	bl	80071d8 <HAL_I2C_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026fe:	f000 fb81 	bl	8002e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002702:	2100      	movs	r1, #0
 8002704:	4809      	ldr	r0, [pc, #36]	@ (800272c <MX_I2C3_Init+0x74>)
 8002706:	f005 fafd 	bl	8007d04 <HAL_I2CEx_ConfigAnalogFilter>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002710:	f000 fb78 	bl	8002e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002714:	2100      	movs	r1, #0
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <MX_I2C3_Init+0x74>)
 8002718:	f005 fb3f 	bl	8007d9a <HAL_I2CEx_ConfigDigitalFilter>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002722:	f000 fb6f 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200006c4 	.word	0x200006c4
 8002730:	40005c00 	.word	0x40005c00
 8002734:	00c0eaff 	.word	0x00c0eaff

08002738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b0ac      	sub	sp, #176	@ 0xb0
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	2284      	movs	r2, #132	@ 0x84
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f00b fb74 	bl	800de46 <memset>
  if(i2cHandle->Instance==I2C1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a44      	ldr	r2, [pc, #272]	@ (8002874 <HAL_I2C_MspInit+0x13c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d13d      	bne.n	80027e4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002768:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800276c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800276e:	2300      	movs	r3, #0
 8002770:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002772:	f107 0318 	add.w	r3, r7, #24
 8002776:	4618      	mov	r0, r3
 8002778:	f006 fbf0 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002782:	f000 fb3f 	bl	8002e04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b3c      	ldr	r3, [pc, #240]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a3b      	ldr	r2, [pc, #236]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800279e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a6:	2312      	movs	r3, #18
 80027a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b8:	2304      	movs	r3, #4
 80027ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027c2:	4619      	mov	r1, r3
 80027c4:	482d      	ldr	r0, [pc, #180]	@ (800287c <HAL_I2C_MspInit+0x144>)
 80027c6:	f004 fa35 	bl	8006c34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 80027d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d6:	4b28      	ldr	r3, [pc, #160]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80027e2:	e042      	b.n	800286a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a25      	ldr	r2, [pc, #148]	@ (8002880 <HAL_I2C_MspInit+0x148>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d13d      	bne.n	800286a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80027ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fa:	f107 0318 	add.w	r3, r7, #24
 80027fe:	4618      	mov	r0, r3
 8002800:	f006 fbac 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800280a:	f000 fafb 	bl	8002e04 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	4a19      	ldr	r2, [pc, #100]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 8002814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002818:	6313      	str	r3, [r2, #48]	@ 0x30
 800281a:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002826:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800282a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800282e:	2312      	movs	r3, #18
 8002830:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002834:	2301      	movs	r3, #1
 8002836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002840:	2304      	movs	r3, #4
 8002842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002846:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800284a:	4619      	mov	r1, r3
 800284c:	480d      	ldr	r0, [pc, #52]	@ (8002884 <HAL_I2C_MspInit+0x14c>)
 800284e:	f004 f9f1 	bl	8006c34 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a08      	ldr	r2, [pc, #32]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 8002858:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <HAL_I2C_MspInit+0x140>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
}
 800286a:	bf00      	nop
 800286c:	37b0      	adds	r7, #176	@ 0xb0
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40005400 	.word	0x40005400
 8002878:	40023800 	.word	0x40023800
 800287c:	40020400 	.word	0x40020400
 8002880:	40005c00 	.word	0x40005c00
 8002884:	40021c00 	.word	0x40021c00

08002888 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <HAL_I2C_MspDeInit+0x64>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d110      	bne.n	80028bc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_I2C_MspDeInit+0x68>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <HAL_I2C_MspDeInit+0x68>)
 80028a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80028a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028aa:	4812      	ldr	r0, [pc, #72]	@ (80028f4 <HAL_I2C_MspDeInit+0x6c>)
 80028ac:	f004 fb6e 	bl	8006f8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80028b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028b4:	480f      	ldr	r0, [pc, #60]	@ (80028f4 <HAL_I2C_MspDeInit+0x6c>)
 80028b6:	f004 fb69 	bl	8006f8c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80028ba:	e013      	b.n	80028e4 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <HAL_I2C_MspDeInit+0x70>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10e      	bne.n	80028e4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_I2C_MspDeInit+0x68>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <HAL_I2C_MspDeInit+0x68>)
 80028cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028d0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	4809      	ldr	r0, [pc, #36]	@ (80028fc <HAL_I2C_MspDeInit+0x74>)
 80028d6:	f004 fb59 	bl	8006f8c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80028da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028de:	4807      	ldr	r0, [pc, #28]	@ (80028fc <HAL_I2C_MspDeInit+0x74>)
 80028e0:	f004 fb54 	bl	8006f8c <HAL_GPIO_DeInit>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40005400 	.word	0x40005400
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40005c00 	.word	0x40005c00
 80028fc:	40021c00 	.word	0x40021c00

08002900 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	@ 0x38
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2234      	movs	r2, #52	@ 0x34
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f00b fa9a 	bl	800de46 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002912:	4b3a      	ldr	r3, [pc, #232]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002914:	4a3a      	ldr	r2, [pc, #232]	@ (8002a00 <MX_LTDC_Init+0x100>)
 8002916:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002918:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <MX_LTDC_Init+0xfc>)
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800291e:	4b37      	ldr	r3, [pc, #220]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002924:	4b35      	ldr	r3, [pc, #212]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <MX_LTDC_Init+0xfc>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002930:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002932:	2228      	movs	r2, #40	@ 0x28
 8002934:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002938:	2209      	movs	r2, #9
 800293a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800293c:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <MX_LTDC_Init+0xfc>)
 800293e:	2235      	movs	r2, #53	@ 0x35
 8002940:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002942:	4b2e      	ldr	r3, [pc, #184]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002944:	220b      	movs	r2, #11
 8002946:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002948:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <MX_LTDC_Init+0xfc>)
 800294a:	f240 2215 	movw	r2, #533	@ 0x215
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002950:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002952:	f240 121b 	movw	r2, #283	@ 0x11b
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002958:	4b28      	ldr	r3, [pc, #160]	@ (80029fc <MX_LTDC_Init+0xfc>)
 800295a:	f240 2235 	movw	r2, #565	@ 0x235
 800295e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002960:	4b26      	ldr	r3, [pc, #152]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002962:	f240 121d 	movw	r2, #285	@ 0x11d
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002968:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <MX_LTDC_Init+0xfc>)
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002970:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002978:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <MX_LTDC_Init+0xfc>)
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002980:	481e      	ldr	r0, [pc, #120]	@ (80029fc <MX_LTDC_Init+0xfc>)
 8002982:	f005 fa57 	bl	8007e34 <HAL_LTDC_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800298c:	f000 fa3a 	bl	8002e04 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002994:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002998:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800299e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80029a2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80029a4:	2302      	movs	r3, #2
 80029a6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80029a8:	23ff      	movs	r3, #255	@ 0xff
 80029aa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80029b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029b4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80029b6:	2307      	movs	r3, #7
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80029ba:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80029c0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80029c6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2200      	movs	r2, #0
 80029e2:	4619      	mov	r1, r3
 80029e4:	4805      	ldr	r0, [pc, #20]	@ (80029fc <MX_LTDC_Init+0xfc>)
 80029e6:	f005 fbb7 	bl	8008158 <HAL_LTDC_ConfigLayer>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80029f0:	f000 fa08 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	3738      	adds	r7, #56	@ 0x38
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000718 	.word	0x20000718
 8002a00:	40016800 	.word	0x40016800

08002a04 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0ae      	sub	sp, #184	@ 0xb8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a1c:	f107 0320 	add.w	r3, r7, #32
 8002a20:	2284      	movs	r2, #132	@ 0x84
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00b fa0e 	bl	800de46 <memset>
  if(ltdcHandle->Instance==LTDC)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bec <HAL_LTDC_MspInit+0x1e8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	f040 80d6 	bne.w	8002be2 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a36:	2308      	movs	r3, #8
 8002a38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002a3a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002a40:	2305      	movs	r3, #5
 8002a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002a44:	2302      	movs	r3, #2
 8002a46:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a56:	f107 0320 	add.w	r3, r7, #32
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f006 fa7e 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8002a66:	f000 f9cd 	bl	8002e04 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a6a:	4b61      	ldr	r3, [pc, #388]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	4a60      	ldr	r2, [pc, #384]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002a70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a76:	4b5e      	ldr	r3, [pc, #376]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a82:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	4a5a      	ldr	r2, [pc, #360]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002a88:	f043 0310 	orr.w	r3, r3, #16
 8002a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8e:	4b58      	ldr	r3, [pc, #352]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a9a:	4b55      	ldr	r3, [pc, #340]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a54      	ldr	r2, [pc, #336]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002aa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002ab8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aca:	4b49      	ldr	r3, [pc, #292]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a48      	ldr	r2, [pc, #288]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b46      	ldr	r3, [pc, #280]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ae2:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	4a42      	ldr	r2, [pc, #264]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aee:	4b40      	ldr	r3, [pc, #256]	@ (8002bf0 <HAL_LTDC_MspInit+0x1ec>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002afa:	2310      	movs	r3, #16
 8002afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b12:	230e      	movs	r3, #14
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4835      	ldr	r0, [pc, #212]	@ (8002bf4 <HAL_LTDC_MspInit+0x1f0>)
 8002b20:	f004 f888 	bl	8006c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002b24:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002b28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b3e:	230e      	movs	r3, #14
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	482b      	ldr	r0, [pc, #172]	@ (8002bf8 <HAL_LTDC_MspInit+0x1f4>)
 8002b4c:	f004 f872 	bl	8006c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002b50:	23f7      	movs	r3, #247	@ 0xf7
 8002b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b68:	230e      	movs	r3, #14
 8002b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b6e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4821      	ldr	r0, [pc, #132]	@ (8002bfc <HAL_LTDC_MspInit+0x1f8>)
 8002b76:	f004 f85d 	bl	8006c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b94:	2309      	movs	r3, #9
 8002b96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4817      	ldr	r0, [pc, #92]	@ (8002c00 <HAL_LTDC_MspInit+0x1fc>)
 8002ba2:	f004 f847 	bl	8006c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002ba6:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc0:	230e      	movs	r3, #14
 8002bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bc6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480d      	ldr	r0, [pc, #52]	@ (8002c04 <HAL_LTDC_MspInit+0x200>)
 8002bce:	f004 f831 	bl	8006c34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2105      	movs	r1, #5
 8002bd6:	2058      	movs	r0, #88	@ 0x58
 8002bd8:	f003 f9c8 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002bdc:	2058      	movs	r0, #88	@ 0x58
 8002bde:	f003 f9e1 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002be2:	bf00      	nop
 8002be4:	37b8      	adds	r7, #184	@ 0xb8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40016800 	.word	0x40016800
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40022400 	.word	0x40022400
 8002bfc:	40022800 	.word	0x40022800
 8002c00:	40021800 	.word	0x40021800
 8002c04:	40022000 	.word	0x40022000

08002c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c08:	b598      	push	{r3, r4, r7, lr}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c0c:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <main+0xe4>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c12:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <main+0xe4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c18:	f002 fca5 	bl	8005566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c1c:	f000 f86e 	bl	8002cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c20:	f7ff fa4a 	bl	80020b8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8002c24:	f7fd fd0e 	bl	8000644 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8002c28:	f7fd fe3e 	bl	80008a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002c2c:	f7fd fe94 	bl	8000958 <MX_FMC_Init>
  MX_I2C1_Init();
 8002c30:	f7ff fd02 	bl	8002638 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002c34:	f7ff fd40 	bl	80026b8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002c38:	f7ff fe62 	bl	8002900 <MX_LTDC_Init>
  MX_RTC_Init();
 8002c3c:	f000 f8e8 	bl	8002e10 <MX_RTC_Init>
  MX_SPI2_Init();
 8002c40:	f000 f9b8 	bl	8002fb4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002c44:	f002 f8a2 	bl	8004d8c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c48:	f002 f8f4 	bl	8004e34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c4c:	f002 f940 	bl	8004ed0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002c50:	f002 f98c 	bl	8004f6c <MX_TIM5_Init>
  MX_TIM8_Init();
 8002c54:	f002 f9d8 	bl	8005008 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002c58:	f002 faec 	bl	8005234 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002c5c:	f002 fb1a 	bl	8005294 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002c60:	f7fd fc9e 	bl	80005a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8002c64:	f7fd fdae 	bl	80007c4 <MX_DAC_Init>
  MX_UART7_Init();
 8002c68:	f002 fab4 	bl	80051d4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8002c6c:	f000 fbe6 	bl	800343c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002c70:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8002c74:	2000      	movs	r0, #0
 8002c76:	f000 fc79 	bl	800356c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8002c7a:	f000 fc4f 	bl	800351c <BSP_LCD_GetXSize>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	f000 fc60 	bl	8003544 <BSP_LCD_GetYSize>
 8002c84:	4603      	mov	r3, r0
 8002c86:	fb04 f303 	mul.w	r3, r4, r3
 8002c8a:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4619      	mov	r1, r3
 8002c92:	2001      	movs	r0, #1
 8002c94:	f000 fc6a 	bl	800356c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8002c98:	f001 f82a 	bl	8003cf0 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f000 fcc5 	bl	800362c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8002ca2:	4813      	ldr	r0, [pc, #76]	@ (8002cf0 <main+0xe8>)
 8002ca4:	f000 fd1e 	bl	80036e4 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f000 fcbf 	bl	800362c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f000 fd18 	bl	80036e4 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8002cb4:	480f      	ldr	r0, [pc, #60]	@ (8002cf4 <main+0xec>)
 8002cb6:	f000 fcfb 	bl	80036b0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002cba:	480f      	ldr	r0, [pc, #60]	@ (8002cf8 <main+0xf0>)
 8002cbc:	f000 fcc6 	bl	800364c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f000 fcdb 	bl	800367c <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002cc6:	f000 fc29 	bl	800351c <BSP_LCD_GetXSize>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b29c      	uxth	r4, r3
 8002cce:	f000 fc39 	bl	8003544 <BSP_LCD_GetYSize>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f001 fc1b 	bl	8004514 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002cde:	f7fd ff3f 	bl	8000b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002ce2:	f008 fc71 	bl	800b5c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ce6:	bf00      	nop
 8002ce8:	e7fd      	b.n	8002ce6 <main+0xde>
 8002cea:	bf00      	nop
 8002cec:	200007c0 	.word	0x200007c0
 8002cf0:	ff81cd4b 	.word	0xff81cd4b
 8002cf4:	2000003c 	.word	0x2000003c
 8002cf8:	ffa52a2a 	.word	0xffa52a2a

08002cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b094      	sub	sp, #80	@ 0x50
 8002d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d02:	f107 0320 	add.w	r3, r7, #32
 8002d06:	2230      	movs	r2, #48	@ 0x30
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f00b f89b 	bl	800de46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d20:	f005 fc00 	bl	8008524 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd8 <SystemClock_Config+0xdc>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd8 <SystemClock_Config+0xdc>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d30:	4b29      	ldr	r3, [pc, #164]	@ (8002dd8 <SystemClock_Config+0xdc>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d3c:	4b27      	ldr	r3, [pc, #156]	@ (8002ddc <SystemClock_Config+0xe0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a26      	ldr	r2, [pc, #152]	@ (8002ddc <SystemClock_Config+0xe0>)
 8002d42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <SystemClock_Config+0xe0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d54:	2309      	movs	r3, #9
 8002d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d62:	2302      	movs	r3, #2
 8002d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002d6c:	2319      	movs	r3, #25
 8002d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002d70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002d74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d76:	2302      	movs	r3, #2
 8002d78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002d7a:	2309      	movs	r3, #9
 8002d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d7e:	f107 0320 	add.w	r3, r7, #32
 8002d82:	4618      	mov	r0, r3
 8002d84:	f005 fc2e 	bl	80085e4 <HAL_RCC_OscConfig>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d8e:	f000 f839 	bl	8002e04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d92:	f005 fbd7 	bl	8008544 <HAL_PWREx_EnableOverDrive>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002d9c:	f000 f832 	bl	8002e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da0:	230f      	movs	r3, #15
 8002da2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002da4:	2302      	movs	r3, #2
 8002da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002db0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002db6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	2106      	movs	r1, #6
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f005 feb4 	bl	8008b2c <HAL_RCC_ClockConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002dca:	f000 f81b 	bl	8002e04 <Error_Handler>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	3750      	adds	r7, #80	@ 0x50
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40007000 	.word	0x40007000

08002de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002df2:	f002 fbc5 	bl	8005580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40001000 	.word	0x40001000

08002e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
}
 8002e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <Error_Handler+0x8>

08002e10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b090      	sub	sp, #64	@ 0x40
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002e26:	2300      	movs	r3, #0
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	2228      	movs	r2, #40	@ 0x28
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00b f808 	bl	800de46 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e36:	4b46      	ldr	r3, [pc, #280]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e38:	4a46      	ldr	r2, [pc, #280]	@ (8002f54 <MX_RTC_Init+0x144>)
 8002e3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e3c:	4b44      	ldr	r3, [pc, #272]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002e42:	4b43      	ldr	r3, [pc, #268]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e44:	227f      	movs	r2, #127	@ 0x7f
 8002e46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002e48:	4b41      	ldr	r3, [pc, #260]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e4a:	22ff      	movs	r2, #255	@ 0xff
 8002e4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e4e:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e54:	4b3e      	ldr	r3, [pc, #248]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e60:	483b      	ldr	r0, [pc, #236]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e62:	f006 fc6b 	bl	800973c <HAL_RTC_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002e6c:	f7ff ffca 	bl	8002e04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4619      	mov	r1, r3
 8002e92:	482f      	ldr	r0, [pc, #188]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002e94:	f006 fcd6 	bl	8009844 <HAL_RTC_SetTime>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002e9e:	f7ff ffb1 	bl	8002e04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4823      	ldr	r0, [pc, #140]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002ec4:	f006 fd58 	bl	8009978 <HAL_RTC_SetDate>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002ece:	f7ff ff99 	bl	8002e04 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f02:	463b      	mov	r3, r7
 8002f04:	2201      	movs	r2, #1
 8002f06:	4619      	mov	r1, r3
 8002f08:	4811      	ldr	r0, [pc, #68]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002f0a:	f006 fdb9 	bl	8009a80 <HAL_RTC_SetAlarm>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002f14:	f7ff ff76 	bl	8002e04 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002f18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f1e:	463b      	mov	r3, r7
 8002f20:	2201      	movs	r2, #1
 8002f22:	4619      	mov	r1, r3
 8002f24:	480a      	ldr	r0, [pc, #40]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002f26:	f006 fdab 	bl	8009a80 <HAL_RTC_SetAlarm>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002f30:	f7ff ff68 	bl	8002e04 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002f34:	2202      	movs	r2, #2
 8002f36:	2100      	movs	r1, #0
 8002f38:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <MX_RTC_Init+0x140>)
 8002f3a:	f006 ff6d 	bl	8009e18 <HAL_RTCEx_SetTimeStamp>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002f44:	f7ff ff5e 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	3740      	adds	r7, #64	@ 0x40
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200007d0 	.word	0x200007d0
 8002f54:	40002800 	.word	0x40002800

08002f58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0a4      	sub	sp, #144	@ 0x90
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	2284      	movs	r2, #132	@ 0x84
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00a ff6c 	bl	800de46 <memset>
  if(rtcHandle->Instance==RTC)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a0e      	ldr	r2, [pc, #56]	@ (8002fac <HAL_RTC_MspInit+0x54>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d114      	bne.n	8002fa2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 ffe8 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002f92:	f7ff ff37 	bl	8002e04 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RTC_MspInit+0x58>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a05      	ldr	r2, [pc, #20]	@ (8002fb0 <HAL_RTC_MspInit+0x58>)
 8002f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3790      	adds	r7, #144	@ 0x90
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40002800 	.word	0x40002800
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fba:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <MX_SPI2_Init+0x78>)
 8002fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002fd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fda:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fe2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002fe6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <MX_SPI2_Init+0x74>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003000:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <MX_SPI2_Init+0x74>)
 8003002:	2207      	movs	r2, #7
 8003004:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003006:	4b08      	ldr	r3, [pc, #32]	@ (8003028 <MX_SPI2_Init+0x74>)
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <MX_SPI2_Init+0x74>)
 800300e:	2208      	movs	r2, #8
 8003010:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003012:	4805      	ldr	r0, [pc, #20]	@ (8003028 <MX_SPI2_Init+0x74>)
 8003014:	f006 fff9 	bl	800a00a <HAL_SPI_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800301e:	f7ff fef1 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200007f0 	.word	0x200007f0
 800302c:	40003800 	.word	0x40003800

08003030 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	@ 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a25      	ldr	r2, [pc, #148]	@ (80030e4 <HAL_SPI_MspInit+0xb4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d144      	bne.n	80030dc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003052:	4b25      	ldr	r3, [pc, #148]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4a24      	ldr	r2, [pc, #144]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800305c:	6413      	str	r3, [r2, #64]	@ 0x40
 800305e:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800306a:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	@ 0x30
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <HAL_SPI_MspInit+0xb8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800309a:	2303      	movs	r3, #3
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a6:	2303      	movs	r3, #3
 80030a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030aa:	2305      	movs	r3, #5
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	4619      	mov	r1, r3
 80030b4:	480d      	ldr	r0, [pc, #52]	@ (80030ec <HAL_SPI_MspInit+0xbc>)
 80030b6:	f003 fdbd 	bl	8006c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80030ba:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80030be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030cc:	2305      	movs	r3, #5
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4619      	mov	r1, r3
 80030d6:	4806      	ldr	r0, [pc, #24]	@ (80030f0 <HAL_SPI_MspInit+0xc0>)
 80030d8:	f003 fdac 	bl	8006c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80030dc:	bf00      	nop
 80030de:	3728      	adds	r7, #40	@ 0x28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40003800 	.word	0x40003800
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40020400 	.word	0x40020400

080030f4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	@ 0x30
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a51      	ldr	r2, [pc, #324]	@ (8003244 <I2Cx_MspInit+0x150>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d14d      	bne.n	80031a0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003104:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	4a4f      	ldr	r2, [pc, #316]	@ (8003248 <I2Cx_MspInit+0x154>)
 800310a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800310e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003110:	4b4d      	ldr	r3, [pc, #308]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003120:	2312      	movs	r3, #18
 8003122:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003128:	2302      	movs	r3, #2
 800312a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800312c:	2304      	movs	r3, #4
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	4845      	ldr	r0, [pc, #276]	@ (800324c <I2Cx_MspInit+0x158>)
 8003138:	f003 fd7c 	bl	8006c34 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800313c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	4840      	ldr	r0, [pc, #256]	@ (800324c <I2Cx_MspInit+0x158>)
 800314a:	f003 fd73 	bl	8006c34 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800314e:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	4a3d      	ldr	r2, [pc, #244]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003154:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003158:	6413      	str	r3, [r2, #64]	@ 0x40
 800315a:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <I2Cx_MspInit+0x154>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003166:	4b38      	ldr	r3, [pc, #224]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4a37      	ldr	r2, [pc, #220]	@ (8003248 <I2Cx_MspInit+0x154>)
 800316c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003170:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003172:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a34      	ldr	r2, [pc, #208]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003178:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800317c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	210f      	movs	r1, #15
 8003182:	2048      	movs	r0, #72	@ 0x48
 8003184:	f002 fef2 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003188:	2048      	movs	r0, #72	@ 0x48
 800318a:	f002 ff0b 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	210f      	movs	r1, #15
 8003192:	2049      	movs	r0, #73	@ 0x49
 8003194:	f002 feea 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003198:	2049      	movs	r0, #73	@ 0x49
 800319a:	f002 ff03 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800319e:	e04d      	b.n	800323c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80031a0:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <I2Cx_MspInit+0x154>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	4a28      	ldr	r2, [pc, #160]	@ (8003248 <I2Cx_MspInit+0x154>)
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ac:	4b26      	ldr	r3, [pc, #152]	@ (8003248 <I2Cx_MspInit+0x154>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80031b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031bc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80031be:	2312      	movs	r3, #18
 80031c0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80031c6:	2302      	movs	r3, #2
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80031ca:	2304      	movs	r3, #4
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80031ce:	f107 031c 	add.w	r3, r7, #28
 80031d2:	4619      	mov	r1, r3
 80031d4:	481e      	ldr	r0, [pc, #120]	@ (8003250 <I2Cx_MspInit+0x15c>)
 80031d6:	f003 fd2d 	bl	8006c34 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80031da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	481a      	ldr	r0, [pc, #104]	@ (8003250 <I2Cx_MspInit+0x15c>)
 80031e8:	f003 fd24 	bl	8006c34 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80031ec:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <I2Cx_MspInit+0x154>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	4a15      	ldr	r2, [pc, #84]	@ (8003248 <I2Cx_MspInit+0x154>)
 80031f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <I2Cx_MspInit+0x154>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003204:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a0f      	ldr	r2, [pc, #60]	@ (8003248 <I2Cx_MspInit+0x154>)
 800320a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800320e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003210:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4a0c      	ldr	r2, [pc, #48]	@ (8003248 <I2Cx_MspInit+0x154>)
 8003216:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800321a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	210f      	movs	r1, #15
 8003220:	201f      	movs	r0, #31
 8003222:	f002 fea3 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003226:	201f      	movs	r0, #31
 8003228:	f002 febc 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	210f      	movs	r1, #15
 8003230:	2020      	movs	r0, #32
 8003232:	f002 fe9b 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003236:	2020      	movs	r0, #32
 8003238:	f002 feb4 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 800323c:	bf00      	nop
 800323e:	3730      	adds	r7, #48	@ 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000854 	.word	0x20000854
 8003248:	40023800 	.word	0x40023800
 800324c:	40021c00 	.word	0x40021c00
 8003250:	40020400 	.word	0x40020400

08003254 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f004 faa9 	bl	80077b4 <HAL_I2C_GetState>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d125      	bne.n	80032b4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a14      	ldr	r2, [pc, #80]	@ (80032bc <I2Cx_Init+0x68>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a13      	ldr	r2, [pc, #76]	@ (80032c0 <I2Cx_Init+0x6c>)
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e002      	b.n	800327e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a12      	ldr	r2, [pc, #72]	@ (80032c4 <I2Cx_Init+0x70>)
 800327c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a11      	ldr	r2, [pc, #68]	@ (80032c8 <I2Cx_Init+0x74>)
 8003282:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff23 	bl	80030f4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f003 ff92 	bl	80071d8 <HAL_I2C_Init>
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000854 	.word	0x20000854
 80032c0:	40005c00 	.word	0x40005c00
 80032c4:	40005400 	.word	0x40005400
 80032c8:	40912732 	.word	0x40912732

080032cc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af04      	add	r7, sp, #16
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	4608      	mov	r0, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	72fb      	strb	r3, [r7, #11]
 80032de:	460b      	mov	r3, r1
 80032e0:	813b      	strh	r3, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	b299      	uxth	r1, r3
 80032ee:	88f8      	ldrh	r0, [r7, #6]
 80032f0:	893a      	ldrh	r2, [r7, #8]
 80032f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f6:	9302      	str	r3, [sp, #8]
 80032f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4603      	mov	r3, r0
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f004 f93c 	bl	8007580 <HAL_I2C_Mem_Read>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d004      	beq.n	800331c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	4619      	mov	r1, r3
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f832 	bl	8003380 <I2Cx_Error>
  }
  return status;    
 800331c:	7dfb      	ldrb	r3, [r7, #23]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b08a      	sub	sp, #40	@ 0x28
 800332a:	af04      	add	r7, sp, #16
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	4608      	mov	r0, r1
 8003330:	4611      	mov	r1, r2
 8003332:	461a      	mov	r2, r3
 8003334:	4603      	mov	r3, r0
 8003336:	72fb      	strb	r3, [r7, #11]
 8003338:	460b      	mov	r3, r1
 800333a:	813b      	strh	r3, [r7, #8]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	b299      	uxth	r1, r3
 8003348:	88f8      	ldrh	r0, [r7, #6]
 800334a:	893a      	ldrh	r2, [r7, #8]
 800334c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4603      	mov	r3, r0
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f003 fffb 	bl	8007358 <HAL_I2C_Mem_Write>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	4619      	mov	r1, r3
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f805 	bl	8003380 <I2Cx_Error>
  }
  return status;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f003 ffb3 	bl	80072f8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff5e 	bl	8003254 <I2Cx_Init>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80033a4:	4802      	ldr	r0, [pc, #8]	@ (80033b0 <TS_IO_Init+0x10>)
 80033a6:	f7ff ff55 	bl	8003254 <I2Cx_Init>
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000854 	.word	0x20000854

080033b4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
 80033be:	460b      	mov	r3, r1
 80033c0:	71bb      	strb	r3, [r7, #6]
 80033c2:	4613      	mov	r3, r2
 80033c4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80033c6:	79bb      	ldrb	r3, [r7, #6]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	79f9      	ldrb	r1, [r7, #7]
 80033cc:	2301      	movs	r3, #1
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	1d7b      	adds	r3, r7, #5
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2301      	movs	r3, #1
 80033d6:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <TS_IO_Write+0x30>)
 80033d8:	f7ff ffa5 	bl	8003326 <I2Cx_WriteMultiple>
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000854 	.word	0x20000854

080033e8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	4603      	mov	r3, r0
 80033f0:	460a      	mov	r2, r1
 80033f2:	71fb      	strb	r3, [r7, #7]
 80033f4:	4613      	mov	r3, r2
 80033f6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80033fc:	79bb      	ldrb	r3, [r7, #6]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	79f9      	ldrb	r1, [r7, #7]
 8003402:	2301      	movs	r3, #1
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	f107 030f 	add.w	r3, r7, #15
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2301      	movs	r3, #1
 800340e:	4804      	ldr	r0, [pc, #16]	@ (8003420 <TS_IO_Read+0x38>)
 8003410:	f7ff ff5c 	bl	80032cc <I2Cx_ReadMultiple>

  return read_value;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000854 	.word	0x20000854

08003424 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f002 f8c7 	bl	80055c0 <HAL_Delay>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003440:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <BSP_LCD_Init+0xcc>)
 8003442:	2228      	movs	r2, #40	@ 0x28
 8003444:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003446:	4b30      	ldr	r3, [pc, #192]	@ (8003508 <BSP_LCD_Init+0xcc>)
 8003448:	2209      	movs	r2, #9
 800344a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800344c:	4b2e      	ldr	r3, [pc, #184]	@ (8003508 <BSP_LCD_Init+0xcc>)
 800344e:	2235      	movs	r2, #53	@ 0x35
 8003450:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003452:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <BSP_LCD_Init+0xcc>)
 8003454:	220b      	movs	r2, #11
 8003456:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003458:	4b2b      	ldr	r3, [pc, #172]	@ (8003508 <BSP_LCD_Init+0xcc>)
 800345a:	f240 121b 	movw	r2, #283	@ 0x11b
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003460:	4b29      	ldr	r3, [pc, #164]	@ (8003508 <BSP_LCD_Init+0xcc>)
 8003462:	f240 2215 	movw	r2, #533	@ 0x215
 8003466:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003468:	4b27      	ldr	r3, [pc, #156]	@ (8003508 <BSP_LCD_Init+0xcc>)
 800346a:	f240 121d 	movw	r2, #285	@ 0x11d
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003470:	4b25      	ldr	r3, [pc, #148]	@ (8003508 <BSP_LCD_Init+0xcc>)
 8003472:	f240 2235 	movw	r2, #565	@ 0x235
 8003476:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003478:	2100      	movs	r1, #0
 800347a:	4823      	ldr	r0, [pc, #140]	@ (8003508 <BSP_LCD_Init+0xcc>)
 800347c:	f000 fd30 	bl	8003ee0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003480:	4b21      	ldr	r3, [pc, #132]	@ (8003508 <BSP_LCD_Init+0xcc>)
 8003482:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003488:	4b1f      	ldr	r3, [pc, #124]	@ (8003508 <BSP_LCD_Init+0xcc>)
 800348a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800348e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003490:	4b1d      	ldr	r3, [pc, #116]	@ (8003508 <BSP_LCD_Init+0xcc>)
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003498:	4b1b      	ldr	r3, [pc, #108]	@ (8003508 <BSP_LCD_Init+0xcc>)
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80034a0:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80034a8:	4b17      	ldr	r3, [pc, #92]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80034ae:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80034ba:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	@ (800350c <BSP_LCD_Init+0xd0>)
 80034c4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80034c6:	4810      	ldr	r0, [pc, #64]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034c8:	f004 fe84 	bl	80081d4 <HAL_LTDC_GetState>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80034d2:	2100      	movs	r1, #0
 80034d4:	480c      	ldr	r0, [pc, #48]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034d6:	f000 fc29 	bl	8003d2c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80034da:	480b      	ldr	r0, [pc, #44]	@ (8003508 <BSP_LCD_Init+0xcc>)
 80034dc:	f004 fcaa 	bl	8007e34 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80034e0:	2201      	movs	r2, #1
 80034e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034e6:	480a      	ldr	r0, [pc, #40]	@ (8003510 <BSP_LCD_Init+0xd4>)
 80034e8:	f003 fe5c 	bl	80071a4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80034ec:	2201      	movs	r2, #1
 80034ee:	2108      	movs	r1, #8
 80034f0:	4808      	ldr	r0, [pc, #32]	@ (8003514 <BSP_LCD_Init+0xd8>)
 80034f2:	f003 fe57 	bl	80071a4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80034f6:	f000 fe57 	bl	80041a8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80034fa:	4807      	ldr	r0, [pc, #28]	@ (8003518 <BSP_LCD_Init+0xdc>)
 80034fc:	f000 f8d8 	bl	80036b0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200008a8 	.word	0x200008a8
 800350c:	40016800 	.word	0x40016800
 8003510:	40022000 	.word	0x40022000
 8003514:	40022800 	.word	0x40022800
 8003518:	20000034 	.word	0x20000034

0800351c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <BSP_LCD_GetXSize+0x20>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a06      	ldr	r2, [pc, #24]	@ (8003540 <BSP_LCD_GetXSize+0x24>)
 8003526:	2134      	movs	r1, #52	@ 0x34
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3360      	adds	r3, #96	@ 0x60
 8003530:	681b      	ldr	r3, [r3, #0]
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	20000990 	.word	0x20000990
 8003540:	200008a8 	.word	0x200008a8

08003544 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <BSP_LCD_GetYSize+0x20>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a06      	ldr	r2, [pc, #24]	@ (8003568 <BSP_LCD_GetYSize+0x24>)
 800354e:	2134      	movs	r1, #52	@ 0x34
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3364      	adds	r3, #100	@ 0x64
 8003558:	681b      	ldr	r3, [r3, #0]
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20000990 	.word	0x20000990
 8003568:	200008a8 	.word	0x200008a8

0800356c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800356c:	b580      	push	{r7, lr}
 800356e:	b090      	sub	sp, #64	@ 0x40
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	6039      	str	r1, [r7, #0]
 8003576:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800357c:	f7ff ffce 	bl	800351c <BSP_LCD_GetXSize>
 8003580:	4603      	mov	r3, r0
 8003582:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003588:	f7ff ffdc 	bl	8003544 <BSP_LCD_GetYSize>
 800358c:	4603      	mov	r3, r0
 800358e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003598:	23ff      	movs	r3, #255	@ 0xff
 800359a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80035b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80035b8:	2307      	movs	r3, #7
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80035bc:	f7ff ffae 	bl	800351c <BSP_LCD_GetXSize>
 80035c0:	4603      	mov	r3, r0
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80035c4:	f7ff ffbe 	bl	8003544 <BSP_LCD_GetYSize>
 80035c8:	4603      	mov	r3, r0
 80035ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	4619      	mov	r1, r3
 80035d4:	4812      	ldr	r0, [pc, #72]	@ (8003620 <BSP_LCD_LayerDefaultInit+0xb4>)
 80035d6:	f004 fdbf 	bl	8008158 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	4911      	ldr	r1, [pc, #68]	@ (8003624 <BSP_LCD_LayerDefaultInit+0xb8>)
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	3304      	adds	r3, #4
 80035ea:	f04f 32ff 	mov.w	r2, #4294967295
 80035ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	490c      	ldr	r1, [pc, #48]	@ (8003624 <BSP_LCD_LayerDefaultInit+0xb8>)
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3308      	adds	r3, #8
 8003600:	4a09      	ldr	r2, [pc, #36]	@ (8003628 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003602:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	4907      	ldr	r1, [pc, #28]	@ (8003624 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003616:	601a      	str	r2, [r3, #0]
}
 8003618:	bf00      	nop
 800361a:	3740      	adds	r7, #64	@ 0x40
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200008a8 	.word	0x200008a8
 8003624:	20000994 	.word	0x20000994
 8003628:	20000034 	.word	0x20000034

0800362c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003634:	4a04      	ldr	r2, [pc, #16]	@ (8003648 <BSP_LCD_SelectLayer+0x1c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
} 
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000990 	.word	0x20000990

0800364c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003654:	4b07      	ldr	r3, [pc, #28]	@ (8003674 <BSP_LCD_SetTextColor+0x28>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4907      	ldr	r1, [pc, #28]	@ (8003678 <BSP_LCD_SetTextColor+0x2c>)
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	20000990 	.word	0x20000990
 8003678:	20000994 	.word	0x20000994

0800367c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <BSP_LCD_SetBackColor+0x2c>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4908      	ldr	r1, [pc, #32]	@ (80036ac <BSP_LCD_SetBackColor+0x30>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3304      	adds	r3, #4
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000990 	.word	0x20000990
 80036ac:	20000994 	.word	0x20000994

080036b0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <BSP_LCD_SetFont+0x2c>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4908      	ldr	r1, [pc, #32]	@ (80036e0 <BSP_LCD_SetFont+0x30>)
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3308      	adds	r3, #8
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000990 	.word	0x20000990
 80036e0:	20000994 	.word	0x20000994

080036e4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80036ec:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <BSP_LCD_Clear+0x48>)
 80036ee:	681c      	ldr	r4, [r3, #0]
 80036f0:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <BSP_LCD_Clear+0x48>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003730 <BSP_LCD_Clear+0x4c>)
 80036f6:	2134      	movs	r1, #52	@ 0x34
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	335c      	adds	r3, #92	@ 0x5c
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461e      	mov	r6, r3
 8003704:	f7ff ff0a 	bl	800351c <BSP_LCD_GetXSize>
 8003708:	4605      	mov	r5, r0
 800370a:	f7ff ff1b 	bl	8003544 <BSP_LCD_GetYSize>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	2300      	movs	r3, #0
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	462a      	mov	r2, r5
 800371c:	4631      	mov	r1, r6
 800371e:	4620      	mov	r0, r4
 8003720:	f000 fcb2 	bl	8004088 <LL_FillBuffer>
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800372c:	20000990 	.word	0x20000990
 8003730:	200008a8 	.word	0x200008a8

08003734 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
 800373e:	460b      	mov	r3, r1
 8003740:	80bb      	strh	r3, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003746:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <BSP_LCD_DisplayChar+0x80>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	491b      	ldr	r1, [pc, #108]	@ (80037b8 <BSP_LCD_DisplayChar+0x84>)
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3308      	adds	r3, #8
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6819      	ldr	r1, [r3, #0]
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003762:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <BSP_LCD_DisplayChar+0x80>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4c14      	ldr	r4, [pc, #80]	@ (80037b8 <BSP_LCD_DisplayChar+0x84>)
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4423      	add	r3, r4
 8003772:	3308      	adds	r3, #8
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003778:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800377c:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <BSP_LCD_DisplayChar+0x80>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4c0d      	ldr	r4, [pc, #52]	@ (80037b8 <BSP_LCD_DisplayChar+0x84>)
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4423      	add	r3, r4
 800378c:	3308      	adds	r3, #8
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	889b      	ldrh	r3, [r3, #4]
 8003792:	3307      	adds	r3, #7
 8003794:	2b00      	cmp	r3, #0
 8003796:	da00      	bge.n	800379a <BSP_LCD_DisplayChar+0x66>
 8003798:	3307      	adds	r3, #7
 800379a:	10db      	asrs	r3, r3, #3
 800379c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037a0:	18ca      	adds	r2, r1, r3
 80037a2:	88b9      	ldrh	r1, [r7, #4]
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fbb6 	bl	8003f18 <DrawChar>
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd90      	pop	{r4, r7, pc}
 80037b4:	20000990 	.word	0x20000990
 80037b8:	20000994 	.word	0x20000994

080037bc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80037bc:	b5b0      	push	{r4, r5, r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60ba      	str	r2, [r7, #8]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	81fb      	strh	r3, [r7, #14]
 80037ca:	460b      	mov	r3, r1
 80037cc:	81bb      	strh	r3, [r7, #12]
 80037ce:	4613      	mov	r3, r2
 80037d0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80037d2:	2301      	movs	r3, #1
 80037d4:	83fb      	strh	r3, [r7, #30]
 80037d6:	2300      	movs	r3, #0
 80037d8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80037e6:	e002      	b.n	80037ee <BSP_LCD_DisplayStringAt+0x32>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	617a      	str	r2, [r7, #20]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f6      	bne.n	80037e8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80037fa:	f7ff fe8f 	bl	800351c <BSP_LCD_GetXSize>
 80037fe:	4601      	mov	r1, r0
 8003800:	4b50      	ldr	r3, [pc, #320]	@ (8003944 <BSP_LCD_DisplayStringAt+0x188>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4850      	ldr	r0, [pc, #320]	@ (8003948 <BSP_LCD_DisplayStringAt+0x18c>)
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4403      	add	r3, r0
 8003810:	3308      	adds	r3, #8
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	889b      	ldrh	r3, [r3, #4]
 8003816:	fbb1 f3f3 	udiv	r3, r1, r3
 800381a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d01c      	beq.n	800385c <BSP_LCD_DisplayStringAt+0xa0>
 8003822:	2b03      	cmp	r3, #3
 8003824:	dc33      	bgt.n	800388e <BSP_LCD_DisplayStringAt+0xd2>
 8003826:	2b01      	cmp	r3, #1
 8003828:	d002      	beq.n	8003830 <BSP_LCD_DisplayStringAt+0x74>
 800382a:	2b02      	cmp	r3, #2
 800382c:	d019      	beq.n	8003862 <BSP_LCD_DisplayStringAt+0xa6>
 800382e:	e02e      	b.n	800388e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad1      	subs	r1, r2, r3
 8003836:	4b43      	ldr	r3, [pc, #268]	@ (8003944 <BSP_LCD_DisplayStringAt+0x188>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4843      	ldr	r0, [pc, #268]	@ (8003948 <BSP_LCD_DisplayStringAt+0x18c>)
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4403      	add	r3, r0
 8003846:	3308      	adds	r3, #8
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	889b      	ldrh	r3, [r3, #4]
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	4413      	add	r3, r2
 8003858:	83fb      	strh	r3, [r7, #30]
      break;
 800385a:	e01b      	b.n	8003894 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800385c:	89fb      	ldrh	r3, [r7, #14]
 800385e:	83fb      	strh	r3, [r7, #30]
      break;
 8003860:	e018      	b.n	8003894 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b299      	uxth	r1, r3
 800386a:	4b36      	ldr	r3, [pc, #216]	@ (8003944 <BSP_LCD_DisplayStringAt+0x188>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4836      	ldr	r0, [pc, #216]	@ (8003948 <BSP_LCD_DisplayStringAt+0x18c>)
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4403      	add	r3, r0
 800387a:	3308      	adds	r3, #8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	889b      	ldrh	r3, [r3, #4]
 8003880:	fb11 f303 	smulbb	r3, r1, r3
 8003884:	b29a      	uxth	r2, r3
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	83fb      	strh	r3, [r7, #30]
      break;
 800388c:	e002      	b.n	8003894 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	83fb      	strh	r3, [r7, #30]
      break;
 8003892:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003894:	8bfb      	ldrh	r3, [r7, #30]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <BSP_LCD_DisplayStringAt+0xe6>
 800389a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	da1d      	bge.n	80038de <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038a6:	e01a      	b.n	80038de <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	89b9      	ldrh	r1, [r7, #12]
 80038ae:	8bfb      	ldrh	r3, [r7, #30]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff3f 	bl	8003734 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80038b6:	4b23      	ldr	r3, [pc, #140]	@ (8003944 <BSP_LCD_DisplayStringAt+0x188>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4923      	ldr	r1, [pc, #140]	@ (8003948 <BSP_LCD_DisplayStringAt+0x18c>)
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3308      	adds	r3, #8
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	889a      	ldrh	r2, [r3, #4]
 80038cc:	8bfb      	ldrh	r3, [r7, #30]
 80038ce:	4413      	add	r3, r2
 80038d0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3301      	adds	r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
    i++;
 80038d8:	8bbb      	ldrh	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf14      	ite	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	2300      	moveq	r3, #0
 80038ea:	b2dc      	uxtb	r4, r3
 80038ec:	f7ff fe16 	bl	800351c <BSP_LCD_GetXSize>
 80038f0:	8bb9      	ldrh	r1, [r7, #28]
 80038f2:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <BSP_LCD_DisplayStringAt+0x188>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4d14      	ldr	r5, [pc, #80]	@ (8003948 <BSP_LCD_DisplayStringAt+0x18c>)
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	442b      	add	r3, r5
 8003902:	3308      	adds	r3, #8
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	889b      	ldrh	r3, [r3, #4]
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ac3      	subs	r3, r0, r3
 800390e:	b299      	uxth	r1, r3
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <BSP_LCD_DisplayStringAt+0x188>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	480c      	ldr	r0, [pc, #48]	@ (8003948 <BSP_LCD_DisplayStringAt+0x18c>)
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4403      	add	r3, r0
 8003920:	3308      	adds	r3, #8
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	889b      	ldrh	r3, [r3, #4]
 8003926:	4299      	cmp	r1, r3
 8003928:	bf2c      	ite	cs
 800392a:	2301      	movcs	r3, #1
 800392c:	2300      	movcc	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	4023      	ands	r3, r4
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1b7      	bne.n	80038a8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bdb0      	pop	{r4, r5, r7, pc}
 8003942:	bf00      	nop
 8003944:	20000990 	.word	0x20000990
 8003948:	20000994 	.word	0x20000994

0800394c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af02      	add	r7, sp, #8
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
 8003956:	460b      	mov	r3, r1
 8003958:	80bb      	strh	r3, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003962:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <BSP_LCD_DrawHLine+0xb0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a26      	ldr	r2, [pc, #152]	@ (8003a00 <BSP_LCD_DrawHLine+0xb4>)
 8003968:	2134      	movs	r1, #52	@ 0x34
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	3348      	adds	r3, #72	@ 0x48
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d114      	bne.n	80039a2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003978:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <BSP_LCD_DrawHLine+0xb0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a20      	ldr	r2, [pc, #128]	@ (8003a00 <BSP_LCD_DrawHLine+0xb4>)
 800397e:	2134      	movs	r1, #52	@ 0x34
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	335c      	adds	r3, #92	@ 0x5c
 8003988:	681c      	ldr	r4, [r3, #0]
 800398a:	f7ff fdc7 	bl	800351c <BSP_LCD_GetXSize>
 800398e:	4602      	mov	r2, r0
 8003990:	88bb      	ldrh	r3, [r7, #4]
 8003992:	fb03 f202 	mul.w	r2, r3, r2
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	4413      	add	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4423      	add	r3, r4
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e013      	b.n	80039ca <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80039a2:	4b16      	ldr	r3, [pc, #88]	@ (80039fc <BSP_LCD_DrawHLine+0xb0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a16      	ldr	r2, [pc, #88]	@ (8003a00 <BSP_LCD_DrawHLine+0xb4>)
 80039a8:	2134      	movs	r1, #52	@ 0x34
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	335c      	adds	r3, #92	@ 0x5c
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	f7ff fdb2 	bl	800351c <BSP_LCD_GetXSize>
 80039b8:	4602      	mov	r2, r0
 80039ba:	88bb      	ldrh	r3, [r7, #4]
 80039bc:	fb03 f202 	mul.w	r2, r3, r2
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4423      	add	r3, r4
 80039c8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80039ca:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <BSP_LCD_DrawHLine+0xb0>)
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	887c      	ldrh	r4, [r7, #2]
 80039d2:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <BSP_LCD_DrawHLine+0xb0>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4d0b      	ldr	r5, [pc, #44]	@ (8003a04 <BSP_LCD_DrawHLine+0xb8>)
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	442b      	add	r3, r5
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	2300      	movs	r3, #0
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2301      	movs	r3, #1
 80039ec:	4622      	mov	r2, r4
 80039ee:	f000 fb4b 	bl	8004088 <LL_FillBuffer>
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bdb0      	pop	{r4, r5, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000990 	.word	0x20000990
 8003a00:	200008a8 	.word	0x200008a8
 8003a04:	20000994 	.word	0x20000994

08003a08 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	603a      	str	r2, [r7, #0]
 8003a12:	80fb      	strh	r3, [r7, #6]
 8003a14:	460b      	mov	r3, r1
 8003a16:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <BSP_LCD_DrawPixel+0x88>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <BSP_LCD_DrawPixel+0x8c>)
 8003a1e:	2134      	movs	r1, #52	@ 0x34
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3348      	adds	r3, #72	@ 0x48
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d116      	bne.n	8003a5c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <BSP_LCD_DrawPixel+0x88>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <BSP_LCD_DrawPixel+0x8c>)
 8003a34:	2134      	movs	r1, #52	@ 0x34
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	335c      	adds	r3, #92	@ 0x5c
 8003a3e:	681c      	ldr	r4, [r3, #0]
 8003a40:	88bd      	ldrh	r5, [r7, #4]
 8003a42:	f7ff fd6b 	bl	800351c <BSP_LCD_GetXSize>
 8003a46:	4603      	mov	r3, r0
 8003a48:	fb03 f205 	mul.w	r2, r3, r5
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	4413      	add	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4423      	add	r3, r4
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b292      	uxth	r2, r2
 8003a58:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003a5a:	e015      	b.n	8003a88 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <BSP_LCD_DrawPixel+0x88>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <BSP_LCD_DrawPixel+0x8c>)
 8003a62:	2134      	movs	r1, #52	@ 0x34
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	335c      	adds	r3, #92	@ 0x5c
 8003a6c:	681c      	ldr	r4, [r3, #0]
 8003a6e:	88bd      	ldrh	r5, [r7, #4]
 8003a70:	f7ff fd54 	bl	800351c <BSP_LCD_GetXSize>
 8003a74:	4603      	mov	r3, r0
 8003a76:	fb03 f205 	mul.w	r2, r3, r5
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4423      	add	r3, r4
 8003a82:	461a      	mov	r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a90:	20000990 	.word	0x20000990
 8003a94:	200008a8 	.word	0x200008a8

08003a98 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b08b      	sub	sp, #44	@ 0x2c
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	330a      	adds	r3, #10
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	330b      	adds	r3, #11
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	441a      	add	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	330c      	adds	r3, #12
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	330d      	adds	r3, #13
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	4413      	add	r3, r2
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3312      	adds	r3, #18
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3313      	adds	r3, #19
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3314      	adds	r3, #20
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3315      	adds	r3, #21
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	4413      	add	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3316      	adds	r3, #22
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3317      	adds	r3, #23
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3318      	adds	r3, #24
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	441a      	add	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3319      	adds	r3, #25
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	4413      	add	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	331c      	adds	r3, #28
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	331d      	adds	r3, #29
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	4413      	add	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003b44:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <BSP_LCD_DrawBitmap+0x15c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <BSP_LCD_DrawBitmap+0x160>)
 8003b4a:	2134      	movs	r1, #52	@ 0x34
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	335c      	adds	r3, #92	@ 0x5c
 8003b54:	681c      	ldr	r4, [r3, #0]
 8003b56:	f7ff fce1 	bl	800351c <BSP_LCD_GetXSize>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	fb03 f202 	mul.w	r2, r3, r2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4423      	add	r3, r4
 8003b6a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	3b20      	subs	r3, #32
 8003b70:	2b07      	cmp	r3, #7
 8003b72:	d802      	bhi.n	8003b7a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e008      	b.n	8003b8c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3b10      	subs	r3, #16
 8003b7e:	2b07      	cmp	r3, #7
 8003b80:	d802      	bhi.n	8003b88 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003b82:	2302      	movs	r3, #2
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e001      	b.n	8003b8c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	08d2      	lsrs	r2, r2, #3
 8003b9a:	fb03 f202 	mul.w	r2, r3, r2
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	4413      	add	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bac:	e018      	b.n	8003be0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003bae:	6a39      	ldr	r1, [r7, #32]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fab3 	bl	8004120 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003bba:	f7ff fcaf 	bl	800351c <BSP_LCD_GetXSize>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	425b      	negs	r3, r3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	3301      	adds	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3e2      	bcc.n	8003bae <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	372c      	adds	r7, #44	@ 0x2c
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000990 	.word	0x20000990
 8003bf8:	200008a8 	.word	0x200008a8

08003bfc <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af02      	add	r7, sp, #8
 8003c04:	4604      	mov	r4, r0
 8003c06:	4608      	mov	r0, r1
 8003c08:	4611      	mov	r1, r2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	80fb      	strh	r3, [r7, #6]
 8003c10:	4603      	mov	r3, r0
 8003c12:	80bb      	strh	r3, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003c20:	4b30      	ldr	r3, [pc, #192]	@ (8003ce4 <BSP_LCD_FillRect+0xe8>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4930      	ldr	r1, [pc, #192]	@ (8003ce8 <BSP_LCD_FillRect+0xec>)
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fd0a 	bl	800364c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003c38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <BSP_LCD_FillRect+0xe8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cec <BSP_LCD_FillRect+0xf0>)
 8003c3e:	2134      	movs	r1, #52	@ 0x34
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	3348      	adds	r3, #72	@ 0x48
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d114      	bne.n	8003c78 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c4e:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <BSP_LCD_FillRect+0xe8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a26      	ldr	r2, [pc, #152]	@ (8003cec <BSP_LCD_FillRect+0xf0>)
 8003c54:	2134      	movs	r1, #52	@ 0x34
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	335c      	adds	r3, #92	@ 0x5c
 8003c5e:	681c      	ldr	r4, [r3, #0]
 8003c60:	f7ff fc5c 	bl	800351c <BSP_LCD_GetXSize>
 8003c64:	4602      	mov	r2, r0
 8003c66:	88bb      	ldrh	r3, [r7, #4]
 8003c68:	fb03 f202 	mul.w	r2, r3, r2
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	4413      	add	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4423      	add	r3, r4
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e013      	b.n	8003ca0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <BSP_LCD_FillRect+0xe8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <BSP_LCD_FillRect+0xf0>)
 8003c7e:	2134      	movs	r1, #52	@ 0x34
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	335c      	adds	r3, #92	@ 0x5c
 8003c88:	681c      	ldr	r4, [r3, #0]
 8003c8a:	f7ff fc47 	bl	800351c <BSP_LCD_GetXSize>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	88bb      	ldrh	r3, [r7, #4]
 8003c92:	fb03 f202 	mul.w	r2, r3, r2
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4423      	add	r3, r4
 8003c9e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003ca0:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <BSP_LCD_FillRect+0xe8>)
 8003ca2:	681c      	ldr	r4, [r3, #0]
 8003ca4:	68fd      	ldr	r5, [r7, #12]
 8003ca6:	887e      	ldrh	r6, [r7, #2]
 8003ca8:	f8b7 8000 	ldrh.w	r8, [r7]
 8003cac:	f7ff fc36 	bl	800351c <BSP_LCD_GetXSize>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	1ad1      	subs	r1, r2, r3
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <BSP_LCD_FillRect+0xe8>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	480b      	ldr	r0, [pc, #44]	@ (8003ce8 <BSP_LCD_FillRect+0xec>)
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4403      	add	r3, r0
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	9100      	str	r1, [sp, #0]
 8003ccc:	4643      	mov	r3, r8
 8003cce:	4632      	mov	r2, r6
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f000 f9d8 	bl	8004088 <LL_FillBuffer>
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000990 	.word	0x20000990
 8003ce8:	20000994 	.word	0x20000994
 8003cec:	200008a8 	.word	0x200008a8

08003cf0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <BSP_LCD_DisplayOn+0x30>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <BSP_LCD_DisplayOn+0x30>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003d04:	2201      	movs	r2, #1
 8003d06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d0a:	4806      	ldr	r0, [pc, #24]	@ (8003d24 <BSP_LCD_DisplayOn+0x34>)
 8003d0c:	f003 fa4a 	bl	80071a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003d10:	2201      	movs	r2, #1
 8003d12:	2108      	movs	r1, #8
 8003d14:	4804      	ldr	r0, [pc, #16]	@ (8003d28 <BSP_LCD_DisplayOn+0x38>)
 8003d16:	f003 fa45 	bl	80071a4 <HAL_GPIO_WritePin>
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	200008a8 	.word	0x200008a8
 8003d24:	40022000 	.word	0x40022000
 8003d28:	40022800 	.word	0x40022800

08003d2c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b090      	sub	sp, #64	@ 0x40
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d36:	4b64      	ldr	r3, [pc, #400]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	4a63      	ldr	r2, [pc, #396]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d42:	4b61      	ldr	r3, [pc, #388]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	4a5d      	ldr	r2, [pc, #372]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d66:	4b58      	ldr	r3, [pc, #352]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	4a57      	ldr	r2, [pc, #348]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d6c:	f043 0310 	orr.w	r3, r3, #16
 8003d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d72:	4b55      	ldr	r3, [pc, #340]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d7e:	4b52      	ldr	r3, [pc, #328]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	4a51      	ldr	r2, [pc, #324]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d96:	4b4c      	ldr	r3, [pc, #304]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da2:	4b49      	ldr	r3, [pc, #292]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003dae:	4b46      	ldr	r3, [pc, #280]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	4a45      	ldr	r2, [pc, #276]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003db4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dba:	4b43      	ldr	r3, [pc, #268]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003dc6:	4b40      	ldr	r3, [pc, #256]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	4a3f      	ldr	r2, [pc, #252]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003dcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003dde:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	4a39      	ldr	r2, [pc, #228]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dea:	4b37      	ldr	r3, [pc, #220]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003df6:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	4a33      	ldr	r2, [pc, #204]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003dfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e02:	4b31      	ldr	r3, [pc, #196]	@ (8003ec8 <BSP_LCD_MspInit+0x19c>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003e0e:	2310      	movs	r3, #16
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003e1e:	230e      	movs	r3, #14
 8003e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e26:	4619      	mov	r1, r3
 8003e28:	4828      	ldr	r0, [pc, #160]	@ (8003ecc <BSP_LCD_MspInit+0x1a0>)
 8003e2a:	f002 ff03 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003e38:	2309      	movs	r3, #9
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e40:	4619      	mov	r1, r3
 8003e42:	4823      	ldr	r0, [pc, #140]	@ (8003ed0 <BSP_LCD_MspInit+0x1a4>)
 8003e44:	f002 fef6 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003e48:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e52:	230e      	movs	r3, #14
 8003e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003e56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	481d      	ldr	r0, [pc, #116]	@ (8003ed4 <BSP_LCD_MspInit+0x1a8>)
 8003e5e:	f002 fee9 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003e62:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e6c:	230e      	movs	r3, #14
 8003e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e74:	4619      	mov	r1, r3
 8003e76:	4818      	ldr	r0, [pc, #96]	@ (8003ed8 <BSP_LCD_MspInit+0x1ac>)
 8003e78:	f002 fedc 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003e7c:	23f7      	movs	r3, #247	@ 0xf7
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e84:	230e      	movs	r3, #14
 8003e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4813      	ldr	r0, [pc, #76]	@ (8003edc <BSP_LCD_MspInit+0x1b0>)
 8003e90:	f002 fed0 	bl	8006c34 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003e9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	480b      	ldr	r0, [pc, #44]	@ (8003ed4 <BSP_LCD_MspInit+0x1a8>)
 8003ea6:	f002 fec5 	bl	8006c34 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003eaa:	2308      	movs	r3, #8
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4808      	ldr	r0, [pc, #32]	@ (8003edc <BSP_LCD_MspInit+0x1b0>)
 8003eba:	f002 febb 	bl	8006c34 <HAL_GPIO_Init>
}
 8003ebe:	bf00      	nop
 8003ec0:	3740      	adds	r7, #64	@ 0x40
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40021800 	.word	0x40021800
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	40022400 	.word	0x40022400
 8003edc:	40022800 	.word	0x40022800

08003ee0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <BSP_LCD_ClockConfig+0x34>)
 8003eec:	2208      	movs	r2, #8
 8003eee:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003ef0:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <BSP_LCD_ClockConfig+0x34>)
 8003ef2:	22c0      	movs	r2, #192	@ 0xc0
 8003ef4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <BSP_LCD_ClockConfig+0x34>)
 8003ef8:	2205      	movs	r2, #5
 8003efa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <BSP_LCD_ClockConfig+0x34>)
 8003efe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003f04:	4803      	ldr	r0, [pc, #12]	@ (8003f14 <BSP_LCD_ClockConfig+0x34>)
 8003f06:	f005 f829 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200009ac 	.word	0x200009ac

08003f18 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	603a      	str	r2, [r7, #0]
 8003f22:	80fb      	strh	r3, [r7, #6]
 8003f24:	460b      	mov	r3, r1
 8003f26:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003f30:	4b53      	ldr	r3, [pc, #332]	@ (8004080 <DrawChar+0x168>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4953      	ldr	r1, [pc, #332]	@ (8004084 <DrawChar+0x16c>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	3308      	adds	r3, #8
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	88db      	ldrh	r3, [r3, #6]
 8003f46:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003f48:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <DrawChar+0x168>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	494d      	ldr	r1, [pc, #308]	@ (8004084 <DrawChar+0x16c>)
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3308      	adds	r3, #8
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	889b      	ldrh	r3, [r3, #4]
 8003f5e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003f60:	8a3b      	ldrh	r3, [r7, #16]
 8003f62:	3307      	adds	r3, #7
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	da00      	bge.n	8003f6a <DrawChar+0x52>
 8003f68:	3307      	adds	r3, #7
 8003f6a:	10db      	asrs	r3, r3, #3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	8a3b      	ldrh	r3, [r7, #16]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e076      	b.n	800406e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003f80:	8a3b      	ldrh	r3, [r7, #16]
 8003f82:	3307      	adds	r3, #7
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da00      	bge.n	8003f8a <DrawChar+0x72>
 8003f88:	3307      	adds	r3, #7
 8003f8a:	10db      	asrs	r3, r3, #3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003f9a:	8a3b      	ldrh	r3, [r7, #16]
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da00      	bge.n	8003fa4 <DrawChar+0x8c>
 8003fa2:	3307      	adds	r3, #7
 8003fa4:	10db      	asrs	r3, r3, #3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d002      	beq.n	8003fb0 <DrawChar+0x98>
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d004      	beq.n	8003fb8 <DrawChar+0xa0>
 8003fae:	e00c      	b.n	8003fca <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
      break;
 8003fb6:	e016      	b.n	8003fe6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	3201      	adds	r2, #1
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
      break;
 8003fc8:	e00d      	b.n	8003fe6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	041a      	lsls	r2, r3, #16
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	3202      	adds	r2, #2
 8003fde:	7812      	ldrb	r2, [r2, #0]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
      break;
 8003fe4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e036      	b.n	800405a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003fec:	8a3a      	ldrh	r2, [r7, #16]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	b29a      	uxth	r2, r3
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	4413      	add	r3, r2
 8004010:	b298      	uxth	r0, r3
 8004012:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <DrawChar+0x168>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	491b      	ldr	r1, [pc, #108]	@ (8004084 <DrawChar+0x16c>)
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	88bb      	ldrh	r3, [r7, #4]
 8004026:	4619      	mov	r1, r3
 8004028:	f7ff fcee 	bl	8003a08 <BSP_LCD_DrawPixel>
 800402c:	e012      	b.n	8004054 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	b29a      	uxth	r2, r3
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	4413      	add	r3, r2
 8004036:	b298      	uxth	r0, r3
 8004038:	4b11      	ldr	r3, [pc, #68]	@ (8004080 <DrawChar+0x168>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4911      	ldr	r1, [pc, #68]	@ (8004084 <DrawChar+0x16c>)
 800403e:	4613      	mov	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3304      	adds	r3, #4
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	88bb      	ldrh	r3, [r7, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	f7ff fcda 	bl	8003a08 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	3301      	adds	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	8a3b      	ldrh	r3, [r7, #16]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	429a      	cmp	r2, r3
 8004060:	d3c4      	bcc.n	8003fec <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004062:	88bb      	ldrh	r3, [r7, #4]
 8004064:	3301      	adds	r3, #1
 8004066:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	8a7b      	ldrh	r3, [r7, #18]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	429a      	cmp	r2, r3
 8004074:	d384      	bcc.n	8003f80 <DrawChar+0x68>
  }
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000990 	.word	0x20000990
 8004084:	20000994 	.word	0x20000994

08004088 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004096:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <LL_FillBuffer+0x88>)
 8004098:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800409c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800409e:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <LL_FillBuffer+0x8c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <LL_FillBuffer+0x90>)
 80040a4:	2134      	movs	r1, #52	@ 0x34
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	3348      	adds	r3, #72	@ 0x48
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d103      	bne.n	80040bc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80040b4:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <LL_FillBuffer+0x88>)
 80040b6:	2202      	movs	r2, #2
 80040b8:	609a      	str	r2, [r3, #8]
 80040ba:	e002      	b.n	80040c2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80040bc:	4b14      	ldr	r3, [pc, #80]	@ (8004110 <LL_FillBuffer+0x88>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80040c2:	4a13      	ldr	r2, [pc, #76]	@ (8004110 <LL_FillBuffer+0x88>)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <LL_FillBuffer+0x88>)
 80040ca:	4a14      	ldr	r2, [pc, #80]	@ (800411c <LL_FillBuffer+0x94>)
 80040cc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80040ce:	4810      	ldr	r0, [pc, #64]	@ (8004110 <LL_FillBuffer+0x88>)
 80040d0:	f002 fa14 	bl	80064fc <HAL_DMA2D_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d115      	bne.n	8004106 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	480c      	ldr	r0, [pc, #48]	@ (8004110 <LL_FillBuffer+0x88>)
 80040de:	f002 fc7b 	bl	80069d8 <HAL_DMA2D_ConfigLayer>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10e      	bne.n	8004106 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69f9      	ldr	r1, [r7, #28]
 80040f2:	4807      	ldr	r0, [pc, #28]	@ (8004110 <LL_FillBuffer+0x88>)
 80040f4:	f002 fa4c 	bl	8006590 <HAL_DMA2D_Start>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80040fe:	210a      	movs	r1, #10
 8004100:	4803      	ldr	r0, [pc, #12]	@ (8004110 <LL_FillBuffer+0x88>)
 8004102:	f002 fa70 	bl	80065e6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000950 	.word	0x20000950
 8004114:	20000990 	.word	0x20000990
 8004118:	200008a8 	.word	0x200008a8
 800411c:	4002b000 	.word	0x4002b000

08004120 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800412e:	4b1c      	ldr	r3, [pc, #112]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004130:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004134:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004136:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004138:	2200      	movs	r2, #0
 800413a:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 800413c:	4b18      	ldr	r3, [pc, #96]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004142:	4b17      	ldr	r3, [pc, #92]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004148:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 800414a:	22ff      	movs	r2, #255	@ 0xff
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800414e:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004154:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800415a:	4b11      	ldr	r3, [pc, #68]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 800415c:	4a11      	ldr	r2, [pc, #68]	@ (80041a4 <LL_ConvertLineToARGB8888+0x84>)
 800415e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004160:	480f      	ldr	r0, [pc, #60]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004162:	f002 f9cb 	bl	80064fc <HAL_DMA2D_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d115      	bne.n	8004198 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 800416c:	2101      	movs	r1, #1
 800416e:	480c      	ldr	r0, [pc, #48]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004170:	f002 fc32 	bl	80069d8 <HAL_DMA2D_ConfigLayer>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10e      	bne.n	8004198 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800417a:	68f9      	ldr	r1, [r7, #12]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	2301      	movs	r3, #1
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4806      	ldr	r0, [pc, #24]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004186:	f002 fa03 	bl	8006590 <HAL_DMA2D_Start>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004190:	210a      	movs	r1, #10
 8004192:	4803      	ldr	r0, [pc, #12]	@ (80041a0 <LL_ConvertLineToARGB8888+0x80>)
 8004194:	f002 fa27 	bl	80065e6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000950 	.word	0x20000950
 80041a4:	4002b000 	.word	0x4002b000

080041a8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80041ac:	4b29      	ldr	r3, [pc, #164]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 80041ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004258 <BSP_SDRAM_Init+0xb0>)
 80041b0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80041b2:	4b2a      	ldr	r3, [pc, #168]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 80041b4:	2202      	movs	r2, #2
 80041b6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80041b8:	4b28      	ldr	r3, [pc, #160]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 80041ba:	2207      	movs	r2, #7
 80041bc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80041be:	4b27      	ldr	r3, [pc, #156]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 80041c0:	2204      	movs	r2, #4
 80041c2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80041c4:	4b25      	ldr	r3, [pc, #148]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 80041c6:	2207      	movs	r2, #7
 80041c8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80041ca:	4b24      	ldr	r3, [pc, #144]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 80041cc:	2202      	movs	r2, #2
 80041ce:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80041d0:	4b22      	ldr	r3, [pc, #136]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 80041d2:	2202      	movs	r2, #2
 80041d4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80041d6:	4b21      	ldr	r3, [pc, #132]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 80041d8:	2202      	movs	r2, #2
 80041da:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 80041de:	2200      	movs	r2, #0
 80041e0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80041e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 80041ea:	2204      	movs	r2, #4
 80041ec:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80041ee:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 80041f0:	2210      	movs	r2, #16
 80041f2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80041f4:	4b17      	ldr	r3, [pc, #92]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 80041f6:	2240      	movs	r2, #64	@ 0x40
 80041f8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80041fa:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 80041fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004200:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004202:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 8004204:	2200      	movs	r2, #0
 8004206:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004208:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 800420a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800420e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004210:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 8004212:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004216:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004218:	4b0e      	ldr	r3, [pc, #56]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800421e:	2100      	movs	r1, #0
 8004220:	480c      	ldr	r0, [pc, #48]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 8004222:	f000 f87f 	bl	8004324 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004226:	490d      	ldr	r1, [pc, #52]	@ (800425c <BSP_SDRAM_Init+0xb4>)
 8004228:	480a      	ldr	r0, [pc, #40]	@ (8004254 <BSP_SDRAM_Init+0xac>)
 800422a:	f005 fe5d 	bl	8009ee8 <HAL_SDRAM_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004234:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <BSP_SDRAM_Init+0xb8>)
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e002      	b.n	8004242 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800423c:	4b08      	ldr	r3, [pc, #32]	@ (8004260 <BSP_SDRAM_Init+0xb8>)
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004242:	f240 6003 	movw	r0, #1539	@ 0x603
 8004246:	f000 f80d 	bl	8004264 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800424a:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <BSP_SDRAM_Init+0xb8>)
 800424c:	781b      	ldrb	r3, [r3, #0]
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000a30 	.word	0x20000a30
 8004258:	a0000140 	.word	0xa0000140
 800425c:	20000a64 	.word	0x20000a64
 8004260:	20000044 	.word	0x20000044

08004264 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004270:	4b2a      	ldr	r3, [pc, #168]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004276:	4b29      	ldr	r3, [pc, #164]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004278:	2210      	movs	r2, #16
 800427a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800427c:	4b27      	ldr	r3, [pc, #156]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800427e:	2201      	movs	r2, #1
 8004280:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004282:	4b26      	ldr	r3, [pc, #152]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004284:	2200      	movs	r2, #0
 8004286:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800428c:	4923      	ldr	r1, [pc, #140]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800428e:	4824      	ldr	r0, [pc, #144]	@ (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004290:	f005 fe5e 	bl	8009f50 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004294:	2001      	movs	r0, #1
 8004296:	f001 f993 	bl	80055c0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800429a:	4b20      	ldr	r3, [pc, #128]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800429c:	2202      	movs	r2, #2
 800429e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042a0:	4b1e      	ldr	r3, [pc, #120]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a2:	2210      	movs	r2, #16
 80042a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80042a6:	4b1d      	ldr	r3, [pc, #116]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80042b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042b6:	4919      	ldr	r1, [pc, #100]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042b8:	4819      	ldr	r0, [pc, #100]	@ (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042ba:	f005 fe49 	bl	8009f50 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80042be:	4b17      	ldr	r3, [pc, #92]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c0:	2203      	movs	r2, #3
 80042c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042c4:	4b15      	ldr	r3, [pc, #84]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c6:	2210      	movs	r2, #16
 80042c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80042ca:	4b14      	ldr	r3, [pc, #80]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042cc:	2208      	movs	r2, #8
 80042ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80042d0:	4b12      	ldr	r3, [pc, #72]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80042d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042da:	4910      	ldr	r1, [pc, #64]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042dc:	4810      	ldr	r0, [pc, #64]	@ (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042de:	f005 fe37 	bl	8009f50 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80042e2:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80042e6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ea:	2204      	movs	r2, #4
 80042ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f0:	2210      	movs	r2, #16
 80042f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80042f4:	4b09      	ldr	r3, [pc, #36]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a07      	ldr	r2, [pc, #28]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042fe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004300:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004304:	4905      	ldr	r1, [pc, #20]	@ (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004306:	4806      	ldr	r0, [pc, #24]	@ (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004308:	f005 fe22 	bl	8009f50 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4804      	ldr	r0, [pc, #16]	@ (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004310:	f005 fe53 	bl	8009fba <HAL_SDRAM_ProgramRefreshRate>
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000a80 	.word	0x20000a80
 8004320:	20000a30 	.word	0x20000a30

08004324 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004324:	b580      	push	{r7, lr}
 8004326:	b090      	sub	sp, #64	@ 0x40
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800432e:	4b70      	ldr	r3, [pc, #448]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	4a6f      	ldr	r2, [pc, #444]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6393      	str	r3, [r2, #56]	@ 0x38
 800433a:	4b6d      	ldr	r3, [pc, #436]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800433c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004346:	4b6a      	ldr	r3, [pc, #424]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	4a69      	ldr	r2, [pc, #420]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800434c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004350:	6313      	str	r3, [r2, #48]	@ 0x30
 8004352:	4b67      	ldr	r3, [pc, #412]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800435e:	4b64      	ldr	r3, [pc, #400]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	4a63      	ldr	r2, [pc, #396]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6313      	str	r3, [r2, #48]	@ 0x30
 800436a:	4b61      	ldr	r3, [pc, #388]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004376:	4b5e      	ldr	r3, [pc, #376]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	4a5d      	ldr	r2, [pc, #372]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800437c:	f043 0308 	orr.w	r3, r3, #8
 8004380:	6313      	str	r3, [r2, #48]	@ 0x30
 8004382:	4b5b      	ldr	r3, [pc, #364]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800438e:	4b58      	ldr	r3, [pc, #352]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	4a57      	ldr	r2, [pc, #348]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004394:	f043 0310 	orr.w	r3, r3, #16
 8004398:	6313      	str	r3, [r2, #48]	@ 0x30
 800439a:	4b55      	ldr	r3, [pc, #340]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043a6:	4b52      	ldr	r3, [pc, #328]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	4a51      	ldr	r2, [pc, #324]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043ac:	f043 0320 	orr.w	r3, r3, #32
 80043b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b2:	4b4f      	ldr	r3, [pc, #316]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043be:	4b4c      	ldr	r3, [pc, #304]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	4a4b      	ldr	r2, [pc, #300]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ca:	4b49      	ldr	r3, [pc, #292]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d6:	4b46      	ldr	r3, [pc, #280]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4a45      	ldr	r2, [pc, #276]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043e2:	4b43      	ldr	r3, [pc, #268]	@ (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80043ee:	2302      	movs	r3, #2
 80043f0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80043f2:	2301      	movs	r3, #1
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80043f6:	2302      	movs	r3, #2
 80043f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80043fa:	230c      	movs	r3, #12
 80043fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80043fe:	2308      	movs	r3, #8
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004406:	4619      	mov	r1, r3
 8004408:	483a      	ldr	r0, [pc, #232]	@ (80044f4 <BSP_SDRAM_MspInit+0x1d0>)
 800440a:	f002 fc13 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800440e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004414:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004418:	4619      	mov	r1, r3
 800441a:	4837      	ldr	r0, [pc, #220]	@ (80044f8 <BSP_SDRAM_MspInit+0x1d4>)
 800441c:	f002 fc0a 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004420:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004426:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800442a:	4619      	mov	r1, r3
 800442c:	4833      	ldr	r0, [pc, #204]	@ (80044fc <BSP_SDRAM_MspInit+0x1d8>)
 800442e:	f002 fc01 	bl	8006c34 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004432:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004436:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004438:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800443c:	4619      	mov	r1, r3
 800443e:	4830      	ldr	r0, [pc, #192]	@ (8004500 <BSP_SDRAM_MspInit+0x1dc>)
 8004440:	f002 fbf8 	bl	8006c34 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004444:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800444a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800444e:	4619      	mov	r1, r3
 8004450:	482c      	ldr	r0, [pc, #176]	@ (8004504 <BSP_SDRAM_MspInit+0x1e0>)
 8004452:	f002 fbef 	bl	8006c34 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004456:	2328      	movs	r3, #40	@ 0x28
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800445a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800445e:	4619      	mov	r1, r3
 8004460:	4829      	ldr	r0, [pc, #164]	@ (8004508 <BSP_SDRAM_MspInit+0x1e4>)
 8004462:	f002 fbe7 	bl	8006c34 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004466:	4b29      	ldr	r3, [pc, #164]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800446c:	4b27      	ldr	r3, [pc, #156]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800446e:	2280      	movs	r2, #128	@ 0x80
 8004470:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004472:	4b26      	ldr	r3, [pc, #152]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004478:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800447a:	4b24      	ldr	r3, [pc, #144]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800447c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004480:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004482:	4b22      	ldr	r3, [pc, #136]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004484:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004488:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800448a:	4b20      	ldr	r3, [pc, #128]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800448c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004490:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004492:	4b1e      	ldr	r3, [pc, #120]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004494:	2200      	movs	r2, #0
 8004496:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004498:	4b1c      	ldr	r3, [pc, #112]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800449a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800449e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80044a0:	4b1a      	ldr	r3, [pc, #104]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80044a6:	4b19      	ldr	r3, [pc, #100]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044a8:	2203      	movs	r2, #3
 80044aa:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80044ac:	4b17      	ldr	r3, [pc, #92]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80044b2:	4b16      	ldr	r3, [pc, #88]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80044b8:	4b14      	ldr	r3, [pc, #80]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044ba:	4a15      	ldr	r2, [pc, #84]	@ (8004510 <BSP_SDRAM_MspInit+0x1ec>)
 80044bc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a12      	ldr	r2, [pc, #72]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80044c4:	4a11      	ldr	r2, [pc, #68]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80044ca:	4810      	ldr	r0, [pc, #64]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044cc:	f001 ff06 	bl	80062dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80044d0:	480e      	ldr	r0, [pc, #56]	@ (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044d2:	f001 fe55 	bl	8006180 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80044d6:	2200      	movs	r2, #0
 80044d8:	210f      	movs	r1, #15
 80044da:	2038      	movs	r0, #56	@ 0x38
 80044dc:	f001 fd46 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80044e0:	2038      	movs	r0, #56	@ 0x38
 80044e2:	f001 fd5f 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3740      	adds	r7, #64	@ 0x40
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40020800 	.word	0x40020800
 80044f8:	40020c00 	.word	0x40020c00
 80044fc:	40021000 	.word	0x40021000
 8004500:	40021400 	.word	0x40021400
 8004504:	40021800 	.word	0x40021800
 8004508:	40021c00 	.word	0x40021c00
 800450c:	20000a90 	.word	0x20000a90
 8004510:	40026410 	.word	0x40026410

08004514 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	460a      	mov	r2, r1
 800451e:	80fb      	strh	r3, [r7, #6]
 8004520:	4613      	mov	r3, r2
 8004522:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004528:	4a14      	ldr	r2, [pc, #80]	@ (800457c <BSP_TS_Init+0x68>)
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800452e:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <BSP_TS_Init+0x6c>)
 8004530:	88bb      	ldrh	r3, [r7, #4]
 8004532:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004534:	4b13      	ldr	r3, [pc, #76]	@ (8004584 <BSP_TS_Init+0x70>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2070      	movs	r0, #112	@ 0x70
 800453a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800453c:	4b11      	ldr	r3, [pc, #68]	@ (8004584 <BSP_TS_Init+0x70>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2070      	movs	r0, #112	@ 0x70
 8004542:	4798      	blx	r3
 8004544:	4603      	mov	r3, r0
 8004546:	2b51      	cmp	r3, #81	@ 0x51
 8004548:	d110      	bne.n	800456c <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800454a:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <BSP_TS_Init+0x74>)
 800454c:	4a0d      	ldr	r2, [pc, #52]	@ (8004584 <BSP_TS_Init+0x70>)
 800454e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004550:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <BSP_TS_Init+0x78>)
 8004552:	2270      	movs	r2, #112	@ 0x70
 8004554:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004556:	4b0e      	ldr	r3, [pc, #56]	@ (8004590 <BSP_TS_Init+0x7c>)
 8004558:	2208      	movs	r2, #8
 800455a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800455c:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <BSP_TS_Init+0x74>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4a0a      	ldr	r2, [pc, #40]	@ (800458c <BSP_TS_Init+0x78>)
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	4610      	mov	r0, r2
 8004568:	4798      	blx	r3
 800456a:	e001      	b.n	8004570 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800456c:	2303      	movs	r3, #3
 800456e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000af4 	.word	0x20000af4
 8004580:	20000af6 	.word	0x20000af6
 8004584:	2000000c 	.word	0x2000000c
 8004588:	20000af0 	.word	0x20000af0
 800458c:	20000af9 	.word	0x20000af9
 8004590:	20000af8 	.word	0x20000af8

08004594 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b097      	sub	sp, #92	@ 0x5c
 8004598:	af02      	add	r7, sp, #8
 800459a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80045ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004890 <BSP_TS_GetState+0x2fc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	4ab7      	ldr	r2, [pc, #732]	@ (8004894 <BSP_TS_GetState+0x300>)
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	4610      	mov	r0, r2
 80045ba:	4798      	blx	r3
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8198 	beq.w	80048fe <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d2:	e187      	b.n	80048e4 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80045d4:	4bae      	ldr	r3, [pc, #696]	@ (8004890 <BSP_TS_GetState+0x2fc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4aae      	ldr	r2, [pc, #696]	@ (8004894 <BSP_TS_GetState+0x300>)
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	4614      	mov	r4, r2
 80045e0:	f107 0120 	add.w	r1, r7, #32
 80045e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e6:	0052      	lsls	r2, r2, #1
 80045e8:	1888      	adds	r0, r1, r2
 80045ea:	f107 0114 	add.w	r1, r7, #20
 80045ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045f0:	0052      	lsls	r2, r2, #1
 80045f2:	440a      	add	r2, r1
 80045f4:	4601      	mov	r1, r0
 80045f6:	4620      	mov	r0, r4
 80045f8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80045fa:	4ba7      	ldr	r3, [pc, #668]	@ (8004898 <BSP_TS_GetState+0x304>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d117      	bne.n	8004632 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	3350      	adds	r3, #80	@ 0x50
 8004608:	443b      	add	r3, r7
 800460a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800460e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	3350      	adds	r3, #80	@ 0x50
 8004614:	443b      	add	r3, r7
 8004616:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800461a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	3350      	adds	r3, #80	@ 0x50
 8004620:	443b      	add	r3, r7
 8004622:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	3350      	adds	r3, #80	@ 0x50
 800462c:	443b      	add	r3, r7
 800462e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004632:	4b99      	ldr	r3, [pc, #612]	@ (8004898 <BSP_TS_GetState+0x304>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 800463e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	3350      	adds	r3, #80	@ 0x50
 8004644:	443b      	add	r3, r7
 8004646:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800464a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800464e:	b29a      	uxth	r2, r3
 8004650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	3350      	adds	r3, #80	@ 0x50
 8004656:	443b      	add	r3, r7
 8004658:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800465c:	4b8e      	ldr	r3, [pc, #568]	@ (8004898 <BSP_TS_GetState+0x304>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	3350      	adds	r3, #80	@ 0x50
 800466e:	443b      	add	r3, r7
 8004670:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004674:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004678:	b29a      	uxth	r2, r3
 800467a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	3350      	adds	r3, #80	@ 0x50
 8004680:	443b      	add	r3, r7
 8004682:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004686:	4b84      	ldr	r3, [pc, #528]	@ (8004898 <BSP_TS_GetState+0x304>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d017      	beq.n	80046c2 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	3350      	adds	r3, #80	@ 0x50
 8004698:	443b      	add	r3, r7
 800469a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800469e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	3350      	adds	r3, #80	@ 0x50
 80046a4:	443b      	add	r3, r7
 80046a6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80046aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	3350      	adds	r3, #80	@ 0x50
 80046b0:	443b      	add	r3, r7
 80046b2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80046b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	3350      	adds	r3, #80	@ 0x50
 80046bc:	443b      	add	r3, r7
 80046be:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80046c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	3350      	adds	r3, #80	@ 0x50
 80046c8:	443b      	add	r3, r7
 80046ca:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80046ce:	4619      	mov	r1, r3
 80046d0:	4a72      	ldr	r2, [pc, #456]	@ (800489c <BSP_TS_GetState+0x308>)
 80046d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	4299      	cmp	r1, r3
 80046da:	d90d      	bls.n	80046f8 <BSP_TS_GetState+0x164>
 80046dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	3350      	adds	r3, #80	@ 0x50
 80046e2:	443b      	add	r3, r7
 80046e4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80046e8:	496c      	ldr	r1, [pc, #432]	@ (800489c <BSP_TS_GetState+0x308>)
 80046ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	e00c      	b.n	8004712 <BSP_TS_GetState+0x17e>
 80046f8:	4a68      	ldr	r2, [pc, #416]	@ (800489c <BSP_TS_GetState+0x308>)
 80046fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	b29a      	uxth	r2, r3
 8004702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	3350      	adds	r3, #80	@ 0x50
 8004708:	443b      	add	r3, r7
 800470a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	b29b      	uxth	r3, r3
 8004712:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	3350      	adds	r3, #80	@ 0x50
 800471c:	443b      	add	r3, r7
 800471e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004722:	4619      	mov	r1, r3
 8004724:	4a5e      	ldr	r2, [pc, #376]	@ (80048a0 <BSP_TS_GetState+0x30c>)
 8004726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472c:	4299      	cmp	r1, r3
 800472e:	d90d      	bls.n	800474c <BSP_TS_GetState+0x1b8>
 8004730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	3350      	adds	r3, #80	@ 0x50
 8004736:	443b      	add	r3, r7
 8004738:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800473c:	4958      	ldr	r1, [pc, #352]	@ (80048a0 <BSP_TS_GetState+0x30c>)
 800473e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004744:	b29b      	uxth	r3, r3
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	b29b      	uxth	r3, r3
 800474a:	e00c      	b.n	8004766 <BSP_TS_GetState+0x1d2>
 800474c:	4a54      	ldr	r2, [pc, #336]	@ (80048a0 <BSP_TS_GetState+0x30c>)
 800474e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	b29a      	uxth	r2, r3
 8004756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	3350      	adds	r3, #80	@ 0x50
 800475c:	443b      	add	r3, r7
 800475e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	b29b      	uxth	r3, r3
 8004766:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 800476a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800476e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004772:	4413      	add	r3, r2
 8004774:	2b05      	cmp	r3, #5
 8004776:	dd15      	ble.n	80047a4 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	3350      	adds	r3, #80	@ 0x50
 800477e:	443b      	add	r3, r7
 8004780:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004784:	4619      	mov	r1, r3
 8004786:	4a45      	ldr	r2, [pc, #276]	@ (800489c <BSP_TS_GetState+0x308>)
 8004788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800478a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800478e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	3350      	adds	r3, #80	@ 0x50
 8004794:	443b      	add	r3, r7
 8004796:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800479a:	4619      	mov	r1, r3
 800479c:	4a40      	ldr	r2, [pc, #256]	@ (80048a0 <BSP_TS_GetState+0x30c>)
 800479e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80047a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004894 <BSP_TS_GetState+0x300>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d119      	bne.n	80047e0 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80047ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	3350      	adds	r3, #80	@ 0x50
 80047b2:	443b      	add	r3, r7
 80047b4:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4413      	add	r3, r2
 80047c0:	460a      	mov	r2, r1
 80047c2:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80047c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	3350      	adds	r3, #80	@ 0x50
 80047ca:	443b      	add	r3, r7
 80047cc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d4:	3304      	adds	r3, #4
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	460a      	mov	r2, r1
 80047dc:	809a      	strh	r2, [r3, #4]
 80047de:	e022      	b.n	8004826 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80047e0:	4b30      	ldr	r3, [pc, #192]	@ (80048a4 <BSP_TS_GetState+0x310>)
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	4619      	mov	r1, r3
 80047e6:	4a2d      	ldr	r2, [pc, #180]	@ (800489c <BSP_TS_GetState+0x308>)
 80047e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	0b1b      	lsrs	r3, r3, #12
 80047f4:	b299      	uxth	r1, r3
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	4413      	add	r3, r2
 80047fe:	460a      	mov	r2, r1
 8004800:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004802:	4b29      	ldr	r3, [pc, #164]	@ (80048a8 <BSP_TS_GetState+0x314>)
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4a25      	ldr	r2, [pc, #148]	@ (80048a0 <BSP_TS_GetState+0x30c>)
 800480a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800480c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	0b1b      	lsrs	r3, r3, #12
 8004816:	b299      	uxth	r1, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800481c:	3304      	adds	r3, #4
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4413      	add	r3, r2
 8004822:	460a      	mov	r2, r1
 8004824:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004826:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <BSP_TS_GetState+0x300>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f107 010c 	add.w	r1, r7, #12
 8004830:	f107 0210 	add.w	r2, r7, #16
 8004834:	f107 0308 	add.w	r3, r7, #8
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	460b      	mov	r3, r1
 800483c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800483e:	f7fd fb63 	bl	8001f08 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	b2d9      	uxtb	r1, r3
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800484a:	4413      	add	r3, r2
 800484c:	3316      	adds	r3, #22
 800484e:	460a      	mov	r2, r1
 8004850:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	b2d9      	uxtb	r1, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800485a:	4413      	add	r3, r2
 800485c:	3320      	adds	r3, #32
 800485e:	460a      	mov	r2, r1
 8004860:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d836      	bhi.n	80048d6 <BSP_TS_GetState+0x342>
 8004868:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <BSP_TS_GetState+0x2dc>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	080048ad 	.word	0x080048ad
 8004878:	080048bb 	.word	0x080048bb
 800487c:	080048c9 	.word	0x080048c9
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004884:	4413      	add	r3, r2
 8004886:	331b      	adds	r3, #27
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
          break;
 800488c:	e027      	b.n	80048de <BSP_TS_GetState+0x34a>
 800488e:	bf00      	nop
 8004890:	20000af0 	.word	0x20000af0
 8004894:	20000af9 	.word	0x20000af9
 8004898:	20000af8 	.word	0x20000af8
 800489c:	20000afc 	.word	0x20000afc
 80048a0:	20000b10 	.word	0x20000b10
 80048a4:	20000af4 	.word	0x20000af4
 80048a8:	20000af6 	.word	0x20000af6
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b0:	4413      	add	r3, r2
 80048b2:	331b      	adds	r3, #27
 80048b4:	2202      	movs	r2, #2
 80048b6:	701a      	strb	r2, [r3, #0]
          break;
 80048b8:	e011      	b.n	80048de <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048be:	4413      	add	r3, r2
 80048c0:	331b      	adds	r3, #27
 80048c2:	2203      	movs	r2, #3
 80048c4:	701a      	strb	r2, [r3, #0]
          break;
 80048c6:	e00a      	b.n	80048de <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048cc:	4413      	add	r3, r2
 80048ce:	331b      	adds	r3, #27
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
          break;
 80048d4:	e003      	b.n	80048de <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 80048dc:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80048de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048e0:	3301      	adds	r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ec:	4293      	cmp	r3, r2
 80048ee:	f4ff ae71 	bcc.w	80045d4 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f80a 	bl	800490c <BSP_TS_Get_GestureId>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80048fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8004902:	4618      	mov	r0, r3
 8004904:	3754      	adds	r7, #84	@ 0x54
 8004906:	46bd      	mov	sp, r7
 8004908:	bd90      	pop	{r4, r7, pc}
 800490a:	bf00      	nop

0800490c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800491c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a0c <BSP_TS_Get_GestureId+0x100>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fd fad4 	bl	8001ed6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b49      	cmp	r3, #73	@ 0x49
 8004932:	d05e      	beq.n	80049f2 <BSP_TS_Get_GestureId+0xe6>
 8004934:	2b49      	cmp	r3, #73	@ 0x49
 8004936:	d860      	bhi.n	80049fa <BSP_TS_Get_GestureId+0xee>
 8004938:	2b1c      	cmp	r3, #28
 800493a:	d83f      	bhi.n	80049bc <BSP_TS_Get_GestureId+0xb0>
 800493c:	2b1c      	cmp	r3, #28
 800493e:	d85c      	bhi.n	80049fa <BSP_TS_Get_GestureId+0xee>
 8004940:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <BSP_TS_Get_GestureId+0x3c>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	080049c3 	.word	0x080049c3
 800494c:	080049fb 	.word	0x080049fb
 8004950:	080049fb 	.word	0x080049fb
 8004954:	080049fb 	.word	0x080049fb
 8004958:	080049fb 	.word	0x080049fb
 800495c:	080049fb 	.word	0x080049fb
 8004960:	080049fb 	.word	0x080049fb
 8004964:	080049fb 	.word	0x080049fb
 8004968:	080049fb 	.word	0x080049fb
 800496c:	080049fb 	.word	0x080049fb
 8004970:	080049fb 	.word	0x080049fb
 8004974:	080049fb 	.word	0x080049fb
 8004978:	080049fb 	.word	0x080049fb
 800497c:	080049fb 	.word	0x080049fb
 8004980:	080049fb 	.word	0x080049fb
 8004984:	080049fb 	.word	0x080049fb
 8004988:	080049cb 	.word	0x080049cb
 800498c:	080049fb 	.word	0x080049fb
 8004990:	080049fb 	.word	0x080049fb
 8004994:	080049fb 	.word	0x080049fb
 8004998:	080049d3 	.word	0x080049d3
 800499c:	080049fb 	.word	0x080049fb
 80049a0:	080049fb 	.word	0x080049fb
 80049a4:	080049fb 	.word	0x080049fb
 80049a8:	080049db 	.word	0x080049db
 80049ac:	080049fb 	.word	0x080049fb
 80049b0:	080049fb 	.word	0x080049fb
 80049b4:	080049fb 	.word	0x080049fb
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	d014      	beq.n	80049ea <BSP_TS_Get_GestureId+0xde>
 80049c0:	e01b      	b.n	80049fa <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80049c8:	e01a      	b.n	8004a00 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80049d0:	e016      	b.n	8004a00 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80049d8:	e012      	b.n	8004a00 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2203      	movs	r2, #3
 80049de:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80049e0:	e00e      	b.n	8004a00 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2204      	movs	r2, #4
 80049e6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80049e8:	e00a      	b.n	8004a00 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2205      	movs	r2, #5
 80049ee:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80049f0:	e006      	b.n	8004a00 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2206      	movs	r2, #6
 80049f6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80049f8:	e002      	b.n	8004a00 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      break;
 80049fe:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000af9 	.word	0x20000af9

08004a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a16:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <HAL_MspInit+0x4c>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	4a10      	ldr	r2, [pc, #64]	@ (8004a5c <HAL_MspInit+0x4c>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <HAL_MspInit+0x4c>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_MspInit+0x4c>)
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <HAL_MspInit+0x4c>)
 8004a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a3a:	4b08      	ldr	r3, [pc, #32]	@ (8004a5c <HAL_MspInit+0x4c>)
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a46:	2200      	movs	r2, #0
 8004a48:	210f      	movs	r1, #15
 8004a4a:	f06f 0001 	mvn.w	r0, #1
 8004a4e:	f001 fa8d 	bl	8005f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800

08004a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	@ 0x38
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004a70:	4b33      	ldr	r3, [pc, #204]	@ (8004b40 <HAL_InitTick+0xe0>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	4a32      	ldr	r2, [pc, #200]	@ (8004b40 <HAL_InitTick+0xe0>)
 8004a76:	f043 0310 	orr.w	r3, r3, #16
 8004a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a7c:	4b30      	ldr	r3, [pc, #192]	@ (8004b40 <HAL_InitTick+0xe0>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a88:	f107 0210 	add.w	r2, r7, #16
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f004 fa30 	bl	8008ef8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f004 fa01 	bl	8008ea8 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004aa8:	e004      	b.n	8004ab4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004aaa:	f004 f9fd 	bl	8008ea8 <HAL_RCC_GetPCLK1Freq>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	4a23      	ldr	r2, [pc, #140]	@ (8004b44 <HAL_InitTick+0xe4>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	0c9b      	lsrs	r3, r3, #18
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ac2:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004ac4:	4a21      	ldr	r2, [pc, #132]	@ (8004b4c <HAL_InitTick+0xec>)
 8004ac6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004aca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ace:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004adc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae2:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004ae8:	4817      	ldr	r0, [pc, #92]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004aea:	f005 fb39 	bl	800a160 <HAL_TIM_Base_Init>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11b      	bne.n	8004b34 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004afc:	4812      	ldr	r0, [pc, #72]	@ (8004b48 <HAL_InitTick+0xe8>)
 8004afe:	f005 fb87 	bl	800a210 <HAL_TIM_Base_Start_IT>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d111      	bne.n	8004b34 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b10:	2036      	movs	r0, #54	@ 0x36
 8004b12:	f001 fa47 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d808      	bhi.n	8004b2e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	2036      	movs	r0, #54	@ 0x36
 8004b22:	f001 fa23 	bl	8005f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b26:	4a0a      	ldr	r2, [pc, #40]	@ (8004b50 <HAL_InitTick+0xf0>)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e002      	b.n	8004b34 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3738      	adds	r7, #56	@ 0x38
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40023800 	.word	0x40023800
 8004b44:	431bde83 	.word	0x431bde83
 8004b48:	20000b24 	.word	0x20000b24
 8004b4c:	40001000 	.word	0x40001000
 8004b50:	2000004c 	.word	0x2000004c

08004b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <NMI_Handler+0x4>

08004b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <HardFault_Handler+0x4>

08004b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <MemManage_Handler+0x4>

08004b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <BusFault_Handler+0x4>

08004b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b78:	bf00      	nop
 8004b7a:	e7fd      	b.n	8004b78 <UsageFault_Handler+0x4>

08004b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004b90:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <TIM6_DAC_IRQHandler+0x20>)
 8004b92:	791b      	ldrb	r3, [r3, #4]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004b9a:	4804      	ldr	r0, [pc, #16]	@ (8004bac <TIM6_DAC_IRQHandler+0x20>)
 8004b9c:	f001 fa32 	bl	8006004 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004ba0:	4803      	ldr	r0, [pc, #12]	@ (8004bb0 <TIM6_DAC_IRQHandler+0x24>)
 8004ba2:	f005 fbad 	bl	800a300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000160 	.word	0x20000160
 8004bb0:	20000b24 	.word	0x20000b24

08004bb4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004bb8:	4802      	ldr	r0, [pc, #8]	@ (8004bc4 <LTDC_IRQHandler+0x10>)
 8004bba:	f003 fa0b 	bl	8007fd4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000718 	.word	0x20000718

08004bc8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004bcc:	4802      	ldr	r0, [pc, #8]	@ (8004bd8 <DMA2D_IRQHandler+0x10>)
 8004bce:	f001 fdf3 	bl	80067b8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000174 	.word	0x20000174

08004bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
	return 1;
 8004be0:	2301      	movs	r3, #1
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <_kill>:

int _kill(int pid, int sig)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004bf6:	f009 f9cb 	bl	800df90 <__errno>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2216      	movs	r2, #22
 8004bfe:	601a      	str	r2, [r3, #0]
	return -1;
 8004c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <_exit>:

void _exit (int status)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c14:	f04f 31ff 	mov.w	r1, #4294967295
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ffe7 	bl	8004bec <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <_exit+0x12>

08004c22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e00a      	b.n	8004c4a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c34:	f3af 8000 	nop.w
 8004c38:	4601      	mov	r1, r0
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	60ba      	str	r2, [r7, #8]
 8004c40:	b2ca      	uxtb	r2, r1
 8004c42:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3301      	adds	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	dbf0      	blt.n	8004c34 <_read+0x12>
	}

return len;
 8004c52:	687b      	ldr	r3, [r7, #4]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e009      	b.n	8004c82 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	60ba      	str	r2, [r7, #8]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	dbf1      	blt.n	8004c6e <_write+0x12>
	}
	return len;
 8004c8a:	687b      	ldr	r3, [r7, #4]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <_close>:

int _close(int file)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	return -1;
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004cbc:	605a      	str	r2, [r3, #4]
	return 0;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <_isatty>:

int _isatty(int file)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	return 1;
 8004cd4:	2301      	movs	r3, #1
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
	return 0;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d04:	4a14      	ldr	r2, [pc, #80]	@ (8004d58 <_sbrk+0x5c>)
 8004d06:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <_sbrk+0x60>)
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d10:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <_sbrk+0x64>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d18:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <_sbrk+0x64>)
 8004d1a:	4a12      	ldr	r2, [pc, #72]	@ (8004d64 <_sbrk+0x68>)
 8004d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d1e:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <_sbrk+0x64>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4413      	add	r3, r2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d207      	bcs.n	8004d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d2c:	f009 f930 	bl	800df90 <__errno>
 8004d30:	4603      	mov	r3, r0
 8004d32:	220c      	movs	r2, #12
 8004d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	e009      	b.n	8004d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d3c:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <_sbrk+0x64>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d42:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <_sbrk+0x64>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4413      	add	r3, r2
 8004d4a:	4a05      	ldr	r2, [pc, #20]	@ (8004d60 <_sbrk+0x64>)
 8004d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20050000 	.word	0x20050000
 8004d5c:	00000400 	.word	0x00000400
 8004d60:	20000b70 	.word	0x20000b70
 8004d64:	20004d28 	.word	0x20004d28

08004d68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <SystemInit+0x20>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d72:	4a05      	ldr	r2, [pc, #20]	@ (8004d88 <SystemInit+0x20>)
 8004d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d92:	f107 0310 	add.w	r3, r7, #16
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004daa:	4b20      	ldr	r3, [pc, #128]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004dac:	4a20      	ldr	r2, [pc, #128]	@ (8004e30 <MX_TIM1_Init+0xa4>)
 8004dae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004db0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004dbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dd0:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004dd6:	4815      	ldr	r0, [pc, #84]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004dd8:	f005 f9c2 	bl	800a160 <HAL_TIM_Base_Init>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004de2:	f7fe f80f 	bl	8002e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004dec:	f107 0310 	add.w	r3, r7, #16
 8004df0:	4619      	mov	r1, r3
 8004df2:	480e      	ldr	r0, [pc, #56]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004df4:	f005 fba4 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004dfe:	f7fe f801 	bl	8002e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4806      	ldr	r0, [pc, #24]	@ (8004e2c <MX_TIM1_Init+0xa0>)
 8004e14:	f005 fdc0 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004e1e:	f7fd fff1 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004e22:	bf00      	nop
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000b74 	.word	0x20000b74
 8004e30:	40010000 	.word	0x40010000

08004e34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e3a:	f107 0310 	add.w	r3, r7, #16
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e52:	4b1e      	ldr	r3, [pc, #120]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004e66:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e6e:	4b17      	ldr	r3, [pc, #92]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e74:	4b15      	ldr	r3, [pc, #84]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e7a:	4814      	ldr	r0, [pc, #80]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e7c:	f005 f970 	bl	800a160 <HAL_TIM_Base_Init>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004e86:	f7fd ffbd 	bl	8002e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	4619      	mov	r1, r3
 8004e96:	480d      	ldr	r0, [pc, #52]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004e98:	f005 fb52 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004ea2:	f7fd ffaf 	bl	8002e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4806      	ldr	r0, [pc, #24]	@ (8004ecc <MX_TIM2_Init+0x98>)
 8004eb4:	f005 fd70 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004ebe:	f7fd ffa1 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ec2:	bf00      	nop
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000bc0 	.word	0x20000bc0

08004ed0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ed6:	f107 0310 	add.w	r3, r7, #16
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
 8004ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004eee:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f68 <MX_TIM3_Init+0x98>)
 8004ef2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004efa:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f00:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f08:	4b16      	ldr	r3, [pc, #88]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f14:	4813      	ldr	r0, [pc, #76]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004f16:	f005 f923 	bl	800a160 <HAL_TIM_Base_Init>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004f20:	f7fd ff70 	bl	8002e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f2a:	f107 0310 	add.w	r3, r7, #16
 8004f2e:	4619      	mov	r1, r3
 8004f30:	480c      	ldr	r0, [pc, #48]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004f32:	f005 fb05 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004f3c:	f7fd ff62 	bl	8002e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f48:	1d3b      	adds	r3, r7, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4805      	ldr	r0, [pc, #20]	@ (8004f64 <MX_TIM3_Init+0x94>)
 8004f4e:	f005 fd23 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004f58:	f7fd ff54 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f5c:	bf00      	nop
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000c0c 	.word	0x20000c0c
 8004f68:	40000400 	.word	0x40000400

08004f6c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f72:	f107 0310 	add.w	r3, r7, #16
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005004 <MX_TIM5_Init+0x98>)
 8004f8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004f90:	4b1b      	ldr	r3, [pc, #108]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f96:	4b1a      	ldr	r3, [pc, #104]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004f9c:	4b18      	ldr	r3, [pc, #96]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa4:	4b16      	ldr	r3, [pc, #88]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004faa:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004fb0:	4813      	ldr	r0, [pc, #76]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004fb2:	f005 f8d5 	bl	800a160 <HAL_TIM_Base_Init>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004fbc:	f7fd ff22 	bl	8002e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004fc6:	f107 0310 	add.w	r3, r7, #16
 8004fca:	4619      	mov	r1, r3
 8004fcc:	480c      	ldr	r0, [pc, #48]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004fce:	f005 fab7 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004fd8:	f7fd ff14 	bl	8002e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4805      	ldr	r0, [pc, #20]	@ (8005000 <MX_TIM5_Init+0x94>)
 8004fea:	f005 fcd5 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004ff4:	f7fd ff06 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000c58 	.word	0x20000c58
 8005004:	40000c00 	.word	0x40000c00

08005008 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800500e:	f107 0310 	add.w	r3, r7, #16
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005026:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 8005028:	4a20      	ldr	r2, [pc, #128]	@ (80050ac <MX_TIM8_Init+0xa4>)
 800502a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800502c:	4b1e      	ldr	r3, [pc, #120]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 800502e:	2200      	movs	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005032:	4b1d      	ldr	r3, [pc, #116]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005038:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 800503a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800503e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005040:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005046:	4b18      	ldr	r3, [pc, #96]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 8005048:	2200      	movs	r2, #0
 800504a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800504c:	4b16      	ldr	r3, [pc, #88]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 800504e:	2200      	movs	r2, #0
 8005050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005052:	4815      	ldr	r0, [pc, #84]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 8005054:	f005 f884 	bl	800a160 <HAL_TIM_Base_Init>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800505e:	f7fd fed1 	bl	8002e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005066:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005068:	f107 0310 	add.w	r3, r7, #16
 800506c:	4619      	mov	r1, r3
 800506e:	480e      	ldr	r0, [pc, #56]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 8005070:	f005 fa66 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800507a:	f7fd fec3 	bl	8002e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800508a:	1d3b      	adds	r3, r7, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4806      	ldr	r0, [pc, #24]	@ (80050a8 <MX_TIM8_Init+0xa0>)
 8005090:	f005 fc82 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800509a:	f7fd feb3 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800509e:	bf00      	nop
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000ca4 	.word	0x20000ca4
 80050ac:	40010400 	.word	0x40010400

080050b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08e      	sub	sp, #56	@ 0x38
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3b      	ldr	r2, [pc, #236]	@ (80051bc <HAL_TIM_Base_MspInit+0x10c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10c      	bne.n	80050ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050d2:	4b3b      	ldr	r3, [pc, #236]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	4a3a      	ldr	r2, [pc, #232]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80050de:	4b38      	ldr	r3, [pc, #224]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 80050e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80050ea:	e062      	b.n	80051b2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f4:	d10c      	bne.n	8005110 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050f6:	4b32      	ldr	r3, [pc, #200]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	4a31      	ldr	r2, [pc, #196]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	6413      	str	r3, [r2, #64]	@ 0x40
 8005102:	4b2f      	ldr	r3, [pc, #188]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	69fb      	ldr	r3, [r7, #28]
}
 800510e:	e050      	b.n	80051b2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2b      	ldr	r2, [pc, #172]	@ (80051c4 <HAL_TIM_Base_MspInit+0x114>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10c      	bne.n	8005134 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800511a:	4b29      	ldr	r3, [pc, #164]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	4a28      	ldr	r2, [pc, #160]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005120:	f043 0302 	orr.w	r3, r3, #2
 8005124:	6413      	str	r3, [r2, #64]	@ 0x40
 8005126:	4b26      	ldr	r3, [pc, #152]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	69bb      	ldr	r3, [r7, #24]
}
 8005132:	e03e      	b.n	80051b2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a23      	ldr	r2, [pc, #140]	@ (80051c8 <HAL_TIM_Base_MspInit+0x118>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10c      	bne.n	8005158 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800513e:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	4a1f      	ldr	r2, [pc, #124]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005144:	f043 0308 	orr.w	r3, r3, #8
 8005148:	6413      	str	r3, [r2, #64]	@ 0x40
 800514a:	4b1d      	ldr	r3, [pc, #116]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697b      	ldr	r3, [r7, #20]
}
 8005156:	e02c      	b.n	80051b2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1b      	ldr	r2, [pc, #108]	@ (80051cc <HAL_TIM_Base_MspInit+0x11c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d127      	bne.n	80051b2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005162:	4b17      	ldr	r3, [pc, #92]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	4a16      	ldr	r2, [pc, #88]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005168:	f043 0302 	orr.w	r3, r3, #2
 800516c:	6453      	str	r3, [r2, #68]	@ 0x44
 800516e:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800517a:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	4a10      	ldr	r2, [pc, #64]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005184:	6313      	str	r3, [r2, #48]	@ 0x30
 8005186:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <HAL_TIM_Base_MspInit+0x110>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005192:	2304      	movs	r3, #4
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519e:	2300      	movs	r3, #0
 80051a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80051a2:	2303      	movs	r3, #3
 80051a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80051a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051aa:	4619      	mov	r1, r3
 80051ac:	4808      	ldr	r0, [pc, #32]	@ (80051d0 <HAL_TIM_Base_MspInit+0x120>)
 80051ae:	f001 fd41 	bl	8006c34 <HAL_GPIO_Init>
}
 80051b2:	bf00      	nop
 80051b4:	3738      	adds	r7, #56	@ 0x38
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40010400 	.word	0x40010400
 80051d0:	40022000 	.word	0x40022000

080051d4 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80051d8:	4b14      	ldr	r3, [pc, #80]	@ (800522c <MX_UART7_Init+0x58>)
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <MX_UART7_Init+0x5c>)
 80051dc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80051de:	4b13      	ldr	r3, [pc, #76]	@ (800522c <MX_UART7_Init+0x58>)
 80051e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80051e4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80051e6:	4b11      	ldr	r3, [pc, #68]	@ (800522c <MX_UART7_Init+0x58>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80051ec:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <MX_UART7_Init+0x58>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80051f2:	4b0e      	ldr	r3, [pc, #56]	@ (800522c <MX_UART7_Init+0x58>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80051f8:	4b0c      	ldr	r3, [pc, #48]	@ (800522c <MX_UART7_Init+0x58>)
 80051fa:	220c      	movs	r2, #12
 80051fc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051fe:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <MX_UART7_Init+0x58>)
 8005200:	2200      	movs	r2, #0
 8005202:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005204:	4b09      	ldr	r3, [pc, #36]	@ (800522c <MX_UART7_Init+0x58>)
 8005206:	2200      	movs	r2, #0
 8005208:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800520a:	4b08      	ldr	r3, [pc, #32]	@ (800522c <MX_UART7_Init+0x58>)
 800520c:	2200      	movs	r2, #0
 800520e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <MX_UART7_Init+0x58>)
 8005212:	2200      	movs	r2, #0
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005216:	4805      	ldr	r0, [pc, #20]	@ (800522c <MX_UART7_Init+0x58>)
 8005218:	f005 fc6a 	bl	800aaf0 <HAL_UART_Init>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8005222:	f7fd fdef 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000cf0 	.word	0x20000cf0
 8005230:	40007800 	.word	0x40007800

08005234 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005238:	4b14      	ldr	r3, [pc, #80]	@ (800528c <MX_USART1_UART_Init+0x58>)
 800523a:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <MX_USART1_UART_Init+0x5c>)
 800523c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800523e:	4b13      	ldr	r3, [pc, #76]	@ (800528c <MX_USART1_UART_Init+0x58>)
 8005240:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005246:	4b11      	ldr	r3, [pc, #68]	@ (800528c <MX_USART1_UART_Init+0x58>)
 8005248:	2200      	movs	r2, #0
 800524a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800524c:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <MX_USART1_UART_Init+0x58>)
 800524e:	2200      	movs	r2, #0
 8005250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005252:	4b0e      	ldr	r3, [pc, #56]	@ (800528c <MX_USART1_UART_Init+0x58>)
 8005254:	2200      	movs	r2, #0
 8005256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005258:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <MX_USART1_UART_Init+0x58>)
 800525a:	220c      	movs	r2, #12
 800525c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800525e:	4b0b      	ldr	r3, [pc, #44]	@ (800528c <MX_USART1_UART_Init+0x58>)
 8005260:	2200      	movs	r2, #0
 8005262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005264:	4b09      	ldr	r3, [pc, #36]	@ (800528c <MX_USART1_UART_Init+0x58>)
 8005266:	2200      	movs	r2, #0
 8005268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800526a:	4b08      	ldr	r3, [pc, #32]	@ (800528c <MX_USART1_UART_Init+0x58>)
 800526c:	2200      	movs	r2, #0
 800526e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005270:	4b06      	ldr	r3, [pc, #24]	@ (800528c <MX_USART1_UART_Init+0x58>)
 8005272:	2200      	movs	r2, #0
 8005274:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005276:	4805      	ldr	r0, [pc, #20]	@ (800528c <MX_USART1_UART_Init+0x58>)
 8005278:	f005 fc3a 	bl	800aaf0 <HAL_UART_Init>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005282:	f7fd fdbf 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000d78 	.word	0x20000d78
 8005290:	40011000 	.word	0x40011000

08005294 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005298:	4b14      	ldr	r3, [pc, #80]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 800529a:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <MX_USART6_UART_Init+0x5c>)
 800529c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800529e:	4b13      	ldr	r3, [pc, #76]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80052a6:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80052ac:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80052b2:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80052b8:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052ba:	220c      	movs	r2, #12
 80052bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052be:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80052c4:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052ca:	4b08      	ldr	r3, [pc, #32]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80052d6:	4805      	ldr	r0, [pc, #20]	@ (80052ec <MX_USART6_UART_Init+0x58>)
 80052d8:	f005 fc0a 	bl	800aaf0 <HAL_UART_Init>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80052e2:	f7fd fd8f 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000e00 	.word	0x20000e00
 80052f0:	40011400 	.word	0x40011400

080052f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0b0      	sub	sp, #192	@ 0xc0
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800530c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005310:	2284      	movs	r2, #132	@ 0x84
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f008 fd96 	bl	800de46 <memset>
  if(uartHandle->Instance==UART7)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a75      	ldr	r2, [pc, #468]	@ (80054f4 <HAL_UART_MspInit+0x200>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d13d      	bne.n	80053a0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005334:	4618      	mov	r0, r3
 8005336:	f003 fe11 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005340:	f7fd fd60 	bl	8002e04 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005344:	4b6c      	ldr	r3, [pc, #432]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005348:	4a6b      	ldr	r2, [pc, #428]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 800534a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800534e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005350:	4b69      	ldr	r3, [pc, #420]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800535c:	4b66      	ldr	r3, [pc, #408]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	4a65      	ldr	r2, [pc, #404]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 8005362:	f043 0320 	orr.w	r3, r3, #32
 8005366:	6313      	str	r3, [r2, #48]	@ 0x30
 8005368:	4b63      	ldr	r3, [pc, #396]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005374:	23c0      	movs	r3, #192	@ 0xc0
 8005376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537a:	2302      	movs	r3, #2
 800537c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005386:	2303      	movs	r3, #3
 8005388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800538c:	2308      	movs	r3, #8
 800538e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005392:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005396:	4619      	mov	r1, r3
 8005398:	4858      	ldr	r0, [pc, #352]	@ (80054fc <HAL_UART_MspInit+0x208>)
 800539a:	f001 fc4b 	bl	8006c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800539e:	e0a4      	b.n	80054ea <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a56      	ldr	r2, [pc, #344]	@ (8005500 <HAL_UART_MspInit+0x20c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d15d      	bne.n	8005466 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80053aa:	2340      	movs	r3, #64	@ 0x40
 80053ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80053ae:	2300      	movs	r3, #0
 80053b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053b6:	4618      	mov	r0, r3
 80053b8:	f003 fdd0 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80053c2:	f7fd fd1f 	bl	8002e04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80053c6:	4b4c      	ldr	r3, [pc, #304]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	4a4b      	ldr	r2, [pc, #300]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053cc:	f043 0310 	orr.w	r3, r3, #16
 80053d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053d2:	4b49      	ldr	r3, [pc, #292]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053de:	4b46      	ldr	r3, [pc, #280]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	4a45      	ldr	r2, [pc, #276]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053e4:	f043 0302 	orr.w	r3, r3, #2
 80053e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053ea:	4b43      	ldr	r3, [pc, #268]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053f6:	4b40      	ldr	r3, [pc, #256]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	4a3f      	ldr	r2, [pc, #252]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	6313      	str	r3, [r2, #48]	@ 0x30
 8005402:	4b3d      	ldr	r3, [pc, #244]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005414:	2302      	movs	r3, #2
 8005416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005426:	2307      	movs	r3, #7
 8005428:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800542c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005430:	4619      	mov	r1, r3
 8005432:	4834      	ldr	r0, [pc, #208]	@ (8005504 <HAL_UART_MspInit+0x210>)
 8005434:	f001 fbfe 	bl	8006c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800543c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005440:	2302      	movs	r3, #2
 8005442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800544c:	2300      	movs	r3, #0
 800544e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005452:	2307      	movs	r3, #7
 8005454:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005458:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800545c:	4619      	mov	r1, r3
 800545e:	482a      	ldr	r0, [pc, #168]	@ (8005508 <HAL_UART_MspInit+0x214>)
 8005460:	f001 fbe8 	bl	8006c34 <HAL_GPIO_Init>
}
 8005464:	e041      	b.n	80054ea <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a28      	ldr	r2, [pc, #160]	@ (800550c <HAL_UART_MspInit+0x218>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d13c      	bne.n	80054ea <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005470:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005474:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005476:	2300      	movs	r3, #0
 8005478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800547c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005480:	4618      	mov	r0, r3
 8005482:	f003 fd6b 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800548c:	f7fd fcba 	bl	8002e04 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 8005492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005494:	4a18      	ldr	r2, [pc, #96]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 8005496:	f043 0320 	orr.w	r3, r3, #32
 800549a:	6453      	str	r3, [r2, #68]	@ 0x44
 800549c:	4b16      	ldr	r3, [pc, #88]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a8:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	4a12      	ldr	r2, [pc, #72]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80054ae:	f043 0304 	orr.w	r3, r3, #4
 80054b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80054b4:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <HAL_UART_MspInit+0x204>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80054c0:	23c0      	movs	r3, #192	@ 0xc0
 80054c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c6:	2302      	movs	r3, #2
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d2:	2303      	movs	r3, #3
 80054d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80054d8:	2308      	movs	r3, #8
 80054da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054de:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80054e2:	4619      	mov	r1, r3
 80054e4:	480a      	ldr	r0, [pc, #40]	@ (8005510 <HAL_UART_MspInit+0x21c>)
 80054e6:	f001 fba5 	bl	8006c34 <HAL_GPIO_Init>
}
 80054ea:	bf00      	nop
 80054ec:	37c0      	adds	r7, #192	@ 0xc0
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40007800 	.word	0x40007800
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40021400 	.word	0x40021400
 8005500:	40011000 	.word	0x40011000
 8005504:	40020400 	.word	0x40020400
 8005508:	40020000 	.word	0x40020000
 800550c:	40011400 	.word	0x40011400
 8005510:	40020800 	.word	0x40020800

08005514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800554c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005518:	480d      	ldr	r0, [pc, #52]	@ (8005550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800551a:	490e      	ldr	r1, [pc, #56]	@ (8005554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800551c:	4a0e      	ldr	r2, [pc, #56]	@ (8005558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800551e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005520:	e002      	b.n	8005528 <LoopCopyDataInit>

08005522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005526:	3304      	adds	r3, #4

08005528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800552a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800552c:	d3f9      	bcc.n	8005522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800552e:	4a0b      	ldr	r2, [pc, #44]	@ (800555c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005530:	4c0b      	ldr	r4, [pc, #44]	@ (8005560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005534:	e001      	b.n	800553a <LoopFillZerobss>

08005536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005538:	3204      	adds	r2, #4

0800553a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800553a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800553c:	d3fb      	bcc.n	8005536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800553e:	f7ff fc13 	bl	8004d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005542:	f008 fd2b 	bl	800df9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005546:	f7fd fb5f 	bl	8002c08 <main>
  bx  lr    
 800554a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800554c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005554:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005558:	0801d538 	.word	0x0801d538
  ldr r2, =_sbss
 800555c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8005560:	20004d24 	.word	0x20004d24

08005564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005564:	e7fe      	b.n	8005564 <ADC_IRQHandler>

08005566 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800556a:	2003      	movs	r0, #3
 800556c:	f000 fcf3 	bl	8005f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005570:	200f      	movs	r0, #15
 8005572:	f7ff fa75 	bl	8004a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005576:	f7ff fa4b 	bl	8004a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005584:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <HAL_IncTick+0x20>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_IncTick+0x24>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4413      	add	r3, r2
 8005590:	4a04      	ldr	r2, [pc, #16]	@ (80055a4 <HAL_IncTick+0x24>)
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000050 	.word	0x20000050
 80055a4:	20000e88 	.word	0x20000e88

080055a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return uwTick;
 80055ac:	4b03      	ldr	r3, [pc, #12]	@ (80055bc <HAL_GetTick+0x14>)
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000e88 	.word	0x20000e88

080055c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7ff ffee 	bl	80055a8 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d005      	beq.n	80055e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055da:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <HAL_Delay+0x44>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055e6:	bf00      	nop
 80055e8:	f7ff ffde 	bl	80055a8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d8f7      	bhi.n	80055e8 <HAL_Delay+0x28>
  {
  }
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000050 	.word	0x20000050

08005608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e031      	b.n	8005682 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fb f85e 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b00      	cmp	r3, #0
 8005644:	d116      	bne.n	8005674 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800564a:	4b10      	ldr	r3, [pc, #64]	@ (800568c <HAL_ADC_Init+0x84>)
 800564c:	4013      	ands	r3, r2
 800564e:	f043 0202 	orr.w	r2, r3, #2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fad6 	bl	8005c08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	f043 0201 	orr.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	641a      	str	r2, [r3, #64]	@ 0x40
 8005672:	e001      	b.n	8005678 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	ffffeefd 	.word	0xffffeefd

08005690 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_ADC_Start+0x1a>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e0ad      	b.n	8005806 <HAL_ADC_Start+0x176>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d018      	beq.n	80056f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80056d0:	4b50      	ldr	r3, [pc, #320]	@ (8005814 <HAL_ADC_Start+0x184>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a50      	ldr	r2, [pc, #320]	@ (8005818 <HAL_ADC_Start+0x188>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	0c9a      	lsrs	r2, r3, #18
 80056dc:	4613      	mov	r3, r2
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80056e4:	e002      	b.n	80056ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f9      	bne.n	80056e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d175      	bne.n	80057ec <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005704:	4b45      	ldr	r3, [pc, #276]	@ (800581c <HAL_ADC_Start+0x18c>)
 8005706:	4013      	ands	r3, r2
 8005708:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005726:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800573a:	d106      	bne.n	800574a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005740:	f023 0206 	bic.w	r2, r3, #6
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	645a      	str	r2, [r3, #68]	@ 0x44
 8005748:	e002      	b.n	8005750 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005760:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005762:	4b2f      	ldr	r3, [pc, #188]	@ (8005820 <HAL_ADC_Start+0x190>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10f      	bne.n	800578e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d143      	bne.n	8005804 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e03a      	b.n	8005804 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a24      	ldr	r2, [pc, #144]	@ (8005824 <HAL_ADC_Start+0x194>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d10e      	bne.n	80057b6 <HAL_ADC_Start+0x126>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057b4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80057b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005820 <HAL_ADC_Start+0x190>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d120      	bne.n	8005804 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a18      	ldr	r2, [pc, #96]	@ (8005828 <HAL_ADC_Start+0x198>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d11b      	bne.n	8005804 <HAL_ADC_Start+0x174>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d114      	bne.n	8005804 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057e8:	609a      	str	r2, [r3, #8]
 80057ea:	e00b      	b.n	8005804 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f0:	f043 0210 	orr.w	r2, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fc:	f043 0201 	orr.w	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000048 	.word	0x20000048
 8005818:	431bde83 	.word	0x431bde83
 800581c:	fffff8fe 	.word	0xfffff8fe
 8005820:	40012300 	.word	0x40012300
 8005824:	40012000 	.word	0x40012000
 8005828:	40012200 	.word	0x40012200

0800582c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005848:	d113      	bne.n	8005872 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005858:	d10b      	bne.n	8005872 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e063      	b.n	800593a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005872:	f7ff fe99 	bl	80055a8 <HAL_GetTick>
 8005876:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005878:	e021      	b.n	80058be <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d01d      	beq.n	80058be <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <HAL_ADC_PollForConversion+0x6c>
 8005888:	f7ff fe8e 	bl	80055a8 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d212      	bcs.n	80058be <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d00b      	beq.n	80058be <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e03d      	b.n	800593a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d1d6      	bne.n	800587a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0212 	mvn.w	r2, #18
 80058d4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d123      	bne.n	8005938 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11f      	bne.n	8005938 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005902:	2b00      	cmp	r3, #0
 8005904:	d006      	beq.n	8005914 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005910:	2b00      	cmp	r3, #0
 8005912:	d111      	bne.n	8005938 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	f043 0201 	orr.w	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x1c>
 8005974:	2302      	movs	r3, #2
 8005976:	e136      	b.n	8005be6 <HAL_ADC_ConfigChannel+0x28a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b09      	cmp	r3, #9
 8005986:	d93a      	bls.n	80059fe <HAL_ADC_ConfigChannel+0xa2>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005990:	d035      	beq.n	80059fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68d9      	ldr	r1, [r3, #12]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	4613      	mov	r3, r2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	4413      	add	r3, r2
 80059a6:	3b1e      	subs	r3, #30
 80059a8:	2207      	movs	r2, #7
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43da      	mvns	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	400a      	ands	r2, r1
 80059b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a8d      	ldr	r2, [pc, #564]	@ (8005bf4 <HAL_ADC_ConfigChannel+0x298>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10a      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68d9      	ldr	r1, [r3, #12]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	061a      	lsls	r2, r3, #24
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059d6:	e035      	b.n	8005a44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	4618      	mov	r0, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	4403      	add	r3, r0
 80059f0:	3b1e      	subs	r3, #30
 80059f2:	409a      	lsls	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059fc:	e022      	b.n	8005a44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6919      	ldr	r1, [r3, #16]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	2207      	movs	r2, #7
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43da      	mvns	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	400a      	ands	r2, r1
 8005a20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6919      	ldr	r1, [r3, #16]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4618      	mov	r0, r3
 8005a34:	4603      	mov	r3, r0
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4403      	add	r3, r0
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d824      	bhi.n	8005a96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3b05      	subs	r3, #5
 8005a5e:	221f      	movs	r2, #31
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43da      	mvns	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	3b05      	subs	r3, #5
 8005a88:	fa00 f203 	lsl.w	r2, r0, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a94:	e04c      	b.n	8005b30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b0c      	cmp	r3, #12
 8005a9c:	d824      	bhi.n	8005ae8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	3b23      	subs	r3, #35	@ 0x23
 8005ab0:	221f      	movs	r2, #31
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	400a      	ands	r2, r1
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4618      	mov	r0, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3b23      	subs	r3, #35	@ 0x23
 8005ada:	fa00 f203 	lsl.w	r2, r0, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ae6:	e023      	b.n	8005b30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	3b41      	subs	r3, #65	@ 0x41
 8005afa:	221f      	movs	r2, #31
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43da      	mvns	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	400a      	ands	r2, r1
 8005b08:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	4618      	mov	r0, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	3b41      	subs	r3, #65	@ 0x41
 8005b24:	fa00 f203 	lsl.w	r2, r0, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a30      	ldr	r2, [pc, #192]	@ (8005bf8 <HAL_ADC_ConfigChannel+0x29c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10a      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x1f4>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b42:	d105      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005b44:	4b2d      	ldr	r3, [pc, #180]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a2c      	ldr	r2, [pc, #176]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b4a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005b4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a28      	ldr	r2, [pc, #160]	@ (8005bf8 <HAL_ADC_ConfigChannel+0x29c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d10f      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x21e>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b12      	cmp	r3, #18
 8005b60:	d10b      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005b62:	4b26      	ldr	r3, [pc, #152]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4a25      	ldr	r2, [pc, #148]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b68:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005b6c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005b6e:	4b23      	ldr	r3, [pc, #140]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4a22      	ldr	r2, [pc, #136]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b78:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <HAL_ADC_ConfigChannel+0x29c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d12b      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x280>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf4 <HAL_ADC_ConfigChannel+0x298>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <HAL_ADC_ConfigChannel+0x23a>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b11      	cmp	r3, #17
 8005b94:	d122      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005b96:	4b19      	ldr	r3, [pc, #100]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4a18      	ldr	r2, [pc, #96]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005b9c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005ba0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ba2:	4b16      	ldr	r3, [pc, #88]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4a15      	ldr	r2, [pc, #84]	@ (8005bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8005ba8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a10      	ldr	r2, [pc, #64]	@ (8005bf4 <HAL_ADC_ConfigChannel+0x298>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005bb8:	4b11      	ldr	r3, [pc, #68]	@ (8005c00 <HAL_ADC_ConfigChannel+0x2a4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a11      	ldr	r2, [pc, #68]	@ (8005c04 <HAL_ADC_ConfigChannel+0x2a8>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	0c9a      	lsrs	r2, r3, #18
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005bce:	e002      	b.n	8005bd6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f9      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	10000012 	.word	0x10000012
 8005bf8:	40012000 	.word	0x40012000
 8005bfc:	40012300 	.word	0x40012300
 8005c00:	20000048 	.word	0x20000048
 8005c04:	431bde83 	.word	0x431bde83

08005c08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005c10:	4b78      	ldr	r3, [pc, #480]	@ (8005df4 <ADC_Init+0x1ec>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4a77      	ldr	r2, [pc, #476]	@ (8005df4 <ADC_Init+0x1ec>)
 8005c16:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005c1a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005c1c:	4b75      	ldr	r3, [pc, #468]	@ (8005df4 <ADC_Init+0x1ec>)
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4973      	ldr	r1, [pc, #460]	@ (8005df4 <ADC_Init+0x1ec>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	021a      	lsls	r2, r3, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6899      	ldr	r1, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c96:	4a58      	ldr	r2, [pc, #352]	@ (8005df8 <ADC_Init+0x1f0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d022      	beq.n	8005ce2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005caa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6899      	ldr	r1, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	e00f      	b.n	8005d02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0202 	bic.w	r2, r2, #2
 8005d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6899      	ldr	r1, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	005a      	lsls	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01b      	beq.n	8005d68 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005d4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	035a      	lsls	r2, r3, #13
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	e007      	b.n	8005d78 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	051a      	lsls	r2, r3, #20
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6899      	ldr	r1, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005dba:	025a      	lsls	r2, r3, #9
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6899      	ldr	r1, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	029a      	lsls	r2, r3, #10
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40012300 	.word	0x40012300
 8005df8:	0f000001 	.word	0x0f000001

08005dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <__NVIC_SetPriorityGrouping+0x40>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e24:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <__NVIC_SetPriorityGrouping+0x44>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e2a:	4a04      	ldr	r2, [pc, #16]	@ (8005e3c <__NVIC_SetPriorityGrouping+0x40>)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	60d3      	str	r3, [r2, #12]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	e000ed00 	.word	0xe000ed00
 8005e40:	05fa0000 	.word	0x05fa0000

08005e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e48:	4b04      	ldr	r3, [pc, #16]	@ (8005e5c <__NVIC_GetPriorityGrouping+0x18>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0307 	and.w	r3, r3, #7
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	db0b      	blt.n	8005e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	f003 021f 	and.w	r2, r3, #31
 8005e78:	4907      	ldr	r1, [pc, #28]	@ (8005e98 <__NVIC_EnableIRQ+0x38>)
 8005e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	2001      	movs	r0, #1
 8005e82:	fa00 f202 	lsl.w	r2, r0, r2
 8005e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	e000e100 	.word	0xe000e100

08005e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	6039      	str	r1, [r7, #0]
 8005ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	db0a      	blt.n	8005ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	490c      	ldr	r1, [pc, #48]	@ (8005ee8 <__NVIC_SetPriority+0x4c>)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ec4:	e00a      	b.n	8005edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	4908      	ldr	r1, [pc, #32]	@ (8005eec <__NVIC_SetPriority+0x50>)
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	0112      	lsls	r2, r2, #4
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	440b      	add	r3, r1
 8005eda:	761a      	strb	r2, [r3, #24]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000e100 	.word	0xe000e100
 8005eec:	e000ed00 	.word	0xe000ed00

08005ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	@ 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f1c3 0307 	rsb	r3, r3, #7
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	bf28      	it	cs
 8005f0e:	2304      	movcs	r3, #4
 8005f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	3304      	adds	r3, #4
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d902      	bls.n	8005f20 <NVIC_EncodePriority+0x30>
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3b03      	subs	r3, #3
 8005f1e:	e000      	b.n	8005f22 <NVIC_EncodePriority+0x32>
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	401a      	ands	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f38:	f04f 31ff 	mov.w	r1, #4294967295
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	43d9      	mvns	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f48:	4313      	orrs	r3, r2
         );
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	@ 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff ff4c 	bl	8005dfc <__NVIC_SetPriorityGrouping>
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f7e:	f7ff ff61 	bl	8005e44 <__NVIC_GetPriorityGrouping>
 8005f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	6978      	ldr	r0, [r7, #20]
 8005f8a:	f7ff ffb1 	bl	8005ef0 <NVIC_EncodePriority>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ff80 	bl	8005e9c <__NVIC_SetPriority>
}
 8005f9c:	bf00      	nop
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff ff54 	bl	8005e60 <__NVIC_EnableIRQ>
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e014      	b.n	8005ffc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	791b      	ldrb	r3, [r3, #4]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fa fc18 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601a:	d120      	bne.n	800605e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800602a:	d118      	bne.n	800605e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2204      	movs	r2, #4
 8006030:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006046:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006056:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f82d 	bl	80060b8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800606c:	d120      	bne.n	80060b0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800607c:	d118      	bne.n	80060b0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2204      	movs	r2, #4
 8006082:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f043 0202 	orr.w	r2, r3, #2
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006098:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f85d 	bl	800616a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	795b      	ldrb	r3, [r3, #5]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_DAC_ConfigChannel+0x18>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e03c      	b.n	800615e <HAL_DAC_ConfigChannel+0x92>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2202      	movs	r2, #2
 80060ee:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	43db      	mvns	r3, r3
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4013      	ands	r3, r2
 800610c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	22c0      	movs	r2, #192	@ 0xc0
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43da      	mvns	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	400a      	ands	r2, r1
 800614e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800618c:	f7ff fa0c 	bl	80055a8 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e099      	b.n	80062d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061bc:	e00f      	b.n	80061de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061be:	f7ff f9f3 	bl	80055a8 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	d908      	bls.n	80061de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2203      	movs	r2, #3
 80061d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e078      	b.n	80062d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e8      	bne.n	80061be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4b38      	ldr	r3, [pc, #224]	@ (80062d8 <HAL_DMA_Init+0x158>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800620a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	2b04      	cmp	r3, #4
 8006236:	d107      	bne.n	8006248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006240:	4313      	orrs	r3, r2
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	2b04      	cmp	r3, #4
 8006270:	d117      	bne.n	80062a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f8bd 	bl	8006404 <DMA_CheckFifoParam>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2240      	movs	r2, #64	@ 0x40
 8006294:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800629e:	2301      	movs	r3, #1
 80062a0:	e016      	b.n	80062d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f874 	bl	8006398 <DMA_CalcBaseAndBitshift>
 80062b0:	4603      	mov	r3, r0
 80062b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b8:	223f      	movs	r2, #63	@ 0x3f
 80062ba:	409a      	lsls	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	f010803f 	.word	0xf010803f

080062dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e050      	b.n	8006390 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d101      	bne.n	80062fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80062fa:	2302      	movs	r3, #2
 80062fc:	e048      	b.n	8006390 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0201 	bic.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2221      	movs	r2, #33	@ 0x21
 800633c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f82a 	bl	8006398 <DMA_CalcBaseAndBitshift>
 8006344:	4603      	mov	r3, r0
 8006346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634c:	223f      	movs	r2, #63	@ 0x3f
 800634e:	409a      	lsls	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	3b10      	subs	r3, #16
 80063a8:	4a13      	ldr	r2, [pc, #76]	@ (80063f8 <DMA_CalcBaseAndBitshift+0x60>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063b2:	4a12      	ldr	r2, [pc, #72]	@ (80063fc <DMA_CalcBaseAndBitshift+0x64>)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d908      	bls.n	80063d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006400 <DMA_CalcBaseAndBitshift+0x68>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	1d1a      	adds	r2, r3, #4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80063d6:	e006      	b.n	80063e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <DMA_CalcBaseAndBitshift+0x68>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	aaaaaaab 	.word	0xaaaaaaab
 80063fc:	0801d440 	.word	0x0801d440
 8006400:	fffffc00 	.word	0xfffffc00

08006404 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11f      	bne.n	800645e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d856      	bhi.n	80064d2 <DMA_CheckFifoParam+0xce>
 8006424:	a201      	add	r2, pc, #4	@ (adr r2, 800642c <DMA_CheckFifoParam+0x28>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800643d 	.word	0x0800643d
 8006430:	0800644f 	.word	0x0800644f
 8006434:	0800643d 	.word	0x0800643d
 8006438:	080064d3 	.word	0x080064d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d046      	beq.n	80064d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800644c:	e043      	b.n	80064d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006456:	d140      	bne.n	80064da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800645c:	e03d      	b.n	80064da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006466:	d121      	bne.n	80064ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b03      	cmp	r3, #3
 800646c:	d837      	bhi.n	80064de <DMA_CheckFifoParam+0xda>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <DMA_CheckFifoParam+0x70>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006485 	.word	0x08006485
 8006478:	0800648b 	.word	0x0800648b
 800647c:	08006485 	.word	0x08006485
 8006480:	0800649d 	.word	0x0800649d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
      break;
 8006488:	e030      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d025      	beq.n	80064e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649a:	e022      	b.n	80064e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064a4:	d11f      	bne.n	80064e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064aa:	e01c      	b.n	80064e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d903      	bls.n	80064ba <DMA_CheckFifoParam+0xb6>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d003      	beq.n	80064c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064b8:	e018      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
      break;
 80064be:	e015      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	e00b      	b.n	80064ea <DMA_CheckFifoParam+0xe6>
      break;
 80064d2:	bf00      	nop
 80064d4:	e00a      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064d6:	bf00      	nop
 80064d8:	e008      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064da:	bf00      	nop
 80064dc:	e006      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064de:	bf00      	nop
 80064e0:	e004      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;   
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <DMA_CheckFifoParam+0xe8>
      break;
 80064ea:	bf00      	nop
    }
  } 
  
  return status; 
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop

080064fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e039      	b.n	8006582 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fa f9f2 	bl	800090c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800654c:	f023 0107 	bic.w	r1, r3, #7
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006562:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <HAL_DMA2D_Init+0x90>)
 8006564:	4013      	ands	r3, r2
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68d1      	ldr	r1, [r2, #12]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	430b      	orrs	r3, r1
 8006570:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	ffffc000 	.word	0xffffc000

08006590 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_DMA2D_Start+0x1c>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e018      	b.n	80065de <HAL_DMA2D_Start+0x4e>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fa98 	bl	8006afc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b086      	sub	sp, #24
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d056      	beq.n	80066b0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006602:	f7fe ffd1 	bl	80055a8 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006608:	e04b      	b.n	80066a2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006618:	2b00      	cmp	r3, #0
 800661a:	d023      	beq.n	8006664 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662a:	f043 0202 	orr.w	r2, r3, #2
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006640:	f043 0201 	orr.w	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2221      	movs	r2, #33	@ 0x21
 800664e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2204      	movs	r2, #4
 8006654:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0a5      	b.n	80067b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d01a      	beq.n	80066a2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800666c:	f7fe ff9c 	bl	80055a8 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d302      	bcc.n	8006682 <HAL_DMA2D_PollForTransfer+0x9c>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10f      	bne.n	80066a2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006686:	f043 0220 	orr.w	r2, r3, #32
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2203      	movs	r2, #3
 8006692:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e086      	b.n	80067b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ac      	beq.n	800660a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d061      	beq.n	8006796 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80066d2:	f7fe ff69 	bl	80055a8 <HAL_GetTick>
 80066d6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80066d8:	e056      	b.n	8006788 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d02e      	beq.n	800674a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fa:	f043 0204 	orr.w	r2, r3, #4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	f043 0202 	orr.w	r2, r3, #2
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2229      	movs	r2, #41	@ 0x29
 8006734:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2204      	movs	r2, #4
 800673a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e032      	b.n	80067b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d01a      	beq.n	8006788 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fe ff29 	bl	80055a8 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <HAL_DMA2D_PollForTransfer+0x182>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10f      	bne.n	8006788 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2203      	movs	r2, #3
 8006778:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e013      	b.n	80067b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0a1      	beq.n	80066da <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2212      	movs	r2, #18
 800679c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d026      	beq.n	8006828 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d021      	beq.n	8006828 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067f2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f8:	f043 0201 	orr.w	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2201      	movs	r2, #1
 8006806:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2204      	movs	r2, #4
 800680c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d026      	beq.n	8006880 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d021      	beq.n	8006880 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800684a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2220      	movs	r2, #32
 8006852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	f043 0202 	orr.w	r2, r3, #2
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2204      	movs	r2, #4
 8006864:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d026      	beq.n	80068d8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006890:	2b00      	cmp	r3, #0
 8006892:	d021      	beq.n	80068d8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2208      	movs	r2, #8
 80068aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b0:	f043 0204 	orr.w	r2, r3, #4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2204      	movs	r2, #4
 80068bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d013      	beq.n	800690a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00e      	beq.n	800690a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2204      	movs	r2, #4
 8006902:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f853 	bl	80069b0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d024      	beq.n	800695e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01f      	beq.n	800695e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800692c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2202      	movs	r2, #2
 8006934:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01f      	beq.n	80069a8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01a      	beq.n	80069a8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006980:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f80e 	bl	80069c4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_DMA2D_ConfigLayer+0x20>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e079      	b.n	8006aec <HAL_DMA2D_ConfigLayer+0x114>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	3318      	adds	r3, #24
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006a22:	4b35      	ldr	r3, [pc, #212]	@ (8006af8 <HAL_DMA2D_ConfigLayer+0x120>)
 8006a24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b0a      	cmp	r3, #10
 8006a2c:	d003      	beq.n	8006a36 <HAL_DMA2D_ConfigLayer+0x5e>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b09      	cmp	r3, #9
 8006a34:	d107      	bne.n	8006a46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e005      	b.n	8006a52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d120      	bne.n	8006a9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	ea02 0103 	and.w	r1, r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b0a      	cmp	r3, #10
 8006a80:	d003      	beq.n	8006a8a <HAL_DMA2D_ConfigLayer+0xb2>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d127      	bne.n	8006ada <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006a96:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a98:	e01f      	b.n	8006ada <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	43db      	mvns	r3, r3
 8006aa4:	ea02 0103 	and.w	r1, r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b0a      	cmp	r3, #10
 8006ac2:	d003      	beq.n	8006acc <HAL_DMA2D_ConfigLayer+0xf4>
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b09      	cmp	r3, #9
 8006aca:	d106      	bne.n	8006ada <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006ad8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	ff03000f 	.word	0xff03000f

08006afc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b08b      	sub	sp, #44	@ 0x2c
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b10:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	041a      	lsls	r2, r3, #16
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b34:	d174      	bne.n	8006c20 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006b3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006b4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d108      	bne.n	8006b6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b6c:	e053      	b.n	8006c16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d106      	bne.n	8006b84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b82:	e048      	b.n	8006c16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d111      	bne.n	8006bb0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	0cdb      	lsrs	r3, r3, #19
 8006b90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	0a9b      	lsrs	r3, r3, #10
 8006b96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	08db      	lsrs	r3, r3, #3
 8006b9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	02db      	lsls	r3, r3, #11
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bae:	e032      	b.n	8006c16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d117      	bne.n	8006be8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	0fdb      	lsrs	r3, r3, #31
 8006bbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	0cdb      	lsrs	r3, r3, #19
 8006bc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	0adb      	lsrs	r3, r3, #11
 8006bc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	03db      	lsls	r3, r3, #15
 8006bde:	4313      	orrs	r3, r2
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be6:	e016      	b.n	8006c16 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	0f1b      	lsrs	r3, r3, #28
 8006bec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	0d1b      	lsrs	r3, r3, #20
 8006bf2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	0b1b      	lsrs	r3, r3, #12
 8006bf8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	011a      	lsls	r2, r3, #4
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	031b      	lsls	r3, r3, #12
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006c1e:	e003      	b.n	8006c28 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	60da      	str	r2, [r3, #12]
}
 8006c28:	bf00      	nop
 8006c2a:	372c      	adds	r7, #44	@ 0x2c
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b089      	sub	sp, #36	@ 0x24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e175      	b.n	8006f40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006c54:	2201      	movs	r2, #1
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4013      	ands	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	f040 8164 	bne.w	8006f3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d005      	beq.n	8006c8a <HAL_GPIO_Init+0x56>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d130      	bne.n	8006cec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	2203      	movs	r2, #3
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f003 0201 	and.w	r2, r3, #1
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d017      	beq.n	8006d28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	2203      	movs	r2, #3
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d123      	bne.n	8006d7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	08da      	lsrs	r2, r3, #3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3208      	adds	r2, #8
 8006d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	220f      	movs	r2, #15
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	43db      	mvns	r3, r3
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	4013      	ands	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	08da      	lsrs	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3208      	adds	r2, #8
 8006d76:	69b9      	ldr	r1, [r7, #24]
 8006d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	2203      	movs	r2, #3
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f003 0203 	and.w	r2, r3, #3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80be 	beq.w	8006f3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dbe:	4b66      	ldr	r3, [pc, #408]	@ (8006f58 <HAL_GPIO_Init+0x324>)
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	4a65      	ldr	r2, [pc, #404]	@ (8006f58 <HAL_GPIO_Init+0x324>)
 8006dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006dca:	4b63      	ldr	r3, [pc, #396]	@ (8006f58 <HAL_GPIO_Init+0x324>)
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006dd6:	4a61      	ldr	r2, [pc, #388]	@ (8006f5c <HAL_GPIO_Init+0x328>)
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	3302      	adds	r3, #2
 8006dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	220f      	movs	r2, #15
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	43db      	mvns	r3, r3
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	4013      	ands	r3, r2
 8006df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a58      	ldr	r2, [pc, #352]	@ (8006f60 <HAL_GPIO_Init+0x32c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d037      	beq.n	8006e72 <HAL_GPIO_Init+0x23e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a57      	ldr	r2, [pc, #348]	@ (8006f64 <HAL_GPIO_Init+0x330>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d031      	beq.n	8006e6e <HAL_GPIO_Init+0x23a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a56      	ldr	r2, [pc, #344]	@ (8006f68 <HAL_GPIO_Init+0x334>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02b      	beq.n	8006e6a <HAL_GPIO_Init+0x236>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a55      	ldr	r2, [pc, #340]	@ (8006f6c <HAL_GPIO_Init+0x338>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d025      	beq.n	8006e66 <HAL_GPIO_Init+0x232>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a54      	ldr	r2, [pc, #336]	@ (8006f70 <HAL_GPIO_Init+0x33c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01f      	beq.n	8006e62 <HAL_GPIO_Init+0x22e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a53      	ldr	r2, [pc, #332]	@ (8006f74 <HAL_GPIO_Init+0x340>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d019      	beq.n	8006e5e <HAL_GPIO_Init+0x22a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a52      	ldr	r2, [pc, #328]	@ (8006f78 <HAL_GPIO_Init+0x344>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <HAL_GPIO_Init+0x226>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a51      	ldr	r2, [pc, #324]	@ (8006f7c <HAL_GPIO_Init+0x348>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00d      	beq.n	8006e56 <HAL_GPIO_Init+0x222>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a50      	ldr	r2, [pc, #320]	@ (8006f80 <HAL_GPIO_Init+0x34c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d007      	beq.n	8006e52 <HAL_GPIO_Init+0x21e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a4f      	ldr	r2, [pc, #316]	@ (8006f84 <HAL_GPIO_Init+0x350>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <HAL_GPIO_Init+0x21a>
 8006e4a:	2309      	movs	r3, #9
 8006e4c:	e012      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e4e:	230a      	movs	r3, #10
 8006e50:	e010      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e52:	2308      	movs	r3, #8
 8006e54:	e00e      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e56:	2307      	movs	r3, #7
 8006e58:	e00c      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e5a:	2306      	movs	r3, #6
 8006e5c:	e00a      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e5e:	2305      	movs	r3, #5
 8006e60:	e008      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e62:	2304      	movs	r3, #4
 8006e64:	e006      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e66:	2303      	movs	r3, #3
 8006e68:	e004      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e002      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <HAL_GPIO_Init+0x240>
 8006e72:	2300      	movs	r3, #0
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	f002 0203 	and.w	r2, r2, #3
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	4093      	lsls	r3, r2
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006e84:	4935      	ldr	r1, [pc, #212]	@ (8006f5c <HAL_GPIO_Init+0x328>)
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	089b      	lsrs	r3, r3, #2
 8006e8a:	3302      	adds	r3, #2
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e92:	4b3d      	ldr	r3, [pc, #244]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006eb6:	4a34      	ldr	r2, [pc, #208]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ebc:	4b32      	ldr	r3, [pc, #200]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ee0:	4a29      	ldr	r2, [pc, #164]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006ee6:	4b28      	ldr	r3, [pc, #160]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f10:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f34:	4a14      	ldr	r2, [pc, #80]	@ (8006f88 <HAL_GPIO_Init+0x354>)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b0f      	cmp	r3, #15
 8006f44:	f67f ae86 	bls.w	8006c54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	3724      	adds	r7, #36	@ 0x24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40013800 	.word	0x40013800
 8006f60:	40020000 	.word	0x40020000
 8006f64:	40020400 	.word	0x40020400
 8006f68:	40020800 	.word	0x40020800
 8006f6c:	40020c00 	.word	0x40020c00
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40021400 	.word	0x40021400
 8006f78:	40021800 	.word	0x40021800
 8006f7c:	40021c00 	.word	0x40021c00
 8006f80:	40022000 	.word	0x40022000
 8006f84:	40022400 	.word	0x40022400
 8006f88:	40013c00 	.word	0x40013c00

08006f8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006f96:	2300      	movs	r3, #0
 8006f98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e0d9      	b.n	800715c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006fa8:	2201      	movs	r2, #1
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	f040 80c9 	bne.w	8007156 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006fc4:	4a6b      	ldr	r2, [pc, #428]	@ (8007174 <HAL_GPIO_DeInit+0x1e8>)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	089b      	lsrs	r3, r3, #2
 8006fca:	3302      	adds	r3, #2
 8006fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	220f      	movs	r2, #15
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a63      	ldr	r2, [pc, #396]	@ (8007178 <HAL_GPIO_DeInit+0x1ec>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d037      	beq.n	800705e <HAL_GPIO_DeInit+0xd2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a62      	ldr	r2, [pc, #392]	@ (800717c <HAL_GPIO_DeInit+0x1f0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d031      	beq.n	800705a <HAL_GPIO_DeInit+0xce>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a61      	ldr	r2, [pc, #388]	@ (8007180 <HAL_GPIO_DeInit+0x1f4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d02b      	beq.n	8007056 <HAL_GPIO_DeInit+0xca>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a60      	ldr	r2, [pc, #384]	@ (8007184 <HAL_GPIO_DeInit+0x1f8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d025      	beq.n	8007052 <HAL_GPIO_DeInit+0xc6>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a5f      	ldr	r2, [pc, #380]	@ (8007188 <HAL_GPIO_DeInit+0x1fc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01f      	beq.n	800704e <HAL_GPIO_DeInit+0xc2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a5e      	ldr	r2, [pc, #376]	@ (800718c <HAL_GPIO_DeInit+0x200>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d019      	beq.n	800704a <HAL_GPIO_DeInit+0xbe>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a5d      	ldr	r2, [pc, #372]	@ (8007190 <HAL_GPIO_DeInit+0x204>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <HAL_GPIO_DeInit+0xba>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a5c      	ldr	r2, [pc, #368]	@ (8007194 <HAL_GPIO_DeInit+0x208>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00d      	beq.n	8007042 <HAL_GPIO_DeInit+0xb6>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a5b      	ldr	r2, [pc, #364]	@ (8007198 <HAL_GPIO_DeInit+0x20c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d007      	beq.n	800703e <HAL_GPIO_DeInit+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a5a      	ldr	r2, [pc, #360]	@ (800719c <HAL_GPIO_DeInit+0x210>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d101      	bne.n	800703a <HAL_GPIO_DeInit+0xae>
 8007036:	2309      	movs	r3, #9
 8007038:	e012      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 800703a:	230a      	movs	r3, #10
 800703c:	e010      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 800703e:	2308      	movs	r3, #8
 8007040:	e00e      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 8007042:	2307      	movs	r3, #7
 8007044:	e00c      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 8007046:	2306      	movs	r3, #6
 8007048:	e00a      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 800704a:	2305      	movs	r3, #5
 800704c:	e008      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 800704e:	2304      	movs	r3, #4
 8007050:	e006      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 8007052:	2303      	movs	r3, #3
 8007054:	e004      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 8007056:	2302      	movs	r3, #2
 8007058:	e002      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <HAL_GPIO_DeInit+0xd4>
 800705e:	2300      	movs	r3, #0
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	f002 0203 	and.w	r2, r2, #3
 8007066:	0092      	lsls	r2, r2, #2
 8007068:	4093      	lsls	r3, r2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	d132      	bne.n	80070d6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007070:	4b4b      	ldr	r3, [pc, #300]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	43db      	mvns	r3, r3
 8007078:	4949      	ldr	r1, [pc, #292]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 800707a:	4013      	ands	r3, r2
 800707c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800707e:	4b48      	ldr	r3, [pc, #288]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	43db      	mvns	r3, r3
 8007086:	4946      	ldr	r1, [pc, #280]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 8007088:	4013      	ands	r3, r2
 800708a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800708c:	4b44      	ldr	r3, [pc, #272]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	43db      	mvns	r3, r3
 8007094:	4942      	ldr	r1, [pc, #264]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 8007096:	4013      	ands	r3, r2
 8007098:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800709a:	4b41      	ldr	r3, [pc, #260]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	493f      	ldr	r1, [pc, #252]	@ (80071a0 <HAL_GPIO_DeInit+0x214>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	220f      	movs	r2, #15
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80070b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007174 <HAL_GPIO_DeInit+0x1e8>)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	089b      	lsrs	r3, r3, #2
 80070be:	3302      	adds	r3, #2
 80070c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	43da      	mvns	r2, r3
 80070c8:	482a      	ldr	r0, [pc, #168]	@ (8007174 <HAL_GPIO_DeInit+0x1e8>)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	089b      	lsrs	r3, r3, #2
 80070ce:	400a      	ands	r2, r1
 80070d0:	3302      	adds	r3, #2
 80070d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	2103      	movs	r1, #3
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	43db      	mvns	r3, r3
 80070e6:	401a      	ands	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	08da      	lsrs	r2, r3, #3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3208      	adds	r2, #8
 80070f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	220f      	movs	r2, #15
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	43db      	mvns	r3, r3
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	08d2      	lsrs	r2, r2, #3
 800710c:	4019      	ands	r1, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3208      	adds	r2, #8
 8007112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	2103      	movs	r1, #3
 8007120:	fa01 f303 	lsl.w	r3, r1, r3
 8007124:	43db      	mvns	r3, r3
 8007126:	401a      	ands	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	2101      	movs	r1, #1
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	fa01 f303 	lsl.w	r3, r1, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	401a      	ands	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	2103      	movs	r1, #3
 800714a:	fa01 f303 	lsl.w	r3, r1, r3
 800714e:	43db      	mvns	r3, r3
 8007150:	401a      	ands	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	3301      	adds	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2b0f      	cmp	r3, #15
 8007160:	f67f af22 	bls.w	8006fa8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40013800 	.word	0x40013800
 8007178:	40020000 	.word	0x40020000
 800717c:	40020400 	.word	0x40020400
 8007180:	40020800 	.word	0x40020800
 8007184:	40020c00 	.word	0x40020c00
 8007188:	40021000 	.word	0x40021000
 800718c:	40021400 	.word	0x40021400
 8007190:	40021800 	.word	0x40021800
 8007194:	40021c00 	.word	0x40021c00
 8007198:	40022000 	.word	0x40022000
 800719c:	40022400 	.word	0x40022400
 80071a0:	40013c00 	.word	0x40013c00

080071a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
 80071b0:	4613      	mov	r3, r2
 80071b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071b4:	787b      	ldrb	r3, [r7, #1]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071ba:	887a      	ldrh	r2, [r7, #2]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80071c0:	e003      	b.n	80071ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80071c2:	887b      	ldrh	r3, [r7, #2]
 80071c4:	041a      	lsls	r2, r3, #16
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	619a      	str	r2, [r3, #24]
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e07f      	b.n	80072ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fb fa9a 	bl	8002738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2224      	movs	r2, #36	@ 0x24
 8007208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0201 	bic.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d107      	bne.n	8007252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	e006      	b.n	8007260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800725e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d104      	bne.n	8007272 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6859      	ldr	r1, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4b1d      	ldr	r3, [pc, #116]	@ (80072f4 <HAL_I2C_Init+0x11c>)
 800727e:	430b      	orrs	r3, r1
 8007280:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007290:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69d9      	ldr	r1, [r3, #28]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	02008000 	.word	0x02008000

080072f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e021      	b.n	800734e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2224      	movs	r2, #36	@ 0x24
 800730e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0201 	bic.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fb fab0 	bl	8002888 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	461a      	mov	r2, r3
 8007366:	4603      	mov	r3, r0
 8007368:	817b      	strh	r3, [r7, #10]
 800736a:	460b      	mov	r3, r1
 800736c:	813b      	strh	r3, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b20      	cmp	r3, #32
 800737c:	f040 80f9 	bne.w	8007572 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_I2C_Mem_Write+0x34>
 8007386:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007392:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0ed      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_I2C_Mem_Write+0x4e>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e0e6      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073ae:	f7fe f8fb 	bl	80055a8 <HAL_GetTick>
 80073b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	2319      	movs	r3, #25
 80073ba:	2201      	movs	r2, #1
 80073bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 fad1 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0d1      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2221      	movs	r2, #33	@ 0x21
 80073d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2240      	movs	r2, #64	@ 0x40
 80073dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a3a      	ldr	r2, [r7, #32]
 80073ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80073f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073f8:	88f8      	ldrh	r0, [r7, #6]
 80073fa:	893a      	ldrh	r2, [r7, #8]
 80073fc:	8979      	ldrh	r1, [r7, #10]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	4603      	mov	r3, r0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f9e1 	bl	80077d0 <I2C_RequestMemoryWrite>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0a9      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	2bff      	cmp	r3, #255	@ 0xff
 8007428:	d90e      	bls.n	8007448 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	22ff      	movs	r2, #255	@ 0xff
 800742e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007434:	b2da      	uxtb	r2, r3
 8007436:	8979      	ldrh	r1, [r7, #10]
 8007438:	2300      	movs	r3, #0
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fc2d 	bl	8007ca0 <I2C_TransferConfig>
 8007446:	e00f      	b.n	8007468 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007456:	b2da      	uxtb	r2, r3
 8007458:	8979      	ldrh	r1, [r7, #10]
 800745a:	2300      	movs	r3, #0
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fc1c 	bl	8007ca0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fabb 	bl	80079e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e07b      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d034      	beq.n	8007520 <HAL_I2C_Mem_Write+0x1c8>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d130      	bne.n	8007520 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	2200      	movs	r2, #0
 80074c6:	2180      	movs	r1, #128	@ 0x80
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fa4d 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e04d      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2bff      	cmp	r3, #255	@ 0xff
 80074e0:	d90e      	bls.n	8007500 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	22ff      	movs	r2, #255	@ 0xff
 80074e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	8979      	ldrh	r1, [r7, #10]
 80074f0:	2300      	movs	r3, #0
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 fbd1 	bl	8007ca0 <I2C_TransferConfig>
 80074fe:	e00f      	b.n	8007520 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800750e:	b2da      	uxtb	r2, r3
 8007510:	8979      	ldrh	r1, [r7, #10]
 8007512:	2300      	movs	r3, #0
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fbc0 	bl	8007ca0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d19e      	bne.n	8007468 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 fa9a 	bl	8007a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e01a      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2220      	movs	r2, #32
 8007544:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	4b0a      	ldr	r3, [pc, #40]	@ (800757c <HAL_I2C_Mem_Write+0x224>)
 8007552:	400b      	ands	r3, r1
 8007554:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
  }
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	fe00e800 	.word	0xfe00e800

08007580 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	4608      	mov	r0, r1
 800758a:	4611      	mov	r1, r2
 800758c:	461a      	mov	r2, r3
 800758e:	4603      	mov	r3, r0
 8007590:	817b      	strh	r3, [r7, #10]
 8007592:	460b      	mov	r3, r1
 8007594:	813b      	strh	r3, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	f040 80fd 	bne.w	80077a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <HAL_I2C_Mem_Read+0x34>
 80075ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d105      	bne.n	80075c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0f1      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_I2C_Mem_Read+0x4e>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e0ea      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075d6:	f7fd ffe7 	bl	80055a8 <HAL_GetTick>
 80075da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2319      	movs	r3, #25
 80075e2:	2201      	movs	r2, #1
 80075e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f9bd 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0d5      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2222      	movs	r2, #34	@ 0x22
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2240      	movs	r2, #64	@ 0x40
 8007604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a3a      	ldr	r2, [r7, #32]
 8007612:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007618:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007620:	88f8      	ldrh	r0, [r7, #6]
 8007622:	893a      	ldrh	r2, [r7, #8]
 8007624:	8979      	ldrh	r1, [r7, #10]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	4603      	mov	r3, r0
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f921 	bl	8007878 <I2C_RequestMemoryRead>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0ad      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	2bff      	cmp	r3, #255	@ 0xff
 8007650:	d90e      	bls.n	8007670 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	22ff      	movs	r2, #255	@ 0xff
 8007656:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800765c:	b2da      	uxtb	r2, r3
 800765e:	8979      	ldrh	r1, [r7, #10]
 8007660:	4b52      	ldr	r3, [pc, #328]	@ (80077ac <HAL_I2C_Mem_Read+0x22c>)
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fb19 	bl	8007ca0 <I2C_TransferConfig>
 800766e:	e00f      	b.n	8007690 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800767e:	b2da      	uxtb	r2, r3
 8007680:	8979      	ldrh	r1, [r7, #10]
 8007682:	4b4a      	ldr	r3, [pc, #296]	@ (80077ac <HAL_I2C_Mem_Read+0x22c>)
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fb08 	bl	8007ca0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	2200      	movs	r2, #0
 8007698:	2104      	movs	r1, #4
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 f964 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e07c      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d034      	beq.n	8007750 <HAL_I2C_Mem_Read+0x1d0>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d130      	bne.n	8007750 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f4:	2200      	movs	r2, #0
 80076f6:	2180      	movs	r1, #128	@ 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f935 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e04d      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2bff      	cmp	r3, #255	@ 0xff
 8007710:	d90e      	bls.n	8007730 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	22ff      	movs	r2, #255	@ 0xff
 8007716:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800771c:	b2da      	uxtb	r2, r3
 800771e:	8979      	ldrh	r1, [r7, #10]
 8007720:	2300      	movs	r3, #0
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fab9 	bl	8007ca0 <I2C_TransferConfig>
 800772e:	e00f      	b.n	8007750 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800773e:	b2da      	uxtb	r2, r3
 8007740:	8979      	ldrh	r1, [r7, #10]
 8007742:	2300      	movs	r3, #0
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 faa8 	bl	8007ca0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d19a      	bne.n	8007690 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f982 	bl	8007a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e01a      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2220      	movs	r2, #32
 8007774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6859      	ldr	r1, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <HAL_I2C_Mem_Read+0x230>)
 8007782:	400b      	ands	r3, r1
 8007784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	e000      	b.n	80077a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
  }
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	80002400 	.word	0x80002400
 80077b0:	fe00e800 	.word	0xfe00e800

080077b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c2:	b2db      	uxtb	r3, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	461a      	mov	r2, r3
 80077de:	4603      	mov	r3, r0
 80077e0:	817b      	strh	r3, [r7, #10]
 80077e2:	460b      	mov	r3, r1
 80077e4:	813b      	strh	r3, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80077ea:	88fb      	ldrh	r3, [r7, #6]
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	8979      	ldrh	r1, [r7, #10]
 80077f0:	4b20      	ldr	r3, [pc, #128]	@ (8007874 <I2C_RequestMemoryWrite+0xa4>)
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fa51 	bl	8007ca0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	69b9      	ldr	r1, [r7, #24]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 f8f0 	bl	80079e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e02c      	b.n	800786c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d105      	bne.n	8007824 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007818:	893b      	ldrh	r3, [r7, #8]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	629a      	str	r2, [r3, #40]	@ 0x28
 8007822:	e015      	b.n	8007850 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007824:	893b      	ldrh	r3, [r7, #8]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	b29b      	uxth	r3, r3
 800782a:	b2da      	uxtb	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	69b9      	ldr	r1, [r7, #24]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f8d6 	bl	80079e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e012      	b.n	800786c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007846:	893b      	ldrh	r3, [r7, #8]
 8007848:	b2da      	uxtb	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2200      	movs	r2, #0
 8007858:	2180      	movs	r1, #128	@ 0x80
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f884 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	80002000 	.word	0x80002000

08007878 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	4608      	mov	r0, r1
 8007882:	4611      	mov	r1, r2
 8007884:	461a      	mov	r2, r3
 8007886:	4603      	mov	r3, r0
 8007888:	817b      	strh	r3, [r7, #10]
 800788a:	460b      	mov	r3, r1
 800788c:	813b      	strh	r3, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	8979      	ldrh	r1, [r7, #10]
 8007898:	4b20      	ldr	r3, [pc, #128]	@ (800791c <I2C_RequestMemoryRead+0xa4>)
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	2300      	movs	r3, #0
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f9fe 	bl	8007ca0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	69b9      	ldr	r1, [r7, #24]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f89d 	bl	80079e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e02c      	b.n	8007912 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d105      	bne.n	80078ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078be:	893b      	ldrh	r3, [r7, #8]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80078c8:	e015      	b.n	80078f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078ca:	893b      	ldrh	r3, [r7, #8]
 80078cc:	0a1b      	lsrs	r3, r3, #8
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	69b9      	ldr	r1, [r7, #24]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f883 	bl	80079e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e012      	b.n	8007912 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078ec:	893b      	ldrh	r3, [r7, #8]
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2140      	movs	r1, #64	@ 0x40
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f831 	bl	8007968 <I2C_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	80002000 	.word	0x80002000

08007920 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b02      	cmp	r3, #2
 8007934:	d103      	bne.n	800793e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b01      	cmp	r3, #1
 800794a:	d007      	beq.n	800795c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	619a      	str	r2, [r3, #24]
  }
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	4613      	mov	r3, r2
 8007976:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007978:	e022      	b.n	80079c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d01e      	beq.n	80079c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007982:	f7fd fe11 	bl	80055a8 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d302      	bcc.n	8007998 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d113      	bne.n	80079c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800799c:	f043 0220 	orr.w	r2, r3, #32
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e00f      	b.n	80079e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d0cd      	beq.n	800797a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079f4:	e02c      	b.n	8007a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 f870 	bl	8007ae0 <I2C_IsErrorOccurred>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e02a      	b.n	8007a60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d01e      	beq.n	8007a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a12:	f7fd fdc9 	bl	80055a8 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d302      	bcc.n	8007a28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d113      	bne.n	8007a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a2c:	f043 0220 	orr.w	r2, r3, #32
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e007      	b.n	8007a60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d1cb      	bne.n	80079f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a74:	e028      	b.n	8007ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f830 	bl	8007ae0 <I2C_IsErrorOccurred>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e026      	b.n	8007ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8a:	f7fd fd8d 	bl	80055a8 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d113      	bne.n	8007ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa4:	f043 0220 	orr.w	r2, r3, #32
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e007      	b.n	8007ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d1cf      	bne.n	8007a76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	@ 0x28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d068      	beq.n	8007bde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2210      	movs	r2, #16
 8007b12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b14:	e049      	b.n	8007baa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1c:	d045      	beq.n	8007baa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b1e:	f7fd fd43 	bl	80055a8 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d302      	bcc.n	8007b34 <I2C_IsErrorOccurred+0x54>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d13a      	bne.n	8007baa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b56:	d121      	bne.n	8007b9c <I2C_IsErrorOccurred+0xbc>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b5e:	d01d      	beq.n	8007b9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007b60:	7cfb      	ldrb	r3, [r7, #19]
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d01a      	beq.n	8007b9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b76:	f7fd fd17 	bl	80055a8 <HAL_GetTick>
 8007b7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b7c:	e00e      	b.n	8007b9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b7e:	f7fd fd13 	bl	80055a8 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b19      	cmp	r3, #25
 8007b8a:	d907      	bls.n	8007b9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	f043 0320 	orr.w	r3, r3, #32
 8007b92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007b9a:	e006      	b.n	8007baa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d1e9      	bne.n	8007b7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d003      	beq.n	8007bc0 <I2C_IsErrorOccurred+0xe0>
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0aa      	beq.n	8007b16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	f043 0304 	orr.w	r3, r3, #4
 8007bd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	f043 0308 	orr.w	r3, r3, #8
 8007c18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00b      	beq.n	8007c4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01c      	beq.n	8007c8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff fe63 	bl	8007920 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6859      	ldr	r1, [r3, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <I2C_IsErrorOccurred+0x1bc>)
 8007c66:	400b      	ands	r3, r1
 8007c68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	431a      	orrs	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3728      	adds	r7, #40	@ 0x28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	fe00e800 	.word	0xfe00e800

08007ca0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	607b      	str	r3, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	817b      	strh	r3, [r7, #10]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cb2:	897b      	ldrh	r3, [r7, #10]
 8007cb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cb8:	7a7b      	ldrb	r3, [r7, #9]
 8007cba:	041b      	lsls	r3, r3, #16
 8007cbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	0d5b      	lsrs	r3, r3, #21
 8007cda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007cde:	4b08      	ldr	r3, [pc, #32]	@ (8007d00 <I2C_TransferConfig+0x60>)
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	ea02 0103 	and.w	r1, r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	03ff63ff 	.word	0x03ff63ff

08007d04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	d138      	bne.n	8007d8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e032      	b.n	8007d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	@ 0x24
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0201 	bic.w	r2, r2, #1
 8007d46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e000      	b.n	8007d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d8c:	2302      	movs	r3, #2
  }
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d139      	bne.n	8007e24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e033      	b.n	8007e26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2224      	movs	r2, #36	@ 0x24
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007dec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e000      	b.n	8007e26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e24:	2302      	movs	r3, #2
  }
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
	...

08007e34 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e0bf      	b.n	8007fc6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7fa fdd2 	bl	8002a04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007e76:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6999      	ldr	r1, [r3, #24]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e8c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6899      	ldr	r1, [r3, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8007fd0 <HAL_LTDC_Init+0x19c>)
 8007ea8:	400b      	ands	r3, r1
 8007eaa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	041b      	lsls	r3, r3, #16
 8007eb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6899      	ldr	r1, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68d9      	ldr	r1, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8007fd0 <HAL_LTDC_Init+0x19c>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	041b      	lsls	r3, r3, #16
 8007ee0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68d9      	ldr	r1, [r3, #12]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1a      	ldr	r2, [r3, #32]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6919      	ldr	r1, [r3, #16]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b33      	ldr	r3, [pc, #204]	@ (8007fd0 <HAL_LTDC_Init+0x19c>)
 8007f04:	400b      	ands	r3, r1
 8007f06:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6919      	ldr	r1, [r3, #16]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6959      	ldr	r1, [r3, #20]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	4b27      	ldr	r3, [pc, #156]	@ (8007fd0 <HAL_LTDC_Init+0x19c>)
 8007f32:	400b      	ands	r3, r1
 8007f34:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	041b      	lsls	r3, r3, #16
 8007f3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6959      	ldr	r1, [r3, #20]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007f64:	041b      	lsls	r3, r3, #16
 8007f66:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0206 	orr.w	r2, r2, #6
 8007fa2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	f000f800 	.word	0xf000f800

08007fd4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d023      	beq.n	800803e <HAL_LTDC_IRQHandler+0x6a>
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01e      	beq.n	800803e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0204 	bic.w	r2, r2, #4
 800800e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2204      	movs	r2, #4
 8008016:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800801e:	f043 0201 	orr.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2204      	movs	r2, #4
 800802c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f86f 	bl	800811c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d023      	beq.n	8008090 <HAL_LTDC_IRQHandler+0xbc>
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01e      	beq.n	8008090 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0202 	bic.w	r2, r2, #2
 8008060:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2202      	movs	r2, #2
 8008068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008070:	f043 0202 	orr.w	r2, r3, #2
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2204      	movs	r2, #4
 800807e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f846 	bl	800811c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d01b      	beq.n	80080d2 <HAL_LTDC_IRQHandler+0xfe>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d016      	beq.n	80080d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2201      	movs	r2, #1
 80080ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f82f 	bl	8008130 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01b      	beq.n	8008114 <HAL_LTDC_IRQHandler+0x140>
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0208 	bic.w	r2, r2, #8
 80080f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2208      	movs	r2, #8
 80080fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f818 	bl	8008144 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008158:	b5b0      	push	{r4, r5, r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_LTDC_ConfigLayer+0x1a>
 800816e:	2302      	movs	r3, #2
 8008170:	e02c      	b.n	80081cc <HAL_LTDC_ConfigLayer+0x74>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2202      	movs	r2, #2
 800817e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2134      	movs	r1, #52	@ 0x34
 8008188:	fb01 f303 	mul.w	r3, r1, r3
 800818c:	4413      	add	r3, r2
 800818e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	4614      	mov	r4, r2
 8008196:	461d      	mov	r5, r3
 8008198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800819a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800819c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800819e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	68b9      	ldr	r1, [r7, #8]
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f81f 	bl	80081f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2201      	movs	r2, #1
 80081b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bdb0      	pop	{r4, r5, r7, pc}

080081d4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80081e2:	b2db      	uxtb	r3, r3
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b089      	sub	sp, #36	@ 0x24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	0c1b      	lsrs	r3, r3, #16
 8008208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800820c:	4413      	add	r3, r2
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	01db      	lsls	r3, r3, #7
 800821c:	4413      	add	r3, r2
 800821e:	3384      	adds	r3, #132	@ 0x84
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	4611      	mov	r1, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	01d2      	lsls	r2, r2, #7
 800822c:	440a      	add	r2, r1
 800822e:	3284      	adds	r2, #132	@ 0x84
 8008230:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008234:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008246:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008248:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	01db      	lsls	r3, r3, #7
 8008254:	440b      	add	r3, r1
 8008256:	3384      	adds	r3, #132	@ 0x84
 8008258:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800825e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800826e:	4413      	add	r3, r2
 8008270:	041b      	lsls	r3, r3, #16
 8008272:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	01db      	lsls	r3, r3, #7
 800827e:	4413      	add	r3, r2
 8008280:	3384      	adds	r3, #132	@ 0x84
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	4611      	mov	r1, r2
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	01d2      	lsls	r2, r2, #7
 800828e:	440a      	add	r2, r1
 8008290:	3284      	adds	r2, #132	@ 0x84
 8008292:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008296:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082a6:	4413      	add	r3, r2
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4619      	mov	r1, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	01db      	lsls	r3, r3, #7
 80082b4:	440b      	add	r3, r1
 80082b6:	3384      	adds	r3, #132	@ 0x84
 80082b8:	4619      	mov	r1, r3
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4313      	orrs	r3, r2
 80082be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	01db      	lsls	r3, r3, #7
 80082ca:	4413      	add	r3, r2
 80082cc:	3384      	adds	r3, #132	@ 0x84
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	4611      	mov	r1, r2
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	01d2      	lsls	r2, r2, #7
 80082da:	440a      	add	r2, r1
 80082dc:	3284      	adds	r2, #132	@ 0x84
 80082de:	f023 0307 	bic.w	r3, r3, #7
 80082e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	01db      	lsls	r3, r3, #7
 80082ee:	4413      	add	r3, r2
 80082f0:	3384      	adds	r3, #132	@ 0x84
 80082f2:	461a      	mov	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	061b      	lsls	r3, r3, #24
 8008314:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	01db      	lsls	r3, r3, #7
 8008320:	4413      	add	r3, r2
 8008322:	3384      	adds	r3, #132	@ 0x84
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	01db      	lsls	r3, r3, #7
 8008330:	4413      	add	r3, r2
 8008332:	3384      	adds	r3, #132	@ 0x84
 8008334:	461a      	mov	r2, r3
 8008336:	2300      	movs	r3, #0
 8008338:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008340:	461a      	mov	r2, r3
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	431a      	orrs	r2, r3
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	431a      	orrs	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4619      	mov	r1, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	01db      	lsls	r3, r3, #7
 8008354:	440b      	add	r3, r1
 8008356:	3384      	adds	r3, #132	@ 0x84
 8008358:	4619      	mov	r1, r3
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	01db      	lsls	r3, r3, #7
 800836a:	4413      	add	r3, r2
 800836c:	3384      	adds	r3, #132	@ 0x84
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	6812      	ldr	r2, [r2, #0]
 8008374:	4611      	mov	r1, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	01d2      	lsls	r2, r2, #7
 800837a:	440a      	add	r2, r1
 800837c:	3284      	adds	r2, #132	@ 0x84
 800837e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008382:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	01db      	lsls	r3, r3, #7
 800838e:	4413      	add	r3, r2
 8008390:	3384      	adds	r3, #132	@ 0x84
 8008392:	461a      	mov	r2, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	01db      	lsls	r3, r3, #7
 80083a4:	4413      	add	r3, r2
 80083a6:	3384      	adds	r3, #132	@ 0x84
 80083a8:	69da      	ldr	r2, [r3, #28]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4619      	mov	r1, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	01db      	lsls	r3, r3, #7
 80083b4:	440b      	add	r3, r1
 80083b6:	3384      	adds	r3, #132	@ 0x84
 80083b8:	4619      	mov	r1, r3
 80083ba:	4b58      	ldr	r3, [pc, #352]	@ (800851c <LTDC_SetConfig+0x32c>)
 80083bc:	4013      	ands	r3, r2
 80083be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	68f9      	ldr	r1, [r7, #12]
 80083ca:	6809      	ldr	r1, [r1, #0]
 80083cc:	4608      	mov	r0, r1
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	01c9      	lsls	r1, r1, #7
 80083d2:	4401      	add	r1, r0
 80083d4:	3184      	adds	r1, #132	@ 0x84
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	01db      	lsls	r3, r3, #7
 80083e4:	4413      	add	r3, r2
 80083e6:	3384      	adds	r3, #132	@ 0x84
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	01db      	lsls	r3, r3, #7
 80083f4:	4413      	add	r3, r2
 80083f6:	3384      	adds	r3, #132	@ 0x84
 80083f8:	461a      	mov	r2, r3
 80083fa:	2300      	movs	r3, #0
 80083fc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	01db      	lsls	r3, r3, #7
 8008408:	4413      	add	r3, r2
 800840a:	3384      	adds	r3, #132	@ 0x84
 800840c:	461a      	mov	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800841c:	2304      	movs	r3, #4
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e01b      	b.n	800845a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d102      	bne.n	8008430 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800842a:	2303      	movs	r3, #3
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	e014      	b.n	800845a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b04      	cmp	r3, #4
 8008436:	d00b      	beq.n	8008450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800843c:	2b02      	cmp	r3, #2
 800843e:	d007      	beq.n	8008450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008444:	2b03      	cmp	r3, #3
 8008446:	d003      	beq.n	8008450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800844c:	2b07      	cmp	r3, #7
 800844e:	d102      	bne.n	8008456 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008450:	2302      	movs	r3, #2
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	e001      	b.n	800845a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008456:	2301      	movs	r3, #1
 8008458:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	01db      	lsls	r3, r3, #7
 8008464:	4413      	add	r3, r2
 8008466:	3384      	adds	r3, #132	@ 0x84
 8008468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	6812      	ldr	r2, [r2, #0]
 800846e:	4611      	mov	r1, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	01d2      	lsls	r2, r2, #7
 8008474:	440a      	add	r2, r1
 8008476:	3284      	adds	r2, #132	@ 0x84
 8008478:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800847c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	fb02 f303 	mul.w	r3, r2, r3
 8008488:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	6859      	ldr	r1, [r3, #4]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	1acb      	subs	r3, r1, r3
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800849c:	68f9      	ldr	r1, [r7, #12]
 800849e:	6809      	ldr	r1, [r1, #0]
 80084a0:	4608      	mov	r0, r1
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	01c9      	lsls	r1, r1, #7
 80084a6:	4401      	add	r1, r0
 80084a8:	3184      	adds	r1, #132	@ 0x84
 80084aa:	4313      	orrs	r3, r2
 80084ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	01db      	lsls	r3, r3, #7
 80084b8:	4413      	add	r3, r2
 80084ba:	3384      	adds	r3, #132	@ 0x84
 80084bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4619      	mov	r1, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	01db      	lsls	r3, r3, #7
 80084c8:	440b      	add	r3, r1
 80084ca:	3384      	adds	r3, #132	@ 0x84
 80084cc:	4619      	mov	r1, r3
 80084ce:	4b14      	ldr	r3, [pc, #80]	@ (8008520 <LTDC_SetConfig+0x330>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	01db      	lsls	r3, r3, #7
 80084de:	4413      	add	r3, r2
 80084e0:	3384      	adds	r3, #132	@ 0x84
 80084e2:	461a      	mov	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	01db      	lsls	r3, r3, #7
 80084f4:	4413      	add	r3, r2
 80084f6:	3384      	adds	r3, #132	@ 0x84
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	4611      	mov	r1, r2
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	01d2      	lsls	r2, r2, #7
 8008504:	440a      	add	r2, r1
 8008506:	3284      	adds	r2, #132	@ 0x84
 8008508:	f043 0301 	orr.w	r3, r3, #1
 800850c:	6013      	str	r3, [r2, #0]
}
 800850e:	bf00      	nop
 8008510:	3724      	adds	r7, #36	@ 0x24
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	fffff8f8 	.word	0xfffff8f8
 8008520:	fffff800 	.word	0xfffff800

08008524 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008528:	4b05      	ldr	r3, [pc, #20]	@ (8008540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a04      	ldr	r2, [pc, #16]	@ (8008540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800852e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008532:	6013      	str	r3, [r2, #0]
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40007000 	.word	0x40007000

08008544 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800854e:	4b23      	ldr	r3, [pc, #140]	@ (80085dc <HAL_PWREx_EnableOverDrive+0x98>)
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	4a22      	ldr	r2, [pc, #136]	@ (80085dc <HAL_PWREx_EnableOverDrive+0x98>)
 8008554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008558:	6413      	str	r3, [r2, #64]	@ 0x40
 800855a:	4b20      	ldr	r3, [pc, #128]	@ (80085dc <HAL_PWREx_EnableOverDrive+0x98>)
 800855c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008566:	4b1e      	ldr	r3, [pc, #120]	@ (80085e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1d      	ldr	r2, [pc, #116]	@ (80085e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800856c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008570:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008572:	f7fd f819 	bl	80055a8 <HAL_GetTick>
 8008576:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008578:	e009      	b.n	800858e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800857a:	f7fd f815 	bl	80055a8 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008588:	d901      	bls.n	800858e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e022      	b.n	80085d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800858e:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800859a:	d1ee      	bne.n	800857a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800859c:	4b10      	ldr	r3, [pc, #64]	@ (80085e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a0f      	ldr	r2, [pc, #60]	@ (80085e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80085a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085a8:	f7fc fffe 	bl	80055a8 <HAL_GetTick>
 80085ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80085ae:	e009      	b.n	80085c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80085b0:	f7fc fffa 	bl	80055a8 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085be:	d901      	bls.n	80085c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e007      	b.n	80085d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80085c4:	4b06      	ldr	r3, [pc, #24]	@ (80085e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d0:	d1ee      	bne.n	80085b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800
 80085e0:	40007000 	.word	0x40007000

080085e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80085ec:	2300      	movs	r3, #0
 80085ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e291      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 8087 	beq.w	8008716 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008608:	4b96      	ldr	r3, [pc, #600]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 030c 	and.w	r3, r3, #12
 8008610:	2b04      	cmp	r3, #4
 8008612:	d00c      	beq.n	800862e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008614:	4b93      	ldr	r3, [pc, #588]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f003 030c 	and.w	r3, r3, #12
 800861c:	2b08      	cmp	r3, #8
 800861e:	d112      	bne.n	8008646 <HAL_RCC_OscConfig+0x62>
 8008620:	4b90      	ldr	r3, [pc, #576]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800862c:	d10b      	bne.n	8008646 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800862e:	4b8d      	ldr	r3, [pc, #564]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d06c      	beq.n	8008714 <HAL_RCC_OscConfig+0x130>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d168      	bne.n	8008714 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e26b      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800864e:	d106      	bne.n	800865e <HAL_RCC_OscConfig+0x7a>
 8008650:	4b84      	ldr	r3, [pc, #528]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a83      	ldr	r2, [pc, #524]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	e02e      	b.n	80086bc <HAL_RCC_OscConfig+0xd8>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10c      	bne.n	8008680 <HAL_RCC_OscConfig+0x9c>
 8008666:	4b7f      	ldr	r3, [pc, #508]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a7e      	ldr	r2, [pc, #504]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800866c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	4b7c      	ldr	r3, [pc, #496]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a7b      	ldr	r2, [pc, #492]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	e01d      	b.n	80086bc <HAL_RCC_OscConfig+0xd8>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008688:	d10c      	bne.n	80086a4 <HAL_RCC_OscConfig+0xc0>
 800868a:	4b76      	ldr	r3, [pc, #472]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a75      	ldr	r2, [pc, #468]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	4b73      	ldr	r3, [pc, #460]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a72      	ldr	r2, [pc, #456]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800869c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	e00b      	b.n	80086bc <HAL_RCC_OscConfig+0xd8>
 80086a4:	4b6f      	ldr	r3, [pc, #444]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a6e      	ldr	r2, [pc, #440]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80086aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a6b      	ldr	r2, [pc, #428]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80086b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d013      	beq.n	80086ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c4:	f7fc ff70 	bl	80055a8 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086cc:	f7fc ff6c 	bl	80055a8 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b64      	cmp	r3, #100	@ 0x64
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e21f      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086de:	4b61      	ldr	r3, [pc, #388]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <HAL_RCC_OscConfig+0xe8>
 80086ea:	e014      	b.n	8008716 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ec:	f7fc ff5c 	bl	80055a8 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086f4:	f7fc ff58 	bl	80055a8 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b64      	cmp	r3, #100	@ 0x64
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e20b      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008706:	4b57      	ldr	r3, [pc, #348]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f0      	bne.n	80086f4 <HAL_RCC_OscConfig+0x110>
 8008712:	e000      	b.n	8008716 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d069      	beq.n	80087f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008722:	4b50      	ldr	r3, [pc, #320]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f003 030c 	and.w	r3, r3, #12
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800872e:	4b4d      	ldr	r3, [pc, #308]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 030c 	and.w	r3, r3, #12
 8008736:	2b08      	cmp	r3, #8
 8008738:	d11c      	bne.n	8008774 <HAL_RCC_OscConfig+0x190>
 800873a:	4b4a      	ldr	r3, [pc, #296]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d116      	bne.n	8008774 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008746:	4b47      	ldr	r3, [pc, #284]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_RCC_OscConfig+0x17a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d001      	beq.n	800875e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e1df      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800875e:	4b41      	ldr	r3, [pc, #260]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	493d      	ldr	r1, [pc, #244]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800876e:	4313      	orrs	r3, r2
 8008770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008772:	e040      	b.n	80087f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d023      	beq.n	80087c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800877c:	4b39      	ldr	r3, [pc, #228]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a38      	ldr	r2, [pc, #224]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008788:	f7fc ff0e 	bl	80055a8 <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008790:	f7fc ff0a 	bl	80055a8 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e1bd      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a2:	4b30      	ldr	r3, [pc, #192]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0f0      	beq.n	8008790 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4929      	ldr	r1, [pc, #164]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]
 80087c2:	e018      	b.n	80087f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087c4:	4b27      	ldr	r3, [pc, #156]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a26      	ldr	r2, [pc, #152]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80087ca:	f023 0301 	bic.w	r3, r3, #1
 80087ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d0:	f7fc feea 	bl	80055a8 <HAL_GetTick>
 80087d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087d6:	e008      	b.n	80087ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087d8:	f7fc fee6 	bl	80055a8 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e199      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f0      	bne.n	80087d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d038      	beq.n	8008874 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d019      	beq.n	800883e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800880a:	4b16      	ldr	r3, [pc, #88]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 800880c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800880e:	4a15      	ldr	r2, [pc, #84]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008810:	f043 0301 	orr.w	r3, r3, #1
 8008814:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008816:	f7fc fec7 	bl	80055a8 <HAL_GetTick>
 800881a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800881c:	e008      	b.n	8008830 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800881e:	f7fc fec3 	bl	80055a8 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	2b02      	cmp	r3, #2
 800882a:	d901      	bls.n	8008830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e176      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008830:	4b0c      	ldr	r3, [pc, #48]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0f0      	beq.n	800881e <HAL_RCC_OscConfig+0x23a>
 800883c:	e01a      	b.n	8008874 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800883e:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008842:	4a08      	ldr	r2, [pc, #32]	@ (8008864 <HAL_RCC_OscConfig+0x280>)
 8008844:	f023 0301 	bic.w	r3, r3, #1
 8008848:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800884a:	f7fc fead 	bl	80055a8 <HAL_GetTick>
 800884e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008850:	e00a      	b.n	8008868 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008852:	f7fc fea9 	bl	80055a8 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d903      	bls.n	8008868 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e15c      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
 8008864:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008868:	4b91      	ldr	r3, [pc, #580]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 800886a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1ee      	bne.n	8008852 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80a4 	beq.w	80089ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008882:	4b8b      	ldr	r3, [pc, #556]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10d      	bne.n	80088aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800888e:	4b88      	ldr	r3, [pc, #544]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	4a87      	ldr	r2, [pc, #540]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008898:	6413      	str	r3, [r2, #64]	@ 0x40
 800889a:	4b85      	ldr	r3, [pc, #532]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 800889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088a2:	60bb      	str	r3, [r7, #8]
 80088a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088a6:	2301      	movs	r3, #1
 80088a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088aa:	4b82      	ldr	r3, [pc, #520]	@ (8008ab4 <HAL_RCC_OscConfig+0x4d0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d118      	bne.n	80088e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80088b6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ab4 <HAL_RCC_OscConfig+0x4d0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a7e      	ldr	r2, [pc, #504]	@ (8008ab4 <HAL_RCC_OscConfig+0x4d0>)
 80088bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088c2:	f7fc fe71 	bl	80055a8 <HAL_GetTick>
 80088c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ca:	f7fc fe6d 	bl	80055a8 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b64      	cmp	r3, #100	@ 0x64
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e120      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088dc:	4b75      	ldr	r3, [pc, #468]	@ (8008ab4 <HAL_RCC_OscConfig+0x4d0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0f0      	beq.n	80088ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d106      	bne.n	80088fe <HAL_RCC_OscConfig+0x31a>
 80088f0:	4b6f      	ldr	r3, [pc, #444]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80088f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f4:	4a6e      	ldr	r2, [pc, #440]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80088fc:	e02d      	b.n	800895a <HAL_RCC_OscConfig+0x376>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10c      	bne.n	8008920 <HAL_RCC_OscConfig+0x33c>
 8008906:	4b6a      	ldr	r3, [pc, #424]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800890a:	4a69      	ldr	r2, [pc, #420]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	6713      	str	r3, [r2, #112]	@ 0x70
 8008912:	4b67      	ldr	r3, [pc, #412]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008916:	4a66      	ldr	r2, [pc, #408]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008918:	f023 0304 	bic.w	r3, r3, #4
 800891c:	6713      	str	r3, [r2, #112]	@ 0x70
 800891e:	e01c      	b.n	800895a <HAL_RCC_OscConfig+0x376>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2b05      	cmp	r3, #5
 8008926:	d10c      	bne.n	8008942 <HAL_RCC_OscConfig+0x35e>
 8008928:	4b61      	ldr	r3, [pc, #388]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 800892a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892c:	4a60      	ldr	r2, [pc, #384]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 800892e:	f043 0304 	orr.w	r3, r3, #4
 8008932:	6713      	str	r3, [r2, #112]	@ 0x70
 8008934:	4b5e      	ldr	r3, [pc, #376]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008938:	4a5d      	ldr	r2, [pc, #372]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 800893a:	f043 0301 	orr.w	r3, r3, #1
 800893e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008940:	e00b      	b.n	800895a <HAL_RCC_OscConfig+0x376>
 8008942:	4b5b      	ldr	r3, [pc, #364]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008946:	4a5a      	ldr	r2, [pc, #360]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008948:	f023 0301 	bic.w	r3, r3, #1
 800894c:	6713      	str	r3, [r2, #112]	@ 0x70
 800894e:	4b58      	ldr	r3, [pc, #352]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008952:	4a57      	ldr	r2, [pc, #348]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008954:	f023 0304 	bic.w	r3, r3, #4
 8008958:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d015      	beq.n	800898e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008962:	f7fc fe21 	bl	80055a8 <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008968:	e00a      	b.n	8008980 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800896a:	f7fc fe1d 	bl	80055a8 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008978:	4293      	cmp	r3, r2
 800897a:	d901      	bls.n	8008980 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e0ce      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008980:	4b4b      	ldr	r3, [pc, #300]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0ee      	beq.n	800896a <HAL_RCC_OscConfig+0x386>
 800898c:	e014      	b.n	80089b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800898e:	f7fc fe0b 	bl	80055a8 <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008994:	e00a      	b.n	80089ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008996:	f7fc fe07 	bl	80055a8 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e0b8      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089ac:	4b40      	ldr	r3, [pc, #256]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1ee      	bne.n	8008996 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d105      	bne.n	80089ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089be:	4b3c      	ldr	r3, [pc, #240]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c2:	4a3b      	ldr	r2, [pc, #236]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80089c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80a4 	beq.w	8008b1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089d4:	4b36      	ldr	r3, [pc, #216]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 030c 	and.w	r3, r3, #12
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d06b      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d149      	bne.n	8008a7c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e8:	4b31      	ldr	r3, [pc, #196]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a30      	ldr	r2, [pc, #192]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 80089ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f4:	f7fc fdd8 	bl	80055a8 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089fc:	f7fc fdd4 	bl	80055a8 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e087      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a0e:	4b28      	ldr	r3, [pc, #160]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69da      	ldr	r2, [r3, #28]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a28:	019b      	lsls	r3, r3, #6
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	3b01      	subs	r3, #1
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	061b      	lsls	r3, r3, #24
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008a42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a46:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a48:	4b19      	ldr	r3, [pc, #100]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a54:	f7fc fda8 	bl	80055a8 <HAL_GetTick>
 8008a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a5a:	e008      	b.n	8008a6e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a5c:	f7fc fda4 	bl	80055a8 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e057      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a6e:	4b10      	ldr	r3, [pc, #64]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0f0      	beq.n	8008a5c <HAL_RCC_OscConfig+0x478>
 8008a7a:	e04f      	b.n	8008b1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fc fd8e 	bl	80055a8 <HAL_GetTick>
 8008a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a90:	f7fc fd8a 	bl	80055a8 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e03d      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa2:	4b03      	ldr	r3, [pc, #12]	@ (8008ab0 <HAL_RCC_OscConfig+0x4cc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f0      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4ac>
 8008aae:	e035      	b.n	8008b1c <HAL_RCC_OscConfig+0x538>
 8008ab0:	40023800 	.word	0x40023800
 8008ab4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b28 <HAL_RCC_OscConfig+0x544>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d028      	beq.n	8008b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d121      	bne.n	8008b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d11a      	bne.n	8008b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ae8:	4013      	ands	r3, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008aee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d111      	bne.n	8008b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	3b01      	subs	r3, #1
 8008b02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d107      	bne.n	8008b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d001      	beq.n	8008b1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	40023800 	.word	0x40023800

08008b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e0d0      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b44:	4b6a      	ldr	r3, [pc, #424]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d910      	bls.n	8008b74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b52:	4b67      	ldr	r3, [pc, #412]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f023 020f 	bic.w	r2, r3, #15
 8008b5a:	4965      	ldr	r1, [pc, #404]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b62:	4b63      	ldr	r3, [pc, #396]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d001      	beq.n	8008b74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e0b8      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d020      	beq.n	8008bc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b8c:	4b59      	ldr	r3, [pc, #356]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	4a58      	ldr	r2, [pc, #352]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008b92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008b96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ba4:	4b53      	ldr	r3, [pc, #332]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	4a52      	ldr	r2, [pc, #328]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008baa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008bae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bb0:	4b50      	ldr	r3, [pc, #320]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	494d      	ldr	r1, [pc, #308]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d040      	beq.n	8008c50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d107      	bne.n	8008be6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bd6:	4b47      	ldr	r3, [pc, #284]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d115      	bne.n	8008c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e07f      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d107      	bne.n	8008bfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bee:	4b41      	ldr	r3, [pc, #260]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d109      	bne.n	8008c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e073      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e06b      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c0e:	4b39      	ldr	r3, [pc, #228]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f023 0203 	bic.w	r2, r3, #3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	4936      	ldr	r1, [pc, #216]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c20:	f7fc fcc2 	bl	80055a8 <HAL_GetTick>
 8008c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c26:	e00a      	b.n	8008c3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c28:	f7fc fcbe 	bl	80055a8 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e053      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 020c 	and.w	r2, r3, #12
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d1eb      	bne.n	8008c28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c50:	4b27      	ldr	r3, [pc, #156]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d210      	bcs.n	8008c80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c5e:	4b24      	ldr	r3, [pc, #144]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f023 020f 	bic.w	r2, r3, #15
 8008c66:	4922      	ldr	r1, [pc, #136]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c6e:	4b20      	ldr	r3, [pc, #128]	@ (8008cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d001      	beq.n	8008c80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e032      	b.n	8008ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d008      	beq.n	8008c9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c8c:	4b19      	ldr	r3, [pc, #100]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	4916      	ldr	r1, [pc, #88]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0308 	and.w	r3, r3, #8
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d009      	beq.n	8008cbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008caa:	4b12      	ldr	r3, [pc, #72]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	490e      	ldr	r1, [pc, #56]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008cbe:	f000 f821 	bl	8008d04 <HAL_RCC_GetSysClockFreq>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	091b      	lsrs	r3, r3, #4
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	490a      	ldr	r1, [pc, #40]	@ (8008cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8008cd0:	5ccb      	ldrb	r3, [r1, r3]
 8008cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd6:	4a09      	ldr	r2, [pc, #36]	@ (8008cfc <HAL_RCC_ClockConfig+0x1d0>)
 8008cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008cda:	4b09      	ldr	r3, [pc, #36]	@ (8008d00 <HAL_RCC_ClockConfig+0x1d4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fb febe 	bl	8004a60 <HAL_InitTick>

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	40023c00 	.word	0x40023c00
 8008cf4:	40023800 	.word	0x40023800
 8008cf8:	0801d428 	.word	0x0801d428
 8008cfc:	20000048 	.word	0x20000048
 8008d00:	2000004c 	.word	0x2000004c

08008d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d08:	b090      	sub	sp, #64	@ 0x40
 8008d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d10:	2300      	movs	r3, #0
 8008d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d14:	2300      	movs	r3, #0
 8008d16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d1c:	4b59      	ldr	r3, [pc, #356]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 030c 	and.w	r3, r3, #12
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d00d      	beq.n	8008d44 <HAL_RCC_GetSysClockFreq+0x40>
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	f200 80a1 	bhi.w	8008e70 <HAL_RCC_GetSysClockFreq+0x16c>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_RCC_GetSysClockFreq+0x34>
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d003      	beq.n	8008d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d36:	e09b      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d38:	4b53      	ldr	r3, [pc, #332]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d3c:	e09b      	b.n	8008e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d3e:	4b53      	ldr	r3, [pc, #332]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d42:	e098      	b.n	8008e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d44:	4b4f      	ldr	r3, [pc, #316]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d028      	beq.n	8008dac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	099b      	lsrs	r3, r3, #6
 8008d60:	2200      	movs	r2, #0
 8008d62:	623b      	str	r3, [r7, #32]
 8008d64:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4b47      	ldr	r3, [pc, #284]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d70:	fb03 f201 	mul.w	r2, r3, r1
 8008d74:	2300      	movs	r3, #0
 8008d76:	fb00 f303 	mul.w	r3, r0, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	4a43      	ldr	r2, [pc, #268]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d7e:	fba0 1202 	umull	r1, r2, r0, r2
 8008d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d84:	460a      	mov	r2, r1
 8008d86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d8a:	4413      	add	r3, r2
 8008d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d90:	2200      	movs	r2, #0
 8008d92:	61bb      	str	r3, [r7, #24]
 8008d94:	61fa      	str	r2, [r7, #28]
 8008d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d9e:	f7f7 fa87 	bl	80002b0 <__aeabi_uldivmod>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4613      	mov	r3, r2
 8008da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008daa:	e053      	b.n	8008e54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dac:	4b35      	ldr	r3, [pc, #212]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	099b      	lsrs	r3, r3, #6
 8008db2:	2200      	movs	r2, #0
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	617a      	str	r2, [r7, #20]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008dbe:	f04f 0b00 	mov.w	fp, #0
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	f04f 0000 	mov.w	r0, #0
 8008dca:	f04f 0100 	mov.w	r1, #0
 8008dce:	0159      	lsls	r1, r3, #5
 8008dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dd4:	0150      	lsls	r0, r2, #5
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	ebb2 080a 	subs.w	r8, r2, sl
 8008dde:	eb63 090b 	sbc.w	r9, r3, fp
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008dee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008df2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008df6:	ebb2 0408 	subs.w	r4, r2, r8
 8008dfa:	eb63 0509 	sbc.w	r5, r3, r9
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	00eb      	lsls	r3, r5, #3
 8008e08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e0c:	00e2      	lsls	r2, r4, #3
 8008e0e:	4614      	mov	r4, r2
 8008e10:	461d      	mov	r5, r3
 8008e12:	eb14 030a 	adds.w	r3, r4, sl
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	eb45 030b 	adc.w	r3, r5, fp
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	f04f 0300 	mov.w	r3, #0
 8008e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	028b      	lsls	r3, r1, #10
 8008e2e:	4621      	mov	r1, r4
 8008e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e34:	4621      	mov	r1, r4
 8008e36:	028a      	lsls	r2, r1, #10
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e3e:	2200      	movs	r2, #0
 8008e40:	60bb      	str	r3, [r7, #8]
 8008e42:	60fa      	str	r2, [r7, #12]
 8008e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e48:	f7f7 fa32 	bl	80002b0 <__aeabi_uldivmod>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4613      	mov	r3, r2
 8008e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008e54:	4b0b      	ldr	r3, [pc, #44]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	0c1b      	lsrs	r3, r3, #16
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	3301      	adds	r3, #1
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e6e:	e002      	b.n	8008e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e70:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8008e72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3740      	adds	r7, #64	@ 0x40
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e82:	bf00      	nop
 8008e84:	40023800 	.word	0x40023800
 8008e88:	00f42400 	.word	0x00f42400
 8008e8c:	017d7840 	.word	0x017d7840

08008e90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e94:	4b03      	ldr	r3, [pc, #12]	@ (8008ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e96:	681b      	ldr	r3, [r3, #0]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20000048 	.word	0x20000048

08008ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008eac:	f7ff fff0 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	0a9b      	lsrs	r3, r3, #10
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	4903      	ldr	r1, [pc, #12]	@ (8008ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ebe:	5ccb      	ldrb	r3, [r1, r3]
 8008ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40023800 	.word	0x40023800
 8008ecc:	0801d438 	.word	0x0801d438

08008ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ed4:	f7ff ffdc 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	0b5b      	lsrs	r3, r3, #13
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	4903      	ldr	r1, [pc, #12]	@ (8008ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ee6:	5ccb      	ldrb	r3, [r1, r3]
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40023800 	.word	0x40023800
 8008ef4:	0801d438 	.word	0x0801d438

08008ef8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	220f      	movs	r2, #15
 8008f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f08:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 0203 	and.w	r2, r3, #3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f14:	4b0f      	ldr	r3, [pc, #60]	@ (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f20:	4b0c      	ldr	r3, [pc, #48]	@ (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008f2c:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	08db      	lsrs	r3, r3, #3
 8008f32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f3a:	4b07      	ldr	r3, [pc, #28]	@ (8008f58 <HAL_RCC_GetClockConfig+0x60>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	601a      	str	r2, [r3, #0]
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40023800 	.word	0x40023800
 8008f58:	40023c00 	.word	0x40023c00

08008f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d012      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f84:	4b69      	ldr	r3, [pc, #420]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	4a68      	ldr	r2, [pc, #416]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008f8e:	6093      	str	r3, [r2, #8]
 8008f90:	4b66      	ldr	r3, [pc, #408]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f98:	4964      	ldr	r1, [pc, #400]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d017      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fbc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc4:	4959      	ldr	r1, [pc, #356]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fd4:	d101      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d017      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ff8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	494a      	ldr	r1, [pc, #296]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009010:	d101      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009012:	2301      	movs	r3, #1
 8009014:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800901e:	2301      	movs	r3, #1
 8009020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800902e:	2301      	movs	r3, #1
 8009030:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 808b 	beq.w	8009156 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009040:	4b3a      	ldr	r3, [pc, #232]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009044:	4a39      	ldr	r2, [pc, #228]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800904a:	6413      	str	r3, [r2, #64]	@ 0x40
 800904c:	4b37      	ldr	r3, [pc, #220]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800904e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009058:	4b35      	ldr	r3, [pc, #212]	@ (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a34      	ldr	r2, [pc, #208]	@ (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800905e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009064:	f7fc faa0 	bl	80055a8 <HAL_GetTick>
 8009068:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800906a:	e008      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800906c:	f7fc fa9c 	bl	80055a8 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b64      	cmp	r3, #100	@ 0x64
 8009078:	d901      	bls.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e357      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800907e:	4b2c      	ldr	r3, [pc, #176]	@ (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f0      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800908a:	4b28      	ldr	r3, [pc, #160]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800908c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800908e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009092:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d035      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d02e      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090a8:	4b20      	ldr	r3, [pc, #128]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80090b2:	4b1e      	ldr	r3, [pc, #120]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b6:	4a1d      	ldr	r2, [pc, #116]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090bc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090be:	4b1b      	ldr	r3, [pc, #108]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090c2:	4a1a      	ldr	r2, [pc, #104]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80090ca:	4a18      	ldr	r2, [pc, #96]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80090d0:	4b16      	ldr	r3, [pc, #88]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d114      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090dc:	f7fc fa64 	bl	80055a8 <HAL_GetTick>
 80090e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090e2:	e00a      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090e4:	f7fc fa60 	bl	80055a8 <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d901      	bls.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e319      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090fa:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0ee      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800910a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800910e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009112:	d111      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009114:	4b05      	ldr	r3, [pc, #20]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009120:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009122:	400b      	ands	r3, r1
 8009124:	4901      	ldr	r1, [pc, #4]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009126:	4313      	orrs	r3, r2
 8009128:	608b      	str	r3, [r1, #8]
 800912a:	e00b      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800912c:	40023800 	.word	0x40023800
 8009130:	40007000 	.word	0x40007000
 8009134:	0ffffcff 	.word	0x0ffffcff
 8009138:	4baa      	ldr	r3, [pc, #680]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	4aa9      	ldr	r2, [pc, #676]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009142:	6093      	str	r3, [r2, #8]
 8009144:	4ba7      	ldr	r3, [pc, #668]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009146:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009150:	49a4      	ldr	r1, [pc, #656]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009152:	4313      	orrs	r3, r2
 8009154:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b00      	cmp	r3, #0
 8009160:	d010      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009162:	4ba0      	ldr	r3, [pc, #640]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009168:	4a9e      	ldr	r2, [pc, #632]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800916e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009172:	4b9c      	ldr	r3, [pc, #624]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009174:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917c:	4999      	ldr	r1, [pc, #612]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800917e:	4313      	orrs	r3, r2
 8009180:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009190:	4b94      	ldr	r3, [pc, #592]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009196:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800919e:	4991      	ldr	r1, [pc, #580]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091b2:	4b8c      	ldr	r3, [pc, #560]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091c0:	4988      	ldr	r1, [pc, #544]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091d4:	4b83      	ldr	r3, [pc, #524]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e2:	4980      	ldr	r1, [pc, #512]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091f6:	4b7b      	ldr	r3, [pc, #492]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009204:	4977      	ldr	r1, [pc, #476]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009206:	4313      	orrs	r3, r2
 8009208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009218:	4b72      	ldr	r3, [pc, #456]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800921a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800921e:	f023 0203 	bic.w	r2, r3, #3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009226:	496f      	ldr	r1, [pc, #444]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800923a:	4b6a      	ldr	r3, [pc, #424]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800923c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009240:	f023 020c 	bic.w	r2, r3, #12
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009248:	4966      	ldr	r1, [pc, #408]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800925c:	4b61      	ldr	r3, [pc, #388]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800925e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009262:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800926a:	495e      	ldr	r1, [pc, #376]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800926c:	4313      	orrs	r3, r2
 800926e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800927e:	4b59      	ldr	r3, [pc, #356]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009284:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800928c:	4955      	ldr	r1, [pc, #340]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800928e:	4313      	orrs	r3, r2
 8009290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00a      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092a0:	4b50      	ldr	r3, [pc, #320]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ae:	494d      	ldr	r1, [pc, #308]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80092c2:	4b48      	ldr	r3, [pc, #288]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d0:	4944      	ldr	r1, [pc, #272]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00a      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80092e4:	4b3f      	ldr	r3, [pc, #252]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092f2:	493c      	ldr	r1, [pc, #240]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092f4:	4313      	orrs	r3, r2
 80092f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009306:	4b37      	ldr	r3, [pc, #220]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009314:	4933      	ldr	r1, [pc, #204]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009316:	4313      	orrs	r3, r2
 8009318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009328:	4b2e      	ldr	r3, [pc, #184]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800932a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009336:	492b      	ldr	r1, [pc, #172]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009338:	4313      	orrs	r3, r2
 800933a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800934a:	4b26      	ldr	r3, [pc, #152]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800934c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009350:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009358:	4922      	ldr	r1, [pc, #136]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800935a:	4313      	orrs	r3, r2
 800935c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009368:	d101      	bne.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800936a:	2301      	movs	r3, #1
 800936c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800937a:	2301      	movs	r3, #1
 800937c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800938a:	4b16      	ldr	r3, [pc, #88]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009390:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009398:	4912      	ldr	r1, [pc, #72]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800939a:	4313      	orrs	r3, r2
 800939c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80093ac:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093bc:	4909      	ldr	r1, [pc, #36]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d006      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 80d9 	beq.w	800958a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093d8:	4b02      	ldr	r3, [pc, #8]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a01      	ldr	r2, [pc, #4]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093e2:	e001      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80093e4:	40023800 	.word	0x40023800
 80093e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ea:	f7fc f8dd 	bl	80055a8 <HAL_GetTick>
 80093ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093f0:	e008      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80093f2:	f7fc f8d9 	bl	80055a8 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b64      	cmp	r3, #100	@ 0x64
 80093fe:	d901      	bls.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e194      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009404:	4b6c      	ldr	r3, [pc, #432]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1f0      	bne.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d021      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009420:	2b00      	cmp	r3, #0
 8009422:	d11d      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009424:	4b64      	ldr	r3, [pc, #400]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009432:	4b61      	ldr	r3, [pc, #388]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009438:	0e1b      	lsrs	r3, r3, #24
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	019a      	lsls	r2, r3, #6
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	041b      	lsls	r3, r3, #16
 800944a:	431a      	orrs	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	061b      	lsls	r3, r3, #24
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	071b      	lsls	r3, r3, #28
 8009458:	4957      	ldr	r1, [pc, #348]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800945a:	4313      	orrs	r3, r2
 800945c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009474:	d00a      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800947e:	2b00      	cmp	r3, #0
 8009480:	d02e      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800948a:	d129      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800948c:	4b4a      	ldr	r3, [pc, #296]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800948e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	f003 0303 	and.w	r3, r3, #3
 8009498:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800949a:	4b47      	ldr	r3, [pc, #284]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800949c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094a0:	0f1b      	lsrs	r3, r3, #28
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	019a      	lsls	r2, r3, #6
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	041b      	lsls	r3, r3, #16
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	061b      	lsls	r3, r3, #24
 80094ba:	431a      	orrs	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	071b      	lsls	r3, r3, #28
 80094c0:	493d      	ldr	r1, [pc, #244]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80094c8:	4b3b      	ldr	r3, [pc, #236]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ce:	f023 021f 	bic.w	r2, r3, #31
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d6:	3b01      	subs	r3, #1
 80094d8:	4937      	ldr	r1, [pc, #220]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01d      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80094ec:	4b32      	ldr	r3, [pc, #200]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094f2:	0e1b      	lsrs	r3, r3, #24
 80094f4:	f003 030f 	and.w	r3, r3, #15
 80094f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80094fa:	4b2f      	ldr	r3, [pc, #188]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009500:	0f1b      	lsrs	r3, r3, #28
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	019a      	lsls	r2, r3, #6
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	431a      	orrs	r2, r3
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	061b      	lsls	r3, r3, #24
 800951a:	431a      	orrs	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	071b      	lsls	r3, r3, #28
 8009520:	4925      	ldr	r1, [pc, #148]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009522:	4313      	orrs	r3, r2
 8009524:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d011      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	019a      	lsls	r2, r3, #6
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	061b      	lsls	r3, r3, #24
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	071b      	lsls	r3, r3, #28
 8009550:	4919      	ldr	r1, [pc, #100]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009558:	4b17      	ldr	r3, [pc, #92]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a16      	ldr	r2, [pc, #88]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800955e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009564:	f7fc f820 	bl	80055a8 <HAL_GetTick>
 8009568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800956a:	e008      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800956c:	f7fc f81c 	bl	80055a8 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b64      	cmp	r3, #100	@ 0x64
 8009578:	d901      	bls.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e0d7      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800957e:	4b0e      	ldr	r3, [pc, #56]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0f0      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	2b01      	cmp	r3, #1
 800958e:	f040 80cd 	bne.w	800972c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009592:	4b09      	ldr	r3, [pc, #36]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a08      	ldr	r2, [pc, #32]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800959c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800959e:	f7fc f803 	bl	80055a8 <HAL_GetTick>
 80095a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80095a4:	e00a      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80095a6:	f7fb ffff 	bl	80055a8 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b64      	cmp	r3, #100	@ 0x64
 80095b2:	d903      	bls.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e0ba      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80095b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80095bc:	4b5e      	ldr	r3, [pc, #376]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095c8:	d0ed      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d009      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d02e      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d12a      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80095f2:	4b51      	ldr	r3, [pc, #324]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f8:	0c1b      	lsrs	r3, r3, #16
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009600:	4b4d      	ldr	r3, [pc, #308]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009606:	0f1b      	lsrs	r3, r3, #28
 8009608:	f003 0307 	and.w	r3, r3, #7
 800960c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	019a      	lsls	r2, r3, #6
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	431a      	orrs	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	061b      	lsls	r3, r3, #24
 8009620:	431a      	orrs	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	071b      	lsls	r3, r3, #28
 8009626:	4944      	ldr	r1, [pc, #272]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009628:	4313      	orrs	r3, r2
 800962a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800962e:	4b42      	ldr	r3, [pc, #264]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009634:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963c:	3b01      	subs	r3, #1
 800963e:	021b      	lsls	r3, r3, #8
 8009640:	493d      	ldr	r1, [pc, #244]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009642:	4313      	orrs	r3, r2
 8009644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d022      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800965c:	d11d      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800965e:	4b36      	ldr	r3, [pc, #216]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009664:	0e1b      	lsrs	r3, r3, #24
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800966c:	4b32      	ldr	r3, [pc, #200]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800966e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009672:	0f1b      	lsrs	r3, r3, #28
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	019a      	lsls	r2, r3, #6
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	041b      	lsls	r3, r3, #16
 8009686:	431a      	orrs	r2, r3
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	061b      	lsls	r3, r3, #24
 800968c:	431a      	orrs	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	071b      	lsls	r3, r3, #28
 8009692:	4929      	ldr	r1, [pc, #164]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d028      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80096a6:	4b24      	ldr	r3, [pc, #144]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ac:	0e1b      	lsrs	r3, r3, #24
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80096b4:	4b20      	ldr	r3, [pc, #128]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ba:	0c1b      	lsrs	r3, r3, #16
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	019a      	lsls	r2, r3, #6
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	041b      	lsls	r3, r3, #16
 80096cc:	431a      	orrs	r2, r3
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	071b      	lsls	r3, r3, #28
 80096da:	4917      	ldr	r1, [pc, #92]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80096e2:	4b15      	ldr	r3, [pc, #84]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	4911      	ldr	r1, [pc, #68]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80096f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a0e      	ldr	r2, [pc, #56]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009704:	f7fb ff50 	bl	80055a8 <HAL_GetTick>
 8009708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800970a:	e008      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800970c:	f7fb ff4c 	bl	80055a8 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b64      	cmp	r3, #100	@ 0x64
 8009718:	d901      	bls.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e007      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800971e:	4b06      	ldr	r3, [pc, #24]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800972a:	d1ef      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3720      	adds	r7, #32
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	40023800 	.word	0x40023800

0800973c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e071      	b.n	8009836 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7f5b      	ldrb	r3, [r3, #29]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d105      	bne.n	8009768 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7f9 fbf8 	bl	8002f58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2b10      	cmp	r3, #16
 800977a:	d053      	beq.n	8009824 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	22ca      	movs	r2, #202	@ 0xca
 8009782:	625a      	str	r2, [r3, #36]	@ 0x24
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2253      	movs	r2, #83	@ 0x53
 800978a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fac9 	bl	8009d24 <RTC_EnterInitMode>
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d12a      	bne.n	80097f2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6899      	ldr	r1, [r3, #8]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	4b26      	ldr	r3, [pc, #152]	@ (8009840 <HAL_RTC_Init+0x104>)
 80097a8:	400b      	ands	r3, r1
 80097aa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6899      	ldr	r1, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	68d2      	ldr	r2, [r2, #12]
 80097d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6919      	ldr	r1, [r3, #16]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	041a      	lsls	r2, r3, #16
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fad2 	bl	8009d92 <RTC_ExitInitMode>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d110      	bne.n	800981a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0208 	bic.w	r2, r2, #8
 8009806:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	699a      	ldr	r2, [r3, #24]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	22ff      	movs	r2, #255	@ 0xff
 8009820:	625a      	str	r2, [r3, #36]	@ 0x24
 8009822:	e001      	b.n	8009828 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	ff8fffbf 	.word	0xff8fffbf

08009844 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	7f1b      	ldrb	r3, [r3, #28]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_RTC_SetTime+0x1c>
 800985c:	2302      	movs	r3, #2
 800985e:	e085      	b.n	800996c <HAL_RTC_SetTime+0x128>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2202      	movs	r2, #2
 800986a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d126      	bne.n	80098c0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 faa6 	bl	8009ddc <RTC_ByteToBcd2>
 8009890:	4603      	mov	r3, r0
 8009892:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fa9f 	bl	8009ddc <RTC_ByteToBcd2>
 800989e:	4603      	mov	r3, r0
 80098a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098a2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	789b      	ldrb	r3, [r3, #2]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 fa97 	bl	8009ddc <RTC_ByteToBcd2>
 80098ae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	78db      	ldrb	r3, [r3, #3]
 80098b8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
 80098be:	e018      	b.n	80098f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098e0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	78db      	ldrb	r3, [r3, #3]
 80098ec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098ee:	4313      	orrs	r3, r2
 80098f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	22ca      	movs	r2, #202	@ 0xca
 80098f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2253      	movs	r2, #83	@ 0x53
 8009900:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fa0e 	bl	8009d24 <RTC_EnterInitMode>
 8009908:	4603      	mov	r3, r0
 800990a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800990c:	7cfb      	ldrb	r3, [r7, #19]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d11e      	bne.n	8009950 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	6979      	ldr	r1, [r7, #20]
 8009918:	4b16      	ldr	r3, [pc, #88]	@ (8009974 <HAL_RTC_SetTime+0x130>)
 800991a:	400b      	ands	r3, r1
 800991c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689a      	ldr	r2, [r3, #8]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800992c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6899      	ldr	r1, [r3, #8]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	431a      	orrs	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fa23 	bl	8009d92 <RTC_ExitInitMode>
 800994c:	4603      	mov	r3, r0
 800994e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009950:	7cfb      	ldrb	r3, [r7, #19]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d102      	bne.n	800995c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	22ff      	movs	r2, #255	@ 0xff
 8009962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	771a      	strb	r2, [r3, #28]

  return status;
 800996a:	7cfb      	ldrb	r3, [r7, #19]
}
 800996c:	4618      	mov	r0, r3
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	bd90      	pop	{r4, r7, pc}
 8009974:	007f7f7f 	.word	0x007f7f7f

08009978 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	7f1b      	ldrb	r3, [r3, #28]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_RTC_SetDate+0x1c>
 8009990:	2302      	movs	r3, #2
 8009992:	e06f      	b.n	8009a74 <HAL_RTC_SetDate+0xfc>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2201      	movs	r2, #1
 8009998:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2202      	movs	r2, #2
 800999e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10e      	bne.n	80099c4 <HAL_RTC_SetDate+0x4c>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	785b      	ldrb	r3, [r3, #1]
 80099aa:	f003 0310 	and.w	r3, r3, #16
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	785b      	ldrb	r3, [r3, #1]
 80099b6:	f023 0310 	bic.w	r3, r3, #16
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	330a      	adds	r3, #10
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d11c      	bne.n	8009a04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	78db      	ldrb	r3, [r3, #3]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fa04 	bl	8009ddc <RTC_ByteToBcd2>
 80099d4:	4603      	mov	r3, r0
 80099d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 f9fd 	bl	8009ddc <RTC_ByteToBcd2>
 80099e2:	4603      	mov	r3, r0
 80099e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	789b      	ldrb	r3, [r3, #2]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f9f5 	bl	8009ddc <RTC_ByteToBcd2>
 80099f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80099f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	e00e      	b.n	8009a22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	78db      	ldrb	r3, [r3, #3]
 8009a08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009a16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	22ca      	movs	r2, #202	@ 0xca
 8009a28:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2253      	movs	r2, #83	@ 0x53
 8009a30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f976 	bl	8009d24 <RTC_EnterInitMode>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009a3c:	7cfb      	ldrb	r3, [r7, #19]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	6979      	ldr	r1, [r7, #20]
 8009a48:	4b0c      	ldr	r3, [pc, #48]	@ (8009a7c <HAL_RTC_SetDate+0x104>)
 8009a4a:	400b      	ands	r3, r1
 8009a4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f99f 	bl	8009d92 <RTC_ExitInitMode>
 8009a54:	4603      	mov	r3, r0
 8009a56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009a58:	7cfb      	ldrb	r3, [r7, #19]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2201      	movs	r2, #1
 8009a62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	22ff      	movs	r2, #255	@ 0xff
 8009a6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	771a      	strb	r2, [r3, #28]

  return status;
 8009a72:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	371c      	adds	r7, #28
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd90      	pop	{r4, r7, pc}
 8009a7c:	00ffff3f 	.word	0x00ffff3f

08009a80 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009a80:	b590      	push	{r4, r7, lr}
 8009a82:	b089      	sub	sp, #36	@ 0x24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	7f1b      	ldrb	r3, [r3, #28]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_RTC_SetAlarm+0x24>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e113      	b.n	8009ccc <HAL_RTC_SetAlarm+0x24c>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2202      	movs	r2, #2
 8009aae:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d137      	bne.n	8009b26 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f984 	bl	8009ddc <RTC_ByteToBcd2>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	785b      	ldrb	r3, [r3, #1]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 f97d 	bl	8009ddc <RTC_ByteToBcd2>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009ae6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	789b      	ldrb	r3, [r3, #2]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 f975 	bl	8009ddc <RTC_ByteToBcd2>
 8009af2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009af4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	78db      	ldrb	r3, [r3, #3]
 8009afc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009afe:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 f967 	bl	8009ddc <RTC_ByteToBcd2>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009b12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009b1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009b20:	4313      	orrs	r3, r2
 8009b22:	61fb      	str	r3, [r7, #28]
 8009b24:	e023      	b.n	8009b6e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009b46:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009b4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	78db      	ldrb	r3, [r3, #3]
 8009b52:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009b54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009b5e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009b64:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009b76:	4313      	orrs	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	22ca      	movs	r2, #202	@ 0xca
 8009b80:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2253      	movs	r2, #83	@ 0x53
 8009b88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b92:	d148      	bne.n	8009c26 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ba2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	689a      	ldr	r2, [r3, #8]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009bb2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009bc4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bc6:	f7fb fcef 	bl	80055a8 <HAL_GetTick>
 8009bca:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009bcc:	e013      	b.n	8009bf6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009bce:	f7fb fceb 	bl	80055a8 <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bdc:	d90b      	bls.n	8009bf6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	22ff      	movs	r2, #255	@ 0xff
 8009be4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2203      	movs	r2, #3
 8009bea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e06a      	b.n	8009ccc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0e4      	beq.n	8009bce <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689a      	ldr	r2, [r3, #8]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c22:	609a      	str	r2, [r3, #8]
 8009c24:	e047      	b.n	8009cb6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009c34:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c44:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009c56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c58:	f7fb fca6 	bl	80055a8 <HAL_GetTick>
 8009c5c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009c5e:	e013      	b.n	8009c88 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c60:	f7fb fca2 	bl	80055a8 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c6e:	d90b      	bls.n	8009c88 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	22ff      	movs	r2, #255	@ 0xff
 8009c76:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e021      	b.n	8009ccc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0e4      	beq.n	8009c60 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	22ff      	movs	r2, #255	@ 0xff
 8009cbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3724      	adds	r7, #36	@ 0x24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd90      	pop	{r4, r7, pc}

08009cd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009cee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009cf0:	f7fb fc5a 	bl	80055a8 <HAL_GetTick>
 8009cf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009cf6:	e009      	b.n	8009d0c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cf8:	f7fb fc56 	bl	80055a8 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d06:	d901      	bls.n	8009d0c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e007      	b.n	8009d1c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f003 0320 	and.w	r3, r3, #32
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0ee      	beq.n	8009cf8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d122      	bne.n	8009d88 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68da      	ldr	r2, [r3, #12]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d52:	f7fb fc29 	bl	80055a8 <HAL_GetTick>
 8009d56:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009d58:	e00c      	b.n	8009d74 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d5a:	f7fb fc25 	bl	80055a8 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d68:	d904      	bls.n	8009d74 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2204      	movs	r2, #4
 8009d6e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <RTC_EnterInitMode+0x64>
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d1e8      	bne.n	8009d5a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68da      	ldr	r2, [r3, #12]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009dac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f003 0320 	and.w	r3, r3, #32
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff ff89 	bl	8009cd4 <HAL_RTC_WaitForSynchro>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2204      	movs	r2, #4
 8009dcc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009dea:	e005      	b.n	8009df8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	3b0a      	subs	r3, #10
 8009df6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	2b09      	cmp	r3, #9
 8009dfc:	d8f6      	bhi.n	8009dec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	b2db      	uxtb	r3, r3
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009e24:	2300      	movs	r3, #0
 8009e26:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	7f1b      	ldrb	r3, [r3, #28]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e050      	b.n	8009ed6 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2201      	movs	r2, #1
 8009e38:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0206 	bic.w	r2, r2, #6
 8009e4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689a      	ldr	r2, [r3, #8]
 8009e66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee4 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	22ca      	movs	r2, #202	@ 0xca
 8009e7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2253      	movs	r2, #83	@ 0x53
 8009e82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009e9c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009eae:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689a      	ldr	r2, [r3, #8]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ebe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	22ff      	movs	r2, #255	@ 0xff
 8009ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	fffff7f7 	.word	0xfffff7f7

08009ee8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e025      	b.n	8009f48 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7f6 fe01 	bl	8000b18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f001 fa33 	bl	800b394 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	f001 fa87 	bl	800b44c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009f62:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d101      	bne.n	8009f6e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e021      	b.n	8009fb2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d002      	beq.n	8009f7a <HAL_SDRAM_SendCommand+0x2a>
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	d118      	bne.n	8009fac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	68b9      	ldr	r1, [r7, #8]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fac8 	bl	800b520 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d104      	bne.n	8009fa2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2205      	movs	r2, #5
 8009f9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009fa0:	e006      	b.n	8009fb0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009faa:	e001      	b.n	8009fb0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e000      	b.n	8009fb2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d101      	bne.n	8009fd4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e016      	b.n	800a002 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10f      	bne.n	800a000 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 faba 	bl	800b568 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e000      	b.n	800a002 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e09d      	b.n	800a158 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d108      	bne.n	800a036 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a02c:	d009      	beq.n	800a042 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	61da      	str	r2, [r3, #28]
 800a034:	e005      	b.n	800a042 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b00      	cmp	r3, #0
 800a052:	d106      	bne.n	800a062 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7f8 ffe7 	bl	8003030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2202      	movs	r2, #2
 800a066:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a078:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a082:	d902      	bls.n	800a08a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e002      	b.n	800a090 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a08a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a08e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a098:	d007      	beq.n	800a0aa <HAL_SPI_Init+0xa0>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a0a2:	d002      	beq.n	800a0aa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0d8:	431a      	orrs	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ec:	ea42 0103 	orr.w	r1, r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	0c1b      	lsrs	r3, r3, #16
 800a106:	f003 0204 	and.w	r2, r3, #4
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10e:	f003 0310 	and.w	r3, r3, #16
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a126:	ea42 0103 	orr.w	r1, r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69da      	ldr	r2, [r3, #28]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e049      	b.n	800a206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7fa ff92 	bl	80050b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f000 fac0 	bl	800a724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b01      	cmp	r3, #1
 800a222:	d001      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e054      	b.n	800a2d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f042 0201 	orr.w	r2, r2, #1
 800a23e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a26      	ldr	r2, [pc, #152]	@ (800a2e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d022      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0x80>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a252:	d01d      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0x80>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a22      	ldr	r2, [pc, #136]	@ (800a2e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d018      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0x80>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a21      	ldr	r2, [pc, #132]	@ (800a2e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d013      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0x80>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a1f      	ldr	r2, [pc, #124]	@ (800a2ec <HAL_TIM_Base_Start_IT+0xdc>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00e      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0x80>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a1e      	ldr	r2, [pc, #120]	@ (800a2f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d009      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0x80>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d004      	beq.n	800a290 <HAL_TIM_Base_Start_IT+0x80>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d115      	bne.n	800a2bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	4b19      	ldr	r3, [pc, #100]	@ (800a2fc <HAL_TIM_Base_Start_IT+0xec>)
 800a298:	4013      	ands	r3, r2
 800a29a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b06      	cmp	r3, #6
 800a2a0:	d015      	beq.n	800a2ce <HAL_TIM_Base_Start_IT+0xbe>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2a8:	d011      	beq.n	800a2ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f042 0201 	orr.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ba:	e008      	b.n	800a2ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0201 	orr.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	e000      	b.n	800a2d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40010000 	.word	0x40010000
 800a2e4:	40000400 	.word	0x40000400
 800a2e8:	40000800 	.word	0x40000800
 800a2ec:	40000c00 	.word	0x40000c00
 800a2f0:	40010400 	.word	0x40010400
 800a2f4:	40014000 	.word	0x40014000
 800a2f8:	40001800 	.word	0x40001800
 800a2fc:	00010007 	.word	0x00010007

0800a300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	2b02      	cmp	r3, #2
 800a314:	d122      	bne.n	800a35c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b02      	cmp	r3, #2
 800a322:	d11b      	bne.n	800a35c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f06f 0202 	mvn.w	r2, #2
 800a32c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f9d0 	bl	800a6e8 <HAL_TIM_IC_CaptureCallback>
 800a348:	e005      	b.n	800a356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f9c2 	bl	800a6d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f9d3 	bl	800a6fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	2b04      	cmp	r3, #4
 800a368:	d122      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b04      	cmp	r3, #4
 800a376:	d11b      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f06f 0204 	mvn.w	r2, #4
 800a380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2202      	movs	r2, #2
 800a386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f9a6 	bl	800a6e8 <HAL_TIM_IC_CaptureCallback>
 800a39c:	e005      	b.n	800a3aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f998 	bl	800a6d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f9a9 	bl	800a6fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	2b08      	cmp	r3, #8
 800a3bc:	d122      	bne.n	800a404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b08      	cmp	r3, #8
 800a3ca:	d11b      	bne.n	800a404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0208 	mvn.w	r2, #8
 800a3d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2204      	movs	r2, #4
 800a3da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f97c 	bl	800a6e8 <HAL_TIM_IC_CaptureCallback>
 800a3f0:	e005      	b.n	800a3fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f96e 	bl	800a6d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f97f 	bl	800a6fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	2b10      	cmp	r3, #16
 800a410:	d122      	bne.n	800a458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0310 	and.w	r3, r3, #16
 800a41c:	2b10      	cmp	r3, #16
 800a41e:	d11b      	bne.n	800a458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0210 	mvn.w	r2, #16
 800a428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2208      	movs	r2, #8
 800a42e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f952 	bl	800a6e8 <HAL_TIM_IC_CaptureCallback>
 800a444:	e005      	b.n	800a452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f944 	bl	800a6d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f955 	bl	800a6fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b01      	cmp	r3, #1
 800a464:	d10e      	bne.n	800a484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b01      	cmp	r3, #1
 800a472:	d107      	bne.n	800a484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f06f 0201 	mvn.w	r2, #1
 800a47c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7f8 fcae 	bl	8002de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48e:	2b80      	cmp	r3, #128	@ 0x80
 800a490:	d10e      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a49c:	2b80      	cmp	r3, #128	@ 0x80
 800a49e:	d107      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fb0c 	bl	800aac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4be:	d10e      	bne.n	800a4de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ca:	2b80      	cmp	r3, #128	@ 0x80
 800a4cc:	d107      	bne.n	800a4de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 faff 	bl	800aadc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4e8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ea:	d10e      	bne.n	800a50a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f6:	2b40      	cmp	r3, #64	@ 0x40
 800a4f8:	d107      	bne.n	800a50a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f903 	bl	800a710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b20      	cmp	r3, #32
 800a516:	d10e      	bne.n	800a536 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b20      	cmp	r3, #32
 800a524:	d107      	bne.n	800a536 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f06f 0220 	mvn.w	r2, #32
 800a52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fabf 	bl	800aab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_TIM_ConfigClockSource+0x1c>
 800a558:	2302      	movs	r3, #2
 800a55a:	e0b4      	b.n	800a6c6 <HAL_TIM_ConfigClockSource+0x186>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	4b56      	ldr	r3, [pc, #344]	@ (800a6d0 <HAL_TIM_ConfigClockSource+0x190>)
 800a578:	4013      	ands	r3, r2
 800a57a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a594:	d03e      	beq.n	800a614 <HAL_TIM_ConfigClockSource+0xd4>
 800a596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a59a:	f200 8087 	bhi.w	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a59e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5a2:	f000 8086 	beq.w	800a6b2 <HAL_TIM_ConfigClockSource+0x172>
 800a5a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5aa:	d87f      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5ac:	2b70      	cmp	r3, #112	@ 0x70
 800a5ae:	d01a      	beq.n	800a5e6 <HAL_TIM_ConfigClockSource+0xa6>
 800a5b0:	2b70      	cmp	r3, #112	@ 0x70
 800a5b2:	d87b      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5b4:	2b60      	cmp	r3, #96	@ 0x60
 800a5b6:	d050      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x11a>
 800a5b8:	2b60      	cmp	r3, #96	@ 0x60
 800a5ba:	d877      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5bc:	2b50      	cmp	r3, #80	@ 0x50
 800a5be:	d03c      	beq.n	800a63a <HAL_TIM_ConfigClockSource+0xfa>
 800a5c0:	2b50      	cmp	r3, #80	@ 0x50
 800a5c2:	d873      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5c4:	2b40      	cmp	r3, #64	@ 0x40
 800a5c6:	d058      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x13a>
 800a5c8:	2b40      	cmp	r3, #64	@ 0x40
 800a5ca:	d86f      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5cc:	2b30      	cmp	r3, #48	@ 0x30
 800a5ce:	d064      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5d0:	2b30      	cmp	r3, #48	@ 0x30
 800a5d2:	d86b      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5d4:	2b20      	cmp	r3, #32
 800a5d6:	d060      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5d8:	2b20      	cmp	r3, #32
 800a5da:	d867      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d05c      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5e0:	2b10      	cmp	r3, #16
 800a5e2:	d05a      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5e4:	e062      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5f6:	f000 f9af 	bl	800a958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	609a      	str	r2, [r3, #8]
      break;
 800a612:	e04f      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a624:	f000 f998 	bl	800a958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a636:	609a      	str	r2, [r3, #8]
      break;
 800a638:	e03c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a646:	461a      	mov	r2, r3
 800a648:	f000 f90c 	bl	800a864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2150      	movs	r1, #80	@ 0x50
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f965 	bl	800a922 <TIM_ITRx_SetConfig>
      break;
 800a658:	e02c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a666:	461a      	mov	r2, r3
 800a668:	f000 f92b 	bl	800a8c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2160      	movs	r1, #96	@ 0x60
 800a672:	4618      	mov	r0, r3
 800a674:	f000 f955 	bl	800a922 <TIM_ITRx_SetConfig>
      break;
 800a678:	e01c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a686:	461a      	mov	r2, r3
 800a688:	f000 f8ec 	bl	800a864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2140      	movs	r1, #64	@ 0x40
 800a692:	4618      	mov	r0, r3
 800a694:	f000 f945 	bl	800a922 <TIM_ITRx_SetConfig>
      break;
 800a698:	e00c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f000 f93c 	bl	800a922 <TIM_ITRx_SetConfig>
      break;
 800a6aa:	e003      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b0:	e000      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	fffeff88 	.word	0xfffeff88

0800a6d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a40      	ldr	r2, [pc, #256]	@ (800a838 <TIM_Base_SetConfig+0x114>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d013      	beq.n	800a764 <TIM_Base_SetConfig+0x40>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a742:	d00f      	beq.n	800a764 <TIM_Base_SetConfig+0x40>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a3d      	ldr	r2, [pc, #244]	@ (800a83c <TIM_Base_SetConfig+0x118>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d00b      	beq.n	800a764 <TIM_Base_SetConfig+0x40>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a3c      	ldr	r2, [pc, #240]	@ (800a840 <TIM_Base_SetConfig+0x11c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d007      	beq.n	800a764 <TIM_Base_SetConfig+0x40>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a3b      	ldr	r2, [pc, #236]	@ (800a844 <TIM_Base_SetConfig+0x120>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d003      	beq.n	800a764 <TIM_Base_SetConfig+0x40>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a3a      	ldr	r2, [pc, #232]	@ (800a848 <TIM_Base_SetConfig+0x124>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d108      	bne.n	800a776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a76a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a2f      	ldr	r2, [pc, #188]	@ (800a838 <TIM_Base_SetConfig+0x114>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d02b      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a784:	d027      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a2c      	ldr	r2, [pc, #176]	@ (800a83c <TIM_Base_SetConfig+0x118>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d023      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a2b      	ldr	r2, [pc, #172]	@ (800a840 <TIM_Base_SetConfig+0x11c>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d01f      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a2a      	ldr	r2, [pc, #168]	@ (800a844 <TIM_Base_SetConfig+0x120>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d01b      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a29      	ldr	r2, [pc, #164]	@ (800a848 <TIM_Base_SetConfig+0x124>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d017      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a28      	ldr	r2, [pc, #160]	@ (800a84c <TIM_Base_SetConfig+0x128>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d013      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a27      	ldr	r2, [pc, #156]	@ (800a850 <TIM_Base_SetConfig+0x12c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00f      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a26      	ldr	r2, [pc, #152]	@ (800a854 <TIM_Base_SetConfig+0x130>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00b      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a25      	ldr	r2, [pc, #148]	@ (800a858 <TIM_Base_SetConfig+0x134>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d007      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a24      	ldr	r2, [pc, #144]	@ (800a85c <TIM_Base_SetConfig+0x138>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d003      	beq.n	800a7d6 <TIM_Base_SetConfig+0xb2>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a23      	ldr	r2, [pc, #140]	@ (800a860 <TIM_Base_SetConfig+0x13c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d108      	bne.n	800a7e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a0a      	ldr	r2, [pc, #40]	@ (800a838 <TIM_Base_SetConfig+0x114>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d003      	beq.n	800a81c <TIM_Base_SetConfig+0xf8>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a0c      	ldr	r2, [pc, #48]	@ (800a848 <TIM_Base_SetConfig+0x124>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d103      	bne.n	800a824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	691a      	ldr	r2, [r3, #16]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	615a      	str	r2, [r3, #20]
}
 800a82a:	bf00      	nop
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	40010000 	.word	0x40010000
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800
 800a844:	40000c00 	.word	0x40000c00
 800a848:	40010400 	.word	0x40010400
 800a84c:	40014000 	.word	0x40014000
 800a850:	40014400 	.word	0x40014400
 800a854:	40014800 	.word	0x40014800
 800a858:	40001800 	.word	0x40001800
 800a85c:	40001c00 	.word	0x40001c00
 800a860:	40002000 	.word	0x40002000

0800a864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a1b      	ldr	r3, [r3, #32]
 800a874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	f023 0201 	bic.w	r2, r3, #1
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a88e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f023 030a 	bic.w	r3, r3, #10
 800a8a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	621a      	str	r2, [r3, #32]
}
 800a8b6:	bf00      	nop
 800a8b8:	371c      	adds	r7, #28
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b087      	sub	sp, #28
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	60f8      	str	r0, [r7, #12]
 800a8ca:	60b9      	str	r1, [r7, #8]
 800a8cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	f023 0210 	bic.w	r2, r3, #16
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	031b      	lsls	r3, r3, #12
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a8fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4313      	orrs	r3, r2
 800a908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	621a      	str	r2, [r3, #32]
}
 800a916:	bf00      	nop
 800a918:	371c      	adds	r7, #28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a922:	b480      	push	{r7}
 800a924:	b085      	sub	sp, #20
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4313      	orrs	r3, r2
 800a940:	f043 0307 	orr.w	r3, r3, #7
 800a944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	609a      	str	r2, [r3, #8]
}
 800a94c:	bf00      	nop
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	021a      	lsls	r2, r3, #8
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	431a      	orrs	r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	4313      	orrs	r3, r2
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	4313      	orrs	r3, r2
 800a984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	609a      	str	r2, [r3, #8]
}
 800a98c:	bf00      	nop
 800a98e:	371c      	adds	r7, #28
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d101      	bne.n	800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	e06d      	b.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a30      	ldr	r2, [pc, #192]	@ (800aa98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d004      	beq.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a2f      	ldr	r2, [pc, #188]	@ (800aa9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d108      	bne.n	800a9f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a9ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a20      	ldr	r2, [pc, #128]	@ (800aa98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d022      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa22:	d01d      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d018      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d013      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d00e      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a15      	ldr	r2, [pc, #84]	@ (800aa9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d009      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a16      	ldr	r2, [pc, #88]	@ (800aaac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d004      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a15      	ldr	r2, [pc, #84]	@ (800aab0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d10c      	bne.n	800aa7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	40010000 	.word	0x40010000
 800aa9c:	40010400 	.word	0x40010400
 800aaa0:	40000400 	.word	0x40000400
 800aaa4:	40000800 	.word	0x40000800
 800aaa8:	40000c00 	.word	0x40000c00
 800aaac:	40014000 	.word	0x40014000
 800aab0:	40001800 	.word	0x40001800

0800aab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e040      	b.n	800ab84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7fa fbee 	bl	80052f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2224      	movs	r2, #36	@ 0x24
 800ab1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f022 0201 	bic.w	r2, r2, #1
 800ab2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f82c 	bl	800ab8c <UART_SetConfig>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d101      	bne.n	800ab3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e022      	b.n	800ab84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa84 	bl	800b054 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	689a      	ldr	r2, [r3, #8]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fb0b 	bl	800b198 <UART_CheckIdleState>
 800ab82:	4603      	mov	r3, r0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	431a      	orrs	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	431a      	orrs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	69db      	ldr	r3, [r3, #28]
 800abac:	4313      	orrs	r3, r2
 800abae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	4ba6      	ldr	r3, [pc, #664]	@ (800ae50 <UART_SetConfig+0x2c4>)
 800abb8:	4013      	ands	r3, r2
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6812      	ldr	r2, [r2, #0]
 800abbe:	6979      	ldr	r1, [r7, #20]
 800abc0:	430b      	orrs	r3, r1
 800abc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a94      	ldr	r2, [pc, #592]	@ (800ae54 <UART_SetConfig+0x2c8>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d120      	bne.n	800ac4a <UART_SetConfig+0xbe>
 800ac08:	4b93      	ldr	r3, [pc, #588]	@ (800ae58 <UART_SetConfig+0x2cc>)
 800ac0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac0e:	f003 0303 	and.w	r3, r3, #3
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d816      	bhi.n	800ac44 <UART_SetConfig+0xb8>
 800ac16:	a201      	add	r2, pc, #4	@ (adr r2, 800ac1c <UART_SetConfig+0x90>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800ac2d 	.word	0x0800ac2d
 800ac20:	0800ac39 	.word	0x0800ac39
 800ac24:	0800ac33 	.word	0x0800ac33
 800ac28:	0800ac3f 	.word	0x0800ac3f
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	77fb      	strb	r3, [r7, #31]
 800ac30:	e150      	b.n	800aed4 <UART_SetConfig+0x348>
 800ac32:	2302      	movs	r3, #2
 800ac34:	77fb      	strb	r3, [r7, #31]
 800ac36:	e14d      	b.n	800aed4 <UART_SetConfig+0x348>
 800ac38:	2304      	movs	r3, #4
 800ac3a:	77fb      	strb	r3, [r7, #31]
 800ac3c:	e14a      	b.n	800aed4 <UART_SetConfig+0x348>
 800ac3e:	2308      	movs	r3, #8
 800ac40:	77fb      	strb	r3, [r7, #31]
 800ac42:	e147      	b.n	800aed4 <UART_SetConfig+0x348>
 800ac44:	2310      	movs	r3, #16
 800ac46:	77fb      	strb	r3, [r7, #31]
 800ac48:	e144      	b.n	800aed4 <UART_SetConfig+0x348>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a83      	ldr	r2, [pc, #524]	@ (800ae5c <UART_SetConfig+0x2d0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d132      	bne.n	800acba <UART_SetConfig+0x12e>
 800ac54:	4b80      	ldr	r3, [pc, #512]	@ (800ae58 <UART_SetConfig+0x2cc>)
 800ac56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac5a:	f003 030c 	and.w	r3, r3, #12
 800ac5e:	2b0c      	cmp	r3, #12
 800ac60:	d828      	bhi.n	800acb4 <UART_SetConfig+0x128>
 800ac62:	a201      	add	r2, pc, #4	@ (adr r2, 800ac68 <UART_SetConfig+0xdc>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800ac9d 	.word	0x0800ac9d
 800ac6c:	0800acb5 	.word	0x0800acb5
 800ac70:	0800acb5 	.word	0x0800acb5
 800ac74:	0800acb5 	.word	0x0800acb5
 800ac78:	0800aca9 	.word	0x0800aca9
 800ac7c:	0800acb5 	.word	0x0800acb5
 800ac80:	0800acb5 	.word	0x0800acb5
 800ac84:	0800acb5 	.word	0x0800acb5
 800ac88:	0800aca3 	.word	0x0800aca3
 800ac8c:	0800acb5 	.word	0x0800acb5
 800ac90:	0800acb5 	.word	0x0800acb5
 800ac94:	0800acb5 	.word	0x0800acb5
 800ac98:	0800acaf 	.word	0x0800acaf
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	77fb      	strb	r3, [r7, #31]
 800aca0:	e118      	b.n	800aed4 <UART_SetConfig+0x348>
 800aca2:	2302      	movs	r3, #2
 800aca4:	77fb      	strb	r3, [r7, #31]
 800aca6:	e115      	b.n	800aed4 <UART_SetConfig+0x348>
 800aca8:	2304      	movs	r3, #4
 800acaa:	77fb      	strb	r3, [r7, #31]
 800acac:	e112      	b.n	800aed4 <UART_SetConfig+0x348>
 800acae:	2308      	movs	r3, #8
 800acb0:	77fb      	strb	r3, [r7, #31]
 800acb2:	e10f      	b.n	800aed4 <UART_SetConfig+0x348>
 800acb4:	2310      	movs	r3, #16
 800acb6:	77fb      	strb	r3, [r7, #31]
 800acb8:	e10c      	b.n	800aed4 <UART_SetConfig+0x348>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a68      	ldr	r2, [pc, #416]	@ (800ae60 <UART_SetConfig+0x2d4>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d120      	bne.n	800ad06 <UART_SetConfig+0x17a>
 800acc4:	4b64      	ldr	r3, [pc, #400]	@ (800ae58 <UART_SetConfig+0x2cc>)
 800acc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800acce:	2b30      	cmp	r3, #48	@ 0x30
 800acd0:	d013      	beq.n	800acfa <UART_SetConfig+0x16e>
 800acd2:	2b30      	cmp	r3, #48	@ 0x30
 800acd4:	d814      	bhi.n	800ad00 <UART_SetConfig+0x174>
 800acd6:	2b20      	cmp	r3, #32
 800acd8:	d009      	beq.n	800acee <UART_SetConfig+0x162>
 800acda:	2b20      	cmp	r3, #32
 800acdc:	d810      	bhi.n	800ad00 <UART_SetConfig+0x174>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d002      	beq.n	800ace8 <UART_SetConfig+0x15c>
 800ace2:	2b10      	cmp	r3, #16
 800ace4:	d006      	beq.n	800acf4 <UART_SetConfig+0x168>
 800ace6:	e00b      	b.n	800ad00 <UART_SetConfig+0x174>
 800ace8:	2300      	movs	r3, #0
 800acea:	77fb      	strb	r3, [r7, #31]
 800acec:	e0f2      	b.n	800aed4 <UART_SetConfig+0x348>
 800acee:	2302      	movs	r3, #2
 800acf0:	77fb      	strb	r3, [r7, #31]
 800acf2:	e0ef      	b.n	800aed4 <UART_SetConfig+0x348>
 800acf4:	2304      	movs	r3, #4
 800acf6:	77fb      	strb	r3, [r7, #31]
 800acf8:	e0ec      	b.n	800aed4 <UART_SetConfig+0x348>
 800acfa:	2308      	movs	r3, #8
 800acfc:	77fb      	strb	r3, [r7, #31]
 800acfe:	e0e9      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad00:	2310      	movs	r3, #16
 800ad02:	77fb      	strb	r3, [r7, #31]
 800ad04:	e0e6      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a56      	ldr	r2, [pc, #344]	@ (800ae64 <UART_SetConfig+0x2d8>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d120      	bne.n	800ad52 <UART_SetConfig+0x1c6>
 800ad10:	4b51      	ldr	r3, [pc, #324]	@ (800ae58 <UART_SetConfig+0x2cc>)
 800ad12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ad1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad1c:	d013      	beq.n	800ad46 <UART_SetConfig+0x1ba>
 800ad1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad20:	d814      	bhi.n	800ad4c <UART_SetConfig+0x1c0>
 800ad22:	2b80      	cmp	r3, #128	@ 0x80
 800ad24:	d009      	beq.n	800ad3a <UART_SetConfig+0x1ae>
 800ad26:	2b80      	cmp	r3, #128	@ 0x80
 800ad28:	d810      	bhi.n	800ad4c <UART_SetConfig+0x1c0>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <UART_SetConfig+0x1a8>
 800ad2e:	2b40      	cmp	r3, #64	@ 0x40
 800ad30:	d006      	beq.n	800ad40 <UART_SetConfig+0x1b4>
 800ad32:	e00b      	b.n	800ad4c <UART_SetConfig+0x1c0>
 800ad34:	2300      	movs	r3, #0
 800ad36:	77fb      	strb	r3, [r7, #31]
 800ad38:	e0cc      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	77fb      	strb	r3, [r7, #31]
 800ad3e:	e0c9      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad40:	2304      	movs	r3, #4
 800ad42:	77fb      	strb	r3, [r7, #31]
 800ad44:	e0c6      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad46:	2308      	movs	r3, #8
 800ad48:	77fb      	strb	r3, [r7, #31]
 800ad4a:	e0c3      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	77fb      	strb	r3, [r7, #31]
 800ad50:	e0c0      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a44      	ldr	r2, [pc, #272]	@ (800ae68 <UART_SetConfig+0x2dc>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d125      	bne.n	800ada8 <UART_SetConfig+0x21c>
 800ad5c:	4b3e      	ldr	r3, [pc, #248]	@ (800ae58 <UART_SetConfig+0x2cc>)
 800ad5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad6a:	d017      	beq.n	800ad9c <UART_SetConfig+0x210>
 800ad6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad70:	d817      	bhi.n	800ada2 <UART_SetConfig+0x216>
 800ad72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad76:	d00b      	beq.n	800ad90 <UART_SetConfig+0x204>
 800ad78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad7c:	d811      	bhi.n	800ada2 <UART_SetConfig+0x216>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <UART_SetConfig+0x1fe>
 800ad82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad86:	d006      	beq.n	800ad96 <UART_SetConfig+0x20a>
 800ad88:	e00b      	b.n	800ada2 <UART_SetConfig+0x216>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	77fb      	strb	r3, [r7, #31]
 800ad8e:	e0a1      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad90:	2302      	movs	r3, #2
 800ad92:	77fb      	strb	r3, [r7, #31]
 800ad94:	e09e      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad96:	2304      	movs	r3, #4
 800ad98:	77fb      	strb	r3, [r7, #31]
 800ad9a:	e09b      	b.n	800aed4 <UART_SetConfig+0x348>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	77fb      	strb	r3, [r7, #31]
 800ada0:	e098      	b.n	800aed4 <UART_SetConfig+0x348>
 800ada2:	2310      	movs	r3, #16
 800ada4:	77fb      	strb	r3, [r7, #31]
 800ada6:	e095      	b.n	800aed4 <UART_SetConfig+0x348>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a2f      	ldr	r2, [pc, #188]	@ (800ae6c <UART_SetConfig+0x2e0>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d125      	bne.n	800adfe <UART_SetConfig+0x272>
 800adb2:	4b29      	ldr	r3, [pc, #164]	@ (800ae58 <UART_SetConfig+0x2cc>)
 800adb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800adbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adc0:	d017      	beq.n	800adf2 <UART_SetConfig+0x266>
 800adc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adc6:	d817      	bhi.n	800adf8 <UART_SetConfig+0x26c>
 800adc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adcc:	d00b      	beq.n	800ade6 <UART_SetConfig+0x25a>
 800adce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800add2:	d811      	bhi.n	800adf8 <UART_SetConfig+0x26c>
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <UART_SetConfig+0x254>
 800add8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800addc:	d006      	beq.n	800adec <UART_SetConfig+0x260>
 800adde:	e00b      	b.n	800adf8 <UART_SetConfig+0x26c>
 800ade0:	2301      	movs	r3, #1
 800ade2:	77fb      	strb	r3, [r7, #31]
 800ade4:	e076      	b.n	800aed4 <UART_SetConfig+0x348>
 800ade6:	2302      	movs	r3, #2
 800ade8:	77fb      	strb	r3, [r7, #31]
 800adea:	e073      	b.n	800aed4 <UART_SetConfig+0x348>
 800adec:	2304      	movs	r3, #4
 800adee:	77fb      	strb	r3, [r7, #31]
 800adf0:	e070      	b.n	800aed4 <UART_SetConfig+0x348>
 800adf2:	2308      	movs	r3, #8
 800adf4:	77fb      	strb	r3, [r7, #31]
 800adf6:	e06d      	b.n	800aed4 <UART_SetConfig+0x348>
 800adf8:	2310      	movs	r3, #16
 800adfa:	77fb      	strb	r3, [r7, #31]
 800adfc:	e06a      	b.n	800aed4 <UART_SetConfig+0x348>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a1b      	ldr	r2, [pc, #108]	@ (800ae70 <UART_SetConfig+0x2e4>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d138      	bne.n	800ae7a <UART_SetConfig+0x2ee>
 800ae08:	4b13      	ldr	r3, [pc, #76]	@ (800ae58 <UART_SetConfig+0x2cc>)
 800ae0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ae12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae16:	d017      	beq.n	800ae48 <UART_SetConfig+0x2bc>
 800ae18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae1c:	d82a      	bhi.n	800ae74 <UART_SetConfig+0x2e8>
 800ae1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae22:	d00b      	beq.n	800ae3c <UART_SetConfig+0x2b0>
 800ae24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae28:	d824      	bhi.n	800ae74 <UART_SetConfig+0x2e8>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <UART_SetConfig+0x2aa>
 800ae2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae32:	d006      	beq.n	800ae42 <UART_SetConfig+0x2b6>
 800ae34:	e01e      	b.n	800ae74 <UART_SetConfig+0x2e8>
 800ae36:	2300      	movs	r3, #0
 800ae38:	77fb      	strb	r3, [r7, #31]
 800ae3a:	e04b      	b.n	800aed4 <UART_SetConfig+0x348>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	77fb      	strb	r3, [r7, #31]
 800ae40:	e048      	b.n	800aed4 <UART_SetConfig+0x348>
 800ae42:	2304      	movs	r3, #4
 800ae44:	77fb      	strb	r3, [r7, #31]
 800ae46:	e045      	b.n	800aed4 <UART_SetConfig+0x348>
 800ae48:	2308      	movs	r3, #8
 800ae4a:	77fb      	strb	r3, [r7, #31]
 800ae4c:	e042      	b.n	800aed4 <UART_SetConfig+0x348>
 800ae4e:	bf00      	nop
 800ae50:	efff69f3 	.word	0xefff69f3
 800ae54:	40011000 	.word	0x40011000
 800ae58:	40023800 	.word	0x40023800
 800ae5c:	40004400 	.word	0x40004400
 800ae60:	40004800 	.word	0x40004800
 800ae64:	40004c00 	.word	0x40004c00
 800ae68:	40005000 	.word	0x40005000
 800ae6c:	40011400 	.word	0x40011400
 800ae70:	40007800 	.word	0x40007800
 800ae74:	2310      	movs	r3, #16
 800ae76:	77fb      	strb	r3, [r7, #31]
 800ae78:	e02c      	b.n	800aed4 <UART_SetConfig+0x348>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a72      	ldr	r2, [pc, #456]	@ (800b048 <UART_SetConfig+0x4bc>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d125      	bne.n	800aed0 <UART_SetConfig+0x344>
 800ae84:	4b71      	ldr	r3, [pc, #452]	@ (800b04c <UART_SetConfig+0x4c0>)
 800ae86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ae8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae92:	d017      	beq.n	800aec4 <UART_SetConfig+0x338>
 800ae94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae98:	d817      	bhi.n	800aeca <UART_SetConfig+0x33e>
 800ae9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae9e:	d00b      	beq.n	800aeb8 <UART_SetConfig+0x32c>
 800aea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aea4:	d811      	bhi.n	800aeca <UART_SetConfig+0x33e>
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <UART_SetConfig+0x326>
 800aeaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aeae:	d006      	beq.n	800aebe <UART_SetConfig+0x332>
 800aeb0:	e00b      	b.n	800aeca <UART_SetConfig+0x33e>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	77fb      	strb	r3, [r7, #31]
 800aeb6:	e00d      	b.n	800aed4 <UART_SetConfig+0x348>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	77fb      	strb	r3, [r7, #31]
 800aebc:	e00a      	b.n	800aed4 <UART_SetConfig+0x348>
 800aebe:	2304      	movs	r3, #4
 800aec0:	77fb      	strb	r3, [r7, #31]
 800aec2:	e007      	b.n	800aed4 <UART_SetConfig+0x348>
 800aec4:	2308      	movs	r3, #8
 800aec6:	77fb      	strb	r3, [r7, #31]
 800aec8:	e004      	b.n	800aed4 <UART_SetConfig+0x348>
 800aeca:	2310      	movs	r3, #16
 800aecc:	77fb      	strb	r3, [r7, #31]
 800aece:	e001      	b.n	800aed4 <UART_SetConfig+0x348>
 800aed0:	2310      	movs	r3, #16
 800aed2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aedc:	d15b      	bne.n	800af96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aede:	7ffb      	ldrb	r3, [r7, #31]
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d828      	bhi.n	800af36 <UART_SetConfig+0x3aa>
 800aee4:	a201      	add	r2, pc, #4	@ (adr r2, 800aeec <UART_SetConfig+0x360>)
 800aee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeea:	bf00      	nop
 800aeec:	0800af11 	.word	0x0800af11
 800aef0:	0800af19 	.word	0x0800af19
 800aef4:	0800af21 	.word	0x0800af21
 800aef8:	0800af37 	.word	0x0800af37
 800aefc:	0800af27 	.word	0x0800af27
 800af00:	0800af37 	.word	0x0800af37
 800af04:	0800af37 	.word	0x0800af37
 800af08:	0800af37 	.word	0x0800af37
 800af0c:	0800af2f 	.word	0x0800af2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af10:	f7fd ffca 	bl	8008ea8 <HAL_RCC_GetPCLK1Freq>
 800af14:	61b8      	str	r0, [r7, #24]
        break;
 800af16:	e013      	b.n	800af40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af18:	f7fd ffda 	bl	8008ed0 <HAL_RCC_GetPCLK2Freq>
 800af1c:	61b8      	str	r0, [r7, #24]
        break;
 800af1e:	e00f      	b.n	800af40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af20:	4b4b      	ldr	r3, [pc, #300]	@ (800b050 <UART_SetConfig+0x4c4>)
 800af22:	61bb      	str	r3, [r7, #24]
        break;
 800af24:	e00c      	b.n	800af40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af26:	f7fd feed 	bl	8008d04 <HAL_RCC_GetSysClockFreq>
 800af2a:	61b8      	str	r0, [r7, #24]
        break;
 800af2c:	e008      	b.n	800af40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af32:	61bb      	str	r3, [r7, #24]
        break;
 800af34:	e004      	b.n	800af40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	77bb      	strb	r3, [r7, #30]
        break;
 800af3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d074      	beq.n	800b030 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	005a      	lsls	r2, r3, #1
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	085b      	lsrs	r3, r3, #1
 800af50:	441a      	add	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	fbb2 f3f3 	udiv	r3, r2, r3
 800af5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	2b0f      	cmp	r3, #15
 800af60:	d916      	bls.n	800af90 <UART_SetConfig+0x404>
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af68:	d212      	bcs.n	800af90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	f023 030f 	bic.w	r3, r3, #15
 800af72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	085b      	lsrs	r3, r3, #1
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f003 0307 	and.w	r3, r3, #7
 800af7e:	b29a      	uxth	r2, r3
 800af80:	89fb      	ldrh	r3, [r7, #14]
 800af82:	4313      	orrs	r3, r2
 800af84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	89fa      	ldrh	r2, [r7, #14]
 800af8c:	60da      	str	r2, [r3, #12]
 800af8e:	e04f      	b.n	800b030 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	77bb      	strb	r3, [r7, #30]
 800af94:	e04c      	b.n	800b030 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af96:	7ffb      	ldrb	r3, [r7, #31]
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d828      	bhi.n	800afee <UART_SetConfig+0x462>
 800af9c:	a201      	add	r2, pc, #4	@ (adr r2, 800afa4 <UART_SetConfig+0x418>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afc9 	.word	0x0800afc9
 800afa8:	0800afd1 	.word	0x0800afd1
 800afac:	0800afd9 	.word	0x0800afd9
 800afb0:	0800afef 	.word	0x0800afef
 800afb4:	0800afdf 	.word	0x0800afdf
 800afb8:	0800afef 	.word	0x0800afef
 800afbc:	0800afef 	.word	0x0800afef
 800afc0:	0800afef 	.word	0x0800afef
 800afc4:	0800afe7 	.word	0x0800afe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afc8:	f7fd ff6e 	bl	8008ea8 <HAL_RCC_GetPCLK1Freq>
 800afcc:	61b8      	str	r0, [r7, #24]
        break;
 800afce:	e013      	b.n	800aff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afd0:	f7fd ff7e 	bl	8008ed0 <HAL_RCC_GetPCLK2Freq>
 800afd4:	61b8      	str	r0, [r7, #24]
        break;
 800afd6:	e00f      	b.n	800aff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afd8:	4b1d      	ldr	r3, [pc, #116]	@ (800b050 <UART_SetConfig+0x4c4>)
 800afda:	61bb      	str	r3, [r7, #24]
        break;
 800afdc:	e00c      	b.n	800aff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afde:	f7fd fe91 	bl	8008d04 <HAL_RCC_GetSysClockFreq>
 800afe2:	61b8      	str	r0, [r7, #24]
        break;
 800afe4:	e008      	b.n	800aff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afea:	61bb      	str	r3, [r7, #24]
        break;
 800afec:	e004      	b.n	800aff8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	77bb      	strb	r3, [r7, #30]
        break;
 800aff6:	bf00      	nop
    }

    if (pclk != 0U)
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d018      	beq.n	800b030 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	085a      	lsrs	r2, r3, #1
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	441a      	add	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2b0f      	cmp	r3, #15
 800b016:	d909      	bls.n	800b02c <UART_SetConfig+0x4a0>
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b01e:	d205      	bcs.n	800b02c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	b29a      	uxth	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60da      	str	r2, [r3, #12]
 800b02a:	e001      	b.n	800b030 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b03c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3720      	adds	r7, #32
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	40007c00 	.word	0x40007c00
 800b04c:	40023800 	.word	0x40023800
 800b050:	00f42400 	.word	0x00f42400

0800b054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00a      	beq.n	800b07e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00a      	beq.n	800b0a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a4:	f003 0304 	and.w	r3, r3, #4
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00a      	beq.n	800b0c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	430a      	orrs	r2, r1
 800b0c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00a      	beq.n	800b0e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e8:	f003 0310 	and.w	r3, r3, #16
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10a:	f003 0320 	and.w	r3, r3, #32
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b130:	2b00      	cmp	r3, #0
 800b132:	d01a      	beq.n	800b16a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	430a      	orrs	r2, r1
 800b148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b14e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b152:	d10a      	bne.n	800b16a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	430a      	orrs	r2, r1
 800b168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00a      	beq.n	800b18c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	605a      	str	r2, [r3, #4]
  }
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1a8:	f7fa f9fe 	bl	80055a8 <HAL_GetTick>
 800b1ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0308 	and.w	r3, r3, #8
 800b1b8:	2b08      	cmp	r3, #8
 800b1ba:	d10e      	bne.n	800b1da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f81b 	bl	800b206 <UART_WaitOnFlagUntilTimeout>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e011      	b.n	800b1fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2220      	movs	r2, #32
 800b1de:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b09c      	sub	sp, #112	@ 0x70
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	603b      	str	r3, [r7, #0]
 800b212:	4613      	mov	r3, r2
 800b214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b216:	e0a7      	b.n	800b368 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b218:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21e:	f000 80a3 	beq.w	800b368 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b222:	f7fa f9c1 	bl	80055a8 <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b22e:	429a      	cmp	r2, r3
 800b230:	d302      	bcc.n	800b238 <UART_WaitOnFlagUntilTimeout+0x32>
 800b232:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b234:	2b00      	cmp	r3, #0
 800b236:	d13f      	bne.n	800b2b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b248:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b24c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b258:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b25c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e6      	bne.n	800b238 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3308      	adds	r3, #8
 800b270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b274:	e853 3f00 	ldrex	r3, [r3]
 800b278:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27c:	f023 0301 	bic.w	r3, r3, #1
 800b280:	663b      	str	r3, [r7, #96]	@ 0x60
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3308      	adds	r3, #8
 800b288:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b28a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b28c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b292:	e841 2300 	strex	r3, r2, [r1]
 800b296:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e5      	bne.n	800b26a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e068      	b.n	800b38a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0304 	and.w	r3, r3, #4
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d050      	beq.n	800b368 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2d4:	d148      	bne.n	800b368 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b2f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b300:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e6      	bne.n	800b2e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3308      	adds	r3, #8
 800b318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	613b      	str	r3, [r7, #16]
   return(result);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f023 0301 	bic.w	r3, r3, #1
 800b328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3308      	adds	r3, #8
 800b330:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b332:	623a      	str	r2, [r7, #32]
 800b334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b336:	69f9      	ldr	r1, [r7, #28]
 800b338:	6a3a      	ldr	r2, [r7, #32]
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e5      	bne.n	800b312 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2220      	movs	r2, #32
 800b34a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2220      	movs	r2, #32
 800b350:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2220      	movs	r2, #32
 800b358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e010      	b.n	800b38a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	69da      	ldr	r2, [r3, #28]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	4013      	ands	r3, r2
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	429a      	cmp	r2, r3
 800b376:	bf0c      	ite	eq
 800b378:	2301      	moveq	r3, #1
 800b37a:	2300      	movne	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	461a      	mov	r2, r3
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	429a      	cmp	r2, r3
 800b384:	f43f af48 	beq.w	800b218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3770      	adds	r7, #112	@ 0x70
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d121      	bne.n	800b3ea <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	4b27      	ldr	r3, [pc, #156]	@ (800b448 <FMC_SDRAM_Init+0xb4>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	6851      	ldr	r1, [r2, #4]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	6892      	ldr	r2, [r2, #8]
 800b3b6:	4311      	orrs	r1, r2
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	68d2      	ldr	r2, [r2, #12]
 800b3bc:	4311      	orrs	r1, r2
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	6912      	ldr	r2, [r2, #16]
 800b3c2:	4311      	orrs	r1, r2
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	6952      	ldr	r2, [r2, #20]
 800b3c8:	4311      	orrs	r1, r2
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	6992      	ldr	r2, [r2, #24]
 800b3ce:	4311      	orrs	r1, r2
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	69d2      	ldr	r2, [r2, #28]
 800b3d4:	4311      	orrs	r1, r2
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	6a12      	ldr	r2, [r2, #32]
 800b3da:	4311      	orrs	r1, r2
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b3e0:	430a      	orrs	r2, r1
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	e026      	b.n	800b438 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	69d9      	ldr	r1, [r3, #28]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	4319      	orrs	r1, r3
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b400:	430b      	orrs	r3, r1
 800b402:	431a      	orrs	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	4b0e      	ldr	r3, [pc, #56]	@ (800b448 <FMC_SDRAM_Init+0xb4>)
 800b40e:	4013      	ands	r3, r2
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	6851      	ldr	r1, [r2, #4]
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	6892      	ldr	r2, [r2, #8]
 800b418:	4311      	orrs	r1, r2
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	68d2      	ldr	r2, [r2, #12]
 800b41e:	4311      	orrs	r1, r2
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	6912      	ldr	r2, [r2, #16]
 800b424:	4311      	orrs	r1, r2
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	6952      	ldr	r2, [r2, #20]
 800b42a:	4311      	orrs	r1, r2
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	6992      	ldr	r2, [r2, #24]
 800b430:	430a      	orrs	r2, r1
 800b432:	431a      	orrs	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	ffff8000 	.word	0xffff8000

0800b44c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d128      	bne.n	800b4b0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	1e59      	subs	r1, r3, #1
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	3b01      	subs	r3, #1
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	4319      	orrs	r1, r3
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	4319      	orrs	r1, r3
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	3b01      	subs	r3, #1
 800b486:	031b      	lsls	r3, r3, #12
 800b488:	4319      	orrs	r1, r3
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	3b01      	subs	r3, #1
 800b490:	041b      	lsls	r3, r3, #16
 800b492:	4319      	orrs	r1, r3
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	3b01      	subs	r3, #1
 800b49a:	051b      	lsls	r3, r3, #20
 800b49c:	4319      	orrs	r1, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	061b      	lsls	r3, r3, #24
 800b4a6:	430b      	orrs	r3, r1
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	609a      	str	r2, [r3, #8]
 800b4ae:	e02d      	b.n	800b50c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	689a      	ldr	r2, [r3, #8]
 800b4b4:	4b19      	ldr	r3, [pc, #100]	@ (800b51c <FMC_SDRAM_Timing_Init+0xd0>)
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	68d2      	ldr	r2, [r2, #12]
 800b4bc:	3a01      	subs	r2, #1
 800b4be:	0311      	lsls	r1, r2, #12
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	6952      	ldr	r2, [r2, #20]
 800b4c4:	3a01      	subs	r2, #1
 800b4c6:	0512      	lsls	r2, r2, #20
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	431a      	orrs	r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	1e59      	subs	r1, r3, #1
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	4319      	orrs	r1, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	4319      	orrs	r1, r3
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	041b      	lsls	r3, r3, #16
 800b4fa:	4319      	orrs	r1, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	3b01      	subs	r3, #1
 800b502:	061b      	lsls	r3, r3, #24
 800b504:	430b      	orrs	r3, r1
 800b506:	431a      	orrs	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3714      	adds	r7, #20
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	ff0f0fff 	.word	0xff0f0fff

0800b520 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	691a      	ldr	r2, [r3, #16]
 800b530:	4b0c      	ldr	r3, [pc, #48]	@ (800b564 <FMC_SDRAM_SendCommand+0x44>)
 800b532:	4013      	ands	r3, r2
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	6811      	ldr	r1, [r2, #0]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	6852      	ldr	r2, [r2, #4]
 800b53c:	4311      	orrs	r1, r2
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	6892      	ldr	r2, [r2, #8]
 800b542:	3a01      	subs	r2, #1
 800b544:	0152      	lsls	r2, r2, #5
 800b546:	4311      	orrs	r1, r2
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	68d2      	ldr	r2, [r2, #12]
 800b54c:	0252      	lsls	r2, r2, #9
 800b54e:	430a      	orrs	r2, r1
 800b550:	431a      	orrs	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	ffc00000 	.word	0xffc00000

0800b568 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695a      	ldr	r2, [r3, #20]
 800b576:	4b07      	ldr	r3, [pc, #28]	@ (800b594 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b578:	4013      	ands	r3, r2
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	0052      	lsls	r2, r2, #1
 800b57e:	431a      	orrs	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	ffffc001 	.word	0xffffc001

0800b598 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b5a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5aa:	2b84      	cmp	r3, #132	@ 0x84
 800b5ac:	d005      	beq.n	800b5ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	3303      	adds	r3, #3
 800b5b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b5cc:	f001 f86c 	bl	800c6a8 <vTaskStartScheduler>
  
  return osOK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b5d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d8:	b089      	sub	sp, #36	@ 0x24
 800b5da:	af04      	add	r7, sp, #16
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d020      	beq.n	800b62a <osThreadCreate+0x54>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01c      	beq.n	800b62a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685c      	ldr	r4, [r3, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	691e      	ldr	r6, [r3, #16]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff ffc8 	bl	800b598 <makeFreeRtosPriority>
 800b608:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b612:	9202      	str	r2, [sp, #8]
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	9100      	str	r1, [sp, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	4632      	mov	r2, r6
 800b61c:	4629      	mov	r1, r5
 800b61e:	4620      	mov	r0, r4
 800b620:	f000 fdcc 	bl	800c1bc <xTaskCreateStatic>
 800b624:	4603      	mov	r3, r0
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	e01c      	b.n	800b664 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685c      	ldr	r4, [r3, #4]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b636:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff ffaa 	bl	800b598 <makeFreeRtosPriority>
 800b644:	4602      	mov	r2, r0
 800b646:	f107 030c 	add.w	r3, r7, #12
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	9200      	str	r2, [sp, #0]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	4632      	mov	r2, r6
 800b652:	4629      	mov	r1, r5
 800b654:	4620      	mov	r0, r4
 800b656:	f000 fe17 	bl	800c288 <xTaskCreate>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d001      	beq.n	800b664 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b660:	2300      	movs	r3, #0
 800b662:	e000      	b.n	800b666 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b664:	68fb      	ldr	r3, [r7, #12]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b66e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d001      	beq.n	800b684 <osDelay+0x16>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	e000      	b.n	800b686 <osDelay+0x18>
 800b684:	2301      	movs	r3, #1
 800b686:	4618      	mov	r0, r3
 800b688:	f000 ffd6 	bl	800c638 <vTaskDelay>
  
  return osOK;
 800b68c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b082      	sub	sp, #8
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d007      	beq.n	800b6b6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	2001      	movs	r0, #1
 800b6ae:	f000 fa46 	bl	800bb3e <xQueueCreateMutexStatic>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	e003      	b.n	800b6be <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	f000 fa29 	bl	800bb0e <xQueueCreateMutex>
 800b6bc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f103 0208 	add.w	r2, r3, #8
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f04f 32ff 	mov.w	r2, #4294967295
 800b6de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f103 0208 	add.w	r2, r3, #8
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f103 0208 	add.w	r2, r3, #8
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	689a      	ldr	r2, [r3, #8]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	601a      	str	r2, [r3, #0]
}
 800b75c:	bf00      	nop
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77e:	d103      	bne.n	800b788 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	e00c      	b.n	800b7a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3308      	adds	r3, #8
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	e002      	b.n	800b796 <vListInsert+0x2e>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d2f6      	bcs.n	800b790 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b085      	sub	sp, #20
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6892      	ldr	r2, [r2, #8]
 800b7f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	6852      	ldr	r2, [r2, #4]
 800b7fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d103      	bne.n	800b80e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689a      	ldr	r2, [r3, #8]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	1e5a      	subs	r2, r3, #1
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
	...

0800b830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10d      	bne.n	800b860 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b848:	b672      	cpsid	i
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	b662      	cpsie	i
 800b858:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b85a:	bf00      	nop
 800b85c:	bf00      	nop
 800b85e:	e7fd      	b.n	800b85c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b860:	f001 febc 	bl	800d5dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b86c:	68f9      	ldr	r1, [r7, #12]
 800b86e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b870:	fb01 f303 	mul.w	r3, r1, r3
 800b874:	441a      	add	r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b890:	3b01      	subs	r3, #1
 800b892:	68f9      	ldr	r1, [r7, #12]
 800b894:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b896:	fb01 f303 	mul.w	r3, r1, r3
 800b89a:	441a      	add	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	22ff      	movs	r2, #255	@ 0xff
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	22ff      	movs	r2, #255	@ 0xff
 800b8ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d114      	bne.n	800b8e0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d01a      	beq.n	800b8f4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3310      	adds	r3, #16
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 f966 	bl	800cb94 <xTaskRemoveFromEventList>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d012      	beq.n	800b8f4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b904 <xQueueGenericReset+0xd4>)
 800b8d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8d4:	601a      	str	r2, [r3, #0]
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	e009      	b.n	800b8f4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	3310      	adds	r3, #16
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff feee 	bl	800b6c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3324      	adds	r3, #36	@ 0x24
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff fee9 	bl	800b6c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8f4:	f001 fea8 	bl	800d648 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8f8:	2301      	movs	r3, #1
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	e000ed04 	.word	0xe000ed04

0800b908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08e      	sub	sp, #56	@ 0x38
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
 800b914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10d      	bne.n	800b938 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b920:	b672      	cpsid	i
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	b662      	cpsie	i
 800b930:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	e7fd      	b.n	800b934 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10d      	bne.n	800b95a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b942:	b672      	cpsid	i
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	b662      	cpsie	i
 800b952:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop
 800b958:	e7fd      	b.n	800b956 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <xQueueGenericCreateStatic+0x5e>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <xQueueGenericCreateStatic+0x62>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <xQueueGenericCreateStatic+0x64>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10d      	bne.n	800b98c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b974:	b672      	cpsid	i
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	b662      	cpsie	i
 800b984:	623b      	str	r3, [r7, #32]
}
 800b986:	bf00      	nop
 800b988:	bf00      	nop
 800b98a:	e7fd      	b.n	800b988 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <xQueueGenericCreateStatic+0x90>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <xQueueGenericCreateStatic+0x94>
 800b998:	2301      	movs	r3, #1
 800b99a:	e000      	b.n	800b99e <xQueueGenericCreateStatic+0x96>
 800b99c:	2300      	movs	r3, #0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10d      	bne.n	800b9be <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a6:	b672      	cpsid	i
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	b662      	cpsie	i
 800b9b6:	61fb      	str	r3, [r7, #28]
}
 800b9b8:	bf00      	nop
 800b9ba:	bf00      	nop
 800b9bc:	e7fd      	b.n	800b9ba <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9be:	2348      	movs	r3, #72	@ 0x48
 800b9c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2b48      	cmp	r3, #72	@ 0x48
 800b9c6:	d00d      	beq.n	800b9e4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9cc:	b672      	cpsid	i
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	b662      	cpsie	i
 800b9dc:	61bb      	str	r3, [r7, #24]
}
 800b9de:	bf00      	nop
 800b9e0:	bf00      	nop
 800b9e2:	e7fd      	b.n	800b9e0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00d      	beq.n	800ba0c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	4613      	mov	r3, r2
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	68b9      	ldr	r1, [r7, #8]
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f000 f848 	bl	800ba9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3730      	adds	r7, #48	@ 0x30
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b08a      	sub	sp, #40	@ 0x28
 800ba1a:	af02      	add	r7, sp, #8
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	4613      	mov	r3, r2
 800ba22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10d      	bne.n	800ba46 <xQueueGenericCreate+0x30>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2e:	b672      	cpsid	i
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	b662      	cpsie	i
 800ba3e:	613b      	str	r3, [r7, #16]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d102      	bne.n	800ba52 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	e004      	b.n	800ba5c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	fb02 f303 	mul.w	r3, r2, r3
 800ba5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	3348      	adds	r3, #72	@ 0x48
 800ba60:	4618      	mov	r0, r3
 800ba62:	f001 fea3 	bl	800d7ac <pvPortMalloc>
 800ba66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d011      	beq.n	800ba92 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	3348      	adds	r3, #72	@ 0x48
 800ba76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba80:	79fa      	ldrb	r2, [r7, #7]
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	4613      	mov	r3, r2
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	68b9      	ldr	r1, [r7, #8]
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f000 f805 	bl	800ba9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba92:	69bb      	ldr	r3, [r7, #24]
	}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3720      	adds	r7, #32
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d103      	bne.n	800bab8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	e002      	b.n	800babe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800baca:	2101      	movs	r1, #1
 800bacc:	69b8      	ldr	r0, [r7, #24]
 800bace:	f7ff feaf 	bl	800b830 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bad2:	bf00      	nop
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00e      	beq.n	800bb06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bafa:	2300      	movs	r3, #0
 800bafc:	2200      	movs	r2, #0
 800bafe:	2100      	movs	r1, #0
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f837 	bl	800bb74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb06:	bf00      	nop
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b086      	sub	sp, #24
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	4603      	mov	r3, r0
 800bb16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bb20:	79fb      	ldrb	r3, [r7, #7]
 800bb22:	461a      	mov	r2, r3
 800bb24:	6939      	ldr	r1, [r7, #16]
 800bb26:	6978      	ldr	r0, [r7, #20]
 800bb28:	f7ff ff75 	bl	800ba16 <xQueueGenericCreate>
 800bb2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f7ff ffd3 	bl	800bada <prvInitialiseMutex>

		return xNewQueue;
 800bb34:	68fb      	ldr	r3, [r7, #12]
	}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b088      	sub	sp, #32
 800bb42:	af02      	add	r7, sp, #8
 800bb44:	4603      	mov	r3, r0
 800bb46:	6039      	str	r1, [r7, #0]
 800bb48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	617b      	str	r3, [r7, #20]
 800bb4e:	2300      	movs	r3, #0
 800bb50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb52:	79fb      	ldrb	r3, [r7, #7]
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	6939      	ldr	r1, [r7, #16]
 800bb5c:	6978      	ldr	r0, [r7, #20]
 800bb5e:	f7ff fed3 	bl	800b908 <xQueueGenericCreateStatic>
 800bb62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7ff ffb8 	bl	800bada <prvInitialiseMutex>

		return xNewQueue;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
	}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3718      	adds	r7, #24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08e      	sub	sp, #56	@ 0x38
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb82:	2300      	movs	r3, #0
 800bb84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10d      	bne.n	800bbac <xQueueGenericSend+0x38>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb94:	b672      	cpsid	i
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	b662      	cpsie	i
 800bba4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	e7fd      	b.n	800bba8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d103      	bne.n	800bbba <xQueueGenericSend+0x46>
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <xQueueGenericSend+0x4a>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e000      	b.n	800bbc0 <xQueueGenericSend+0x4c>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10d      	bne.n	800bbe0 <xQueueGenericSend+0x6c>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc8:	b672      	cpsid	i
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	b662      	cpsie	i
 800bbd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bbda:	bf00      	nop
 800bbdc:	bf00      	nop
 800bbde:	e7fd      	b.n	800bbdc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d103      	bne.n	800bbee <xQueueGenericSend+0x7a>
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <xQueueGenericSend+0x7e>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e000      	b.n	800bbf4 <xQueueGenericSend+0x80>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10d      	bne.n	800bc14 <xQueueGenericSend+0xa0>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfc:	b672      	cpsid	i
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	b662      	cpsie	i
 800bc0c:	623b      	str	r3, [r7, #32]
}
 800bc0e:	bf00      	nop
 800bc10:	bf00      	nop
 800bc12:	e7fd      	b.n	800bc10 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc14:	f001 f98c 	bl	800cf30 <xTaskGetSchedulerState>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d102      	bne.n	800bc24 <xQueueGenericSend+0xb0>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <xQueueGenericSend+0xb4>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <xQueueGenericSend+0xb6>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10d      	bne.n	800bc4a <xQueueGenericSend+0xd6>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	b672      	cpsid	i
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	b662      	cpsie	i
 800bc42:	61fb      	str	r3, [r7, #28]
}
 800bc44:	bf00      	nop
 800bc46:	bf00      	nop
 800bc48:	e7fd      	b.n	800bc46 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc4a:	f001 fcc7 	bl	800d5dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d302      	bcc.n	800bc60 <xQueueGenericSend+0xec>
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d129      	bne.n	800bcb4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	68b9      	ldr	r1, [r7, #8]
 800bc64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc66:	f000 f9bf 	bl	800bfe8 <prvCopyDataToQueue>
 800bc6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d010      	beq.n	800bc96 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc76:	3324      	adds	r3, #36	@ 0x24
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 ff8b 	bl	800cb94 <xTaskRemoveFromEventList>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d013      	beq.n	800bcac <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc84:	4b3f      	ldr	r3, [pc, #252]	@ (800bd84 <xQueueGenericSend+0x210>)
 800bc86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	e00a      	b.n	800bcac <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc9c:	4b39      	ldr	r3, [pc, #228]	@ (800bd84 <xQueueGenericSend+0x210>)
 800bc9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bcac:	f001 fccc 	bl	800d648 <vPortExitCritical>
				return pdPASS;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e063      	b.n	800bd7c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d103      	bne.n	800bcc2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcba:	f001 fcc5 	bl	800d648 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	e05c      	b.n	800bd7c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcc8:	f107 0314 	add.w	r3, r7, #20
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 ffc7 	bl	800cc60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcd6:	f001 fcb7 	bl	800d648 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcda:	f000 fd53 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcde:	f001 fc7d 	bl	800d5dc <vPortEnterCritical>
 800bce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bce8:	b25b      	sxtb	r3, r3
 800bcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcee:	d103      	bne.n	800bcf8 <xQueueGenericSend+0x184>
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcfe:	b25b      	sxtb	r3, r3
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d103      	bne.n	800bd0e <xQueueGenericSend+0x19a>
 800bd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd0e:	f001 fc9b 	bl	800d648 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd12:	1d3a      	adds	r2, r7, #4
 800bd14:	f107 0314 	add.w	r3, r7, #20
 800bd18:	4611      	mov	r1, r2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 ffb6 	bl	800cc8c <xTaskCheckForTimeOut>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d124      	bne.n	800bd70 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd28:	f000 fa30 	bl	800c18c <prvIsQueueFull>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d018      	beq.n	800bd64 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	3310      	adds	r3, #16
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 ff02 	bl	800cb44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd42:	f000 f9bb 	bl	800c0bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd46:	f000 fd2b 	bl	800c7a0 <xTaskResumeAll>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f47f af7c 	bne.w	800bc4a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800bd52:	4b0c      	ldr	r3, [pc, #48]	@ (800bd84 <xQueueGenericSend+0x210>)
 800bd54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	e772      	b.n	800bc4a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd66:	f000 f9a9 	bl	800c0bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd6a:	f000 fd19 	bl	800c7a0 <xTaskResumeAll>
 800bd6e:	e76c      	b.n	800bc4a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd72:	f000 f9a3 	bl	800c0bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd76:	f000 fd13 	bl	800c7a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3738      	adds	r7, #56	@ 0x38
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	e000ed04 	.word	0xe000ed04

0800bd88 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08e      	sub	sp, #56	@ 0x38
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd92:	2300      	movs	r3, #0
 800bd94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10d      	bne.n	800bdc0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda8:	b672      	cpsid	i
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	b662      	cpsie	i
 800bdb8:	623b      	str	r3, [r7, #32]
}
 800bdba:	bf00      	nop
 800bdbc:	bf00      	nop
 800bdbe:	e7fd      	b.n	800bdbc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00d      	beq.n	800bde4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdcc:	b672      	cpsid	i
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	b662      	cpsie	i
 800bddc:	61fb      	str	r3, [r7, #28]
}
 800bdde:	bf00      	nop
 800bde0:	bf00      	nop
 800bde2:	e7fd      	b.n	800bde0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bde4:	f001 f8a4 	bl	800cf30 <xTaskGetSchedulerState>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d102      	bne.n	800bdf4 <xQueueSemaphoreTake+0x6c>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d101      	bne.n	800bdf8 <xQueueSemaphoreTake+0x70>
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e000      	b.n	800bdfa <xQueueSemaphoreTake+0x72>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10d      	bne.n	800be1a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be02:	b672      	cpsid	i
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	b662      	cpsie	i
 800be12:	61bb      	str	r3, [r7, #24]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be1a:	f001 fbdf 	bl	800d5dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	2b00      	cmp	r3, #0
 800be28:	d024      	beq.n	800be74 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d104      	bne.n	800be44 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be3a:	f001 fa43 	bl	800d2c4 <pvTaskIncrementMutexHeldCount>
 800be3e:	4602      	mov	r2, r0
 800be40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00f      	beq.n	800be6c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4e:	3310      	adds	r3, #16
 800be50:	4618      	mov	r0, r3
 800be52:	f000 fe9f 	bl	800cb94 <xTaskRemoveFromEventList>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d007      	beq.n	800be6c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be5c:	4b55      	ldr	r3, [pc, #340]	@ (800bfb4 <xQueueSemaphoreTake+0x22c>)
 800be5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be6c:	f001 fbec 	bl	800d648 <vPortExitCritical>
				return pdPASS;
 800be70:	2301      	movs	r3, #1
 800be72:	e09a      	b.n	800bfaa <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d114      	bne.n	800bea4 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00d      	beq.n	800be9c <xQueueSemaphoreTake+0x114>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be84:	b672      	cpsid	i
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	b662      	cpsie	i
 800be94:	617b      	str	r3, [r7, #20]
}
 800be96:	bf00      	nop
 800be98:	bf00      	nop
 800be9a:	e7fd      	b.n	800be98 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be9c:	f001 fbd4 	bl	800d648 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e082      	b.n	800bfaa <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 fed6 	bl	800cc60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800beb4:	2301      	movs	r3, #1
 800beb6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800beb8:	f001 fbc6 	bl	800d648 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bebc:	f000 fc62 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bec0:	f001 fb8c 	bl	800d5dc <vPortEnterCritical>
 800bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800beca:	b25b      	sxtb	r3, r3
 800becc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed0:	d103      	bne.n	800beda <xQueueSemaphoreTake+0x152>
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800beda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bedc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bee0:	b25b      	sxtb	r3, r3
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d103      	bne.n	800bef0 <xQueueSemaphoreTake+0x168>
 800bee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bef0:	f001 fbaa 	bl	800d648 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bef4:	463a      	mov	r2, r7
 800bef6:	f107 030c 	add.w	r3, r7, #12
 800befa:	4611      	mov	r1, r2
 800befc:	4618      	mov	r0, r3
 800befe:	f000 fec5 	bl	800cc8c <xTaskCheckForTimeOut>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d132      	bne.n	800bf6e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf0a:	f000 f929 	bl	800c160 <prvIsQueueEmpty>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d026      	beq.n	800bf62 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d109      	bne.n	800bf30 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800bf1c:	f001 fb5e 	bl	800d5dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f001 f821 	bl	800cf6c <xTaskPriorityInherit>
 800bf2a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bf2c:	f001 fb8c 	bl	800d648 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf32:	3324      	adds	r3, #36	@ 0x24
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	4611      	mov	r1, r2
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fe03 	bl	800cb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf40:	f000 f8bc 	bl	800c0bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf44:	f000 fc2c 	bl	800c7a0 <xTaskResumeAll>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f47f af65 	bne.w	800be1a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800bf50:	4b18      	ldr	r3, [pc, #96]	@ (800bfb4 <xQueueSemaphoreTake+0x22c>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	e75b      	b.n	800be1a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf64:	f000 f8aa 	bl	800c0bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf68:	f000 fc1a 	bl	800c7a0 <xTaskResumeAll>
 800bf6c:	e755      	b.n	800be1a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf70:	f000 f8a4 	bl	800c0bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf74:	f000 fc14 	bl	800c7a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf7a:	f000 f8f1 	bl	800c160 <prvIsQueueEmpty>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f43f af4a 	beq.w	800be1a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00d      	beq.n	800bfa8 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800bf8c:	f001 fb26 	bl	800d5dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf92:	f000 f811 	bl	800bfb8 <prvGetDisinheritPriorityAfterTimeout>
 800bf96:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bf98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f001 f8f0 	bl	800d184 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bfa4:	f001 fb50 	bl	800d648 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bfa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3738      	adds	r7, #56	@ 0x38
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d006      	beq.n	800bfd6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1c3 0307 	rsb	r3, r3, #7
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e001      	b.n	800bfda <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bfda:	68fb      	ldr	r3, [r7, #12]
	}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bff4:	2300      	movs	r3, #0
 800bff6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bffc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10d      	bne.n	800c022 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d14d      	bne.n	800c0aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	4618      	mov	r0, r3
 800c014:	f001 f82a 	bl	800d06c <xTaskPriorityDisinherit>
 800c018:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	609a      	str	r2, [r3, #8]
 800c020:	e043      	b.n	800c0aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d119      	bne.n	800c05c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6858      	ldr	r0, [r3, #4]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c030:	461a      	mov	r2, r3
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	f001 ffd9 	bl	800dfea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c040:	441a      	add	r2, r3
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d32b      	bcc.n	800c0aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	605a      	str	r2, [r3, #4]
 800c05a:	e026      	b.n	800c0aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	68d8      	ldr	r0, [r3, #12]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c064:	461a      	mov	r2, r3
 800c066:	68b9      	ldr	r1, [r7, #8]
 800c068:	f001 ffbf 	bl	800dfea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	68da      	ldr	r2, [r3, #12]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c074:	425b      	negs	r3, r3
 800c076:	441a      	add	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	68da      	ldr	r2, [r3, #12]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d207      	bcs.n	800c098 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	689a      	ldr	r2, [r3, #8]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c090:	425b      	negs	r3, r3
 800c092:	441a      	add	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d105      	bne.n	800c0aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	1c5a      	adds	r2, r3, #1
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c0b2:	697b      	ldr	r3, [r7, #20]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c0c4:	f001 fa8a 	bl	800d5dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0d0:	e011      	b.n	800c0f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d012      	beq.n	800c100 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	3324      	adds	r3, #36	@ 0x24
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 fd58 	bl	800cb94 <xTaskRemoveFromEventList>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c0ea:	f000 fe37 	bl	800cd5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dce9      	bgt.n	800c0d2 <prvUnlockQueue+0x16>
 800c0fe:	e000      	b.n	800c102 <prvUnlockQueue+0x46>
					break;
 800c100:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	22ff      	movs	r2, #255	@ 0xff
 800c106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c10a:	f001 fa9d 	bl	800d648 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c10e:	f001 fa65 	bl	800d5dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c118:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c11a:	e011      	b.n	800c140 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d012      	beq.n	800c14a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3310      	adds	r3, #16
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fd33 	bl	800cb94 <xTaskRemoveFromEventList>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c134:	f000 fe12 	bl	800cd5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c138:	7bbb      	ldrb	r3, [r7, #14]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c144:	2b00      	cmp	r3, #0
 800c146:	dce9      	bgt.n	800c11c <prvUnlockQueue+0x60>
 800c148:	e000      	b.n	800c14c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c14a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	22ff      	movs	r2, #255	@ 0xff
 800c150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c154:	f001 fa78 	bl	800d648 <vPortExitCritical>
}
 800c158:	bf00      	nop
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c168:	f001 fa38 	bl	800d5dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c170:	2b00      	cmp	r3, #0
 800c172:	d102      	bne.n	800c17a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c174:	2301      	movs	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	e001      	b.n	800c17e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c17e:	f001 fa63 	bl	800d648 <vPortExitCritical>

	return xReturn;
 800c182:	68fb      	ldr	r3, [r7, #12]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c194:	f001 fa22 	bl	800d5dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d102      	bne.n	800c1aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	e001      	b.n	800c1ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1ae:	f001 fa4b 	bl	800d648 <vPortExitCritical>

	return xReturn;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08e      	sub	sp, #56	@ 0x38
 800c1c0:	af04      	add	r7, sp, #16
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10d      	bne.n	800c1ec <xTaskCreateStatic+0x30>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d4:	b672      	cpsid	i
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	b662      	cpsie	i
 800c1e4:	623b      	str	r3, [r7, #32]
}
 800c1e6:	bf00      	nop
 800c1e8:	bf00      	nop
 800c1ea:	e7fd      	b.n	800c1e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10d      	bne.n	800c20e <xTaskCreateStatic+0x52>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f6:	b672      	cpsid	i
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	b662      	cpsie	i
 800c206:	61fb      	str	r3, [r7, #28]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c20e:	23a0      	movs	r3, #160	@ 0xa0
 800c210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2ba0      	cmp	r3, #160	@ 0xa0
 800c216:	d00d      	beq.n	800c234 <xTaskCreateStatic+0x78>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21c:	b672      	cpsid	i
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	b662      	cpsie	i
 800c22c:	61bb      	str	r3, [r7, #24]
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	e7fd      	b.n	800c230 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c234:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01e      	beq.n	800c27a <xTaskCreateStatic+0xbe>
 800c23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d01b      	beq.n	800c27a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c244:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c24a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24e:	2202      	movs	r2, #2
 800c250:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c254:	2300      	movs	r3, #0
 800c256:	9303      	str	r3, [sp, #12]
 800c258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25a:	9302      	str	r3, [sp, #8]
 800c25c:	f107 0314 	add.w	r3, r7, #20
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f851 	bl	800c314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c274:	f000 f8f0 	bl	800c458 <prvAddNewTaskToReadyList>
 800c278:	e001      	b.n	800c27e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c27e:	697b      	ldr	r3, [r7, #20]
	}
 800c280:	4618      	mov	r0, r3
 800c282:	3728      	adds	r7, #40	@ 0x28
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08c      	sub	sp, #48	@ 0x30
 800c28c:	af04      	add	r7, sp, #16
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	4613      	mov	r3, r2
 800c296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c298:	88fb      	ldrh	r3, [r7, #6]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 fa85 	bl	800d7ac <pvPortMalloc>
 800c2a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00e      	beq.n	800c2c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2aa:	20a0      	movs	r0, #160	@ 0xa0
 800c2ac:	f001 fa7e 	bl	800d7ac <pvPortMalloc>
 800c2b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2be:	e005      	b.n	800c2cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2c0:	6978      	ldr	r0, [r7, #20]
 800c2c2:	f001 fb41 	bl	800d948 <vPortFree>
 800c2c6:	e001      	b.n	800c2cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d017      	beq.n	800c302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2da:	88fa      	ldrh	r2, [r7, #6]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9303      	str	r3, [sp, #12]
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	9302      	str	r3, [sp, #8]
 800c2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	68b9      	ldr	r1, [r7, #8]
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f000 f80f 	bl	800c314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2f6:	69f8      	ldr	r0, [r7, #28]
 800c2f8:	f000 f8ae 	bl	800c458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	e002      	b.n	800c308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c302:	f04f 33ff 	mov.w	r3, #4294967295
 800c306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c308:	69bb      	ldr	r3, [r7, #24]
	}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c326:	6879      	ldr	r1, [r7, #4]
 800c328:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c32c:	440b      	add	r3, r1
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	f023 0307 	bic.w	r3, r3, #7
 800c33a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00d      	beq.n	800c362 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	b672      	cpsid	i
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	b662      	cpsie	i
 800c35a:	617b      	str	r3, [r7, #20]
}
 800c35c:	bf00      	nop
 800c35e:	bf00      	nop
 800c360:	e7fd      	b.n	800c35e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d01f      	beq.n	800c3a8 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c368:	2300      	movs	r3, #0
 800c36a:	61fb      	str	r3, [r7, #28]
 800c36c:	e012      	b.n	800c394 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	4413      	add	r3, r2
 800c374:	7819      	ldrb	r1, [r3, #0]
 800c376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	4413      	add	r3, r2
 800c37c:	3334      	adds	r3, #52	@ 0x34
 800c37e:	460a      	mov	r2, r1
 800c380:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	4413      	add	r3, r2
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d006      	beq.n	800c39c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	3301      	adds	r3, #1
 800c392:	61fb      	str	r3, [r7, #28]
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	2b0f      	cmp	r3, #15
 800c398:	d9e9      	bls.n	800c36e <prvInitialiseNewTask+0x5a>
 800c39a:	e000      	b.n	800c39e <prvInitialiseNewTask+0x8a>
			{
				break;
 800c39c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c3a6:	e003      	b.n	800c3b0 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b2:	2b06      	cmp	r3, #6
 800c3b4:	d901      	bls.n	800c3ba <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3b6:	2306      	movs	r3, #6
 800c3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff f998 	bl	800b706 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	3318      	adds	r3, #24
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff f993 	bl	800b706 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e8:	f1c3 0207 	rsb	r2, r3, #7
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c400:	2200      	movs	r2, #0
 800c402:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	334c      	adds	r3, #76	@ 0x4c
 800c40a:	224c      	movs	r2, #76	@ 0x4c
 800c40c:	2100      	movs	r1, #0
 800c40e:	4618      	mov	r0, r3
 800c410:	f001 fd19 	bl	800de46 <memset>
 800c414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c416:	4a0d      	ldr	r2, [pc, #52]	@ (800c44c <prvInitialiseNewTask+0x138>)
 800c418:	651a      	str	r2, [r3, #80]	@ 0x50
 800c41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c41c:	4a0c      	ldr	r2, [pc, #48]	@ (800c450 <prvInitialiseNewTask+0x13c>)
 800c41e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c422:	4a0c      	ldr	r2, [pc, #48]	@ (800c454 <prvInitialiseNewTask+0x140>)
 800c424:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	68f9      	ldr	r1, [r7, #12]
 800c42a:	69b8      	ldr	r0, [r7, #24]
 800c42c:	f000 ffc4 	bl	800d3b8 <pxPortInitialiseStack>
 800c430:	4602      	mov	r2, r0
 800c432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c442:	bf00      	nop
 800c444:	3720      	adds	r7, #32
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	20004bd8 	.word	0x20004bd8
 800c450:	20004c40 	.word	0x20004c40
 800c454:	20004ca8 	.word	0x20004ca8

0800c458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c460:	f001 f8bc 	bl	800d5dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c464:	4b2a      	ldr	r3, [pc, #168]	@ (800c510 <prvAddNewTaskToReadyList+0xb8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3301      	adds	r3, #1
 800c46a:	4a29      	ldr	r2, [pc, #164]	@ (800c510 <prvAddNewTaskToReadyList+0xb8>)
 800c46c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c46e:	4b29      	ldr	r3, [pc, #164]	@ (800c514 <prvAddNewTaskToReadyList+0xbc>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c476:	4a27      	ldr	r2, [pc, #156]	@ (800c514 <prvAddNewTaskToReadyList+0xbc>)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c47c:	4b24      	ldr	r3, [pc, #144]	@ (800c510 <prvAddNewTaskToReadyList+0xb8>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d110      	bne.n	800c4a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c484:	f000 fc8e 	bl	800cda4 <prvInitialiseTaskLists>
 800c488:	e00d      	b.n	800c4a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c48a:	4b23      	ldr	r3, [pc, #140]	@ (800c518 <prvAddNewTaskToReadyList+0xc0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d109      	bne.n	800c4a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c492:	4b20      	ldr	r3, [pc, #128]	@ (800c514 <prvAddNewTaskToReadyList+0xbc>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d802      	bhi.n	800c4a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4a0:	4a1c      	ldr	r2, [pc, #112]	@ (800c514 <prvAddNewTaskToReadyList+0xbc>)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4a6:	4b1d      	ldr	r3, [pc, #116]	@ (800c51c <prvAddNewTaskToReadyList+0xc4>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800c51c <prvAddNewTaskToReadyList+0xc4>)
 800c4ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	409a      	lsls	r2, r3
 800c4b8:	4b19      	ldr	r3, [pc, #100]	@ (800c520 <prvAddNewTaskToReadyList+0xc8>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	4a18      	ldr	r2, [pc, #96]	@ (800c520 <prvAddNewTaskToReadyList+0xc8>)
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4a15      	ldr	r2, [pc, #84]	@ (800c524 <prvAddNewTaskToReadyList+0xcc>)
 800c4d0:	441a      	add	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4610      	mov	r0, r2
 800c4da:	f7ff f921 	bl	800b720 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4de:	f001 f8b3 	bl	800d648 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c518 <prvAddNewTaskToReadyList+0xc0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00e      	beq.n	800c508 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c514 <prvAddNewTaskToReadyList+0xbc>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d207      	bcs.n	800c508 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c528 <prvAddNewTaskToReadyList+0xd0>)
 800c4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4fe:	601a      	str	r2, [r3, #0]
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20000f8c 	.word	0x20000f8c
 800c514:	20000e8c 	.word	0x20000e8c
 800c518:	20000f98 	.word	0x20000f98
 800c51c:	20000fa8 	.word	0x20000fa8
 800c520:	20000f94 	.word	0x20000f94
 800c524:	20000e90 	.word	0x20000e90
 800c528:	e000ed04 	.word	0xe000ed04

0800c52c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b08a      	sub	sp, #40	@ 0x28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c536:	2300      	movs	r3, #0
 800c538:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10d      	bne.n	800c55c <vTaskDelayUntil+0x30>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	b672      	cpsid	i
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	b662      	cpsie	i
 800c554:	617b      	str	r3, [r7, #20]
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	e7fd      	b.n	800c558 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10d      	bne.n	800c57e <vTaskDelayUntil+0x52>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	b672      	cpsid	i
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	b662      	cpsie	i
 800c576:	613b      	str	r3, [r7, #16]
}
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	e7fd      	b.n	800c57a <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800c57e:	4b2b      	ldr	r3, [pc, #172]	@ (800c62c <vTaskDelayUntil+0x100>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00d      	beq.n	800c5a2 <vTaskDelayUntil+0x76>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58a:	b672      	cpsid	i
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	b662      	cpsie	i
 800c59a:	60fb      	str	r3, [r7, #12]
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	e7fd      	b.n	800c59e <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800c5a2:	f000 f8ef 	bl	800c784 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c5a6:	4b22      	ldr	r3, [pc, #136]	@ (800c630 <vTaskDelayUntil+0x104>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	6a3a      	ldr	r2, [r7, #32]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d20b      	bcs.n	800c5d8 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	69fa      	ldr	r2, [r7, #28]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d211      	bcs.n	800c5ee <vTaskDelayUntil+0xc2>
 800c5ca:	69fa      	ldr	r2, [r7, #28]
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d90d      	bls.n	800c5ee <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5d6:	e00a      	b.n	800c5ee <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	69fa      	ldr	r2, [r7, #28]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d303      	bcc.n	800c5ea <vTaskDelayUntil+0xbe>
 800c5e2:	69fa      	ldr	r2, [r7, #28]
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d901      	bls.n	800c5ee <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	69fa      	ldr	r2, [r7, #28]
 800c5f2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d006      	beq.n	800c608 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c5fa:	69fa      	ldr	r2, [r7, #28]
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	2100      	movs	r1, #0
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fe72 	bl	800d2ec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c608:	f000 f8ca 	bl	800c7a0 <xTaskResumeAll>
 800c60c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d107      	bne.n	800c624 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800c614:	4b07      	ldr	r3, [pc, #28]	@ (800c634 <vTaskDelayUntil+0x108>)
 800c616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c624:	bf00      	nop
 800c626:	3728      	adds	r7, #40	@ 0x28
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	20000fb4 	.word	0x20000fb4
 800c630:	20000f90 	.word	0x20000f90
 800c634:	e000ed04 	.word	0xe000ed04

0800c638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c640:	2300      	movs	r3, #0
 800c642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d01a      	beq.n	800c680 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c64a:	4b15      	ldr	r3, [pc, #84]	@ (800c6a0 <vTaskDelay+0x68>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00d      	beq.n	800c66e <vTaskDelay+0x36>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	b672      	cpsid	i
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	b662      	cpsie	i
 800c666:	60bb      	str	r3, [r7, #8]
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	e7fd      	b.n	800c66a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c66e:	f000 f889 	bl	800c784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c672:	2100      	movs	r1, #0
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fe39 	bl	800d2ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c67a:	f000 f891 	bl	800c7a0 <xTaskResumeAll>
 800c67e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d107      	bne.n	800c696 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c686:	4b07      	ldr	r3, [pc, #28]	@ (800c6a4 <vTaskDelay+0x6c>)
 800c688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c696:	bf00      	nop
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20000fb4 	.word	0x20000fb4
 800c6a4:	e000ed04 	.word	0xe000ed04

0800c6a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08a      	sub	sp, #40	@ 0x28
 800c6ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6b6:	463a      	mov	r2, r7
 800c6b8:	1d39      	adds	r1, r7, #4
 800c6ba:	f107 0308 	add.w	r3, r7, #8
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f4 fa34 	bl	8000b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	9202      	str	r2, [sp, #8]
 800c6cc:	9301      	str	r3, [sp, #4]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	460a      	mov	r2, r1
 800c6d6:	4923      	ldr	r1, [pc, #140]	@ (800c764 <vTaskStartScheduler+0xbc>)
 800c6d8:	4823      	ldr	r0, [pc, #140]	@ (800c768 <vTaskStartScheduler+0xc0>)
 800c6da:	f7ff fd6f 	bl	800c1bc <xTaskCreateStatic>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	4a22      	ldr	r2, [pc, #136]	@ (800c76c <vTaskStartScheduler+0xc4>)
 800c6e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6e4:	4b21      	ldr	r3, [pc, #132]	@ (800c76c <vTaskStartScheduler+0xc4>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	e001      	b.n	800c6f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d11d      	bne.n	800c738 <vTaskStartScheduler+0x90>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c700:	b672      	cpsid	i
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	b662      	cpsie	i
 800c710:	613b      	str	r3, [r7, #16]
}
 800c712:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c714:	4b16      	ldr	r3, [pc, #88]	@ (800c770 <vTaskStartScheduler+0xc8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	334c      	adds	r3, #76	@ 0x4c
 800c71a:	4a16      	ldr	r2, [pc, #88]	@ (800c774 <vTaskStartScheduler+0xcc>)
 800c71c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c71e:	4b16      	ldr	r3, [pc, #88]	@ (800c778 <vTaskStartScheduler+0xd0>)
 800c720:	f04f 32ff 	mov.w	r2, #4294967295
 800c724:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c726:	4b15      	ldr	r3, [pc, #84]	@ (800c77c <vTaskStartScheduler+0xd4>)
 800c728:	2201      	movs	r2, #1
 800c72a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c72c:	4b14      	ldr	r3, [pc, #80]	@ (800c780 <vTaskStartScheduler+0xd8>)
 800c72e:	2200      	movs	r2, #0
 800c730:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c732:	f000 fed5 	bl	800d4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c736:	e011      	b.n	800c75c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73e:	d10d      	bne.n	800c75c <vTaskStartScheduler+0xb4>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c744:	b672      	cpsid	i
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	b662      	cpsie	i
 800c754:	60fb      	str	r3, [r7, #12]
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	e7fd      	b.n	800c758 <vTaskStartScheduler+0xb0>
}
 800c75c:	bf00      	nop
 800c75e:	3718      	adds	r7, #24
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	0800f154 	.word	0x0800f154
 800c768:	0800cd75 	.word	0x0800cd75
 800c76c:	20000fb0 	.word	0x20000fb0
 800c770:	20000e8c 	.word	0x20000e8c
 800c774:	20000064 	.word	0x20000064
 800c778:	20000fac 	.word	0x20000fac
 800c77c:	20000f98 	.word	0x20000f98
 800c780:	20000f90 	.word	0x20000f90

0800c784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c784:	b480      	push	{r7}
 800c786:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c788:	4b04      	ldr	r3, [pc, #16]	@ (800c79c <vTaskSuspendAll+0x18>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3301      	adds	r3, #1
 800c78e:	4a03      	ldr	r2, [pc, #12]	@ (800c79c <vTaskSuspendAll+0x18>)
 800c790:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c792:	bf00      	nop
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	20000fb4 	.word	0x20000fb4

0800c7a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ae:	4b43      	ldr	r3, [pc, #268]	@ (800c8bc <xTaskResumeAll+0x11c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10d      	bne.n	800c7d2 <xTaskResumeAll+0x32>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ba:	b672      	cpsid	i
 800c7bc:	f383 8811 	msr	BASEPRI, r3
 800c7c0:	f3bf 8f6f 	isb	sy
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	b662      	cpsie	i
 800c7ca:	603b      	str	r3, [r7, #0]
}
 800c7cc:	bf00      	nop
 800c7ce:	bf00      	nop
 800c7d0:	e7fd      	b.n	800c7ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c7d2:	f000 ff03 	bl	800d5dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c7d6:	4b39      	ldr	r3, [pc, #228]	@ (800c8bc <xTaskResumeAll+0x11c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	4a37      	ldr	r2, [pc, #220]	@ (800c8bc <xTaskResumeAll+0x11c>)
 800c7de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7e0:	4b36      	ldr	r3, [pc, #216]	@ (800c8bc <xTaskResumeAll+0x11c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d161      	bne.n	800c8ac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c7e8:	4b35      	ldr	r3, [pc, #212]	@ (800c8c0 <xTaskResumeAll+0x120>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d05d      	beq.n	800c8ac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7f0:	e02e      	b.n	800c850 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f2:	4b34      	ldr	r3, [pc, #208]	@ (800c8c4 <xTaskResumeAll+0x124>)
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3318      	adds	r3, #24
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe ffeb 	bl	800b7da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	3304      	adds	r3, #4
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fe ffe6 	bl	800b7da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c812:	2201      	movs	r2, #1
 800c814:	409a      	lsls	r2, r3
 800c816:	4b2c      	ldr	r3, [pc, #176]	@ (800c8c8 <xTaskResumeAll+0x128>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	4a2a      	ldr	r2, [pc, #168]	@ (800c8c8 <xTaskResumeAll+0x128>)
 800c81e:	6013      	str	r3, [r2, #0]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c824:	4613      	mov	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4a27      	ldr	r2, [pc, #156]	@ (800c8cc <xTaskResumeAll+0x12c>)
 800c82e:	441a      	add	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3304      	adds	r3, #4
 800c834:	4619      	mov	r1, r3
 800c836:	4610      	mov	r0, r2
 800c838:	f7fe ff72 	bl	800b720 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c840:	4b23      	ldr	r3, [pc, #140]	@ (800c8d0 <xTaskResumeAll+0x130>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c846:	429a      	cmp	r2, r3
 800c848:	d302      	bcc.n	800c850 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c84a:	4b22      	ldr	r3, [pc, #136]	@ (800c8d4 <xTaskResumeAll+0x134>)
 800c84c:	2201      	movs	r2, #1
 800c84e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c850:	4b1c      	ldr	r3, [pc, #112]	@ (800c8c4 <xTaskResumeAll+0x124>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1cc      	bne.n	800c7f2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c85e:	f000 fb47 	bl	800cef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c862:	4b1d      	ldr	r3, [pc, #116]	@ (800c8d8 <xTaskResumeAll+0x138>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d010      	beq.n	800c890 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c86e:	f000 f847 	bl	800c900 <xTaskIncrementTick>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c878:	4b16      	ldr	r3, [pc, #88]	@ (800c8d4 <xTaskResumeAll+0x134>)
 800c87a:	2201      	movs	r2, #1
 800c87c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3b01      	subs	r3, #1
 800c882:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f1      	bne.n	800c86e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c88a:	4b13      	ldr	r3, [pc, #76]	@ (800c8d8 <xTaskResumeAll+0x138>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c890:	4b10      	ldr	r3, [pc, #64]	@ (800c8d4 <xTaskResumeAll+0x134>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d009      	beq.n	800c8ac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c898:	2301      	movs	r3, #1
 800c89a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c89c:	4b0f      	ldr	r3, [pc, #60]	@ (800c8dc <xTaskResumeAll+0x13c>)
 800c89e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8ac:	f000 fecc 	bl	800d648 <vPortExitCritical>

	return xAlreadyYielded;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20000fb4 	.word	0x20000fb4
 800c8c0:	20000f8c 	.word	0x20000f8c
 800c8c4:	20000f4c 	.word	0x20000f4c
 800c8c8:	20000f94 	.word	0x20000f94
 800c8cc:	20000e90 	.word	0x20000e90
 800c8d0:	20000e8c 	.word	0x20000e8c
 800c8d4:	20000fa0 	.word	0x20000fa0
 800c8d8:	20000f9c 	.word	0x20000f9c
 800c8dc:	e000ed04 	.word	0xe000ed04

0800c8e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8e6:	4b05      	ldr	r3, [pc, #20]	@ (800c8fc <xTaskGetTickCount+0x1c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8ec:	687b      	ldr	r3, [r7, #4]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	20000f90 	.word	0x20000f90

0800c900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c906:	2300      	movs	r3, #0
 800c908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c90a:	4b50      	ldr	r3, [pc, #320]	@ (800ca4c <xTaskIncrementTick+0x14c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f040 808b 	bne.w	800ca2a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c914:	4b4e      	ldr	r3, [pc, #312]	@ (800ca50 <xTaskIncrementTick+0x150>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	3301      	adds	r3, #1
 800c91a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c91c:	4a4c      	ldr	r2, [pc, #304]	@ (800ca50 <xTaskIncrementTick+0x150>)
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d123      	bne.n	800c970 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c928:	4b4a      	ldr	r3, [pc, #296]	@ (800ca54 <xTaskIncrementTick+0x154>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00d      	beq.n	800c94e <xTaskIncrementTick+0x4e>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c936:	b672      	cpsid	i
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	b662      	cpsie	i
 800c946:	603b      	str	r3, [r7, #0]
}
 800c948:	bf00      	nop
 800c94a:	bf00      	nop
 800c94c:	e7fd      	b.n	800c94a <xTaskIncrementTick+0x4a>
 800c94e:	4b41      	ldr	r3, [pc, #260]	@ (800ca54 <xTaskIncrementTick+0x154>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	60fb      	str	r3, [r7, #12]
 800c954:	4b40      	ldr	r3, [pc, #256]	@ (800ca58 <xTaskIncrementTick+0x158>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a3e      	ldr	r2, [pc, #248]	@ (800ca54 <xTaskIncrementTick+0x154>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	4a3e      	ldr	r2, [pc, #248]	@ (800ca58 <xTaskIncrementTick+0x158>)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	4b3e      	ldr	r3, [pc, #248]	@ (800ca5c <xTaskIncrementTick+0x15c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	3301      	adds	r3, #1
 800c968:	4a3c      	ldr	r2, [pc, #240]	@ (800ca5c <xTaskIncrementTick+0x15c>)
 800c96a:	6013      	str	r3, [r2, #0]
 800c96c:	f000 fac0 	bl	800cef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c970:	4b3b      	ldr	r3, [pc, #236]	@ (800ca60 <xTaskIncrementTick+0x160>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	429a      	cmp	r2, r3
 800c978:	d348      	bcc.n	800ca0c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c97a:	4b36      	ldr	r3, [pc, #216]	@ (800ca54 <xTaskIncrementTick+0x154>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d104      	bne.n	800c98e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c984:	4b36      	ldr	r3, [pc, #216]	@ (800ca60 <xTaskIncrementTick+0x160>)
 800c986:	f04f 32ff 	mov.w	r2, #4294967295
 800c98a:	601a      	str	r2, [r3, #0]
					break;
 800c98c:	e03e      	b.n	800ca0c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c98e:	4b31      	ldr	r3, [pc, #196]	@ (800ca54 <xTaskIncrementTick+0x154>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c99e:	693a      	ldr	r2, [r7, #16]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d203      	bcs.n	800c9ae <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9a6:	4a2e      	ldr	r2, [pc, #184]	@ (800ca60 <xTaskIncrementTick+0x160>)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9ac:	e02e      	b.n	800ca0c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe ff11 	bl	800b7da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	3318      	adds	r3, #24
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fe ff08 	bl	800b7da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	409a      	lsls	r2, r3
 800c9d2:	4b24      	ldr	r3, [pc, #144]	@ (800ca64 <xTaskIncrementTick+0x164>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	4a22      	ldr	r2, [pc, #136]	@ (800ca64 <xTaskIncrementTick+0x164>)
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4a1f      	ldr	r2, [pc, #124]	@ (800ca68 <xTaskIncrementTick+0x168>)
 800c9ea:	441a      	add	r2, r3
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	f7fe fe94 	bl	800b720 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9fc:	4b1b      	ldr	r3, [pc, #108]	@ (800ca6c <xTaskIncrementTick+0x16c>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d3b9      	bcc.n	800c97a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ca06:	2301      	movs	r3, #1
 800ca08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca0a:	e7b6      	b.n	800c97a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca0c:	4b17      	ldr	r3, [pc, #92]	@ (800ca6c <xTaskIncrementTick+0x16c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca12:	4915      	ldr	r1, [pc, #84]	@ (800ca68 <xTaskIncrementTick+0x168>)
 800ca14:	4613      	mov	r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4413      	add	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	440b      	add	r3, r1
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d907      	bls.n	800ca34 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ca24:	2301      	movs	r3, #1
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	e004      	b.n	800ca34 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ca2a:	4b11      	ldr	r3, [pc, #68]	@ (800ca70 <xTaskIncrementTick+0x170>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	4a0f      	ldr	r2, [pc, #60]	@ (800ca70 <xTaskIncrementTick+0x170>)
 800ca32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ca34:	4b0f      	ldr	r3, [pc, #60]	@ (800ca74 <xTaskIncrementTick+0x174>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ca40:	697b      	ldr	r3, [r7, #20]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	20000fb4 	.word	0x20000fb4
 800ca50:	20000f90 	.word	0x20000f90
 800ca54:	20000f44 	.word	0x20000f44
 800ca58:	20000f48 	.word	0x20000f48
 800ca5c:	20000fa4 	.word	0x20000fa4
 800ca60:	20000fac 	.word	0x20000fac
 800ca64:	20000f94 	.word	0x20000f94
 800ca68:	20000e90 	.word	0x20000e90
 800ca6c:	20000e8c 	.word	0x20000e8c
 800ca70:	20000f9c 	.word	0x20000f9c
 800ca74:	20000fa0 	.word	0x20000fa0

0800ca78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca7e:	4b2b      	ldr	r3, [pc, #172]	@ (800cb2c <vTaskSwitchContext+0xb4>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca86:	4b2a      	ldr	r3, [pc, #168]	@ (800cb30 <vTaskSwitchContext+0xb8>)
 800ca88:	2201      	movs	r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca8c:	e047      	b.n	800cb1e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ca8e:	4b28      	ldr	r3, [pc, #160]	@ (800cb30 <vTaskSwitchContext+0xb8>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca94:	4b27      	ldr	r3, [pc, #156]	@ (800cb34 <vTaskSwitchContext+0xbc>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	fab3 f383 	clz	r3, r3
 800caa0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800caa2:	7afb      	ldrb	r3, [r7, #11]
 800caa4:	f1c3 031f 	rsb	r3, r3, #31
 800caa8:	617b      	str	r3, [r7, #20]
 800caaa:	4923      	ldr	r1, [pc, #140]	@ (800cb38 <vTaskSwitchContext+0xc0>)
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	4613      	mov	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	440b      	add	r3, r1
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10d      	bne.n	800cada <vTaskSwitchContext+0x62>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac2:	b672      	cpsid	i
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	b662      	cpsie	i
 800cad2:	607b      	str	r3, [r7, #4]
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop
 800cad8:	e7fd      	b.n	800cad6 <vTaskSwitchContext+0x5e>
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	4613      	mov	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4413      	add	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4a14      	ldr	r2, [pc, #80]	@ (800cb38 <vTaskSwitchContext+0xc0>)
 800cae6:	4413      	add	r3, r2
 800cae8:	613b      	str	r3, [r7, #16]
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	605a      	str	r2, [r3, #4]
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	3308      	adds	r3, #8
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d104      	bne.n	800cb0a <vTaskSwitchContext+0x92>
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	605a      	str	r2, [r3, #4]
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	4a0a      	ldr	r2, [pc, #40]	@ (800cb3c <vTaskSwitchContext+0xc4>)
 800cb12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb14:	4b09      	ldr	r3, [pc, #36]	@ (800cb3c <vTaskSwitchContext+0xc4>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	334c      	adds	r3, #76	@ 0x4c
 800cb1a:	4a09      	ldr	r2, [pc, #36]	@ (800cb40 <vTaskSwitchContext+0xc8>)
 800cb1c:	6013      	str	r3, [r2, #0]
}
 800cb1e:	bf00      	nop
 800cb20:	371c      	adds	r7, #28
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	20000fb4 	.word	0x20000fb4
 800cb30:	20000fa0 	.word	0x20000fa0
 800cb34:	20000f94 	.word	0x20000f94
 800cb38:	20000e90 	.word	0x20000e90
 800cb3c:	20000e8c 	.word	0x20000e8c
 800cb40:	20000064 	.word	0x20000064

0800cb44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10d      	bne.n	800cb70 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800cb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb58:	b672      	cpsid	i
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	b662      	cpsie	i
 800cb68:	60fb      	str	r3, [r7, #12]
}
 800cb6a:	bf00      	nop
 800cb6c:	bf00      	nop
 800cb6e:	e7fd      	b.n	800cb6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb70:	4b07      	ldr	r3, [pc, #28]	@ (800cb90 <vTaskPlaceOnEventList+0x4c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3318      	adds	r3, #24
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7fe fdf5 	bl	800b768 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb7e:	2101      	movs	r1, #1
 800cb80:	6838      	ldr	r0, [r7, #0]
 800cb82:	f000 fbb3 	bl	800d2ec <prvAddCurrentTaskToDelayedList>
}
 800cb86:	bf00      	nop
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	20000e8c 	.word	0x20000e8c

0800cb94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10d      	bne.n	800cbc6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbae:	b672      	cpsid	i
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	b662      	cpsie	i
 800cbbe:	60fb      	str	r3, [r7, #12]
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	e7fd      	b.n	800cbc2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	3318      	adds	r3, #24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe fe05 	bl	800b7da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbd0:	4b1d      	ldr	r3, [pc, #116]	@ (800cc48 <xTaskRemoveFromEventList+0xb4>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d11c      	bne.n	800cc12 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe fdfc 	bl	800b7da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	409a      	lsls	r2, r3
 800cbea:	4b18      	ldr	r3, [pc, #96]	@ (800cc4c <xTaskRemoveFromEventList+0xb8>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	4a16      	ldr	r2, [pc, #88]	@ (800cc4c <xTaskRemoveFromEventList+0xb8>)
 800cbf2:	6013      	str	r3, [r2, #0]
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	4a13      	ldr	r2, [pc, #76]	@ (800cc50 <xTaskRemoveFromEventList+0xbc>)
 800cc02:	441a      	add	r2, r3
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	3304      	adds	r3, #4
 800cc08:	4619      	mov	r1, r3
 800cc0a:	4610      	mov	r0, r2
 800cc0c:	f7fe fd88 	bl	800b720 <vListInsertEnd>
 800cc10:	e005      	b.n	800cc1e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	3318      	adds	r3, #24
 800cc16:	4619      	mov	r1, r3
 800cc18:	480e      	ldr	r0, [pc, #56]	@ (800cc54 <xTaskRemoveFromEventList+0xc0>)
 800cc1a:	f7fe fd81 	bl	800b720 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc22:	4b0d      	ldr	r3, [pc, #52]	@ (800cc58 <xTaskRemoveFromEventList+0xc4>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d905      	bls.n	800cc38 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc30:	4b0a      	ldr	r3, [pc, #40]	@ (800cc5c <xTaskRemoveFromEventList+0xc8>)
 800cc32:	2201      	movs	r2, #1
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	e001      	b.n	800cc3c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc3c:	697b      	ldr	r3, [r7, #20]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3718      	adds	r7, #24
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20000fb4 	.word	0x20000fb4
 800cc4c:	20000f94 	.word	0x20000f94
 800cc50:	20000e90 	.word	0x20000e90
 800cc54:	20000f4c 	.word	0x20000f4c
 800cc58:	20000e8c 	.word	0x20000e8c
 800cc5c:	20000fa0 	.word	0x20000fa0

0800cc60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc68:	4b06      	ldr	r3, [pc, #24]	@ (800cc84 <vTaskInternalSetTimeOutState+0x24>)
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc70:	4b05      	ldr	r3, [pc, #20]	@ (800cc88 <vTaskInternalSetTimeOutState+0x28>)
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	605a      	str	r2, [r3, #4]
}
 800cc78:	bf00      	nop
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	20000fa4 	.word	0x20000fa4
 800cc88:	20000f90 	.word	0x20000f90

0800cc8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10d      	bne.n	800ccb8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca0:	b672      	cpsid	i
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	b662      	cpsie	i
 800ccb0:	613b      	str	r3, [r7, #16]
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	e7fd      	b.n	800ccb4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10d      	bne.n	800ccda <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc2:	b672      	cpsid	i
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	b662      	cpsie	i
 800ccd2:	60fb      	str	r3, [r7, #12]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800ccda:	f000 fc7f 	bl	800d5dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccde:	4b1d      	ldr	r3, [pc, #116]	@ (800cd54 <xTaskCheckForTimeOut+0xc8>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf6:	d102      	bne.n	800ccfe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	61fb      	str	r3, [r7, #28]
 800ccfc:	e023      	b.n	800cd46 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4b15      	ldr	r3, [pc, #84]	@ (800cd58 <xTaskCheckForTimeOut+0xcc>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d007      	beq.n	800cd1a <xTaskCheckForTimeOut+0x8e>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	69ba      	ldr	r2, [r7, #24]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d302      	bcc.n	800cd1a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd14:	2301      	movs	r3, #1
 800cd16:	61fb      	str	r3, [r7, #28]
 800cd18:	e015      	b.n	800cd46 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d20b      	bcs.n	800cd3c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	1ad2      	subs	r2, r2, r3
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7ff ff95 	bl	800cc60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd36:	2300      	movs	r3, #0
 800cd38:	61fb      	str	r3, [r7, #28]
 800cd3a:	e004      	b.n	800cd46 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd42:	2301      	movs	r3, #1
 800cd44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd46:	f000 fc7f 	bl	800d648 <vPortExitCritical>

	return xReturn;
 800cd4a:	69fb      	ldr	r3, [r7, #28]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3720      	adds	r7, #32
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	20000f90 	.word	0x20000f90
 800cd58:	20000fa4 	.word	0x20000fa4

0800cd5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd60:	4b03      	ldr	r3, [pc, #12]	@ (800cd70 <vTaskMissedYield+0x14>)
 800cd62:	2201      	movs	r2, #1
 800cd64:	601a      	str	r2, [r3, #0]
}
 800cd66:	bf00      	nop
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr
 800cd70:	20000fa0 	.word	0x20000fa0

0800cd74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd7c:	f000 f852 	bl	800ce24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd80:	4b06      	ldr	r3, [pc, #24]	@ (800cd9c <prvIdleTask+0x28>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d9f9      	bls.n	800cd7c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd88:	4b05      	ldr	r3, [pc, #20]	@ (800cda0 <prvIdleTask+0x2c>)
 800cd8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd8e:	601a      	str	r2, [r3, #0]
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd98:	e7f0      	b.n	800cd7c <prvIdleTask+0x8>
 800cd9a:	bf00      	nop
 800cd9c:	20000e90 	.word	0x20000e90
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdaa:	2300      	movs	r3, #0
 800cdac:	607b      	str	r3, [r7, #4]
 800cdae:	e00c      	b.n	800cdca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4a12      	ldr	r2, [pc, #72]	@ (800ce04 <prvInitialiseTaskLists+0x60>)
 800cdbc:	4413      	add	r3, r2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe fc81 	bl	800b6c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	607b      	str	r3, [r7, #4]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b06      	cmp	r3, #6
 800cdce:	d9ef      	bls.n	800cdb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdd0:	480d      	ldr	r0, [pc, #52]	@ (800ce08 <prvInitialiseTaskLists+0x64>)
 800cdd2:	f7fe fc78 	bl	800b6c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdd6:	480d      	ldr	r0, [pc, #52]	@ (800ce0c <prvInitialiseTaskLists+0x68>)
 800cdd8:	f7fe fc75 	bl	800b6c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cddc:	480c      	ldr	r0, [pc, #48]	@ (800ce10 <prvInitialiseTaskLists+0x6c>)
 800cdde:	f7fe fc72 	bl	800b6c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cde2:	480c      	ldr	r0, [pc, #48]	@ (800ce14 <prvInitialiseTaskLists+0x70>)
 800cde4:	f7fe fc6f 	bl	800b6c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cde8:	480b      	ldr	r0, [pc, #44]	@ (800ce18 <prvInitialiseTaskLists+0x74>)
 800cdea:	f7fe fc6c 	bl	800b6c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdee:	4b0b      	ldr	r3, [pc, #44]	@ (800ce1c <prvInitialiseTaskLists+0x78>)
 800cdf0:	4a05      	ldr	r2, [pc, #20]	@ (800ce08 <prvInitialiseTaskLists+0x64>)
 800cdf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cdf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ce20 <prvInitialiseTaskLists+0x7c>)
 800cdf6:	4a05      	ldr	r2, [pc, #20]	@ (800ce0c <prvInitialiseTaskLists+0x68>)
 800cdf8:	601a      	str	r2, [r3, #0]
}
 800cdfa:	bf00      	nop
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	20000e90 	.word	0x20000e90
 800ce08:	20000f1c 	.word	0x20000f1c
 800ce0c:	20000f30 	.word	0x20000f30
 800ce10:	20000f4c 	.word	0x20000f4c
 800ce14:	20000f60 	.word	0x20000f60
 800ce18:	20000f78 	.word	0x20000f78
 800ce1c:	20000f44 	.word	0x20000f44
 800ce20:	20000f48 	.word	0x20000f48

0800ce24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce2a:	e019      	b.n	800ce60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce2c:	f000 fbd6 	bl	800d5dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce30:	4b10      	ldr	r3, [pc, #64]	@ (800ce74 <prvCheckTasksWaitingTermination+0x50>)
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe fccc 	bl	800b7da <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce42:	4b0d      	ldr	r3, [pc, #52]	@ (800ce78 <prvCheckTasksWaitingTermination+0x54>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	4a0b      	ldr	r2, [pc, #44]	@ (800ce78 <prvCheckTasksWaitingTermination+0x54>)
 800ce4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce7c <prvCheckTasksWaitingTermination+0x58>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	4a0a      	ldr	r2, [pc, #40]	@ (800ce7c <prvCheckTasksWaitingTermination+0x58>)
 800ce54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce56:	f000 fbf7 	bl	800d648 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f810 	bl	800ce80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce60:	4b06      	ldr	r3, [pc, #24]	@ (800ce7c <prvCheckTasksWaitingTermination+0x58>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1e1      	bne.n	800ce2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce68:	bf00      	nop
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20000f60 	.word	0x20000f60
 800ce78:	20000f8c 	.word	0x20000f8c
 800ce7c:	20000f74 	.word	0x20000f74

0800ce80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	334c      	adds	r3, #76	@ 0x4c
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 fff3 	bl	800de78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d108      	bne.n	800ceae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cea0:	4618      	mov	r0, r3
 800cea2:	f000 fd51 	bl	800d948 <vPortFree>
				vPortFree( pxTCB );
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fd4e 	bl	800d948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ceac:	e01b      	b.n	800cee6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d103      	bne.n	800cec0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 fd45 	bl	800d948 <vPortFree>
	}
 800cebe:	e012      	b.n	800cee6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d00d      	beq.n	800cee6 <prvDeleteTCB+0x66>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cece:	b672      	cpsid	i
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	b662      	cpsie	i
 800cede:	60fb      	str	r3, [r7, #12]
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	e7fd      	b.n	800cee2 <prvDeleteTCB+0x62>
	}
 800cee6:	bf00      	nop
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cef6:	4b0c      	ldr	r3, [pc, #48]	@ (800cf28 <prvResetNextTaskUnblockTime+0x38>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d104      	bne.n	800cf0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf00:	4b0a      	ldr	r3, [pc, #40]	@ (800cf2c <prvResetNextTaskUnblockTime+0x3c>)
 800cf02:	f04f 32ff 	mov.w	r2, #4294967295
 800cf06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf08:	e008      	b.n	800cf1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf0a:	4b07      	ldr	r3, [pc, #28]	@ (800cf28 <prvResetNextTaskUnblockTime+0x38>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	4a04      	ldr	r2, [pc, #16]	@ (800cf2c <prvResetNextTaskUnblockTime+0x3c>)
 800cf1a:	6013      	str	r3, [r2, #0]
}
 800cf1c:	bf00      	nop
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr
 800cf28:	20000f44 	.word	0x20000f44
 800cf2c:	20000fac 	.word	0x20000fac

0800cf30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf36:	4b0b      	ldr	r3, [pc, #44]	@ (800cf64 <xTaskGetSchedulerState+0x34>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d102      	bne.n	800cf44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	607b      	str	r3, [r7, #4]
 800cf42:	e008      	b.n	800cf56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf44:	4b08      	ldr	r3, [pc, #32]	@ (800cf68 <xTaskGetSchedulerState+0x38>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d102      	bne.n	800cf52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	607b      	str	r3, [r7, #4]
 800cf50:	e001      	b.n	800cf56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf52:	2300      	movs	r3, #0
 800cf54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf56:	687b      	ldr	r3, [r7, #4]
	}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr
 800cf64:	20000f98 	.word	0x20000f98
 800cf68:	20000fb4 	.word	0x20000fb4

0800cf6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d069      	beq.n	800d056 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf86:	4b36      	ldr	r3, [pc, #216]	@ (800d060 <xTaskPriorityInherit+0xf4>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d259      	bcs.n	800d044 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	699b      	ldr	r3, [r3, #24]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	db06      	blt.n	800cfa6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf98:	4b31      	ldr	r3, [pc, #196]	@ (800d060 <xTaskPriorityInherit+0xf4>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9e:	f1c3 0207 	rsb	r2, r3, #7
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	6959      	ldr	r1, [r3, #20]
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfae:	4613      	mov	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4a2b      	ldr	r2, [pc, #172]	@ (800d064 <xTaskPriorityInherit+0xf8>)
 800cfb8:	4413      	add	r3, r2
 800cfba:	4299      	cmp	r1, r3
 800cfbc:	d13a      	bne.n	800d034 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fc09 	bl	800b7da <uxListRemove>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d115      	bne.n	800cffa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd2:	4924      	ldr	r1, [pc, #144]	@ (800d064 <xTaskPriorityInherit+0xf8>)
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	440b      	add	r3, r1
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10a      	bne.n	800cffa <xTaskPriorityInherit+0x8e>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe8:	2201      	movs	r2, #1
 800cfea:	fa02 f303 	lsl.w	r3, r2, r3
 800cfee:	43da      	mvns	r2, r3
 800cff0:	4b1d      	ldr	r3, [pc, #116]	@ (800d068 <xTaskPriorityInherit+0xfc>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4013      	ands	r3, r2
 800cff6:	4a1c      	ldr	r2, [pc, #112]	@ (800d068 <xTaskPriorityInherit+0xfc>)
 800cff8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cffa:	4b19      	ldr	r3, [pc, #100]	@ (800d060 <xTaskPriorityInherit+0xf4>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d008:	2201      	movs	r2, #1
 800d00a:	409a      	lsls	r2, r3
 800d00c:	4b16      	ldr	r3, [pc, #88]	@ (800d068 <xTaskPriorityInherit+0xfc>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4313      	orrs	r3, r2
 800d012:	4a15      	ldr	r2, [pc, #84]	@ (800d068 <xTaskPriorityInherit+0xfc>)
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d01a:	4613      	mov	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4413      	add	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4a10      	ldr	r2, [pc, #64]	@ (800d064 <xTaskPriorityInherit+0xf8>)
 800d024:	441a      	add	r2, r3
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	3304      	adds	r3, #4
 800d02a:	4619      	mov	r1, r3
 800d02c:	4610      	mov	r0, r2
 800d02e:	f7fe fb77 	bl	800b720 <vListInsertEnd>
 800d032:	e004      	b.n	800d03e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d034:	4b0a      	ldr	r3, [pc, #40]	@ (800d060 <xTaskPriorityInherit+0xf4>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d03e:	2301      	movs	r3, #1
 800d040:	60fb      	str	r3, [r7, #12]
 800d042:	e008      	b.n	800d056 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d048:	4b05      	ldr	r3, [pc, #20]	@ (800d060 <xTaskPriorityInherit+0xf4>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d04e:	429a      	cmp	r2, r3
 800d050:	d201      	bcs.n	800d056 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d052:	2301      	movs	r3, #1
 800d054:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d056:	68fb      	ldr	r3, [r7, #12]
	}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	20000e8c 	.word	0x20000e8c
 800d064:	20000e90 	.word	0x20000e90
 800d068:	20000f94 	.word	0x20000f94

0800d06c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d074      	beq.n	800d16c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d082:	4b3d      	ldr	r3, [pc, #244]	@ (800d178 <xTaskPriorityDisinherit+0x10c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d00d      	beq.n	800d0a8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d090:	b672      	cpsid	i
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	b662      	cpsie	i
 800d0a0:	60fb      	str	r3, [r7, #12]
}
 800d0a2:	bf00      	nop
 800d0a4:	bf00      	nop
 800d0a6:	e7fd      	b.n	800d0a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10d      	bne.n	800d0cc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b4:	b672      	cpsid	i
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	b662      	cpsie	i
 800d0c4:	60bb      	str	r3, [r7, #8]
}
 800d0c6:	bf00      	nop
 800d0c8:	bf00      	nop
 800d0ca:	e7fd      	b.n	800d0c8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0d0:	1e5a      	subs	r2, r3, #1
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d044      	beq.n	800d16c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d140      	bne.n	800d16c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fe fb73 	bl	800b7da <uxListRemove>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d115      	bne.n	800d126 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0fe:	491f      	ldr	r1, [pc, #124]	@ (800d17c <xTaskPriorityDisinherit+0x110>)
 800d100:	4613      	mov	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	440b      	add	r3, r1
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10a      	bne.n	800d126 <xTaskPriorityDisinherit+0xba>
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d114:	2201      	movs	r2, #1
 800d116:	fa02 f303 	lsl.w	r3, r2, r3
 800d11a:	43da      	mvns	r2, r3
 800d11c:	4b18      	ldr	r3, [pc, #96]	@ (800d180 <xTaskPriorityDisinherit+0x114>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4013      	ands	r3, r2
 800d122:	4a17      	ldr	r2, [pc, #92]	@ (800d180 <xTaskPriorityDisinherit+0x114>)
 800d124:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d132:	f1c3 0207 	rsb	r2, r3, #7
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13e:	2201      	movs	r2, #1
 800d140:	409a      	lsls	r2, r3
 800d142:	4b0f      	ldr	r3, [pc, #60]	@ (800d180 <xTaskPriorityDisinherit+0x114>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4313      	orrs	r3, r2
 800d148:	4a0d      	ldr	r2, [pc, #52]	@ (800d180 <xTaskPriorityDisinherit+0x114>)
 800d14a:	6013      	str	r3, [r2, #0]
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d150:	4613      	mov	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4413      	add	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4a08      	ldr	r2, [pc, #32]	@ (800d17c <xTaskPriorityDisinherit+0x110>)
 800d15a:	441a      	add	r2, r3
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	3304      	adds	r3, #4
 800d160:	4619      	mov	r1, r3
 800d162:	4610      	mov	r0, r2
 800d164:	f7fe fadc 	bl	800b720 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d168:	2301      	movs	r3, #1
 800d16a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d16c:	697b      	ldr	r3, [r7, #20]
	}
 800d16e:	4618      	mov	r0, r3
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20000e8c 	.word	0x20000e8c
 800d17c:	20000e90 	.word	0x20000e90
 800d180:	20000f94 	.word	0x20000f94

0800d184 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d184:	b580      	push	{r7, lr}
 800d186:	b088      	sub	sp, #32
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d192:	2301      	movs	r3, #1
 800d194:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f000 8089 	beq.w	800d2b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10d      	bne.n	800d1c2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800d1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1aa:	b672      	cpsid	i
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	b662      	cpsie	i
 800d1ba:	60fb      	str	r3, [r7, #12]
}
 800d1bc:	bf00      	nop
 800d1be:	bf00      	nop
 800d1c0:	e7fd      	b.n	800d1be <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1c6:	683a      	ldr	r2, [r7, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d902      	bls.n	800d1d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	61fb      	str	r3, [r7, #28]
 800d1d0:	e002      	b.n	800d1d8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1dc:	69fa      	ldr	r2, [r7, #28]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d066      	beq.n	800d2b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d161      	bne.n	800d2b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d1ec:	4b32      	ldr	r3, [pc, #200]	@ (800d2b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	69ba      	ldr	r2, [r7, #24]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d10d      	bne.n	800d212 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fa:	b672      	cpsid	i
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	b662      	cpsie	i
 800d20a:	60bb      	str	r3, [r7, #8]
}
 800d20c:	bf00      	nop
 800d20e:	bf00      	nop
 800d210:	e7fd      	b.n	800d20e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d216:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	69fa      	ldr	r2, [r7, #28]
 800d21c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	2b00      	cmp	r3, #0
 800d224:	db04      	blt.n	800d230 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	f1c3 0207 	rsb	r2, r3, #7
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	6959      	ldr	r1, [r3, #20]
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4a1f      	ldr	r2, [pc, #124]	@ (800d2bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d240:	4413      	add	r3, r2
 800d242:	4299      	cmp	r1, r3
 800d244:	d134      	bne.n	800d2b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	3304      	adds	r3, #4
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fac5 	bl	800b7da <uxListRemove>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d115      	bne.n	800d282 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25a:	4918      	ldr	r1, [pc, #96]	@ (800d2bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d25c:	4613      	mov	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	440b      	add	r3, r1
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10a      	bne.n	800d282 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d270:	2201      	movs	r2, #1
 800d272:	fa02 f303 	lsl.w	r3, r2, r3
 800d276:	43da      	mvns	r2, r3
 800d278:	4b11      	ldr	r3, [pc, #68]	@ (800d2c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4013      	ands	r3, r2
 800d27e:	4a10      	ldr	r2, [pc, #64]	@ (800d2c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d280:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d286:	2201      	movs	r2, #1
 800d288:	409a      	lsls	r2, r3
 800d28a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4313      	orrs	r3, r2
 800d290:	4a0b      	ldr	r2, [pc, #44]	@ (800d2c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d298:	4613      	mov	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4a06      	ldr	r2, [pc, #24]	@ (800d2bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2a2:	441a      	add	r2, r3
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fe fa38 	bl	800b720 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2b0:	bf00      	nop
 800d2b2:	3720      	adds	r7, #32
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20000e8c 	.word	0x20000e8c
 800d2bc:	20000e90 	.word	0x20000e90
 800d2c0:	20000f94 	.word	0x20000f94

0800d2c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d2c8:	4b07      	ldr	r3, [pc, #28]	@ (800d2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d004      	beq.n	800d2da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d2d0:	4b05      	ldr	r3, [pc, #20]	@ (800d2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2d6:	3201      	adds	r2, #1
 800d2d8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d2da:	4b03      	ldr	r3, [pc, #12]	@ (800d2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
	}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr
 800d2e8:	20000e8c 	.word	0x20000e8c

0800d2ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d2f6:	4b29      	ldr	r3, [pc, #164]	@ (800d39c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2fc:	4b28      	ldr	r3, [pc, #160]	@ (800d3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3304      	adds	r3, #4
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe fa69 	bl	800b7da <uxListRemove>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d10b      	bne.n	800d326 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d30e:	4b24      	ldr	r3, [pc, #144]	@ (800d3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d314:	2201      	movs	r2, #1
 800d316:	fa02 f303 	lsl.w	r3, r2, r3
 800d31a:	43da      	mvns	r2, r3
 800d31c:	4b21      	ldr	r3, [pc, #132]	@ (800d3a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4013      	ands	r3, r2
 800d322:	4a20      	ldr	r2, [pc, #128]	@ (800d3a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d324:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32c:	d10a      	bne.n	800d344 <prvAddCurrentTaskToDelayedList+0x58>
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d007      	beq.n	800d344 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d334:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	3304      	adds	r3, #4
 800d33a:	4619      	mov	r1, r3
 800d33c:	481a      	ldr	r0, [pc, #104]	@ (800d3a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d33e:	f7fe f9ef 	bl	800b720 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d342:	e026      	b.n	800d392 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4413      	add	r3, r2
 800d34a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d34c:	4b14      	ldr	r3, [pc, #80]	@ (800d3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d209      	bcs.n	800d370 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d35c:	4b13      	ldr	r3, [pc, #76]	@ (800d3ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	4b0f      	ldr	r3, [pc, #60]	@ (800d3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3304      	adds	r3, #4
 800d366:	4619      	mov	r1, r3
 800d368:	4610      	mov	r0, r2
 800d36a:	f7fe f9fd 	bl	800b768 <vListInsert>
}
 800d36e:	e010      	b.n	800d392 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d370:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3304      	adds	r3, #4
 800d37a:	4619      	mov	r1, r3
 800d37c:	4610      	mov	r0, r2
 800d37e:	f7fe f9f3 	bl	800b768 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d382:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d202      	bcs.n	800d392 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d38c:	4a09      	ldr	r2, [pc, #36]	@ (800d3b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	6013      	str	r3, [r2, #0]
}
 800d392:	bf00      	nop
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	20000f90 	.word	0x20000f90
 800d3a0:	20000e8c 	.word	0x20000e8c
 800d3a4:	20000f94 	.word	0x20000f94
 800d3a8:	20000f78 	.word	0x20000f78
 800d3ac:	20000f48 	.word	0x20000f48
 800d3b0:	20000f44 	.word	0x20000f44
 800d3b4:	20000fac 	.word	0x20000fac

0800d3b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3b04      	subs	r3, #4
 800d3c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	3b04      	subs	r3, #4
 800d3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	f023 0201 	bic.w	r2, r3, #1
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	3b04      	subs	r3, #4
 800d3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d41c <pxPortInitialiseStack+0x64>)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3b14      	subs	r3, #20
 800d3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3b04      	subs	r3, #4
 800d3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f06f 0202 	mvn.w	r2, #2
 800d406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	3b20      	subs	r3, #32
 800d40c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d40e:	68fb      	ldr	r3, [r7, #12]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	0800d421 	.word	0x0800d421

0800d420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d42a:	4b15      	ldr	r3, [pc, #84]	@ (800d480 <prvTaskExitError+0x60>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d432:	d00d      	beq.n	800d450 <prvTaskExitError+0x30>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d438:	b672      	cpsid	i
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	b662      	cpsie	i
 800d448:	60fb      	str	r3, [r7, #12]
}
 800d44a:	bf00      	nop
 800d44c:	bf00      	nop
 800d44e:	e7fd      	b.n	800d44c <prvTaskExitError+0x2c>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d454:	b672      	cpsid	i
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	b662      	cpsie	i
 800d464:	60bb      	str	r3, [r7, #8]
}
 800d466:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d468:	bf00      	nop
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d0fc      	beq.n	800d46a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	20000054 	.word	0x20000054
	...

0800d490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d490:	4b07      	ldr	r3, [pc, #28]	@ (800d4b0 <pxCurrentTCBConst2>)
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	6808      	ldr	r0, [r1, #0]
 800d496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	f380 8809 	msr	PSP, r0
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f04f 0000 	mov.w	r0, #0
 800d4a6:	f380 8811 	msr	BASEPRI, r0
 800d4aa:	4770      	bx	lr
 800d4ac:	f3af 8000 	nop.w

0800d4b0 <pxCurrentTCBConst2>:
 800d4b0:	20000e8c 	.word	0x20000e8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop

0800d4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4b8:	4808      	ldr	r0, [pc, #32]	@ (800d4dc <prvPortStartFirstTask+0x24>)
 800d4ba:	6800      	ldr	r0, [r0, #0]
 800d4bc:	6800      	ldr	r0, [r0, #0]
 800d4be:	f380 8808 	msr	MSP, r0
 800d4c2:	f04f 0000 	mov.w	r0, #0
 800d4c6:	f380 8814 	msr	CONTROL, r0
 800d4ca:	b662      	cpsie	i
 800d4cc:	b661      	cpsie	f
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	df00      	svc	0
 800d4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4da:	bf00      	nop
 800d4dc:	e000ed08 	.word	0xe000ed08

0800d4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4e6:	4b37      	ldr	r3, [pc, #220]	@ (800d5c4 <xPortStartScheduler+0xe4>)
 800d4e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	22ff      	movs	r2, #255	@ 0xff
 800d4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d500:	78fb      	ldrb	r3, [r7, #3]
 800d502:	b2db      	uxtb	r3, r3
 800d504:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	4b2f      	ldr	r3, [pc, #188]	@ (800d5c8 <xPortStartScheduler+0xe8>)
 800d50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d50e:	4b2f      	ldr	r3, [pc, #188]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d510:	2207      	movs	r2, #7
 800d512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d514:	e009      	b.n	800d52a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d516:	4b2d      	ldr	r3, [pc, #180]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	4a2b      	ldr	r2, [pc, #172]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	b2db      	uxtb	r3, r3
 800d524:	005b      	lsls	r3, r3, #1
 800d526:	b2db      	uxtb	r3, r3
 800d528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d52a:	78fb      	ldrb	r3, [r7, #3]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d532:	2b80      	cmp	r3, #128	@ 0x80
 800d534:	d0ef      	beq.n	800d516 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d536:	4b25      	ldr	r3, [pc, #148]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f1c3 0307 	rsb	r3, r3, #7
 800d53e:	2b04      	cmp	r3, #4
 800d540:	d00d      	beq.n	800d55e <xPortStartScheduler+0x7e>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	b672      	cpsid	i
 800d548:	f383 8811 	msr	BASEPRI, r3
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	b662      	cpsie	i
 800d556:	60bb      	str	r3, [r7, #8]
}
 800d558:	bf00      	nop
 800d55a:	bf00      	nop
 800d55c:	e7fd      	b.n	800d55a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d55e:	4b1b      	ldr	r3, [pc, #108]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	021b      	lsls	r3, r3, #8
 800d564:	4a19      	ldr	r2, [pc, #100]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d568:	4b18      	ldr	r3, [pc, #96]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d570:	4a16      	ldr	r2, [pc, #88]	@ (800d5cc <xPortStartScheduler+0xec>)
 800d572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	b2da      	uxtb	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d57c:	4b14      	ldr	r3, [pc, #80]	@ (800d5d0 <xPortStartScheduler+0xf0>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a13      	ldr	r2, [pc, #76]	@ (800d5d0 <xPortStartScheduler+0xf0>)
 800d582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d588:	4b11      	ldr	r3, [pc, #68]	@ (800d5d0 <xPortStartScheduler+0xf0>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a10      	ldr	r2, [pc, #64]	@ (800d5d0 <xPortStartScheduler+0xf0>)
 800d58e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d594:	f000 f8dc 	bl	800d750 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d598:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d4 <xPortStartScheduler+0xf4>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d59e:	f000 f8fb 	bl	800d798 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d5d8 <xPortStartScheduler+0xf8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d5d8 <xPortStartScheduler+0xf8>)
 800d5a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d5ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5ae:	f7ff ff83 	bl	800d4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5b2:	f7ff fa61 	bl	800ca78 <vTaskSwitchContext>
	prvTaskExitError();
 800d5b6:	f7ff ff33 	bl	800d420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	e000e400 	.word	0xe000e400
 800d5c8:	20000fb8 	.word	0x20000fb8
 800d5cc:	20000fbc 	.word	0x20000fbc
 800d5d0:	e000ed20 	.word	0xe000ed20
 800d5d4:	20000054 	.word	0x20000054
 800d5d8:	e000ef34 	.word	0xe000ef34

0800d5dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
	__asm volatile
 800d5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e6:	b672      	cpsid	i
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	b662      	cpsie	i
 800d5f6:	607b      	str	r3, [r7, #4]
}
 800d5f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5fa:	4b11      	ldr	r3, [pc, #68]	@ (800d640 <vPortEnterCritical+0x64>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3301      	adds	r3, #1
 800d600:	4a0f      	ldr	r2, [pc, #60]	@ (800d640 <vPortEnterCritical+0x64>)
 800d602:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d604:	4b0e      	ldr	r3, [pc, #56]	@ (800d640 <vPortEnterCritical+0x64>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d112      	bne.n	800d632 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d60c:	4b0d      	ldr	r3, [pc, #52]	@ (800d644 <vPortEnterCritical+0x68>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00d      	beq.n	800d632 <vPortEnterCritical+0x56>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61a:	b672      	cpsid	i
 800d61c:	f383 8811 	msr	BASEPRI, r3
 800d620:	f3bf 8f6f 	isb	sy
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	b662      	cpsie	i
 800d62a:	603b      	str	r3, [r7, #0]
}
 800d62c:	bf00      	nop
 800d62e:	bf00      	nop
 800d630:	e7fd      	b.n	800d62e <vPortEnterCritical+0x52>
	}
}
 800d632:	bf00      	nop
 800d634:	370c      	adds	r7, #12
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	20000054 	.word	0x20000054
 800d644:	e000ed04 	.word	0xe000ed04

0800d648 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d64e:	4b13      	ldr	r3, [pc, #76]	@ (800d69c <vPortExitCritical+0x54>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10d      	bne.n	800d672 <vPortExitCritical+0x2a>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65a:	b672      	cpsid	i
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	b662      	cpsie	i
 800d66a:	607b      	str	r3, [r7, #4]
}
 800d66c:	bf00      	nop
 800d66e:	bf00      	nop
 800d670:	e7fd      	b.n	800d66e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d672:	4b0a      	ldr	r3, [pc, #40]	@ (800d69c <vPortExitCritical+0x54>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3b01      	subs	r3, #1
 800d678:	4a08      	ldr	r2, [pc, #32]	@ (800d69c <vPortExitCritical+0x54>)
 800d67a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d67c:	4b07      	ldr	r3, [pc, #28]	@ (800d69c <vPortExitCritical+0x54>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d105      	bne.n	800d690 <vPortExitCritical+0x48>
 800d684:	2300      	movs	r3, #0
 800d686:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d68e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d690:	bf00      	nop
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	20000054 	.word	0x20000054

0800d6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6a0:	f3ef 8009 	mrs	r0, PSP
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	4b15      	ldr	r3, [pc, #84]	@ (800d700 <pxCurrentTCBConst>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	f01e 0f10 	tst.w	lr, #16
 800d6b0:	bf08      	it	eq
 800d6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ba:	6010      	str	r0, [r2, #0]
 800d6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d6c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d6c4:	b672      	cpsid	i
 800d6c6:	f380 8811 	msr	BASEPRI, r0
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	b662      	cpsie	i
 800d6d4:	f7ff f9d0 	bl	800ca78 <vTaskSwitchContext>
 800d6d8:	f04f 0000 	mov.w	r0, #0
 800d6dc:	f380 8811 	msr	BASEPRI, r0
 800d6e0:	bc09      	pop	{r0, r3}
 800d6e2:	6819      	ldr	r1, [r3, #0]
 800d6e4:	6808      	ldr	r0, [r1, #0]
 800d6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ea:	f01e 0f10 	tst.w	lr, #16
 800d6ee:	bf08      	it	eq
 800d6f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6f4:	f380 8809 	msr	PSP, r0
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop

0800d700 <pxCurrentTCBConst>:
 800d700:	20000e8c 	.word	0x20000e8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop

0800d708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d712:	b672      	cpsid	i
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	b662      	cpsie	i
 800d722:	607b      	str	r3, [r7, #4]
}
 800d724:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d726:	f7ff f8eb 	bl	800c900 <xTaskIncrementTick>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d730:	4b06      	ldr	r3, [pc, #24]	@ (800d74c <SysTick_Handler+0x44>)
 800d732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d736:	601a      	str	r2, [r3, #0]
 800d738:	2300      	movs	r3, #0
 800d73a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	f383 8811 	msr	BASEPRI, r3
}
 800d742:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	e000ed04 	.word	0xe000ed04

0800d750 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d750:	b480      	push	{r7}
 800d752:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d754:	4b0b      	ldr	r3, [pc, #44]	@ (800d784 <vPortSetupTimerInterrupt+0x34>)
 800d756:	2200      	movs	r2, #0
 800d758:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d75a:	4b0b      	ldr	r3, [pc, #44]	@ (800d788 <vPortSetupTimerInterrupt+0x38>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d760:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <vPortSetupTimerInterrupt+0x3c>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a0a      	ldr	r2, [pc, #40]	@ (800d790 <vPortSetupTimerInterrupt+0x40>)
 800d766:	fba2 2303 	umull	r2, r3, r2, r3
 800d76a:	099b      	lsrs	r3, r3, #6
 800d76c:	4a09      	ldr	r2, [pc, #36]	@ (800d794 <vPortSetupTimerInterrupt+0x44>)
 800d76e:	3b01      	subs	r3, #1
 800d770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d772:	4b04      	ldr	r3, [pc, #16]	@ (800d784 <vPortSetupTimerInterrupt+0x34>)
 800d774:	2207      	movs	r2, #7
 800d776:	601a      	str	r2, [r3, #0]
}
 800d778:	bf00      	nop
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	e000e010 	.word	0xe000e010
 800d788:	e000e018 	.word	0xe000e018
 800d78c:	20000048 	.word	0x20000048
 800d790:	10624dd3 	.word	0x10624dd3
 800d794:	e000e014 	.word	0xe000e014

0800d798 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d798:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d7a8 <vPortEnableVFP+0x10>
 800d79c:	6801      	ldr	r1, [r0, #0]
 800d79e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d7a2:	6001      	str	r1, [r0, #0]
 800d7a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7a6:	bf00      	nop
 800d7a8:	e000ed88 	.word	0xe000ed88

0800d7ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08a      	sub	sp, #40	@ 0x28
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d7b8:	f7fe ffe4 	bl	800c784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d7bc:	4b5d      	ldr	r3, [pc, #372]	@ (800d934 <pvPortMalloc+0x188>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d101      	bne.n	800d7c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d7c4:	f000 f920 	bl	800da08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d7c8:	4b5b      	ldr	r3, [pc, #364]	@ (800d938 <pvPortMalloc+0x18c>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f040 8094 	bne.w	800d8fe <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d020      	beq.n	800d81e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800d7dc:	2208      	movs	r2, #8
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d017      	beq.n	800d81e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f023 0307 	bic.w	r3, r3, #7
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f003 0307 	and.w	r3, r3, #7
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00d      	beq.n	800d81e <pvPortMalloc+0x72>
	__asm volatile
 800d802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d806:	b672      	cpsid	i
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	b662      	cpsie	i
 800d816:	617b      	str	r3, [r7, #20]
}
 800d818:	bf00      	nop
 800d81a:	bf00      	nop
 800d81c:	e7fd      	b.n	800d81a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d06c      	beq.n	800d8fe <pvPortMalloc+0x152>
 800d824:	4b45      	ldr	r3, [pc, #276]	@ (800d93c <pvPortMalloc+0x190>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d867      	bhi.n	800d8fe <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d82e:	4b44      	ldr	r3, [pc, #272]	@ (800d940 <pvPortMalloc+0x194>)
 800d830:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d832:	4b43      	ldr	r3, [pc, #268]	@ (800d940 <pvPortMalloc+0x194>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d838:	e004      	b.n	800d844 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d903      	bls.n	800d856 <pvPortMalloc+0xaa>
 800d84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1f1      	bne.n	800d83a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d856:	4b37      	ldr	r3, [pc, #220]	@ (800d934 <pvPortMalloc+0x188>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d04e      	beq.n	800d8fe <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2208      	movs	r2, #8
 800d866:	4413      	add	r3, r2
 800d868:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	1ad2      	subs	r2, r2, r3
 800d87a:	2308      	movs	r3, #8
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	429a      	cmp	r2, r3
 800d880:	d922      	bls.n	800d8c8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4413      	add	r3, r2
 800d888:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	f003 0307 	and.w	r3, r3, #7
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00d      	beq.n	800d8b0 <pvPortMalloc+0x104>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	b672      	cpsid	i
 800d89a:	f383 8811 	msr	BASEPRI, r3
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	b662      	cpsie	i
 800d8a8:	613b      	str	r3, [r7, #16]
}
 800d8aa:	bf00      	nop
 800d8ac:	bf00      	nop
 800d8ae:	e7fd      	b.n	800d8ac <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	1ad2      	subs	r2, r2, r3
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d8c2:	69b8      	ldr	r0, [r7, #24]
 800d8c4:	f000 f902 	bl	800dacc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d8c8:	4b1c      	ldr	r3, [pc, #112]	@ (800d93c <pvPortMalloc+0x190>)
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	4a1a      	ldr	r2, [pc, #104]	@ (800d93c <pvPortMalloc+0x190>)
 800d8d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d8d6:	4b19      	ldr	r3, [pc, #100]	@ (800d93c <pvPortMalloc+0x190>)
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	4b1a      	ldr	r3, [pc, #104]	@ (800d944 <pvPortMalloc+0x198>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d203      	bcs.n	800d8ea <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d8e2:	4b16      	ldr	r3, [pc, #88]	@ (800d93c <pvPortMalloc+0x190>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a17      	ldr	r2, [pc, #92]	@ (800d944 <pvPortMalloc+0x198>)
 800d8e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	4b12      	ldr	r3, [pc, #72]	@ (800d938 <pvPortMalloc+0x18c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	431a      	orrs	r2, r3
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8fe:	f7fe ff4f 	bl	800c7a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	f003 0307 	and.w	r3, r3, #7
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00d      	beq.n	800d928 <pvPortMalloc+0x17c>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d910:	b672      	cpsid	i
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	b662      	cpsie	i
 800d920:	60fb      	str	r3, [r7, #12]
}
 800d922:	bf00      	nop
 800d924:	bf00      	nop
 800d926:	e7fd      	b.n	800d924 <pvPortMalloc+0x178>
	return pvReturn;
 800d928:	69fb      	ldr	r3, [r7, #28]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3728      	adds	r7, #40	@ 0x28
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	20004bc8 	.word	0x20004bc8
 800d938:	20004bd4 	.word	0x20004bd4
 800d93c:	20004bcc 	.word	0x20004bcc
 800d940:	20004bc0 	.word	0x20004bc0
 800d944:	20004bd0 	.word	0x20004bd0

0800d948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d04e      	beq.n	800d9f8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d95a:	2308      	movs	r3, #8
 800d95c:	425b      	negs	r3, r3
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	4413      	add	r3, r2
 800d962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	4b24      	ldr	r3, [pc, #144]	@ (800da00 <vPortFree+0xb8>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4013      	ands	r3, r2
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10d      	bne.n	800d992 <vPortFree+0x4a>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97a:	b672      	cpsid	i
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	b662      	cpsie	i
 800d98a:	60fb      	str	r3, [r7, #12]
}
 800d98c:	bf00      	nop
 800d98e:	bf00      	nop
 800d990:	e7fd      	b.n	800d98e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00d      	beq.n	800d9b6 <vPortFree+0x6e>
	__asm volatile
 800d99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99e:	b672      	cpsid	i
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	b662      	cpsie	i
 800d9ae:	60bb      	str	r3, [r7, #8]
}
 800d9b0:	bf00      	nop
 800d9b2:	bf00      	nop
 800d9b4:	e7fd      	b.n	800d9b2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	4b11      	ldr	r3, [pc, #68]	@ (800da00 <vPortFree+0xb8>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4013      	ands	r3, r2
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d019      	beq.n	800d9f8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d115      	bne.n	800d9f8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800da00 <vPortFree+0xb8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	43db      	mvns	r3, r3
 800d9d6:	401a      	ands	r2, r3
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d9dc:	f7fe fed2 	bl	800c784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	4b07      	ldr	r3, [pc, #28]	@ (800da04 <vPortFree+0xbc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	4a06      	ldr	r2, [pc, #24]	@ (800da04 <vPortFree+0xbc>)
 800d9ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d9ee:	6938      	ldr	r0, [r7, #16]
 800d9f0:	f000 f86c 	bl	800dacc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d9f4:	f7fe fed4 	bl	800c7a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9f8:	bf00      	nop
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	20004bd4 	.word	0x20004bd4
 800da04:	20004bcc 	.word	0x20004bcc

0800da08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da0e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800da12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da14:	4b27      	ldr	r3, [pc, #156]	@ (800dab4 <prvHeapInit+0xac>)
 800da16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f003 0307 	and.w	r3, r3, #7
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00c      	beq.n	800da3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	3307      	adds	r3, #7
 800da26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f023 0307 	bic.w	r3, r3, #7
 800da2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	1ad3      	subs	r3, r2, r3
 800da36:	4a1f      	ldr	r2, [pc, #124]	@ (800dab4 <prvHeapInit+0xac>)
 800da38:	4413      	add	r3, r2
 800da3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da40:	4a1d      	ldr	r2, [pc, #116]	@ (800dab8 <prvHeapInit+0xb0>)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da46:	4b1c      	ldr	r3, [pc, #112]	@ (800dab8 <prvHeapInit+0xb0>)
 800da48:	2200      	movs	r2, #0
 800da4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	4413      	add	r3, r2
 800da52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da54:	2208      	movs	r2, #8
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	1a9b      	subs	r3, r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f023 0307 	bic.w	r3, r3, #7
 800da62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4a15      	ldr	r2, [pc, #84]	@ (800dabc <prvHeapInit+0xb4>)
 800da68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da6a:	4b14      	ldr	r3, [pc, #80]	@ (800dabc <prvHeapInit+0xb4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2200      	movs	r2, #0
 800da70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da72:	4b12      	ldr	r3, [pc, #72]	@ (800dabc <prvHeapInit+0xb4>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2200      	movs	r2, #0
 800da78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	1ad2      	subs	r2, r2, r3
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da88:	4b0c      	ldr	r3, [pc, #48]	@ (800dabc <prvHeapInit+0xb4>)
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	4a0a      	ldr	r2, [pc, #40]	@ (800dac0 <prvHeapInit+0xb8>)
 800da96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	4a09      	ldr	r2, [pc, #36]	@ (800dac4 <prvHeapInit+0xbc>)
 800da9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800daa0:	4b09      	ldr	r3, [pc, #36]	@ (800dac8 <prvHeapInit+0xc0>)
 800daa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800daa6:	601a      	str	r2, [r3, #0]
}
 800daa8:	bf00      	nop
 800daaa:	3714      	adds	r7, #20
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr
 800dab4:	20000fc0 	.word	0x20000fc0
 800dab8:	20004bc0 	.word	0x20004bc0
 800dabc:	20004bc8 	.word	0x20004bc8
 800dac0:	20004bd0 	.word	0x20004bd0
 800dac4:	20004bcc 	.word	0x20004bcc
 800dac8:	20004bd4 	.word	0x20004bd4

0800dacc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dad4:	4b28      	ldr	r3, [pc, #160]	@ (800db78 <prvInsertBlockIntoFreeList+0xac>)
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	e002      	b.n	800dae0 <prvInsertBlockIntoFreeList+0x14>
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	60fb      	str	r3, [r7, #12]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d8f7      	bhi.n	800dada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	68ba      	ldr	r2, [r7, #8]
 800daf4:	4413      	add	r3, r2
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d108      	bne.n	800db0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	685a      	ldr	r2, [r3, #4]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	441a      	add	r2, r3
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	441a      	add	r2, r3
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d118      	bne.n	800db54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	4b15      	ldr	r3, [pc, #84]	@ (800db7c <prvInsertBlockIntoFreeList+0xb0>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d00d      	beq.n	800db4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	685a      	ldr	r2, [r3, #4]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	441a      	add	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	e008      	b.n	800db5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db4a:	4b0c      	ldr	r3, [pc, #48]	@ (800db7c <prvInsertBlockIntoFreeList+0xb0>)
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	601a      	str	r2, [r3, #0]
 800db52:	e003      	b.n	800db5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	429a      	cmp	r2, r3
 800db62:	d002      	beq.n	800db6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db6a:	bf00      	nop
 800db6c:	3714      	adds	r7, #20
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	20004bc0 	.word	0x20004bc0
 800db7c:	20004bc8 	.word	0x20004bc8

0800db80 <rand>:
 800db80:	4b16      	ldr	r3, [pc, #88]	@ (800dbdc <rand+0x5c>)
 800db82:	b510      	push	{r4, lr}
 800db84:	681c      	ldr	r4, [r3, #0]
 800db86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800db88:	b9b3      	cbnz	r3, 800dbb8 <rand+0x38>
 800db8a:	2018      	movs	r0, #24
 800db8c:	f000 faa4 	bl	800e0d8 <malloc>
 800db90:	4602      	mov	r2, r0
 800db92:	6320      	str	r0, [r4, #48]	@ 0x30
 800db94:	b920      	cbnz	r0, 800dba0 <rand+0x20>
 800db96:	4b12      	ldr	r3, [pc, #72]	@ (800dbe0 <rand+0x60>)
 800db98:	4812      	ldr	r0, [pc, #72]	@ (800dbe4 <rand+0x64>)
 800db9a:	2152      	movs	r1, #82	@ 0x52
 800db9c:	f000 fa34 	bl	800e008 <__assert_func>
 800dba0:	4911      	ldr	r1, [pc, #68]	@ (800dbe8 <rand+0x68>)
 800dba2:	4b12      	ldr	r3, [pc, #72]	@ (800dbec <rand+0x6c>)
 800dba4:	e9c0 1300 	strd	r1, r3, [r0]
 800dba8:	4b11      	ldr	r3, [pc, #68]	@ (800dbf0 <rand+0x70>)
 800dbaa:	6083      	str	r3, [r0, #8]
 800dbac:	230b      	movs	r3, #11
 800dbae:	8183      	strh	r3, [r0, #12]
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dbb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dbba:	480e      	ldr	r0, [pc, #56]	@ (800dbf4 <rand+0x74>)
 800dbbc:	690b      	ldr	r3, [r1, #16]
 800dbbe:	694c      	ldr	r4, [r1, #20]
 800dbc0:	4a0d      	ldr	r2, [pc, #52]	@ (800dbf8 <rand+0x78>)
 800dbc2:	4358      	muls	r0, r3
 800dbc4:	fb02 0004 	mla	r0, r2, r4, r0
 800dbc8:	fba3 3202 	umull	r3, r2, r3, r2
 800dbcc:	3301      	adds	r3, #1
 800dbce:	eb40 0002 	adc.w	r0, r0, r2
 800dbd2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dbd6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dbda:	bd10      	pop	{r4, pc}
 800dbdc:	20000064 	.word	0x20000064
 800dbe0:	0801d448 	.word	0x0801d448
 800dbe4:	0801d45f 	.word	0x0801d45f
 800dbe8:	abcd330e 	.word	0xabcd330e
 800dbec:	e66d1234 	.word	0xe66d1234
 800dbf0:	0005deec 	.word	0x0005deec
 800dbf4:	5851f42d 	.word	0x5851f42d
 800dbf8:	4c957f2d 	.word	0x4c957f2d

0800dbfc <std>:
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	b510      	push	{r4, lr}
 800dc00:	4604      	mov	r4, r0
 800dc02:	e9c0 3300 	strd	r3, r3, [r0]
 800dc06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc0a:	6083      	str	r3, [r0, #8]
 800dc0c:	8181      	strh	r1, [r0, #12]
 800dc0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc10:	81c2      	strh	r2, [r0, #14]
 800dc12:	6183      	str	r3, [r0, #24]
 800dc14:	4619      	mov	r1, r3
 800dc16:	2208      	movs	r2, #8
 800dc18:	305c      	adds	r0, #92	@ 0x5c
 800dc1a:	f000 f914 	bl	800de46 <memset>
 800dc1e:	4b0d      	ldr	r3, [pc, #52]	@ (800dc54 <std+0x58>)
 800dc20:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc22:	4b0d      	ldr	r3, [pc, #52]	@ (800dc58 <std+0x5c>)
 800dc24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc26:	4b0d      	ldr	r3, [pc, #52]	@ (800dc5c <std+0x60>)
 800dc28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800dc60 <std+0x64>)
 800dc2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800dc64 <std+0x68>)
 800dc30:	6224      	str	r4, [r4, #32]
 800dc32:	429c      	cmp	r4, r3
 800dc34:	d006      	beq.n	800dc44 <std+0x48>
 800dc36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dc3a:	4294      	cmp	r4, r2
 800dc3c:	d002      	beq.n	800dc44 <std+0x48>
 800dc3e:	33d0      	adds	r3, #208	@ 0xd0
 800dc40:	429c      	cmp	r4, r3
 800dc42:	d105      	bne.n	800dc50 <std+0x54>
 800dc44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc4c:	f000 b9ca 	b.w	800dfe4 <__retarget_lock_init_recursive>
 800dc50:	bd10      	pop	{r4, pc}
 800dc52:	bf00      	nop
 800dc54:	0800ddc1 	.word	0x0800ddc1
 800dc58:	0800dde3 	.word	0x0800dde3
 800dc5c:	0800de1b 	.word	0x0800de1b
 800dc60:	0800de3f 	.word	0x0800de3f
 800dc64:	20004bd8 	.word	0x20004bd8

0800dc68 <stdio_exit_handler>:
 800dc68:	4a02      	ldr	r2, [pc, #8]	@ (800dc74 <stdio_exit_handler+0xc>)
 800dc6a:	4903      	ldr	r1, [pc, #12]	@ (800dc78 <stdio_exit_handler+0x10>)
 800dc6c:	4803      	ldr	r0, [pc, #12]	@ (800dc7c <stdio_exit_handler+0x14>)
 800dc6e:	f000 b869 	b.w	800dd44 <_fwalk_sglue>
 800dc72:	bf00      	nop
 800dc74:	20000058 	.word	0x20000058
 800dc78:	0800e919 	.word	0x0800e919
 800dc7c:	20000068 	.word	0x20000068

0800dc80 <cleanup_stdio>:
 800dc80:	6841      	ldr	r1, [r0, #4]
 800dc82:	4b0c      	ldr	r3, [pc, #48]	@ (800dcb4 <cleanup_stdio+0x34>)
 800dc84:	4299      	cmp	r1, r3
 800dc86:	b510      	push	{r4, lr}
 800dc88:	4604      	mov	r4, r0
 800dc8a:	d001      	beq.n	800dc90 <cleanup_stdio+0x10>
 800dc8c:	f000 fe44 	bl	800e918 <_fflush_r>
 800dc90:	68a1      	ldr	r1, [r4, #8]
 800dc92:	4b09      	ldr	r3, [pc, #36]	@ (800dcb8 <cleanup_stdio+0x38>)
 800dc94:	4299      	cmp	r1, r3
 800dc96:	d002      	beq.n	800dc9e <cleanup_stdio+0x1e>
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f000 fe3d 	bl	800e918 <_fflush_r>
 800dc9e:	68e1      	ldr	r1, [r4, #12]
 800dca0:	4b06      	ldr	r3, [pc, #24]	@ (800dcbc <cleanup_stdio+0x3c>)
 800dca2:	4299      	cmp	r1, r3
 800dca4:	d004      	beq.n	800dcb0 <cleanup_stdio+0x30>
 800dca6:	4620      	mov	r0, r4
 800dca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcac:	f000 be34 	b.w	800e918 <_fflush_r>
 800dcb0:	bd10      	pop	{r4, pc}
 800dcb2:	bf00      	nop
 800dcb4:	20004bd8 	.word	0x20004bd8
 800dcb8:	20004c40 	.word	0x20004c40
 800dcbc:	20004ca8 	.word	0x20004ca8

0800dcc0 <global_stdio_init.part.0>:
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	4b0b      	ldr	r3, [pc, #44]	@ (800dcf0 <global_stdio_init.part.0+0x30>)
 800dcc4:	4c0b      	ldr	r4, [pc, #44]	@ (800dcf4 <global_stdio_init.part.0+0x34>)
 800dcc6:	4a0c      	ldr	r2, [pc, #48]	@ (800dcf8 <global_stdio_init.part.0+0x38>)
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	4620      	mov	r0, r4
 800dccc:	2200      	movs	r2, #0
 800dcce:	2104      	movs	r1, #4
 800dcd0:	f7ff ff94 	bl	800dbfc <std>
 800dcd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dcd8:	2201      	movs	r2, #1
 800dcda:	2109      	movs	r1, #9
 800dcdc:	f7ff ff8e 	bl	800dbfc <std>
 800dce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dce4:	2202      	movs	r2, #2
 800dce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcea:	2112      	movs	r1, #18
 800dcec:	f7ff bf86 	b.w	800dbfc <std>
 800dcf0:	20004d10 	.word	0x20004d10
 800dcf4:	20004bd8 	.word	0x20004bd8
 800dcf8:	0800dc69 	.word	0x0800dc69

0800dcfc <__sfp_lock_acquire>:
 800dcfc:	4801      	ldr	r0, [pc, #4]	@ (800dd04 <__sfp_lock_acquire+0x8>)
 800dcfe:	f000 b972 	b.w	800dfe6 <__retarget_lock_acquire_recursive>
 800dd02:	bf00      	nop
 800dd04:	20004d19 	.word	0x20004d19

0800dd08 <__sfp_lock_release>:
 800dd08:	4801      	ldr	r0, [pc, #4]	@ (800dd10 <__sfp_lock_release+0x8>)
 800dd0a:	f000 b96d 	b.w	800dfe8 <__retarget_lock_release_recursive>
 800dd0e:	bf00      	nop
 800dd10:	20004d19 	.word	0x20004d19

0800dd14 <__sinit>:
 800dd14:	b510      	push	{r4, lr}
 800dd16:	4604      	mov	r4, r0
 800dd18:	f7ff fff0 	bl	800dcfc <__sfp_lock_acquire>
 800dd1c:	6a23      	ldr	r3, [r4, #32]
 800dd1e:	b11b      	cbz	r3, 800dd28 <__sinit+0x14>
 800dd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd24:	f7ff bff0 	b.w	800dd08 <__sfp_lock_release>
 800dd28:	4b04      	ldr	r3, [pc, #16]	@ (800dd3c <__sinit+0x28>)
 800dd2a:	6223      	str	r3, [r4, #32]
 800dd2c:	4b04      	ldr	r3, [pc, #16]	@ (800dd40 <__sinit+0x2c>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1f5      	bne.n	800dd20 <__sinit+0xc>
 800dd34:	f7ff ffc4 	bl	800dcc0 <global_stdio_init.part.0>
 800dd38:	e7f2      	b.n	800dd20 <__sinit+0xc>
 800dd3a:	bf00      	nop
 800dd3c:	0800dc81 	.word	0x0800dc81
 800dd40:	20004d10 	.word	0x20004d10

0800dd44 <_fwalk_sglue>:
 800dd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd48:	4607      	mov	r7, r0
 800dd4a:	4688      	mov	r8, r1
 800dd4c:	4614      	mov	r4, r2
 800dd4e:	2600      	movs	r6, #0
 800dd50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd54:	f1b9 0901 	subs.w	r9, r9, #1
 800dd58:	d505      	bpl.n	800dd66 <_fwalk_sglue+0x22>
 800dd5a:	6824      	ldr	r4, [r4, #0]
 800dd5c:	2c00      	cmp	r4, #0
 800dd5e:	d1f7      	bne.n	800dd50 <_fwalk_sglue+0xc>
 800dd60:	4630      	mov	r0, r6
 800dd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd66:	89ab      	ldrh	r3, [r5, #12]
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d907      	bls.n	800dd7c <_fwalk_sglue+0x38>
 800dd6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd70:	3301      	adds	r3, #1
 800dd72:	d003      	beq.n	800dd7c <_fwalk_sglue+0x38>
 800dd74:	4629      	mov	r1, r5
 800dd76:	4638      	mov	r0, r7
 800dd78:	47c0      	blx	r8
 800dd7a:	4306      	orrs	r6, r0
 800dd7c:	3568      	adds	r5, #104	@ 0x68
 800dd7e:	e7e9      	b.n	800dd54 <_fwalk_sglue+0x10>

0800dd80 <siprintf>:
 800dd80:	b40e      	push	{r1, r2, r3}
 800dd82:	b500      	push	{lr}
 800dd84:	b09c      	sub	sp, #112	@ 0x70
 800dd86:	ab1d      	add	r3, sp, #116	@ 0x74
 800dd88:	9002      	str	r0, [sp, #8]
 800dd8a:	9006      	str	r0, [sp, #24]
 800dd8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dd90:	4809      	ldr	r0, [pc, #36]	@ (800ddb8 <siprintf+0x38>)
 800dd92:	9107      	str	r1, [sp, #28]
 800dd94:	9104      	str	r1, [sp, #16]
 800dd96:	4909      	ldr	r1, [pc, #36]	@ (800ddbc <siprintf+0x3c>)
 800dd98:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd9c:	9105      	str	r1, [sp, #20]
 800dd9e:	6800      	ldr	r0, [r0, #0]
 800dda0:	9301      	str	r3, [sp, #4]
 800dda2:	a902      	add	r1, sp, #8
 800dda4:	f000 faaa 	bl	800e2fc <_svfiprintf_r>
 800dda8:	9b02      	ldr	r3, [sp, #8]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	701a      	strb	r2, [r3, #0]
 800ddae:	b01c      	add	sp, #112	@ 0x70
 800ddb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddb4:	b003      	add	sp, #12
 800ddb6:	4770      	bx	lr
 800ddb8:	20000064 	.word	0x20000064
 800ddbc:	ffff0208 	.word	0xffff0208

0800ddc0 <__sread>:
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc8:	f000 f8be 	bl	800df48 <_read_r>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	bfab      	itete	ge
 800ddd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ddd2:	89a3      	ldrhlt	r3, [r4, #12]
 800ddd4:	181b      	addge	r3, r3, r0
 800ddd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ddda:	bfac      	ite	ge
 800dddc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ddde:	81a3      	strhlt	r3, [r4, #12]
 800dde0:	bd10      	pop	{r4, pc}

0800dde2 <__swrite>:
 800dde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde6:	461f      	mov	r7, r3
 800dde8:	898b      	ldrh	r3, [r1, #12]
 800ddea:	05db      	lsls	r3, r3, #23
 800ddec:	4605      	mov	r5, r0
 800ddee:	460c      	mov	r4, r1
 800ddf0:	4616      	mov	r6, r2
 800ddf2:	d505      	bpl.n	800de00 <__swrite+0x1e>
 800ddf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f000 f892 	bl	800df24 <_lseek_r>
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de0a:	81a3      	strh	r3, [r4, #12]
 800de0c:	4632      	mov	r2, r6
 800de0e:	463b      	mov	r3, r7
 800de10:	4628      	mov	r0, r5
 800de12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de16:	f000 b8a9 	b.w	800df6c <_write_r>

0800de1a <__sseek>:
 800de1a:	b510      	push	{r4, lr}
 800de1c:	460c      	mov	r4, r1
 800de1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de22:	f000 f87f 	bl	800df24 <_lseek_r>
 800de26:	1c43      	adds	r3, r0, #1
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	bf15      	itete	ne
 800de2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800de2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800de32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de36:	81a3      	strheq	r3, [r4, #12]
 800de38:	bf18      	it	ne
 800de3a:	81a3      	strhne	r3, [r4, #12]
 800de3c:	bd10      	pop	{r4, pc}

0800de3e <__sclose>:
 800de3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de42:	f000 b809 	b.w	800de58 <_close_r>

0800de46 <memset>:
 800de46:	4402      	add	r2, r0
 800de48:	4603      	mov	r3, r0
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d100      	bne.n	800de50 <memset+0xa>
 800de4e:	4770      	bx	lr
 800de50:	f803 1b01 	strb.w	r1, [r3], #1
 800de54:	e7f9      	b.n	800de4a <memset+0x4>
	...

0800de58 <_close_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4d06      	ldr	r5, [pc, #24]	@ (800de74 <_close_r+0x1c>)
 800de5c:	2300      	movs	r3, #0
 800de5e:	4604      	mov	r4, r0
 800de60:	4608      	mov	r0, r1
 800de62:	602b      	str	r3, [r5, #0]
 800de64:	f7f6 ff16 	bl	8004c94 <_close>
 800de68:	1c43      	adds	r3, r0, #1
 800de6a:	d102      	bne.n	800de72 <_close_r+0x1a>
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	b103      	cbz	r3, 800de72 <_close_r+0x1a>
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	20004d14 	.word	0x20004d14

0800de78 <_reclaim_reent>:
 800de78:	4b29      	ldr	r3, [pc, #164]	@ (800df20 <_reclaim_reent+0xa8>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4283      	cmp	r3, r0
 800de7e:	b570      	push	{r4, r5, r6, lr}
 800de80:	4604      	mov	r4, r0
 800de82:	d04b      	beq.n	800df1c <_reclaim_reent+0xa4>
 800de84:	69c3      	ldr	r3, [r0, #28]
 800de86:	b1ab      	cbz	r3, 800deb4 <_reclaim_reent+0x3c>
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	b16b      	cbz	r3, 800dea8 <_reclaim_reent+0x30>
 800de8c:	2500      	movs	r5, #0
 800de8e:	69e3      	ldr	r3, [r4, #28]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	5959      	ldr	r1, [r3, r5]
 800de94:	2900      	cmp	r1, #0
 800de96:	d13b      	bne.n	800df10 <_reclaim_reent+0x98>
 800de98:	3504      	adds	r5, #4
 800de9a:	2d80      	cmp	r5, #128	@ 0x80
 800de9c:	d1f7      	bne.n	800de8e <_reclaim_reent+0x16>
 800de9e:	69e3      	ldr	r3, [r4, #28]
 800dea0:	4620      	mov	r0, r4
 800dea2:	68d9      	ldr	r1, [r3, #12]
 800dea4:	f000 f8ce 	bl	800e044 <_free_r>
 800dea8:	69e3      	ldr	r3, [r4, #28]
 800deaa:	6819      	ldr	r1, [r3, #0]
 800deac:	b111      	cbz	r1, 800deb4 <_reclaim_reent+0x3c>
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 f8c8 	bl	800e044 <_free_r>
 800deb4:	6961      	ldr	r1, [r4, #20]
 800deb6:	b111      	cbz	r1, 800debe <_reclaim_reent+0x46>
 800deb8:	4620      	mov	r0, r4
 800deba:	f000 f8c3 	bl	800e044 <_free_r>
 800debe:	69e1      	ldr	r1, [r4, #28]
 800dec0:	b111      	cbz	r1, 800dec8 <_reclaim_reent+0x50>
 800dec2:	4620      	mov	r0, r4
 800dec4:	f000 f8be 	bl	800e044 <_free_r>
 800dec8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800deca:	b111      	cbz	r1, 800ded2 <_reclaim_reent+0x5a>
 800decc:	4620      	mov	r0, r4
 800dece:	f000 f8b9 	bl	800e044 <_free_r>
 800ded2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ded4:	b111      	cbz	r1, 800dedc <_reclaim_reent+0x64>
 800ded6:	4620      	mov	r0, r4
 800ded8:	f000 f8b4 	bl	800e044 <_free_r>
 800dedc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dede:	b111      	cbz	r1, 800dee6 <_reclaim_reent+0x6e>
 800dee0:	4620      	mov	r0, r4
 800dee2:	f000 f8af 	bl	800e044 <_free_r>
 800dee6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dee8:	b111      	cbz	r1, 800def0 <_reclaim_reent+0x78>
 800deea:	4620      	mov	r0, r4
 800deec:	f000 f8aa 	bl	800e044 <_free_r>
 800def0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800def2:	b111      	cbz	r1, 800defa <_reclaim_reent+0x82>
 800def4:	4620      	mov	r0, r4
 800def6:	f000 f8a5 	bl	800e044 <_free_r>
 800defa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800defc:	b111      	cbz	r1, 800df04 <_reclaim_reent+0x8c>
 800defe:	4620      	mov	r0, r4
 800df00:	f000 f8a0 	bl	800e044 <_free_r>
 800df04:	6a23      	ldr	r3, [r4, #32]
 800df06:	b14b      	cbz	r3, 800df1c <_reclaim_reent+0xa4>
 800df08:	4620      	mov	r0, r4
 800df0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df0e:	4718      	bx	r3
 800df10:	680e      	ldr	r6, [r1, #0]
 800df12:	4620      	mov	r0, r4
 800df14:	f000 f896 	bl	800e044 <_free_r>
 800df18:	4631      	mov	r1, r6
 800df1a:	e7bb      	b.n	800de94 <_reclaim_reent+0x1c>
 800df1c:	bd70      	pop	{r4, r5, r6, pc}
 800df1e:	bf00      	nop
 800df20:	20000064 	.word	0x20000064

0800df24 <_lseek_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4d07      	ldr	r5, [pc, #28]	@ (800df44 <_lseek_r+0x20>)
 800df28:	4604      	mov	r4, r0
 800df2a:	4608      	mov	r0, r1
 800df2c:	4611      	mov	r1, r2
 800df2e:	2200      	movs	r2, #0
 800df30:	602a      	str	r2, [r5, #0]
 800df32:	461a      	mov	r2, r3
 800df34:	f7f6 fed5 	bl	8004ce2 <_lseek>
 800df38:	1c43      	adds	r3, r0, #1
 800df3a:	d102      	bne.n	800df42 <_lseek_r+0x1e>
 800df3c:	682b      	ldr	r3, [r5, #0]
 800df3e:	b103      	cbz	r3, 800df42 <_lseek_r+0x1e>
 800df40:	6023      	str	r3, [r4, #0]
 800df42:	bd38      	pop	{r3, r4, r5, pc}
 800df44:	20004d14 	.word	0x20004d14

0800df48 <_read_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4d07      	ldr	r5, [pc, #28]	@ (800df68 <_read_r+0x20>)
 800df4c:	4604      	mov	r4, r0
 800df4e:	4608      	mov	r0, r1
 800df50:	4611      	mov	r1, r2
 800df52:	2200      	movs	r2, #0
 800df54:	602a      	str	r2, [r5, #0]
 800df56:	461a      	mov	r2, r3
 800df58:	f7f6 fe63 	bl	8004c22 <_read>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d102      	bne.n	800df66 <_read_r+0x1e>
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	b103      	cbz	r3, 800df66 <_read_r+0x1e>
 800df64:	6023      	str	r3, [r4, #0]
 800df66:	bd38      	pop	{r3, r4, r5, pc}
 800df68:	20004d14 	.word	0x20004d14

0800df6c <_write_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	4d07      	ldr	r5, [pc, #28]	@ (800df8c <_write_r+0x20>)
 800df70:	4604      	mov	r4, r0
 800df72:	4608      	mov	r0, r1
 800df74:	4611      	mov	r1, r2
 800df76:	2200      	movs	r2, #0
 800df78:	602a      	str	r2, [r5, #0]
 800df7a:	461a      	mov	r2, r3
 800df7c:	f7f6 fe6e 	bl	8004c5c <_write>
 800df80:	1c43      	adds	r3, r0, #1
 800df82:	d102      	bne.n	800df8a <_write_r+0x1e>
 800df84:	682b      	ldr	r3, [r5, #0]
 800df86:	b103      	cbz	r3, 800df8a <_write_r+0x1e>
 800df88:	6023      	str	r3, [r4, #0]
 800df8a:	bd38      	pop	{r3, r4, r5, pc}
 800df8c:	20004d14 	.word	0x20004d14

0800df90 <__errno>:
 800df90:	4b01      	ldr	r3, [pc, #4]	@ (800df98 <__errno+0x8>)
 800df92:	6818      	ldr	r0, [r3, #0]
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	20000064 	.word	0x20000064

0800df9c <__libc_init_array>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	4d0d      	ldr	r5, [pc, #52]	@ (800dfd4 <__libc_init_array+0x38>)
 800dfa0:	4c0d      	ldr	r4, [pc, #52]	@ (800dfd8 <__libc_init_array+0x3c>)
 800dfa2:	1b64      	subs	r4, r4, r5
 800dfa4:	10a4      	asrs	r4, r4, #2
 800dfa6:	2600      	movs	r6, #0
 800dfa8:	42a6      	cmp	r6, r4
 800dfaa:	d109      	bne.n	800dfc0 <__libc_init_array+0x24>
 800dfac:	4d0b      	ldr	r5, [pc, #44]	@ (800dfdc <__libc_init_array+0x40>)
 800dfae:	4c0c      	ldr	r4, [pc, #48]	@ (800dfe0 <__libc_init_array+0x44>)
 800dfb0:	f000 fff0 	bl	800ef94 <_init>
 800dfb4:	1b64      	subs	r4, r4, r5
 800dfb6:	10a4      	asrs	r4, r4, #2
 800dfb8:	2600      	movs	r6, #0
 800dfba:	42a6      	cmp	r6, r4
 800dfbc:	d105      	bne.n	800dfca <__libc_init_array+0x2e>
 800dfbe:	bd70      	pop	{r4, r5, r6, pc}
 800dfc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfc4:	4798      	blx	r3
 800dfc6:	3601      	adds	r6, #1
 800dfc8:	e7ee      	b.n	800dfa8 <__libc_init_array+0xc>
 800dfca:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfce:	4798      	blx	r3
 800dfd0:	3601      	adds	r6, #1
 800dfd2:	e7f2      	b.n	800dfba <__libc_init_array+0x1e>
 800dfd4:	0801d530 	.word	0x0801d530
 800dfd8:	0801d530 	.word	0x0801d530
 800dfdc:	0801d530 	.word	0x0801d530
 800dfe0:	0801d534 	.word	0x0801d534

0800dfe4 <__retarget_lock_init_recursive>:
 800dfe4:	4770      	bx	lr

0800dfe6 <__retarget_lock_acquire_recursive>:
 800dfe6:	4770      	bx	lr

0800dfe8 <__retarget_lock_release_recursive>:
 800dfe8:	4770      	bx	lr

0800dfea <memcpy>:
 800dfea:	440a      	add	r2, r1
 800dfec:	4291      	cmp	r1, r2
 800dfee:	f100 33ff 	add.w	r3, r0, #4294967295
 800dff2:	d100      	bne.n	800dff6 <memcpy+0xc>
 800dff4:	4770      	bx	lr
 800dff6:	b510      	push	{r4, lr}
 800dff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e000:	4291      	cmp	r1, r2
 800e002:	d1f9      	bne.n	800dff8 <memcpy+0xe>
 800e004:	bd10      	pop	{r4, pc}
	...

0800e008 <__assert_func>:
 800e008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e00a:	4614      	mov	r4, r2
 800e00c:	461a      	mov	r2, r3
 800e00e:	4b09      	ldr	r3, [pc, #36]	@ (800e034 <__assert_func+0x2c>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4605      	mov	r5, r0
 800e014:	68d8      	ldr	r0, [r3, #12]
 800e016:	b954      	cbnz	r4, 800e02e <__assert_func+0x26>
 800e018:	4b07      	ldr	r3, [pc, #28]	@ (800e038 <__assert_func+0x30>)
 800e01a:	461c      	mov	r4, r3
 800e01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e020:	9100      	str	r1, [sp, #0]
 800e022:	462b      	mov	r3, r5
 800e024:	4905      	ldr	r1, [pc, #20]	@ (800e03c <__assert_func+0x34>)
 800e026:	f000 fc9f 	bl	800e968 <fiprintf>
 800e02a:	f000 fcd9 	bl	800e9e0 <abort>
 800e02e:	4b04      	ldr	r3, [pc, #16]	@ (800e040 <__assert_func+0x38>)
 800e030:	e7f4      	b.n	800e01c <__assert_func+0x14>
 800e032:	bf00      	nop
 800e034:	20000064 	.word	0x20000064
 800e038:	0801d4f2 	.word	0x0801d4f2
 800e03c:	0801d4c4 	.word	0x0801d4c4
 800e040:	0801d4b7 	.word	0x0801d4b7

0800e044 <_free_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4605      	mov	r5, r0
 800e048:	2900      	cmp	r1, #0
 800e04a:	d041      	beq.n	800e0d0 <_free_r+0x8c>
 800e04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e050:	1f0c      	subs	r4, r1, #4
 800e052:	2b00      	cmp	r3, #0
 800e054:	bfb8      	it	lt
 800e056:	18e4      	addlt	r4, r4, r3
 800e058:	f000 f8e8 	bl	800e22c <__malloc_lock>
 800e05c:	4a1d      	ldr	r2, [pc, #116]	@ (800e0d4 <_free_r+0x90>)
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	b933      	cbnz	r3, 800e070 <_free_r+0x2c>
 800e062:	6063      	str	r3, [r4, #4]
 800e064:	6014      	str	r4, [r2, #0]
 800e066:	4628      	mov	r0, r5
 800e068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e06c:	f000 b8e4 	b.w	800e238 <__malloc_unlock>
 800e070:	42a3      	cmp	r3, r4
 800e072:	d908      	bls.n	800e086 <_free_r+0x42>
 800e074:	6820      	ldr	r0, [r4, #0]
 800e076:	1821      	adds	r1, r4, r0
 800e078:	428b      	cmp	r3, r1
 800e07a:	bf01      	itttt	eq
 800e07c:	6819      	ldreq	r1, [r3, #0]
 800e07e:	685b      	ldreq	r3, [r3, #4]
 800e080:	1809      	addeq	r1, r1, r0
 800e082:	6021      	streq	r1, [r4, #0]
 800e084:	e7ed      	b.n	800e062 <_free_r+0x1e>
 800e086:	461a      	mov	r2, r3
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	b10b      	cbz	r3, 800e090 <_free_r+0x4c>
 800e08c:	42a3      	cmp	r3, r4
 800e08e:	d9fa      	bls.n	800e086 <_free_r+0x42>
 800e090:	6811      	ldr	r1, [r2, #0]
 800e092:	1850      	adds	r0, r2, r1
 800e094:	42a0      	cmp	r0, r4
 800e096:	d10b      	bne.n	800e0b0 <_free_r+0x6c>
 800e098:	6820      	ldr	r0, [r4, #0]
 800e09a:	4401      	add	r1, r0
 800e09c:	1850      	adds	r0, r2, r1
 800e09e:	4283      	cmp	r3, r0
 800e0a0:	6011      	str	r1, [r2, #0]
 800e0a2:	d1e0      	bne.n	800e066 <_free_r+0x22>
 800e0a4:	6818      	ldr	r0, [r3, #0]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	6053      	str	r3, [r2, #4]
 800e0aa:	4408      	add	r0, r1
 800e0ac:	6010      	str	r0, [r2, #0]
 800e0ae:	e7da      	b.n	800e066 <_free_r+0x22>
 800e0b0:	d902      	bls.n	800e0b8 <_free_r+0x74>
 800e0b2:	230c      	movs	r3, #12
 800e0b4:	602b      	str	r3, [r5, #0]
 800e0b6:	e7d6      	b.n	800e066 <_free_r+0x22>
 800e0b8:	6820      	ldr	r0, [r4, #0]
 800e0ba:	1821      	adds	r1, r4, r0
 800e0bc:	428b      	cmp	r3, r1
 800e0be:	bf04      	itt	eq
 800e0c0:	6819      	ldreq	r1, [r3, #0]
 800e0c2:	685b      	ldreq	r3, [r3, #4]
 800e0c4:	6063      	str	r3, [r4, #4]
 800e0c6:	bf04      	itt	eq
 800e0c8:	1809      	addeq	r1, r1, r0
 800e0ca:	6021      	streq	r1, [r4, #0]
 800e0cc:	6054      	str	r4, [r2, #4]
 800e0ce:	e7ca      	b.n	800e066 <_free_r+0x22>
 800e0d0:	bd38      	pop	{r3, r4, r5, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20004d20 	.word	0x20004d20

0800e0d8 <malloc>:
 800e0d8:	4b02      	ldr	r3, [pc, #8]	@ (800e0e4 <malloc+0xc>)
 800e0da:	4601      	mov	r1, r0
 800e0dc:	6818      	ldr	r0, [r3, #0]
 800e0de:	f000 b825 	b.w	800e12c <_malloc_r>
 800e0e2:	bf00      	nop
 800e0e4:	20000064 	.word	0x20000064

0800e0e8 <sbrk_aligned>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	4e0f      	ldr	r6, [pc, #60]	@ (800e128 <sbrk_aligned+0x40>)
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	6831      	ldr	r1, [r6, #0]
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	b911      	cbnz	r1, 800e0fa <sbrk_aligned+0x12>
 800e0f4:	f000 fc64 	bl	800e9c0 <_sbrk_r>
 800e0f8:	6030      	str	r0, [r6, #0]
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	f000 fc5f 	bl	800e9c0 <_sbrk_r>
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	d103      	bne.n	800e10e <sbrk_aligned+0x26>
 800e106:	f04f 34ff 	mov.w	r4, #4294967295
 800e10a:	4620      	mov	r0, r4
 800e10c:	bd70      	pop	{r4, r5, r6, pc}
 800e10e:	1cc4      	adds	r4, r0, #3
 800e110:	f024 0403 	bic.w	r4, r4, #3
 800e114:	42a0      	cmp	r0, r4
 800e116:	d0f8      	beq.n	800e10a <sbrk_aligned+0x22>
 800e118:	1a21      	subs	r1, r4, r0
 800e11a:	4628      	mov	r0, r5
 800e11c:	f000 fc50 	bl	800e9c0 <_sbrk_r>
 800e120:	3001      	adds	r0, #1
 800e122:	d1f2      	bne.n	800e10a <sbrk_aligned+0x22>
 800e124:	e7ef      	b.n	800e106 <sbrk_aligned+0x1e>
 800e126:	bf00      	nop
 800e128:	20004d1c 	.word	0x20004d1c

0800e12c <_malloc_r>:
 800e12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e130:	1ccd      	adds	r5, r1, #3
 800e132:	f025 0503 	bic.w	r5, r5, #3
 800e136:	3508      	adds	r5, #8
 800e138:	2d0c      	cmp	r5, #12
 800e13a:	bf38      	it	cc
 800e13c:	250c      	movcc	r5, #12
 800e13e:	2d00      	cmp	r5, #0
 800e140:	4606      	mov	r6, r0
 800e142:	db01      	blt.n	800e148 <_malloc_r+0x1c>
 800e144:	42a9      	cmp	r1, r5
 800e146:	d904      	bls.n	800e152 <_malloc_r+0x26>
 800e148:	230c      	movs	r3, #12
 800e14a:	6033      	str	r3, [r6, #0]
 800e14c:	2000      	movs	r0, #0
 800e14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e228 <_malloc_r+0xfc>
 800e156:	f000 f869 	bl	800e22c <__malloc_lock>
 800e15a:	f8d8 3000 	ldr.w	r3, [r8]
 800e15e:	461c      	mov	r4, r3
 800e160:	bb44      	cbnz	r4, 800e1b4 <_malloc_r+0x88>
 800e162:	4629      	mov	r1, r5
 800e164:	4630      	mov	r0, r6
 800e166:	f7ff ffbf 	bl	800e0e8 <sbrk_aligned>
 800e16a:	1c43      	adds	r3, r0, #1
 800e16c:	4604      	mov	r4, r0
 800e16e:	d158      	bne.n	800e222 <_malloc_r+0xf6>
 800e170:	f8d8 4000 	ldr.w	r4, [r8]
 800e174:	4627      	mov	r7, r4
 800e176:	2f00      	cmp	r7, #0
 800e178:	d143      	bne.n	800e202 <_malloc_r+0xd6>
 800e17a:	2c00      	cmp	r4, #0
 800e17c:	d04b      	beq.n	800e216 <_malloc_r+0xea>
 800e17e:	6823      	ldr	r3, [r4, #0]
 800e180:	4639      	mov	r1, r7
 800e182:	4630      	mov	r0, r6
 800e184:	eb04 0903 	add.w	r9, r4, r3
 800e188:	f000 fc1a 	bl	800e9c0 <_sbrk_r>
 800e18c:	4581      	cmp	r9, r0
 800e18e:	d142      	bne.n	800e216 <_malloc_r+0xea>
 800e190:	6821      	ldr	r1, [r4, #0]
 800e192:	1a6d      	subs	r5, r5, r1
 800e194:	4629      	mov	r1, r5
 800e196:	4630      	mov	r0, r6
 800e198:	f7ff ffa6 	bl	800e0e8 <sbrk_aligned>
 800e19c:	3001      	adds	r0, #1
 800e19e:	d03a      	beq.n	800e216 <_malloc_r+0xea>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	442b      	add	r3, r5
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	bb62      	cbnz	r2, 800e208 <_malloc_r+0xdc>
 800e1ae:	f8c8 7000 	str.w	r7, [r8]
 800e1b2:	e00f      	b.n	800e1d4 <_malloc_r+0xa8>
 800e1b4:	6822      	ldr	r2, [r4, #0]
 800e1b6:	1b52      	subs	r2, r2, r5
 800e1b8:	d420      	bmi.n	800e1fc <_malloc_r+0xd0>
 800e1ba:	2a0b      	cmp	r2, #11
 800e1bc:	d917      	bls.n	800e1ee <_malloc_r+0xc2>
 800e1be:	1961      	adds	r1, r4, r5
 800e1c0:	42a3      	cmp	r3, r4
 800e1c2:	6025      	str	r5, [r4, #0]
 800e1c4:	bf18      	it	ne
 800e1c6:	6059      	strne	r1, [r3, #4]
 800e1c8:	6863      	ldr	r3, [r4, #4]
 800e1ca:	bf08      	it	eq
 800e1cc:	f8c8 1000 	streq.w	r1, [r8]
 800e1d0:	5162      	str	r2, [r4, r5]
 800e1d2:	604b      	str	r3, [r1, #4]
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f000 f82f 	bl	800e238 <__malloc_unlock>
 800e1da:	f104 000b 	add.w	r0, r4, #11
 800e1de:	1d23      	adds	r3, r4, #4
 800e1e0:	f020 0007 	bic.w	r0, r0, #7
 800e1e4:	1ac2      	subs	r2, r0, r3
 800e1e6:	bf1c      	itt	ne
 800e1e8:	1a1b      	subne	r3, r3, r0
 800e1ea:	50a3      	strne	r3, [r4, r2]
 800e1ec:	e7af      	b.n	800e14e <_malloc_r+0x22>
 800e1ee:	6862      	ldr	r2, [r4, #4]
 800e1f0:	42a3      	cmp	r3, r4
 800e1f2:	bf0c      	ite	eq
 800e1f4:	f8c8 2000 	streq.w	r2, [r8]
 800e1f8:	605a      	strne	r2, [r3, #4]
 800e1fa:	e7eb      	b.n	800e1d4 <_malloc_r+0xa8>
 800e1fc:	4623      	mov	r3, r4
 800e1fe:	6864      	ldr	r4, [r4, #4]
 800e200:	e7ae      	b.n	800e160 <_malloc_r+0x34>
 800e202:	463c      	mov	r4, r7
 800e204:	687f      	ldr	r7, [r7, #4]
 800e206:	e7b6      	b.n	800e176 <_malloc_r+0x4a>
 800e208:	461a      	mov	r2, r3
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	42a3      	cmp	r3, r4
 800e20e:	d1fb      	bne.n	800e208 <_malloc_r+0xdc>
 800e210:	2300      	movs	r3, #0
 800e212:	6053      	str	r3, [r2, #4]
 800e214:	e7de      	b.n	800e1d4 <_malloc_r+0xa8>
 800e216:	230c      	movs	r3, #12
 800e218:	6033      	str	r3, [r6, #0]
 800e21a:	4630      	mov	r0, r6
 800e21c:	f000 f80c 	bl	800e238 <__malloc_unlock>
 800e220:	e794      	b.n	800e14c <_malloc_r+0x20>
 800e222:	6005      	str	r5, [r0, #0]
 800e224:	e7d6      	b.n	800e1d4 <_malloc_r+0xa8>
 800e226:	bf00      	nop
 800e228:	20004d20 	.word	0x20004d20

0800e22c <__malloc_lock>:
 800e22c:	4801      	ldr	r0, [pc, #4]	@ (800e234 <__malloc_lock+0x8>)
 800e22e:	f7ff beda 	b.w	800dfe6 <__retarget_lock_acquire_recursive>
 800e232:	bf00      	nop
 800e234:	20004d18 	.word	0x20004d18

0800e238 <__malloc_unlock>:
 800e238:	4801      	ldr	r0, [pc, #4]	@ (800e240 <__malloc_unlock+0x8>)
 800e23a:	f7ff bed5 	b.w	800dfe8 <__retarget_lock_release_recursive>
 800e23e:	bf00      	nop
 800e240:	20004d18 	.word	0x20004d18

0800e244 <__ssputs_r>:
 800e244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e248:	688e      	ldr	r6, [r1, #8]
 800e24a:	461f      	mov	r7, r3
 800e24c:	42be      	cmp	r6, r7
 800e24e:	680b      	ldr	r3, [r1, #0]
 800e250:	4682      	mov	sl, r0
 800e252:	460c      	mov	r4, r1
 800e254:	4690      	mov	r8, r2
 800e256:	d82d      	bhi.n	800e2b4 <__ssputs_r+0x70>
 800e258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e25c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e260:	d026      	beq.n	800e2b0 <__ssputs_r+0x6c>
 800e262:	6965      	ldr	r5, [r4, #20]
 800e264:	6909      	ldr	r1, [r1, #16]
 800e266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e26a:	eba3 0901 	sub.w	r9, r3, r1
 800e26e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e272:	1c7b      	adds	r3, r7, #1
 800e274:	444b      	add	r3, r9
 800e276:	106d      	asrs	r5, r5, #1
 800e278:	429d      	cmp	r5, r3
 800e27a:	bf38      	it	cc
 800e27c:	461d      	movcc	r5, r3
 800e27e:	0553      	lsls	r3, r2, #21
 800e280:	d527      	bpl.n	800e2d2 <__ssputs_r+0x8e>
 800e282:	4629      	mov	r1, r5
 800e284:	f7ff ff52 	bl	800e12c <_malloc_r>
 800e288:	4606      	mov	r6, r0
 800e28a:	b360      	cbz	r0, 800e2e6 <__ssputs_r+0xa2>
 800e28c:	6921      	ldr	r1, [r4, #16]
 800e28e:	464a      	mov	r2, r9
 800e290:	f7ff feab 	bl	800dfea <memcpy>
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e29a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e29e:	81a3      	strh	r3, [r4, #12]
 800e2a0:	6126      	str	r6, [r4, #16]
 800e2a2:	6165      	str	r5, [r4, #20]
 800e2a4:	444e      	add	r6, r9
 800e2a6:	eba5 0509 	sub.w	r5, r5, r9
 800e2aa:	6026      	str	r6, [r4, #0]
 800e2ac:	60a5      	str	r5, [r4, #8]
 800e2ae:	463e      	mov	r6, r7
 800e2b0:	42be      	cmp	r6, r7
 800e2b2:	d900      	bls.n	800e2b6 <__ssputs_r+0x72>
 800e2b4:	463e      	mov	r6, r7
 800e2b6:	6820      	ldr	r0, [r4, #0]
 800e2b8:	4632      	mov	r2, r6
 800e2ba:	4641      	mov	r1, r8
 800e2bc:	f000 fb66 	bl	800e98c <memmove>
 800e2c0:	68a3      	ldr	r3, [r4, #8]
 800e2c2:	1b9b      	subs	r3, r3, r6
 800e2c4:	60a3      	str	r3, [r4, #8]
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	4433      	add	r3, r6
 800e2ca:	6023      	str	r3, [r4, #0]
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2d2:	462a      	mov	r2, r5
 800e2d4:	f000 fb8b 	bl	800e9ee <_realloc_r>
 800e2d8:	4606      	mov	r6, r0
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d1e0      	bne.n	800e2a0 <__ssputs_r+0x5c>
 800e2de:	6921      	ldr	r1, [r4, #16]
 800e2e0:	4650      	mov	r0, sl
 800e2e2:	f7ff feaf 	bl	800e044 <_free_r>
 800e2e6:	230c      	movs	r3, #12
 800e2e8:	f8ca 3000 	str.w	r3, [sl]
 800e2ec:	89a3      	ldrh	r3, [r4, #12]
 800e2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2f2:	81a3      	strh	r3, [r4, #12]
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	e7e9      	b.n	800e2ce <__ssputs_r+0x8a>
	...

0800e2fc <_svfiprintf_r>:
 800e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	4698      	mov	r8, r3
 800e302:	898b      	ldrh	r3, [r1, #12]
 800e304:	061b      	lsls	r3, r3, #24
 800e306:	b09d      	sub	sp, #116	@ 0x74
 800e308:	4607      	mov	r7, r0
 800e30a:	460d      	mov	r5, r1
 800e30c:	4614      	mov	r4, r2
 800e30e:	d510      	bpl.n	800e332 <_svfiprintf_r+0x36>
 800e310:	690b      	ldr	r3, [r1, #16]
 800e312:	b973      	cbnz	r3, 800e332 <_svfiprintf_r+0x36>
 800e314:	2140      	movs	r1, #64	@ 0x40
 800e316:	f7ff ff09 	bl	800e12c <_malloc_r>
 800e31a:	6028      	str	r0, [r5, #0]
 800e31c:	6128      	str	r0, [r5, #16]
 800e31e:	b930      	cbnz	r0, 800e32e <_svfiprintf_r+0x32>
 800e320:	230c      	movs	r3, #12
 800e322:	603b      	str	r3, [r7, #0]
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	b01d      	add	sp, #116	@ 0x74
 800e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e32e:	2340      	movs	r3, #64	@ 0x40
 800e330:	616b      	str	r3, [r5, #20]
 800e332:	2300      	movs	r3, #0
 800e334:	9309      	str	r3, [sp, #36]	@ 0x24
 800e336:	2320      	movs	r3, #32
 800e338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e33c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e340:	2330      	movs	r3, #48	@ 0x30
 800e342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e4e0 <_svfiprintf_r+0x1e4>
 800e346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e34a:	f04f 0901 	mov.w	r9, #1
 800e34e:	4623      	mov	r3, r4
 800e350:	469a      	mov	sl, r3
 800e352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e356:	b10a      	cbz	r2, 800e35c <_svfiprintf_r+0x60>
 800e358:	2a25      	cmp	r2, #37	@ 0x25
 800e35a:	d1f9      	bne.n	800e350 <_svfiprintf_r+0x54>
 800e35c:	ebba 0b04 	subs.w	fp, sl, r4
 800e360:	d00b      	beq.n	800e37a <_svfiprintf_r+0x7e>
 800e362:	465b      	mov	r3, fp
 800e364:	4622      	mov	r2, r4
 800e366:	4629      	mov	r1, r5
 800e368:	4638      	mov	r0, r7
 800e36a:	f7ff ff6b 	bl	800e244 <__ssputs_r>
 800e36e:	3001      	adds	r0, #1
 800e370:	f000 80a7 	beq.w	800e4c2 <_svfiprintf_r+0x1c6>
 800e374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e376:	445a      	add	r2, fp
 800e378:	9209      	str	r2, [sp, #36]	@ 0x24
 800e37a:	f89a 3000 	ldrb.w	r3, [sl]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 809f 	beq.w	800e4c2 <_svfiprintf_r+0x1c6>
 800e384:	2300      	movs	r3, #0
 800e386:	f04f 32ff 	mov.w	r2, #4294967295
 800e38a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e38e:	f10a 0a01 	add.w	sl, sl, #1
 800e392:	9304      	str	r3, [sp, #16]
 800e394:	9307      	str	r3, [sp, #28]
 800e396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e39a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e39c:	4654      	mov	r4, sl
 800e39e:	2205      	movs	r2, #5
 800e3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3a4:	484e      	ldr	r0, [pc, #312]	@ (800e4e0 <_svfiprintf_r+0x1e4>)
 800e3a6:	f7f1 ff33 	bl	8000210 <memchr>
 800e3aa:	9a04      	ldr	r2, [sp, #16]
 800e3ac:	b9d8      	cbnz	r0, 800e3e6 <_svfiprintf_r+0xea>
 800e3ae:	06d0      	lsls	r0, r2, #27
 800e3b0:	bf44      	itt	mi
 800e3b2:	2320      	movmi	r3, #32
 800e3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3b8:	0711      	lsls	r1, r2, #28
 800e3ba:	bf44      	itt	mi
 800e3bc:	232b      	movmi	r3, #43	@ 0x2b
 800e3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3c8:	d015      	beq.n	800e3f6 <_svfiprintf_r+0xfa>
 800e3ca:	9a07      	ldr	r2, [sp, #28]
 800e3cc:	4654      	mov	r4, sl
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	f04f 0c0a 	mov.w	ip, #10
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3da:	3b30      	subs	r3, #48	@ 0x30
 800e3dc:	2b09      	cmp	r3, #9
 800e3de:	d94b      	bls.n	800e478 <_svfiprintf_r+0x17c>
 800e3e0:	b1b0      	cbz	r0, 800e410 <_svfiprintf_r+0x114>
 800e3e2:	9207      	str	r2, [sp, #28]
 800e3e4:	e014      	b.n	800e410 <_svfiprintf_r+0x114>
 800e3e6:	eba0 0308 	sub.w	r3, r0, r8
 800e3ea:	fa09 f303 	lsl.w	r3, r9, r3
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	9304      	str	r3, [sp, #16]
 800e3f2:	46a2      	mov	sl, r4
 800e3f4:	e7d2      	b.n	800e39c <_svfiprintf_r+0xa0>
 800e3f6:	9b03      	ldr	r3, [sp, #12]
 800e3f8:	1d19      	adds	r1, r3, #4
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	9103      	str	r1, [sp, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	bfbb      	ittet	lt
 800e402:	425b      	neglt	r3, r3
 800e404:	f042 0202 	orrlt.w	r2, r2, #2
 800e408:	9307      	strge	r3, [sp, #28]
 800e40a:	9307      	strlt	r3, [sp, #28]
 800e40c:	bfb8      	it	lt
 800e40e:	9204      	strlt	r2, [sp, #16]
 800e410:	7823      	ldrb	r3, [r4, #0]
 800e412:	2b2e      	cmp	r3, #46	@ 0x2e
 800e414:	d10a      	bne.n	800e42c <_svfiprintf_r+0x130>
 800e416:	7863      	ldrb	r3, [r4, #1]
 800e418:	2b2a      	cmp	r3, #42	@ 0x2a
 800e41a:	d132      	bne.n	800e482 <_svfiprintf_r+0x186>
 800e41c:	9b03      	ldr	r3, [sp, #12]
 800e41e:	1d1a      	adds	r2, r3, #4
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	9203      	str	r2, [sp, #12]
 800e424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e428:	3402      	adds	r4, #2
 800e42a:	9305      	str	r3, [sp, #20]
 800e42c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e4f0 <_svfiprintf_r+0x1f4>
 800e430:	7821      	ldrb	r1, [r4, #0]
 800e432:	2203      	movs	r2, #3
 800e434:	4650      	mov	r0, sl
 800e436:	f7f1 feeb 	bl	8000210 <memchr>
 800e43a:	b138      	cbz	r0, 800e44c <_svfiprintf_r+0x150>
 800e43c:	9b04      	ldr	r3, [sp, #16]
 800e43e:	eba0 000a 	sub.w	r0, r0, sl
 800e442:	2240      	movs	r2, #64	@ 0x40
 800e444:	4082      	lsls	r2, r0
 800e446:	4313      	orrs	r3, r2
 800e448:	3401      	adds	r4, #1
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e450:	4824      	ldr	r0, [pc, #144]	@ (800e4e4 <_svfiprintf_r+0x1e8>)
 800e452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e456:	2206      	movs	r2, #6
 800e458:	f7f1 feda 	bl	8000210 <memchr>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d036      	beq.n	800e4ce <_svfiprintf_r+0x1d2>
 800e460:	4b21      	ldr	r3, [pc, #132]	@ (800e4e8 <_svfiprintf_r+0x1ec>)
 800e462:	bb1b      	cbnz	r3, 800e4ac <_svfiprintf_r+0x1b0>
 800e464:	9b03      	ldr	r3, [sp, #12]
 800e466:	3307      	adds	r3, #7
 800e468:	f023 0307 	bic.w	r3, r3, #7
 800e46c:	3308      	adds	r3, #8
 800e46e:	9303      	str	r3, [sp, #12]
 800e470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e472:	4433      	add	r3, r6
 800e474:	9309      	str	r3, [sp, #36]	@ 0x24
 800e476:	e76a      	b.n	800e34e <_svfiprintf_r+0x52>
 800e478:	fb0c 3202 	mla	r2, ip, r2, r3
 800e47c:	460c      	mov	r4, r1
 800e47e:	2001      	movs	r0, #1
 800e480:	e7a8      	b.n	800e3d4 <_svfiprintf_r+0xd8>
 800e482:	2300      	movs	r3, #0
 800e484:	3401      	adds	r4, #1
 800e486:	9305      	str	r3, [sp, #20]
 800e488:	4619      	mov	r1, r3
 800e48a:	f04f 0c0a 	mov.w	ip, #10
 800e48e:	4620      	mov	r0, r4
 800e490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e494:	3a30      	subs	r2, #48	@ 0x30
 800e496:	2a09      	cmp	r2, #9
 800e498:	d903      	bls.n	800e4a2 <_svfiprintf_r+0x1a6>
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0c6      	beq.n	800e42c <_svfiprintf_r+0x130>
 800e49e:	9105      	str	r1, [sp, #20]
 800e4a0:	e7c4      	b.n	800e42c <_svfiprintf_r+0x130>
 800e4a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e7f0      	b.n	800e48e <_svfiprintf_r+0x192>
 800e4ac:	ab03      	add	r3, sp, #12
 800e4ae:	9300      	str	r3, [sp, #0]
 800e4b0:	462a      	mov	r2, r5
 800e4b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e4ec <_svfiprintf_r+0x1f0>)
 800e4b4:	a904      	add	r1, sp, #16
 800e4b6:	4638      	mov	r0, r7
 800e4b8:	f3af 8000 	nop.w
 800e4bc:	1c42      	adds	r2, r0, #1
 800e4be:	4606      	mov	r6, r0
 800e4c0:	d1d6      	bne.n	800e470 <_svfiprintf_r+0x174>
 800e4c2:	89ab      	ldrh	r3, [r5, #12]
 800e4c4:	065b      	lsls	r3, r3, #25
 800e4c6:	f53f af2d 	bmi.w	800e324 <_svfiprintf_r+0x28>
 800e4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4cc:	e72c      	b.n	800e328 <_svfiprintf_r+0x2c>
 800e4ce:	ab03      	add	r3, sp, #12
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	462a      	mov	r2, r5
 800e4d4:	4b05      	ldr	r3, [pc, #20]	@ (800e4ec <_svfiprintf_r+0x1f0>)
 800e4d6:	a904      	add	r1, sp, #16
 800e4d8:	4638      	mov	r0, r7
 800e4da:	f000 f879 	bl	800e5d0 <_printf_i>
 800e4de:	e7ed      	b.n	800e4bc <_svfiprintf_r+0x1c0>
 800e4e0:	0801d4f3 	.word	0x0801d4f3
 800e4e4:	0801d4fd 	.word	0x0801d4fd
 800e4e8:	00000000 	.word	0x00000000
 800e4ec:	0800e245 	.word	0x0800e245
 800e4f0:	0801d4f9 	.word	0x0801d4f9

0800e4f4 <_printf_common>:
 800e4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f8:	4616      	mov	r6, r2
 800e4fa:	4698      	mov	r8, r3
 800e4fc:	688a      	ldr	r2, [r1, #8]
 800e4fe:	690b      	ldr	r3, [r1, #16]
 800e500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e504:	4293      	cmp	r3, r2
 800e506:	bfb8      	it	lt
 800e508:	4613      	movlt	r3, r2
 800e50a:	6033      	str	r3, [r6, #0]
 800e50c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e510:	4607      	mov	r7, r0
 800e512:	460c      	mov	r4, r1
 800e514:	b10a      	cbz	r2, 800e51a <_printf_common+0x26>
 800e516:	3301      	adds	r3, #1
 800e518:	6033      	str	r3, [r6, #0]
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	0699      	lsls	r1, r3, #26
 800e51e:	bf42      	ittt	mi
 800e520:	6833      	ldrmi	r3, [r6, #0]
 800e522:	3302      	addmi	r3, #2
 800e524:	6033      	strmi	r3, [r6, #0]
 800e526:	6825      	ldr	r5, [r4, #0]
 800e528:	f015 0506 	ands.w	r5, r5, #6
 800e52c:	d106      	bne.n	800e53c <_printf_common+0x48>
 800e52e:	f104 0a19 	add.w	sl, r4, #25
 800e532:	68e3      	ldr	r3, [r4, #12]
 800e534:	6832      	ldr	r2, [r6, #0]
 800e536:	1a9b      	subs	r3, r3, r2
 800e538:	42ab      	cmp	r3, r5
 800e53a:	dc26      	bgt.n	800e58a <_printf_common+0x96>
 800e53c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e540:	6822      	ldr	r2, [r4, #0]
 800e542:	3b00      	subs	r3, #0
 800e544:	bf18      	it	ne
 800e546:	2301      	movne	r3, #1
 800e548:	0692      	lsls	r2, r2, #26
 800e54a:	d42b      	bmi.n	800e5a4 <_printf_common+0xb0>
 800e54c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e550:	4641      	mov	r1, r8
 800e552:	4638      	mov	r0, r7
 800e554:	47c8      	blx	r9
 800e556:	3001      	adds	r0, #1
 800e558:	d01e      	beq.n	800e598 <_printf_common+0xa4>
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	6922      	ldr	r2, [r4, #16]
 800e55e:	f003 0306 	and.w	r3, r3, #6
 800e562:	2b04      	cmp	r3, #4
 800e564:	bf02      	ittt	eq
 800e566:	68e5      	ldreq	r5, [r4, #12]
 800e568:	6833      	ldreq	r3, [r6, #0]
 800e56a:	1aed      	subeq	r5, r5, r3
 800e56c:	68a3      	ldr	r3, [r4, #8]
 800e56e:	bf0c      	ite	eq
 800e570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e574:	2500      	movne	r5, #0
 800e576:	4293      	cmp	r3, r2
 800e578:	bfc4      	itt	gt
 800e57a:	1a9b      	subgt	r3, r3, r2
 800e57c:	18ed      	addgt	r5, r5, r3
 800e57e:	2600      	movs	r6, #0
 800e580:	341a      	adds	r4, #26
 800e582:	42b5      	cmp	r5, r6
 800e584:	d11a      	bne.n	800e5bc <_printf_common+0xc8>
 800e586:	2000      	movs	r0, #0
 800e588:	e008      	b.n	800e59c <_printf_common+0xa8>
 800e58a:	2301      	movs	r3, #1
 800e58c:	4652      	mov	r2, sl
 800e58e:	4641      	mov	r1, r8
 800e590:	4638      	mov	r0, r7
 800e592:	47c8      	blx	r9
 800e594:	3001      	adds	r0, #1
 800e596:	d103      	bne.n	800e5a0 <_printf_common+0xac>
 800e598:	f04f 30ff 	mov.w	r0, #4294967295
 800e59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a0:	3501      	adds	r5, #1
 800e5a2:	e7c6      	b.n	800e532 <_printf_common+0x3e>
 800e5a4:	18e1      	adds	r1, r4, r3
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	2030      	movs	r0, #48	@ 0x30
 800e5aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e5ae:	4422      	add	r2, r4
 800e5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e5b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e5b8:	3302      	adds	r3, #2
 800e5ba:	e7c7      	b.n	800e54c <_printf_common+0x58>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	4622      	mov	r2, r4
 800e5c0:	4641      	mov	r1, r8
 800e5c2:	4638      	mov	r0, r7
 800e5c4:	47c8      	blx	r9
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	d0e6      	beq.n	800e598 <_printf_common+0xa4>
 800e5ca:	3601      	adds	r6, #1
 800e5cc:	e7d9      	b.n	800e582 <_printf_common+0x8e>
	...

0800e5d0 <_printf_i>:
 800e5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d4:	7e0f      	ldrb	r7, [r1, #24]
 800e5d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e5d8:	2f78      	cmp	r7, #120	@ 0x78
 800e5da:	4691      	mov	r9, r2
 800e5dc:	4680      	mov	r8, r0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	469a      	mov	sl, r3
 800e5e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5e6:	d807      	bhi.n	800e5f8 <_printf_i+0x28>
 800e5e8:	2f62      	cmp	r7, #98	@ 0x62
 800e5ea:	d80a      	bhi.n	800e602 <_printf_i+0x32>
 800e5ec:	2f00      	cmp	r7, #0
 800e5ee:	f000 80d2 	beq.w	800e796 <_printf_i+0x1c6>
 800e5f2:	2f58      	cmp	r7, #88	@ 0x58
 800e5f4:	f000 80b9 	beq.w	800e76a <_printf_i+0x19a>
 800e5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e600:	e03a      	b.n	800e678 <_printf_i+0xa8>
 800e602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e606:	2b15      	cmp	r3, #21
 800e608:	d8f6      	bhi.n	800e5f8 <_printf_i+0x28>
 800e60a:	a101      	add	r1, pc, #4	@ (adr r1, 800e610 <_printf_i+0x40>)
 800e60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e610:	0800e669 	.word	0x0800e669
 800e614:	0800e67d 	.word	0x0800e67d
 800e618:	0800e5f9 	.word	0x0800e5f9
 800e61c:	0800e5f9 	.word	0x0800e5f9
 800e620:	0800e5f9 	.word	0x0800e5f9
 800e624:	0800e5f9 	.word	0x0800e5f9
 800e628:	0800e67d 	.word	0x0800e67d
 800e62c:	0800e5f9 	.word	0x0800e5f9
 800e630:	0800e5f9 	.word	0x0800e5f9
 800e634:	0800e5f9 	.word	0x0800e5f9
 800e638:	0800e5f9 	.word	0x0800e5f9
 800e63c:	0800e77d 	.word	0x0800e77d
 800e640:	0800e6a7 	.word	0x0800e6a7
 800e644:	0800e737 	.word	0x0800e737
 800e648:	0800e5f9 	.word	0x0800e5f9
 800e64c:	0800e5f9 	.word	0x0800e5f9
 800e650:	0800e79f 	.word	0x0800e79f
 800e654:	0800e5f9 	.word	0x0800e5f9
 800e658:	0800e6a7 	.word	0x0800e6a7
 800e65c:	0800e5f9 	.word	0x0800e5f9
 800e660:	0800e5f9 	.word	0x0800e5f9
 800e664:	0800e73f 	.word	0x0800e73f
 800e668:	6833      	ldr	r3, [r6, #0]
 800e66a:	1d1a      	adds	r2, r3, #4
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	6032      	str	r2, [r6, #0]
 800e670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e678:	2301      	movs	r3, #1
 800e67a:	e09d      	b.n	800e7b8 <_printf_i+0x1e8>
 800e67c:	6833      	ldr	r3, [r6, #0]
 800e67e:	6820      	ldr	r0, [r4, #0]
 800e680:	1d19      	adds	r1, r3, #4
 800e682:	6031      	str	r1, [r6, #0]
 800e684:	0606      	lsls	r6, r0, #24
 800e686:	d501      	bpl.n	800e68c <_printf_i+0xbc>
 800e688:	681d      	ldr	r5, [r3, #0]
 800e68a:	e003      	b.n	800e694 <_printf_i+0xc4>
 800e68c:	0645      	lsls	r5, r0, #25
 800e68e:	d5fb      	bpl.n	800e688 <_printf_i+0xb8>
 800e690:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e694:	2d00      	cmp	r5, #0
 800e696:	da03      	bge.n	800e6a0 <_printf_i+0xd0>
 800e698:	232d      	movs	r3, #45	@ 0x2d
 800e69a:	426d      	negs	r5, r5
 800e69c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6a0:	4859      	ldr	r0, [pc, #356]	@ (800e808 <_printf_i+0x238>)
 800e6a2:	230a      	movs	r3, #10
 800e6a4:	e011      	b.n	800e6ca <_printf_i+0xfa>
 800e6a6:	6821      	ldr	r1, [r4, #0]
 800e6a8:	6833      	ldr	r3, [r6, #0]
 800e6aa:	0608      	lsls	r0, r1, #24
 800e6ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800e6b0:	d402      	bmi.n	800e6b8 <_printf_i+0xe8>
 800e6b2:	0649      	lsls	r1, r1, #25
 800e6b4:	bf48      	it	mi
 800e6b6:	b2ad      	uxthmi	r5, r5
 800e6b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e6ba:	4853      	ldr	r0, [pc, #332]	@ (800e808 <_printf_i+0x238>)
 800e6bc:	6033      	str	r3, [r6, #0]
 800e6be:	bf14      	ite	ne
 800e6c0:	230a      	movne	r3, #10
 800e6c2:	2308      	moveq	r3, #8
 800e6c4:	2100      	movs	r1, #0
 800e6c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e6ca:	6866      	ldr	r6, [r4, #4]
 800e6cc:	60a6      	str	r6, [r4, #8]
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	bfa2      	ittt	ge
 800e6d2:	6821      	ldrge	r1, [r4, #0]
 800e6d4:	f021 0104 	bicge.w	r1, r1, #4
 800e6d8:	6021      	strge	r1, [r4, #0]
 800e6da:	b90d      	cbnz	r5, 800e6e0 <_printf_i+0x110>
 800e6dc:	2e00      	cmp	r6, #0
 800e6de:	d04b      	beq.n	800e778 <_printf_i+0x1a8>
 800e6e0:	4616      	mov	r6, r2
 800e6e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6e6:	fb03 5711 	mls	r7, r3, r1, r5
 800e6ea:	5dc7      	ldrb	r7, [r0, r7]
 800e6ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6f0:	462f      	mov	r7, r5
 800e6f2:	42bb      	cmp	r3, r7
 800e6f4:	460d      	mov	r5, r1
 800e6f6:	d9f4      	bls.n	800e6e2 <_printf_i+0x112>
 800e6f8:	2b08      	cmp	r3, #8
 800e6fa:	d10b      	bne.n	800e714 <_printf_i+0x144>
 800e6fc:	6823      	ldr	r3, [r4, #0]
 800e6fe:	07df      	lsls	r7, r3, #31
 800e700:	d508      	bpl.n	800e714 <_printf_i+0x144>
 800e702:	6923      	ldr	r3, [r4, #16]
 800e704:	6861      	ldr	r1, [r4, #4]
 800e706:	4299      	cmp	r1, r3
 800e708:	bfde      	ittt	le
 800e70a:	2330      	movle	r3, #48	@ 0x30
 800e70c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e710:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e714:	1b92      	subs	r2, r2, r6
 800e716:	6122      	str	r2, [r4, #16]
 800e718:	f8cd a000 	str.w	sl, [sp]
 800e71c:	464b      	mov	r3, r9
 800e71e:	aa03      	add	r2, sp, #12
 800e720:	4621      	mov	r1, r4
 800e722:	4640      	mov	r0, r8
 800e724:	f7ff fee6 	bl	800e4f4 <_printf_common>
 800e728:	3001      	adds	r0, #1
 800e72a:	d14a      	bne.n	800e7c2 <_printf_i+0x1f2>
 800e72c:	f04f 30ff 	mov.w	r0, #4294967295
 800e730:	b004      	add	sp, #16
 800e732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	f043 0320 	orr.w	r3, r3, #32
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	4833      	ldr	r0, [pc, #204]	@ (800e80c <_printf_i+0x23c>)
 800e740:	2778      	movs	r7, #120	@ 0x78
 800e742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e746:	6823      	ldr	r3, [r4, #0]
 800e748:	6831      	ldr	r1, [r6, #0]
 800e74a:	061f      	lsls	r7, r3, #24
 800e74c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e750:	d402      	bmi.n	800e758 <_printf_i+0x188>
 800e752:	065f      	lsls	r7, r3, #25
 800e754:	bf48      	it	mi
 800e756:	b2ad      	uxthmi	r5, r5
 800e758:	6031      	str	r1, [r6, #0]
 800e75a:	07d9      	lsls	r1, r3, #31
 800e75c:	bf44      	itt	mi
 800e75e:	f043 0320 	orrmi.w	r3, r3, #32
 800e762:	6023      	strmi	r3, [r4, #0]
 800e764:	b11d      	cbz	r5, 800e76e <_printf_i+0x19e>
 800e766:	2310      	movs	r3, #16
 800e768:	e7ac      	b.n	800e6c4 <_printf_i+0xf4>
 800e76a:	4827      	ldr	r0, [pc, #156]	@ (800e808 <_printf_i+0x238>)
 800e76c:	e7e9      	b.n	800e742 <_printf_i+0x172>
 800e76e:	6823      	ldr	r3, [r4, #0]
 800e770:	f023 0320 	bic.w	r3, r3, #32
 800e774:	6023      	str	r3, [r4, #0]
 800e776:	e7f6      	b.n	800e766 <_printf_i+0x196>
 800e778:	4616      	mov	r6, r2
 800e77a:	e7bd      	b.n	800e6f8 <_printf_i+0x128>
 800e77c:	6833      	ldr	r3, [r6, #0]
 800e77e:	6825      	ldr	r5, [r4, #0]
 800e780:	6961      	ldr	r1, [r4, #20]
 800e782:	1d18      	adds	r0, r3, #4
 800e784:	6030      	str	r0, [r6, #0]
 800e786:	062e      	lsls	r6, r5, #24
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	d501      	bpl.n	800e790 <_printf_i+0x1c0>
 800e78c:	6019      	str	r1, [r3, #0]
 800e78e:	e002      	b.n	800e796 <_printf_i+0x1c6>
 800e790:	0668      	lsls	r0, r5, #25
 800e792:	d5fb      	bpl.n	800e78c <_printf_i+0x1bc>
 800e794:	8019      	strh	r1, [r3, #0]
 800e796:	2300      	movs	r3, #0
 800e798:	6123      	str	r3, [r4, #16]
 800e79a:	4616      	mov	r6, r2
 800e79c:	e7bc      	b.n	800e718 <_printf_i+0x148>
 800e79e:	6833      	ldr	r3, [r6, #0]
 800e7a0:	1d1a      	adds	r2, r3, #4
 800e7a2:	6032      	str	r2, [r6, #0]
 800e7a4:	681e      	ldr	r6, [r3, #0]
 800e7a6:	6862      	ldr	r2, [r4, #4]
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f7f1 fd30 	bl	8000210 <memchr>
 800e7b0:	b108      	cbz	r0, 800e7b6 <_printf_i+0x1e6>
 800e7b2:	1b80      	subs	r0, r0, r6
 800e7b4:	6060      	str	r0, [r4, #4]
 800e7b6:	6863      	ldr	r3, [r4, #4]
 800e7b8:	6123      	str	r3, [r4, #16]
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7c0:	e7aa      	b.n	800e718 <_printf_i+0x148>
 800e7c2:	6923      	ldr	r3, [r4, #16]
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	4649      	mov	r1, r9
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	47d0      	blx	sl
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	d0ad      	beq.n	800e72c <_printf_i+0x15c>
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	079b      	lsls	r3, r3, #30
 800e7d4:	d413      	bmi.n	800e7fe <_printf_i+0x22e>
 800e7d6:	68e0      	ldr	r0, [r4, #12]
 800e7d8:	9b03      	ldr	r3, [sp, #12]
 800e7da:	4298      	cmp	r0, r3
 800e7dc:	bfb8      	it	lt
 800e7de:	4618      	movlt	r0, r3
 800e7e0:	e7a6      	b.n	800e730 <_printf_i+0x160>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	4632      	mov	r2, r6
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	4640      	mov	r0, r8
 800e7ea:	47d0      	blx	sl
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	d09d      	beq.n	800e72c <_printf_i+0x15c>
 800e7f0:	3501      	adds	r5, #1
 800e7f2:	68e3      	ldr	r3, [r4, #12]
 800e7f4:	9903      	ldr	r1, [sp, #12]
 800e7f6:	1a5b      	subs	r3, r3, r1
 800e7f8:	42ab      	cmp	r3, r5
 800e7fa:	dcf2      	bgt.n	800e7e2 <_printf_i+0x212>
 800e7fc:	e7eb      	b.n	800e7d6 <_printf_i+0x206>
 800e7fe:	2500      	movs	r5, #0
 800e800:	f104 0619 	add.w	r6, r4, #25
 800e804:	e7f5      	b.n	800e7f2 <_printf_i+0x222>
 800e806:	bf00      	nop
 800e808:	0801d504 	.word	0x0801d504
 800e80c:	0801d515 	.word	0x0801d515

0800e810 <__sflush_r>:
 800e810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e818:	0716      	lsls	r6, r2, #28
 800e81a:	4605      	mov	r5, r0
 800e81c:	460c      	mov	r4, r1
 800e81e:	d454      	bmi.n	800e8ca <__sflush_r+0xba>
 800e820:	684b      	ldr	r3, [r1, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	dc02      	bgt.n	800e82c <__sflush_r+0x1c>
 800e826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e828:	2b00      	cmp	r3, #0
 800e82a:	dd48      	ble.n	800e8be <__sflush_r+0xae>
 800e82c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e82e:	2e00      	cmp	r6, #0
 800e830:	d045      	beq.n	800e8be <__sflush_r+0xae>
 800e832:	2300      	movs	r3, #0
 800e834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e838:	682f      	ldr	r7, [r5, #0]
 800e83a:	6a21      	ldr	r1, [r4, #32]
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	d030      	beq.n	800e8a2 <__sflush_r+0x92>
 800e840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e842:	89a3      	ldrh	r3, [r4, #12]
 800e844:	0759      	lsls	r1, r3, #29
 800e846:	d505      	bpl.n	800e854 <__sflush_r+0x44>
 800e848:	6863      	ldr	r3, [r4, #4]
 800e84a:	1ad2      	subs	r2, r2, r3
 800e84c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e84e:	b10b      	cbz	r3, 800e854 <__sflush_r+0x44>
 800e850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e852:	1ad2      	subs	r2, r2, r3
 800e854:	2300      	movs	r3, #0
 800e856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e858:	6a21      	ldr	r1, [r4, #32]
 800e85a:	4628      	mov	r0, r5
 800e85c:	47b0      	blx	r6
 800e85e:	1c43      	adds	r3, r0, #1
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	d106      	bne.n	800e872 <__sflush_r+0x62>
 800e864:	6829      	ldr	r1, [r5, #0]
 800e866:	291d      	cmp	r1, #29
 800e868:	d82b      	bhi.n	800e8c2 <__sflush_r+0xb2>
 800e86a:	4a2a      	ldr	r2, [pc, #168]	@ (800e914 <__sflush_r+0x104>)
 800e86c:	410a      	asrs	r2, r1
 800e86e:	07d6      	lsls	r6, r2, #31
 800e870:	d427      	bmi.n	800e8c2 <__sflush_r+0xb2>
 800e872:	2200      	movs	r2, #0
 800e874:	6062      	str	r2, [r4, #4]
 800e876:	04d9      	lsls	r1, r3, #19
 800e878:	6922      	ldr	r2, [r4, #16]
 800e87a:	6022      	str	r2, [r4, #0]
 800e87c:	d504      	bpl.n	800e888 <__sflush_r+0x78>
 800e87e:	1c42      	adds	r2, r0, #1
 800e880:	d101      	bne.n	800e886 <__sflush_r+0x76>
 800e882:	682b      	ldr	r3, [r5, #0]
 800e884:	b903      	cbnz	r3, 800e888 <__sflush_r+0x78>
 800e886:	6560      	str	r0, [r4, #84]	@ 0x54
 800e888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e88a:	602f      	str	r7, [r5, #0]
 800e88c:	b1b9      	cbz	r1, 800e8be <__sflush_r+0xae>
 800e88e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e892:	4299      	cmp	r1, r3
 800e894:	d002      	beq.n	800e89c <__sflush_r+0x8c>
 800e896:	4628      	mov	r0, r5
 800e898:	f7ff fbd4 	bl	800e044 <_free_r>
 800e89c:	2300      	movs	r3, #0
 800e89e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8a0:	e00d      	b.n	800e8be <__sflush_r+0xae>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	47b0      	blx	r6
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	1c50      	adds	r0, r2, #1
 800e8ac:	d1c9      	bne.n	800e842 <__sflush_r+0x32>
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d0c6      	beq.n	800e842 <__sflush_r+0x32>
 800e8b4:	2b1d      	cmp	r3, #29
 800e8b6:	d001      	beq.n	800e8bc <__sflush_r+0xac>
 800e8b8:	2b16      	cmp	r3, #22
 800e8ba:	d11e      	bne.n	800e8fa <__sflush_r+0xea>
 800e8bc:	602f      	str	r7, [r5, #0]
 800e8be:	2000      	movs	r0, #0
 800e8c0:	e022      	b.n	800e908 <__sflush_r+0xf8>
 800e8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8c6:	b21b      	sxth	r3, r3
 800e8c8:	e01b      	b.n	800e902 <__sflush_r+0xf2>
 800e8ca:	690f      	ldr	r7, [r1, #16]
 800e8cc:	2f00      	cmp	r7, #0
 800e8ce:	d0f6      	beq.n	800e8be <__sflush_r+0xae>
 800e8d0:	0793      	lsls	r3, r2, #30
 800e8d2:	680e      	ldr	r6, [r1, #0]
 800e8d4:	bf08      	it	eq
 800e8d6:	694b      	ldreq	r3, [r1, #20]
 800e8d8:	600f      	str	r7, [r1, #0]
 800e8da:	bf18      	it	ne
 800e8dc:	2300      	movne	r3, #0
 800e8de:	eba6 0807 	sub.w	r8, r6, r7
 800e8e2:	608b      	str	r3, [r1, #8]
 800e8e4:	f1b8 0f00 	cmp.w	r8, #0
 800e8e8:	dde9      	ble.n	800e8be <__sflush_r+0xae>
 800e8ea:	6a21      	ldr	r1, [r4, #32]
 800e8ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8ee:	4643      	mov	r3, r8
 800e8f0:	463a      	mov	r2, r7
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	47b0      	blx	r6
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	dc08      	bgt.n	800e90c <__sflush_r+0xfc>
 800e8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e902:	81a3      	strh	r3, [r4, #12]
 800e904:	f04f 30ff 	mov.w	r0, #4294967295
 800e908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e90c:	4407      	add	r7, r0
 800e90e:	eba8 0800 	sub.w	r8, r8, r0
 800e912:	e7e7      	b.n	800e8e4 <__sflush_r+0xd4>
 800e914:	dfbffffe 	.word	0xdfbffffe

0800e918 <_fflush_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	690b      	ldr	r3, [r1, #16]
 800e91c:	4605      	mov	r5, r0
 800e91e:	460c      	mov	r4, r1
 800e920:	b913      	cbnz	r3, 800e928 <_fflush_r+0x10>
 800e922:	2500      	movs	r5, #0
 800e924:	4628      	mov	r0, r5
 800e926:	bd38      	pop	{r3, r4, r5, pc}
 800e928:	b118      	cbz	r0, 800e932 <_fflush_r+0x1a>
 800e92a:	6a03      	ldr	r3, [r0, #32]
 800e92c:	b90b      	cbnz	r3, 800e932 <_fflush_r+0x1a>
 800e92e:	f7ff f9f1 	bl	800dd14 <__sinit>
 800e932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d0f3      	beq.n	800e922 <_fflush_r+0xa>
 800e93a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e93c:	07d0      	lsls	r0, r2, #31
 800e93e:	d404      	bmi.n	800e94a <_fflush_r+0x32>
 800e940:	0599      	lsls	r1, r3, #22
 800e942:	d402      	bmi.n	800e94a <_fflush_r+0x32>
 800e944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e946:	f7ff fb4e 	bl	800dfe6 <__retarget_lock_acquire_recursive>
 800e94a:	4628      	mov	r0, r5
 800e94c:	4621      	mov	r1, r4
 800e94e:	f7ff ff5f 	bl	800e810 <__sflush_r>
 800e952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e954:	07da      	lsls	r2, r3, #31
 800e956:	4605      	mov	r5, r0
 800e958:	d4e4      	bmi.n	800e924 <_fflush_r+0xc>
 800e95a:	89a3      	ldrh	r3, [r4, #12]
 800e95c:	059b      	lsls	r3, r3, #22
 800e95e:	d4e1      	bmi.n	800e924 <_fflush_r+0xc>
 800e960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e962:	f7ff fb41 	bl	800dfe8 <__retarget_lock_release_recursive>
 800e966:	e7dd      	b.n	800e924 <_fflush_r+0xc>

0800e968 <fiprintf>:
 800e968:	b40e      	push	{r1, r2, r3}
 800e96a:	b503      	push	{r0, r1, lr}
 800e96c:	4601      	mov	r1, r0
 800e96e:	ab03      	add	r3, sp, #12
 800e970:	4805      	ldr	r0, [pc, #20]	@ (800e988 <fiprintf+0x20>)
 800e972:	f853 2b04 	ldr.w	r2, [r3], #4
 800e976:	6800      	ldr	r0, [r0, #0]
 800e978:	9301      	str	r3, [sp, #4]
 800e97a:	f000 f88f 	bl	800ea9c <_vfiprintf_r>
 800e97e:	b002      	add	sp, #8
 800e980:	f85d eb04 	ldr.w	lr, [sp], #4
 800e984:	b003      	add	sp, #12
 800e986:	4770      	bx	lr
 800e988:	20000064 	.word	0x20000064

0800e98c <memmove>:
 800e98c:	4288      	cmp	r0, r1
 800e98e:	b510      	push	{r4, lr}
 800e990:	eb01 0402 	add.w	r4, r1, r2
 800e994:	d902      	bls.n	800e99c <memmove+0x10>
 800e996:	4284      	cmp	r4, r0
 800e998:	4623      	mov	r3, r4
 800e99a:	d807      	bhi.n	800e9ac <memmove+0x20>
 800e99c:	1e43      	subs	r3, r0, #1
 800e99e:	42a1      	cmp	r1, r4
 800e9a0:	d008      	beq.n	800e9b4 <memmove+0x28>
 800e9a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9aa:	e7f8      	b.n	800e99e <memmove+0x12>
 800e9ac:	4402      	add	r2, r0
 800e9ae:	4601      	mov	r1, r0
 800e9b0:	428a      	cmp	r2, r1
 800e9b2:	d100      	bne.n	800e9b6 <memmove+0x2a>
 800e9b4:	bd10      	pop	{r4, pc}
 800e9b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9be:	e7f7      	b.n	800e9b0 <memmove+0x24>

0800e9c0 <_sbrk_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d06      	ldr	r5, [pc, #24]	@ (800e9dc <_sbrk_r+0x1c>)
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	f7f6 f996 	bl	8004cfc <_sbrk>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d102      	bne.n	800e9da <_sbrk_r+0x1a>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	b103      	cbz	r3, 800e9da <_sbrk_r+0x1a>
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	bd38      	pop	{r3, r4, r5, pc}
 800e9dc:	20004d14 	.word	0x20004d14

0800e9e0 <abort>:
 800e9e0:	b508      	push	{r3, lr}
 800e9e2:	2006      	movs	r0, #6
 800e9e4:	f000 fa2e 	bl	800ee44 <raise>
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	f7f6 f90f 	bl	8004c0c <_exit>

0800e9ee <_realloc_r>:
 800e9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f2:	4680      	mov	r8, r0
 800e9f4:	4615      	mov	r5, r2
 800e9f6:	460c      	mov	r4, r1
 800e9f8:	b921      	cbnz	r1, 800ea04 <_realloc_r+0x16>
 800e9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fe:	4611      	mov	r1, r2
 800ea00:	f7ff bb94 	b.w	800e12c <_malloc_r>
 800ea04:	b92a      	cbnz	r2, 800ea12 <_realloc_r+0x24>
 800ea06:	f7ff fb1d 	bl	800e044 <_free_r>
 800ea0a:	2400      	movs	r4, #0
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea12:	f000 fa33 	bl	800ee7c <_malloc_usable_size_r>
 800ea16:	4285      	cmp	r5, r0
 800ea18:	4606      	mov	r6, r0
 800ea1a:	d802      	bhi.n	800ea22 <_realloc_r+0x34>
 800ea1c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ea20:	d8f4      	bhi.n	800ea0c <_realloc_r+0x1e>
 800ea22:	4629      	mov	r1, r5
 800ea24:	4640      	mov	r0, r8
 800ea26:	f7ff fb81 	bl	800e12c <_malloc_r>
 800ea2a:	4607      	mov	r7, r0
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	d0ec      	beq.n	800ea0a <_realloc_r+0x1c>
 800ea30:	42b5      	cmp	r5, r6
 800ea32:	462a      	mov	r2, r5
 800ea34:	4621      	mov	r1, r4
 800ea36:	bf28      	it	cs
 800ea38:	4632      	movcs	r2, r6
 800ea3a:	f7ff fad6 	bl	800dfea <memcpy>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4640      	mov	r0, r8
 800ea42:	f7ff faff 	bl	800e044 <_free_r>
 800ea46:	463c      	mov	r4, r7
 800ea48:	e7e0      	b.n	800ea0c <_realloc_r+0x1e>

0800ea4a <__sfputc_r>:
 800ea4a:	6893      	ldr	r3, [r2, #8]
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	b410      	push	{r4}
 800ea52:	6093      	str	r3, [r2, #8]
 800ea54:	da08      	bge.n	800ea68 <__sfputc_r+0x1e>
 800ea56:	6994      	ldr	r4, [r2, #24]
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	db01      	blt.n	800ea60 <__sfputc_r+0x16>
 800ea5c:	290a      	cmp	r1, #10
 800ea5e:	d103      	bne.n	800ea68 <__sfputc_r+0x1e>
 800ea60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea64:	f000 b932 	b.w	800eccc <__swbuf_r>
 800ea68:	6813      	ldr	r3, [r2, #0]
 800ea6a:	1c58      	adds	r0, r3, #1
 800ea6c:	6010      	str	r0, [r2, #0]
 800ea6e:	7019      	strb	r1, [r3, #0]
 800ea70:	4608      	mov	r0, r1
 800ea72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <__sfputs_r>:
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7a:	4606      	mov	r6, r0
 800ea7c:	460f      	mov	r7, r1
 800ea7e:	4614      	mov	r4, r2
 800ea80:	18d5      	adds	r5, r2, r3
 800ea82:	42ac      	cmp	r4, r5
 800ea84:	d101      	bne.n	800ea8a <__sfputs_r+0x12>
 800ea86:	2000      	movs	r0, #0
 800ea88:	e007      	b.n	800ea9a <__sfputs_r+0x22>
 800ea8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea8e:	463a      	mov	r2, r7
 800ea90:	4630      	mov	r0, r6
 800ea92:	f7ff ffda 	bl	800ea4a <__sfputc_r>
 800ea96:	1c43      	adds	r3, r0, #1
 800ea98:	d1f3      	bne.n	800ea82 <__sfputs_r+0xa>
 800ea9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea9c <_vfiprintf_r>:
 800ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	b09d      	sub	sp, #116	@ 0x74
 800eaa4:	4614      	mov	r4, r2
 800eaa6:	4698      	mov	r8, r3
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	b118      	cbz	r0, 800eab4 <_vfiprintf_r+0x18>
 800eaac:	6a03      	ldr	r3, [r0, #32]
 800eaae:	b90b      	cbnz	r3, 800eab4 <_vfiprintf_r+0x18>
 800eab0:	f7ff f930 	bl	800dd14 <__sinit>
 800eab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eab6:	07d9      	lsls	r1, r3, #31
 800eab8:	d405      	bmi.n	800eac6 <_vfiprintf_r+0x2a>
 800eaba:	89ab      	ldrh	r3, [r5, #12]
 800eabc:	059a      	lsls	r2, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_vfiprintf_r+0x2a>
 800eac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eac2:	f7ff fa90 	bl	800dfe6 <__retarget_lock_acquire_recursive>
 800eac6:	89ab      	ldrh	r3, [r5, #12]
 800eac8:	071b      	lsls	r3, r3, #28
 800eaca:	d501      	bpl.n	800ead0 <_vfiprintf_r+0x34>
 800eacc:	692b      	ldr	r3, [r5, #16]
 800eace:	b99b      	cbnz	r3, 800eaf8 <_vfiprintf_r+0x5c>
 800ead0:	4629      	mov	r1, r5
 800ead2:	4630      	mov	r0, r6
 800ead4:	f000 f938 	bl	800ed48 <__swsetup_r>
 800ead8:	b170      	cbz	r0, 800eaf8 <_vfiprintf_r+0x5c>
 800eada:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eadc:	07dc      	lsls	r4, r3, #31
 800eade:	d504      	bpl.n	800eaea <_vfiprintf_r+0x4e>
 800eae0:	f04f 30ff 	mov.w	r0, #4294967295
 800eae4:	b01d      	add	sp, #116	@ 0x74
 800eae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaea:	89ab      	ldrh	r3, [r5, #12]
 800eaec:	0598      	lsls	r0, r3, #22
 800eaee:	d4f7      	bmi.n	800eae0 <_vfiprintf_r+0x44>
 800eaf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eaf2:	f7ff fa79 	bl	800dfe8 <__retarget_lock_release_recursive>
 800eaf6:	e7f3      	b.n	800eae0 <_vfiprintf_r+0x44>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	9309      	str	r3, [sp, #36]	@ 0x24
 800eafc:	2320      	movs	r3, #32
 800eafe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb02:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb06:	2330      	movs	r3, #48	@ 0x30
 800eb08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ecb8 <_vfiprintf_r+0x21c>
 800eb0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb10:	f04f 0901 	mov.w	r9, #1
 800eb14:	4623      	mov	r3, r4
 800eb16:	469a      	mov	sl, r3
 800eb18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb1c:	b10a      	cbz	r2, 800eb22 <_vfiprintf_r+0x86>
 800eb1e:	2a25      	cmp	r2, #37	@ 0x25
 800eb20:	d1f9      	bne.n	800eb16 <_vfiprintf_r+0x7a>
 800eb22:	ebba 0b04 	subs.w	fp, sl, r4
 800eb26:	d00b      	beq.n	800eb40 <_vfiprintf_r+0xa4>
 800eb28:	465b      	mov	r3, fp
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f7ff ffa2 	bl	800ea78 <__sfputs_r>
 800eb34:	3001      	adds	r0, #1
 800eb36:	f000 80a7 	beq.w	800ec88 <_vfiprintf_r+0x1ec>
 800eb3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb3c:	445a      	add	r2, fp
 800eb3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb40:	f89a 3000 	ldrb.w	r3, [sl]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f000 809f 	beq.w	800ec88 <_vfiprintf_r+0x1ec>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb54:	f10a 0a01 	add.w	sl, sl, #1
 800eb58:	9304      	str	r3, [sp, #16]
 800eb5a:	9307      	str	r3, [sp, #28]
 800eb5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb60:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb62:	4654      	mov	r4, sl
 800eb64:	2205      	movs	r2, #5
 800eb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb6a:	4853      	ldr	r0, [pc, #332]	@ (800ecb8 <_vfiprintf_r+0x21c>)
 800eb6c:	f7f1 fb50 	bl	8000210 <memchr>
 800eb70:	9a04      	ldr	r2, [sp, #16]
 800eb72:	b9d8      	cbnz	r0, 800ebac <_vfiprintf_r+0x110>
 800eb74:	06d1      	lsls	r1, r2, #27
 800eb76:	bf44      	itt	mi
 800eb78:	2320      	movmi	r3, #32
 800eb7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb7e:	0713      	lsls	r3, r2, #28
 800eb80:	bf44      	itt	mi
 800eb82:	232b      	movmi	r3, #43	@ 0x2b
 800eb84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb88:	f89a 3000 	ldrb.w	r3, [sl]
 800eb8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb8e:	d015      	beq.n	800ebbc <_vfiprintf_r+0x120>
 800eb90:	9a07      	ldr	r2, [sp, #28]
 800eb92:	4654      	mov	r4, sl
 800eb94:	2000      	movs	r0, #0
 800eb96:	f04f 0c0a 	mov.w	ip, #10
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eba0:	3b30      	subs	r3, #48	@ 0x30
 800eba2:	2b09      	cmp	r3, #9
 800eba4:	d94b      	bls.n	800ec3e <_vfiprintf_r+0x1a2>
 800eba6:	b1b0      	cbz	r0, 800ebd6 <_vfiprintf_r+0x13a>
 800eba8:	9207      	str	r2, [sp, #28]
 800ebaa:	e014      	b.n	800ebd6 <_vfiprintf_r+0x13a>
 800ebac:	eba0 0308 	sub.w	r3, r0, r8
 800ebb0:	fa09 f303 	lsl.w	r3, r9, r3
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	9304      	str	r3, [sp, #16]
 800ebb8:	46a2      	mov	sl, r4
 800ebba:	e7d2      	b.n	800eb62 <_vfiprintf_r+0xc6>
 800ebbc:	9b03      	ldr	r3, [sp, #12]
 800ebbe:	1d19      	adds	r1, r3, #4
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	9103      	str	r1, [sp, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	bfbb      	ittet	lt
 800ebc8:	425b      	neglt	r3, r3
 800ebca:	f042 0202 	orrlt.w	r2, r2, #2
 800ebce:	9307      	strge	r3, [sp, #28]
 800ebd0:	9307      	strlt	r3, [sp, #28]
 800ebd2:	bfb8      	it	lt
 800ebd4:	9204      	strlt	r2, [sp, #16]
 800ebd6:	7823      	ldrb	r3, [r4, #0]
 800ebd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebda:	d10a      	bne.n	800ebf2 <_vfiprintf_r+0x156>
 800ebdc:	7863      	ldrb	r3, [r4, #1]
 800ebde:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebe0:	d132      	bne.n	800ec48 <_vfiprintf_r+0x1ac>
 800ebe2:	9b03      	ldr	r3, [sp, #12]
 800ebe4:	1d1a      	adds	r2, r3, #4
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	9203      	str	r2, [sp, #12]
 800ebea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebee:	3402      	adds	r4, #2
 800ebf0:	9305      	str	r3, [sp, #20]
 800ebf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ecc8 <_vfiprintf_r+0x22c>
 800ebf6:	7821      	ldrb	r1, [r4, #0]
 800ebf8:	2203      	movs	r2, #3
 800ebfa:	4650      	mov	r0, sl
 800ebfc:	f7f1 fb08 	bl	8000210 <memchr>
 800ec00:	b138      	cbz	r0, 800ec12 <_vfiprintf_r+0x176>
 800ec02:	9b04      	ldr	r3, [sp, #16]
 800ec04:	eba0 000a 	sub.w	r0, r0, sl
 800ec08:	2240      	movs	r2, #64	@ 0x40
 800ec0a:	4082      	lsls	r2, r0
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	3401      	adds	r4, #1
 800ec10:	9304      	str	r3, [sp, #16]
 800ec12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec16:	4829      	ldr	r0, [pc, #164]	@ (800ecbc <_vfiprintf_r+0x220>)
 800ec18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec1c:	2206      	movs	r2, #6
 800ec1e:	f7f1 faf7 	bl	8000210 <memchr>
 800ec22:	2800      	cmp	r0, #0
 800ec24:	d03f      	beq.n	800eca6 <_vfiprintf_r+0x20a>
 800ec26:	4b26      	ldr	r3, [pc, #152]	@ (800ecc0 <_vfiprintf_r+0x224>)
 800ec28:	bb1b      	cbnz	r3, 800ec72 <_vfiprintf_r+0x1d6>
 800ec2a:	9b03      	ldr	r3, [sp, #12]
 800ec2c:	3307      	adds	r3, #7
 800ec2e:	f023 0307 	bic.w	r3, r3, #7
 800ec32:	3308      	adds	r3, #8
 800ec34:	9303      	str	r3, [sp, #12]
 800ec36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec38:	443b      	add	r3, r7
 800ec3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec3c:	e76a      	b.n	800eb14 <_vfiprintf_r+0x78>
 800ec3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec42:	460c      	mov	r4, r1
 800ec44:	2001      	movs	r0, #1
 800ec46:	e7a8      	b.n	800eb9a <_vfiprintf_r+0xfe>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	3401      	adds	r4, #1
 800ec4c:	9305      	str	r3, [sp, #20]
 800ec4e:	4619      	mov	r1, r3
 800ec50:	f04f 0c0a 	mov.w	ip, #10
 800ec54:	4620      	mov	r0, r4
 800ec56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec5a:	3a30      	subs	r2, #48	@ 0x30
 800ec5c:	2a09      	cmp	r2, #9
 800ec5e:	d903      	bls.n	800ec68 <_vfiprintf_r+0x1cc>
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d0c6      	beq.n	800ebf2 <_vfiprintf_r+0x156>
 800ec64:	9105      	str	r1, [sp, #20]
 800ec66:	e7c4      	b.n	800ebf2 <_vfiprintf_r+0x156>
 800ec68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e7f0      	b.n	800ec54 <_vfiprintf_r+0x1b8>
 800ec72:	ab03      	add	r3, sp, #12
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	462a      	mov	r2, r5
 800ec78:	4b12      	ldr	r3, [pc, #72]	@ (800ecc4 <_vfiprintf_r+0x228>)
 800ec7a:	a904      	add	r1, sp, #16
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f3af 8000 	nop.w
 800ec82:	4607      	mov	r7, r0
 800ec84:	1c78      	adds	r0, r7, #1
 800ec86:	d1d6      	bne.n	800ec36 <_vfiprintf_r+0x19a>
 800ec88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec8a:	07d9      	lsls	r1, r3, #31
 800ec8c:	d405      	bmi.n	800ec9a <_vfiprintf_r+0x1fe>
 800ec8e:	89ab      	ldrh	r3, [r5, #12]
 800ec90:	059a      	lsls	r2, r3, #22
 800ec92:	d402      	bmi.n	800ec9a <_vfiprintf_r+0x1fe>
 800ec94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec96:	f7ff f9a7 	bl	800dfe8 <__retarget_lock_release_recursive>
 800ec9a:	89ab      	ldrh	r3, [r5, #12]
 800ec9c:	065b      	lsls	r3, r3, #25
 800ec9e:	f53f af1f 	bmi.w	800eae0 <_vfiprintf_r+0x44>
 800eca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eca4:	e71e      	b.n	800eae4 <_vfiprintf_r+0x48>
 800eca6:	ab03      	add	r3, sp, #12
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	462a      	mov	r2, r5
 800ecac:	4b05      	ldr	r3, [pc, #20]	@ (800ecc4 <_vfiprintf_r+0x228>)
 800ecae:	a904      	add	r1, sp, #16
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	f7ff fc8d 	bl	800e5d0 <_printf_i>
 800ecb6:	e7e4      	b.n	800ec82 <_vfiprintf_r+0x1e6>
 800ecb8:	0801d4f3 	.word	0x0801d4f3
 800ecbc:	0801d4fd 	.word	0x0801d4fd
 800ecc0:	00000000 	.word	0x00000000
 800ecc4:	0800ea79 	.word	0x0800ea79
 800ecc8:	0801d4f9 	.word	0x0801d4f9

0800eccc <__swbuf_r>:
 800eccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecce:	460e      	mov	r6, r1
 800ecd0:	4614      	mov	r4, r2
 800ecd2:	4605      	mov	r5, r0
 800ecd4:	b118      	cbz	r0, 800ecde <__swbuf_r+0x12>
 800ecd6:	6a03      	ldr	r3, [r0, #32]
 800ecd8:	b90b      	cbnz	r3, 800ecde <__swbuf_r+0x12>
 800ecda:	f7ff f81b 	bl	800dd14 <__sinit>
 800ecde:	69a3      	ldr	r3, [r4, #24]
 800ece0:	60a3      	str	r3, [r4, #8]
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	071a      	lsls	r2, r3, #28
 800ece6:	d501      	bpl.n	800ecec <__swbuf_r+0x20>
 800ece8:	6923      	ldr	r3, [r4, #16]
 800ecea:	b943      	cbnz	r3, 800ecfe <__swbuf_r+0x32>
 800ecec:	4621      	mov	r1, r4
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f000 f82a 	bl	800ed48 <__swsetup_r>
 800ecf4:	b118      	cbz	r0, 800ecfe <__swbuf_r+0x32>
 800ecf6:	f04f 37ff 	mov.w	r7, #4294967295
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecfe:	6823      	ldr	r3, [r4, #0]
 800ed00:	6922      	ldr	r2, [r4, #16]
 800ed02:	1a98      	subs	r0, r3, r2
 800ed04:	6963      	ldr	r3, [r4, #20]
 800ed06:	b2f6      	uxtb	r6, r6
 800ed08:	4283      	cmp	r3, r0
 800ed0a:	4637      	mov	r7, r6
 800ed0c:	dc05      	bgt.n	800ed1a <__swbuf_r+0x4e>
 800ed0e:	4621      	mov	r1, r4
 800ed10:	4628      	mov	r0, r5
 800ed12:	f7ff fe01 	bl	800e918 <_fflush_r>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d1ed      	bne.n	800ecf6 <__swbuf_r+0x2a>
 800ed1a:	68a3      	ldr	r3, [r4, #8]
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	60a3      	str	r3, [r4, #8]
 800ed20:	6823      	ldr	r3, [r4, #0]
 800ed22:	1c5a      	adds	r2, r3, #1
 800ed24:	6022      	str	r2, [r4, #0]
 800ed26:	701e      	strb	r6, [r3, #0]
 800ed28:	6962      	ldr	r2, [r4, #20]
 800ed2a:	1c43      	adds	r3, r0, #1
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d004      	beq.n	800ed3a <__swbuf_r+0x6e>
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	07db      	lsls	r3, r3, #31
 800ed34:	d5e1      	bpl.n	800ecfa <__swbuf_r+0x2e>
 800ed36:	2e0a      	cmp	r6, #10
 800ed38:	d1df      	bne.n	800ecfa <__swbuf_r+0x2e>
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	f7ff fdeb 	bl	800e918 <_fflush_r>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d0d9      	beq.n	800ecfa <__swbuf_r+0x2e>
 800ed46:	e7d6      	b.n	800ecf6 <__swbuf_r+0x2a>

0800ed48 <__swsetup_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	4b29      	ldr	r3, [pc, #164]	@ (800edf0 <__swsetup_r+0xa8>)
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	6818      	ldr	r0, [r3, #0]
 800ed50:	460c      	mov	r4, r1
 800ed52:	b118      	cbz	r0, 800ed5c <__swsetup_r+0x14>
 800ed54:	6a03      	ldr	r3, [r0, #32]
 800ed56:	b90b      	cbnz	r3, 800ed5c <__swsetup_r+0x14>
 800ed58:	f7fe ffdc 	bl	800dd14 <__sinit>
 800ed5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed60:	0719      	lsls	r1, r3, #28
 800ed62:	d422      	bmi.n	800edaa <__swsetup_r+0x62>
 800ed64:	06da      	lsls	r2, r3, #27
 800ed66:	d407      	bmi.n	800ed78 <__swsetup_r+0x30>
 800ed68:	2209      	movs	r2, #9
 800ed6a:	602a      	str	r2, [r5, #0]
 800ed6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed70:	81a3      	strh	r3, [r4, #12]
 800ed72:	f04f 30ff 	mov.w	r0, #4294967295
 800ed76:	e033      	b.n	800ede0 <__swsetup_r+0x98>
 800ed78:	0758      	lsls	r0, r3, #29
 800ed7a:	d512      	bpl.n	800eda2 <__swsetup_r+0x5a>
 800ed7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed7e:	b141      	cbz	r1, 800ed92 <__swsetup_r+0x4a>
 800ed80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed84:	4299      	cmp	r1, r3
 800ed86:	d002      	beq.n	800ed8e <__swsetup_r+0x46>
 800ed88:	4628      	mov	r0, r5
 800ed8a:	f7ff f95b 	bl	800e044 <_free_r>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed92:	89a3      	ldrh	r3, [r4, #12]
 800ed94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed98:	81a3      	strh	r3, [r4, #12]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	6063      	str	r3, [r4, #4]
 800ed9e:	6923      	ldr	r3, [r4, #16]
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	89a3      	ldrh	r3, [r4, #12]
 800eda4:	f043 0308 	orr.w	r3, r3, #8
 800eda8:	81a3      	strh	r3, [r4, #12]
 800edaa:	6923      	ldr	r3, [r4, #16]
 800edac:	b94b      	cbnz	r3, 800edc2 <__swsetup_r+0x7a>
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800edb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edb8:	d003      	beq.n	800edc2 <__swsetup_r+0x7a>
 800edba:	4621      	mov	r1, r4
 800edbc:	4628      	mov	r0, r5
 800edbe:	f000 f88b 	bl	800eed8 <__smakebuf_r>
 800edc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edc6:	f013 0201 	ands.w	r2, r3, #1
 800edca:	d00a      	beq.n	800ede2 <__swsetup_r+0x9a>
 800edcc:	2200      	movs	r2, #0
 800edce:	60a2      	str	r2, [r4, #8]
 800edd0:	6962      	ldr	r2, [r4, #20]
 800edd2:	4252      	negs	r2, r2
 800edd4:	61a2      	str	r2, [r4, #24]
 800edd6:	6922      	ldr	r2, [r4, #16]
 800edd8:	b942      	cbnz	r2, 800edec <__swsetup_r+0xa4>
 800edda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800edde:	d1c5      	bne.n	800ed6c <__swsetup_r+0x24>
 800ede0:	bd38      	pop	{r3, r4, r5, pc}
 800ede2:	0799      	lsls	r1, r3, #30
 800ede4:	bf58      	it	pl
 800ede6:	6962      	ldrpl	r2, [r4, #20]
 800ede8:	60a2      	str	r2, [r4, #8]
 800edea:	e7f4      	b.n	800edd6 <__swsetup_r+0x8e>
 800edec:	2000      	movs	r0, #0
 800edee:	e7f7      	b.n	800ede0 <__swsetup_r+0x98>
 800edf0:	20000064 	.word	0x20000064

0800edf4 <_raise_r>:
 800edf4:	291f      	cmp	r1, #31
 800edf6:	b538      	push	{r3, r4, r5, lr}
 800edf8:	4605      	mov	r5, r0
 800edfa:	460c      	mov	r4, r1
 800edfc:	d904      	bls.n	800ee08 <_raise_r+0x14>
 800edfe:	2316      	movs	r3, #22
 800ee00:	6003      	str	r3, [r0, #0]
 800ee02:	f04f 30ff 	mov.w	r0, #4294967295
 800ee06:	bd38      	pop	{r3, r4, r5, pc}
 800ee08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee0a:	b112      	cbz	r2, 800ee12 <_raise_r+0x1e>
 800ee0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee10:	b94b      	cbnz	r3, 800ee26 <_raise_r+0x32>
 800ee12:	4628      	mov	r0, r5
 800ee14:	f000 f830 	bl	800ee78 <_getpid_r>
 800ee18:	4622      	mov	r2, r4
 800ee1a:	4601      	mov	r1, r0
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee22:	f000 b817 	b.w	800ee54 <_kill_r>
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d00a      	beq.n	800ee40 <_raise_r+0x4c>
 800ee2a:	1c59      	adds	r1, r3, #1
 800ee2c:	d103      	bne.n	800ee36 <_raise_r+0x42>
 800ee2e:	2316      	movs	r3, #22
 800ee30:	6003      	str	r3, [r0, #0]
 800ee32:	2001      	movs	r0, #1
 800ee34:	e7e7      	b.n	800ee06 <_raise_r+0x12>
 800ee36:	2100      	movs	r1, #0
 800ee38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	4798      	blx	r3
 800ee40:	2000      	movs	r0, #0
 800ee42:	e7e0      	b.n	800ee06 <_raise_r+0x12>

0800ee44 <raise>:
 800ee44:	4b02      	ldr	r3, [pc, #8]	@ (800ee50 <raise+0xc>)
 800ee46:	4601      	mov	r1, r0
 800ee48:	6818      	ldr	r0, [r3, #0]
 800ee4a:	f7ff bfd3 	b.w	800edf4 <_raise_r>
 800ee4e:	bf00      	nop
 800ee50:	20000064 	.word	0x20000064

0800ee54 <_kill_r>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4d07      	ldr	r5, [pc, #28]	@ (800ee74 <_kill_r+0x20>)
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	4611      	mov	r1, r2
 800ee60:	602b      	str	r3, [r5, #0]
 800ee62:	f7f5 fec3 	bl	8004bec <_kill>
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	d102      	bne.n	800ee70 <_kill_r+0x1c>
 800ee6a:	682b      	ldr	r3, [r5, #0]
 800ee6c:	b103      	cbz	r3, 800ee70 <_kill_r+0x1c>
 800ee6e:	6023      	str	r3, [r4, #0]
 800ee70:	bd38      	pop	{r3, r4, r5, pc}
 800ee72:	bf00      	nop
 800ee74:	20004d14 	.word	0x20004d14

0800ee78 <_getpid_r>:
 800ee78:	f7f5 beb0 	b.w	8004bdc <_getpid>

0800ee7c <_malloc_usable_size_r>:
 800ee7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee80:	1f18      	subs	r0, r3, #4
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	bfbc      	itt	lt
 800ee86:	580b      	ldrlt	r3, [r1, r0]
 800ee88:	18c0      	addlt	r0, r0, r3
 800ee8a:	4770      	bx	lr

0800ee8c <__swhatbuf_r>:
 800ee8c:	b570      	push	{r4, r5, r6, lr}
 800ee8e:	460c      	mov	r4, r1
 800ee90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee94:	2900      	cmp	r1, #0
 800ee96:	b096      	sub	sp, #88	@ 0x58
 800ee98:	4615      	mov	r5, r2
 800ee9a:	461e      	mov	r6, r3
 800ee9c:	da0d      	bge.n	800eeba <__swhatbuf_r+0x2e>
 800ee9e:	89a3      	ldrh	r3, [r4, #12]
 800eea0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eea4:	f04f 0100 	mov.w	r1, #0
 800eea8:	bf14      	ite	ne
 800eeaa:	2340      	movne	r3, #64	@ 0x40
 800eeac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	6031      	str	r1, [r6, #0]
 800eeb4:	602b      	str	r3, [r5, #0]
 800eeb6:	b016      	add	sp, #88	@ 0x58
 800eeb8:	bd70      	pop	{r4, r5, r6, pc}
 800eeba:	466a      	mov	r2, sp
 800eebc:	f000 f848 	bl	800ef50 <_fstat_r>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	dbec      	blt.n	800ee9e <__swhatbuf_r+0x12>
 800eec4:	9901      	ldr	r1, [sp, #4]
 800eec6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eeca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eece:	4259      	negs	r1, r3
 800eed0:	4159      	adcs	r1, r3
 800eed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eed6:	e7eb      	b.n	800eeb0 <__swhatbuf_r+0x24>

0800eed8 <__smakebuf_r>:
 800eed8:	898b      	ldrh	r3, [r1, #12]
 800eeda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eedc:	079d      	lsls	r5, r3, #30
 800eede:	4606      	mov	r6, r0
 800eee0:	460c      	mov	r4, r1
 800eee2:	d507      	bpl.n	800eef4 <__smakebuf_r+0x1c>
 800eee4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	6123      	str	r3, [r4, #16]
 800eeec:	2301      	movs	r3, #1
 800eeee:	6163      	str	r3, [r4, #20]
 800eef0:	b003      	add	sp, #12
 800eef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef4:	ab01      	add	r3, sp, #4
 800eef6:	466a      	mov	r2, sp
 800eef8:	f7ff ffc8 	bl	800ee8c <__swhatbuf_r>
 800eefc:	9f00      	ldr	r7, [sp, #0]
 800eefe:	4605      	mov	r5, r0
 800ef00:	4639      	mov	r1, r7
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7ff f912 	bl	800e12c <_malloc_r>
 800ef08:	b948      	cbnz	r0, 800ef1e <__smakebuf_r+0x46>
 800ef0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef0e:	059a      	lsls	r2, r3, #22
 800ef10:	d4ee      	bmi.n	800eef0 <__smakebuf_r+0x18>
 800ef12:	f023 0303 	bic.w	r3, r3, #3
 800ef16:	f043 0302 	orr.w	r3, r3, #2
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	e7e2      	b.n	800eee4 <__smakebuf_r+0xc>
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	6020      	str	r0, [r4, #0]
 800ef22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef26:	81a3      	strh	r3, [r4, #12]
 800ef28:	9b01      	ldr	r3, [sp, #4]
 800ef2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ef2e:	b15b      	cbz	r3, 800ef48 <__smakebuf_r+0x70>
 800ef30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef34:	4630      	mov	r0, r6
 800ef36:	f000 f81d 	bl	800ef74 <_isatty_r>
 800ef3a:	b128      	cbz	r0, 800ef48 <__smakebuf_r+0x70>
 800ef3c:	89a3      	ldrh	r3, [r4, #12]
 800ef3e:	f023 0303 	bic.w	r3, r3, #3
 800ef42:	f043 0301 	orr.w	r3, r3, #1
 800ef46:	81a3      	strh	r3, [r4, #12]
 800ef48:	89a3      	ldrh	r3, [r4, #12]
 800ef4a:	431d      	orrs	r5, r3
 800ef4c:	81a5      	strh	r5, [r4, #12]
 800ef4e:	e7cf      	b.n	800eef0 <__smakebuf_r+0x18>

0800ef50 <_fstat_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	4d07      	ldr	r5, [pc, #28]	@ (800ef70 <_fstat_r+0x20>)
 800ef54:	2300      	movs	r3, #0
 800ef56:	4604      	mov	r4, r0
 800ef58:	4608      	mov	r0, r1
 800ef5a:	4611      	mov	r1, r2
 800ef5c:	602b      	str	r3, [r5, #0]
 800ef5e:	f7f5 fea5 	bl	8004cac <_fstat>
 800ef62:	1c43      	adds	r3, r0, #1
 800ef64:	d102      	bne.n	800ef6c <_fstat_r+0x1c>
 800ef66:	682b      	ldr	r3, [r5, #0]
 800ef68:	b103      	cbz	r3, 800ef6c <_fstat_r+0x1c>
 800ef6a:	6023      	str	r3, [r4, #0]
 800ef6c:	bd38      	pop	{r3, r4, r5, pc}
 800ef6e:	bf00      	nop
 800ef70:	20004d14 	.word	0x20004d14

0800ef74 <_isatty_r>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	4d06      	ldr	r5, [pc, #24]	@ (800ef90 <_isatty_r+0x1c>)
 800ef78:	2300      	movs	r3, #0
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	4608      	mov	r0, r1
 800ef7e:	602b      	str	r3, [r5, #0]
 800ef80:	f7f5 fea4 	bl	8004ccc <_isatty>
 800ef84:	1c43      	adds	r3, r0, #1
 800ef86:	d102      	bne.n	800ef8e <_isatty_r+0x1a>
 800ef88:	682b      	ldr	r3, [r5, #0]
 800ef8a:	b103      	cbz	r3, 800ef8e <_isatty_r+0x1a>
 800ef8c:	6023      	str	r3, [r4, #0]
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	20004d14 	.word	0x20004d14

0800ef94 <_init>:
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	bf00      	nop
 800ef98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9a:	bc08      	pop	{r3}
 800ef9c:	469e      	mov	lr, r3
 800ef9e:	4770      	bx	lr

0800efa0 <_fini>:
 800efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa2:	bf00      	nop
 800efa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efa6:	bc08      	pop	{r3}
 800efa8:	469e      	mov	lr, r3
 800efaa:	4770      	bx	lr
