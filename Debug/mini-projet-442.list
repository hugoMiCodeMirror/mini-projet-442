
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ee0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e6b0  080170b0  080170b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025760  08025760  000270fc  2**0
                  CONTENTS
  4 .ARM          00000008  08025760  08025760  00026760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025768  08025768  000270fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025768  08025768  00026768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802576c  0802576c  0002676c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08025770  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009708  200000fc  0802586c  000270fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20009804  0802586c  00027804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000270fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034af2  00000000  00000000  0002712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070f3  00000000  00000000  0005bc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c68  00000000  00000000  00062d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002268  00000000  00000000  00065980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a4a6  00000000  00000000  00067be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003831e  00000000  00000000  0007208e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab0f  00000000  00000000  000aa3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c4ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c6bc  00000000  00000000  001c4f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001d15bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017098 	.word	0x08017098

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08017098 	.word	0x08017098

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3303      	adds	r3, #3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	3202      	adds	r2, #2
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	3201      	adds	r2, #1
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
	return rv;
 8000de4:	68fb      	ldr	r3, [r7, #12]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	0a1b      	lsrs	r3, r3, #8
 8000e54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00d      	beq.n	8000eb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	1c53      	adds	r3, r2, #1
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	1c59      	adds	r1, r3, #1
 8000ea4:	6179      	str	r1, [r7, #20]
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f1      	bne.n	8000e9a <mem_cpy+0x1a>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000ec2:	b480      	push	{r7}
 8000ec4:	b087      	sub	sp, #28
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	617a      	str	r2, [r7, #20]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f3      	bne.n	8000ed2 <mem_set+0x10>
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	61fa      	str	r2, [r7, #28]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	61ba      	str	r2, [r7, #24]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <mem_cmp+0x40>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0eb      	beq.n	8000f10 <mem_cmp+0x18>

	return r;
 8000f38:	697b      	ldr	r3, [r7, #20]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8000f50:	e002      	b.n	8000f58 <chk_chr+0x12>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3301      	adds	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <chk_chr+0x26>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d1f2      	bne.n	8000f52 <chk_chr+0xc>
	return *str;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <lock_fs+0x22>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f011 fcc1 	bl	8012916 <ff_req_grant>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <lock_fs+0x22>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <lock_fs+0x24>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00d      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b0c      	cmp	r3, #12
 8000fbe:	d00a      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b0b      	cmp	r3, #11
 8000fc4:	d007      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d004      	beq.n	8000fd6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f011 fcb5 	bl	8012940 <ff_rel_grant>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e029      	b.n	8001048 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <chk_lock+0xb4>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01d      	beq.n	800103e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001002:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <chk_lock+0xb4>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d116      	bne.n	8001042 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <chk_lock+0xb4>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001024:	429a      	cmp	r2, r3
 8001026:	d10c      	bne.n	8001042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001028:	4a1a      	ldr	r2, [pc, #104]	@ (8001094 <chk_lock+0xb4>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	3308      	adds	r3, #8
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8001038:	429a      	cmp	r2, r3
 800103a:	d102      	bne.n	8001042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800103c:	e007      	b.n	800104e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d9d2      	bls.n	8000ff4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d109      	bne.n	8001068 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <chk_lock+0x80>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d101      	bne.n	8001064 <chk_lock+0x84>
 8001060:	2300      	movs	r3, #0
 8001062:	e010      	b.n	8001086 <chk_lock+0xa6>
 8001064:	2312      	movs	r3, #18
 8001066:	e00e      	b.n	8001086 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d108      	bne.n	8001080 <chk_lock+0xa0>
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <chk_lock+0xb4>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	330c      	adds	r3, #12
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800107e:	d101      	bne.n	8001084 <chk_lock+0xa4>
 8001080:	2310      	movs	r3, #16
 8001082:	e000      	b.n	8001086 <chk_lock+0xa6>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000120 	.word	0x20000120

08001098 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e002      	b.n	80010aa <enq_lock+0x12>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d806      	bhi.n	80010be <enq_lock+0x26>
 80010b0:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <enq_lock+0x40>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f2      	bne.n	80010a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000120 	.word	0x20000120

080010dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e01f      	b.n	800112c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80010ec:	4a41      	ldr	r2, [pc, #260]	@ (80011f4 <inc_lock+0x118>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	4413      	add	r3, r2
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d113      	bne.n	8001126 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80010fe:	4a3d      	ldr	r2, [pc, #244]	@ (80011f4 <inc_lock+0x118>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800110e:	429a      	cmp	r2, r3
 8001110:	d109      	bne.n	8001126 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8001112:	4a38      	ldr	r2, [pc, #224]	@ (80011f4 <inc_lock+0x118>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	3308      	adds	r3, #8
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8001122:	429a      	cmp	r2, r3
 8001124:	d006      	beq.n	8001134 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d9dc      	bls.n	80010ec <inc_lock+0x10>
 8001132:	e000      	b.n	8001136 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8001134:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d132      	bne.n	80011a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e002      	b.n	8001148 <inc_lock+0x6c>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d806      	bhi.n	800115c <inc_lock+0x80>
 800114e:	4a29      	ldr	r2, [pc, #164]	@ (80011f4 <inc_lock+0x118>)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f2      	bne.n	8001142 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d101      	bne.n	8001166 <inc_lock+0x8a>
 8001162:	2300      	movs	r3, #0
 8001164:	e040      	b.n	80011e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4922      	ldr	r1, [pc, #136]	@ (80011f4 <inc_lock+0x118>)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	440b      	add	r3, r1
 8001172:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	491e      	ldr	r1, [pc, #120]	@ (80011f4 <inc_lock+0x118>)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	3304      	adds	r3, #4
 8001182:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	491a      	ldr	r1, [pc, #104]	@ (80011f4 <inc_lock+0x118>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	440b      	add	r3, r1
 8001190:	3308      	adds	r3, #8
 8001192:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8001194:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <inc_lock+0x118>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	4413      	add	r3, r2
 800119c:	330c      	adds	r3, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d009      	beq.n	80011bc <inc_lock+0xe0>
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <inc_lock+0x118>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	330c      	adds	r3, #12
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <inc_lock+0xe0>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e015      	b.n	80011e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d108      	bne.n	80011d4 <inc_lock+0xf8>
 80011c2:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <inc_lock+0x118>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	330c      	adds	r3, #12
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	e001      	b.n	80011d8 <inc_lock+0xfc>
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	4906      	ldr	r1, [pc, #24]	@ (80011f4 <inc_lock+0x118>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	330c      	adds	r3, #12
 80011e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20000120 	.word	0x20000120

080011f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d825      	bhi.n	8001258 <dec_lock+0x60>
		n = Files[i].ctr;
 800120c:	4a17      	ldr	r2, [pc, #92]	@ (800126c <dec_lock+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	330c      	adds	r3, #12
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001220:	d101      	bne.n	8001226 <dec_lock+0x2e>
 8001222:	2300      	movs	r3, #0
 8001224:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <dec_lock+0x3a>
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	3b01      	subs	r3, #1
 8001230:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8001232:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <dec_lock+0x74>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	330c      	adds	r3, #12
 800123c:	89fa      	ldrh	r2, [r7, #14]
 800123e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <dec_lock+0x5a>
 8001246:	4a09      	ldr	r2, [pc, #36]	@ (800126c <dec_lock+0x74>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	737b      	strb	r3, [r7, #13]
 8001256:	e001      	b.n	800125c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001258:	2302      	movs	r3, #2
 800125a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800125c:	7b7b      	ldrb	r3, [r7, #13]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000120 	.word	0x20000120

08001270 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e010      	b.n	80012a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <clear_lock+0x44>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d105      	bne.n	800129a <clear_lock+0x2a>
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <clear_lock+0x44>)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d9eb      	bls.n	800127e <clear_lock+0xe>
	}
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20000120 	.word	0x20000120

080012b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d034      	beq.n	8001336 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7858      	ldrb	r0, [r3, #1]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012dc:	2301      	movs	r3, #1
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	f011 fa54 	bl	801278c <disk_write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e022      	b.n	8001336 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	429a      	cmp	r2, r3
 8001304:	d217      	bcs.n	8001336 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	e010      	b.n	8001330 <sync_window+0x78>
					wsect += fs->fsize;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7858      	ldrb	r0, [r3, #1]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001322:	2301      	movs	r3, #1
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	f011 fa31 	bl	801278c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	3b01      	subs	r3, #1
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d8eb      	bhi.n	800130e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d01b      	beq.n	8001390 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <sync_window>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d113      	bne.n	8001390 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7858      	ldrb	r0, [r3, #1]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001372:	2301      	movs	r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	f011 f9e9 	bl	801274c <disk_read>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff87 	bl	80012b8 <sync_window>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d158      	bne.n	8001466 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d148      	bne.n	800144e <sync_fs+0xb2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d144      	bne.n	800144e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3334      	adds	r3, #52	@ 0x34
 80013c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd77 	bl	8000ec2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3334      	adds	r3, #52	@ 0x34
 80013d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80013dc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fd06 	bl	8000df2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3334      	adds	r3, #52	@ 0x34
 80013ea:	4921      	ldr	r1, [pc, #132]	@ (8001470 <sync_fs+0xd4>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd1b 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3334      	adds	r3, #52	@ 0x34
 80013f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80013fa:	491e      	ldr	r1, [pc, #120]	@ (8001474 <sync_fs+0xd8>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd13 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3334      	adds	r3, #52	@ 0x34
 8001406:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f7ff fd09 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3334      	adds	r3, #52	@ 0x34
 800141a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff fcff 	bl	8000e28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7858      	ldrb	r0, [r3, #1]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001442:	2301      	movs	r3, #1
 8001444:	f011 f9a2 	bl	801278c <disk_write>
			fs->fsi_flag = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f011 f9b8 	bl	80127cc <disk_ioctl>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <sync_fs+0xca>
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	41615252 	.word	0x41615252
 8001474:	61417272 	.word	0x61417272

08001478 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3b02      	subs	r3, #2
 8001486:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	3b02      	subs	r3, #2
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d301      	bcc.n	8001498 <clust2sect+0x20>
 8001494:	2300      	movs	r3, #0
 8001496:	e008      	b.n	80014aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	895b      	ldrh	r3, [r3, #10]
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	fb03 f202 	mul.w	r2, r3, r2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	4413      	add	r3, r2
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d904      	bls.n	80014d6 <get_fat+0x20>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e08e      	b.n	80015fa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d061      	beq.n	80015ae <get_fat+0xf8>
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	dc7b      	bgt.n	80015e6 <get_fat+0x130>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d002      	beq.n	80014f8 <get_fat+0x42>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d041      	beq.n	800157a <get_fat+0xc4>
 80014f6:	e076      	b.n	80015e6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	085b      	lsrs	r3, r3, #1
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	0a5b      	lsrs	r3, r3, #9
 800150e:	4413      	add	r3, r2
 8001510:	4619      	mov	r1, r3
 8001512:	6938      	ldr	r0, [r7, #16]
 8001514:	f7ff ff14 	bl	8001340 <move_window>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d166      	bne.n	80015ec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60fa      	str	r2, [r7, #12]
 8001524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001530:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	0a5b      	lsrs	r3, r3, #9
 800153a:	4413      	add	r3, r2
 800153c:	4619      	mov	r1, r3
 800153e:	6938      	ldr	r0, [r7, #16]
 8001540:	f7ff fefe 	bl	8001340 <move_window>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d152      	bne.n	80015f0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4413      	add	r3, r2
 8001554:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4313      	orrs	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <get_fat+0xba>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	e002      	b.n	8001576 <get_fat+0xc0>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	617b      	str	r3, [r7, #20]
			break;
 8001578:	e03f      	b.n	80015fa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	4413      	add	r3, r2
 8001584:	4619      	mov	r1, r3
 8001586:	6938      	ldr	r0, [r7, #16]
 8001588:	f7ff feda 	bl	8001340 <move_window>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d130      	bne.n	80015f4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80015a0:	4413      	add	r3, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fbea 	bl	8000d7c <ld_word>
 80015a8:	4603      	mov	r3, r0
 80015aa:	617b      	str	r3, [r7, #20]
			break;
 80015ac:	e025      	b.n	80015fa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	09db      	lsrs	r3, r3, #7
 80015b6:	4413      	add	r3, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	6938      	ldr	r0, [r7, #16]
 80015bc:	f7ff fec0 	bl	8001340 <move_window>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80015d4:	4413      	add	r3, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fbe8 	bl	8000dac <ld_dword>
 80015dc:	4603      	mov	r3, r0
 80015de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80015e2:	617b      	str	r3, [r7, #20]
			break;
 80015e4:	e009      	b.n	80015fa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80015e6:	2301      	movs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e006      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80015ec:	bf00      	nop
 80015ee:	e004      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80015f0:	bf00      	nop
 80015f2:	e002      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80015f4:	bf00      	nop
 80015f6:	e000      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80015f8:	bf00      	nop
		}
	}

	return val;
 80015fa:	697b      	ldr	r3, [r7, #20]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001610:	2302      	movs	r3, #2
 8001612:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b01      	cmp	r3, #1
 8001618:	f240 80d9 	bls.w	80017ce <put_fat+0x1ca>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	f080 80d3 	bcs.w	80017ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	f000 8096 	beq.w	800175e <put_fat+0x15a>
 8001632:	2b03      	cmp	r3, #3
 8001634:	f300 80cb 	bgt.w	80017ce <put_fat+0x1ca>
 8001638:	2b01      	cmp	r3, #1
 800163a:	d002      	beq.n	8001642 <put_fat+0x3e>
 800163c:	2b02      	cmp	r3, #2
 800163e:	d06e      	beq.n	800171e <put_fat+0x11a>
 8001640:	e0c5      	b.n	80017ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4413      	add	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	0a5b      	lsrs	r3, r3, #9
 8001658:	4413      	add	r3, r2
 800165a:	4619      	mov	r1, r3
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff fe6f 	bl	8001340 <move_window>
 8001662:	4603      	mov	r3, r0
 8001664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 80a9 	bne.w	80017c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	61b9      	str	r1, [r7, #24]
 800167a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00d      	beq.n	80016a8 <put_fat+0xa4>
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	b25a      	sxtb	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e001      	b.n	80016ac <put_fat+0xa8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	0a5b      	lsrs	r3, r3, #9
 80016be:	4413      	add	r3, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fe3c 	bl	8001340 <move_window>
 80016c8:	4603      	mov	r3, r0
 80016ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d178      	bne.n	80017c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <put_fat+0xf0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	e00e      	b.n	8001712 <put_fat+0x10e>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	f023 030f 	bic.w	r3, r3, #15
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b25b      	sxtb	r3, r3
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25b      	sxtb	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	70da      	strb	r2, [r3, #3]
			break;
 800171c:	e057      	b.n	80017ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	4413      	add	r3, r2
 8001728:	4619      	mov	r1, r3
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fe08 	bl	8001340 <move_window>
 8001730:	4603      	mov	r3, r0
 8001732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d146      	bne.n	80017c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8001748:	4413      	add	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	b292      	uxth	r2, r2
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fb4e 	bl	8000df2 <st_word>
			fs->wflag = 1;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	70da      	strb	r2, [r3, #3]
			break;
 800175c:	e037      	b.n	80017ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	09db      	lsrs	r3, r3, #7
 8001766:	4413      	add	r3, r2
 8001768:	4619      	mov	r1, r3
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fde8 	bl	8001340 <move_window>
 8001770:	4603      	mov	r3, r0
 8001772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d128      	bne.n	80017cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb0b 	bl	8000dac <ld_dword>
 8001796:	4603      	mov	r3, r0
 8001798:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800179c:	4323      	orrs	r3, r4
 800179e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80017ae:	4413      	add	r3, r2
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fb38 	bl	8000e28 <st_dword>
			fs->wflag = 1;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	70da      	strb	r2, [r3, #3]
			break;
 80017be:	e006      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c0:	bf00      	nop
 80017c2:	e004      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c4:	bf00      	nop
 80017c6:	e002      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c8:	bf00      	nop
 80017ca:	e000      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017cc:	bf00      	nop
		}
	}
	return res;
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3724      	adds	r7, #36	@ 0x24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d904      	bls.n	80017fe <remove_chain+0x26>
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d301      	bcc.n	8001802 <remove_chain+0x2a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e04b      	b.n	800189a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	69b8      	ldr	r0, [r7, #24]
 8001810:	f7ff fef8 	bl	8001604 <put_fat>
 8001814:	4603      	mov	r3, r0
 8001816:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001818:	7ffb      	ldrb	r3, [r7, #31]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <remove_chain+0x4a>
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	e03b      	b.n	800189a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fe46 	bl	80014b6 <get_fat>
 800182a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d031      	beq.n	8001896 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <remove_chain+0x64>
 8001838:	2302      	movs	r3, #2
 800183a:	e02e      	b.n	800189a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	d101      	bne.n	8001848 <remove_chain+0x70>
 8001844:	2301      	movs	r3, #1
 8001846:	e028      	b.n	800189a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001848:	2200      	movs	r2, #0
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	69b8      	ldr	r0, [r7, #24]
 800184e:	f7ff fed9 	bl	8001604 <put_fat>
 8001852:	4603      	mov	r3, r0
 8001854:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001856:	7ffb      	ldrb	r3, [r7, #31]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <remove_chain+0x88>
 800185c:	7ffb      	ldrb	r3, [r7, #31]
 800185e:	e01c      	b.n	800189a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	3b02      	subs	r3, #2
 800186a:	429a      	cmp	r2, r3
 800186c:	d20b      	bcs.n	8001886 <remove_chain+0xae>
			fs->free_clst++;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	791b      	ldrb	r3, [r3, #4]
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3c6      	bcc.n	8001822 <remove_chain+0x4a>
 8001894:	e000      	b.n	8001898 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8001896:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b088      	sub	sp, #32
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <create_chain+0x2c>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d31b      	bcc.n	8001906 <create_chain+0x64>
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e018      	b.n	8001906 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fded 	bl	80014b6 <get_fat>
 80018dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d801      	bhi.n	80018e8 <create_chain+0x46>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e070      	b.n	80019ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d101      	bne.n	80018f4 <create_chain+0x52>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	e06a      	b.n	80019ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d201      	bcs.n	8001902 <create_chain+0x60>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	e063      	b.n	80019ca <create_chain+0x128>
		scl = clst;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	429a      	cmp	r2, r3
 8001918:	d307      	bcc.n	800192a <create_chain+0x88>
				ncl = 2;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	429a      	cmp	r2, r3
 8001924:	d901      	bls.n	800192a <create_chain+0x88>
 8001926:	2300      	movs	r3, #0
 8001928:	e04f      	b.n	80019ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800192a:	69f9      	ldr	r1, [r7, #28]
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fdc2 	bl	80014b6 <get_fat>
 8001932:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d003      	beq.n	8001948 <create_chain+0xa6>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001946:	d101      	bne.n	800194c <create_chain+0xaa>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	e03e      	b.n	80019ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	429a      	cmp	r2, r3
 8001952:	d1da      	bne.n	800190a <create_chain+0x68>
 8001954:	2300      	movs	r3, #0
 8001956:	e038      	b.n	80019ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8001958:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	69f9      	ldr	r1, [r7, #28]
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f7ff fe4f 	bl	8001604 <put_fat>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <create_chain+0xe2>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	6938      	ldr	r0, [r7, #16]
 800197c:	f7ff fe42 	bl	8001604 <put_fat>
 8001980:	4603      	mov	r3, r0
 8001982:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	3b02      	subs	r3, #2
 800199a:	429a      	cmp	r2, r3
 800199c:	d804      	bhi.n	80019a8 <create_chain+0x106>
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	711a      	strb	r2, [r3, #4]
 80019b6:	e007      	b.n	80019c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <create_chain+0x122>
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e000      	b.n	80019c6 <create_chain+0x124>
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80019c8:	69fb      	ldr	r3, [r7, #28]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	3304      	adds	r3, #4
 80019e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	0a5b      	lsrs	r3, r3, #9
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	8952      	ldrh	r2, [r2, #10]
 80019f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	613a      	str	r2, [r7, #16]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <clmt_clust+0x3a>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e010      	b.n	8001a2e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d307      	bcc.n	8001a24 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001a22:	e7e9      	b.n	80019f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8001a24:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a50:	d204      	bcs.n	8001a5c <dir_sdi+0x22>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <dir_sdi+0x26>
		return FR_INT_ERR;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e063      	b.n	8001b28 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <dir_sdi+0x46>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <dir_sdi+0x46>
		clst = fs->dirbase;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	8912      	ldrh	r2, [r2, #8]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d301      	bcc.n	8001a96 <dir_sdi+0x5c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e048      	b.n	8001b28 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	61da      	str	r2, [r3, #28]
 8001a9e:	e029      	b.n	8001af4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	895b      	ldrh	r3, [r3, #10]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001aa8:	e019      	b.n	8001ade <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fd01 	bl	80014b6 <get_fat>
 8001ab4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d101      	bne.n	8001ac2 <dir_sdi+0x88>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d904      	bls.n	8001ad2 <dir_sdi+0x98>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d301      	bcc.n	8001ad6 <dir_sdi+0x9c>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e028      	b.n	8001b28 <dir_sdi+0xee>
			ofs -= csz;
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2e1      	bcs.n	8001aaa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fcc5 	bl	8001478 <clust2sect>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <dir_sdi+0xcc>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e010      	b.n	8001b28 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	0a5b      	lsrs	r3, r3, #9
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	3320      	adds	r3, #32
 8001b46:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <dir_next+0x28>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b56:	d301      	bcc.n	8001b5c <dir_next+0x2c>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e0aa      	b.n	8001cb2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 8098 	bne.w	8001c98 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10b      	bne.n	8001b92 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	8912      	ldrh	r2, [r2, #8]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f0c0 8088 	bcc.w	8001c98 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e08f      	b.n	8001cb2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	0a5b      	lsrs	r3, r3, #9
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	8952      	ldrh	r2, [r2, #10]
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d17a      	bne.n	8001c98 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7ff fc83 	bl	80014b6 <get_fat>
 8001bb0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d801      	bhi.n	8001bbc <dir_next+0x8c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e07a      	b.n	8001cb2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d101      	bne.n	8001bc8 <dir_next+0x98>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e074      	b.n	8001cb2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d358      	bcc.n	8001c84 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	2304      	movs	r3, #4
 8001be0:	e067      	b.n	8001cb2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff fe59 	bl	80018a2 <create_chain>
 8001bf0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <dir_next+0xcc>
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	e05a      	b.n	8001cb2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <dir_next+0xd6>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e055      	b.n	8001cb2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d101      	bne.n	8001c12 <dir_next+0xe2>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e04f      	b.n	8001cb2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fb50 	bl	80012b8 <sync_window>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <dir_next+0xf2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e047      	b.n	8001cb2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3334      	adds	r3, #52	@ 0x34
 8001c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f948 	bl	8000ec2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fc1d 	bl	8001478 <clust2sect>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c44:	e012      	b.n	8001c6c <dir_next+0x13c>
						fs->wflag = 1;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fb33 	bl	80012b8 <sync_window>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <dir_next+0x12c>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e02a      	b.n	8001cb2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	895b      	ldrh	r3, [r3, #10]
 8001c70:	461a      	mov	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d3e6      	bcc.n	8001c46 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad2      	subs	r2, r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8001c8a:	6979      	ldr	r1, [r7, #20]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff fbf3 	bl	8001478 <clust2sect>
 8001c92:	4602      	mov	r2, r0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001caa:	441a      	add	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff feb4 	bl	8001a3a <dir_sdi>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12b      	bne.n	8001d34 <dir_alloc+0x7a>
		n = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff fb2a 	bl	8001340 <move_window>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11d      	bne.n	8001d32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2be5      	cmp	r3, #229	@ 0xe5
 8001cfe:	d004      	beq.n	8001d0a <dir_alloc+0x50>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d102      	bne.n	8001d1e <dir_alloc+0x64>
 8001d18:	e00c      	b.n	8001d34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff05 	bl	8001b30 <dir_next>
 8001d26:	4603      	mov	r3, r0
 8001d28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0d7      	beq.n	8001ce0 <dir_alloc+0x26>
 8001d30:	e000      	b.n	8001d34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8001d32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d101      	bne.n	8001d3e <dir_alloc+0x84>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	331a      	adds	r3, #26
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f810 	bl	8000d7c <ld_word>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d109      	bne.n	8001d7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f805 	bl	8000d7c <ld_word>
 8001d72:	4603      	mov	r3, r0
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	331a      	adds	r3, #26
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f828 	bl	8000df2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d109      	bne.n	8001dbe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f103 0214 	add.w	r2, r3, #20
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7ff f81a 	bl	8000df2 <st_word>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fe2f 	bl	8001a3a <dir_sdi>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <dir_find+0x24>
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	e03e      	b.n	8001e68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6938      	ldr	r0, [r7, #16]
 8001df2:	f7ff faa5 	bl	8001340 <move_window>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12f      	bne.n	8001e60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <dir_find+0x4e>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e028      	b.n	8001e66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	330b      	adds	r3, #11
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	330b      	adds	r3, #11
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <dir_find+0x86>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a18      	ldr	r0, [r3, #32]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3324      	adds	r3, #36	@ 0x24
 8001e3e:	220b      	movs	r2, #11
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7ff f859 	bl	8000ef8 <mem_cmp>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fe6e 	bl	8001b30 <dir_next>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0c5      	beq.n	8001dea <dir_find+0x24>
 8001e5e:	e002      	b.n	8001e66 <dir_find+0xa0>
		if (res != FR_OK) break;
 8001e60:	bf00      	nop
 8001e62:	e000      	b.n	8001e66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001e64:	bf00      	nop

	return res;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8001e7e:	2101      	movs	r1, #1
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff1a 	bl	8001cba <dir_alloc>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11c      	bne.n	8001eca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4619      	mov	r1, r3
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	f7ff fa52 	bl	8001340 <move_window>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d111      	bne.n	8001eca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f807 	bl	8000ec2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a18      	ldr	r0, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3324      	adds	r3, #36	@ 0x24
 8001ebc:	220b      	movs	r2, #11
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe ffde 	bl	8000e80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3324      	adds	r3, #36	@ 0x24
 8001ee8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8001eea:	220b      	movs	r2, #11
 8001eec:	2120      	movs	r1, #32
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f7fe ffe7 	bl	8000ec2 <mem_set>
	si = i = 0; ni = 8;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	2308      	movs	r3, #8
 8001efe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	61fa      	str	r2, [r7, #28]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001f0e:	7efb      	ldrb	r3, [r7, #27]
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d94e      	bls.n	8001fb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8001f14:	7efb      	ldrb	r3, [r7, #27]
 8001f16:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f18:	d006      	beq.n	8001f28 <create_name+0x54>
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f1e:	d110      	bne.n	8001f42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8001f20:	e002      	b.n	8001f28 <create_name+0x54>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f32:	d0f6      	beq.n	8001f22 <create_name+0x4e>
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f3e:	d0f0      	beq.n	8001f22 <create_name+0x4e>
			break;
 8001f40:	e038      	b.n	8001fb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8001f42:	7efb      	ldrb	r3, [r7, #27]
 8001f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f46:	d003      	beq.n	8001f50 <create_name+0x7c>
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d30c      	bcc.n	8001f6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b0b      	cmp	r3, #11
 8001f54:	d002      	beq.n	8001f5c <create_name+0x88>
 8001f56:	7efb      	ldrb	r3, [r7, #27]
 8001f58:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f5a:	d001      	beq.n	8001f60 <create_name+0x8c>
 8001f5c:	2306      	movs	r3, #6
 8001f5e:	e044      	b.n	8001fea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8001f60:	2308      	movs	r3, #8
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	230b      	movs	r3, #11
 8001f66:	617b      	str	r3, [r7, #20]
			continue;
 8001f68:	e022      	b.n	8001fb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8001f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da04      	bge.n	8001f7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001f72:	7efb      	ldrb	r3, [r7, #27]
 8001f74:	3b80      	subs	r3, #128	@ 0x80
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <create_name+0x120>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8001f7c:	7efb      	ldrb	r3, [r7, #27]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481d      	ldr	r0, [pc, #116]	@ (8001ff8 <create_name+0x124>)
 8001f82:	f7fe ffe0 	bl	8000f46 <chk_chr>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <create_name+0xbc>
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	e02c      	b.n	8001fea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8001f90:	7efb      	ldrb	r3, [r7, #27]
 8001f92:	2b60      	cmp	r3, #96	@ 0x60
 8001f94:	d905      	bls.n	8001fa2 <create_name+0xce>
 8001f96:	7efb      	ldrb	r3, [r7, #27]
 8001f98:	2b7a      	cmp	r3, #122	@ 0x7a
 8001f9a:	d802      	bhi.n	8001fa2 <create_name+0xce>
 8001f9c:	7efb      	ldrb	r3, [r7, #27]
 8001f9e:	3b20      	subs	r3, #32
 8001fa0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	613a      	str	r2, [r7, #16]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	7efa      	ldrb	r2, [r7, #27]
 8001fae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001fb0:	e7a6      	b.n	8001f00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001fb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	441a      	add	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <create_name+0xf4>
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	e010      	b.n	8001fea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2be5      	cmp	r3, #229	@ 0xe5
 8001fce:	d102      	bne.n	8001fd6 <create_name+0x102>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8001fd6:	7efb      	ldrb	r3, [r7, #27]
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d801      	bhi.n	8001fe0 <create_name+0x10c>
 8001fdc:	2204      	movs	r2, #4
 8001fde:	e000      	b.n	8001fe2 <create_name+0x10e>
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	330b      	adds	r3, #11
 8001fe6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001fe8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	080172fc 	.word	0x080172fc
 8001ff8:	080170b0 	.word	0x080170b0

08001ffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002010:	e002      	b.n	8002018 <follow_path+0x1c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b2f      	cmp	r3, #47	@ 0x2f
 800201e:	d0f8      	beq.n	8002012 <follow_path+0x16>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b5c      	cmp	r3, #92	@ 0x5c
 8002026:	d0f4      	beq.n	8002012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b1f      	cmp	r3, #31
 8002034:	d80a      	bhi.n	800204c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800203e:	2100      	movs	r1, #0
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fcfa 	bl	8001a3a <dir_sdi>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
 800204a:	e043      	b.n	80020d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff3f 	bl	8001ed4 <create_name>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d134      	bne.n	80020ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff feb0 	bl	8001dc6 <dir_find>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d127      	bne.n	80020ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d122      	bne.n	80020ce <follow_path+0xd2>
 8002088:	2305      	movs	r3, #5
 800208a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800208c:	e01f      	b.n	80020ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11c      	bne.n	80020d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	799b      	ldrb	r3, [r3, #6]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80020a4:	2305      	movs	r3, #5
 80020a6:	75fb      	strb	r3, [r7, #23]
 80020a8:	e014      	b.n	80020d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	4413      	add	r3, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fe43 	bl	8001d48 <ld_clust>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80020c8:	e7c0      	b.n	800204c <follow_path+0x50>
			if (res != FR_OK) break;
 80020ca:	bf00      	nop
 80020cc:	e002      	b.n	80020d4 <follow_path+0xd8>
				break;
 80020ce:	bf00      	nop
 80020d0:	e000      	b.n	80020d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80020d2:	bf00      	nop
			}
		}
	}

	return res;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80020de:	b480      	push	{r7}
 80020e0:	b087      	sub	sp, #28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d031      	beq.n	8002158 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e002      	b.n	8002102 <get_ldnumber+0x24>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b20      	cmp	r3, #32
 8002108:	d903      	bls.n	8002112 <get_ldnumber+0x34>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002110:	d1f4      	bne.n	80020fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b3a      	cmp	r3, #58	@ 0x3a
 8002118:	d11c      	bne.n	8002154 <get_ldnumber+0x76>
			tp = *path;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60fa      	str	r2, [r7, #12]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	3b30      	subs	r3, #48	@ 0x30
 800212a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b09      	cmp	r3, #9
 8002130:	d80e      	bhi.n	8002150 <get_ldnumber+0x72>
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	429a      	cmp	r2, r3
 8002138:	d10a      	bne.n	8002150 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <get_ldnumber+0x72>
					vol = (int)i;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	e002      	b.n	800215a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002158:	693b      	ldr	r3, [r7, #16]
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	70da      	strb	r2, [r3, #3]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff f8dc 	bl	8001340 <move_window>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <check_fs+0x2a>
 800218e:	2304      	movs	r3, #4
 8002190:	e038      	b.n	8002204 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3334      	adds	r3, #52	@ 0x34
 8002196:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fdee 	bl	8000d7c <ld_word>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <check_fs+0x48>
 80021ac:	2303      	movs	r3, #3
 80021ae:	e029      	b.n	8002204 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021b6:	2be9      	cmp	r3, #233	@ 0xe9
 80021b8:	d009      	beq.n	80021ce <check_fs+0x66>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021c0:	2beb      	cmp	r3, #235	@ 0xeb
 80021c2:	d11e      	bne.n	8002202 <check_fs+0x9a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80021ca:	2b90      	cmp	r3, #144	@ 0x90
 80021cc:	d119      	bne.n	8002202 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3334      	adds	r3, #52	@ 0x34
 80021d2:	3336      	adds	r3, #54	@ 0x36
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fde9 	bl	8000dac <ld_dword>
 80021da:	4603      	mov	r3, r0
 80021dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021e0:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <check_fs+0xa4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <check_fs+0x82>
 80021e6:	2300      	movs	r3, #0
 80021e8:	e00c      	b.n	8002204 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3334      	adds	r3, #52	@ 0x34
 80021ee:	3352      	adds	r3, #82	@ 0x52
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fddb 	bl	8000dac <ld_dword>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <check_fs+0xa8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <check_fs+0x9a>
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8002202:	2302      	movs	r3, #2
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00544146 	.word	0x00544146
 8002210:	33544146 	.word	0x33544146

08002214 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b096      	sub	sp, #88	@ 0x58
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff ff58 	bl	80020de <get_ldnumber>
 800222e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	da01      	bge.n	800223a <find_volume+0x26>
 8002236:	230b      	movs	r3, #11
 8002238:	e235      	b.n	80026a6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800223a:	4aa5      	ldr	r2, [pc, #660]	@ (80024d0 <find_volume+0x2bc>)
 800223c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <find_volume+0x3a>
 800224a:	230c      	movs	r3, #12
 800224c:	e22b      	b.n	80026a6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800224e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002250:	f7fe fe94 	bl	8000f7c <lock_fs>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <find_volume+0x4a>
 800225a:	230f      	movs	r3, #15
 800225c:	e223      	b.n	80026a6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002262:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800226c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01a      	beq.n	80022aa <find_volume+0x96>
		stat = disk_status(fs->drv);
 8002274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	4618      	mov	r0, r3
 800227a:	f010 fa27 	bl	80126cc <disk_status>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10c      	bne.n	80022aa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <find_volume+0x92>
 8002296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80022a2:	230a      	movs	r3, #10
 80022a4:	e1ff      	b.n	80026a6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80022a6:	2300      	movs	r3, #0
 80022a8:	e1fd      	b.n	80026a6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80022b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	4618      	mov	r0, r3
 80022be:	f010 fa1f 	bl	8012700 <disk_initialize>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80022c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80022d4:	2303      	movs	r3, #3
 80022d6:	e1e6      	b.n	80026a6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <find_volume+0xda>
 80022de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80022ea:	230a      	movs	r3, #10
 80022ec:	e1db      	b.n	80026a6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80022f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80022f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80022f6:	f7ff ff37 	bl	8002168 <check_fs>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002304:	2b02      	cmp	r3, #2
 8002306:	d149      	bne.n	800239c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	@ 0x40
 800230c:	e01e      	b.n	800234c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002310:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8002314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800231c:	4413      	add	r3, r2
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	3304      	adds	r3, #4
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <find_volume+0x124>
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	3308      	adds	r3, #8
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fd3c 	bl	8000dac <ld_dword>
 8002334:	4602      	mov	r2, r0
 8002336:	e000      	b.n	800233a <find_volume+0x126>
 8002338:	2200      	movs	r2, #0
 800233a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3358      	adds	r3, #88	@ 0x58
 8002340:	443b      	add	r3, r7
 8002342:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002348:	3301      	adds	r3, #1
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
 800234c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234e:	2b03      	cmp	r3, #3
 8002350:	d9dd      	bls.n	800230e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002352:	2300      	movs	r3, #0
 8002354:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8002356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <find_volume+0x14e>
 800235c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235e:	3b01      	subs	r3, #1
 8002360:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3358      	adds	r3, #88	@ 0x58
 8002368:	443b      	add	r3, r7
 800236a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800236e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <find_volume+0x16e>
 8002376:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002378:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800237a:	f7ff fef5 	bl	8002168 <check_fs>
 800237e:	4603      	mov	r3, r0
 8002380:	e000      	b.n	8002384 <find_volume+0x170>
 8002382:	2303      	movs	r3, #3
 8002384:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002388:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800238c:	2b01      	cmp	r3, #1
 800238e:	d905      	bls.n	800239c <find_volume+0x188>
 8002390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002392:	3301      	adds	r3, #1
 8002394:	643b      	str	r3, [r7, #64]	@ 0x40
 8002396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002398:	2b03      	cmp	r3, #3
 800239a:	d9e2      	bls.n	8002362 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800239c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d101      	bne.n	80023a8 <find_volume+0x194>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e17e      	b.n	80026a6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80023a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d901      	bls.n	80023b4 <find_volume+0x1a0>
 80023b0:	230d      	movs	r3, #13
 80023b2:	e178      	b.n	80026a6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80023b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b6:	3334      	adds	r3, #52	@ 0x34
 80023b8:	330b      	adds	r3, #11
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fcde 	bl	8000d7c <ld_word>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c6:	d001      	beq.n	80023cc <find_volume+0x1b8>
 80023c8:	230d      	movs	r3, #13
 80023ca:	e16c      	b.n	80026a6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80023cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ce:	3334      	adds	r3, #52	@ 0x34
 80023d0:	3316      	adds	r3, #22
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fcd2 	bl	8000d7c <ld_word>
 80023d8:	4603      	mov	r3, r0
 80023da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80023dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <find_volume+0x1dc>
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	3334      	adds	r3, #52	@ 0x34
 80023e6:	3324      	adds	r3, #36	@ 0x24
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fcdf 	bl	8000dac <ld_dword>
 80023ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80023f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80023f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80023fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d005      	beq.n	8002414 <find_volume+0x200>
 8002408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d001      	beq.n	8002414 <find_volume+0x200>
 8002410:	230d      	movs	r3, #13
 8002412:	e148      	b.n	80026a6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	789b      	ldrb	r3, [r3, #2]
 8002418:	461a      	mov	r2, r3
 800241a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002428:	461a      	mov	r2, r3
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800242e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002430:	895b      	ldrh	r3, [r3, #10]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <find_volume+0x234>
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	895b      	ldrh	r3, [r3, #10]
 800243a:	461a      	mov	r2, r3
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	895b      	ldrh	r3, [r3, #10]
 8002440:	3b01      	subs	r3, #1
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <find_volume+0x238>
 8002448:	230d      	movs	r3, #13
 800244a:	e12c      	b.n	80026a6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	3334      	adds	r3, #52	@ 0x34
 8002450:	3311      	adds	r3, #17
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc92 	bl	8000d7c <ld_word>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	891b      	ldrh	r3, [r3, #8]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <find_volume+0x25e>
 800246e:	230d      	movs	r3, #13
 8002470:	e119      	b.n	80026a6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002474:	3334      	adds	r3, #52	@ 0x34
 8002476:	3313      	adds	r3, #19
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fc7f 	bl	8000d7c <ld_word>
 800247e:	4603      	mov	r3, r0
 8002480:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d106      	bne.n	8002496 <find_volume+0x282>
 8002488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248a:	3334      	adds	r3, #52	@ 0x34
 800248c:	3320      	adds	r3, #32
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fc8c 	bl	8000dac <ld_dword>
 8002494:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	3334      	adds	r3, #52	@ 0x34
 800249a:	330e      	adds	r3, #14
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc6d 	bl	8000d7c <ld_word>
 80024a2:	4603      	mov	r3, r0
 80024a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80024a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <find_volume+0x29c>
 80024ac:	230d      	movs	r3, #13
 80024ae:	e0fa      	b.n	80026a6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80024b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80024b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024b4:	4413      	add	r3, r2
 80024b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b8:	8912      	ldrh	r2, [r2, #8]
 80024ba:	0912      	lsrs	r2, r2, #4
 80024bc:	b292      	uxth	r2, r2
 80024be:	4413      	add	r3, r2
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80024c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d204      	bcs.n	80024d4 <find_volume+0x2c0>
 80024ca:	230d      	movs	r3, #13
 80024cc:	e0eb      	b.n	80026a6 <find_volume+0x492>
 80024ce:	bf00      	nop
 80024d0:	20000118 	.word	0x20000118
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80024d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024dc:	8952      	ldrh	r2, [r2, #10]
 80024de:	fbb3 f3f2 	udiv	r3, r3, r2
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <find_volume+0x2da>
 80024ea:	230d      	movs	r3, #13
 80024ec:	e0db      	b.n	80026a6 <find_volume+0x492>
		fmt = FS_FAT32;
 80024ee:	2303      	movs	r3, #3
 80024f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d802      	bhi.n	8002504 <find_volume+0x2f0>
 80024fe:	2302      	movs	r3, #2
 8002500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800250a:	4293      	cmp	r3, r2
 800250c:	d802      	bhi.n	8002514 <find_volume+0x300>
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800251c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002520:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002522:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002526:	441a      	add	r2, r3
 8002528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800252c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800252e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002530:	441a      	add	r2, r3
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8002536:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800253a:	2b03      	cmp	r3, #3
 800253c:	d11e      	bne.n	800257c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	3334      	adds	r3, #52	@ 0x34
 8002542:	332a      	adds	r3, #42	@ 0x2a
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fc19 	bl	8000d7c <ld_word>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <find_volume+0x340>
 8002550:	230d      	movs	r3, #13
 8002552:	e0a8      	b.n	80026a6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002556:	891b      	ldrh	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <find_volume+0x34c>
 800255c:	230d      	movs	r3, #13
 800255e:	e0a2      	b.n	80026a6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002562:	3334      	adds	r3, #52	@ 0x34
 8002564:	332c      	adds	r3, #44	@ 0x2c
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fc20 	bl	8000dac <ld_dword>
 800256c:	4602      	mov	r2, r0
 800256e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	647b      	str	r3, [r7, #68]	@ 0x44
 800257a:	e01f      	b.n	80025bc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257e:	891b      	ldrh	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <find_volume+0x374>
 8002584:	230d      	movs	r3, #13
 8002586:	e08e      	b.n	80026a6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258e:	441a      	add	r2, r3
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002598:	2b02      	cmp	r3, #2
 800259a:	d103      	bne.n	80025a4 <find_volume+0x390>
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	e00a      	b.n	80025ba <find_volume+0x3a6>
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	085a      	lsrs	r2, r3, #1
 80025b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80025ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80025c6:	0a5b      	lsrs	r3, r3, #9
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d201      	bcs.n	80025d0 <find_volume+0x3bc>
 80025cc:	230d      	movs	r3, #13
 80025ce:	e06a      	b.n	80026a6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80025d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d2:	f04f 32ff 	mov.w	r2, #4294967295
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80025e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80025e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d149      	bne.n	8002682 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	3334      	adds	r3, #52	@ 0x34
 80025f2:	3330      	adds	r3, #48	@ 0x30
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fbc1 	bl	8000d7c <ld_word>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d140      	bne.n	8002682 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002602:	3301      	adds	r3, #1
 8002604:	4619      	mov	r1, r3
 8002606:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002608:	f7fe fe9a 	bl	8001340 <move_window>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d137      	bne.n	8002682 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002614:	2200      	movs	r2, #0
 8002616:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	3334      	adds	r3, #52	@ 0x34
 800261c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fbab 	bl	8000d7c <ld_word>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800262e:	429a      	cmp	r2, r3
 8002630:	d127      	bne.n	8002682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002634:	3334      	adds	r3, #52	@ 0x34
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fbb8 	bl	8000dac <ld_dword>
 800263c:	4603      	mov	r3, r0
 800263e:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <find_volume+0x49c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d11e      	bne.n	8002682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	3334      	adds	r3, #52	@ 0x34
 8002648:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fbad 	bl	8000dac <ld_dword>
 8002652:	4603      	mov	r3, r0
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <find_volume+0x4a0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d113      	bne.n	8002682 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	3334      	adds	r3, #52	@ 0x34
 800265e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fba2 	bl	8000dac <ld_dword>
 8002668:	4602      	mov	r2, r0
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	3334      	adds	r3, #52	@ 0x34
 8002672:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fb98 	bl	8000dac <ld_dword>
 800267c:	4602      	mov	r2, r0
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002680:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002684:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8002688:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <find_volume+0x4a4>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <find_volume+0x4a4>)
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <find_volume+0x4a4>)
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800269e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026a0:	f7fe fde6 	bl	8001270 <clear_lock>
#endif
	return FR_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3758      	adds	r7, #88	@ 0x58
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	41615252 	.word	0x41615252
 80026b4:	61417272 	.word	0x61417272
 80026b8:	2000011c 	.word	0x2000011c

080026bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80026c6:	2309      	movs	r3, #9
 80026c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02e      	beq.n	800272e <validate+0x72>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02a      	beq.n	800272e <validate+0x72>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d025      	beq.n	800272e <validate+0x72>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	889a      	ldrh	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	88db      	ldrh	r3, [r3, #6]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d11e      	bne.n	800272e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fc41 	bl	8000f7c <lock_fs>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d014      	beq.n	800272a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	4618      	mov	r0, r3
 8002708:	f00f ffe0 	bl	80126cc <disk_status>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <validate+0x60>
				res = FR_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e008      	b.n	800272e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc40 	bl	8000fa8 <unlock_fs>
 8002728:	e001      	b.n	800272e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800272a:	230f      	movs	r3, #15
 800272c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <validate+0x7e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e000      	b.n	800273c <validate+0x80>
 800273a:	2300      	movs	r3, #0
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6013      	str	r3, [r2, #0]
	return res;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fcbb 	bl	80020de <get_ldnumber>
 8002768:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b00      	cmp	r3, #0
 800276e:	da01      	bge.n	8002774 <f_mount+0x28>
 8002770:	230b      	movs	r3, #11
 8002772:	e048      	b.n	8002806 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002774:	4a26      	ldr	r2, [pc, #152]	@ (8002810 <f_mount+0xc4>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8002784:	69b8      	ldr	r0, [r7, #24]
 8002786:	f7fe fd73 	bl	8001270 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f010 f8b5 	bl	80128fe <ff_del_syncobj>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <f_mount+0x52>
 800279a:	2302      	movs	r3, #2
 800279c:	e033      	b.n	8002806 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	330c      	adds	r3, #12
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f010 f87f 	bl	80128be <ff_cre_syncobj>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <f_mount+0x7e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e01d      	b.n	8002806 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4910      	ldr	r1, [pc, #64]	@ (8002810 <f_mount+0xc4>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <f_mount+0x94>
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d001      	beq.n	80027e4 <f_mount+0x98>
 80027e0:	2300      	movs	r3, #0
 80027e2:	e010      	b.n	8002806 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80027e4:	f107 010c 	add.w	r1, r7, #12
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	2200      	movs	r2, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fd10 	bl	8002214 <find_volume>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	7dfa      	ldrb	r2, [r7, #23]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fbd2 	bl	8000fa8 <unlock_fs>
 8002804:	7dfb      	ldrb	r3, [r7, #23]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000118 	.word	0x20000118

08002814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b09a      	sub	sp, #104	@ 0x68
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	4613      	mov	r3, r2
 8002820:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <f_open+0x18>
 8002828:	2309      	movs	r3, #9
 800282a:	e1b0      	b.n	8002b8e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002832:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	f107 0114 	add.w	r1, r7, #20
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fce8 	bl	8002214 <find_volume>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800284a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 818d 	bne.w	8002b6e <f_open+0x35a>
		dj.obj.fs = fs;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	f107 0318 	add.w	r3, r7, #24
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fbcb 	bl	8001ffc <follow_path>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800286c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002870:	2b00      	cmp	r3, #0
 8002872:	d118      	bne.n	80028a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002874:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002878:	b25b      	sxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	da03      	bge.n	8002886 <f_open+0x72>
				res = FR_INVALID_NAME;
 800287e:	2306      	movs	r3, #6
 8002880:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002884:	e00f      	b.n	80028a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf8c      	ite	hi
 800288c:	2301      	movhi	r3, #1
 800288e:	2300      	movls	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fba0 	bl	8000fe0 <chk_lock>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 031c 	and.w	r3, r3, #28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d07f      	beq.n	80029b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80028b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d017      	beq.n	80028e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80028b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d10e      	bne.n	80028de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80028c0:	f7fe fbea 	bl	8001098 <enq_lock>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <f_open+0xc4>
 80028ca:	f107 0318 	add.w	r3, r7, #24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff face 	bl	8001e70 <dir_register>
 80028d4:	4603      	mov	r3, r0
 80028d6:	e000      	b.n	80028da <f_open+0xc6>
 80028d8:	2312      	movs	r3, #18
 80028da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	e010      	b.n	800290a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80028e8:	7fbb      	ldrb	r3, [r7, #30]
 80028ea:	f003 0311 	and.w	r3, r3, #17
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <f_open+0xe6>
					res = FR_DENIED;
 80028f2:	2307      	movs	r3, #7
 80028f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80028f8:	e007      	b.n	800290a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <f_open+0xf6>
 8002904:	2308      	movs	r3, #8
 8002906:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800290a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800290e:	2b00      	cmp	r3, #0
 8002910:	d168      	bne.n	80029e4 <f_open+0x1d0>
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d063      	beq.n	80029e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800291c:	f00f fc74 	bl	8012208 <get_fattime>
 8002920:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002924:	330e      	adds	r3, #14
 8002926:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fa7d 	bl	8000e28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	3316      	adds	r3, #22
 8002932:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fa77 	bl	8000e28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	330b      	adds	r3, #11
 800293e:	2220      	movs	r2, #32
 8002940:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f9fd 	bl	8001d48 <ld_clust>
 800294e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fa15 	bl	8001d86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295e:	331c      	adds	r3, #28
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fa60 	bl	8000e28 <st_dword>
					fs->wflag = 1;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2201      	movs	r2, #1
 800296c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800296e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d037      	beq.n	80029e4 <f_open+0x1d0>
						dw = fs->winsect;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800297a:	f107 0318 	add.w	r3, r7, #24
 800297e:	2200      	movs	r2, #0
 8002980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe ff28 	bl	80017d8 <remove_chain>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800298e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002992:	2b00      	cmp	r3, #0
 8002994:	d126      	bne.n	80029e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fcd0 	bl	8001340 <move_window>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029aa:	3a01      	subs	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e019      	b.n	80029e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80029b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d115      	bne.n	80029e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80029b8:	7fbb      	ldrb	r3, [r7, #30]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80029c2:	2304      	movs	r3, #4
 80029c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80029c8:	e00c      	b.n	80029e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <f_open+0x1d0>
 80029d4:	7fbb      	ldrb	r3, [r7, #30]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <f_open+0x1d0>
						res = FR_DENIED;
 80029de:	2307      	movs	r3, #7
 80029e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80029e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d126      	bne.n	8002a3a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8002a06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	bf8c      	ite	hi
 8002a12:	2301      	movhi	r3, #1
 8002a14:	2300      	movls	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f107 0318 	add.w	r3, r7, #24
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fb5b 	bl	80010dc <inc_lock>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <f_open+0x226>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8002a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8095 	bne.w	8002b6e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f97c 	bl	8001d48 <ld_clust>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a58:	331c      	adds	r3, #28
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f9a6 	bl	8000dac <ld_dword>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	88da      	ldrh	r2, [r3, #6]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	79fa      	ldrb	r2, [r7, #7]
 8002a7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3330      	adds	r3, #48	@ 0x30
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fa10 	bl	8000ec2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d060      	beq.n	8002b6e <f_open+0x35a>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05c      	beq.n	8002b6e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	895b      	ldrh	r3, [r3, #10]
 8002ac0:	025b      	lsls	r3, r3, #9
 8002ac2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ad0:	e016      	b.n	8002b00 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fced 	bl	80014b6 <get_fat>
 8002adc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8002ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d802      	bhi.n	8002aea <f_open+0x2d6>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8002aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d102      	bne.n	8002af8 <f_open+0x2e4>
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002af8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <f_open+0x2fc>
 8002b08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8e0      	bhi.n	8002ad2 <f_open+0x2be>
				}
				fp->clust = clst;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002b16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d127      	bne.n	8002b6e <f_open+0x35a>
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d022      	beq.n	8002b6e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fca3 	bl	8001478 <clust2sect>
 8002b32:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <f_open+0x32e>
						res = FR_INT_ERR;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b40:	e015      	b.n	8002b6e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b44:	0a5a      	lsrs	r2, r3, #9
 8002b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b48:	441a      	add	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	7858      	ldrb	r0, [r3, #1]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f00f fdf5 	bl	801274c <disk_read>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <f_open+0x35a>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <f_open+0x368>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fa0f 	bl	8000fa8 <unlock_fs>
 8002b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3768      	adds	r7, #104	@ 0x68
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b08e      	sub	sp, #56	@ 0x38
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f107 0214 	add.w	r2, r7, #20
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fd80 	bl	80026bc <validate>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <f_read+0x44>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	7d5b      	ldrb	r3, [r3, #21]
 8002bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <f_read+0x58>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f9e0 	bl	8000fa8 <unlock_fs>
 8002be8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bec:	e13d      	b.n	8002e6a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	7d1b      	ldrb	r3, [r3, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <f_read+0x72>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f9d2 	bl	8000fa8 <unlock_fs>
 8002c04:	2307      	movs	r3, #7
 8002c06:	e130      	b.n	8002e6a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f240 811c 	bls.w	8002e56 <f_read+0x2c0>
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8002c22:	e118      	b.n	8002e56 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 80e4 	bne.w	8002dfa <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	8952      	ldrh	r2, [r2, #10]
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d139      	bne.n	8002cbc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c56:	e013      	b.n	8002c80 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4619      	mov	r1, r3
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7fe feb3 	bl	80019d2 <clmt_clust>
 8002c6c:	6338      	str	r0, [r7, #48]	@ 0x30
 8002c6e:	e007      	b.n	8002c80 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fe fc1c 	bl	80014b6 <get_fat>
 8002c7e:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d809      	bhi.n	8002c9a <f_read+0x104>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	755a      	strb	r2, [r3, #21]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f989 	bl	8000fa8 <unlock_fs>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e0e7      	b.n	8002e6a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d109      	bne.n	8002cb6 <f_read+0x120>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	755a      	strb	r2, [r3, #21]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f97b 	bl	8000fa8 <unlock_fs>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0d9      	b.n	8002e6a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cba:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7fe fbd7 	bl	8001478 <clust2sect>
 8002cca:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <f_read+0x150>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	755a      	strb	r2, [r3, #21]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f963 	bl	8000fa8 <unlock_fs>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e0c1      	b.n	8002e6a <f_read+0x2d4>
			sect += csect;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0a5b      	lsrs	r3, r3, #9
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d03e      	beq.n	8002d78 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfe:	4413      	add	r3, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	8952      	ldrh	r2, [r2, #10]
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d905      	bls.n	8002d14 <f_read+0x17e>
					cc = fs->csize - csect;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	895b      	ldrh	r3, [r3, #10]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	7858      	ldrb	r0, [r3, #1]
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d1e:	f00f fd15 	bl	801274c <disk_read>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <f_read+0x1a6>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	755a      	strb	r2, [r3, #21]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f938 	bl	8000fa8 <unlock_fs>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e096      	b.n	8002e6a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	7d1b      	ldrb	r3, [r3, #20]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da14      	bge.n	8002d70 <f_read+0x1da>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d90d      	bls.n	8002d70 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d60:	18d0      	adds	r0, r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3330      	adds	r3, #48	@ 0x30
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fe f888 	bl	8000e80 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8002d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8002d76:	e05a      	b.n	8002e2e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d038      	beq.n	8002df4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	7d1b      	ldrb	r3, [r3, #20]
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	da1d      	bge.n	8002dc8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	7858      	ldrb	r0, [r3, #1]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f00f fcf6 	bl	801278c <disk_write>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <f_read+0x224>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	755a      	strb	r2, [r3, #21]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe f8f9 	bl	8000fa8 <unlock_fs>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e057      	b.n	8002e6a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	7d1b      	ldrb	r3, [r3, #20]
 8002dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	7858      	ldrb	r0, [r3, #1]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f00f fcb9 	bl	801274c <disk_read>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <f_read+0x25e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	755a      	strb	r2, [r3, #21]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f8dc 	bl	8000fa8 <unlock_fs>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e03a      	b.n	8002e6a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8002e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d901      	bls.n	8002e14 <f_read+0x27e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	4413      	add	r3, r2
 8002e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e26:	4619      	mov	r1, r3
 8002e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e2a:	f7fe f829 	bl	8000e80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	4413      	add	r3, r2
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	619a      	str	r2, [r3, #24]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	441a      	add	r2, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f aee3 	bne.w	8002c24 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe f8a0 	bl	8000fa8 <unlock_fs>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3738      	adds	r7, #56	@ 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f107 0208 	add.w	r2, r7, #8
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fc1a 	bl	80026bc <validate>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d16d      	bne.n	8002f6e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7d1b      	ldrb	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d067      	beq.n	8002f6e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7d1b      	ldrb	r3, [r3, #20]
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da1a      	bge.n	8002ede <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	7858      	ldrb	r0, [r3, #1]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f00f fc68 	bl	801278c <disk_write>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <f_sync+0x5e>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f86e 	bl	8000fa8 <unlock_fs>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e055      	b.n	8002f7c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7d1b      	ldrb	r3, [r3, #20]
 8002ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8002ede:	f00f f993 	bl	8012208 <get_fattime>
 8002ee2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7fe fa27 	bl	8001340 <move_window>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d138      	bne.n	8002f6e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	330b      	adds	r3, #11
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	330b      	adds	r3, #11
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	f7fe ff31 	bl	8001d86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f103 021c 	add.w	r2, r3, #28
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7fd ff79 	bl	8000e28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3316      	adds	r3, #22
 8002f3a:	6939      	ldr	r1, [r7, #16]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd ff73 	bl	8000e28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3312      	adds	r3, #18
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd ff52 	bl	8000df2 <st_word>
					fs->wflag = 1;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2201      	movs	r2, #1
 8002f52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fa20 	bl	800139c <sync_fs>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7d1b      	ldrb	r3, [r3, #20]
 8002f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	7dfa      	ldrb	r2, [r7, #23]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe f817 	bl	8000fa8 <unlock_fs>
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff70 	bl	8002e72 <f_sync>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11d      	bne.n	8002fd8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fb89 	bl	80026bc <validate>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f91d 	bl	80011f8 <dec_lock>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd ffe8 	bl	8000fa8 <unlock_fs>
#endif
		}
	}
	return res;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b090      	sub	sp, #64	@ 0x40
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f107 0208 	add.w	r2, r7, #8
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fb61 	bl	80026bc <validate>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003000:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <f_lseek+0x2e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7d5b      	ldrb	r3, [r3, #21]
 800300c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003010:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <f_lseek+0x4a>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd ffc1 	bl	8000fa8 <unlock_fs>
 8003026:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800302a:	e229      	b.n	8003480 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80ea 	beq.w	800320a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d164      	bne.n	8003108 <f_lseek+0x126>
			tbl = fp->cltbl;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	627a      	str	r2, [r7, #36]	@ 0x24
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	2302      	movs	r3, #2
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	2300      	movs	r3, #0
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	3302      	adds	r3, #2
 800306a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003072:	3301      	adds	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fa1b 	bl	80014b6 <get_fat>
 8003080:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d809      	bhi.n	800309c <f_lseek+0xba>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	755a      	strb	r2, [r3, #21]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd ff88 	bl	8000fa8 <unlock_fs>
 8003098:	2302      	movs	r3, #2
 800309a:	e1f1      	b.n	8003480 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d109      	bne.n	80030b8 <f_lseek+0xd6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	755a      	strb	r2, [r3, #21]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd ff7a 	bl	8000fa8 <unlock_fs>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e1e3      	b.n	8003480 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030be:	429a      	cmp	r2, r3
 80030c0:	d0d4      	beq.n	800306c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80030c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d809      	bhi.n	80030de <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	1d1a      	adds	r2, r3, #4
 80030ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80030d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	1d1a      	adds	r2, r3, #4
 80030d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3ba      	bcc.n	800305e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80030f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d803      	bhi.n	8003100 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e1b6      	b.n	800346e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003100:	2311      	movs	r3, #17
 8003102:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003106:	e1b2      	b.n	800346e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d902      	bls.n	8003118 <f_lseek+0x136>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 81a4 	beq.w	800346e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fe fc50 	bl	80019d2 <clmt_clust>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7fe f999 	bl	8001478 <clust2sect>
 8003146:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <f_lseek+0x180>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	755a      	strb	r2, [r3, #21]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd ff25 	bl	8000fa8 <unlock_fs>
 800315e:	2302      	movs	r3, #2
 8003160:	e18e      	b.n	8003480 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	0a5b      	lsrs	r3, r3, #9
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	8952      	ldrh	r2, [r2, #10]
 800316c:	3a01      	subs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8175 	beq.w	800346e <f_lseek+0x48c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	429a      	cmp	r2, r3
 800318c:	f000 816f 	beq.w	800346e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7d1b      	ldrb	r3, [r3, #20]
 8003194:	b25b      	sxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	da1d      	bge.n	80031d6 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	7858      	ldrb	r0, [r3, #1]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	2301      	movs	r3, #1
 80031aa:	f00f faef 	bl	801278c <disk_write>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <f_lseek+0x1e6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	755a      	strb	r2, [r3, #21]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fef2 	bl	8000fa8 <unlock_fs>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e15b      	b.n	8003480 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7d1b      	ldrb	r3, [r3, #20]
 80031cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	7858      	ldrb	r0, [r3, #1]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80031e0:	2301      	movs	r3, #1
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	f00f fab2 	bl	801274c <disk_read>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <f_lseek+0x220>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	755a      	strb	r2, [r3, #21]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fed5 	bl	8000fa8 <unlock_fs>
 80031fe:	2301      	movs	r3, #1
 8003200:	e13e      	b.n	8003480 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	621a      	str	r2, [r3, #32]
 8003208:	e131      	b.n	800346e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <f_lseek+0x244>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7d1b      	ldrb	r3, [r3, #20]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003234:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80c0 	beq.w	80033be <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	895b      	ldrh	r3, [r3, #10]
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	fbb2 f2f3 	udiv	r2, r2, r3
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	1e59      	subs	r1, r3, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8003260:	429a      	cmp	r2, r3
 8003262:	d30f      	bcc.n	8003284 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	425b      	negs	r3, r3
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003282:	e02c      	b.n	80032de <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d123      	bne.n	80032d8 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fb04 	bl	80018a2 <create_chain>
 800329a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d109      	bne.n	80032b6 <f_lseek+0x2d4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	755a      	strb	r2, [r3, #21]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe7b 	bl	8000fa8 <unlock_fs>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e0e4      	b.n	8003480 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d109      	bne.n	80032d2 <f_lseek+0x2f0>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	755a      	strb	r2, [r3, #21]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fe6d 	bl	8000fa8 <unlock_fs>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0d6      	b.n	8003480 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032d6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032dc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06c      	beq.n	80033be <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80032e4:	e044      	b.n	8003370 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7d1b      	ldrb	r3, [r3, #20]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fac9 	bl	80018a2 <create_chain>
 8003310:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003314:	2b00      	cmp	r3, #0
 8003316:	d108      	bne.n	800332a <f_lseek+0x348>
							ofs = 0; break;
 8003318:	2300      	movs	r3, #0
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	e02c      	b.n	8003378 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f8c7 	bl	80014b6 <get_fat>
 8003328:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800332a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d109      	bne.n	8003346 <f_lseek+0x364>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	755a      	strb	r2, [r3, #21]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd fe33 	bl	8000fa8 <unlock_fs>
 8003342:	2301      	movs	r3, #1
 8003344:	e09c      	b.n	8003480 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	2b01      	cmp	r3, #1
 800334a:	d904      	bls.n	8003356 <f_lseek+0x374>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003352:	429a      	cmp	r2, r3
 8003354:	d309      	bcc.n	800336a <f_lseek+0x388>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	755a      	strb	r2, [r3, #21]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fe21 	bl	8000fa8 <unlock_fs>
 8003366:	2302      	movs	r3, #2
 8003368:	e08a      	b.n	8003480 <f_lseek+0x49e>
					fp->clust = clst;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800336e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	429a      	cmp	r2, r3
 8003376:	d8b6      	bhi.n	80032e6 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	441a      	add	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe f870 	bl	8001478 <clust2sect>
 8003398:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <f_lseek+0x3d2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	755a      	strb	r2, [r3, #21]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fdfc 	bl	8000fa8 <unlock_fs>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e065      	b.n	8003480 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033ba:	4413      	add	r3, r2
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90a      	bls.n	80033e0 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7d1b      	ldrb	r3, [r3, #20]
 80033d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d040      	beq.n	800346e <f_lseek+0x48c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d03b      	beq.n	800346e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7d1b      	ldrb	r3, [r3, #20]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da1d      	bge.n	800343c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	7858      	ldrb	r0, [r3, #1]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	2301      	movs	r3, #1
 8003410:	f00f f9bc 	bl	801278c <disk_write>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <f_lseek+0x44c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	755a      	strb	r2, [r3, #21]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd fdbf 	bl	8000fa8 <unlock_fs>
 800342a:	2301      	movs	r3, #1
 800342c:	e028      	b.n	8003480 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7d1b      	ldrb	r3, [r3, #20]
 8003432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003436:	b2da      	uxtb	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	7858      	ldrb	r0, [r3, #1]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003446:	2301      	movs	r3, #1
 8003448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800344a:	f00f f97f 	bl	801274c <disk_read>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <f_lseek+0x486>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	755a      	strb	r2, [r3, #21]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fda2 	bl	8000fa8 <unlock_fs>
 8003464:	2301      	movs	r3, #1
 8003466:	e00b      	b.n	8003480 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800346c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fd96 	bl	8000fa8 <unlock_fs>
 800347c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8003480:	4618      	mov	r0, r3
 8003482:	3740      	adds	r7, #64	@ 0x40
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a07      	ldr	r2, [pc, #28]	@ (80034e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80034cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <vApplicationGetIdleTaskMemory+0x30>)
 80034d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2280      	movs	r2, #128	@ 0x80
 80034d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000140 	.word	0x20000140
 80034ec:	200001e0 	.word	0x200001e0

080034f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80034fa:	20c8      	movs	r0, #200	@ 0xc8
 80034fc:	f002 feb6 	bl	800626c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003500:	f000 fa7a 	bl	80039f8 <ft5336_I2C_InitializeIfRequired>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003534:	2300      	movs	r3, #0
 8003536:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003538:	f000 fa5e 	bl	80039f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e010      	b.n	8003564 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	21a8      	movs	r1, #168	@ 0xa8
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fe71 	bl	8006230 <TS_IO_Read>
 800354e:	4603      	mov	r3, r0
 8003550:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b51      	cmp	r3, #81	@ 0x51
 8003558:	d101      	bne.n	800355e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	3301      	adds	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d802      	bhi.n	8003570 <ft5336_ReadID+0x4e>
 800356a:	7bbb      	ldrb	r3, [r7, #14]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0e8      	beq.n	8003542 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003570:	7b7b      	ldrb	r3, [r7, #13]
 8003572:	b2db      	uxtb	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fa45 	bl	8003a18 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f933 	bl	80037fc <ft5336_TS_DisableIT>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 fe3b 	bl	8006230 <TS_IO_Read>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d901      	bls.n	80035d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <ft5336_TS_DetectTouch+0x50>)
 80035dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <ft5336_TS_DetectTouch+0x50>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	b2db      	uxtb	r3, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200003e0 	.word	0x200003e0

080035f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003616:	4b6d      	ldr	r3, [pc, #436]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 8003618:	789a      	ldrb	r2, [r3, #2]
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	429a      	cmp	r2, r3
 8003620:	f080 80cf 	bcs.w	80037c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8003624:	4b69      	ldr	r3, [pc, #420]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 8003626:	789b      	ldrb	r3, [r3, #2]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d871      	bhi.n	8003710 <ft5336_TS_GetXY+0x11c>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <ft5336_TS_GetXY+0x40>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	0800365d 	.word	0x0800365d
 8003638:	0800366f 	.word	0x0800366f
 800363c:	08003681 	.word	0x08003681
 8003640:	08003693 	.word	0x08003693
 8003644:	080036a5 	.word	0x080036a5
 8003648:	080036b7 	.word	0x080036b7
 800364c:	080036c9 	.word	0x080036c9
 8003650:	080036db 	.word	0x080036db
 8003654:	080036ed 	.word	0x080036ed
 8003658:	080036ff 	.word	0x080036ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800365c:	2304      	movs	r3, #4
 800365e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8003660:	2303      	movs	r3, #3
 8003662:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8003664:	2306      	movs	r3, #6
 8003666:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8003668:	2305      	movs	r3, #5
 800366a:	753b      	strb	r3, [r7, #20]
      break;
 800366c:	e051      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800366e:	230a      	movs	r3, #10
 8003670:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8003672:	2309      	movs	r3, #9
 8003674:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8003676:	230c      	movs	r3, #12
 8003678:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800367a:	230b      	movs	r3, #11
 800367c:	753b      	strb	r3, [r7, #20]
      break;
 800367e:	e048      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003680:	2310      	movs	r3, #16
 8003682:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8003684:	230f      	movs	r3, #15
 8003686:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003688:	2312      	movs	r3, #18
 800368a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800368c:	2311      	movs	r3, #17
 800368e:	753b      	strb	r3, [r7, #20]
      break;
 8003690:	e03f      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8003692:	2316      	movs	r3, #22
 8003694:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8003696:	2315      	movs	r3, #21
 8003698:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800369a:	2318      	movs	r3, #24
 800369c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800369e:	2317      	movs	r3, #23
 80036a0:	753b      	strb	r3, [r7, #20]
      break;
 80036a2:	e036      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80036a4:	231c      	movs	r3, #28
 80036a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80036a8:	231b      	movs	r3, #27
 80036aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80036ac:	231e      	movs	r3, #30
 80036ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80036b0:	231d      	movs	r3, #29
 80036b2:	753b      	strb	r3, [r7, #20]
      break;
 80036b4:	e02d      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80036b6:	2322      	movs	r3, #34	@ 0x22
 80036b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80036ba:	2321      	movs	r3, #33	@ 0x21
 80036bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80036be:	2324      	movs	r3, #36	@ 0x24
 80036c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80036c2:	2323      	movs	r3, #35	@ 0x23
 80036c4:	753b      	strb	r3, [r7, #20]
      break;
 80036c6:	e024      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80036c8:	2328      	movs	r3, #40	@ 0x28
 80036ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80036cc:	2327      	movs	r3, #39	@ 0x27
 80036ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80036d0:	232a      	movs	r3, #42	@ 0x2a
 80036d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80036d4:	2329      	movs	r3, #41	@ 0x29
 80036d6:	753b      	strb	r3, [r7, #20]
      break;
 80036d8:	e01b      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80036da:	232e      	movs	r3, #46	@ 0x2e
 80036dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80036de:	232d      	movs	r3, #45	@ 0x2d
 80036e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80036e2:	2330      	movs	r3, #48	@ 0x30
 80036e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80036e6:	232f      	movs	r3, #47	@ 0x2f
 80036e8:	753b      	strb	r3, [r7, #20]
      break;
 80036ea:	e012      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80036ec:	2334      	movs	r3, #52	@ 0x34
 80036ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80036f0:	2333      	movs	r3, #51	@ 0x33
 80036f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80036f4:	2336      	movs	r3, #54	@ 0x36
 80036f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80036f8:	2335      	movs	r3, #53	@ 0x35
 80036fa:	753b      	strb	r3, [r7, #20]
      break;
 80036fc:	e009      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80036fe:	233a      	movs	r3, #58	@ 0x3a
 8003700:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8003702:	2339      	movs	r3, #57	@ 0x39
 8003704:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003706:	233c      	movs	r3, #60	@ 0x3c
 8003708:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800370a:	233b      	movs	r3, #59	@ 0x3b
 800370c:	753b      	strb	r3, [r7, #20]
      break;
 800370e:	e000      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003710:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	7dfa      	ldrb	r2, [r7, #23]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f002 fd88 	bl	8006230 <TS_IO_Read>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	4b29      	ldr	r3, [pc, #164]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800372c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800372e:	89fb      	ldrh	r3, [r7, #14]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	7dba      	ldrb	r2, [r7, #22]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fd7a 	bl	8006230 <TS_IO_Read>
 800373c:	4603      	mov	r3, r0
 800373e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800374a:	b21a      	sxth	r2, r3
 800374c:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b21b      	sxth	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b21b      	sxth	r3, r3
 8003756:	b29a      	uxth	r2, r3
 8003758:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800375a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800375c:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	7d7a      	ldrb	r2, [r7, #21]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fd5f 	bl	8006230 <TS_IO_Read>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800377e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	7d3a      	ldrb	r2, [r7, #20]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f002 fd51 	bl	8006230 <TS_IO_Read>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800379c:	b21a      	sxth	r2, r3
 800379e:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b21b      	sxth	r3, r3
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 80037b8:	789b      	ldrb	r3, [r3, #2]
 80037ba:	3301      	adds	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 80037c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200003e0 	.word	0x200003e0
 80037d0:	200003e4 	.word	0x200003e4

080037d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	21a4      	movs	r1, #164	@ 0xa4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fd04 	bl	80061fc <TS_IO_Write>
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	21a4      	movs	r1, #164	@ 0xa4
 8003816:	4618      	mov	r0, r3
 8003818:	f002 fcf0 	bl	80061fc <TS_IO_Write>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	6039      	str	r1, [r7, #0]
 800385c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fce1 	bl	8006230 <TS_IO_Read>
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80038a4:	4b4d      	ldr	r3, [pc, #308]	@ (80039dc <ft5336_TS_GetTouchInfo+0x158>)
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	f080 8090 	bcs.w	80039d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	d85d      	bhi.n	8003974 <ft5336_TS_GetTouchInfo+0xf0>
 80038b8:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038f7 	.word	0x080038f7
 80038c8:	08003905 	.word	0x08003905
 80038cc:	08003913 	.word	0x08003913
 80038d0:	08003921 	.word	0x08003921
 80038d4:	0800392f 	.word	0x0800392f
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	0800394b 	.word	0x0800394b
 80038e0:	08003959 	.word	0x08003959
 80038e4:	08003967 	.word	0x08003967
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80038e8:	2303      	movs	r3, #3
 80038ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80038ec:	2307      	movs	r3, #7
 80038ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80038f0:	2308      	movs	r3, #8
 80038f2:	757b      	strb	r3, [r7, #21]
      break;
 80038f4:	e03f      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80038f6:	2309      	movs	r3, #9
 80038f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80038fa:	230d      	movs	r3, #13
 80038fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80038fe:	230e      	movs	r3, #14
 8003900:	757b      	strb	r3, [r7, #21]
      break;
 8003902:	e038      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003904:	230f      	movs	r3, #15
 8003906:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003908:	2313      	movs	r3, #19
 800390a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800390c:	2314      	movs	r3, #20
 800390e:	757b      	strb	r3, [r7, #21]
      break;
 8003910:	e031      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8003912:	2315      	movs	r3, #21
 8003914:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8003916:	2319      	movs	r3, #25
 8003918:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800391a:	231a      	movs	r3, #26
 800391c:	757b      	strb	r3, [r7, #21]
      break;
 800391e:	e02a      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8003920:	231b      	movs	r3, #27
 8003922:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8003924:	231f      	movs	r3, #31
 8003926:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8003928:	2320      	movs	r3, #32
 800392a:	757b      	strb	r3, [r7, #21]
      break;
 800392c:	e023      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800392e:	2321      	movs	r3, #33	@ 0x21
 8003930:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8003932:	2325      	movs	r3, #37	@ 0x25
 8003934:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8003936:	2326      	movs	r3, #38	@ 0x26
 8003938:	757b      	strb	r3, [r7, #21]
      break;
 800393a:	e01c      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800393c:	2327      	movs	r3, #39	@ 0x27
 800393e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8003940:	232b      	movs	r3, #43	@ 0x2b
 8003942:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8003944:	232c      	movs	r3, #44	@ 0x2c
 8003946:	757b      	strb	r3, [r7, #21]
      break;
 8003948:	e015      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800394a:	232d      	movs	r3, #45	@ 0x2d
 800394c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800394e:	2331      	movs	r3, #49	@ 0x31
 8003950:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8003952:	2332      	movs	r3, #50	@ 0x32
 8003954:	757b      	strb	r3, [r7, #21]
      break;
 8003956:	e00e      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8003958:	2333      	movs	r3, #51	@ 0x33
 800395a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800395c:	2337      	movs	r3, #55	@ 0x37
 800395e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8003960:	2338      	movs	r3, #56	@ 0x38
 8003962:	757b      	strb	r3, [r7, #21]
      break;
 8003964:	e007      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8003966:	2339      	movs	r3, #57	@ 0x39
 8003968:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800396a:	233d      	movs	r3, #61	@ 0x3d
 800396c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800396e:	233e      	movs	r3, #62	@ 0x3e
 8003970:	757b      	strb	r3, [r7, #21]
      break;
 8003972:	e000      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003974:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	7dfa      	ldrb	r2, [r7, #23]
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f002 fc56 	bl	8006230 <TS_IO_Read>
 8003984:	4603      	mov	r3, r0
 8003986:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8003988:	7d3b      	ldrb	r3, [r7, #20]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	119b      	asrs	r3, r3, #6
 800398e:	f003 0203 	and.w	r2, r3, #3
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	7dba      	ldrb	r2, [r7, #22]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 fc46 	bl	8006230 <TS_IO_Read>
 80039a4:	4603      	mov	r3, r0
 80039a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80039a8:	7d3b      	ldrb	r3, [r7, #20]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80039b2:	89fb      	ldrh	r3, [r7, #14]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	7d7a      	ldrb	r2, [r7, #21]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 fc38 	bl	8006230 <TS_IO_Read>
 80039c0:	4603      	mov	r3, r0
 80039c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80039c4:	7d3b      	ldrb	r3, [r7, #20]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	111b      	asrs	r3, r3, #4
 80039ca:	f003 0204 	and.w	r2, r3, #4
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200003e0 	.word	0x200003e0

080039e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80039e4:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200003e0 	.word	0x200003e0

080039f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80039fc:	f7ff fff0 	bl	80039e0 <ft5336_Get_I2C_InitializedStatus>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003a06:	f002 fbef 	bl	80061e8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003a0a:	4b02      	ldr	r3, [pc, #8]	@ (8003a14 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
  }
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200003e0 	.word	0x200003e0

08003a18 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a38:	f3bf 8f4f 	dsb	sy
}
 8003a3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a3e:	f3bf 8f6f 	isb	sy
}
 8003a42:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003a4c:	f3bf 8f4f 	dsb	sy
}
 8003a50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a52:	f3bf 8f6f 	isb	sy
}
 8003a56:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a64:	f3bf 8f4f 	dsb	sy
}
 8003a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a6a:	f3bf 8f6f 	isb	sy
}
 8003a6e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003a86:	4b1f      	ldr	r3, [pc, #124]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a8e:	f3bf 8f4f 	dsb	sy
}
 8003a92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003aa4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003ab8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003abe:	4911      	ldr	r1, [pc, #68]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	60ba      	str	r2, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ef      	bne.n	8003ab0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e5a      	subs	r2, r3, #1
 8003ad4:	60fa      	str	r2, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ada:	f3bf 8f4f 	dsb	sy
}
 8003ade:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aec:	f3bf 8f4f 	dsb	sy
}
 8003af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003af2:	f3bf 8f6f 	isb	sy
}
 8003af6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <whatBodyPart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8003b08:	b490      	push	{r4, r7}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4623      	mov	r3, r4
 8003b18:	71fb      	strb	r3, [r7, #7]
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71bb      	strb	r3, [r7, #6]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	717b      	strb	r3, [r7, #5]
 8003b22:	4613      	mov	r3, r2
 8003b24:	713b      	strb	r3, [r7, #4]
	/*
	  . F .
	  . X .
	  . B .
	*/
	if (frontX == backX)
 8003b26:	79fa      	ldrb	r2, [r7, #7]
 8003b28:	797b      	ldrb	r3, [r7, #5]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d101      	bne.n	8003b32 <whatBodyPart+0x2a>
		return BottomTop;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e046      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .
	  F X B
	  . . .
	*/
	if (frontY == backY)
 8003b32:	79ba      	ldrb	r2, [r7, #6]
 8003b34:	793b      	ldrb	r3, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d101      	bne.n	8003b3e <whatBodyPart+0x36>
		return LeftRight;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e040      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . B .       . . .
	  F X .       . X B
	  . . .       . F .
	*/
	if (frontX < backX && frontY > backY)
 8003b3e:	79fa      	ldrb	r2, [r7, #7]
 8003b40:	797b      	ldrb	r3, [r7, #5]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d20b      	bcs.n	8003b5e <whatBodyPart+0x56>
 8003b46:	79ba      	ldrb	r2, [r7, #6]
 8003b48:	793b      	ldrb	r3, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d907      	bls.n	8003b5e <whatBodyPart+0x56>
	{
		if (missingX == frontX)
 8003b4e:	7c3a      	ldrb	r2, [r7, #16]
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d101      	bne.n	8003b5a <whatBodyPart+0x52>
			return BottomRight;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e032      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return LeftTop;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e030      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .       . F .
	  F X .       . X B
	  . B .       . . .
	*/
	if (frontX < backX && frontY < backY)
 8003b5e:	79fa      	ldrb	r2, [r7, #7]
 8003b60:	797b      	ldrb	r3, [r7, #5]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d20b      	bcs.n	8003b7e <whatBodyPart+0x76>
 8003b66:	79ba      	ldrb	r2, [r7, #6]
 8003b68:	793b      	ldrb	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d207      	bcs.n	8003b7e <whatBodyPart+0x76>
	{
		if (missingX == frontX)
 8003b6e:	7c3a      	ldrb	r2, [r7, #16]
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d101      	bne.n	8003b7a <whatBodyPart+0x72>
			return RightTop;
 8003b76:	2305      	movs	r3, #5
 8003b78:	e022      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return BottomLeft;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e020      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .       . F .
	  . X F       B X .
	  . B .       . . .
	*/
	if (frontX > backX && frontY < backY)
 8003b7e:	79fa      	ldrb	r2, [r7, #7]
 8003b80:	797b      	ldrb	r3, [r7, #5]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90b      	bls.n	8003b9e <whatBodyPart+0x96>
 8003b86:	79ba      	ldrb	r2, [r7, #6]
 8003b88:	793b      	ldrb	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d207      	bcs.n	8003b9e <whatBodyPart+0x96>
	{
		if (missingX == frontX)
 8003b8e:	7c3a      	ldrb	r2, [r7, #16]
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d101      	bne.n	8003b9a <whatBodyPart+0x92>
			return LeftTop;
 8003b96:	2304      	movs	r3, #4
 8003b98:	e012      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return BottomRight;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e010      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . B .       . . .
	  . X F       B X .
	  . . .       . F .
	*/
	if (frontX > backX && frontY > backY)
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	797b      	ldrb	r3, [r7, #5]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90b      	bls.n	8003bbe <whatBodyPart+0xb6>
 8003ba6:	79ba      	ldrb	r2, [r7, #6]
 8003ba8:	793b      	ldrb	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d907      	bls.n	8003bbe <whatBodyPart+0xb6>
	{
		if (missingX == frontX)
 8003bae:	7c3a      	ldrb	r2, [r7, #16]
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d101      	bne.n	8003bba <whatBodyPart+0xb2>
			return BottomLeft;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e002      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return RightTop;
 8003bba:	2305      	movs	r3, #5
 8003bbc:	e000      	b.n	8003bc0 <whatBodyPart+0xb8>
	}

	return BottomTop; // ne devrait jamais arriver
 8003bbe:	2302      	movs	r3, #2
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc90      	pop	{r4, r7}
 8003bc8:	4770      	bx	lr
	...

08003bcc <isSnakePosition>:

uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71bb      	strb	r3, [r7, #6]
	if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <isSnakePosition+0x88>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	79fa      	ldrb	r2, [r7, #7]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d106      	bne.n	8003bf4 <isSnakePosition+0x28>
 8003be6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <isSnakePosition+0x88>)
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	79ba      	ldrb	r2, [r7, #6]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d101      	bne.n	8003bf4 <isSnakePosition+0x28>
		return 1;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e029      	b.n	8003c48 <isSnakePosition+0x7c>

	for (int i = 0; i < snakeSize; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e013      	b.n	8003c22 <isSnakePosition+0x56>
	{
		if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8003bfa:	4a17      	ldr	r2, [pc, #92]	@ (8003c58 <isSnakePosition+0x8c>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003c02:	79fa      	ldrb	r2, [r7, #7]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d109      	bne.n	8003c1c <isSnakePosition+0x50>
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <isSnakePosition+0x8c>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	79ba      	ldrb	r2, [r7, #6]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d101      	bne.n	8003c1c <isSnakePosition+0x50>
			return 1;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e015      	b.n	8003c48 <isSnakePosition+0x7c>
	for (int i = 0; i < snakeSize; i++)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <isSnakePosition+0x90>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	dbe5      	blt.n	8003bfa <isSnakePosition+0x2e>
	}

	if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <isSnakePosition+0x94>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	79fa      	ldrb	r2, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <isSnakePosition+0x7a>
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <isSnakePosition+0x94>)
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	79ba      	ldrb	r2, [r7, #6]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d101      	bne.n	8003c46 <isSnakePosition+0x7a>
		return 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <isSnakePosition+0x7c>

	return 0;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000038 	.word	0x20000038
 8003c58:	20000ab4 	.word	0x20000ab4
 8003c5c:	20000aa0 	.word	0x20000aa0
 8003c60:	2000003c 	.word	0x2000003c

08003c64 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	71bb      	strb	r3, [r7, #6]
 8003c72:	4613      	mov	r3, r2
 8003c74:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < NB_APPLES; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	e019      	b.n	8003cb0 <isApplePosition+0x4c>
	{
		if (i == appleIndex)
 8003c7c:	797b      	ldrb	r3, [r7, #5]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d011      	beq.n	8003ca8 <isApplePosition+0x44>
			continue;

		if (x == applePosition[i][0] && y == applePosition[i][1])
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	490f      	ldr	r1, [pc, #60]	@ (8003cc4 <isApplePosition+0x60>)
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10b      	bne.n	8003caa <isApplePosition+0x46>
 8003c92:	79ba      	ldrb	r2, [r7, #6]
 8003c94:	490b      	ldr	r1, [pc, #44]	@ (8003cc4 <isApplePosition+0x60>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d102      	bne.n	8003caa <isApplePosition+0x46>
			return 1;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e007      	b.n	8003cb8 <isApplePosition+0x54>
			continue;
 8003ca8:	bf00      	nop
	for (int i = 0; i < NB_APPLES; i++)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	dde2      	ble.n	8003c7c <isApplePosition+0x18>
	}

	return 0;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20000ba8 	.word	0x20000ba8

08003cc8 <updateJoystickDirection>:

void updateJoystickDirection()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003cce:	463b      	mov	r3, r7
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
	sConfig.Channel = ADC_CHANNEL_8;
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	603b      	str	r3, [r7, #0]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	4619      	mov	r1, r3
 8003cea:	482f      	ldr	r0, [pc, #188]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003cec:	f006 fee4 	bl	800aab8 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8003cf0:	482d      	ldr	r0, [pc, #180]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003cf2:	f006 fd7b 	bl	800a7ec <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8003cf6:	bf00      	nop
 8003cf8:	2164      	movs	r1, #100	@ 0x64
 8003cfa:	482b      	ldr	r0, [pc, #172]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003cfc:	f006 fe44 	bl	800a988 <HAL_ADC_PollForConversion>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f8      	bne.n	8003cf8 <updateJoystickDirection+0x30>
		;
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8003d06:	4828      	ldr	r0, [pc, #160]	@ (8003da8 <updateJoystickDirection+0xe0>)
 8003d08:	f006 fec9 	bl	800aa9e <HAL_ADC_GetValue>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4a27      	ldr	r2, [pc, #156]	@ (8003dac <updateJoystickDirection+0xe4>)
 8003d10:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8003d12:	4827      	ldr	r0, [pc, #156]	@ (8003db0 <updateJoystickDirection+0xe8>)
 8003d14:	f006 fd6a 	bl	800a7ec <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8003d18:	bf00      	nop
 8003d1a:	2164      	movs	r1, #100	@ 0x64
 8003d1c:	4824      	ldr	r0, [pc, #144]	@ (8003db0 <updateJoystickDirection+0xe8>)
 8003d1e:	f006 fe33 	bl	800a988 <HAL_ADC_PollForConversion>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f8      	bne.n	8003d1a <updateJoystickDirection+0x52>
		;
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8003d28:	4821      	ldr	r0, [pc, #132]	@ (8003db0 <updateJoystickDirection+0xe8>)
 8003d2a:	f006 feb8 	bl	800aa9e <HAL_ADC_GetValue>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a20      	ldr	r2, [pc, #128]	@ (8003db4 <updateJoystickDirection+0xec>)
 8003d32:	6013      	str	r3, [r2, #0]

	// On actualise la direction du snake
	if (joystick_v < 1000 && headPart != HeadTop)
 8003d34:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <updateJoystickDirection+0xe4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d3c:	d207      	bcs.n	8003d4e <updateJoystickDirection+0x86>
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <updateJoystickDirection+0x86>
	{
		direction = Down;
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e028      	b.n	8003da0 <updateJoystickDirection+0xd8>
	}
	else if (joystick_v > 3000 && headPart != HeadBottom)
 8003d4e:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <updateJoystickDirection+0xe4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d907      	bls.n	8003d6a <updateJoystickDirection+0xa2>
 8003d5a:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d003      	beq.n	8003d6a <updateJoystickDirection+0xa2>
	{
		direction = Up;
 8003d62:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e01a      	b.n	8003da0 <updateJoystickDirection+0xd8>
	}
	else if (joystick_h < 1000 && headPart != HeadLeft)
 8003d6a:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <updateJoystickDirection+0xec>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d72:	d207      	bcs.n	8003d84 <updateJoystickDirection+0xbc>
 8003d74:	4b10      	ldr	r3, [pc, #64]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d003      	beq.n	8003d84 <updateJoystickDirection+0xbc>
	{
		direction = Right;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d7e:	2203      	movs	r2, #3
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e00d      	b.n	8003da0 <updateJoystickDirection+0xd8>
	}
	else if (joystick_h > 3000 && headPart != HeadRight)
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <updateJoystickDirection+0xec>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d907      	bls.n	8003da0 <updateJoystickDirection+0xd8>
 8003d90:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <updateJoystickDirection+0xf0>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d003      	beq.n	8003da0 <updateJoystickDirection+0xd8>
	{
		direction = Left;
 8003d98:	4b08      	ldr	r3, [pc, #32]	@ (8003dbc <updateJoystickDirection+0xf4>)
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	701a      	strb	r2, [r3, #0]
	}
}
 8003d9e:	e7ff      	b.n	8003da0 <updateJoystickDirection+0xd8>
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000430 	.word	0x20000430
 8003dac:	20000a1c 	.word	0x20000a1c
 8003db0:	200003e8 	.word	0x200003e8
 8003db4:	20000a20 	.word	0x20000a20
 8003db8:	20000a25 	.word	0x20000a25
 8003dbc:	20000a24 	.word	0x20000a24

08003dc0 <restartGame>:

void restartGame()
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
	gameOver = 0;
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec0 <restartGame+0x100>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
	lastMove = 1;
 8003dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec4 <restartGame+0x104>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
	snakeSize = 0;
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec8 <restartGame+0x108>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
	speed = initSpeed;
 8003dd8:	2202      	movs	r2, #2
 8003dda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ecc <restartGame+0x10c>)
 8003ddc:	701a      	strb	r2, [r3, #0]
	snakeHeadPosition[0] = 7;
 8003dde:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <restartGame+0x110>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	701a      	strb	r2, [r3, #0]
	snakeHeadPosition[1] = 6;
 8003de4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed0 <restartGame+0x110>)
 8003de6:	2206      	movs	r2, #6
 8003de8:	705a      	strb	r2, [r3, #1]
	snakeTailPosition[0] = 7;
 8003dea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed4 <restartGame+0x114>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	701a      	strb	r2, [r3, #0]
	snakeTailPosition[1] = 7;
 8003df0:	4b38      	ldr	r3, [pc, #224]	@ (8003ed4 <restartGame+0x114>)
 8003df2:	2207      	movs	r2, #7
 8003df4:	705a      	strb	r2, [r3, #1]
	direction = Up;
 8003df6:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <restartGame+0x118>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
	headPart = HeadTop;
 8003dfc:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <restartGame+0x11c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
	tailPart = TailTop;
 8003e02:	4b37      	ldr	r3, [pc, #220]	@ (8003ee0 <restartGame+0x120>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < NB_APPLES; i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	e04d      	b.n	8003eaa <restartGame+0xea>
	{
		do
		{
			applePosition[i][0] = rand() % GRID_SIZE_X;
 8003e0e:	f011 ffef 	bl	8015df0 <rand>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b33      	ldr	r3, [pc, #204]	@ (8003ee4 <restartGame+0x124>)
 8003e16:	fb83 1302 	smull	r1, r3, r3, r2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	10d9      	asrs	r1, r3, #3
 8003e1e:	17d3      	asrs	r3, r2, #31
 8003e20:	1ac9      	subs	r1, r1, r3
 8003e22:	460b      	mov	r3, r1
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a5b      	subs	r3, r3, r1
 8003e28:	1ad1      	subs	r1, r2, r3
 8003e2a:	b249      	sxtb	r1, r1
 8003e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee8 <restartGame+0x128>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			applePosition[i][1] = rand() % GRID_SIZE_Y;
 8003e34:	f011 ffdc 	bl	8015df0 <rand>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	425a      	negs	r2, r3
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	f002 0207 	and.w	r2, r2, #7
 8003e44:	bf58      	it	pl
 8003e46:	4253      	negpl	r3, r2
 8003e48:	b259      	sxtb	r1, r3
 8003e4a:	4a27      	ldr	r2, [pc, #156]	@ (8003ee8 <restartGame+0x128>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	460a      	mov	r2, r1
 8003e54:	705a      	strb	r2, [r3, #1]
		} while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8003e56:	4a24      	ldr	r2, [pc, #144]	@ (8003ee8 <restartGame+0x128>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	4921      	ldr	r1, [pc, #132]	@ (8003ee8 <restartGame+0x128>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	440b      	add	r3, r1
 8003e68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f7ff feab 	bl	8003bcc <isSnakePosition>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1c8      	bne.n	8003e0e <restartGame+0x4e>
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <restartGame+0x128>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8003e84:	b2d8      	uxtb	r0, r3
 8003e86:	4a18      	ldr	r2, [pc, #96]	@ (8003ee8 <restartGame+0x128>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7ff fee3 	bl	8003c64 <isApplePosition>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1b4      	bne.n	8003e0e <restartGame+0x4e>
	for (int i = 0; i < NB_APPLES; i++)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	ddae      	ble.n	8003e0e <restartGame+0x4e>
	}

	BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8003eb0:	480e      	ldr	r0, [pc, #56]	@ (8003eec <restartGame+0x12c>)
 8003eb2:	f002 ff29 	bl	8006d08 <BSP_LCD_Clear>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000ab0 	.word	0x20000ab0
 8003ec4:	20000034 	.word	0x20000034
 8003ec8:	20000aa0 	.word	0x20000aa0
 8003ecc:	20000030 	.word	0x20000030
 8003ed0:	20000038 	.word	0x20000038
 8003ed4:	2000003c 	.word	0x2000003c
 8003ed8:	20000a24 	.word	0x20000a24
 8003edc:	20000a25 	.word	0x20000a25
 8003ee0:	20000031 	.word	0x20000031
 8003ee4:	88888889 	.word	0x88888889
 8003ee8:	20000ba8 	.word	0x20000ba8
 8003eec:	ff81cd4b 	.word	0xff81cd4b

08003ef0 <displayGameStatus>:

void displayGameStatus()
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	// On affiche le texte en fonction de l'état du jeu
	if (gameOver)
 8003ef4:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <displayGameStatus+0xa4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <displayGameStatus+0x38>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003efc:	4826      	ldr	r0, [pc, #152]	@ (8003f98 <displayGameStatus+0xa8>)
 8003efe:	f002 fea1 	bl	8006c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f02:	4826      	ldr	r0, [pc, #152]	@ (8003f9c <displayGameStatus+0xac>)
 8003f04:	f002 fed0 	bl	8006ca8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4a25      	ldr	r2, [pc, #148]	@ (8003fa0 <displayGameStatus+0xb0>)
 8003f0c:	2164      	movs	r1, #100	@ 0x64
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f002 ff66 	bl	8006de0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f14:	4823      	ldr	r0, [pc, #140]	@ (8003fa4 <displayGameStatus+0xb4>)
 8003f16:	f002 fec7 	bl	8006ca8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <displayGameStatus+0xb8>)
 8003f1e:	2182      	movs	r1, #130	@ 0x82
 8003f20:	2000      	movs	r0, #0
 8003f22:	f002 ff5d 	bl	8006de0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
		BSP_LCD_SetFont(&Font16);
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
	}
}
 8003f26:	e032      	b.n	8003f8e <displayGameStatus+0x9e>
	else if (gamePaused)
 8003f28:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <displayGameStatus+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d015      	beq.n	8003f5c <displayGameStatus+0x6c>
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003f30:	4819      	ldr	r0, [pc, #100]	@ (8003f98 <displayGameStatus+0xa8>)
 8003f32:	f002 fe87 	bl	8006c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f36:	4819      	ldr	r0, [pc, #100]	@ (8003f9c <displayGameStatus+0xac>)
 8003f38:	f002 feb6 	bl	8006ca8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb0 <displayGameStatus+0xc0>)
 8003f40:	2164      	movs	r1, #100	@ 0x64
 8003f42:	2000      	movs	r0, #0
 8003f44:	f002 ff4c 	bl	8006de0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f48:	4816      	ldr	r0, [pc, #88]	@ (8003fa4 <displayGameStatus+0xb4>)
 8003f4a:	f002 fead 	bl	8006ca8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <displayGameStatus+0xc4>)
 8003f52:	2182      	movs	r1, #130	@ 0x82
 8003f54:	2000      	movs	r0, #0
 8003f56:	f002 ff43 	bl	8006de0 <BSP_LCD_DisplayStringAt>
}
 8003f5a:	e018      	b.n	8003f8e <displayGameStatus+0x9e>
	else if (!gameStarted)
 8003f5c:	4b16      	ldr	r3, [pc, #88]	@ (8003fb8 <displayGameStatus+0xc8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <displayGameStatus+0x9e>
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003f64:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <displayGameStatus+0xa8>)
 8003f66:	f002 fe6d 	bl	8006c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f6a:	480c      	ldr	r0, [pc, #48]	@ (8003f9c <displayGameStatus+0xac>)
 8003f6c:	f002 fe9c 	bl	8006ca8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 8003f70:	2301      	movs	r3, #1
 8003f72:	4a12      	ldr	r2, [pc, #72]	@ (8003fbc <displayGameStatus+0xcc>)
 8003f74:	2164      	movs	r1, #100	@ 0x64
 8003f76:	2000      	movs	r0, #0
 8003f78:	f002 ff32 	bl	8006de0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f7c:	4809      	ldr	r0, [pc, #36]	@ (8003fa4 <displayGameStatus+0xb4>)
 8003f7e:	f002 fe93 	bl	8006ca8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 8003f82:	2301      	movs	r3, #1
 8003f84:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc0 <displayGameStatus+0xd0>)
 8003f86:	2182      	movs	r1, #130	@ 0x82
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f002 ff29 	bl	8006de0 <BSP_LCD_DisplayStringAt>
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000ab0 	.word	0x20000ab0
 8003f98:	ffa52a2a 	.word	0xffa52a2a
 8003f9c:	20000040 	.word	0x20000040
 8003fa0:	080170f4 	.word	0x080170f4
 8003fa4:	20000048 	.word	0x20000048
 8003fa8:	08017100 	.word	0x08017100
 8003fac:	20000aac 	.word	0x20000aac
 8003fb0:	0801711c 	.word	0x0801711c
 8003fb4:	08017128 	.word	0x08017128
 8003fb8:	20000aa8 	.word	0x20000aa8
 8003fbc:	08017144 	.word	0x08017144
 8003fc0:	08017150 	.word	0x08017150

08003fc4 <initializeSD>:

void initializeSD()
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4905      	ldr	r1, [pc, #20]	@ (8003fe0 <initializeSD+0x1c>)
 8003fcc:	4805      	ldr	r0, [pc, #20]	@ (8003fe4 <initializeSD+0x20>)
 8003fce:	f7fe fbbd 	bl	800274c <f_mount>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <initializeSD+0x18>
	{
		Error_Handler();
 8003fd8:	f001 ff36 	bl	8005e48 <Error_Handler>
	}
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200010b4 	.word	0x200010b4
 8003fe4:	200010b8 	.word	0x200010b8

08003fe8 <initializeAudio>:

void initializeAudio(uint32_t freq)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
	// Initialisation de l'audio
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1,
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8003ffe:	f002 fb15 	bl	800662c <BSP_AUDIO_IN_OUT_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <initializeAudio+0x24>
							  OUTPUT_DEVICE_HEADPHONE, freq,
							  DEFAULT_AUDIO_IN_BIT_RESOLUTION,
							  DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
	{
		Error_Handler();
 8004008:	f001 ff1e 	bl	8005e48 <Error_Handler>
	}

	// Initialisation du buffer audio
	memset((uint16_t *)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 800400c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004010:	2100      	movs	r1, #0
 8004012:	480b      	ldr	r0, [pc, #44]	@ (8004040 <initializeAudio+0x58>)
 8004014:	f012 f84f 	bl	80160b6 <memset>

	// Démarrage de l'audio
	BSP_AUDIO_OUT_SetVolume(40);
 8004018:	2028      	movs	r0, #40	@ 0x28
 800401a:	f002 f95d 	bl	80062d8 <BSP_AUDIO_OUT_SetVolume>
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 800401e:	2005      	movs	r0, #5
 8004020:	f002 f972 	bl	8006308 <BSP_AUDIO_OUT_SetAudioFrameSlot>

	if (BSP_AUDIO_OUT_Play((uint16_t *)AUDIO_BUFFER_OUT,
 8004024:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004028:	4805      	ldr	r0, [pc, #20]	@ (8004040 <initializeAudio+0x58>)
 800402a:	f002 f92b 	bl	8006284 <BSP_AUDIO_OUT_Play>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <initializeAudio+0x50>
						   AUDIO_BLOCK_SIZE * 2) != AUDIO_OK)
	{
		Error_Handler();
 8004034:	f001 ff08 	bl	8005e48 <Error_Handler>
	}
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	c007fc00 	.word	0xc007fc00

08004044 <extractHeaderInfo>:

void extractHeaderInfo()
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
	uint32_t bytesread;

	// Lecture de la taille du fichier
	f_lseek(&SDFile, 04);
 800404e:	2104      	movs	r1, #4
 8004050:	4817      	ldr	r0, [pc, #92]	@ (80040b0 <extractHeaderInfo+0x6c>)
 8004052:	f7fe ffc6 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 8004056:	463b      	mov	r3, r7
 8004058:	1d39      	adds	r1, r7, #4
 800405a:	2204      	movs	r2, #4
 800405c:	4814      	ldr	r0, [pc, #80]	@ (80040b0 <extractHeaderInfo+0x6c>)
 800405e:	f7fe fd9a 	bl	8002b96 <f_read>
	numberOfBlocks = data / 512;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0a5b      	lsrs	r3, r3, #9
 8004066:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <extractHeaderInfo+0x70>)
 8004068:	6013      	str	r3, [r2, #0]
	data = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]

	// Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile, 24);
 800406e:	2118      	movs	r1, #24
 8004070:	480f      	ldr	r0, [pc, #60]	@ (80040b0 <extractHeaderInfo+0x6c>)
 8004072:	f7fe ffb6 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 8004076:	463b      	mov	r3, r7
 8004078:	1d39      	adds	r1, r7, #4
 800407a:	2204      	movs	r2, #4
 800407c:	480c      	ldr	r0, [pc, #48]	@ (80040b0 <extractHeaderInfo+0x6c>)
 800407e:	f7fe fd8a 	bl	8002b96 <f_read>
	audioFrequency = data;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a0c      	ldr	r2, [pc, #48]	@ (80040b8 <extractHeaderInfo+0x74>)
 8004086:	6013      	str	r3, [r2, #0]
	data = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	607b      	str	r3, [r7, #4]

	// Nombre d'octets par secondes
	f_lseek(&SDFile, 28);
 800408c:	211c      	movs	r1, #28
 800408e:	4808      	ldr	r0, [pc, #32]	@ (80040b0 <extractHeaderInfo+0x6c>)
 8004090:	f7fe ffa7 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, (uint8_t *)&data, 4, (void *)&bytesread);
 8004094:	463b      	mov	r3, r7
 8004096:	1d39      	adds	r1, r7, #4
 8004098:	2204      	movs	r2, #4
 800409a:	4805      	ldr	r0, [pc, #20]	@ (80040b0 <extractHeaderInfo+0x6c>)
 800409c:	f7fe fd7b 	bl	8002b96 <f_read>
	bytesPerSecond = data;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a06      	ldr	r2, [pc, #24]	@ (80040bc <extractHeaderInfo+0x78>)
 80040a4:	6013      	str	r3, [r2, #0]
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200012ec 	.word	0x200012ec
 80040b4:	20000978 	.word	0x20000978
 80040b8:	20000028 	.word	0x20000028
 80040bc:	2000002c 	.word	0x2000002c

080040c0 <loadWav>:

void loadWav()
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 80040c4:	480b      	ldr	r0, [pc, #44]	@ (80040f4 <loadWav+0x34>)
 80040c6:	f7fe ff5d 	bl	8002f84 <f_close>
	f_open(&SDFile, Song_Name, FA_READ);
 80040ca:	2201      	movs	r2, #1
 80040cc:	490a      	ldr	r1, [pc, #40]	@ (80040f8 <loadWav+0x38>)
 80040ce:	4809      	ldr	r0, [pc, #36]	@ (80040f4 <loadWav+0x34>)
 80040d0:	f7fe fba0 	bl	8002814 <f_open>
	extractHeaderInfo();
 80040d4:	f7ff ffb6 	bl	8004044 <extractHeaderInfo>
	initializeAudio(audioFrequency);
 80040d8:	4b08      	ldr	r3, [pc, #32]	@ (80040fc <loadWav+0x3c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff83 	bl	8003fe8 <initializeAudio>
	f_lseek(&SDFile, 44);
 80040e2:	212c      	movs	r1, #44	@ 0x2c
 80040e4:	4803      	ldr	r0, [pc, #12]	@ (80040f4 <loadWav+0x34>)
 80040e6:	f7fe ff7c 	bl	8002fe2 <f_lseek>
	blockPointer = 0;
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <loadWav+0x40>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	200012ec 	.word	0x200012ec
 80040f8:	0801716c 	.word	0x0801716c
 80040fc:	20000028 	.word	0x20000028
 8004100:	2000097c 	.word	0x2000097c

08004104 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004104:	b5b0      	push	{r4, r5, r7, lr}
 8004106:	b0aa      	sub	sp, #168	@ 0xa8
 8004108:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800410a:	f7ff fc93 	bl	8003a34 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800410e:	f7ff fcb7 	bl	8003a80 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004112:	f006 fad6 	bl	800a6c2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004116:	f000 f8ef 	bl	80042f8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800411a:	f000 f95d 	bl	80043d8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800411e:	f000 fc9b 	bl	8004a58 <MX_GPIO_Init>
	MX_DMA_Init();
 8004122:	f000 fbdb 	bl	80048dc <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8004126:	f000 fb89 	bl	800483c <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 800412a:	f00e f85b 	bl	80121e4 <MX_FATFS_Init>
	MX_FMC_Init();
 800412e:	f000 fc0b 	bl	8004948 <MX_FMC_Init>
	MX_LTDC_Init();
 8004132:	f000 fa59 	bl	80045e8 <MX_LTDC_Init>
	MX_USART1_UART_Init();
 8004136:	f000 fba1 	bl	800487c <MX_USART1_UART_Init>
	MX_DMA2D_Init();
 800413a:	f000 fa23 	bl	8004584 <MX_DMA2D_Init>
	MX_SAI2_Init();
 800413e:	f000 fad5 	bl	80046ec <MX_SAI2_Init>
	MX_ADC1_Init();
 8004142:	f000 f97b 	bl	800443c <MX_ADC1_Init>
	MX_ADC3_Init();
 8004146:	f000 f9cb 	bl	80044e0 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */

	// Initialisation de l'écran LCD
	BSP_LCD_Init();
 800414a:	f002 fc73 	bl	8006a34 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800414e:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004152:	2000      	movs	r0, #0
 8004154:	f002 fd06 	bl	8006b64 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8004158:	f002 fcdc 	bl	8006b14 <BSP_LCD_GetXSize>
 800415c:	4604      	mov	r4, r0
 800415e:	f002 fced 	bl	8006b3c <BSP_LCD_GetYSize>
 8004162:	4603      	mov	r3, r0
 8004164:	fb04 f303 	mul.w	r3, r4, r3
 8004168:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4619      	mov	r1, r3
 8004170:	2001      	movs	r0, #1
 8004172:	f002 fcf7 	bl	8006b64 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8004176:	f003 f8e5 	bl	8007344 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 800417a:	2000      	movs	r0, #0
 800417c:	f002 fd52 	bl	8006c24 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8004180:	484d      	ldr	r0, [pc, #308]	@ (80042b8 <main+0x1b4>)
 8004182:	f002 fdc1 	bl	8006d08 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 8004186:	2001      	movs	r0, #1
 8004188:	f002 fd4c 	bl	8006c24 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 800418c:	2000      	movs	r0, #0
 800418e:	f002 fdbb 	bl	8006d08 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 8004192:	484a      	ldr	r0, [pc, #296]	@ (80042bc <main+0x1b8>)
 8004194:	f002 fd88 	bl	8006ca8 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8004198:	4849      	ldr	r0, [pc, #292]	@ (80042c0 <main+0x1bc>)
 800419a:	f002 fd53 	bl	8006c44 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 800419e:	2000      	movs	r0, #0
 80041a0:	f002 fd68 	bl	8006c74 <BSP_LCD_SetBackColor>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80041a4:	f002 fcb6 	bl	8006b14 <BSP_LCD_GetXSize>
 80041a8:	4603      	mov	r3, r0
 80041aa:	b29c      	uxth	r4, r3
 80041ac:	f002 fcc6 	bl	8006b3c <BSP_LCD_GetYSize>
 80041b0:	4603      	mov	r3, r0
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4619      	mov	r1, r3
 80041b6:	4620      	mov	r0, r4
 80041b8:	f003 fcd6 	bl	8007b68 <BSP_TS_Init>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of displayMutex */
	osMutexDef(displayMutex);
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 80041c8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f00e fc6f 	bl	8012ab0 <osMutexCreate>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4a3b      	ldr	r2, [pc, #236]	@ (80042c4 <main+0x1c0>)
 80041d6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of WakeUp */
	osMessageQDef(WakeUp, 1, uint8_t);
 80041d8:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <main+0x1c4>)
 80041da:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80041de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 80041e4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f00e fd41 	bl	8012c72 <osMessageCreate>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4a36      	ldr	r2, [pc, #216]	@ (80042cc <main+0x1c8>)
 80041f4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80041f6:	4b36      	ldr	r3, [pc, #216]	@ (80042d0 <main+0x1cc>)
 80041f8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80041fc:	461d      	mov	r5, r3
 80041fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004202:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800420a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f00e fbed 	bl	80129f0 <osThreadCreate>
 8004216:	4603      	mov	r3, r0
 8004218:	4a2e      	ldr	r2, [pc, #184]	@ (80042d4 <main+0x1d0>)
 800421a:	6013      	str	r3, [r2, #0]

	/* definition and creation of displayTask */
	osThreadDef(displayTask, StartDisplayTask, osPriorityLow, 0, 1024);
 800421c:	4b2e      	ldr	r3, [pc, #184]	@ (80042d8 <main+0x1d4>)
 800421e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8004222:	461d      	mov	r5, r3
 8004224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800422c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8004230:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f00e fbda 	bl	80129f0 <osThreadCreate>
 800423c:	4603      	mov	r3, r0
 800423e:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <main+0x1d8>)
 8004240:	6013      	str	r3, [r2, #0]

	/* definition and creation of manageBodyParts */
	osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityHigh, 0, 256);
 8004242:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <main+0x1dc>)
 8004244:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004248:	461d      	mov	r5, r3
 800424a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800424c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800424e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 8004256:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f00e fbc7 	bl	80129f0 <osThreadCreate>
 8004262:	4603      	mov	r3, r0
 8004264:	4a1f      	ldr	r2, [pc, #124]	@ (80042e4 <main+0x1e0>)
 8004266:	6013      	str	r3, [r2, #0]

	/* definition and creation of tsHandlerTask */
	osThreadDef(tsHandlerTask, StartTsHandler, osPriorityHigh, 0, 256);
 8004268:	4b1f      	ldr	r3, [pc, #124]	@ (80042e8 <main+0x1e4>)
 800426a:	f107 0420 	add.w	r4, r7, #32
 800426e:	461d      	mov	r5, r3
 8004270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 800427c:	f107 0320 	add.w	r3, r7, #32
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f00e fbb4 	bl	80129f0 <osThreadCreate>
 8004288:	4603      	mov	r3, r0
 800428a:	4a18      	ldr	r2, [pc, #96]	@ (80042ec <main+0x1e8>)
 800428c:	6013      	str	r3, [r2, #0]

	/* definition and creation of playSongTask */
	osThreadDef(playSongTask, StartPlaySongTask, osPriorityHigh, 0, 256);
 800428e:	4b18      	ldr	r3, [pc, #96]	@ (80042f0 <main+0x1ec>)
 8004290:	1d3c      	adds	r4, r7, #4
 8004292:	461d      	mov	r5, r3
 8004294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800429c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	playSongTaskHandle = osThreadCreate(osThread(playSongTask), NULL);
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f00e fba3 	bl	80129f0 <osThreadCreate>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4a11      	ldr	r2, [pc, #68]	@ (80042f4 <main+0x1f0>)
 80042ae:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80042b0:	f00e fb7b 	bl	80129aa <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <main+0x1b0>
 80042b8:	ff81cd4b 	.word	0xff81cd4b
 80042bc:	20000048 	.word	0x20000048
 80042c0:	ffa52a2a 	.word	0xffa52a2a
 80042c4:	20000974 	.word	0x20000974
 80042c8:	08017178 	.word	0x08017178
 80042cc:	20000970 	.word	0x20000970
 80042d0:	08017194 	.word	0x08017194
 80042d4:	2000095c 	.word	0x2000095c
 80042d8:	080171bc 	.word	0x080171bc
 80042dc:	20000960 	.word	0x20000960
 80042e0:	080171e8 	.word	0x080171e8
 80042e4:	20000964 	.word	0x20000964
 80042e8:	08017214 	.word	0x08017214
 80042ec:	20000968 	.word	0x20000968
 80042f0:	08017240 	.word	0x08017240
 80042f4:	2000096c 	.word	0x2000096c

080042f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b094      	sub	sp, #80	@ 0x50
 80042fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042fe:	f107 0320 	add.w	r3, r7, #32
 8004302:	2230      	movs	r2, #48	@ 0x30
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f011 fed5 	bl	80160b6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800430c:	f107 030c 	add.w	r3, r7, #12
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800431c:	f009 f99a 	bl	800d654 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004320:	4b2b      	ldr	r3, [pc, #172]	@ (80043d0 <SystemClock_Config+0xd8>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	4a2a      	ldr	r2, [pc, #168]	@ (80043d0 <SystemClock_Config+0xd8>)
 8004326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432a:	6413      	str	r3, [r2, #64]	@ 0x40
 800432c:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <SystemClock_Config+0xd8>)
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004338:	4b26      	ldr	r3, [pc, #152]	@ (80043d4 <SystemClock_Config+0xdc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a25      	ldr	r2, [pc, #148]	@ (80043d4 <SystemClock_Config+0xdc>)
 800433e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b23      	ldr	r3, [pc, #140]	@ (80043d4 <SystemClock_Config+0xdc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004350:	2301      	movs	r3, #1
 8004352:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800435a:	2302      	movs	r3, #2
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800435e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8004364:	2319      	movs	r3, #25
 8004366:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8004368:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800436c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800436e:	2302      	movs	r3, #2
 8004370:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8004372:	2309      	movs	r3, #9
 8004374:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004376:	f107 0320 	add.w	r3, r7, #32
 800437a:	4618      	mov	r0, r3
 800437c:	f009 f9ca 	bl	800d714 <HAL_RCC_OscConfig>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8004386:	f001 fd5f 	bl	8005e48 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800438a:	f009 f973 	bl	800d674 <HAL_PWREx_EnableOverDrive>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 8004394:	f001 fd58 	bl	8005e48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004398:	230f      	movs	r3, #15
 800439a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800439c:	2302      	movs	r3, #2
 800439e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80043a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80043a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80043aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80043b0:	f107 030c 	add.w	r3, r7, #12
 80043b4:	2106      	movs	r1, #6
 80043b6:	4618      	mov	r0, r3
 80043b8:	f009 fc50 	bl	800dc5c <HAL_RCC_ClockConfig>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <SystemClock_Config+0xce>
	{
		Error_Handler();
 80043c2:	f001 fd41 	bl	8005e48 <Error_Handler>
	}
}
 80043c6:	bf00      	nop
 80043c8:	3750      	adds	r7, #80	@ 0x50
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40007000 	.word	0x40007000

080043d8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b0a2      	sub	sp, #136	@ 0x88
 80043dc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	2284      	movs	r2, #132	@ 0x84
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f011 fe66 	bl	80160b6 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_CLK48;
 80043ea:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <PeriphCommonClock_Config+0x60>)
 80043ec:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80043ee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80043f2:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80043f4:	2305      	movs	r3, #5
 80043f6:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80043f8:	2302      	movs	r3, #2
 80043fa:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80043fc:	2303      	movs	r3, #3
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004400:	2301      	movs	r3, #1
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004404:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004408:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800440a:	2300      	movs	r3, #0
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800440e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004412:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800441c:	1d3b      	adds	r3, r7, #4
 800441e:	4618      	mov	r0, r3
 8004420:	f009 fe34 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 800442a:	f001 fd0d 	bl	8005e48 <Error_Handler>
	}
}
 800442e:	bf00      	nop
 8004430:	3788      	adds	r7, #136	@ 0x88
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	00b00008 	.word	0x00b00008

0800443c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8004442:	463b      	mov	r3, r7
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800444e:	4b21      	ldr	r3, [pc, #132]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004450:	4a21      	ldr	r2, [pc, #132]	@ (80044d8 <MX_ADC1_Init+0x9c>)
 8004452:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004454:	4b1f      	ldr	r3, [pc, #124]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004456:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800445a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800445c:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <MX_ADC1_Init+0x98>)
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004462:	4b1c      	ldr	r3, [pc, #112]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004464:	2200      	movs	r2, #0
 8004466:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8004468:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <MX_ADC1_Init+0x98>)
 800446a:	2200      	movs	r2, #0
 800446c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800446e:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004476:	4b17      	ldr	r3, [pc, #92]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004478:	2200      	movs	r2, #0
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800447c:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <MX_ADC1_Init+0x98>)
 800447e:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <MX_ADC1_Init+0xa0>)
 8004480:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004482:	4b14      	ldr	r3, [pc, #80]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004484:	2200      	movs	r2, #0
 8004486:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8004488:	4b12      	ldr	r3, [pc, #72]	@ (80044d4 <MX_ADC1_Init+0x98>)
 800448a:	2201      	movs	r2, #1
 800448c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800448e:	4b11      	ldr	r3, [pc, #68]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004496:	4b0f      	ldr	r3, [pc, #60]	@ (80044d4 <MX_ADC1_Init+0x98>)
 8004498:	2201      	movs	r2, #1
 800449a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800449c:	480d      	ldr	r0, [pc, #52]	@ (80044d4 <MX_ADC1_Init+0x98>)
 800449e:	f006 f961 	bl	800a764 <HAL_ADC_Init>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80044a8:	f001 fcce 	bl	8005e48 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80044b0:	2301      	movs	r3, #1
 80044b2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044b8:	463b      	mov	r3, r7
 80044ba:	4619      	mov	r1, r3
 80044bc:	4805      	ldr	r0, [pc, #20]	@ (80044d4 <MX_ADC1_Init+0x98>)
 80044be:	f006 fafb 	bl	800aab8 <HAL_ADC_ConfigChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80044c8:	f001 fcbe 	bl	8005e48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	200003e8 	.word	0x200003e8
 80044d8:	40012000 	.word	0x40012000
 80044dc:	0f000001 	.word	0x0f000001

080044e0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80044e6:	463b      	mov	r3, r7
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80044f2:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <MX_ADC3_Init+0x98>)
 80044f4:	4a21      	ldr	r2, [pc, #132]	@ (800457c <MX_ADC3_Init+0x9c>)
 80044f6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80044f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <MX_ADC3_Init+0x98>)
 80044fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044fe:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004500:	4b1d      	ldr	r3, [pc, #116]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004506:	4b1c      	ldr	r3, [pc, #112]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800450c:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <MX_ADC3_Init+0x98>)
 800450e:	2200      	movs	r2, #0
 8004510:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004512:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800451a:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <MX_ADC3_Init+0x98>)
 800451c:	2200      	movs	r2, #0
 800451e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004520:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004522:	4a17      	ldr	r2, [pc, #92]	@ (8004580 <MX_ADC3_Init+0xa0>)
 8004524:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004526:	4b14      	ldr	r3, [pc, #80]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800452c:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <MX_ADC3_Init+0x98>)
 800452e:	2201      	movs	r2, #1
 8004530:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8004532:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800453a:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <MX_ADC3_Init+0x98>)
 800453c:	2201      	movs	r2, #1
 800453e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004540:	480d      	ldr	r0, [pc, #52]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004542:	f006 f90f 	bl	800a764 <HAL_ADC_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800454c:	f001 fc7c 	bl	8005e48 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8004550:	2306      	movs	r3, #6
 8004552:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004554:	2301      	movs	r3, #1
 8004556:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800455c:	463b      	mov	r3, r7
 800455e:	4619      	mov	r1, r3
 8004560:	4805      	ldr	r0, [pc, #20]	@ (8004578 <MX_ADC3_Init+0x98>)
 8004562:	f006 faa9 	bl	800aab8 <HAL_ADC_ConfigChannel>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 800456c:	f001 fc6c 	bl	8005e48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000430 	.word	0x20000430
 800457c:	40012200 	.word	0x40012200
 8004580:	0f000001 	.word	0x0f000001

08004584 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8004588:	4b15      	ldr	r3, [pc, #84]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 800458a:	4a16      	ldr	r2, [pc, #88]	@ (80045e4 <MX_DMA2D_Init+0x60>)
 800458c:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800458e:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8004594:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800459a:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 800459c:	2200      	movs	r2, #0
 800459e:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80045a0:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80045ac:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80045b8:	4809      	ldr	r0, [pc, #36]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 80045ba:	f007 f9b3 	bl	800b924 <HAL_DMA2D_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 80045c4:	f001 fc40 	bl	8005e48 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80045c8:	2101      	movs	r1, #1
 80045ca:	4805      	ldr	r0, [pc, #20]	@ (80045e0 <MX_DMA2D_Init+0x5c>)
 80045cc:	f007 fb08 	bl	800bbe0 <HAL_DMA2D_ConfigLayer>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80045d6:	f001 fc37 	bl	8005e48 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000478 	.word	0x20000478
 80045e4:	4002b000 	.word	0x4002b000

080045e8 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08e      	sub	sp, #56	@ 0x38
 80045ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	2234      	movs	r2, #52	@ 0x34
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f011 fd5e 	bl	80160b6 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80045fa:	4b3a      	ldr	r3, [pc, #232]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 80045fc:	4a3a      	ldr	r2, [pc, #232]	@ (80046e8 <MX_LTDC_Init+0x100>)
 80045fe:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004600:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004602:	2200      	movs	r2, #0
 8004604:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004606:	4b37      	ldr	r3, [pc, #220]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800460c:	4b35      	ldr	r3, [pc, #212]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 800460e:	2200      	movs	r2, #0
 8004610:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004612:	4b34      	ldr	r3, [pc, #208]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8004618:	4b32      	ldr	r3, [pc, #200]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 800461a:	2228      	movs	r2, #40	@ 0x28
 800461c:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 800461e:	4b31      	ldr	r3, [pc, #196]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004620:	2209      	movs	r2, #9
 8004622:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8004624:	4b2f      	ldr	r3, [pc, #188]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004626:	2235      	movs	r2, #53	@ 0x35
 8004628:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 800462a:	4b2e      	ldr	r3, [pc, #184]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 800462c:	220b      	movs	r2, #11
 800462e:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8004630:	4b2c      	ldr	r3, [pc, #176]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004632:	f240 2215 	movw	r2, #533	@ 0x215
 8004636:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8004638:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 800463a:	f240 121b 	movw	r2, #283	@ 0x11b
 800463e:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 565;
 8004640:	4b28      	ldr	r3, [pc, #160]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004642:	f240 2235 	movw	r2, #565	@ 0x235
 8004646:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 285;
 8004648:	4b26      	ldr	r3, [pc, #152]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 800464a:	f240 121d 	movw	r2, #285	@ 0x11d
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8004650:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8004658:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8004660:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004668:	481e      	ldr	r0, [pc, #120]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 800466a:	f008 fc7b 	bl	800cf64 <HAL_LTDC_Init>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8004674:	f001 fbe8 	bl	8005e48 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 800467c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004680:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8004686:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800468a:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800468c:	2302      	movs	r3, #2
 800468e:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8004690:	23ff      	movs	r3, #255	@ 0xff
 8004692:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004698:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800469c:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800469e:	2307      	movs	r3, #7
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 80046a2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80046a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 480;
 80046a8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80046ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 272;
 80046ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80046b2:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	2200      	movs	r2, #0
 80046ca:	4619      	mov	r1, r3
 80046cc:	4805      	ldr	r0, [pc, #20]	@ (80046e4 <MX_LTDC_Init+0xfc>)
 80046ce:	f008 fddb 	bl	800d288 <HAL_LTDC_ConfigLayer>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 80046d8:	f001 fbb6 	bl	8005e48 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */
}
 80046dc:	bf00      	nop
 80046de:	3738      	adds	r7, #56	@ 0x38
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	200004b8 	.word	0x200004b8
 80046e8:	40016800 	.word	0x40016800

080046ec <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 80046f0:	4b4e      	ldr	r3, [pc, #312]	@ (800482c <MX_SAI2_Init+0x140>)
 80046f2:	4a4f      	ldr	r2, [pc, #316]	@ (8004830 <MX_SAI2_Init+0x144>)
 80046f4:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80046f6:	4b4d      	ldr	r3, [pc, #308]	@ (800482c <MX_SAI2_Init+0x140>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80046fc:	4b4b      	ldr	r3, [pc, #300]	@ (800482c <MX_SAI2_Init+0x140>)
 80046fe:	2200      	movs	r2, #0
 8004700:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8004702:	4b4a      	ldr	r3, [pc, #296]	@ (800482c <MX_SAI2_Init+0x140>)
 8004704:	2240      	movs	r2, #64	@ 0x40
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004708:	4b48      	ldr	r3, [pc, #288]	@ (800482c <MX_SAI2_Init+0x140>)
 800470a:	2200      	movs	r2, #0
 800470c:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800470e:	4b47      	ldr	r3, [pc, #284]	@ (800482c <MX_SAI2_Init+0x140>)
 8004710:	2200      	movs	r2, #0
 8004712:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8004714:	4b45      	ldr	r3, [pc, #276]	@ (800482c <MX_SAI2_Init+0x140>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800471a:	4b44      	ldr	r3, [pc, #272]	@ (800482c <MX_SAI2_Init+0x140>)
 800471c:	2200      	movs	r2, #0
 800471e:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8004720:	4b42      	ldr	r3, [pc, #264]	@ (800482c <MX_SAI2_Init+0x140>)
 8004722:	2200      	movs	r2, #0
 8004724:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8004726:	4b41      	ldr	r3, [pc, #260]	@ (800482c <MX_SAI2_Init+0x140>)
 8004728:	2200      	movs	r2, #0
 800472a:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800472c:	4b3f      	ldr	r3, [pc, #252]	@ (800482c <MX_SAI2_Init+0x140>)
 800472e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8004732:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004734:	4b3d      	ldr	r3, [pc, #244]	@ (800482c <MX_SAI2_Init+0x140>)
 8004736:	2200      	movs	r2, #0
 8004738:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800473a:	4b3c      	ldr	r3, [pc, #240]	@ (800482c <MX_SAI2_Init+0x140>)
 800473c:	2200      	movs	r2, #0
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8004740:	4b3a      	ldr	r3, [pc, #232]	@ (800482c <MX_SAI2_Init+0x140>)
 8004742:	2200      	movs	r2, #0
 8004744:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8004746:	4b39      	ldr	r3, [pc, #228]	@ (800482c <MX_SAI2_Init+0x140>)
 8004748:	2200      	movs	r2, #0
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 8;
 800474c:	4b37      	ldr	r3, [pc, #220]	@ (800482c <MX_SAI2_Init+0x140>)
 800474e:	2208      	movs	r2, #8
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8004752:	4b36      	ldr	r3, [pc, #216]	@ (800482c <MX_SAI2_Init+0x140>)
 8004754:	2201      	movs	r2, #1
 8004756:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8004758:	4b34      	ldr	r3, [pc, #208]	@ (800482c <MX_SAI2_Init+0x140>)
 800475a:	2200      	movs	r2, #0
 800475c:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800475e:	4b33      	ldr	r3, [pc, #204]	@ (800482c <MX_SAI2_Init+0x140>)
 8004760:	2200      	movs	r2, #0
 8004762:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8004764:	4b31      	ldr	r3, [pc, #196]	@ (800482c <MX_SAI2_Init+0x140>)
 8004766:	2200      	movs	r2, #0
 8004768:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800476a:	4b30      	ldr	r3, [pc, #192]	@ (800482c <MX_SAI2_Init+0x140>)
 800476c:	2200      	movs	r2, #0
 800476e:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004770:	4b2e      	ldr	r3, [pc, #184]	@ (800482c <MX_SAI2_Init+0x140>)
 8004772:	2200      	movs	r2, #0
 8004774:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 1;
 8004776:	4b2d      	ldr	r3, [pc, #180]	@ (800482c <MX_SAI2_Init+0x140>)
 8004778:	2201      	movs	r2, #1
 800477a:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800477c:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <MX_SAI2_Init+0x140>)
 800477e:	2200      	movs	r2, #0
 8004780:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8004782:	482a      	ldr	r0, [pc, #168]	@ (800482c <MX_SAI2_Init+0x140>)
 8004784:	f00a fabe 	bl	800ed04 <HAL_SAI_Init>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_SAI2_Init+0xa6>
	{
		Error_Handler();
 800478e:	f001 fb5b 	bl	8005e48 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8004792:	4b28      	ldr	r3, [pc, #160]	@ (8004834 <MX_SAI2_Init+0x148>)
 8004794:	4a28      	ldr	r2, [pc, #160]	@ (8004838 <MX_SAI2_Init+0x14c>)
 8004796:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8004798:	4b26      	ldr	r3, [pc, #152]	@ (8004834 <MX_SAI2_Init+0x148>)
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800479e:	4b25      	ldr	r3, [pc, #148]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047a0:	2203      	movs	r2, #3
 80047a2:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80047a4:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047a6:	2240      	movs	r2, #64	@ 0x40
 80047a8:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80047aa:	4b22      	ldr	r3, [pc, #136]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80047b0:	4b20      	ldr	r3, [pc, #128]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80047b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80047bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047be:	2200      	movs	r2, #0
 80047c0:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80047c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80047c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80047ce:	4b19      	ldr	r3, [pc, #100]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80047d4:	4b17      	ldr	r3, [pc, #92]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80047da:	4b16      	ldr	r3, [pc, #88]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047dc:	2200      	movs	r2, #0
 80047de:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 8;
 80047e0:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047e2:	2208      	movs	r2, #8
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80047e6:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80047ec:	4b11      	ldr	r3, [pc, #68]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80047f2:	4b10      	ldr	r3, [pc, #64]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80047f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <MX_SAI2_Init+0x148>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <MX_SAI2_Init+0x148>)
 8004800:	2200      	movs	r2, #0
 8004802:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <MX_SAI2_Init+0x148>)
 8004806:	2200      	movs	r2, #0
 8004808:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 1;
 800480a:	4b0a      	ldr	r3, [pc, #40]	@ (8004834 <MX_SAI2_Init+0x148>)
 800480c:	2201      	movs	r2, #1
 800480e:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8004810:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <MX_SAI2_Init+0x148>)
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8004816:	4807      	ldr	r0, [pc, #28]	@ (8004834 <MX_SAI2_Init+0x148>)
 8004818:	f00a fa74 	bl	800ed04 <HAL_SAI_Init>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <MX_SAI2_Init+0x13a>
	{
		Error_Handler();
 8004822:	f001 fb11 	bl	8005e48 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000560 	.word	0x20000560
 8004830:	40015c04 	.word	0x40015c04
 8004834:	200005e4 	.word	0x200005e4
 8004838:	40015c24 	.word	0x40015c24

0800483c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8004840:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <MX_SDMMC1_SD_Init+0x38>)
 8004842:	4a0d      	ldr	r2, [pc, #52]	@ (8004878 <MX_SDMMC1_SD_Init+0x3c>)
 8004844:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004846:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <MX_SDMMC1_SD_Init+0x38>)
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800484c:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <MX_SDMMC1_SD_Init+0x38>)
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004852:	4b08      	ldr	r3, [pc, #32]	@ (8004874 <MX_SDMMC1_SD_Init+0x38>)
 8004854:	2200      	movs	r2, #0
 8004856:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004858:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <MX_SDMMC1_SD_Init+0x38>)
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800485e:	4b05      	ldr	r3, [pc, #20]	@ (8004874 <MX_SDMMC1_SD_Init+0x38>)
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8004864:	4b03      	ldr	r3, [pc, #12]	@ (8004874 <MX_SDMMC1_SD_Init+0x38>)
 8004866:	2200      	movs	r2, #0
 8004868:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */
}
 800486a:	bf00      	nop
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	20000728 	.word	0x20000728
 8004878:	40012c00 	.word	0x40012c00

0800487c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004880:	4b14      	ldr	r3, [pc, #80]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 8004882:	4a15      	ldr	r2, [pc, #84]	@ (80048d8 <MX_USART1_UART_Init+0x5c>)
 8004884:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004886:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 8004888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800488c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800488e:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004894:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800489a:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 800489c:	2200      	movs	r2, #0
 800489e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 80048a2:	220c      	movs	r2, #12
 80048a4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048a6:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048b2:	4b08      	ldr	r3, [pc, #32]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80048be:	4805      	ldr	r0, [pc, #20]	@ (80048d4 <MX_USART1_UART_Init+0x58>)
 80048c0:	f00c fa0a 	bl	8010cd8 <HAL_UART_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80048ca:	f001 fabd 	bl	8005e48 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	2000086c 	.word	0x2000086c
 80048d8:	40011000 	.word	0x40011000

080048dc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80048e2:	4b18      	ldr	r3, [pc, #96]	@ (8004944 <MX_DMA_Init+0x68>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	4a17      	ldr	r2, [pc, #92]	@ (8004944 <MX_DMA_Init+0x68>)
 80048e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ee:	4b15      	ldr	r3, [pc, #84]	@ (8004944 <MX_DMA_Init+0x68>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	2105      	movs	r1, #5
 80048fe:	203b      	movs	r0, #59	@ 0x3b
 8004900:	f006 fbe2 	bl	800b0c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004904:	203b      	movs	r0, #59	@ 0x3b
 8004906:	f006 fbfb 	bl	800b100 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	2105      	movs	r1, #5
 800490e:	203c      	movs	r0, #60	@ 0x3c
 8004910:	f006 fbda 	bl	800b0c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004914:	203c      	movs	r0, #60	@ 0x3c
 8004916:	f006 fbf3 	bl	800b100 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	2105      	movs	r1, #5
 800491e:	2045      	movs	r0, #69	@ 0x45
 8004920:	f006 fbd2 	bl	800b0c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004924:	2045      	movs	r0, #69	@ 0x45
 8004926:	f006 fbeb 	bl	800b100 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2105      	movs	r1, #5
 800492e:	2046      	movs	r0, #70	@ 0x46
 8004930:	f006 fbca 	bl	800b0c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004934:	2046      	movs	r0, #70	@ 0x46
 8004936:	f006 fbe3 	bl	800b100 <HAL_NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800

08004948 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	611a      	str	r2, [r3, #16]
 800495c:	615a      	str	r2, [r3, #20]
 800495e:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004960:	4b3a      	ldr	r3, [pc, #232]	@ (8004a4c <MX_FMC_Init+0x104>)
 8004962:	4a3b      	ldr	r2, [pc, #236]	@ (8004a50 <MX_FMC_Init+0x108>)
 8004964:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8004966:	4b39      	ldr	r3, [pc, #228]	@ (8004a4c <MX_FMC_Init+0x104>)
 8004968:	2200      	movs	r2, #0
 800496a:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800496c:	4b37      	ldr	r3, [pc, #220]	@ (8004a4c <MX_FMC_Init+0x104>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004972:	4b36      	ldr	r3, [pc, #216]	@ (8004a4c <MX_FMC_Init+0x104>)
 8004974:	2204      	movs	r2, #4
 8004976:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004978:	4b34      	ldr	r3, [pc, #208]	@ (8004a4c <MX_FMC_Init+0x104>)
 800497a:	2210      	movs	r2, #16
 800497c:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800497e:	4b33      	ldr	r3, [pc, #204]	@ (8004a4c <MX_FMC_Init+0x104>)
 8004980:	2240      	movs	r2, #64	@ 0x40
 8004982:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8004984:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <MX_FMC_Init+0x104>)
 8004986:	2280      	movs	r2, #128	@ 0x80
 8004988:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800498a:	4b30      	ldr	r3, [pc, #192]	@ (8004a4c <MX_FMC_Init+0x104>)
 800498c:	2200      	movs	r2, #0
 800498e:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8004990:	4b2e      	ldr	r3, [pc, #184]	@ (8004a4c <MX_FMC_Init+0x104>)
 8004992:	2200      	movs	r2, #0
 8004994:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8004996:	4b2d      	ldr	r3, [pc, #180]	@ (8004a4c <MX_FMC_Init+0x104>)
 8004998:	2200      	movs	r2, #0
 800499a:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800499c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a4c <MX_FMC_Init+0x104>)
 800499e:	2200      	movs	r2, #0
 80049a0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 80049a2:	2310      	movs	r3, #16
 80049a4:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 80049a6:	2310      	movs	r3, #16
 80049a8:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 80049aa:	2310      	movs	r3, #16
 80049ac:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 80049ae:	2310      	movs	r3, #16
 80049b0:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 80049b2:	2310      	movs	r3, #16
 80049b4:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 80049b6:	2310      	movs	r3, #16
 80049b8:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 80049ba:	2310      	movs	r3, #16
 80049bc:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	4619      	mov	r1, r3
 80049c2:	4822      	ldr	r0, [pc, #136]	@ (8004a4c <MX_FMC_Init+0x104>)
 80049c4:	f00b fe18 	bl	80105f8 <HAL_SDRAM_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_FMC_Init+0x8a>
	{
		Error_Handler();
 80049ce:	f001 fa3b 	bl	8005e48 <Error_Handler>
	}

	/** Perform the SDRAM2 memory initialization sequence
	 */
	hsdram2.Instance = FMC_SDRAM_DEVICE;
 80049d2:	4b20      	ldr	r3, [pc, #128]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a50 <MX_FMC_Init+0x108>)
 80049d6:	601a      	str	r2, [r3, #0]
	/* hsdram2.Init */
	hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80049d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049da:	2201      	movs	r2, #1
 80049dc:	605a      	str	r2, [r3, #4]
	hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	609a      	str	r2, [r3, #8]
	hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049e6:	2204      	movs	r2, #4
 80049e8:	60da      	str	r2, [r3, #12]
	hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049ec:	2210      	movs	r2, #16
 80049ee:	611a      	str	r2, [r3, #16]
	hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80049f0:	4b18      	ldr	r3, [pc, #96]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049f2:	2240      	movs	r2, #64	@ 0x40
 80049f4:	615a      	str	r2, [r3, #20]
	hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80049f6:	4b17      	ldr	r3, [pc, #92]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049f8:	2280      	movs	r2, #128	@ 0x80
 80049fa:	619a      	str	r2, [r3, #24]
	hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80049fc:	4b15      	ldr	r3, [pc, #84]	@ (8004a54 <MX_FMC_Init+0x10c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
	hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8004a02:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <MX_FMC_Init+0x10c>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	621a      	str	r2, [r3, #32]
	hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8004a08:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <MX_FMC_Init+0x10c>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8004a0e:	4b11      	ldr	r3, [pc, #68]	@ (8004a54 <MX_FMC_Init+0x10c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8004a14:	2310      	movs	r3, #16
 8004a16:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8004a18:	2310      	movs	r3, #16
 8004a1a:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8004a20:	2310      	movs	r3, #16
 8004a22:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8004a24:	2310      	movs	r3, #16
 8004a26:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8004a28:	2310      	movs	r3, #16
 8004a2a:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8004a30:	1d3b      	adds	r3, r7, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4807      	ldr	r0, [pc, #28]	@ (8004a54 <MX_FMC_Init+0x10c>)
 8004a36:	f00b fddf 	bl	80105f8 <HAL_SDRAM_Init>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <MX_FMC_Init+0xfc>
	{
		Error_Handler();
 8004a40:	f001 fa02 	bl	8005e48 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8004a44:	bf00      	nop
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200008f4 	.word	0x200008f4
 8004a50:	a0000140 	.word	0xa0000140
 8004a54:	20000928 	.word	0x20000928

08004a58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b090      	sub	sp, #64	@ 0x40
 8004a5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004a6e:	4bae      	ldr	r3, [pc, #696]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	4aad      	ldr	r2, [pc, #692]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004a74:	f043 0310 	orr.w	r3, r3, #16
 8004a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7a:	4bab      	ldr	r3, [pc, #684]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8004a86:	4ba8      	ldr	r3, [pc, #672]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	4aa7      	ldr	r2, [pc, #668]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a92:	4ba5      	ldr	r3, [pc, #660]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9e:	4ba2      	ldr	r3, [pc, #648]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	4aa1      	ldr	r2, [pc, #644]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aaa:	4b9f      	ldr	r3, [pc, #636]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	4a9b      	ldr	r2, [pc, #620]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004abc:	f043 0308 	orr.w	r3, r3, #8
 8004ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ac2:	4b99      	ldr	r3, [pc, #612]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004ace:	4b96      	ldr	r3, [pc, #600]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	4a95      	ldr	r2, [pc, #596]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ada:	4b93      	ldr	r3, [pc, #588]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae6:	4b90      	ldr	r3, [pc, #576]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	4a8f      	ldr	r2, [pc, #572]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004af2:	4b8d      	ldr	r3, [pc, #564]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8004afe:	4b8a      	ldr	r3, [pc, #552]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	4a89      	ldr	r2, [pc, #548]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0a:	4b87      	ldr	r3, [pc, #540]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8004b16:	4b84      	ldr	r3, [pc, #528]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	4a83      	ldr	r2, [pc, #524]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b22:	4b81      	ldr	r3, [pc, #516]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8004b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	4a7d      	ldr	r2, [pc, #500]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004b46:	4b78      	ldr	r3, [pc, #480]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4a:	4a77      	ldr	r2, [pc, #476]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b4c:	f043 0320 	orr.w	r3, r3, #32
 8004b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b52:	4b75      	ldr	r3, [pc, #468]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004b5e:	4b72      	ldr	r3, [pc, #456]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	4a71      	ldr	r2, [pc, #452]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d28 <MX_GPIO_Init+0x2d0>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004b76:	2201      	movs	r2, #1
 8004b78:	2120      	movs	r1, #32
 8004b7a:	486c      	ldr	r0, [pc, #432]	@ (8004d2c <MX_GPIO_Init+0x2d4>)
 8004b7c:	f007 fc2e 	bl	800c3dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin, GPIO_PIN_RESET);
 8004b80:	2200      	movs	r2, #0
 8004b82:	f241 010c 	movw	r1, #4108	@ 0x100c
 8004b86:	486a      	ldr	r0, [pc, #424]	@ (8004d30 <MX_GPIO_Init+0x2d8>)
 8004b88:	f007 fc28 	bl	800c3dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2108      	movs	r1, #8
 8004b90:	4868      	ldr	r0, [pc, #416]	@ (8004d34 <MX_GPIO_Init+0x2dc>)
 8004b92:	f007 fc23 	bl	800c3dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin | LED2_Pin | LED1_Pin | LED3_Pin, GPIO_PIN_RESET);
 8004b96:	2200      	movs	r2, #0
 8004b98:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8004b9c:	4866      	ldr	r0, [pc, #408]	@ (8004d38 <MX_GPIO_Init+0x2e0>)
 8004b9e:	f007 fc1d 	bl	800c3dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin, GPIO_PIN_RESET);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	21c8      	movs	r1, #200	@ 0xc8
 8004ba6:	4865      	ldr	r0, [pc, #404]	@ (8004d3c <MX_GPIO_Init+0x2e4>)
 8004ba8:	f007 fc18 	bl	800c3dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8004bac:	2308      	movs	r3, #8
 8004bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4860      	ldr	r0, [pc, #384]	@ (8004d40 <MX_GPIO_Init+0x2e8>)
 8004bc0:	f007 f93c 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004bd4:	2309      	movs	r3, #9
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4858      	ldr	r0, [pc, #352]	@ (8004d40 <MX_GPIO_Init+0x2e8>)
 8004be0:	f007 f92c 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8004be4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bea:	2302      	movs	r3, #2
 8004bec:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bf6:	230b      	movs	r3, #11
 8004bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bfe:	4619      	mov	r1, r3
 8004c00:	484e      	ldr	r0, [pc, #312]	@ (8004d3c <MX_GPIO_Init+0x2e4>)
 8004c02:	f007 f91b 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 8004c06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c0c:	2312      	movs	r3, #18
 8004c0e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c20:	4619      	mov	r1, r3
 8004c22:	4848      	ldr	r0, [pc, #288]	@ (8004d44 <MX_GPIO_Init+0x2ec>)
 8004c24:	f007 f90a 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004c28:	2310      	movs	r3, #16
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c34:	2300      	movs	r3, #0
 8004c36:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c40:	4619      	mov	r1, r3
 8004c42:	4840      	ldr	r0, [pc, #256]	@ (8004d44 <MX_GPIO_Init+0x2ec>)
 8004c44:	f007 f8fa 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004c58:	2308      	movs	r3, #8
 8004c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c60:	4619      	mov	r1, r3
 8004c62:	4832      	ldr	r0, [pc, #200]	@ (8004d2c <MX_GPIO_Init+0x2d4>)
 8004c64:	f007 f8ea 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004c68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c76:	2300      	movs	r3, #0
 8004c78:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c82:	4619      	mov	r1, r3
 8004c84:	4830      	ldr	r0, [pc, #192]	@ (8004d48 <MX_GPIO_Init+0x2f0>)
 8004c86:	f007 f8d9 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 8004c8a:	2360      	movs	r3, #96	@ 0x60
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c96:	2300      	movs	r3, #0
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004c9a:	230d      	movs	r3, #13
 8004c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4826      	ldr	r0, [pc, #152]	@ (8004d40 <MX_GPIO_Init+0x2e8>)
 8004ca6:	f007 f8c9 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8004caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4823      	ldr	r0, [pc, #140]	@ (8004d4c <MX_GPIO_Init+0x2f4>)
 8004cc0:	f007 f8bc 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8004cc4:	2340      	movs	r3, #64	@ 0x40
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004cc8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004ccc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8004cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4814      	ldr	r0, [pc, #80]	@ (8004d2c <MX_GPIO_Init+0x2d4>)
 8004cda:	f007 f8af 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8004cde:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cec:	2303      	movs	r3, #3
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004cf0:	230a      	movs	r3, #10
 8004cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4813      	ldr	r0, [pc, #76]	@ (8004d48 <MX_GPIO_Init+0x2f0>)
 8004cfc:	f007 f89e 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004d00:	2320      	movs	r3, #32
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d04:	2301      	movs	r3, #1
 8004d06:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d14:	4619      	mov	r1, r3
 8004d16:	4805      	ldr	r0, [pc, #20]	@ (8004d2c <MX_GPIO_Init+0x2d4>)
 8004d18:	f007 f890 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d20:	2302      	movs	r3, #2
 8004d22:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e013      	b.n	8004d50 <MX_GPIO_Init+0x2f8>
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40020c00 	.word	0x40020c00
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40022800 	.word	0x40022800
 8004d38:	40021c00 	.word	0x40021c00
 8004d3c:	40021800 	.word	0x40021800
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40020400 	.word	0x40020400
 8004d48:	40020000 	.word	0x40020000
 8004d4c:	40022400 	.word	0x40022400
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d52:	2300      	movs	r3, #0
 8004d54:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004d56:	230d      	movs	r3, #13
 8004d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d5e:	4619      	mov	r1, r3
 8004d60:	48bb      	ldr	r0, [pc, #748]	@ (8005050 <MX_GPIO_Init+0x5f8>)
 8004d62:	f007 f86b 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8004d66:	f241 030c 	movw	r3, #4108	@ 0x100c
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d74:	2300      	movs	r3, #0
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	48b5      	ldr	r0, [pc, #724]	@ (8005054 <MX_GPIO_Init+0x5fc>)
 8004d80:	f007 f85c 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8004d84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8004d92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d96:	4619      	mov	r1, r3
 8004d98:	48af      	ldr	r0, [pc, #700]	@ (8005058 <MX_GPIO_Init+0x600>)
 8004d9a:	f007 f84f 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8004d9e:	2308      	movs	r3, #8
 8004da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da2:	2301      	movs	r3, #1
 8004da4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004db2:	4619      	mov	r1, r3
 8004db4:	48a9      	ldr	r0, [pc, #676]	@ (800505c <MX_GPIO_Init+0x604>)
 8004db6:	f007 f841 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8004dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004dcc:	230d      	movs	r3, #13
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	48a2      	ldr	r0, [pc, #648]	@ (8005060 <MX_GPIO_Init+0x608>)
 8004dd8:	f007 f830 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004ddc:	2310      	movs	r3, #16
 8004dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004de0:	2300      	movs	r3, #0
 8004de2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dec:	4619      	mov	r1, r3
 8004dee:	4898      	ldr	r0, [pc, #608]	@ (8005050 <MX_GPIO_Init+0x5f8>)
 8004df0:	f007 f824 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8004df4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8004df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e06:	4619      	mov	r1, r3
 8004e08:	4896      	ldr	r0, [pc, #600]	@ (8005064 <MX_GPIO_Init+0x60c>)
 8004e0a:	f007 f817 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e12:	2302      	movs	r3, #2
 8004e14:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e1e:	2305      	movs	r3, #5
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e26:	4619      	mov	r1, r3
 8004e28:	488a      	ldr	r0, [pc, #552]	@ (8005054 <MX_GPIO_Init+0x5fc>)
 8004e2a:	f007 f807 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin | LED2_Pin | LED1_Pin | LED3_Pin;
 8004e2e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e34:	2301      	movs	r3, #1
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e44:	4619      	mov	r1, r3
 8004e46:	4887      	ldr	r0, [pc, #540]	@ (8005064 <MX_GPIO_Init+0x60c>)
 8004e48:	f006 fff8 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D0_Pin;
 8004e4c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e52:	2302      	movs	r3, #2
 8004e54:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004e5e:	230d      	movs	r3, #13
 8004e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e66:	4619      	mov	r1, r3
 8004e68:	487e      	ldr	r0, [pc, #504]	@ (8005064 <MX_GPIO_Init+0x60c>)
 8004e6a:	f006 ffe7 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e72:	2302      	movs	r3, #2
 8004e74:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e86:	4619      	mov	r1, r3
 8004e88:	4872      	ldr	r0, [pc, #456]	@ (8005054 <MX_GPIO_Init+0x5fc>)
 8004e8a:	f006 ffd7 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e94:	2302      	movs	r3, #2
 8004e96:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004ea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	486f      	ldr	r0, [pc, #444]	@ (8005068 <MX_GPIO_Init+0x610>)
 8004eac:	f006 ffc6 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004eb6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8004ec0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4863      	ldr	r0, [pc, #396]	@ (8005054 <MX_GPIO_Init+0x5fc>)
 8004ec8:	f006 ffb8 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8004ecc:	23c0      	movs	r3, #192	@ 0xc0
 8004ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004edc:	2308      	movs	r3, #8
 8004ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	485c      	ldr	r0, [pc, #368]	@ (8005058 <MX_GPIO_Init+0x600>)
 8004ee8:	f006 ffa8 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8004eec:	2310      	movs	r3, #16
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004efc:	230a      	movs	r3, #10
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8004f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f04:	4619      	mov	r1, r3
 8004f06:	4857      	ldr	r0, [pc, #348]	@ (8005064 <MX_GPIO_Init+0x60c>)
 8004f08:	f006 ff98 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8004f0c:	23c8      	movs	r3, #200	@ 0xc8
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f10:	2301      	movs	r3, #1
 8004f12:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f20:	4619      	mov	r1, r3
 8004f22:	484f      	ldr	r0, [pc, #316]	@ (8005060 <MX_GPIO_Init+0x608>)
 8004f24:	f006 ff8a 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
							 ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin | ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
 8004f28:	f643 4303 	movw	r3, #15363	@ 0x3c03
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f36:	2303      	movs	r3, #3
 8004f38:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f42:	4619      	mov	r1, r3
 8004f44:	4849      	ldr	r0, [pc, #292]	@ (800506c <MX_GPIO_Init+0x614>)
 8004f46:	f006 ff79 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8004f4a:	2305      	movs	r3, #5
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f56:	2303      	movs	r3, #3
 8004f58:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004f5a:	230a      	movs	r3, #10
 8004f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f62:	4619      	mov	r1, r3
 8004f64:	483c      	ldr	r0, [pc, #240]	@ (8005058 <MX_GPIO_Init+0x600>)
 8004f66:	f006 ff69 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8004f6a:	2332      	movs	r3, #50	@ 0x32
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f76:	2303      	movs	r3, #3
 8004f78:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f7a:	230b      	movs	r3, #11
 8004f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f82:	4619      	mov	r1, r3
 8004f84:	4834      	ldr	r0, [pc, #208]	@ (8005058 <MX_GPIO_Init+0x600>)
 8004f86:	f006 ff59 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f96:	2303      	movs	r3, #3
 8004f98:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f9a:	2309      	movs	r3, #9
 8004f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4831      	ldr	r0, [pc, #196]	@ (800506c <MX_GPIO_Init+0x614>)
 8004fa6:	f006 ff49 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 8004faa:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fbc:	2309      	movs	r3, #9
 8004fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4822      	ldr	r0, [pc, #136]	@ (8005050 <MX_GPIO_Init+0x5f8>)
 8004fc8:	f006 ff38 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8004fcc:	2304      	movs	r3, #4
 8004fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8004fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4820      	ldr	r0, [pc, #128]	@ (8005060 <MX_GPIO_Init+0x608>)
 8004fe0:	f006 ff2c 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8004fe4:	2386      	movs	r3, #134	@ 0x86
 8004fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ff4:	230b      	movs	r3, #11
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	481a      	ldr	r0, [pc, #104]	@ (8005068 <MX_GPIO_Init+0x610>)
 8005000:	f006 ff1c 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 8005004:	2350      	movs	r3, #80	@ 0x50
 8005006:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005010:	2300      	movs	r3, #0
 8005012:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005014:	230d      	movs	r3, #13
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800501c:	4619      	mov	r1, r3
 800501e:	4812      	ldr	r0, [pc, #72]	@ (8005068 <MX_GPIO_Init+0x610>)
 8005020:	f006 ff0c 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8005024:	2328      	movs	r3, #40	@ 0x28
 8005026:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005028:	2302      	movs	r3, #2
 800502a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005030:	2303      	movs	r3, #3
 8005032:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8005034:	230a      	movs	r3, #10
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005038:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800503c:	4619      	mov	r1, r3
 800503e:	480a      	ldr	r0, [pc, #40]	@ (8005068 <MX_GPIO_Init+0x610>)
 8005040:	f006 fefc 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8005044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800504a:	2312      	movs	r3, #18
 800504c:	633b      	str	r3, [r7, #48]	@ 0x30
 800504e:	e00f      	b.n	8005070 <MX_GPIO_Init+0x618>
 8005050:	40020c00 	.word	0x40020c00
 8005054:	40022000 	.word	0x40022000
 8005058:	40020800 	.word	0x40020800
 800505c:	40022800 	.word	0x40022800
 8005060:	40021800 	.word	0x40021800
 8005064:	40021c00 	.word	0x40021c00
 8005068:	40020000 	.word	0x40020000
 800506c:	40020400 	.word	0x40020400
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005070:	2300      	movs	r3, #0
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005074:	2303      	movs	r3, #3
 8005076:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005078:	2304      	movs	r3, #4
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 800507c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005080:	4619      	mov	r1, r3
 8005082:	480c      	ldr	r0, [pc, #48]	@ (80050b4 <MX_GPIO_Init+0x65c>)
 8005084:	f006 feda 	bl	800be3c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8005088:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508e:	2302      	movs	r3, #2
 8005090:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	2300      	movs	r3, #0
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005096:	2300      	movs	r3, #0
 8005098:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800509a:	2305      	movs	r3, #5
 800509c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050a2:	4619      	mov	r1, r3
 80050a4:	4804      	ldr	r0, [pc, #16]	@ (80050b8 <MX_GPIO_Init+0x660>)
 80050a6:	f006 fec9 	bl	800be3c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80050aa:	bf00      	nop
 80050ac:	3740      	adds	r7, #64	@ 0x40
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40021c00 	.word	0x40021c00
 80050b8:	40020400 	.word	0x40020400

080050bc <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
	char a = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	1df9      	adds	r1, r7, #7
 80050cc:	2300      	movs	r3, #0
 80050ce:	2200      	movs	r2, #0
 80050d0:	f00e fa0c 	bl	80134ec <xQueueGenericSendFromISR>
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000970 	.word	0x20000970

080050e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
	char a = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 80050ea:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	1df9      	adds	r1, r7, #7
 80050f0:	2300      	movs	r3, #0
 80050f2:	2200      	movs	r2, #0
 80050f4:	f00e f9fa 	bl	80134ec <xQueueGenericSendFromISR>
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000970 	.word	0x20000970

08005104 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		updateJoystickDirection();
 800510c:	f7fe fddc 	bl	8003cc8 <updateJoystickDirection>
		osDelay(10);
 8005110:	200a      	movs	r0, #10
 8005112:	f00d fcb9 	bl	8012a88 <osDelay>
		updateJoystickDirection();
 8005116:	bf00      	nop
 8005118:	e7f8      	b.n	800510c <StartDefaultTask+0x8>
	...

0800511c <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const *argument)
{
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b0d1      	sub	sp, #324	@ 0x144
 8005120:	af00      	add	r7, sp, #0
 8005122:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005126:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800512a:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN StartDisplayTask */
	vTaskSuspend(manageBodyPartsHandle);
 800512c:	4bb8      	ldr	r3, [pc, #736]	@ (8005410 <StartDisplayTask+0x2f4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f00f f995 	bl	8014460 <vTaskSuspend>
	vTaskSuspend(tsHandlerTaskHandle);
 8005136:	4bb7      	ldr	r3, [pc, #732]	@ (8005414 <StartDisplayTask+0x2f8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f00f f990 	bl	8014460 <vTaskSuspend>
	vTaskSuspend(playSongTaskHandle);
 8005140:	4bb5      	ldr	r3, [pc, #724]	@ (8005418 <StartDisplayTask+0x2fc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f00f f98b 	bl	8014460 <vTaskSuspend>
	vTaskDelay(100);
 800514a:	2064      	movs	r0, #100	@ 0x64
 800514c:	f00f f950 	bl	80143f0 <vTaskDelay>

	uwInternelBuffer = (uint8_t *)0xC0260000;
 8005150:	4bb2      	ldr	r3, [pc, #712]	@ (800541c <StartDisplayTask+0x300>)
 8005152:	4ab3      	ldr	r2, [pc, #716]	@ (8005420 <StartDisplayTask+0x304>)
 8005154:	601a      	str	r2, [r3, #0]
	uwInternelBuffer2 = (uint8_t *)0xC0360000;
 8005156:	4bb3      	ldr	r3, [pc, #716]	@ (8005424 <StartDisplayTask+0x308>)
 8005158:	4ab3      	ldr	r2, [pc, #716]	@ (8005428 <StartDisplayTask+0x30c>)
 800515a:	601a      	str	r2, [r3, #0]

	uint8_t counter;

	/*##- Initialize the Directory Files pointers (heap) ###################*/
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 800515c:	2300      	movs	r3, #0
 800515e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005162:	e01e      	b.n	80051a2 <StartDisplayTask+0x86>
	{
		pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 8005164:	f897 413f 	ldrb.w	r4, [r7, #319]	@ 0x13f
 8005168:	200b      	movs	r0, #11
 800516a:	f010 fd8b 	bl	8015c84 <malloc>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	4bae      	ldr	r3, [pc, #696]	@ (800542c <StartDisplayTask+0x310>)
 8005174:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if (pDirectoryFiles[counter] == NULL)
 8005178:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800517c:	4aab      	ldr	r2, [pc, #684]	@ (800542c <StartDisplayTask+0x310>)
 800517e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <StartDisplayTask+0x7c>
		{
			/* Set the Text Color */
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005186:	48aa      	ldr	r0, [pc, #680]	@ (8005430 <StartDisplayTask+0x314>)
 8005188:	f001 fd5c 	bl	8006c44 <BSP_LCD_SetTextColor>

			BSP_LCD_DisplayStringAtLine(8,
 800518c:	49a9      	ldr	r1, [pc, #676]	@ (8005434 <StartDisplayTask+0x318>)
 800518e:	2008      	movs	r0, #8
 8005190:	f001 feee 	bl	8006f70 <BSP_LCD_DisplayStringAtLine>
										(uint8_t *)"  Cannot allocate memory ");

			while (1)
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <StartDisplayTask+0x78>
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8005198:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800519c:	3301      	adds	r3, #1
 800519e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80051a2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80051a6:	2b18      	cmp	r3, #24
 80051a8:	d9dc      	bls.n	8005164 <StartDisplayTask+0x48>
			}
		}
	}

	// Lancement de la musique
	initializeSD();
 80051aa:	f7fe ff0b 	bl	8003fc4 <initializeSD>
	loadWav(0);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7fe ff86 	bl	80040c0 <loadWav>

	vTaskResume(manageBodyPartsHandle);
 80051b4:	4b96      	ldr	r3, [pc, #600]	@ (8005410 <StartDisplayTask+0x2f4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f00f fa1b 	bl	80145f4 <vTaskResume>
	vTaskResume(tsHandlerTaskHandle);
 80051be:	4b95      	ldr	r3, [pc, #596]	@ (8005414 <StartDisplayTask+0x2f8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f00f fa16 	bl	80145f4 <vTaskResume>
	vTaskResume(playSongTaskHandle);
 80051c8:	4b93      	ldr	r3, [pc, #588]	@ (8005418 <StartDisplayTask+0x2fc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f00f fa11 	bl	80145f4 <vTaskResume>

	vTaskDelay(1000);
 80051d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051d6:	f00f f90b 	bl	80143f0 <vTaskDelay>
	/* Infinite loop */
	for (;;)
	{
		if ((gameOver && !lastMove) || gamePaused || !gameStarted)
 80051da:	4b97      	ldr	r3, [pc, #604]	@ (8005438 <StartDisplayTask+0x31c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <StartDisplayTask+0xce>
 80051e2:	4b96      	ldr	r3, [pc, #600]	@ (800543c <StartDisplayTask+0x320>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <StartDisplayTask+0xde>
 80051ea:	4b95      	ldr	r3, [pc, #596]	@ (8005440 <StartDisplayTask+0x324>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <StartDisplayTask+0xde>
 80051f2:	4b94      	ldr	r3, [pc, #592]	@ (8005444 <StartDisplayTask+0x328>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d110      	bne.n	800521c <StartDisplayTask+0x100>
		{ // revoir la condition
			xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 80051fa:	4b93      	ldr	r3, [pc, #588]	@ (8005448 <StartDisplayTask+0x32c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005202:	4618      	mov	r0, r3
 8005204:	f00e fb96 	bl	8013934 <xQueueSemaphoreTake>
			displayGameStatus();
 8005208:	f7fe fe72 	bl	8003ef0 <displayGameStatus>
			xSemaphoreGive(displayMutexHandle);
 800520c:	4b8e      	ldr	r3, [pc, #568]	@ (8005448 <StartDisplayTask+0x32c>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	f00e f85f 	bl	80132d8 <xQueueGenericSend>
 800521a:	e22c      	b.n	8005676 <StartDisplayTask+0x55a>
		}
		else
		{
			// On convertit la direction en texte
			char directionText[100];
			switch (direction)
 800521c:	4b8b      	ldr	r3, [pc, #556]	@ (800544c <StartDisplayTask+0x330>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d827      	bhi.n	8005274 <StartDisplayTask+0x158>
 8005224:	a201      	add	r2, pc, #4	@ (adr r2, 800522c <StartDisplayTask+0x110>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	0800523d 	.word	0x0800523d
 8005230:	0800524b 	.word	0x0800524b
 8005234:	08005259 	.word	0x08005259
 8005238:	08005267 	.word	0x08005267
			{
			case Up:
				sprintf(directionText, (char *)"Direction: Up   ");
 800523c:	f107 0308 	add.w	r3, r7, #8
 8005240:	4983      	ldr	r1, [pc, #524]	@ (8005450 <StartDisplayTask+0x334>)
 8005242:	4618      	mov	r0, r3
 8005244:	f010 fed4 	bl	8015ff0 <siprintf>
				break;
 8005248:	e014      	b.n	8005274 <StartDisplayTask+0x158>
			case Down:
				sprintf(directionText, (char *)"Direction: Down ");
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4981      	ldr	r1, [pc, #516]	@ (8005454 <StartDisplayTask+0x338>)
 8005250:	4618      	mov	r0, r3
 8005252:	f010 fecd 	bl	8015ff0 <siprintf>
				break;
 8005256:	e00d      	b.n	8005274 <StartDisplayTask+0x158>
			case Left:
				sprintf(directionText, (char *)"Direction: Left ");
 8005258:	f107 0308 	add.w	r3, r7, #8
 800525c:	497e      	ldr	r1, [pc, #504]	@ (8005458 <StartDisplayTask+0x33c>)
 800525e:	4618      	mov	r0, r3
 8005260:	f010 fec6 	bl	8015ff0 <siprintf>
				break;
 8005264:	e006      	b.n	8005274 <StartDisplayTask+0x158>
			case Right:
				sprintf(directionText, (char *)"Direction: Right");
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	497c      	ldr	r1, [pc, #496]	@ (800545c <StartDisplayTask+0x340>)
 800526c:	4618      	mov	r0, r3
 800526e:	f010 febf 	bl	8015ff0 <siprintf>
				break;
 8005272:	bf00      	nop
			}
			// On convertit le score en texte
			char scoreText[100];
			sprintf(scoreText, (char *)"Score: %d", snakeSize);
 8005274:	4b7a      	ldr	r3, [pc, #488]	@ (8005460 <StartDisplayTask+0x344>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800527e:	4979      	ldr	r1, [pc, #484]	@ (8005464 <StartDisplayTask+0x348>)
 8005280:	4618      	mov	r0, r3
 8005282:	f010 feb5 	bl	8015ff0 <siprintf>

			// On convertit la vitesse en texte
			char speedText[100];
			sprintf(speedText, (char *)"Speed: %d Hz", speed);
 8005286:	4b78      	ldr	r3, [pc, #480]	@ (8005468 <StartDisplayTask+0x34c>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005290:	4976      	ldr	r1, [pc, #472]	@ (800546c <StartDisplayTask+0x350>)
 8005292:	4618      	mov	r0, r3
 8005294:	f010 feac 	bl	8015ff0 <siprintf>

			xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8005298:	4b6b      	ldr	r3, [pc, #428]	@ (8005448 <StartDisplayTask+0x32c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f04f 31ff 	mov.w	r1, #4294967295
 80052a0:	4618      	mov	r0, r3
 80052a2:	f00e fb47 	bl	8013934 <xQueueSemaphoreTake>
			BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80052a6:	4872      	ldr	r0, [pc, #456]	@ (8005470 <StartDisplayTask+0x354>)
 80052a8:	f001 fccc 	bl	8006c44 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawHLine(0, 8 * 32, BSP_LCD_GetXSize());
 80052ac:	f001 fc32 	bl	8006b14 <BSP_LCD_GetXSize>
 80052b0:	4603      	mov	r3, r0
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052ba:	2000      	movs	r0, #0
 80052bc:	f001 fe70 	bl	8006fa0 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(0, 8 * 32 + 1, BSP_LCD_GetXSize());
 80052c0:	f001 fc28 	bl	8006b14 <BSP_LCD_GetXSize>
 80052c4:	4603      	mov	r3, r0
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	f240 1101 	movw	r1, #257	@ 0x101
 80052ce:	2000      	movs	r0, #0
 80052d0:	f001 fe66 	bl	8006fa0 <BSP_LCD_DrawHLine>

			// On affiche la direction, le score et la vitesse
			BSP_LCD_DisplayStringAt(0, 8 * 32 + 2, (uint8_t *)directionText, LEFT_MODE);
 80052d4:	f107 0208 	add.w	r2, r7, #8
 80052d8:	2303      	movs	r3, #3
 80052da:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80052de:	2000      	movs	r0, #0
 80052e0:	f001 fd7e 	bl	8006de0 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(200, 8 * 32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 80052e4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80052e8:	2303      	movs	r3, #3
 80052ea:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80052ee:	20c8      	movs	r0, #200	@ 0xc8
 80052f0:	f001 fd76 	bl	8006de0 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(350, 8 * 32 + 2, (uint8_t *)speedText, LEFT_MODE);
 80052f4:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80052f8:	2303      	movs	r3, #3
 80052fa:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80052fe:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8005302:	f001 fd6d 	bl	8006de0 <BSP_LCD_DisplayStringAt>

			// On affiche la tête du snake
			if (!gameOver)
 8005306:	4b4c      	ldr	r3, [pc, #304]	@ (8005438 <StartDisplayTask+0x31c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d13e      	bne.n	800538c <StartDisplayTask+0x270>
				switch (headPart)
 800530e:	4b59      	ldr	r3, [pc, #356]	@ (8005474 <StartDisplayTask+0x358>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d83a      	bhi.n	800538c <StartDisplayTask+0x270>
 8005316:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <StartDisplayTask+0x200>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	08005345 	.word	0x08005345
 8005320:	0800532d 	.word	0x0800532d
 8005324:	0800535d 	.word	0x0800535d
 8005328:	08005375 	.word	0x08005375
				{
				case HeadBottom:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_bottom_81CD4B_bmp);
 800532c:	4b52      	ldr	r3, [pc, #328]	@ (8005478 <StartDisplayTask+0x35c>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	015b      	lsls	r3, r3, #5
 8005332:	4618      	mov	r0, r3
 8005334:	4b50      	ldr	r3, [pc, #320]	@ (8005478 <StartDisplayTask+0x35c>)
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	015b      	lsls	r3, r3, #5
 800533a:	4a50      	ldr	r2, [pc, #320]	@ (800547c <StartDisplayTask+0x360>)
 800533c:	4619      	mov	r1, r3
 800533e:	f001 fed5 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 8005342:	e023      	b.n	800538c <StartDisplayTask+0x270>
				case HeadTop:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_top_81CD4B_bmp);
 8005344:	4b4c      	ldr	r3, [pc, #304]	@ (8005478 <StartDisplayTask+0x35c>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	015b      	lsls	r3, r3, #5
 800534a:	4618      	mov	r0, r3
 800534c:	4b4a      	ldr	r3, [pc, #296]	@ (8005478 <StartDisplayTask+0x35c>)
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	015b      	lsls	r3, r3, #5
 8005352:	4a4b      	ldr	r2, [pc, #300]	@ (8005480 <StartDisplayTask+0x364>)
 8005354:	4619      	mov	r1, r3
 8005356:	f001 fec9 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 800535a:	e017      	b.n	800538c <StartDisplayTask+0x270>
				case HeadLeft:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_left_81CD4B_bmp);
 800535c:	4b46      	ldr	r3, [pc, #280]	@ (8005478 <StartDisplayTask+0x35c>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	015b      	lsls	r3, r3, #5
 8005362:	4618      	mov	r0, r3
 8005364:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <StartDisplayTask+0x35c>)
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	015b      	lsls	r3, r3, #5
 800536a:	4a46      	ldr	r2, [pc, #280]	@ (8005484 <StartDisplayTask+0x368>)
 800536c:	4619      	mov	r1, r3
 800536e:	f001 febd 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 8005372:	e00b      	b.n	800538c <StartDisplayTask+0x270>
				case HeadRight:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_right_81CD4B_bmp);
 8005374:	4b40      	ldr	r3, [pc, #256]	@ (8005478 <StartDisplayTask+0x35c>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	015b      	lsls	r3, r3, #5
 800537a:	4618      	mov	r0, r3
 800537c:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <StartDisplayTask+0x35c>)
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	015b      	lsls	r3, r3, #5
 8005382:	4a41      	ldr	r2, [pc, #260]	@ (8005488 <StartDisplayTask+0x36c>)
 8005384:	4619      	mov	r1, r3
 8005386:	f001 feb1 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 800538a:	bf00      	nop
				}

			// On affiche le corps du snake
			for (int i = 0; i < snakeSize; i++)
 800538c:	2300      	movs	r3, #0
 800538e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005392:	e0d4      	b.n	800553e <StartDisplayTask+0x422>
			{
				switch (snakeBodyParts[i])
 8005394:	4a3d      	ldr	r2, [pc, #244]	@ (800548c <StartDisplayTask+0x370>)
 8005396:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800539a:	4413      	add	r3, r2
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b05      	cmp	r3, #5
 80053a0:	f200 80c8 	bhi.w	8005534 <StartDisplayTask+0x418>
 80053a4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <StartDisplayTask+0x290>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053eb 	.word	0x080053eb
 80053b4:	0800549d 	.word	0x0800549d
 80053b8:	080054c3 	.word	0x080054c3
 80053bc:	080054e9 	.word	0x080054e9
 80053c0:	0800550f 	.word	0x0800550f
				{
				case BottomLeft:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_left_81CD4B_bmp);
 80053c4:	4a32      	ldr	r2, [pc, #200]	@ (8005490 <StartDisplayTask+0x374>)
 80053c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053ca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80053ce:	015b      	lsls	r3, r3, #5
 80053d0:	4618      	mov	r0, r3
 80053d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005490 <StartDisplayTask+0x374>)
 80053d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	015b      	lsls	r3, r3, #5
 80053e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005494 <StartDisplayTask+0x378>)
 80053e2:	4619      	mov	r1, r3
 80053e4:	f001 fe82 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 80053e8:	e0a4      	b.n	8005534 <StartDisplayTask+0x418>
				case BottomRight:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_right_81CD4B_bmp);
 80053ea:	4a29      	ldr	r2, [pc, #164]	@ (8005490 <StartDisplayTask+0x374>)
 80053ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053f0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80053f4:	015b      	lsls	r3, r3, #5
 80053f6:	4618      	mov	r0, r3
 80053f8:	4a25      	ldr	r2, [pc, #148]	@ (8005490 <StartDisplayTask+0x374>)
 80053fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4413      	add	r3, r2
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	015b      	lsls	r3, r3, #5
 8005406:	4a24      	ldr	r2, [pc, #144]	@ (8005498 <StartDisplayTask+0x37c>)
 8005408:	4619      	mov	r1, r3
 800540a:	f001 fe6f 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 800540e:	e091      	b.n	8005534 <StartDisplayTask+0x418>
 8005410:	20000964 	.word	0x20000964
 8005414:	20000968 	.word	0x20000968
 8005418:	2000096c 	.word	0x2000096c
 800541c:	200009e4 	.word	0x200009e4
 8005420:	c0260000 	.word	0xc0260000
 8005424:	200009e8 	.word	0x200009e8
 8005428:	c0360000 	.word	0xc0360000
 800542c:	20000980 	.word	0x20000980
 8005430:	ffff0000 	.word	0xffff0000
 8005434:	0801725c 	.word	0x0801725c
 8005438:	20000ab0 	.word	0x20000ab0
 800543c:	20000034 	.word	0x20000034
 8005440:	20000aac 	.word	0x20000aac
 8005444:	20000aa8 	.word	0x20000aa8
 8005448:	20000974 	.word	0x20000974
 800544c:	20000a24 	.word	0x20000a24
 8005450:	08017278 	.word	0x08017278
 8005454:	0801728c 	.word	0x0801728c
 8005458:	080172a0 	.word	0x080172a0
 800545c:	080172b4 	.word	0x080172b4
 8005460:	20000aa0 	.word	0x20000aa0
 8005464:	080172c8 	.word	0x080172c8
 8005468:	20000030 	.word	0x20000030
 800546c:	080172d4 	.word	0x080172d4
 8005470:	ffa52a2a 	.word	0xffa52a2a
 8005474:	20000a25 	.word	0x20000a25
 8005478:	20000038 	.word	0x20000038
 800547c:	0801a5ac 	.word	0x0801a5ac
 8005480:	0801b238 	.word	0x0801b238
 8005484:	0801bec4 	.word	0x0801bec4
 8005488:	0801cb50 	.word	0x0801cb50
 800548c:	20000a28 	.word	0x20000a28
 8005490:	20000ab4 	.word	0x20000ab4
 8005494:	08018008 	.word	0x08018008
 8005498:	08018c94 	.word	0x08018c94
				case BottomTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_top_81CD4B_bmp);
 800549c:	4a78      	ldr	r2, [pc, #480]	@ (8005680 <StartDisplayTask+0x564>)
 800549e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054a2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80054a6:	015b      	lsls	r3, r3, #5
 80054a8:	4618      	mov	r0, r3
 80054aa:	4a75      	ldr	r2, [pc, #468]	@ (8005680 <StartDisplayTask+0x564>)
 80054ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4413      	add	r3, r2
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	015b      	lsls	r3, r3, #5
 80054b8:	4a72      	ldr	r2, [pc, #456]	@ (8005684 <StartDisplayTask+0x568>)
 80054ba:	4619      	mov	r1, r3
 80054bc:	f001 fe16 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 80054c0:	e038      	b.n	8005534 <StartDisplayTask+0x418>
				case LeftRight:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_left_right_81CD4B_bmp);
 80054c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005680 <StartDisplayTask+0x564>)
 80054c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054c8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80054cc:	015b      	lsls	r3, r3, #5
 80054ce:	4618      	mov	r0, r3
 80054d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005680 <StartDisplayTask+0x564>)
 80054d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	015b      	lsls	r3, r3, #5
 80054de:	4a6a      	ldr	r2, [pc, #424]	@ (8005688 <StartDisplayTask+0x56c>)
 80054e0:	4619      	mov	r1, r3
 80054e2:	f001 fe03 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 80054e6:	e025      	b.n	8005534 <StartDisplayTask+0x418>
				case LeftTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_left_top_81CD4B_bmp);
 80054e8:	4a65      	ldr	r2, [pc, #404]	@ (8005680 <StartDisplayTask+0x564>)
 80054ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80054f2:	015b      	lsls	r3, r3, #5
 80054f4:	4618      	mov	r0, r3
 80054f6:	4a62      	ldr	r2, [pc, #392]	@ (8005680 <StartDisplayTask+0x564>)
 80054f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	015b      	lsls	r3, r3, #5
 8005504:	4a61      	ldr	r2, [pc, #388]	@ (800568c <StartDisplayTask+0x570>)
 8005506:	4619      	mov	r1, r3
 8005508:	f001 fdf0 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 800550c:	e012      	b.n	8005534 <StartDisplayTask+0x418>
				case RightTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_right_top_81CD4B_bmp);
 800550e:	4a5c      	ldr	r2, [pc, #368]	@ (8005680 <StartDisplayTask+0x564>)
 8005510:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005514:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005518:	015b      	lsls	r3, r3, #5
 800551a:	4618      	mov	r0, r3
 800551c:	4a58      	ldr	r2, [pc, #352]	@ (8005680 <StartDisplayTask+0x564>)
 800551e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4413      	add	r3, r2
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	015b      	lsls	r3, r3, #5
 800552a:	4a59      	ldr	r2, [pc, #356]	@ (8005690 <StartDisplayTask+0x574>)
 800552c:	4619      	mov	r1, r3
 800552e:	f001 fddd 	bl	80070ec <BSP_LCD_DrawBitmap>
					break;
 8005532:	bf00      	nop
			for (int i = 0; i < snakeSize; i++)
 8005534:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005538:	3301      	adds	r3, #1
 800553a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800553e:	4b55      	ldr	r3, [pc, #340]	@ (8005694 <StartDisplayTask+0x578>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005548:	4293      	cmp	r3, r2
 800554a:	f6ff af23 	blt.w	8005394 <StartDisplayTask+0x278>
				}
			}

			// On affiche la queue du snake
			switch (tailPart)
 800554e:	4b52      	ldr	r3, [pc, #328]	@ (8005698 <StartDisplayTask+0x57c>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d83a      	bhi.n	80055cc <StartDisplayTask+0x4b0>
 8005556:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <StartDisplayTask+0x440>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	08005585 	.word	0x08005585
 8005564:	0800559d 	.word	0x0800559d
 8005568:	080055b5 	.word	0x080055b5
			{
			case TailBottom:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_bottom_81CD4B_bmp);
 800556c:	4b4b      	ldr	r3, [pc, #300]	@ (800569c <StartDisplayTask+0x580>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	015b      	lsls	r3, r3, #5
 8005572:	4618      	mov	r0, r3
 8005574:	4b49      	ldr	r3, [pc, #292]	@ (800569c <StartDisplayTask+0x580>)
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	015b      	lsls	r3, r3, #5
 800557a:	4a49      	ldr	r2, [pc, #292]	@ (80056a0 <StartDisplayTask+0x584>)
 800557c:	4619      	mov	r1, r3
 800557e:	f001 fdb5 	bl	80070ec <BSP_LCD_DrawBitmap>
				break;
 8005582:	e023      	b.n	80055cc <StartDisplayTask+0x4b0>
			case TailTop:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_top_81CD4B_bmp);
 8005584:	4b45      	ldr	r3, [pc, #276]	@ (800569c <StartDisplayTask+0x580>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	015b      	lsls	r3, r3, #5
 800558a:	4618      	mov	r0, r3
 800558c:	4b43      	ldr	r3, [pc, #268]	@ (800569c <StartDisplayTask+0x580>)
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	015b      	lsls	r3, r3, #5
 8005592:	4a44      	ldr	r2, [pc, #272]	@ (80056a4 <StartDisplayTask+0x588>)
 8005594:	4619      	mov	r1, r3
 8005596:	f001 fda9 	bl	80070ec <BSP_LCD_DrawBitmap>
				break;
 800559a:	e017      	b.n	80055cc <StartDisplayTask+0x4b0>
			case TailLeft:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_left_81CD4B_bmp);
 800559c:	4b3f      	ldr	r3, [pc, #252]	@ (800569c <StartDisplayTask+0x580>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	015b      	lsls	r3, r3, #5
 80055a2:	4618      	mov	r0, r3
 80055a4:	4b3d      	ldr	r3, [pc, #244]	@ (800569c <StartDisplayTask+0x580>)
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	015b      	lsls	r3, r3, #5
 80055aa:	4a3f      	ldr	r2, [pc, #252]	@ (80056a8 <StartDisplayTask+0x58c>)
 80055ac:	4619      	mov	r1, r3
 80055ae:	f001 fd9d 	bl	80070ec <BSP_LCD_DrawBitmap>
				break;
 80055b2:	e00b      	b.n	80055cc <StartDisplayTask+0x4b0>
			case TailRight:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_right_81CD4B_bmp);
 80055b4:	4b39      	ldr	r3, [pc, #228]	@ (800569c <StartDisplayTask+0x580>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	015b      	lsls	r3, r3, #5
 80055ba:	4618      	mov	r0, r3
 80055bc:	4b37      	ldr	r3, [pc, #220]	@ (800569c <StartDisplayTask+0x580>)
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	015b      	lsls	r3, r3, #5
 80055c2:	4a3a      	ldr	r2, [pc, #232]	@ (80056ac <StartDisplayTask+0x590>)
 80055c4:	4619      	mov	r1, r3
 80055c6:	f001 fd91 	bl	80070ec <BSP_LCD_DrawBitmap>
				break;
 80055ca:	bf00      	nop
			}

			// On efface l'ancienne queue avec un carré vert
			if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1]))
 80055cc:	4b38      	ldr	r3, [pc, #224]	@ (80056b0 <StartDisplayTask+0x594>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11a      	bne.n	800560a <StartDisplayTask+0x4ee>
 80055d4:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <StartDisplayTask+0x598>)
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	4b37      	ldr	r3, [pc, #220]	@ (80056b8 <StartDisplayTask+0x59c>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d105      	bne.n	80055ec <StartDisplayTask+0x4d0>
 80055e0:	4b34      	ldr	r3, [pc, #208]	@ (80056b4 <StartDisplayTask+0x598>)
 80055e2:	785a      	ldrb	r2, [r3, #1]
 80055e4:	4b34      	ldr	r3, [pc, #208]	@ (80056b8 <StartDisplayTask+0x59c>)
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d00e      	beq.n	800560a <StartDisplayTask+0x4ee>
			{
				// On efface l'ancienne queue si:
				//    - le snake a avancé et n'a pas mangé de pomme
				// et
				//    - la tête n'est pas à la position de l'ancienne queue (sinon on efface la tête)
				BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 80055ec:	4833      	ldr	r0, [pc, #204]	@ (80056bc <StartDisplayTask+0x5a0>)
 80055ee:	f001 fb29 	bl	8006c44 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(oldTailPosition[0] * 32, oldTailPosition[1] * 32, 32, 32);
 80055f2:	4b31      	ldr	r3, [pc, #196]	@ (80056b8 <StartDisplayTask+0x59c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	b298      	uxth	r0, r3
 80055fa:	4b2f      	ldr	r3, [pc, #188]	@ (80056b8 <StartDisplayTask+0x59c>)
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	015b      	lsls	r3, r3, #5
 8005600:	b299      	uxth	r1, r3
 8005602:	2320      	movs	r3, #32
 8005604:	2220      	movs	r2, #32
 8005606:	f001 fe23 	bl	8007250 <BSP_LCD_FillRect>
			}

			// On affiche les pommes
			for (int i = 0; i < NB_APPLES; i++)
 800560a:	2300      	movs	r3, #0
 800560c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005610:	e01f      	b.n	8005652 <StartDisplayTask+0x536>
				if (applePosition[i][0] != -1)
 8005612:	4a2b      	ldr	r2, [pc, #172]	@ (80056c0 <StartDisplayTask+0x5a4>)
 8005614:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005618:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d012      	beq.n	8005648 <StartDisplayTask+0x52c>
					BSP_LCD_DrawBitmap(applePosition[i][0] * 32, applePosition[i][1] * 32, (uint8_t *)images_bmp_color_apple_81CD4B_bmp);
 8005622:	4a27      	ldr	r2, [pc, #156]	@ (80056c0 <StartDisplayTask+0x5a4>)
 8005624:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005628:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 800562c:	015b      	lsls	r3, r3, #5
 800562e:	4618      	mov	r0, r3
 8005630:	4a23      	ldr	r2, [pc, #140]	@ (80056c0 <StartDisplayTask+0x5a4>)
 8005632:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4413      	add	r3, r2
 800563a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800563e:	015b      	lsls	r3, r3, #5
 8005640:	4a20      	ldr	r2, [pc, #128]	@ (80056c4 <StartDisplayTask+0x5a8>)
 8005642:	4619      	mov	r1, r3
 8005644:	f001 fd52 	bl	80070ec <BSP_LCD_DrawBitmap>
			for (int i = 0; i < NB_APPLES; i++)
 8005648:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800564c:	3301      	adds	r3, #1
 800564e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005652:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005656:	2b03      	cmp	r3, #3
 8005658:	dddb      	ble.n	8005612 <StartDisplayTask+0x4f6>
			xSemaphoreGive(displayMutexHandle);
 800565a:	4b1b      	ldr	r3, [pc, #108]	@ (80056c8 <StartDisplayTask+0x5ac>)
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	2300      	movs	r3, #0
 8005660:	2200      	movs	r2, #0
 8005662:	2100      	movs	r1, #0
 8005664:	f00d fe38 	bl	80132d8 <xQueueGenericSend>

			if (gameOver)
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <StartDisplayTask+0x5b0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <StartDisplayTask+0x55a>
				lastMove = 0;
 8005670:	4b17      	ldr	r3, [pc, #92]	@ (80056d0 <StartDisplayTask+0x5b4>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
		}

		osDelay(90);
 8005676:	205a      	movs	r0, #90	@ 0x5a
 8005678:	f00d fa06 	bl	8012a88 <osDelay>
		if ((gameOver && !lastMove) || gamePaused || !gameStarted)
 800567c:	e5ad      	b.n	80051da <StartDisplayTask+0xbe>
 800567e:	bf00      	nop
 8005680:	20000ab4 	.word	0x20000ab4
 8005684:	08019920 	.word	0x08019920
 8005688:	0801d7dc 	.word	0x0801d7dc
 800568c:	0801e468 	.word	0x0801e468
 8005690:	0801f0f4 	.word	0x0801f0f4
 8005694:	20000aa0 	.word	0x20000aa0
 8005698:	20000031 	.word	0x20000031
 800569c:	2000003c 	.word	0x2000003c
 80056a0:	0801fd80 	.word	0x0801fd80
 80056a4:	08020a0c 	.word	0x08020a0c
 80056a8:	08021698 	.word	0x08021698
 80056ac:	08022324 	.word	0x08022324
 80056b0:	20000aa4 	.word	0x20000aa4
 80056b4:	20000038 	.word	0x20000038
 80056b8:	20000ba4 	.word	0x20000ba4
 80056bc:	ff81cd4b 	.word	0xff81cd4b
 80056c0:	20000ba8 	.word	0x20000ba8
 80056c4:	0801737c 	.word	0x0801737c
 80056c8:	20000974 	.word	0x20000974
 80056cc:	20000ab0 	.word	0x20000ab0
 80056d0:	20000034 	.word	0x20000034

080056d4 <StartManageBodyParts>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const *argument)
{
 80056d4:	b5b0      	push	{r4, r5, r7, lr}
 80056d6:	b08e      	sub	sp, #56	@ 0x38
 80056d8:	af02      	add	r7, sp, #8
 80056da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartManageBodyParts */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80056dc:	f00f f906 	bl	80148ec <xTaskGetTickCount>
 80056e0:	4603      	mov	r3, r0
 80056e2:	60fb      	str	r3, [r7, #12]
	TickType_t delay = pdMS_TO_TICKS(1000. / initSpeed);
 80056e4:	2302      	movs	r3, #2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fa ff34 	bl	8000554 <__aeabi_i2d>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	f04f 0000 	mov.w	r0, #0
 80056f4:	4990      	ldr	r1, [pc, #576]	@ (8005938 <StartManageBodyParts+0x264>)
 80056f6:	f7fb f8c1 	bl	800087c <__aeabi_ddiv>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4610      	mov	r0, r2
 8005700:	4619      	mov	r1, r3
 8005702:	f7fb f9a3 	bl	8000a4c <__aeabi_d2uiz>
 8005706:	4603      	mov	r3, r0
 8005708:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800570c:	fb02 f303 	mul.w	r3, r2, r3
 8005710:	4a8a      	ldr	r2, [pc, #552]	@ (800593c <StartManageBodyParts+0x268>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;)
	{
		delay = pdMS_TO_TICKS(1000. / speed);
 800571a:	4b89      	ldr	r3, [pc, #548]	@ (8005940 <StartManageBodyParts+0x26c>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa ff18 	bl	8000554 <__aeabi_i2d>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	f04f 0000 	mov.w	r0, #0
 800572c:	4982      	ldr	r1, [pc, #520]	@ (8005938 <StartManageBodyParts+0x264>)
 800572e:	f7fb f8a5 	bl	800087c <__aeabi_ddiv>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f7fb f987 	bl	8000a4c <__aeabi_d2uiz>
 800573e:	4603      	mov	r3, r0
 8005740:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	4a7c      	ldr	r2, [pc, #496]	@ (800593c <StartManageBodyParts+0x268>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	099b      	lsrs	r3, r3, #6
 8005750:	617b      	str	r3, [r7, #20]

		if (!gameOver && !gamePaused && gameStarted)
 8005752:	4b7c      	ldr	r3, [pc, #496]	@ (8005944 <StartManageBodyParts+0x270>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 82b6 	bne.w	8005cc8 <StartManageBodyParts+0x5f4>
 800575c:	4b7a      	ldr	r3, [pc, #488]	@ (8005948 <StartManageBodyParts+0x274>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f040 82b1 	bne.w	8005cc8 <StartManageBodyParts+0x5f4>
 8005766:	4b79      	ldr	r3, [pc, #484]	@ (800594c <StartManageBodyParts+0x278>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 82ac 	beq.w	8005cc8 <StartManageBodyParts+0x5f4>
		{
			// Le jeu est en cours

			// On sauvegarde la position de la queue et de la tête
			oldTailPosition[0] = snakeTailPosition[0];
 8005770:	4b77      	ldr	r3, [pc, #476]	@ (8005950 <StartManageBodyParts+0x27c>)
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	4b77      	ldr	r3, [pc, #476]	@ (8005954 <StartManageBodyParts+0x280>)
 8005776:	701a      	strb	r2, [r3, #0]
			oldTailPosition[1] = snakeTailPosition[1];
 8005778:	4b75      	ldr	r3, [pc, #468]	@ (8005950 <StartManageBodyParts+0x27c>)
 800577a:	785a      	ldrb	r2, [r3, #1]
 800577c:	4b75      	ldr	r3, [pc, #468]	@ (8005954 <StartManageBodyParts+0x280>)
 800577e:	705a      	strb	r2, [r3, #1]

			uint8_t oldHeadPosition[2];
			oldHeadPosition[0] = snakeHeadPosition[0];
 8005780:	4b75      	ldr	r3, [pc, #468]	@ (8005958 <StartManageBodyParts+0x284>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	723b      	strb	r3, [r7, #8]
			oldHeadPosition[1] = snakeHeadPosition[1];
 8005786:	4b74      	ldr	r3, [pc, #464]	@ (8005958 <StartManageBodyParts+0x284>)
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	727b      	strb	r3, [r7, #9]

			// On met a jour la position de la tête en fonction de la direction
			switch (direction)
 800578c:	4b73      	ldr	r3, [pc, #460]	@ (800595c <StartManageBodyParts+0x288>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d833      	bhi.n	80057fc <StartManageBodyParts+0x128>
 8005794:	a201      	add	r2, pc, #4	@ (adr r2, 800579c <StartManageBodyParts+0xc8>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057c1 	.word	0x080057c1
 80057a4:	080057d5 	.word	0x080057d5
 80057a8:	080057e9 	.word	0x080057e9
			{
			case Up:
				headPart = HeadTop;
 80057ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005960 <StartManageBodyParts+0x28c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[1]--;
 80057b2:	4b69      	ldr	r3, [pc, #420]	@ (8005958 <StartManageBodyParts+0x284>)
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	4b67      	ldr	r3, [pc, #412]	@ (8005958 <StartManageBodyParts+0x284>)
 80057bc:	705a      	strb	r2, [r3, #1]
				break;
 80057be:	e01d      	b.n	80057fc <StartManageBodyParts+0x128>
			case Down:
				headPart = HeadBottom;
 80057c0:	4b67      	ldr	r3, [pc, #412]	@ (8005960 <StartManageBodyParts+0x28c>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[1]++;
 80057c6:	4b64      	ldr	r3, [pc, #400]	@ (8005958 <StartManageBodyParts+0x284>)
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	3301      	adds	r3, #1
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	4b62      	ldr	r3, [pc, #392]	@ (8005958 <StartManageBodyParts+0x284>)
 80057d0:	705a      	strb	r2, [r3, #1]
				break;
 80057d2:	e013      	b.n	80057fc <StartManageBodyParts+0x128>
			case Left:
				headPart = HeadLeft;
 80057d4:	4b62      	ldr	r3, [pc, #392]	@ (8005960 <StartManageBodyParts+0x28c>)
 80057d6:	2202      	movs	r2, #2
 80057d8:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[0]--;
 80057da:	4b5f      	ldr	r3, [pc, #380]	@ (8005958 <StartManageBodyParts+0x284>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	3b01      	subs	r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005958 <StartManageBodyParts+0x284>)
 80057e4:	701a      	strb	r2, [r3, #0]
				break;
 80057e6:	e009      	b.n	80057fc <StartManageBodyParts+0x128>
			case Right:
				headPart = HeadRight;
 80057e8:	4b5d      	ldr	r3, [pc, #372]	@ (8005960 <StartManageBodyParts+0x28c>)
 80057ea:	2203      	movs	r2, #3
 80057ec:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[0]++;
 80057ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005958 <StartManageBodyParts+0x284>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	4b58      	ldr	r3, [pc, #352]	@ (8005958 <StartManageBodyParts+0x284>)
 80057f8:	701a      	strb	r2, [r3, #0]
				break;
 80057fa:	bf00      	nop
			}

			// on vérifie si on est mort
			if (snakeHeadPosition[0] >= GRID_SIZE_X || snakeHeadPosition[1] >= GRID_SIZE_Y || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0)
 80057fc:	4b56      	ldr	r3, [pc, #344]	@ (8005958 <StartManageBodyParts+0x284>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b0e      	cmp	r3, #14
 8005802:	d803      	bhi.n	800580c <StartManageBodyParts+0x138>
 8005804:	4b54      	ldr	r3, [pc, #336]	@ (8005958 <StartManageBodyParts+0x284>)
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b07      	cmp	r3, #7
 800580a:	d903      	bls.n	8005814 <StartManageBodyParts+0x140>
			{
				// On a touché un mur
				gameOver = 1;
 800580c:	4b4d      	ldr	r3, [pc, #308]	@ (8005944 <StartManageBodyParts+0x270>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e01f      	b.n	8005854 <StartManageBodyParts+0x180>
			}
			else
			{
				for (int i = 0; i < snakeSize; i++)
 8005814:	2300      	movs	r3, #0
 8005816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005818:	e016      	b.n	8005848 <StartManageBodyParts+0x174>
				{
					if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1])
 800581a:	4b4f      	ldr	r3, [pc, #316]	@ (8005958 <StartManageBodyParts+0x284>)
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	4951      	ldr	r1, [pc, #324]	@ (8005964 <StartManageBodyParts+0x290>)
 8005820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005822:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8005826:	429a      	cmp	r2, r3
 8005828:	d10b      	bne.n	8005842 <StartManageBodyParts+0x16e>
 800582a:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <StartManageBodyParts+0x284>)
 800582c:	785a      	ldrb	r2, [r3, #1]
 800582e:	494d      	ldr	r1, [pc, #308]	@ (8005964 <StartManageBodyParts+0x290>)
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	440b      	add	r3, r1
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	429a      	cmp	r2, r3
 800583a:	d102      	bne.n	8005842 <StartManageBodyParts+0x16e>
					{
						// On a touché notre corps
						gameOver = 1;
 800583c:	4b41      	ldr	r3, [pc, #260]	@ (8005944 <StartManageBodyParts+0x270>)
 800583e:	2201      	movs	r2, #1
 8005840:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < snakeSize; i++)
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	3301      	adds	r3, #1
 8005846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005848:	4b47      	ldr	r3, [pc, #284]	@ (8005968 <StartManageBodyParts+0x294>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005850:	4293      	cmp	r3, r2
 8005852:	dbe2      	blt.n	800581a <StartManageBodyParts+0x146>
				}
			}
			// Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

			// On vérifie si on a mangé la pomme avant de bouger le corps et la queue
			appleEaten = 0;
 8005854:	4b45      	ldr	r3, [pc, #276]	@ (800596c <StartManageBodyParts+0x298>)
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < NB_APPLES; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585e:	e10d      	b.n	8005a7c <StartManageBodyParts+0x3a8>
			{
				if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1])
 8005860:	4b3d      	ldr	r3, [pc, #244]	@ (8005958 <StartManageBodyParts+0x284>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	4a42      	ldr	r2, [pc, #264]	@ (8005970 <StartManageBodyParts+0x29c>)
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 800586e:	4299      	cmp	r1, r3
 8005870:	f040 8101 	bne.w	8005a76 <StartManageBodyParts+0x3a2>
 8005874:	4b38      	ldr	r3, [pc, #224]	@ (8005958 <StartManageBodyParts+0x284>)
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	4619      	mov	r1, r3
 800587a:	4a3d      	ldr	r2, [pc, #244]	@ (8005970 <StartManageBodyParts+0x29c>)
 800587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005886:	4299      	cmp	r1, r3
 8005888:	f040 80f5 	bne.w	8005a76 <StartManageBodyParts+0x3a2>
				{
					snakeSize++;
 800588c:	4b36      	ldr	r3, [pc, #216]	@ (8005968 <StartManageBodyParts+0x294>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	b2da      	uxtb	r2, r3
 8005894:	4b34      	ldr	r3, [pc, #208]	@ (8005968 <StartManageBodyParts+0x294>)
 8005896:	701a      	strb	r2, [r3, #0]
					appleEaten = 1;
 8005898:	4b34      	ldr	r3, [pc, #208]	@ (800596c <StartManageBodyParts+0x298>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

					// On augmente la vitesse de 1Hz a chaque palier
					for (int i = 0; i < NB_PALIERS; i++)
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a2:	e011      	b.n	80058c8 <StartManageBodyParts+0x1f4>
					{
						if (snakeSize == palierIncreaseSpeed[i])
 80058a4:	4a33      	ldr	r2, [pc, #204]	@ (8005974 <StartManageBodyParts+0x2a0>)
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	4413      	add	r3, r2
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005968 <StartManageBodyParts+0x294>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d106      	bne.n	80058c2 <StartManageBodyParts+0x1ee>
						{
							speed++;
 80058b4:	4b22      	ldr	r3, [pc, #136]	@ (8005940 <StartManageBodyParts+0x26c>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4b20      	ldr	r3, [pc, #128]	@ (8005940 <StartManageBodyParts+0x26c>)
 80058be:	701a      	strb	r2, [r3, #0]
							break;
 80058c0:	e005      	b.n	80058ce <StartManageBodyParts+0x1fa>
					for (int i = 0; i < NB_PALIERS; i++)
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	3301      	adds	r3, #1
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	ddea      	ble.n	80058a4 <StartManageBodyParts+0x1d0>
						}
					}

					// On ajoute un bodyPart à la queue
					for (int i = snakeSize - 1; i > 0; i--)
 80058ce:	4b26      	ldr	r3, [pc, #152]	@ (8005968 <StartManageBodyParts+0x294>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	e020      	b.n	800591a <StartManageBodyParts+0x246>
					{
						snakeBodyParts[i] = snakeBodyParts[i - 1];
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	3b01      	subs	r3, #1
 80058dc:	4a26      	ldr	r2, [pc, #152]	@ (8005978 <StartManageBodyParts+0x2a4>)
 80058de:	5cd1      	ldrb	r1, [r2, r3]
 80058e0:	4a25      	ldr	r2, [pc, #148]	@ (8005978 <StartManageBodyParts+0x2a4>)
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4413      	add	r3, r2
 80058e6:	460a      	mov	r2, r1
 80058e8:	701a      	strb	r2, [r3, #0]
						snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <StartManageBodyParts+0x290>)
 80058f0:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80058f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <StartManageBodyParts+0x290>)
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	3b01      	subs	r3, #1
 8005900:	4a18      	ldr	r2, [pc, #96]	@ (8005964 <StartManageBodyParts+0x290>)
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	7859      	ldrb	r1, [r3, #1]
 8005908:	4a16      	ldr	r2, [pc, #88]	@ (8005964 <StartManageBodyParts+0x290>)
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	460a      	mov	r2, r1
 8005912:	705a      	strb	r2, [r3, #1]
					for (int i = snakeSize - 1; i > 0; i--)
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	3b01      	subs	r3, #1
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	dcdb      	bgt.n	80058d8 <StartManageBodyParts+0x204>

					// On met a jour le premier bodyPart
					uint8_t backX;
					uint8_t backY;

					if (snakeSize > 1)
 8005920:	4b11      	ldr	r3, [pc, #68]	@ (8005968 <StartManageBodyParts+0x294>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d929      	bls.n	800597c <StartManageBodyParts+0x2a8>
					{
						backX = snakeBodyPosition[0][0];
 8005928:	4b0e      	ldr	r3, [pc, #56]	@ (8005964 <StartManageBodyParts+0x290>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	77fb      	strb	r3, [r7, #31]
						backY = snakeBodyPosition[0][1];
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <StartManageBodyParts+0x290>)
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	77bb      	strb	r3, [r7, #30]
 8005934:	e028      	b.n	8005988 <StartManageBodyParts+0x2b4>
 8005936:	bf00      	nop
 8005938:	408f4000 	.word	0x408f4000
 800593c:	10624dd3 	.word	0x10624dd3
 8005940:	20000030 	.word	0x20000030
 8005944:	20000ab0 	.word	0x20000ab0
 8005948:	20000aac 	.word	0x20000aac
 800594c:	20000aa8 	.word	0x20000aa8
 8005950:	2000003c 	.word	0x2000003c
 8005954:	20000ba4 	.word	0x20000ba4
 8005958:	20000038 	.word	0x20000038
 800595c:	20000a24 	.word	0x20000a24
 8005960:	20000a25 	.word	0x20000a25
 8005964:	20000ab4 	.word	0x20000ab4
 8005968:	20000aa0 	.word	0x20000aa0
 800596c:	20000aa4 	.word	0x20000aa4
 8005970:	20000ba8 	.word	0x20000ba8
 8005974:	08022fb0 	.word	0x08022fb0
 8005978:	20000a28 	.word	0x20000a28
					}
					else
					{
						backX = snakeTailPosition[0];
 800597c:	4ba6      	ldr	r3, [pc, #664]	@ (8005c18 <StartManageBodyParts+0x544>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	77fb      	strb	r3, [r7, #31]
						backY = snakeTailPosition[1];
 8005982:	4ba5      	ldr	r3, [pc, #660]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	77bb      	strb	r3, [r7, #30]
					}

					// Trouve le type de bodyPart à mettre
					snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8005988:	4ba4      	ldr	r3, [pc, #656]	@ (8005c1c <StartManageBodyParts+0x548>)
 800598a:	7818      	ldrb	r0, [r3, #0]
 800598c:	4ba3      	ldr	r3, [pc, #652]	@ (8005c1c <StartManageBodyParts+0x548>)
 800598e:	7859      	ldrb	r1, [r3, #1]
 8005990:	7a3b      	ldrb	r3, [r7, #8]
 8005992:	7a7a      	ldrb	r2, [r7, #9]
 8005994:	7fbd      	ldrb	r5, [r7, #30]
 8005996:	7ffc      	ldrb	r4, [r7, #31]
 8005998:	9201      	str	r2, [sp, #4]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	462b      	mov	r3, r5
 800599e:	4622      	mov	r2, r4
 80059a0:	f7fe f8b2 	bl	8003b08 <whatBodyPart>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	4b9d      	ldr	r3, [pc, #628]	@ (8005c20 <StartManageBodyParts+0x54c>)
 80059aa:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][0] = oldHeadPosition[0];
 80059ac:	7a3a      	ldrb	r2, [r7, #8]
 80059ae:	4b9d      	ldr	r3, [pc, #628]	@ (8005c24 <StartManageBodyParts+0x550>)
 80059b0:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][1] = oldHeadPosition[1];
 80059b2:	7a7a      	ldrb	r2, [r7, #9]
 80059b4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c24 <StartManageBodyParts+0x550>)
 80059b6:	705a      	strb	r2, [r3, #1]

					// Si on a de la place pour une nouvelle pomme
					uint8_t NBFreeCells = GRID_SIZE_X * GRID_SIZE_Y - snakeSize - 1;
 80059b8:	4b9b      	ldr	r3, [pc, #620]	@ (8005c28 <StartManageBodyParts+0x554>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 80059c0:	74fb      	strb	r3, [r7, #19]
					if (NBFreeCells > NB_APPLES)
 80059c2:	7cfb      	ldrb	r3, [r7, #19]
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d94b      	bls.n	8005a60 <StartManageBodyParts+0x38c>
					{
						// On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
						do
						{
							applePosition[i][0] = rand() % GRID_SIZE_X;
 80059c8:	f010 fa12 	bl	8015df0 <rand>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b97      	ldr	r3, [pc, #604]	@ (8005c2c <StartManageBodyParts+0x558>)
 80059d0:	fb83 1302 	smull	r1, r3, r3, r2
 80059d4:	4413      	add	r3, r2
 80059d6:	10d9      	asrs	r1, r3, #3
 80059d8:	17d3      	asrs	r3, r2, #31
 80059da:	1ac9      	subs	r1, r1, r3
 80059dc:	460b      	mov	r3, r1
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a5b      	subs	r3, r3, r1
 80059e2:	1ad1      	subs	r1, r2, r3
 80059e4:	b249      	sxtb	r1, r1
 80059e6:	4a92      	ldr	r2, [pc, #584]	@ (8005c30 <StartManageBodyParts+0x55c>)
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
							applePosition[i][1] = rand() % GRID_SIZE_Y;
 80059ee:	f010 f9ff 	bl	8015df0 <rand>
 80059f2:	4603      	mov	r3, r0
 80059f4:	425a      	negs	r2, r3
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	f002 0207 	and.w	r2, r2, #7
 80059fe:	bf58      	it	pl
 8005a00:	4253      	negpl	r3, r2
 8005a02:	b259      	sxtb	r1, r3
 8005a04:	4a8a      	ldr	r2, [pc, #552]	@ (8005c30 <StartManageBodyParts+0x55c>)
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	705a      	strb	r2, [r3, #1]
						} while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8005a10:	4a87      	ldr	r2, [pc, #540]	@ (8005c30 <StartManageBodyParts+0x55c>)
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4985      	ldr	r1, [pc, #532]	@ (8005c30 <StartManageBodyParts+0x55c>)
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	440b      	add	r3, r1
 8005a22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe f8ce 	bl	8003bcc <isSnakePosition>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1c8      	bne.n	80059c8 <StartManageBodyParts+0x2f4>
 8005a36:	4a7e      	ldr	r2, [pc, #504]	@ (8005c30 <StartManageBodyParts+0x55c>)
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005a3e:	b2d8      	uxtb	r0, r3
 8005a40:	4a7b      	ldr	r2, [pc, #492]	@ (8005c30 <StartManageBodyParts+0x55c>)
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	4413      	add	r3, r2
 8005a48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	f7fe f906 	bl	8003c64 <isApplePosition>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1b4      	bne.n	80059c8 <StartManageBodyParts+0x2f4>
 8005a5e:	e00a      	b.n	8005a76 <StartManageBodyParts+0x3a2>
					}
					else
					{
						applePosition[i][0] = -1;
 8005a60:	4a73      	ldr	r2, [pc, #460]	@ (8005c30 <StartManageBodyParts+0x55c>)
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	21ff      	movs	r1, #255	@ 0xff
 8005a66:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						applePosition[i][1] = -1;
 8005a6a:	4a71      	ldr	r2, [pc, #452]	@ (8005c30 <StartManageBodyParts+0x55c>)
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	22ff      	movs	r2, #255	@ 0xff
 8005a74:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i < NB_APPLES; i++)
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	3301      	adds	r3, #1
 8005a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	f77f aeee 	ble.w	8005860 <StartManageBodyParts+0x18c>
					}
				}
			}

			// On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
			if (!appleEaten)
 8005a84:	4b6b      	ldr	r3, [pc, #428]	@ (8005c34 <StartManageBodyParts+0x560>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 811d 	bne.w	8005cc8 <StartManageBodyParts+0x5f4>
			{
				// on met a jour la position de la queue
				if (snakeSize > 0)
 8005a8e:	4b66      	ldr	r3, [pc, #408]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d011      	beq.n	8005aba <StartManageBodyParts+0x3e6>
				{
					snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8005a96:	4b64      	ldr	r3, [pc, #400]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	4a61      	ldr	r2, [pc, #388]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005a9e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005aa4:	701a      	strb	r2, [r3, #0]
					snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8005aa6:	4b60      	ldr	r3, [pc, #384]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a5d      	ldr	r2, [pc, #372]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	785a      	ldrb	r2, [r3, #1]
 8005ab4:	4b58      	ldr	r3, [pc, #352]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005ab6:	705a      	strb	r2, [r3, #1]
 8005ab8:	e005      	b.n	8005ac6 <StartManageBodyParts+0x3f2>
				}
				else
				{
					snakeTailPosition[0] = oldHeadPosition[0];
 8005aba:	7a3a      	ldrb	r2, [r7, #8]
 8005abc:	4b56      	ldr	r3, [pc, #344]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005abe:	701a      	strb	r2, [r3, #0]
					snakeTailPosition[1] = oldHeadPosition[1];
 8005ac0:	7a7a      	ldrb	r2, [r7, #9]
 8005ac2:	4b55      	ldr	r3, [pc, #340]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005ac4:	705a      	strb	r2, [r3, #1]
				}

				// On avance le corps
				for (int i = snakeSize - 1; i > 0; i--)
 8005ac6:	4b58      	ldr	r3, [pc, #352]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	e020      	b.n	8005b12 <StartManageBodyParts+0x43e>
				{
					snakeBodyParts[i] = snakeBodyParts[i - 1];
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	4a52      	ldr	r2, [pc, #328]	@ (8005c20 <StartManageBodyParts+0x54c>)
 8005ad6:	5cd1      	ldrb	r1, [r2, r3]
 8005ad8:	4a51      	ldr	r2, [pc, #324]	@ (8005c20 <StartManageBodyParts+0x54c>)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	4413      	add	r3, r2
 8005ade:	460a      	mov	r2, r1
 8005ae0:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005ae8:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8005aec:	4a4d      	ldr	r2, [pc, #308]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	4a4a      	ldr	r2, [pc, #296]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4413      	add	r3, r2
 8005afe:	7859      	ldrb	r1, [r3, #1]
 8005b00:	4a48      	ldr	r2, [pc, #288]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	460a      	mov	r2, r1
 8005b0a:	705a      	strb	r2, [r3, #1]
				for (int i = snakeSize - 1; i > 0; i--)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	dcdb      	bgt.n	8005ad0 <StartManageBodyParts+0x3fc>
				}

				// On met a jour le corps
				if (snakeSize > 0)
 8005b18:	4b43      	ldr	r3, [pc, #268]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80b3 	beq.w	8005c88 <StartManageBodyParts+0x5b4>
				{
					// On trouve le type de bodyPart à mettre juste derrière la tête
					snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8005b22:	4b3e      	ldr	r3, [pc, #248]	@ (8005c1c <StartManageBodyParts+0x548>)
 8005b24:	7818      	ldrb	r0, [r3, #0]
 8005b26:	4b3d      	ldr	r3, [pc, #244]	@ (8005c1c <StartManageBodyParts+0x548>)
 8005b28:	7859      	ldrb	r1, [r3, #1]
 8005b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005b2c:	781c      	ldrb	r4, [r3, #0]
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005b30:	785d      	ldrb	r5, [r3, #1]
 8005b32:	7a3b      	ldrb	r3, [r7, #8]
 8005b34:	7a7a      	ldrb	r2, [r7, #9]
 8005b36:	9201      	str	r2, [sp, #4]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	462b      	mov	r3, r5
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	f7fd ffe3 	bl	8003b08 <whatBodyPart>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <StartManageBodyParts+0x54c>)
 8005b48:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][0] = oldHeadPosition[0];
 8005b4a:	7a3a      	ldrb	r2, [r7, #8]
 8005b4c:	4b35      	ldr	r3, [pc, #212]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005b4e:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][1] = oldHeadPosition[1];
 8005b50:	7a7a      	ldrb	r2, [r7, #9]
 8005b52:	4b34      	ldr	r3, [pc, #208]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005b54:	705a      	strb	r2, [r3, #1]

					// On met a jour le l'orientation de la queue
					switch (snakeBodyParts[snakeSize - 1])
 8005b56:	4b34      	ldr	r3, [pc, #208]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	4a30      	ldr	r2, [pc, #192]	@ (8005c20 <StartManageBodyParts+0x54c>)
 8005b5e:	5cd3      	ldrb	r3, [r2, r3]
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	f200 80b1 	bhi.w	8005cc8 <StartManageBodyParts+0x5f4>
 8005b66:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <StartManageBodyParts+0x498>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b85 	.word	0x08005b85
 8005b70:	08005ba9 	.word	0x08005ba9
 8005b74:	08005bcd 	.word	0x08005bcd
 8005b78:	08005bf3 	.word	0x08005bf3
 8005b7c:	08005c3d 	.word	0x08005c3d
 8005b80:	08005c63 	.word	0x08005c63
					{
					case BottomLeft:
						// TailTop ou TailRight
						if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0])
 8005b84:	4b28      	ldr	r3, [pc, #160]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	4a26      	ldr	r2, [pc, #152]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005b8c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005b90:	4b21      	ldr	r3, [pc, #132]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d103      	bne.n	8005ba0 <StartManageBodyParts+0x4cc>
						{
							tailPart = TailTop;
 8005b98:	4b27      	ldr	r3, [pc, #156]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailRight;
						}
						break;
 8005b9e:	e093      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
							tailPart = TailRight;
 8005ba0:	4b25      	ldr	r3, [pc, #148]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	701a      	strb	r2, [r3, #0]
						break;
 8005ba6:	e08f      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					case BottomRight:
						// TailBottom ou TailLeft
						if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0])
 8005ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005bb0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005bb4:	4b18      	ldr	r3, [pc, #96]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d103      	bne.n	8005bc4 <StartManageBodyParts+0x4f0>
						{
							tailPart = TailTop;
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailLeft;
						}
						break;
 8005bc2:	e081      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
							tailPart = TailLeft;
 8005bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	701a      	strb	r2, [r3, #0]
						break;
 8005bca:	e07d      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					case BottomTop:
						// TailTop ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1])
 8005bcc:	4b16      	ldr	r3, [pc, #88]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	4a14      	ldr	r2, [pc, #80]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	785a      	ldrb	r2, [r3, #1]
 8005bda:	4b0f      	ldr	r3, [pc, #60]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d203      	bcs.n	8005bea <StartManageBodyParts+0x516>
						{
							tailPart = TailTop;
 8005be2:	4b15      	ldr	r3, [pc, #84]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005be8:	e06e      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
							tailPart = TailBottom;
 8005bea:	4b13      	ldr	r3, [pc, #76]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	701a      	strb	r2, [r3, #0]
						break;
 8005bf0:	e06a      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					case LeftRight:
						// TailRight ou TailLeft
						if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0])
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <StartManageBodyParts+0x554>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <StartManageBodyParts+0x550>)
 8005bfa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <StartManageBodyParts+0x544>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d203      	bcs.n	8005c0e <StartManageBodyParts+0x53a>
						{
							tailPart = TailLeft;
 8005c06:	4b0c      	ldr	r3, [pc, #48]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005c08:	2202      	movs	r2, #2
 8005c0a:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailRight;
						}
						break;
 8005c0c:	e05c      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
							tailPart = TailRight;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c38 <StartManageBodyParts+0x564>)
 8005c10:	2203      	movs	r2, #3
 8005c12:	701a      	strb	r2, [r3, #0]
						break;
 8005c14:	e058      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
 8005c16:	bf00      	nop
 8005c18:	2000003c 	.word	0x2000003c
 8005c1c:	20000038 	.word	0x20000038
 8005c20:	20000a28 	.word	0x20000a28
 8005c24:	20000ab4 	.word	0x20000ab4
 8005c28:	20000aa0 	.word	0x20000aa0
 8005c2c:	88888889 	.word	0x88888889
 8005c30:	20000ba8 	.word	0x20000ba8
 8005c34:	20000aa4 	.word	0x20000aa4
 8005c38:	20000031 	.word	0x20000031
					case LeftTop:
						// TailRight ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1])
 8005c3c:	4b26      	ldr	r3, [pc, #152]	@ (8005cd8 <StartManageBodyParts+0x604>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	4a26      	ldr	r2, [pc, #152]	@ (8005cdc <StartManageBodyParts+0x608>)
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	4413      	add	r3, r2
 8005c48:	785a      	ldrb	r2, [r3, #1]
 8005c4a:	4b25      	ldr	r3, [pc, #148]	@ (8005ce0 <StartManageBodyParts+0x60c>)
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d103      	bne.n	8005c5a <StartManageBodyParts+0x586>
						{
							tailPart = TailRight;
 8005c52:	4b24      	ldr	r3, [pc, #144]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005c54:	2203      	movs	r2, #3
 8005c56:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005c58:	e036      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
							tailPart = TailBottom;
 8005c5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
						break;
 8005c60:	e032      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					case RightTop:
						// TailLeft ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1])
 8005c62:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <StartManageBodyParts+0x604>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	4a1c      	ldr	r2, [pc, #112]	@ (8005cdc <StartManageBodyParts+0x608>)
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	4413      	add	r3, r2
 8005c6e:	785a      	ldrb	r2, [r3, #1]
 8005c70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <StartManageBodyParts+0x60c>)
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d103      	bne.n	8005c80 <StartManageBodyParts+0x5ac>
						{
							tailPart = TailLeft;
 8005c78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005c7e:	e023      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
							tailPart = TailBottom;
 8005c80:	4b18      	ldr	r3, [pc, #96]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
						break;
 8005c86:	e01f      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					}
				}
				else
				{
					switch (headPart)
 8005c88:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <StartManageBodyParts+0x614>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d81b      	bhi.n	8005cc8 <StartManageBodyParts+0x5f4>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <StartManageBodyParts+0x5c4>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005cb1 	.word	0x08005cb1
 8005ca0:	08005cb9 	.word	0x08005cb9
 8005ca4:	08005cc1 	.word	0x08005cc1
					{
					case HeadTop:
						tailPart = TailTop;
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
						break;
 8005cae:	e00b      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					case HeadBottom:
						tailPart = TailBottom;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
						break;
 8005cb6:	e007      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					case HeadLeft:
						tailPart = TailLeft;
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005cba:	2202      	movs	r2, #2
 8005cbc:	701a      	strb	r2, [r3, #0]
						break;
 8005cbe:	e003      	b.n	8005cc8 <StartManageBodyParts+0x5f4>
					case HeadRight:
						tailPart = TailRight;
 8005cc0:	4b08      	ldr	r3, [pc, #32]	@ (8005ce4 <StartManageBodyParts+0x610>)
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	701a      	strb	r2, [r3, #0]
						break;
 8005cc6:	bf00      	nop
					}
				}
			}
		}

		vTaskDelayUntil(&xLastWakeTime, delay);
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	6979      	ldr	r1, [r7, #20]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f00e fb08 	bl	80142e4 <vTaskDelayUntil>
		delay = pdMS_TO_TICKS(1000. / speed);
 8005cd4:	e521      	b.n	800571a <StartManageBodyParts+0x46>
 8005cd6:	bf00      	nop
 8005cd8:	20000aa0 	.word	0x20000aa0
 8005cdc:	20000ab4 	.word	0x20000ab4
 8005ce0:	2000003c 	.word	0x2000003c
 8005ce4:	20000031 	.word	0x20000031
 8005ce8:	20000a25 	.word	0x20000a25

08005cec <StartTsHandler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTsHandler */
void StartTsHandler(void const *argument)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTsHandler */
	/* Infinite loop */
	for (;;)
	{
		if (!gameStarted)
 8005cf4:	4b29      	ldr	r3, [pc, #164]	@ (8005d9c <StartTsHandler+0xb0>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <StartTsHandler+0x14>
			rand();
 8005cfc:	f010 f878 	bl	8015df0 <rand>

		BSP_TS_GetState(&TS_State);
 8005d00:	4827      	ldr	r0, [pc, #156]	@ (8005da0 <StartTsHandler+0xb4>)
 8005d02:	f001 ff71 	bl	8007be8 <BSP_TS_GetState>

		if (!TS_State.touchDetected && screenPressed)
 8005d06:	4b26      	ldr	r3, [pc, #152]	@ (8005da0 <StartTsHandler+0xb4>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d136      	bne.n	8005d7c <StartTsHandler+0x90>
 8005d0e:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <StartTsHandler+0xb8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d032      	beq.n	8005d7c <StartTsHandler+0x90>
		{
			if (gameOver)
 8005d16:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <StartTsHandler+0xbc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <StartTsHandler+0x3e>
			{
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d1e:	4823      	ldr	r0, [pc, #140]	@ (8005dac <StartTsHandler+0xc0>)
 8005d20:	f000 fff2 	bl	8006d08 <BSP_LCD_Clear>
				restartGame();
 8005d24:	f7fe f84c 	bl	8003dc0 <restartGame>
 8005d28:	e028      	b.n	8005d7c <StartTsHandler+0x90>
			}
			else if (gamePaused)
 8005d2a:	4b21      	ldr	r3, [pc, #132]	@ (8005db0 <StartTsHandler+0xc4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d014      	beq.n	8005d5c <StartTsHandler+0x70>
			{
				xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8005d32:	4b20      	ldr	r3, [pc, #128]	@ (8005db4 <StartTsHandler+0xc8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f04f 31ff 	mov.w	r1, #4294967295
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f00d fdfa 	bl	8013934 <xQueueSemaphoreTake>
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d40:	481a      	ldr	r0, [pc, #104]	@ (8005dac <StartTsHandler+0xc0>)
 8005d42:	f000 ffe1 	bl	8006d08 <BSP_LCD_Clear>
				xSemaphoreGive(displayMutexHandle);
 8005d46:	4b1b      	ldr	r3, [pc, #108]	@ (8005db4 <StartTsHandler+0xc8>)
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f00d fac2 	bl	80132d8 <xQueueGenericSend>
				gamePaused = 0;
 8005d54:	4b16      	ldr	r3, [pc, #88]	@ (8005db0 <StartTsHandler+0xc4>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e00f      	b.n	8005d7c <StartTsHandler+0x90>
			}
			else if (!gameStarted)
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <StartTsHandler+0xb0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d108      	bne.n	8005d76 <StartTsHandler+0x8a>
			{
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d64:	4811      	ldr	r0, [pc, #68]	@ (8005dac <StartTsHandler+0xc0>)
 8005d66:	f000 ffcf 	bl	8006d08 <BSP_LCD_Clear>
				restartGame();
 8005d6a:	f7fe f829 	bl	8003dc0 <restartGame>
				gameStarted = 1;
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d9c <StartTsHandler+0xb0>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e002      	b.n	8005d7c <StartTsHandler+0x90>
			}
			else
			{
				gamePaused = 1;
 8005d76:	4b0e      	ldr	r3, [pc, #56]	@ (8005db0 <StartTsHandler+0xc4>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
			}
		}

		if (TS_State.touchDetected)
 8005d7c:	4b08      	ldr	r3, [pc, #32]	@ (8005da0 <StartTsHandler+0xb4>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <StartTsHandler+0xa0>
		{
			screenPressed = 1;
 8005d84:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <StartTsHandler+0xb8>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <StartTsHandler+0xa6>
		}
		else
		{
			screenPressed = 0;
 8005d8c:	4b05      	ldr	r3, [pc, #20]	@ (8005da4 <StartTsHandler+0xb8>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
		}

		osDelay(10);
 8005d92:	200a      	movs	r0, #10
 8005d94:	f00c fe78 	bl	8012a88 <osDelay>
		if (!gameStarted)
 8005d98:	e7ac      	b.n	8005cf4 <StartTsHandler+0x8>
 8005d9a:	bf00      	nop
 8005d9c:	20000aa8 	.word	0x20000aa8
 8005da0:	200009ec 	.word	0x200009ec
 8005da4:	20000a18 	.word	0x20000a18
 8005da8:	20000ab0 	.word	0x20000ab0
 8005dac:	ff81cd4b 	.word	0xff81cd4b
 8005db0:	20000aac 	.word	0x20000aac
 8005db4:	20000974 	.word	0x20000974

08005db8 <StartPlaySongTask>:
 * @brief Function implementing the playSongTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPlaySongTask */
void StartPlaySongTask(void const *argument) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
    uint32_t bytesread;
    
    /* Infinite loop */
    for (;;) {
        // On attend le signal de réveil
        xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8005dc0:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <StartPlaySongTask+0x54>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f107 0113 	add.w	r1, r7, #19
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f00d fcc9 	bl	8013764 <xQueueReceive>
        
        // On arrive ici si la musique est terminée
        if (blockPointer++ == numberOfBlocks - 1) {
 8005dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e10 <StartPlaySongTask+0x58>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	490d      	ldr	r1, [pc, #52]	@ (8005e10 <StartPlaySongTask+0x58>)
 8005dda:	600a      	str	r2, [r1, #0]
 8005ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e14 <StartPlaySongTask+0x5c>)
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	3a01      	subs	r2, #1
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <StartPlaySongTask+0x32>
            loadWav();
 8005de6:	f7fe f96b 	bl	80040c0 <loadWav>
        }
        
        // On détermine la position du buffer à remplir
        uint8_t *bufferPosition = (i == 0) ? AUDIO_BUFFER_OUT : (AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE);
 8005dea:	7cfb      	ldrb	r3, [r7, #19]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <StartPlaySongTask+0x3c>
 8005df0:	4b09      	ldr	r3, [pc, #36]	@ (8005e18 <StartPlaySongTask+0x60>)
 8005df2:	e000      	b.n	8005df6 <StartPlaySongTask+0x3e>
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <StartPlaySongTask+0x64>)
 8005df6:	617b      	str	r3, [r7, #20]
        
        // On lit le bloc de données
        f_read(&SDFile, bufferPosition, AUDIO_BLOCK_SIZE, (void *)&bytesread);
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	4807      	ldr	r0, [pc, #28]	@ (8005e20 <StartPlaySongTask+0x68>)
 8005e04:	f7fc fec7 	bl	8002b96 <f_read>
    for (;;) {
 8005e08:	e7da      	b.n	8005dc0 <StartPlaySongTask+0x8>
 8005e0a:	bf00      	nop
 8005e0c:	20000970 	.word	0x20000970
 8005e10:	2000097c 	.word	0x2000097c
 8005e14:	20000978 	.word	0x20000978
 8005e18:	c007fc00 	.word	0xc007fc00
 8005e1c:	c007fe00 	.word	0xc007fe00
 8005e20:	200012ec 	.word	0x200012ec

08005e24 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8005e36:	f004 fc51 	bl	800a6dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40001000 	.word	0x40001000

08005e48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e4c:	b672      	cpsid	i
}
 8005e4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8005e50:	bf00      	nop
 8005e52:	e7fd      	b.n	8005e50 <Error_Handler+0x8>

08005e54 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08c      	sub	sp, #48	@ 0x30
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a51      	ldr	r2, [pc, #324]	@ (8005fa4 <I2Cx_MspInit+0x150>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d14d      	bne.n	8005f00 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005e64:	4b50      	ldr	r3, [pc, #320]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e68:	4a4f      	ldr	r2, [pc, #316]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e70:	4b4d      	ldr	r3, [pc, #308]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8005e7c:	2380      	movs	r3, #128	@ 0x80
 8005e7e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005e80:	2312      	movs	r3, #18
 8005e82:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005e90:	f107 031c 	add.w	r3, r7, #28
 8005e94:	4619      	mov	r1, r3
 8005e96:	4845      	ldr	r0, [pc, #276]	@ (8005fac <I2Cx_MspInit+0x158>)
 8005e98:	f005 ffd0 	bl	800be3c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005ea2:	f107 031c 	add.w	r3, r7, #28
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4840      	ldr	r0, [pc, #256]	@ (8005fac <I2Cx_MspInit+0x158>)
 8005eaa:	f005 ffc7 	bl	800be3c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8005eae:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	4a3d      	ldr	r2, [pc, #244]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005eb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eba:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005ec6:	4b38      	ldr	r3, [pc, #224]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	4a37      	ldr	r2, [pc, #220]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ed0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8005ed2:	4b35      	ldr	r3, [pc, #212]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	4a34      	ldr	r2, [pc, #208]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005ed8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005edc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8005ede:	2200      	movs	r2, #0
 8005ee0:	210f      	movs	r1, #15
 8005ee2:	2048      	movs	r0, #72	@ 0x48
 8005ee4:	f005 f8f0 	bl	800b0c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005ee8:	2048      	movs	r0, #72	@ 0x48
 8005eea:	f005 f909 	bl	800b100 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	210f      	movs	r1, #15
 8005ef2:	2049      	movs	r0, #73	@ 0x49
 8005ef4:	f005 f8e8 	bl	800b0c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005ef8:	2049      	movs	r0, #73	@ 0x49
 8005efa:	f005 f901 	bl	800b100 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8005efe:	e04d      	b.n	8005f9c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005f00:	4b29      	ldr	r3, [pc, #164]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f04:	4a28      	ldr	r2, [pc, #160]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f0c:	4b26      	ldr	r3, [pc, #152]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f1c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005f1e:	2312      	movs	r3, #18
 8005f20:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005f26:	2302      	movs	r3, #2
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005f2a:	2304      	movs	r3, #4
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005f2e:	f107 031c 	add.w	r3, r7, #28
 8005f32:	4619      	mov	r1, r3
 8005f34:	481e      	ldr	r0, [pc, #120]	@ (8005fb0 <I2Cx_MspInit+0x15c>)
 8005f36:	f005 ff81 	bl	800be3c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005f40:	f107 031c 	add.w	r3, r7, #28
 8005f44:	4619      	mov	r1, r3
 8005f46:	481a      	ldr	r0, [pc, #104]	@ (8005fb0 <I2Cx_MspInit+0x15c>)
 8005f48:	f005 ff78 	bl	800be3c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005f4c:	4b16      	ldr	r3, [pc, #88]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f58:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8005f64:	4b10      	ldr	r3, [pc, #64]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	4a0f      	ldr	r2, [pc, #60]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f6e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005f70:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa8 <I2Cx_MspInit+0x154>)
 8005f76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f7a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	210f      	movs	r1, #15
 8005f80:	201f      	movs	r0, #31
 8005f82:	f005 f8a1 	bl	800b0c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8005f86:	201f      	movs	r0, #31
 8005f88:	f005 f8ba 	bl	800b100 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	210f      	movs	r1, #15
 8005f90:	2020      	movs	r0, #32
 8005f92:	f005 f899 	bl	800b0c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005f96:	2020      	movs	r0, #32
 8005f98:	f005 f8b2 	bl	800b100 <HAL_NVIC_EnableIRQ>
}
 8005f9c:	bf00      	nop
 8005f9e:	3730      	adds	r7, #48	@ 0x30
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000bb0 	.word	0x20000bb0
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	40021c00 	.word	0x40021c00
 8005fb0:	40020400 	.word	0x40020400

08005fb4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f006 fd29 	bl	800ca14 <HAL_I2C_GetState>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d125      	bne.n	8006014 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a14      	ldr	r2, [pc, #80]	@ (800601c <I2Cx_Init+0x68>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d103      	bne.n	8005fd8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a13      	ldr	r2, [pc, #76]	@ (8006020 <I2Cx_Init+0x6c>)
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e002      	b.n	8005fde <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a12      	ldr	r2, [pc, #72]	@ (8006024 <I2Cx_Init+0x70>)
 8005fdc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a11      	ldr	r2, [pc, #68]	@ (8006028 <I2Cx_Init+0x74>)
 8005fe2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ff23 	bl	8005e54 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f006 f9fe 	bl	800c410 <HAL_I2C_Init>
  }
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000bb0 	.word	0x20000bb0
 8006020:	40005c00 	.word	0x40005c00
 8006024:	40005400 	.word	0x40005400
 8006028:	40912732 	.word	0x40912732

0800602c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	@ 0x28
 8006030:	af04      	add	r7, sp, #16
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	4603      	mov	r3, r0
 800603c:	72fb      	strb	r3, [r7, #11]
 800603e:	460b      	mov	r3, r1
 8006040:	813b      	strh	r3, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	b299      	uxth	r1, r3
 800604e:	88f8      	ldrh	r0, [r7, #6]
 8006050:	893a      	ldrh	r2, [r7, #8]
 8006052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006056:	9302      	str	r3, [sp, #8]
 8006058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	4603      	mov	r3, r0
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f006 fbbc 	bl	800c7e0 <HAL_I2C_Mem_Read>
 8006068:	4603      	mov	r3, r0
 800606a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	4619      	mov	r1, r3
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f832 	bl	80060e0 <I2Cx_Error>
  }
  return status;    
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b08a      	sub	sp, #40	@ 0x28
 800608a:	af04      	add	r7, sp, #16
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	461a      	mov	r2, r3
 8006094:	4603      	mov	r3, r0
 8006096:	72fb      	strb	r3, [r7, #11]
 8006098:	460b      	mov	r3, r1
 800609a:	813b      	strh	r3, [r7, #8]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80060a4:	7afb      	ldrb	r3, [r7, #11]
 80060a6:	b299      	uxth	r1, r3
 80060a8:	88f8      	ldrh	r0, [r7, #6]
 80060aa:	893a      	ldrh	r2, [r7, #8]
 80060ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060b0:	9302      	str	r3, [sp, #8]
 80060b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4603      	mov	r3, r0
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f006 fa7b 	bl	800c5b8 <HAL_I2C_Mem_Write>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80060cc:	7afb      	ldrb	r3, [r7, #11]
 80060ce:	4619      	mov	r1, r3
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f805 	bl	80060e0 <I2Cx_Error>
  }
  return status;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f006 fa1f 	bl	800c530 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff ff5e 	bl	8005fb4 <I2Cx_Init>
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8006104:	4802      	ldr	r0, [pc, #8]	@ (8006110 <AUDIO_IO_Init+0x10>)
 8006106:	f7ff ff55 	bl	8005fb4 <I2Cx_Init>
}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000bb0 	.word	0x20000bb0

08006114 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
}
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af02      	add	r7, sp, #8
 800612a:	4603      	mov	r3, r0
 800612c:	71fb      	strb	r3, [r7, #7]
 800612e:	460b      	mov	r3, r1
 8006130:	80bb      	strh	r3, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8006136:	887b      	ldrh	r3, [r7, #2]
 8006138:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800613a:	89fb      	ldrh	r3, [r7, #14]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	b29b      	uxth	r3, r3
 8006140:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8006142:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	b21a      	sxth	r2, r3
 800614a:	887b      	ldrh	r3, [r7, #2]
 800614c:	b21b      	sxth	r3, r3
 800614e:	4313      	orrs	r3, r2
 8006150:	b21b      	sxth	r3, r3
 8006152:	b29b      	uxth	r3, r3
 8006154:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8006156:	88ba      	ldrh	r2, [r7, #4]
 8006158:	79f9      	ldrb	r1, [r7, #7]
 800615a:	2302      	movs	r3, #2
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	1cbb      	adds	r3, r7, #2
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2302      	movs	r3, #2
 8006164:	4803      	ldr	r0, [pc, #12]	@ (8006174 <AUDIO_IO_Write+0x50>)
 8006166:	f7ff ff8e 	bl	8006086 <I2Cx_WriteMultiple>
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000bb0 	.word	0x20000bb0

08006178 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af02      	add	r7, sp, #8
 800617e:	4603      	mov	r3, r0
 8006180:	460a      	mov	r2, r1
 8006182:	71fb      	strb	r3, [r7, #7]
 8006184:	4613      	mov	r3, r2
 8006186:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	81bb      	strh	r3, [r7, #12]
 800618c:	2300      	movs	r3, #0
 800618e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8006190:	88ba      	ldrh	r2, [r7, #4]
 8006192:	79f9      	ldrb	r1, [r7, #7]
 8006194:	2302      	movs	r3, #2
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f107 030c 	add.w	r3, r7, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2302      	movs	r3, #2
 80061a0:	480a      	ldr	r0, [pc, #40]	@ (80061cc <AUDIO_IO_Read+0x54>)
 80061a2:	f7ff ff43 	bl	800602c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80061a6:	89bb      	ldrh	r3, [r7, #12]
 80061a8:	0a1b      	lsrs	r3, r3, #8
 80061aa:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80061ac:	89bb      	ldrh	r3, [r7, #12]
 80061ae:	b21b      	sxth	r3, r3
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	b21a      	sxth	r2, r3
 80061b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	b21b      	sxth	r3, r3
 80061bc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80061be:	89fb      	ldrh	r3, [r7, #14]
 80061c0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80061c2:	89bb      	ldrh	r3, [r7, #12]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000bb0 	.word	0x20000bb0

080061d0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f004 fa9f 	bl	800a71c <HAL_Delay>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80061ec:	4802      	ldr	r0, [pc, #8]	@ (80061f8 <TS_IO_Init+0x10>)
 80061ee:	f7ff fee1 	bl	8005fb4 <I2Cx_Init>
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000bb0 	.word	0x20000bb0

080061fc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af02      	add	r7, sp, #8
 8006202:	4603      	mov	r3, r0
 8006204:	71fb      	strb	r3, [r7, #7]
 8006206:	460b      	mov	r3, r1
 8006208:	71bb      	strb	r3, [r7, #6]
 800620a:	4613      	mov	r3, r2
 800620c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800620e:	79bb      	ldrb	r3, [r7, #6]
 8006210:	b29a      	uxth	r2, r3
 8006212:	79f9      	ldrb	r1, [r7, #7]
 8006214:	2301      	movs	r3, #1
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	1d7b      	adds	r3, r7, #5
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	2301      	movs	r3, #1
 800621e:	4803      	ldr	r0, [pc, #12]	@ (800622c <TS_IO_Write+0x30>)
 8006220:	f7ff ff31 	bl	8006086 <I2Cx_WriteMultiple>
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000bb0 	.word	0x20000bb0

08006230 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af02      	add	r7, sp, #8
 8006236:	4603      	mov	r3, r0
 8006238:	460a      	mov	r2, r1
 800623a:	71fb      	strb	r3, [r7, #7]
 800623c:	4613      	mov	r3, r2
 800623e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006244:	79bb      	ldrb	r3, [r7, #6]
 8006246:	b29a      	uxth	r2, r3
 8006248:	79f9      	ldrb	r1, [r7, #7]
 800624a:	2301      	movs	r3, #1
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	f107 030f 	add.w	r3, r7, #15
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	2301      	movs	r3, #1
 8006256:	4804      	ldr	r0, [pc, #16]	@ (8006268 <TS_IO_Read+0x38>)
 8006258:	f7ff fee8 	bl	800602c <I2Cx_ReadMultiple>

  return read_value;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000bb0 	.word	0x20000bb0

0800626c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f004 fa51 	bl	800a71c <HAL_Delay>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <BSP_AUDIO_OUT_Play+0x4c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	b292      	uxth	r2, r2
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	2034      	movs	r0, #52	@ 0x34
 800629c:	4798      	blx	r3
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e00f      	b.n	80062c8 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062ae:	d203      	bcs.n	80062b8 <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	e001      	b.n	80062bc <BSP_AUDIO_OUT_Play+0x38>
 80062b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062bc:	461a      	mov	r2, r3
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4804      	ldr	r0, [pc, #16]	@ (80062d4 <BSP_AUDIO_OUT_Play+0x50>)
 80062c2:	f008 fed3 	bl	800f06c <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 80062c6:	2300      	movs	r3, #0
	}
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000c04 	.word	0x20000c04
 80062d4:	20000c08 	.word	0x20000c08

080062d8 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 80062e2:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	79fa      	ldrb	r2, [r7, #7]
 80062ea:	4611      	mov	r1, r2
 80062ec:	2034      	movs	r0, #52	@ 0x34
 80062ee:	4798      	blx	r3
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80062fa:	2300      	movs	r3, #0
	}
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000c04 	.word	0x20000c04

08006308 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8006310:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b0b      	ldr	r3, [pc, #44]	@ (8006344 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800631e:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8006320:	4a08      	ldr	r2, [pc, #32]	@ (8006344 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_SAI_Init(&haudio_out_sai);
 8006326:	4807      	ldr	r0, [pc, #28]	@ (8006344 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006328:	f008 fcec 	bl	800ed04 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b04      	ldr	r3, [pc, #16]	@ (8006344 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800633a:	601a      	str	r2, [r3, #0]
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000c08 	.word	0x20000c08

08006348 <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 8006350:	f7fe feb4 	bl	80050bc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8006364:	f7fe febc 	bl	80050e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8006378:	480e      	ldr	r0, [pc, #56]	@ (80063b4 <HAL_SAI_ErrorCallback+0x44>)
 800637a:	f008 ff27 	bl	800f1cc <HAL_SAI_GetState>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8006382:	480d      	ldr	r0, [pc, #52]	@ (80063b8 <HAL_SAI_ErrorCallback+0x48>)
 8006384:	f008 ff22 	bl	800f1cc <HAL_SAI_GetState>
 8006388:	4603      	mov	r3, r0
 800638a:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d002      	beq.n	8006398 <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b12      	cmp	r3, #18
 8006396:	d101      	bne.n	800639c <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 8006398:	f000 f810 	bl	80063bc <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d002      	beq.n	80063a8 <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	2b22      	cmp	r3, #34	@ 0x22
 80063a6:	d101      	bne.n	80063ac <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 80063a8:	f000 f9be 	bl	8006728 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20000c08 	.word	0x20000c08
 80063b8:	20000c8c 	.word	0x20000c8c

080063bc <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
}
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	@ 0x30
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 80063d6:	4b63      	ldr	r3, [pc, #396]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80063d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063da:	4a62      	ldr	r2, [pc, #392]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80063dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80063e2:	4b60      	ldr	r3, [pc, #384]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80063e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 80063ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80063f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80063fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8006406:	4b57      	ldr	r3, [pc, #348]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640a:	4a56      	ldr	r2, [pc, #344]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006410:	6313      	str	r3, [r2, #48]	@ 0x30
 8006412:	4b54      	ldr	r3, [pc, #336]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 800641e:	4b51      	ldr	r3, [pc, #324]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	4a50      	ldr	r2, [pc, #320]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006428:	6313      	str	r3, [r2, #48]	@ 0x30
 800642a:	4b4e      	ldr	r3, [pc, #312]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8006436:	2380      	movs	r3, #128	@ 0x80
 8006438:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800643a:	2302      	movs	r3, #2
 800643c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800643e:	2300      	movs	r3, #0
 8006440:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006442:	2303      	movs	r3, #3
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8006446:	230a      	movs	r3, #10
 8006448:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800644a:	f107 031c 	add.w	r3, r7, #28
 800644e:	4619      	mov	r1, r3
 8006450:	4845      	ldr	r0, [pc, #276]	@ (8006568 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8006452:	f005 fcf3 	bl	800be3c <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8006456:	2320      	movs	r3, #32
 8006458:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800645a:	2302      	movs	r3, #2
 800645c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006462:	2303      	movs	r3, #3
 8006464:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8006466:	230a      	movs	r3, #10
 8006468:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800646a:	f107 031c 	add.w	r3, r7, #28
 800646e:	4619      	mov	r1, r3
 8006470:	483d      	ldr	r0, [pc, #244]	@ (8006568 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8006472:	f005 fce3 	bl	800be3c <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 8006476:	2340      	movs	r3, #64	@ 0x40
 8006478:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800647a:	2302      	movs	r3, #2
 800647c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006482:	2303      	movs	r3, #3
 8006484:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8006486:	230a      	movs	r3, #10
 8006488:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800648a:	f107 031c 	add.w	r3, r7, #28
 800648e:	4619      	mov	r1, r3
 8006490:	4835      	ldr	r0, [pc, #212]	@ (8006568 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8006492:	f005 fcd3 	bl	800be3c <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8006496:	2310      	movs	r3, #16
 8006498:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800649a:	2302      	movs	r3, #2
 800649c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80064a2:	2303      	movs	r3, #3
 80064a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80064a6:	230a      	movs	r3, #10
 80064a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80064aa:	f107 031c 	add.w	r3, r7, #28
 80064ae:	4619      	mov	r1, r3
 80064b0:	482d      	ldr	r0, [pc, #180]	@ (8006568 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80064b2:	f005 fcc3 	bl	800be3c <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80064b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80064c2:	4b28      	ldr	r3, [pc, #160]	@ (8006564 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a26      	ldr	r2, [pc, #152]	@ (800656c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d138      	bne.n	800654a <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80064d8:	4b25      	ldr	r3, [pc, #148]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80064da:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80064de:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064e0:	4b23      	ldr	r3, [pc, #140]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80064e2:	2240      	movs	r2, #64	@ 0x40
 80064e4:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064e6:	4b22      	ldr	r3, [pc, #136]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064ec:	4b20      	ldr	r3, [pc, #128]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80064ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064f2:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 80064f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80064f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064fa:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80064fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80064fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006502:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8006504:	4b1a      	ldr	r3, [pc, #104]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800650a:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800650c:	4b18      	ldr	r3, [pc, #96]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800650e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006512:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006514:	4b16      	ldr	r3, [pc, #88]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006516:	2204      	movs	r2, #4
 8006518:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800651a:	4b15      	ldr	r3, [pc, #84]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800651c:	2203      	movs	r2, #3
 800651e:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006520:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006522:	2200      	movs	r2, #0
 8006524:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006526:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800652c:	4b10      	ldr	r3, [pc, #64]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800652e:	4a11      	ldr	r2, [pc, #68]	@ (8006574 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8006530:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a0e      	ldr	r2, [pc, #56]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006536:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006538:	4a0d      	ldr	r2, [pc, #52]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 800653e:	480c      	ldr	r0, [pc, #48]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006540:	f004 fe9a 	bl	800b278 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 8006544:	480a      	ldr	r0, [pc, #40]	@ (8006570 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006546:	f004 fde9 	bl	800b11c <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800654a:	2200      	movs	r2, #0
 800654c:	210e      	movs	r1, #14
 800654e:	203c      	movs	r0, #60	@ 0x3c
 8006550:	f004 fdba 	bl	800b0c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8006554:	203c      	movs	r0, #60	@ 0x3c
 8006556:	f004 fdd3 	bl	800b100 <HAL_NVIC_EnableIRQ>
}
 800655a:	bf00      	nop
 800655c:	3730      	adds	r7, #48	@ 0x30
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	40022000 	.word	0x40022000
 800656c:	40015c04 	.word	0x40015c04
 8006570:	20000d10 	.word	0x20000d10
 8006574:	40026470 	.word	0x40026470

08006578 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b0a6      	sub	sp, #152	@ 0x98
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006584:	f107 0314 	add.w	r3, r7, #20
 8006588:	4618      	mov	r0, r3
 800658a:	f008 f96f 	bl	800e86c <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <BSP_AUDIO_OUT_ClockConfig+0x34>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d112      	bne.n	80065d2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80065ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80065b0:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80065b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80065b6:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80065b8:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80065bc:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80065be:	2302      	movs	r3, #2
 80065c0:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80065c2:	2313      	movs	r3, #19
 80065c4:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	4618      	mov	r0, r3
 80065cc:	f007 fd5e 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 80065d0:	e012      	b.n	80065f8 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80065d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80065d6:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80065d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80065dc:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80065de:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80065e2:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80065e4:	2307      	movs	r3, #7
 80065e6:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80065e8:	2301      	movs	r3, #1
 80065ea:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80065ec:	f107 0314 	add.w	r3, r7, #20
 80065f0:	4618      	mov	r0, r3
 80065f2:	f007 fd4b 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
	}
}
 80065f6:	bf00      	nop
 80065f8:	bf00      	nop
 80065fa:	3798      	adds	r7, #152	@ 0x98
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006604:	4b07      	ldr	r3, [pc, #28]	@ (8006624 <SAIx_Out_DeInit+0x24>)
 8006606:	4a08      	ldr	r2, [pc, #32]	@ (8006628 <SAIx_Out_DeInit+0x28>)
 8006608:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 800660a:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <SAIx_Out_DeInit+0x24>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b04      	ldr	r3, [pc, #16]	@ (8006624 <SAIx_Out_DeInit+0x24>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006618:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 800661a:	4802      	ldr	r0, [pc, #8]	@ (8006624 <SAIx_Out_DeInit+0x24>)
 800661c:	f008 fcf0 	bl	800f000 <HAL_SAI_DeInit>
}
 8006620:	bf00      	nop
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000c08 	.word	0x20000c08
 8006628:	40015c04 	.word	0x40015c04

0800662c <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b089      	sub	sp, #36	@ 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60ba      	str	r2, [r7, #8]
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	4603      	mov	r3, r0
 8006638:	81fb      	strh	r3, [r7, #14]
 800663a:	460b      	mov	r3, r1
 800663c:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8006646:	89fb      	ldrh	r3, [r7, #14]
 8006648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800664c:	d006      	beq.n	800665c <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 800664e:	89fb      	ldrh	r3, [r7, #14]
 8006650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006654:	d002      	beq.n	800665c <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e054      	b.n	8006706 <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 800665c:	f000 f9d4 	bl	8006a08 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 8006660:	f7ff ffce 	bl	8006600 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8006664:	2200      	movs	r2, #0
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4829      	ldr	r0, [pc, #164]	@ (8006710 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800666a:	f7ff ff85 	bl	8006578 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800666e:	4b28      	ldr	r3, [pc, #160]	@ (8006710 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8006670:	4a28      	ldr	r2, [pc, #160]	@ (8006714 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8006672:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 8006674:	4826      	ldr	r0, [pc, #152]	@ (8006710 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8006676:	f008 fda9 	bl	800f1cc <HAL_SAI_GetState>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8006680:	2100      	movs	r1, #0
 8006682:	4823      	ldr	r0, [pc, #140]	@ (8006710 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8006684:	f000 f858 	bl	8006738 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006688:	4b23      	ldr	r3, [pc, #140]	@ (8006718 <BSP_AUDIO_IN_OUT_Init+0xec>)
 800668a:	4a24      	ldr	r2, [pc, #144]	@ (800671c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 800668c:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 800668e:	4822      	ldr	r0, [pc, #136]	@ (8006718 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8006690:	f008 fd9c 	bl	800f1cc <HAL_SAI_GetState>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800669a:	2100      	movs	r1, #0
 800669c:	481e      	ldr	r0, [pc, #120]	@ (8006718 <BSP_AUDIO_IN_OUT_Init+0xec>)
 800669e:	f7ff fe95 	bl	80063cc <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a8:	d102      	bne.n	80066b0 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80066aa:	230a      	movs	r3, #10
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e001      	b.n	80066b4 <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80066b0:	2305      	movs	r3, #5
 80066b2:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	69b9      	ldr	r1, [r7, #24]
 80066b8:	2000      	movs	r0, #0
 80066ba:	f000 f8ef 	bl	800689c <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80066be:	4b18      	ldr	r3, [pc, #96]	@ (8006720 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2034      	movs	r0, #52	@ 0x34
 80066c4:	4798      	blx	r3
 80066c6:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f648 1294 	movw	r2, #35220	@ 0x8994
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d109      	bne.n	80066e6 <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80066d2:	4b13      	ldr	r3, [pc, #76]	@ (8006720 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80066d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d6:	2034      	movs	r0, #52	@ 0x34
 80066d8:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 80066da:	4b12      	ldr	r3, [pc, #72]	@ (8006724 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 80066dc:	4a10      	ldr	r2, [pc, #64]	@ (8006720 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80066de:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e001      	b.n	80066ea <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 80066ea:	7ffb      	ldrb	r3, [r7, #31]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 80066f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681c      	ldr	r4, [r3, #0]
 80066f6:	89fa      	ldrh	r2, [r7, #14]
 80066f8:	89bb      	ldrh	r3, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	b299      	uxth	r1, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2264      	movs	r2, #100	@ 0x64
 8006702:	2034      	movs	r0, #52	@ 0x34
 8006704:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 8006706:	7ffb      	ldrb	r3, [r7, #31]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3724      	adds	r7, #36	@ 0x24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd90      	pop	{r4, r7, pc}
 8006710:	20000c8c 	.word	0x20000c8c
 8006714:	40015c24 	.word	0x40015c24
 8006718:	20000c08 	.word	0x20000c08
 800671c:	40015c04 	.word	0x40015c04
 8006720:	20000058 	.word	0x20000058
 8006724:	20000c04 	.word	0x20000c04

08006728 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 800672c:	bf00      	nop
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b08c      	sub	sp, #48	@ 0x30
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 8006742:	4b50      	ldr	r3, [pc, #320]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006746:	4a4f      	ldr	r2, [pc, #316]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006748:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800674c:	6453      	str	r3, [r2, #68]	@ 0x44
 800674e:	4b4d      	ldr	r3, [pc, #308]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 800675a:	4b4a      	ldr	r3, [pc, #296]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	4a49      	ldr	r2, [pc, #292]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006764:	6313      	str	r3, [r2, #48]	@ 0x30
 8006766:	4b47      	ldr	r3, [pc, #284]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006776:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006778:	2302      	movs	r3, #2
 800677a:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800677c:	2300      	movs	r3, #0
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006780:	2302      	movs	r3, #2
 8006782:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8006784:	230a      	movs	r3, #10
 8006786:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8006788:	f107 031c 	add.w	r3, r7, #28
 800678c:	4619      	mov	r1, r3
 800678e:	483e      	ldr	r0, [pc, #248]	@ (8006888 <BSP_AUDIO_IN_MspInit+0x150>)
 8006790:	f005 fb54 	bl	800be3c <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8006794:	4b3b      	ldr	r3, [pc, #236]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006798:	4a3a      	ldr	r2, [pc, #232]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 800679a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679e:	6313      	str	r3, [r2, #48]	@ 0x30
 80067a0:	4b38      	ldr	r3, [pc, #224]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80067ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067b0:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80067b2:	2300      	movs	r3, #0
 80067b4:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80067ba:	2302      	movs	r3, #2
 80067bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80067be:	f107 031c 	add.w	r3, r7, #28
 80067c2:	4619      	mov	r1, r3
 80067c4:	4831      	ldr	r0, [pc, #196]	@ (800688c <BSP_AUDIO_IN_MspInit+0x154>)
 80067c6:	f005 fb39 	bl	800be3c <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80067ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80067d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80067d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006884 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006890 <BSP_AUDIO_IN_MspInit+0x158>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d137      	bne.n	800685c <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80067ec:	4b29      	ldr	r3, [pc, #164]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067f2:	4b28      	ldr	r3, [pc, #160]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067f8:	4b26      	ldr	r3, [pc, #152]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067fe:	4b25      	ldr	r3, [pc, #148]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006804:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 8006806:	4b23      	ldr	r3, [pc, #140]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006808:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800680c:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800680e:	4b21      	ldr	r3, [pc, #132]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006814:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8006816:	4b1f      	ldr	r3, [pc, #124]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800681c:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800681e:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006820:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006824:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006826:	4b1b      	ldr	r3, [pc, #108]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006828:	2200      	movs	r2, #0
 800682a:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800682c:	4b19      	ldr	r3, [pc, #100]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 800682e:	2203      	movs	r2, #3
 8006830:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006832:	4b18      	ldr	r3, [pc, #96]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006834:	2200      	movs	r2, #0
 8006836:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8006838:	4b16      	ldr	r3, [pc, #88]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800683e:	4b15      	ldr	r3, [pc, #84]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006840:	4a15      	ldr	r2, [pc, #84]	@ (8006898 <BSP_AUDIO_IN_MspInit+0x160>)
 8006842:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a13      	ldr	r2, [pc, #76]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006848:	671a      	str	r2, [r3, #112]	@ 0x70
 800684a:	4a12      	ldr	r2, [pc, #72]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8006850:	4810      	ldr	r0, [pc, #64]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006852:	f004 fd11 	bl	800b278 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 8006856:	480f      	ldr	r0, [pc, #60]	@ (8006894 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006858:	f004 fc60 	bl	800b11c <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800685c:	2200      	movs	r2, #0
 800685e:	210f      	movs	r1, #15
 8006860:	2046      	movs	r0, #70	@ 0x46
 8006862:	f004 fc31 	bl	800b0c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006866:	2046      	movs	r0, #70	@ 0x46
 8006868:	f004 fc4a 	bl	800b100 <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800686c:	2200      	movs	r2, #0
 800686e:	210f      	movs	r1, #15
 8006870:	2028      	movs	r0, #40	@ 0x28
 8006872:	f004 fc29 	bl	800b0c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8006876:	2028      	movs	r0, #40	@ 0x28
 8006878:	f004 fc42 	bl	800b100 <HAL_NVIC_EnableIRQ>
}
 800687c:	bf00      	nop
 800687e:	3730      	adds	r7, #48	@ 0x30
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40023800 	.word	0x40023800
 8006888:	40021800 	.word	0x40021800
 800688c:	40021c00 	.word	0x40021c00
 8006890:	40015c24 	.word	0x40015c24
 8006894:	20000d70 	.word	0x20000d70
 8006898:	400264b8 	.word	0x400264b8

0800689c <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80068a8:	4b53      	ldr	r3, [pc, #332]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068aa:	4a54      	ldr	r2, [pc, #336]	@ (80069fc <SAIx_In_Init+0x160>)
 80068ac:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 80068ae:	4b52      	ldr	r3, [pc, #328]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4b50      	ldr	r3, [pc, #320]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80068bc:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80068be:	4a4e      	ldr	r2, [pc, #312]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 80068c4:	4a4c      	ldr	r2, [pc, #304]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80068ca:	4b4b      	ldr	r3, [pc, #300]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80068d0:	4b49      	ldr	r3, [pc, #292]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80068d6:	4b48      	ldr	r3, [pc, #288]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068d8:	2280      	movs	r2, #128	@ 0x80
 80068da:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80068dc:	4b46      	ldr	r3, [pc, #280]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80068e2:	4b45      	ldr	r3, [pc, #276]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80068e8:	4b43      	ldr	r3, [pc, #268]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80068ee:	4b42      	ldr	r3, [pc, #264]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068f4:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80068f6:	4b40      	ldr	r3, [pc, #256]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 80068fc:	4b3e      	ldr	r3, [pc, #248]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80068fe:	2240      	movs	r2, #64	@ 0x40
 8006900:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8006902:	4b3d      	ldr	r3, [pc, #244]	@ (80069f8 <SAIx_In_Init+0x15c>)
 8006904:	2220      	movs	r2, #32
 8006906:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8006908:	4b3b      	ldr	r3, [pc, #236]	@ (80069f8 <SAIx_In_Init+0x15c>)
 800690a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800690e:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006910:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <SAIx_In_Init+0x15c>)
 8006912:	2200      	movs	r2, #0
 8006914:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006916:	4b38      	ldr	r3, [pc, #224]	@ (80069f8 <SAIx_In_Init+0x15c>)
 8006918:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800691c:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800691e:	4b36      	ldr	r3, [pc, #216]	@ (80069f8 <SAIx_In_Init+0x15c>)
 8006920:	2200      	movs	r2, #0
 8006922:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006924:	4b34      	ldr	r3, [pc, #208]	@ (80069f8 <SAIx_In_Init+0x15c>)
 8006926:	2200      	movs	r2, #0
 8006928:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 800692a:	4b33      	ldr	r3, [pc, #204]	@ (80069f8 <SAIx_In_Init+0x15c>)
 800692c:	2204      	movs	r2, #4
 800692e:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8006930:	4a31      	ldr	r2, [pc, #196]	@ (80069f8 <SAIx_In_Init+0x15c>)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_out_sai);
 8006936:	4830      	ldr	r0, [pc, #192]	@ (80069f8 <SAIx_In_Init+0x15c>)
 8006938:	f008 f9e4 	bl	800ed04 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800693c:	4b30      	ldr	r3, [pc, #192]	@ (8006a00 <SAIx_In_Init+0x164>)
 800693e:	4a31      	ldr	r2, [pc, #196]	@ (8006a04 <SAIx_In_Init+0x168>)
 8006940:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8006942:	4b2f      	ldr	r3, [pc, #188]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4b2d      	ldr	r3, [pc, #180]	@ (8006a00 <SAIx_In_Init+0x164>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006950:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8006952:	4a2b      	ldr	r2, [pc, #172]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8006958:	4b29      	ldr	r3, [pc, #164]	@ (8006a00 <SAIx_In_Init+0x164>)
 800695a:	2203      	movs	r2, #3
 800695c:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800695e:	4b28      	ldr	r3, [pc, #160]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006960:	2200      	movs	r2, #0
 8006962:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8006964:	4b26      	ldr	r3, [pc, #152]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800696a:	4b25      	ldr	r3, [pc, #148]	@ (8006a00 <SAIx_In_Init+0x164>)
 800696c:	2280      	movs	r2, #128	@ 0x80
 800696e:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006970:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006972:	2200      	movs	r2, #0
 8006974:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8006976:	4b22      	ldr	r3, [pc, #136]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006978:	2201      	movs	r2, #1
 800697a:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800697c:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <SAIx_In_Init+0x164>)
 800697e:	2201      	movs	r2, #1
 8006980:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8006982:	4b1f      	ldr	r3, [pc, #124]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006984:	2200      	movs	r2, #0
 8006986:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006988:	4b1d      	ldr	r3, [pc, #116]	@ (8006a00 <SAIx_In_Init+0x164>)
 800698a:	2201      	movs	r2, #1
 800698c:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 800698e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006990:	2240      	movs	r2, #64	@ 0x40
 8006992:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8006994:	4b1a      	ldr	r3, [pc, #104]	@ (8006a00 <SAIx_In_Init+0x164>)
 8006996:	2220      	movs	r2, #32
 8006998:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800699a:	4b19      	ldr	r3, [pc, #100]	@ (8006a00 <SAIx_In_Init+0x164>)
 800699c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80069a0:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80069a2:	4b17      	ldr	r3, [pc, #92]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80069a8:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80069ae:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80069b0:	4b13      	ldr	r3, [pc, #76]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80069b6:	4b12      	ldr	r3, [pc, #72]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 80069bc:	4b10      	ldr	r3, [pc, #64]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069be:	2204      	movs	r2, #4
 80069c0:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80069c2:	4a0f      	ldr	r2, [pc, #60]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_in_sai);
 80069c8:	480d      	ldr	r0, [pc, #52]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069ca:	f008 f99b 	bl	800ed04 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 80069ce:	4b0a      	ldr	r3, [pc, #40]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <SAIx_In_Init+0x15c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80069dc:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 80069de:	4b08      	ldr	r3, [pc, #32]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <SAIx_In_Init+0x164>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80069ec:	601a      	str	r2, [r3, #0]
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000c08 	.word	0x20000c08
 80069fc:	40015c04 	.word	0x40015c04
 8006a00:	20000c8c 	.word	0x20000c8c
 8006a04:	40015c24 	.word	0x40015c24

08006a08 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006a0c:	4b07      	ldr	r3, [pc, #28]	@ (8006a2c <SAIx_In_DeInit+0x24>)
 8006a0e:	4a08      	ldr	r2, [pc, #32]	@ (8006a30 <SAIx_In_DeInit+0x28>)
 8006a10:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8006a12:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <SAIx_In_DeInit+0x24>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <SAIx_In_DeInit+0x24>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a20:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 8006a22:	4802      	ldr	r0, [pc, #8]	@ (8006a2c <SAIx_In_DeInit+0x24>)
 8006a24:	f008 faec 	bl	800f000 <HAL_SAI_DeInit>
}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000c8c 	.word	0x20000c8c
 8006a30:	40015c24 	.word	0x40015c24

08006a34 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006a38:	4b31      	ldr	r3, [pc, #196]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a3a:	2228      	movs	r2, #40	@ 0x28
 8006a3c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006a3e:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a40:	2209      	movs	r2, #9
 8006a42:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006a44:	4b2e      	ldr	r3, [pc, #184]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a46:	2235      	movs	r2, #53	@ 0x35
 8006a48:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a4c:	220b      	movs	r2, #11
 8006a4e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006a50:	4b2b      	ldr	r3, [pc, #172]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a52:	f240 121b 	movw	r2, #283	@ 0x11b
 8006a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006a58:	4b29      	ldr	r3, [pc, #164]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a5a:	f240 2215 	movw	r2, #533	@ 0x215
 8006a5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006a60:	4b27      	ldr	r3, [pc, #156]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a62:	f240 121d 	movw	r2, #285	@ 0x11d
 8006a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a6a:	f240 2235 	movw	r2, #565	@ 0x235
 8006a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006a70:	2100      	movs	r1, #0
 8006a72:	4823      	ldr	r0, [pc, #140]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a74:	f000 fd5e 	bl	8007534 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006a78:	4b21      	ldr	r3, [pc, #132]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a7a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006a80:	4b1f      	ldr	r3, [pc, #124]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a82:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8006a86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006a88:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006a90:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006a98:	4b19      	ldr	r3, [pc, #100]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006aa0:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006aa6:	4b16      	ldr	r3, [pc, #88]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006aac:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006ab2:	4b13      	ldr	r3, [pc, #76]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006ab8:	4b11      	ldr	r3, [pc, #68]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006aba:	4a12      	ldr	r2, [pc, #72]	@ (8006b04 <BSP_LCD_Init+0xd0>)
 8006abc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006abe:	4810      	ldr	r0, [pc, #64]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006ac0:	f006 fc20 	bl	800d304 <HAL_LTDC_GetState>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006aca:	2100      	movs	r1, #0
 8006acc:	480c      	ldr	r0, [pc, #48]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006ace:	f000 fc57 	bl	8007380 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8006ad2:	480b      	ldr	r0, [pc, #44]	@ (8006b00 <BSP_LCD_Init+0xcc>)
 8006ad4:	f006 fa46 	bl	800cf64 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006ade:	480a      	ldr	r0, [pc, #40]	@ (8006b08 <BSP_LCD_Init+0xd4>)
 8006ae0:	f005 fc7c 	bl	800c3dc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	2108      	movs	r1, #8
 8006ae8:	4808      	ldr	r0, [pc, #32]	@ (8006b0c <BSP_LCD_Init+0xd8>)
 8006aea:	f005 fc77 	bl	800c3dc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006aee:	f000 fe85 	bl	80077fc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006af2:	4807      	ldr	r0, [pc, #28]	@ (8006b10 <BSP_LCD_Init+0xdc>)
 8006af4:	f000 f8d8 	bl	8006ca8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000dd0 	.word	0x20000dd0
 8006b04:	40016800 	.word	0x40016800
 8006b08:	40022000 	.word	0x40022000
 8006b0c:	40022800 	.word	0x40022800
 8006b10:	20000040 	.word	0x20000040

08006b14 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <BSP_LCD_GetXSize+0x20>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a06      	ldr	r2, [pc, #24]	@ (8006b38 <BSP_LCD_GetXSize+0x24>)
 8006b1e:	2134      	movs	r1, #52	@ 0x34
 8006b20:	fb01 f303 	mul.w	r3, r1, r3
 8006b24:	4413      	add	r3, r2
 8006b26:	3360      	adds	r3, #96	@ 0x60
 8006b28:	681b      	ldr	r3, [r3, #0]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000eb8 	.word	0x20000eb8
 8006b38:	20000dd0 	.word	0x20000dd0

08006b3c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006b40:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <BSP_LCD_GetYSize+0x20>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a06      	ldr	r2, [pc, #24]	@ (8006b60 <BSP_LCD_GetYSize+0x24>)
 8006b46:	2134      	movs	r1, #52	@ 0x34
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	3364      	adds	r3, #100	@ 0x64
 8006b50:	681b      	ldr	r3, [r3, #0]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20000eb8 	.word	0x20000eb8
 8006b60:	20000dd0 	.word	0x20000dd0

08006b64 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b090      	sub	sp, #64	@ 0x40
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006b74:	f7ff ffce 	bl	8006b14 <BSP_LCD_GetXSize>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006b80:	f7ff ffdc 	bl	8006b3c <BSP_LCD_GetYSize>
 8006b84:	4603      	mov	r3, r0
 8006b86:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8006b90:	23ff      	movs	r3, #255	@ 0xff
 8006b92:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006baa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006bb0:	2307      	movs	r3, #7
 8006bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006bb4:	f7ff ffae 	bl	8006b14 <BSP_LCD_GetXSize>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8006bbc:	f7ff ffbe 	bl	8006b3c <BSP_LCD_GetYSize>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006bc4:	88fa      	ldrh	r2, [r7, #6]
 8006bc6:	f107 030c 	add.w	r3, r7, #12
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4812      	ldr	r0, [pc, #72]	@ (8006c18 <BSP_LCD_LayerDefaultInit+0xb4>)
 8006bce:	f006 fb5b 	bl	800d288 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	4911      	ldr	r1, [pc, #68]	@ (8006c1c <BSP_LCD_LayerDefaultInit+0xb8>)
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	3304      	adds	r3, #4
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295
 8006be6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006be8:	88fa      	ldrh	r2, [r7, #6]
 8006bea:	490c      	ldr	r1, [pc, #48]	@ (8006c1c <BSP_LCD_LayerDefaultInit+0xb8>)
 8006bec:	4613      	mov	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	4a09      	ldr	r2, [pc, #36]	@ (8006c20 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006bfa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006bfc:	88fa      	ldrh	r2, [r7, #6]
 8006bfe:	4907      	ldr	r1, [pc, #28]	@ (8006c1c <BSP_LCD_LayerDefaultInit+0xb8>)
 8006c00:	4613      	mov	r3, r2
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	3740      	adds	r7, #64	@ 0x40
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000dd0 	.word	0x20000dd0
 8006c1c:	20000ebc 	.word	0x20000ebc
 8006c20:	20000040 	.word	0x20000040

08006c24 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006c2c:	4a04      	ldr	r2, [pc, #16]	@ (8006c40 <BSP_LCD_SelectLayer+0x1c>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]
} 
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000eb8 	.word	0x20000eb8

08006c44 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8006c4c:	4b07      	ldr	r3, [pc, #28]	@ (8006c6c <BSP_LCD_SetTextColor+0x28>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4907      	ldr	r1, [pc, #28]	@ (8006c70 <BSP_LCD_SetTextColor+0x2c>)
 8006c52:	4613      	mov	r3, r2
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000eb8 	.word	0x20000eb8
 8006c70:	20000ebc 	.word	0x20000ebc

08006c74 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006c7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ca0 <BSP_LCD_SetBackColor+0x2c>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	4908      	ldr	r1, [pc, #32]	@ (8006ca4 <BSP_LCD_SetBackColor+0x30>)
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000eb8 	.word	0x20000eb8
 8006ca4:	20000ebc 	.word	0x20000ebc

08006ca8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006cb0:	4b08      	ldr	r3, [pc, #32]	@ (8006cd4 <BSP_LCD_SetFont+0x2c>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4908      	ldr	r1, [pc, #32]	@ (8006cd8 <BSP_LCD_SetFont+0x30>)
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000eb8 	.word	0x20000eb8
 8006cd8:	20000ebc 	.word	0x20000ebc

08006cdc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <BSP_LCD_GetFont+0x24>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4907      	ldr	r1, [pc, #28]	@ (8006d04 <BSP_LCD_GetFont+0x28>)
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	681b      	ldr	r3, [r3, #0]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000eb8 	.word	0x20000eb8
 8006d04:	20000ebc 	.word	0x20000ebc

08006d08 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8006d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006d10:	4b0f      	ldr	r3, [pc, #60]	@ (8006d50 <BSP_LCD_Clear+0x48>)
 8006d12:	681c      	ldr	r4, [r3, #0]
 8006d14:	4b0e      	ldr	r3, [pc, #56]	@ (8006d50 <BSP_LCD_Clear+0x48>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a0e      	ldr	r2, [pc, #56]	@ (8006d54 <BSP_LCD_Clear+0x4c>)
 8006d1a:	2134      	movs	r1, #52	@ 0x34
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	4413      	add	r3, r2
 8006d22:	335c      	adds	r3, #92	@ 0x5c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461e      	mov	r6, r3
 8006d28:	f7ff fef4 	bl	8006b14 <BSP_LCD_GetXSize>
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	f7ff ff05 	bl	8006b3c <BSP_LCD_GetYSize>
 8006d32:	4602      	mov	r2, r0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	462a      	mov	r2, r5
 8006d40:	4631      	mov	r1, r6
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fcca 	bl	80076dc <LL_FillBuffer>
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d50:	20000eb8 	.word	0x20000eb8
 8006d54:	20000dd0 	.word	0x20000dd0

08006d58 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	80fb      	strh	r3, [r7, #6]
 8006d62:	460b      	mov	r3, r1
 8006d64:	80bb      	strh	r3, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd8 <BSP_LCD_DisplayChar+0x80>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	491b      	ldr	r1, [pc, #108]	@ (8006ddc <BSP_LCD_DisplayChar+0x84>)
 8006d70:	4613      	mov	r3, r2
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006d86:	4b14      	ldr	r3, [pc, #80]	@ (8006dd8 <BSP_LCD_DisplayChar+0x80>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4c14      	ldr	r4, [pc, #80]	@ (8006ddc <BSP_LCD_DisplayChar+0x84>)
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4423      	add	r3, r4
 8006d96:	3308      	adds	r3, #8
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006d9c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006da0:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <BSP_LCD_DisplayChar+0x80>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4c0d      	ldr	r4, [pc, #52]	@ (8006ddc <BSP_LCD_DisplayChar+0x84>)
 8006da6:	4613      	mov	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4423      	add	r3, r4
 8006db0:	3308      	adds	r3, #8
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	889b      	ldrh	r3, [r3, #4]
 8006db6:	3307      	adds	r3, #7
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da00      	bge.n	8006dbe <BSP_LCD_DisplayChar+0x66>
 8006dbc:	3307      	adds	r3, #7
 8006dbe:	10db      	asrs	r3, r3, #3
 8006dc0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006dc4:	18ca      	adds	r2, r1, r3
 8006dc6:	88b9      	ldrh	r1, [r7, #4]
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fbce 	bl	800756c <DrawChar>
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd90      	pop	{r4, r7, pc}
 8006dd8:	20000eb8 	.word	0x20000eb8
 8006ddc:	20000ebc 	.word	0x20000ebc

08006de0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006de0:	b5b0      	push	{r4, r5, r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60ba      	str	r2, [r7, #8]
 8006de8:	461a      	mov	r2, r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	81fb      	strh	r3, [r7, #14]
 8006dee:	460b      	mov	r3, r1
 8006df0:	81bb      	strh	r3, [r7, #12]
 8006df2:	4613      	mov	r3, r2
 8006df4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8006df6:	2301      	movs	r3, #1
 8006df8:	83fb      	strh	r3, [r7, #30]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006e0a:	e002      	b.n	8006e12 <BSP_LCD_DisplayStringAt+0x32>
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	617a      	str	r2, [r7, #20]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1f6      	bne.n	8006e0c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006e1e:	f7ff fe79 	bl	8006b14 <BSP_LCD_GetXSize>
 8006e22:	4601      	mov	r1, r0
 8006e24:	4b50      	ldr	r3, [pc, #320]	@ (8006f68 <BSP_LCD_DisplayStringAt+0x188>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4850      	ldr	r0, [pc, #320]	@ (8006f6c <BSP_LCD_DisplayStringAt+0x18c>)
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4403      	add	r3, r0
 8006e34:	3308      	adds	r3, #8
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	889b      	ldrh	r3, [r3, #4]
 8006e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e3e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d01c      	beq.n	8006e80 <BSP_LCD_DisplayStringAt+0xa0>
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	dc33      	bgt.n	8006eb2 <BSP_LCD_DisplayStringAt+0xd2>
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d002      	beq.n	8006e54 <BSP_LCD_DisplayStringAt+0x74>
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d019      	beq.n	8006e86 <BSP_LCD_DisplayStringAt+0xa6>
 8006e52:	e02e      	b.n	8006eb2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	1ad1      	subs	r1, r2, r3
 8006e5a:	4b43      	ldr	r3, [pc, #268]	@ (8006f68 <BSP_LCD_DisplayStringAt+0x188>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4843      	ldr	r0, [pc, #268]	@ (8006f6c <BSP_LCD_DisplayStringAt+0x18c>)
 8006e60:	4613      	mov	r3, r2
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4403      	add	r3, r0
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	889b      	ldrh	r3, [r3, #4]
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	89fb      	ldrh	r3, [r7, #14]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	83fb      	strh	r3, [r7, #30]
      break;
 8006e7e:	e01b      	b.n	8006eb8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8006e80:	89fb      	ldrh	r3, [r7, #14]
 8006e82:	83fb      	strh	r3, [r7, #30]
      break;
 8006e84:	e018      	b.n	8006eb8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	b299      	uxth	r1, r3
 8006e8e:	4b36      	ldr	r3, [pc, #216]	@ (8006f68 <BSP_LCD_DisplayStringAt+0x188>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4836      	ldr	r0, [pc, #216]	@ (8006f6c <BSP_LCD_DisplayStringAt+0x18c>)
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4403      	add	r3, r0
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	889b      	ldrh	r3, [r3, #4]
 8006ea4:	fb11 f303 	smulbb	r3, r1, r3
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	89fb      	ldrh	r3, [r7, #14]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	83fb      	strh	r3, [r7, #30]
      break;
 8006eb0:	e002      	b.n	8006eb8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8006eb2:	89fb      	ldrh	r3, [r7, #14]
 8006eb4:	83fb      	strh	r3, [r7, #30]
      break;
 8006eb6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006eb8:	8bfb      	ldrh	r3, [r7, #30]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <BSP_LCD_DisplayStringAt+0xe6>
 8006ebe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da1d      	bge.n	8006f02 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006eca:	e01a      	b.n	8006f02 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	781a      	ldrb	r2, [r3, #0]
 8006ed0:	89b9      	ldrh	r1, [r7, #12]
 8006ed2:	8bfb      	ldrh	r3, [r7, #30]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff ff3f 	bl	8006d58 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006eda:	4b23      	ldr	r3, [pc, #140]	@ (8006f68 <BSP_LCD_DisplayStringAt+0x188>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4923      	ldr	r1, [pc, #140]	@ (8006f6c <BSP_LCD_DisplayStringAt+0x18c>)
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	3308      	adds	r3, #8
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	889a      	ldrh	r2, [r3, #4]
 8006ef0:	8bfb      	ldrh	r3, [r7, #30]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60bb      	str	r3, [r7, #8]
    i++;
 8006efc:	8bbb      	ldrh	r3, [r7, #28]
 8006efe:	3301      	adds	r3, #1
 8006f00:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bf14      	ite	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	2300      	moveq	r3, #0
 8006f0e:	b2dc      	uxtb	r4, r3
 8006f10:	f7ff fe00 	bl	8006b14 <BSP_LCD_GetXSize>
 8006f14:	8bb9      	ldrh	r1, [r7, #28]
 8006f16:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <BSP_LCD_DisplayStringAt+0x188>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4d14      	ldr	r5, [pc, #80]	@ (8006f6c <BSP_LCD_DisplayStringAt+0x18c>)
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	442b      	add	r3, r5
 8006f26:	3308      	adds	r3, #8
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	889b      	ldrh	r3, [r3, #4]
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	1ac3      	subs	r3, r0, r3
 8006f32:	b299      	uxth	r1, r3
 8006f34:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <BSP_LCD_DisplayStringAt+0x188>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	480c      	ldr	r0, [pc, #48]	@ (8006f6c <BSP_LCD_DisplayStringAt+0x18c>)
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4403      	add	r3, r0
 8006f44:	3308      	adds	r3, #8
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	bf2c      	ite	cs
 8006f4e:	2301      	movcs	r3, #1
 8006f50:	2300      	movcc	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	4023      	ands	r3, r4
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1b7      	bne.n	8006ecc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bdb0      	pop	{r4, r5, r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000eb8 	.word	0x20000eb8
 8006f6c:	20000ebc 	.word	0x20000ebc

08006f70 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	6039      	str	r1, [r7, #0]
 8006f7a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8006f7c:	f7ff feae 	bl	8006cdc <BSP_LCD_GetFont>
 8006f80:	4603      	mov	r3, r0
 8006f82:	88db      	ldrh	r3, [r3, #6]
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	fb12 f303 	smulbb	r3, r2, r3
 8006f8a:	b299      	uxth	r1, r3
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	2000      	movs	r0, #0
 8006f92:	f7ff ff25 	bl	8006de0 <BSP_LCD_DisplayStringAt>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006fa0:	b5b0      	push	{r4, r5, r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	80fb      	strh	r3, [r7, #6]
 8006faa:	460b      	mov	r3, r1
 8006fac:	80bb      	strh	r3, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006fb6:	4b26      	ldr	r3, [pc, #152]	@ (8007050 <BSP_LCD_DrawHLine+0xb0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a26      	ldr	r2, [pc, #152]	@ (8007054 <BSP_LCD_DrawHLine+0xb4>)
 8006fbc:	2134      	movs	r1, #52	@ 0x34
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3348      	adds	r3, #72	@ 0x48
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d114      	bne.n	8006ff6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006fcc:	4b20      	ldr	r3, [pc, #128]	@ (8007050 <BSP_LCD_DrawHLine+0xb0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a20      	ldr	r2, [pc, #128]	@ (8007054 <BSP_LCD_DrawHLine+0xb4>)
 8006fd2:	2134      	movs	r1, #52	@ 0x34
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	335c      	adds	r3, #92	@ 0x5c
 8006fdc:	681c      	ldr	r4, [r3, #0]
 8006fde:	f7ff fd99 	bl	8006b14 <BSP_LCD_GetXSize>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	88bb      	ldrh	r3, [r7, #4]
 8006fe6:	fb03 f202 	mul.w	r2, r3, r2
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	4413      	add	r3, r2
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	4423      	add	r3, r4
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e013      	b.n	800701e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006ff6:	4b16      	ldr	r3, [pc, #88]	@ (8007050 <BSP_LCD_DrawHLine+0xb0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	@ (8007054 <BSP_LCD_DrawHLine+0xb4>)
 8006ffc:	2134      	movs	r1, #52	@ 0x34
 8006ffe:	fb01 f303 	mul.w	r3, r1, r3
 8007002:	4413      	add	r3, r2
 8007004:	335c      	adds	r3, #92	@ 0x5c
 8007006:	681c      	ldr	r4, [r3, #0]
 8007008:	f7ff fd84 	bl	8006b14 <BSP_LCD_GetXSize>
 800700c:	4602      	mov	r2, r0
 800700e:	88bb      	ldrh	r3, [r7, #4]
 8007010:	fb03 f202 	mul.w	r2, r3, r2
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4423      	add	r3, r4
 800701c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800701e:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <BSP_LCD_DrawHLine+0xb0>)
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	887c      	ldrh	r4, [r7, #2]
 8007026:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <BSP_LCD_DrawHLine+0xb0>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	4d0b      	ldr	r5, [pc, #44]	@ (8007058 <BSP_LCD_DrawHLine+0xb8>)
 800702c:	4613      	mov	r3, r2
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	442b      	add	r3, r5
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	2300      	movs	r3, #0
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2301      	movs	r3, #1
 8007040:	4622      	mov	r2, r4
 8007042:	f000 fb4b 	bl	80076dc <LL_FillBuffer>
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bdb0      	pop	{r4, r5, r7, pc}
 800704e:	bf00      	nop
 8007050:	20000eb8 	.word	0x20000eb8
 8007054:	20000dd0 	.word	0x20000dd0
 8007058:	20000ebc 	.word	0x20000ebc

0800705c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800705c:	b5b0      	push	{r4, r5, r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	603a      	str	r2, [r7, #0]
 8007066:	80fb      	strh	r3, [r7, #6]
 8007068:	460b      	mov	r3, r1
 800706a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800706c:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <BSP_LCD_DrawPixel+0x88>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1d      	ldr	r2, [pc, #116]	@ (80070e8 <BSP_LCD_DrawPixel+0x8c>)
 8007072:	2134      	movs	r1, #52	@ 0x34
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	4413      	add	r3, r2
 800707a:	3348      	adds	r3, #72	@ 0x48
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d116      	bne.n	80070b0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8007082:	4b18      	ldr	r3, [pc, #96]	@ (80070e4 <BSP_LCD_DrawPixel+0x88>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a18      	ldr	r2, [pc, #96]	@ (80070e8 <BSP_LCD_DrawPixel+0x8c>)
 8007088:	2134      	movs	r1, #52	@ 0x34
 800708a:	fb01 f303 	mul.w	r3, r1, r3
 800708e:	4413      	add	r3, r2
 8007090:	335c      	adds	r3, #92	@ 0x5c
 8007092:	681c      	ldr	r4, [r3, #0]
 8007094:	88bd      	ldrh	r5, [r7, #4]
 8007096:	f7ff fd3d 	bl	8006b14 <BSP_LCD_GetXSize>
 800709a:	4603      	mov	r3, r0
 800709c:	fb03 f205 	mul.w	r2, r3, r5
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	4413      	add	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4423      	add	r3, r4
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	b292      	uxth	r2, r2
 80070ac:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80070ae:	e015      	b.n	80070dc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <BSP_LCD_DrawPixel+0x88>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a0c      	ldr	r2, [pc, #48]	@ (80070e8 <BSP_LCD_DrawPixel+0x8c>)
 80070b6:	2134      	movs	r1, #52	@ 0x34
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	4413      	add	r3, r2
 80070be:	335c      	adds	r3, #92	@ 0x5c
 80070c0:	681c      	ldr	r4, [r3, #0]
 80070c2:	88bd      	ldrh	r5, [r7, #4]
 80070c4:	f7ff fd26 	bl	8006b14 <BSP_LCD_GetXSize>
 80070c8:	4603      	mov	r3, r0
 80070ca:	fb03 f205 	mul.w	r2, r3, r5
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4423      	add	r3, r4
 80070d6:	461a      	mov	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bdb0      	pop	{r4, r5, r7, pc}
 80070e4:	20000eb8 	.word	0x20000eb8
 80070e8:	20000dd0 	.word	0x20000dd0

080070ec <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b08b      	sub	sp, #44	@ 0x2c
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	2300      	movs	r3, #0
 8007106:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	330a      	adds	r3, #10
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	330b      	adds	r3, #11
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	021b      	lsls	r3, r3, #8
 800711c:	441a      	add	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	330c      	adds	r3, #12
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	041b      	lsls	r3, r3, #16
 8007126:	441a      	add	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	330d      	adds	r3, #13
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	061b      	lsls	r3, r3, #24
 8007130:	4413      	add	r3, r2
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3312      	adds	r3, #18
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3313      	adds	r3, #19
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	441a      	add	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3314      	adds	r3, #20
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	041b      	lsls	r3, r3, #16
 800714e:	441a      	add	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3315      	adds	r3, #21
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	061b      	lsls	r3, r3, #24
 8007158:	4413      	add	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3316      	adds	r3, #22
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3317      	adds	r3, #23
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3318      	adds	r3, #24
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	441a      	add	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3319      	adds	r3, #25
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	061b      	lsls	r3, r3, #24
 8007180:	4413      	add	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	331c      	adds	r3, #28
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	331d      	adds	r3, #29
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	4413      	add	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8007198:	4b2b      	ldr	r3, [pc, #172]	@ (8007248 <BSP_LCD_DrawBitmap+0x15c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a2b      	ldr	r2, [pc, #172]	@ (800724c <BSP_LCD_DrawBitmap+0x160>)
 800719e:	2134      	movs	r1, #52	@ 0x34
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	335c      	adds	r3, #92	@ 0x5c
 80071a8:	681c      	ldr	r4, [r3, #0]
 80071aa:	f7ff fcb3 	bl	8006b14 <BSP_LCD_GetXSize>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	fb03 f202 	mul.w	r2, r3, r2
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4423      	add	r3, r4
 80071be:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3b20      	subs	r3, #32
 80071c4:	2b07      	cmp	r3, #7
 80071c6:	d802      	bhi.n	80071ce <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e008      	b.n	80071e0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	3b10      	subs	r3, #16
 80071d2:	2b07      	cmp	r3, #7
 80071d4:	d802      	bhi.n	80071dc <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80071d6:	2302      	movs	r3, #2
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	e001      	b.n	80071e0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80071dc:	2301      	movs	r3, #1
 80071de:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	08d2      	lsrs	r2, r2, #3
 80071ee:	fb03 f202 	mul.w	r2, r3, r2
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	4413      	add	r3, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	4413      	add	r3, r2
 80071fa:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80071fc:	2300      	movs	r3, #0
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007200:	e018      	b.n	8007234 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8007202:	6a39      	ldr	r1, [r7, #32]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fab3 	bl	8007774 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800720e:	f7ff fc81 	bl	8006b14 <BSP_LCD_GetXSize>
 8007212:	4603      	mov	r3, r0
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	4413      	add	r3, r2
 800721a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	08db      	lsrs	r3, r3, #3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	425b      	negs	r3, r3
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	3301      	adds	r3, #1
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
 8007234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	429a      	cmp	r2, r3
 800723a:	d3e2      	bcc.n	8007202 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	372c      	adds	r7, #44	@ 0x2c
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}
 8007246:	bf00      	nop
 8007248:	20000eb8 	.word	0x20000eb8
 800724c:	20000dd0 	.word	0x20000dd0

08007250 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af02      	add	r7, sp, #8
 8007258:	4604      	mov	r4, r0
 800725a:	4608      	mov	r0, r1
 800725c:	4611      	mov	r1, r2
 800725e:	461a      	mov	r2, r3
 8007260:	4623      	mov	r3, r4
 8007262:	80fb      	strh	r3, [r7, #6]
 8007264:	4603      	mov	r3, r0
 8007266:	80bb      	strh	r3, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	807b      	strh	r3, [r7, #2]
 800726c:	4613      	mov	r3, r2
 800726e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007274:	4b30      	ldr	r3, [pc, #192]	@ (8007338 <BSP_LCD_FillRect+0xe8>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4930      	ldr	r1, [pc, #192]	@ (800733c <BSP_LCD_FillRect+0xec>)
 800727a:	4613      	mov	r3, r2
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fcdc 	bl	8006c44 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800728c:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <BSP_LCD_FillRect+0xe8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a2b      	ldr	r2, [pc, #172]	@ (8007340 <BSP_LCD_FillRect+0xf0>)
 8007292:	2134      	movs	r1, #52	@ 0x34
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	4413      	add	r3, r2
 800729a:	3348      	adds	r3, #72	@ 0x48
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d114      	bne.n	80072cc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80072a2:	4b25      	ldr	r3, [pc, #148]	@ (8007338 <BSP_LCD_FillRect+0xe8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a26      	ldr	r2, [pc, #152]	@ (8007340 <BSP_LCD_FillRect+0xf0>)
 80072a8:	2134      	movs	r1, #52	@ 0x34
 80072aa:	fb01 f303 	mul.w	r3, r1, r3
 80072ae:	4413      	add	r3, r2
 80072b0:	335c      	adds	r3, #92	@ 0x5c
 80072b2:	681c      	ldr	r4, [r3, #0]
 80072b4:	f7ff fc2e 	bl	8006b14 <BSP_LCD_GetXSize>
 80072b8:	4602      	mov	r2, r0
 80072ba:	88bb      	ldrh	r3, [r7, #4]
 80072bc:	fb03 f202 	mul.w	r2, r3, r2
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	4413      	add	r3, r2
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	4423      	add	r3, r4
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e013      	b.n	80072f4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80072cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007338 <BSP_LCD_FillRect+0xe8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007340 <BSP_LCD_FillRect+0xf0>)
 80072d2:	2134      	movs	r1, #52	@ 0x34
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	335c      	adds	r3, #92	@ 0x5c
 80072dc:	681c      	ldr	r4, [r3, #0]
 80072de:	f7ff fc19 	bl	8006b14 <BSP_LCD_GetXSize>
 80072e2:	4602      	mov	r2, r0
 80072e4:	88bb      	ldrh	r3, [r7, #4]
 80072e6:	fb03 f202 	mul.w	r2, r3, r2
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4423      	add	r3, r4
 80072f2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80072f4:	4b10      	ldr	r3, [pc, #64]	@ (8007338 <BSP_LCD_FillRect+0xe8>)
 80072f6:	681c      	ldr	r4, [r3, #0]
 80072f8:	68fd      	ldr	r5, [r7, #12]
 80072fa:	887e      	ldrh	r6, [r7, #2]
 80072fc:	f8b7 8000 	ldrh.w	r8, [r7]
 8007300:	f7ff fc08 	bl	8006b14 <BSP_LCD_GetXSize>
 8007304:	4602      	mov	r2, r0
 8007306:	887b      	ldrh	r3, [r7, #2]
 8007308:	1ad1      	subs	r1, r2, r3
 800730a:	4b0b      	ldr	r3, [pc, #44]	@ (8007338 <BSP_LCD_FillRect+0xe8>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	480b      	ldr	r0, [pc, #44]	@ (800733c <BSP_LCD_FillRect+0xec>)
 8007310:	4613      	mov	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4403      	add	r3, r0
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	9100      	str	r1, [sp, #0]
 8007320:	4643      	mov	r3, r8
 8007322:	4632      	mov	r2, r6
 8007324:	4629      	mov	r1, r5
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f9d8 	bl	80076dc <LL_FillBuffer>
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007336:	bf00      	nop
 8007338:	20000eb8 	.word	0x20000eb8
 800733c:	20000ebc 	.word	0x20000ebc
 8007340:	20000dd0 	.word	0x20000dd0

08007344 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8007348:	4b0a      	ldr	r3, [pc, #40]	@ (8007374 <BSP_LCD_DisplayOn+0x30>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <BSP_LCD_DisplayOn+0x30>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8007358:	2201      	movs	r2, #1
 800735a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800735e:	4806      	ldr	r0, [pc, #24]	@ (8007378 <BSP_LCD_DisplayOn+0x34>)
 8007360:	f005 f83c 	bl	800c3dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8007364:	2201      	movs	r2, #1
 8007366:	2108      	movs	r1, #8
 8007368:	4804      	ldr	r0, [pc, #16]	@ (800737c <BSP_LCD_DisplayOn+0x38>)
 800736a:	f005 f837 	bl	800c3dc <HAL_GPIO_WritePin>
}
 800736e:	bf00      	nop
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000dd0 	.word	0x20000dd0
 8007378:	40022000 	.word	0x40022000
 800737c:	40022800 	.word	0x40022800

08007380 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b090      	sub	sp, #64	@ 0x40
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800738a:	4b64      	ldr	r3, [pc, #400]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	4a63      	ldr	r2, [pc, #396]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007390:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007394:	6453      	str	r3, [r2, #68]	@ 0x44
 8007396:	4b61      	ldr	r3, [pc, #388]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800739e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80073a2:	4b5e      	ldr	r3, [pc, #376]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a6:	4a5d      	ldr	r2, [pc, #372]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ae:	4b5b      	ldr	r3, [pc, #364]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80073ba:	4b58      	ldr	r3, [pc, #352]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073be:	4a57      	ldr	r2, [pc, #348]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073c0:	f043 0310 	orr.w	r3, r3, #16
 80073c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80073c6:	4b55      	ldr	r3, [pc, #340]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	623b      	str	r3, [r7, #32]
 80073d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80073d2:	4b52      	ldr	r3, [pc, #328]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d6:	4a51      	ldr	r2, [pc, #324]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80073de:	4b4f      	ldr	r3, [pc, #316]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e6:	61fb      	str	r3, [r7, #28]
 80073e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80073ea:	4b4c      	ldr	r3, [pc, #304]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	4a4b      	ldr	r2, [pc, #300]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80073f6:	4b49      	ldr	r3, [pc, #292]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007402:	4b46      	ldr	r3, [pc, #280]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007406:	4a45      	ldr	r2, [pc, #276]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800740c:	6313      	str	r3, [r2, #48]	@ 0x30
 800740e:	4b43      	ldr	r3, [pc, #268]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800741a:	4b40      	ldr	r3, [pc, #256]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741e:	4a3f      	ldr	r2, [pc, #252]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007420:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007424:	6313      	str	r3, [r2, #48]	@ 0x30
 8007426:	4b3d      	ldr	r3, [pc, #244]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8007432:	4b3a      	ldr	r3, [pc, #232]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	4a39      	ldr	r2, [pc, #228]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800743c:	6313      	str	r3, [r2, #48]	@ 0x30
 800743e:	4b37      	ldr	r3, [pc, #220]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800744a:	4b34      	ldr	r3, [pc, #208]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744e:	4a33      	ldr	r2, [pc, #204]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007454:	6313      	str	r3, [r2, #48]	@ 0x30
 8007456:	4b31      	ldr	r3, [pc, #196]	@ (800751c <BSP_LCD_MspInit+0x19c>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8007462:	2310      	movs	r3, #16
 8007464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007466:	2302      	movs	r3, #2
 8007468:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800746a:	2300      	movs	r3, #0
 800746c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800746e:	2302      	movs	r3, #2
 8007470:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8007472:	230e      	movs	r3, #14
 8007474:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800747a:	4619      	mov	r1, r3
 800747c:	4828      	ldr	r0, [pc, #160]	@ (8007520 <BSP_LCD_MspInit+0x1a0>)
 800747e:	f004 fcdd 	bl	800be3c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8007482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007488:	2302      	movs	r3, #2
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800748c:	2309      	movs	r3, #9
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007490:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007494:	4619      	mov	r1, r3
 8007496:	4823      	ldr	r0, [pc, #140]	@ (8007524 <BSP_LCD_MspInit+0x1a4>)
 8007498:	f004 fcd0 	bl	800be3c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800749c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80074a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074a2:	2302      	movs	r3, #2
 80074a4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80074a6:	230e      	movs	r3, #14
 80074a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80074aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074ae:	4619      	mov	r1, r3
 80074b0:	481d      	ldr	r0, [pc, #116]	@ (8007528 <BSP_LCD_MspInit+0x1a8>)
 80074b2:	f004 fcc3 	bl	800be3c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80074b6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80074ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074bc:	2302      	movs	r3, #2
 80074be:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80074c0:	230e      	movs	r3, #14
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80074c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074c8:	4619      	mov	r1, r3
 80074ca:	4818      	ldr	r0, [pc, #96]	@ (800752c <BSP_LCD_MspInit+0x1ac>)
 80074cc:	f004 fcb6 	bl	800be3c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80074d0:	23f7      	movs	r3, #247	@ 0xf7
 80074d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074d4:	2302      	movs	r3, #2
 80074d6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80074d8:	230e      	movs	r3, #14
 80074da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80074dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074e0:	4619      	mov	r1, r3
 80074e2:	4813      	ldr	r0, [pc, #76]	@ (8007530 <BSP_LCD_MspInit+0x1b0>)
 80074e4:	f004 fcaa 	bl	800be3c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80074e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80074ee:	2301      	movs	r3, #1
 80074f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80074f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074f6:	4619      	mov	r1, r3
 80074f8:	480b      	ldr	r0, [pc, #44]	@ (8007528 <BSP_LCD_MspInit+0x1a8>)
 80074fa:	f004 fc9f 	bl	800be3c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80074fe:	2308      	movs	r3, #8
 8007500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007502:	2301      	movs	r3, #1
 8007504:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800750a:	4619      	mov	r1, r3
 800750c:	4808      	ldr	r0, [pc, #32]	@ (8007530 <BSP_LCD_MspInit+0x1b0>)
 800750e:	f004 fc95 	bl	800be3c <HAL_GPIO_Init>
}
 8007512:	bf00      	nop
 8007514:	3740      	adds	r7, #64	@ 0x40
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40023800 	.word	0x40023800
 8007520:	40021000 	.word	0x40021000
 8007524:	40021800 	.word	0x40021800
 8007528:	40022000 	.word	0x40022000
 800752c:	40022400 	.word	0x40022400
 8007530:	40022800 	.word	0x40022800

08007534 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800753e:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <BSP_LCD_ClockConfig+0x34>)
 8007540:	2208      	movs	r2, #8
 8007542:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8007544:	4b08      	ldr	r3, [pc, #32]	@ (8007568 <BSP_LCD_ClockConfig+0x34>)
 8007546:	22c0      	movs	r2, #192	@ 0xc0
 8007548:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800754a:	4b07      	ldr	r3, [pc, #28]	@ (8007568 <BSP_LCD_ClockConfig+0x34>)
 800754c:	2205      	movs	r2, #5
 800754e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8007550:	4b05      	ldr	r3, [pc, #20]	@ (8007568 <BSP_LCD_ClockConfig+0x34>)
 8007552:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007556:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8007558:	4803      	ldr	r0, [pc, #12]	@ (8007568 <BSP_LCD_ClockConfig+0x34>)
 800755a:	f006 fd97 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000ed4 	.word	0x20000ed4

0800756c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	603a      	str	r2, [r7, #0]
 8007576:	80fb      	strh	r3, [r7, #6]
 8007578:	460b      	mov	r3, r1
 800757a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	2300      	movs	r3, #0
 8007582:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8007584:	4b53      	ldr	r3, [pc, #332]	@ (80076d4 <DrawChar+0x168>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	4953      	ldr	r1, [pc, #332]	@ (80076d8 <DrawChar+0x16c>)
 800758a:	4613      	mov	r3, r2
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	3308      	adds	r3, #8
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800759c:	4b4d      	ldr	r3, [pc, #308]	@ (80076d4 <DrawChar+0x168>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	494d      	ldr	r1, [pc, #308]	@ (80076d8 <DrawChar+0x16c>)
 80075a2:	4613      	mov	r3, r2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4413      	add	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	440b      	add	r3, r1
 80075ac:	3308      	adds	r3, #8
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	889b      	ldrh	r3, [r3, #4]
 80075b2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80075b4:	8a3b      	ldrh	r3, [r7, #16]
 80075b6:	3307      	adds	r3, #7
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da00      	bge.n	80075be <DrawChar+0x52>
 80075bc:	3307      	adds	r3, #7
 80075be:	10db      	asrs	r3, r3, #3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	8a3b      	ldrh	r3, [r7, #16]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	e076      	b.n	80076c2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80075d4:	8a3b      	ldrh	r3, [r7, #16]
 80075d6:	3307      	adds	r3, #7
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da00      	bge.n	80075de <DrawChar+0x72>
 80075dc:	3307      	adds	r3, #7
 80075de:	10db      	asrs	r3, r3, #3
 80075e0:	461a      	mov	r2, r3
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	4413      	add	r3, r2
 80075ec:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80075ee:	8a3b      	ldrh	r3, [r7, #16]
 80075f0:	3307      	adds	r3, #7
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da00      	bge.n	80075f8 <DrawChar+0x8c>
 80075f6:	3307      	adds	r3, #7
 80075f8:	10db      	asrs	r3, r3, #3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d002      	beq.n	8007604 <DrawChar+0x98>
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d004      	beq.n	800760c <DrawChar+0xa0>
 8007602:	e00c      	b.n	800761e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	617b      	str	r3, [r7, #20]
      break;
 800760a:	e016      	b.n	800763a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	3201      	adds	r2, #1
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
      break;
 800761c:	e00d      	b.n	800763a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	041a      	lsls	r2, r3, #16
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3301      	adds	r3, #1
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	4313      	orrs	r3, r2
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	3202      	adds	r2, #2
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
      break;
 8007638:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	e036      	b.n	80076ae <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007640:	8a3a      	ldrh	r2, [r7, #16]
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	1ad2      	subs	r2, r2, r3
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	4413      	add	r3, r2
 800764a:	3b01      	subs	r3, #1
 800764c:	2201      	movs	r2, #1
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	461a      	mov	r2, r3
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d012      	beq.n	8007682 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	b29a      	uxth	r2, r3
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	4413      	add	r3, r2
 8007664:	b298      	uxth	r0, r3
 8007666:	4b1b      	ldr	r3, [pc, #108]	@ (80076d4 <DrawChar+0x168>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	491b      	ldr	r1, [pc, #108]	@ (80076d8 <DrawChar+0x16c>)
 800766c:	4613      	mov	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	88bb      	ldrh	r3, [r7, #4]
 800767a:	4619      	mov	r1, r3
 800767c:	f7ff fcee 	bl	800705c <BSP_LCD_DrawPixel>
 8007680:	e012      	b.n	80076a8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	b29a      	uxth	r2, r3
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	4413      	add	r3, r2
 800768a:	b298      	uxth	r0, r3
 800768c:	4b11      	ldr	r3, [pc, #68]	@ (80076d4 <DrawChar+0x168>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	4911      	ldr	r1, [pc, #68]	@ (80076d8 <DrawChar+0x16c>)
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	3304      	adds	r3, #4
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	88bb      	ldrh	r3, [r7, #4]
 80076a2:	4619      	mov	r1, r3
 80076a4:	f7ff fcda 	bl	800705c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	8a3b      	ldrh	r3, [r7, #16]
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d3c4      	bcc.n	8007640 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80076b6:	88bb      	ldrh	r3, [r7, #4]
 80076b8:	3301      	adds	r3, #1
 80076ba:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3301      	adds	r3, #1
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	8a7b      	ldrh	r3, [r7, #18]
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d384      	bcc.n	80075d4 <DrawChar+0x68>
  }
}
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20000eb8 	.word	0x20000eb8
 80076d8:	20000ebc 	.word	0x20000ebc

080076dc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80076ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007764 <LL_FillBuffer+0x88>)
 80076ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80076f0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80076f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007768 <LL_FillBuffer+0x8c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1d      	ldr	r2, [pc, #116]	@ (800776c <LL_FillBuffer+0x90>)
 80076f8:	2134      	movs	r1, #52	@ 0x34
 80076fa:	fb01 f303 	mul.w	r3, r1, r3
 80076fe:	4413      	add	r3, r2
 8007700:	3348      	adds	r3, #72	@ 0x48
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d103      	bne.n	8007710 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8007708:	4b16      	ldr	r3, [pc, #88]	@ (8007764 <LL_FillBuffer+0x88>)
 800770a:	2202      	movs	r2, #2
 800770c:	609a      	str	r2, [r3, #8]
 800770e:	e002      	b.n	8007716 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007710:	4b14      	ldr	r3, [pc, #80]	@ (8007764 <LL_FillBuffer+0x88>)
 8007712:	2200      	movs	r2, #0
 8007714:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8007716:	4a13      	ldr	r2, [pc, #76]	@ (8007764 <LL_FillBuffer+0x88>)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800771c:	4b11      	ldr	r3, [pc, #68]	@ (8007764 <LL_FillBuffer+0x88>)
 800771e:	4a14      	ldr	r2, [pc, #80]	@ (8007770 <LL_FillBuffer+0x94>)
 8007720:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8007722:	4810      	ldr	r0, [pc, #64]	@ (8007764 <LL_FillBuffer+0x88>)
 8007724:	f004 f8fe 	bl	800b924 <HAL_DMA2D_Init>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d115      	bne.n	800775a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	480c      	ldr	r0, [pc, #48]	@ (8007764 <LL_FillBuffer+0x88>)
 8007732:	f004 fa55 	bl	800bbe0 <HAL_DMA2D_ConfigLayer>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10e      	bne.n	800775a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69f9      	ldr	r1, [r7, #28]
 8007746:	4807      	ldr	r0, [pc, #28]	@ (8007764 <LL_FillBuffer+0x88>)
 8007748:	f004 f936 	bl	800b9b8 <HAL_DMA2D_Start>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007752:	210a      	movs	r1, #10
 8007754:	4803      	ldr	r0, [pc, #12]	@ (8007764 <LL_FillBuffer+0x88>)
 8007756:	f004 f95a 	bl	800ba0e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000e78 	.word	0x20000e78
 8007768:	20000eb8 	.word	0x20000eb8
 800776c:	20000dd0 	.word	0x20000dd0
 8007770:	4002b000 	.word	0x4002b000

08007774 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af02      	add	r7, sp, #8
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8007782:	4b1c      	ldr	r3, [pc, #112]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 8007784:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007788:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800778a:	4b1a      	ldr	r3, [pc, #104]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 800778c:	2200      	movs	r2, #0
 800778e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8007790:	4b18      	ldr	r3, [pc, #96]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 8007792:	2200      	movs	r2, #0
 8007794:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007796:	4b17      	ldr	r3, [pc, #92]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 8007798:	2200      	movs	r2, #0
 800779a:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800779c:	4b15      	ldr	r3, [pc, #84]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 800779e:	22ff      	movs	r2, #255	@ 0xff
 80077a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80077a2:	4a14      	ldr	r2, [pc, #80]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80077a8:	4b12      	ldr	r3, [pc, #72]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80077ae:	4b11      	ldr	r3, [pc, #68]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 80077b0:	4a11      	ldr	r2, [pc, #68]	@ (80077f8 <LL_ConvertLineToARGB8888+0x84>)
 80077b2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80077b4:	480f      	ldr	r0, [pc, #60]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 80077b6:	f004 f8b5 	bl	800b924 <HAL_DMA2D_Init>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d115      	bne.n	80077ec <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80077c0:	2101      	movs	r1, #1
 80077c2:	480c      	ldr	r0, [pc, #48]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 80077c4:	f004 fa0c 	bl	800bbe0 <HAL_DMA2D_ConfigLayer>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10e      	bne.n	80077ec <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80077ce:	68f9      	ldr	r1, [r7, #12]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	2301      	movs	r3, #1
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4806      	ldr	r0, [pc, #24]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 80077da:	f004 f8ed 	bl	800b9b8 <HAL_DMA2D_Start>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80077e4:	210a      	movs	r1, #10
 80077e6:	4803      	ldr	r0, [pc, #12]	@ (80077f4 <LL_ConvertLineToARGB8888+0x80>)
 80077e8:	f004 f911 	bl	800ba0e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000e78 	.word	0x20000e78
 80077f8:	4002b000 	.word	0x4002b000

080077fc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007800:	4b29      	ldr	r3, [pc, #164]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007802:	4a2a      	ldr	r2, [pc, #168]	@ (80078ac <BSP_SDRAM_Init+0xb0>)
 8007804:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8007806:	4b2a      	ldr	r3, [pc, #168]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 8007808:	2202      	movs	r2, #2
 800780a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800780c:	4b28      	ldr	r3, [pc, #160]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 800780e:	2207      	movs	r2, #7
 8007810:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8007812:	4b27      	ldr	r3, [pc, #156]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 8007814:	2204      	movs	r2, #4
 8007816:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8007818:	4b25      	ldr	r3, [pc, #148]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 800781a:	2207      	movs	r2, #7
 800781c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800781e:	4b24      	ldr	r3, [pc, #144]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 8007820:	2202      	movs	r2, #2
 8007822:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8007824:	4b22      	ldr	r3, [pc, #136]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 8007826:	2202      	movs	r2, #2
 8007828:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800782a:	4b21      	ldr	r3, [pc, #132]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 800782c:	2202      	movs	r2, #2
 800782e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8007830:	4b1d      	ldr	r3, [pc, #116]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007832:	2200      	movs	r2, #0
 8007834:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007836:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007838:	2200      	movs	r2, #0
 800783a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800783c:	4b1a      	ldr	r3, [pc, #104]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 800783e:	2204      	movs	r2, #4
 8007840:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007842:	4b19      	ldr	r3, [pc, #100]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007844:	2210      	movs	r2, #16
 8007846:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007848:	4b17      	ldr	r3, [pc, #92]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 800784a:	2240      	movs	r2, #64	@ 0x40
 800784c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007854:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007856:	4b14      	ldr	r3, [pc, #80]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007858:	2200      	movs	r2, #0
 800785a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 800785e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007862:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007864:	4b10      	ldr	r3, [pc, #64]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007866:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800786a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800786c:	4b0e      	ldr	r3, [pc, #56]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 800786e:	2200      	movs	r2, #0
 8007870:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007872:	2100      	movs	r1, #0
 8007874:	480c      	ldr	r0, [pc, #48]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 8007876:	f000 f87f 	bl	8007978 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800787a:	490d      	ldr	r1, [pc, #52]	@ (80078b0 <BSP_SDRAM_Init+0xb4>)
 800787c:	480a      	ldr	r0, [pc, #40]	@ (80078a8 <BSP_SDRAM_Init+0xac>)
 800787e:	f008 febb 	bl	80105f8 <HAL_SDRAM_Init>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8007888:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <BSP_SDRAM_Init+0xb8>)
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e002      	b.n	8007896 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007890:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <BSP_SDRAM_Init+0xb8>)
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8007896:	f240 6003 	movw	r0, #1539	@ 0x603
 800789a:	f000 f80d 	bl	80078b8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800789e:	4b05      	ldr	r3, [pc, #20]	@ (80078b4 <BSP_SDRAM_Init+0xb8>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000f58 	.word	0x20000f58
 80078ac:	a0000140 	.word	0xa0000140
 80078b0:	20000f8c 	.word	0x20000f8c
 80078b4:	20000050 	.word	0x20000050

080078b8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80078c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80078ca:	4b29      	ldr	r3, [pc, #164]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078cc:	2210      	movs	r2, #16
 80078ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80078d0:	4b27      	ldr	r3, [pc, #156]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80078d6:	4b26      	ldr	r3, [pc, #152]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078d8:	2200      	movs	r2, #0
 80078da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80078dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078e0:	4923      	ldr	r1, [pc, #140]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078e2:	4824      	ldr	r0, [pc, #144]	@ (8007974 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80078e4:	f008 febc 	bl	8010660 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80078e8:	2001      	movs	r0, #1
 80078ea:	f002 ff17 	bl	800a71c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80078ee:	4b20      	ldr	r3, [pc, #128]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078f0:	2202      	movs	r2, #2
 80078f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80078f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078f6:	2210      	movs	r2, #16
 80078f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80078fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007900:	4b1b      	ldr	r3, [pc, #108]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007902:	2200      	movs	r2, #0
 8007904:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8007906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800790a:	4919      	ldr	r1, [pc, #100]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800790c:	4819      	ldr	r0, [pc, #100]	@ (8007974 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800790e:	f008 fea7 	bl	8010660 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007912:	4b17      	ldr	r3, [pc, #92]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007914:	2203      	movs	r2, #3
 8007916:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007918:	4b15      	ldr	r3, [pc, #84]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800791a:	2210      	movs	r2, #16
 800791c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800791e:	4b14      	ldr	r3, [pc, #80]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007920:	2208      	movs	r2, #8
 8007922:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007924:	4b12      	ldr	r3, [pc, #72]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007926:	2200      	movs	r2, #0
 8007928:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800792a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800792e:	4910      	ldr	r1, [pc, #64]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007930:	4810      	ldr	r0, [pc, #64]	@ (8007974 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007932:	f008 fe95 	bl	8010660 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8007936:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800793a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800793c:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800793e:	2204      	movs	r2, #4
 8007940:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007942:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007944:	2210      	movs	r2, #16
 8007946:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007948:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800794a:	2201      	movs	r2, #1
 800794c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4a07      	ldr	r2, [pc, #28]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007952:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007958:	4905      	ldr	r1, [pc, #20]	@ (8007970 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800795a:	4806      	ldr	r0, [pc, #24]	@ (8007974 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800795c:	f008 fe80 	bl	8010660 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4804      	ldr	r0, [pc, #16]	@ (8007974 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007964:	f008 feb1 	bl	80106ca <HAL_SDRAM_ProgramRefreshRate>
}
 8007968:	bf00      	nop
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000fa8 	.word	0x20000fa8
 8007974:	20000f58 	.word	0x20000f58

08007978 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007978:	b580      	push	{r7, lr}
 800797a:	b090      	sub	sp, #64	@ 0x40
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007982:	4b70      	ldr	r3, [pc, #448]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007986:	4a6f      	ldr	r2, [pc, #444]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007988:	f043 0301 	orr.w	r3, r3, #1
 800798c:	6393      	str	r3, [r2, #56]	@ 0x38
 800798e:	4b6d      	ldr	r3, [pc, #436]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800799a:	4b6a      	ldr	r3, [pc, #424]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 800799c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799e:	4a69      	ldr	r2, [pc, #420]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80079a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80079a6:	4b67      	ldr	r3, [pc, #412]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80079b2:	4b64      	ldr	r3, [pc, #400]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b6:	4a63      	ldr	r2, [pc, #396]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079b8:	f043 0304 	orr.w	r3, r3, #4
 80079bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80079be:	4b61      	ldr	r3, [pc, #388]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	623b      	str	r3, [r7, #32]
 80079c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80079ca:	4b5e      	ldr	r3, [pc, #376]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ce:	4a5d      	ldr	r2, [pc, #372]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079d0:	f043 0308 	orr.w	r3, r3, #8
 80079d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80079d6:	4b5b      	ldr	r3, [pc, #364]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80079e2:	4b58      	ldr	r3, [pc, #352]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e6:	4a57      	ldr	r2, [pc, #348]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079e8:	f043 0310 	orr.w	r3, r3, #16
 80079ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80079ee:	4b55      	ldr	r3, [pc, #340]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80079fa:	4b52      	ldr	r3, [pc, #328]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	4a51      	ldr	r2, [pc, #324]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a00:	f043 0320 	orr.w	r3, r3, #32
 8007a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a06:	4b4f      	ldr	r3, [pc, #316]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007a12:	4b4c      	ldr	r3, [pc, #304]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a16:	4a4b      	ldr	r2, [pc, #300]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a1e:	4b49      	ldr	r3, [pc, #292]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a2a:	4b46      	ldr	r3, [pc, #280]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	4a45      	ldr	r2, [pc, #276]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a36:	4b43      	ldr	r3, [pc, #268]	@ (8007b44 <BSP_SDRAM_MspInit+0x1cc>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007a42:	2302      	movs	r3, #2
 8007a44:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007a46:	2301      	movs	r3, #1
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007a4e:	230c      	movs	r3, #12
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007a52:	2308      	movs	r3, #8
 8007a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	483a      	ldr	r0, [pc, #232]	@ (8007b48 <BSP_SDRAM_MspInit+0x1d0>)
 8007a5e:	f004 f9ed 	bl	800be3c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007a62:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4837      	ldr	r0, [pc, #220]	@ (8007b4c <BSP_SDRAM_MspInit+0x1d4>)
 8007a70:	f004 f9e4 	bl	800be3c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007a74:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4833      	ldr	r0, [pc, #204]	@ (8007b50 <BSP_SDRAM_MspInit+0x1d8>)
 8007a82:	f004 f9db 	bl	800be3c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007a86:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a90:	4619      	mov	r1, r3
 8007a92:	4830      	ldr	r0, [pc, #192]	@ (8007b54 <BSP_SDRAM_MspInit+0x1dc>)
 8007a94:	f004 f9d2 	bl	800be3c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007a98:	f248 1333 	movw	r3, #33075	@ 0x8133
 8007a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007a9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	482c      	ldr	r0, [pc, #176]	@ (8007b58 <BSP_SDRAM_MspInit+0x1e0>)
 8007aa6:	f004 f9c9 	bl	800be3c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007aaa:	2328      	movs	r3, #40	@ 0x28
 8007aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4829      	ldr	r0, [pc, #164]	@ (8007b5c <BSP_SDRAM_MspInit+0x1e4>)
 8007ab6:	f004 f9c1 	bl	800be3c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007aba:	4b29      	ldr	r3, [pc, #164]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007ac0:	4b27      	ldr	r3, [pc, #156]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007ac2:	2280      	movs	r2, #128	@ 0x80
 8007ac4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007ac6:	4b26      	ldr	r3, [pc, #152]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007acc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007ace:	4b24      	ldr	r3, [pc, #144]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007ad0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ad4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007ad6:	4b22      	ldr	r3, [pc, #136]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007adc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007ade:	4b20      	ldr	r3, [pc, #128]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007ae4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007aec:	4b1c      	ldr	r3, [pc, #112]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007aee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007af2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007af4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007afa:	4b19      	ldr	r3, [pc, #100]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007afc:	2203      	movs	r2, #3
 8007afe:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007b00:	4b17      	ldr	r3, [pc, #92]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007b06:	4b16      	ldr	r3, [pc, #88]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007b0c:	4b14      	ldr	r3, [pc, #80]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007b0e:	4a15      	ldr	r2, [pc, #84]	@ (8007b64 <BSP_SDRAM_MspInit+0x1ec>)
 8007b10:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a12      	ldr	r2, [pc, #72]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b18:	4a11      	ldr	r2, [pc, #68]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007b1e:	4810      	ldr	r0, [pc, #64]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007b20:	f003 fbaa 	bl	800b278 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007b24:	480e      	ldr	r0, [pc, #56]	@ (8007b60 <BSP_SDRAM_MspInit+0x1e8>)
 8007b26:	f003 faf9 	bl	800b11c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	210f      	movs	r1, #15
 8007b2e:	2038      	movs	r0, #56	@ 0x38
 8007b30:	f003 faca 	bl	800b0c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007b34:	2038      	movs	r0, #56	@ 0x38
 8007b36:	f003 fae3 	bl	800b100 <HAL_NVIC_EnableIRQ>
}
 8007b3a:	bf00      	nop
 8007b3c:	3740      	adds	r7, #64	@ 0x40
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40023800 	.word	0x40023800
 8007b48:	40020800 	.word	0x40020800
 8007b4c:	40020c00 	.word	0x40020c00
 8007b50:	40021000 	.word	0x40021000
 8007b54:	40021400 	.word	0x40021400
 8007b58:	40021800 	.word	0x40021800
 8007b5c:	40021c00 	.word	0x40021c00
 8007b60:	20000fb8 	.word	0x20000fb8
 8007b64:	40026410 	.word	0x40026410

08007b68 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	460a      	mov	r2, r1
 8007b72:	80fb      	strh	r3, [r7, #6]
 8007b74:	4613      	mov	r3, r2
 8007b76:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007b7c:	4a14      	ldr	r2, [pc, #80]	@ (8007bd0 <BSP_TS_Init+0x68>)
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007b82:	4a14      	ldr	r2, [pc, #80]	@ (8007bd4 <BSP_TS_Init+0x6c>)
 8007b84:	88bb      	ldrh	r3, [r7, #4]
 8007b86:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007b88:	4b13      	ldr	r3, [pc, #76]	@ (8007bd8 <BSP_TS_Init+0x70>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2070      	movs	r0, #112	@ 0x70
 8007b8e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007b90:	4b11      	ldr	r3, [pc, #68]	@ (8007bd8 <BSP_TS_Init+0x70>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2070      	movs	r0, #112	@ 0x70
 8007b96:	4798      	blx	r3
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b51      	cmp	r3, #81	@ 0x51
 8007b9c:	d110      	bne.n	8007bc0 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bdc <BSP_TS_Init+0x74>)
 8007ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8007bd8 <BSP_TS_Init+0x70>)
 8007ba2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8007be0 <BSP_TS_Init+0x78>)
 8007ba6:	2270      	movs	r2, #112	@ 0x70
 8007ba8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8007baa:	4b0e      	ldr	r3, [pc, #56]	@ (8007be4 <BSP_TS_Init+0x7c>)
 8007bac:	2208      	movs	r2, #8
 8007bae:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <BSP_TS_Init+0x74>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007be0 <BSP_TS_Init+0x78>)
 8007bb8:	7812      	ldrb	r2, [r2, #0]
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4798      	blx	r3
 8007bbe:	e001      	b.n	8007bc4 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000101c 	.word	0x2000101c
 8007bd4:	2000101e 	.word	0x2000101e
 8007bd8:	20000000 	.word	0x20000000
 8007bdc:	20001018 	.word	0x20001018
 8007be0:	20001021 	.word	0x20001021
 8007be4:	20001020 	.word	0x20001020

08007be8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b097      	sub	sp, #92	@ 0x5c
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007c02:	4bb8      	ldr	r3, [pc, #736]	@ (8007ee4 <BSP_TS_GetState+0x2fc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	4ab7      	ldr	r2, [pc, #732]	@ (8007ee8 <BSP_TS_GetState+0x300>)
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	4603      	mov	r3, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8198 	beq.w	8007f52 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007c22:	2300      	movs	r3, #0
 8007c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c26:	e187      	b.n	8007f38 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8007c28:	4bae      	ldr	r3, [pc, #696]	@ (8007ee4 <BSP_TS_GetState+0x2fc>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	4aae      	ldr	r2, [pc, #696]	@ (8007ee8 <BSP_TS_GetState+0x300>)
 8007c30:	7812      	ldrb	r2, [r2, #0]
 8007c32:	4614      	mov	r4, r2
 8007c34:	f107 0120 	add.w	r1, r7, #32
 8007c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c3a:	0052      	lsls	r2, r2, #1
 8007c3c:	1888      	adds	r0, r1, r2
 8007c3e:	f107 0114 	add.w	r1, r7, #20
 8007c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c44:	0052      	lsls	r2, r2, #1
 8007c46:	440a      	add	r2, r1
 8007c48:	4601      	mov	r1, r0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007c4e:	4ba7      	ldr	r3, [pc, #668]	@ (8007eec <BSP_TS_GetState+0x304>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d117      	bne.n	8007c86 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8007c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	3350      	adds	r3, #80	@ 0x50
 8007c5c:	443b      	add	r3, r7
 8007c5e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	3350      	adds	r3, #80	@ 0x50
 8007c68:	443b      	add	r3, r7
 8007c6a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	3350      	adds	r3, #80	@ 0x50
 8007c74:	443b      	add	r3, r7
 8007c76:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	3350      	adds	r3, #80	@ 0x50
 8007c80:	443b      	add	r3, r7
 8007c82:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007c86:	4b99      	ldr	r3, [pc, #612]	@ (8007eec <BSP_TS_GetState+0x304>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00e      	beq.n	8007cb0 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8007c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	3350      	adds	r3, #80	@ 0x50
 8007c98:	443b      	add	r3, r7
 8007c9a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007c9e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	3350      	adds	r3, #80	@ 0x50
 8007caa:	443b      	add	r3, r7
 8007cac:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007cb0:	4b8e      	ldr	r3, [pc, #568]	@ (8007eec <BSP_TS_GetState+0x304>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00e      	beq.n	8007cda <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8007cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	3350      	adds	r3, #80	@ 0x50
 8007cc2:	443b      	add	r3, r7
 8007cc4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007cc8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	3350      	adds	r3, #80	@ 0x50
 8007cd4:	443b      	add	r3, r7
 8007cd6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8007cda:	4b84      	ldr	r3, [pc, #528]	@ (8007eec <BSP_TS_GetState+0x304>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d017      	beq.n	8007d16 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8007ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	3350      	adds	r3, #80	@ 0x50
 8007cec:	443b      	add	r3, r7
 8007cee:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	3350      	adds	r3, #80	@ 0x50
 8007cf8:	443b      	add	r3, r7
 8007cfa:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8007cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	3350      	adds	r3, #80	@ 0x50
 8007d04:	443b      	add	r3, r7
 8007d06:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	3350      	adds	r3, #80	@ 0x50
 8007d10:	443b      	add	r3, r7
 8007d12:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	3350      	adds	r3, #80	@ 0x50
 8007d1c:	443b      	add	r3, r7
 8007d1e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007d22:	4619      	mov	r1, r3
 8007d24:	4a72      	ldr	r2, [pc, #456]	@ (8007ef0 <BSP_TS_GetState+0x308>)
 8007d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	d90d      	bls.n	8007d4c <BSP_TS_GetState+0x164>
 8007d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	3350      	adds	r3, #80	@ 0x50
 8007d36:	443b      	add	r3, r7
 8007d38:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8007d3c:	496c      	ldr	r1, [pc, #432]	@ (8007ef0 <BSP_TS_GetState+0x308>)
 8007d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	e00c      	b.n	8007d66 <BSP_TS_GetState+0x17e>
 8007d4c:	4a68      	ldr	r2, [pc, #416]	@ (8007ef0 <BSP_TS_GetState+0x308>)
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	3350      	adds	r3, #80	@ 0x50
 8007d5c:	443b      	add	r3, r7
 8007d5e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	3350      	adds	r3, #80	@ 0x50
 8007d70:	443b      	add	r3, r7
 8007d72:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007d76:	4619      	mov	r1, r3
 8007d78:	4a5e      	ldr	r2, [pc, #376]	@ (8007ef4 <BSP_TS_GetState+0x30c>)
 8007d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d80:	4299      	cmp	r1, r3
 8007d82:	d90d      	bls.n	8007da0 <BSP_TS_GetState+0x1b8>
 8007d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	3350      	adds	r3, #80	@ 0x50
 8007d8a:	443b      	add	r3, r7
 8007d8c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007d90:	4958      	ldr	r1, [pc, #352]	@ (8007ef4 <BSP_TS_GetState+0x30c>)
 8007d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	e00c      	b.n	8007dba <BSP_TS_GetState+0x1d2>
 8007da0:	4a54      	ldr	r2, [pc, #336]	@ (8007ef4 <BSP_TS_GetState+0x30c>)
 8007da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	3350      	adds	r3, #80	@ 0x50
 8007db0:	443b      	add	r3, r7
 8007db2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8007dbe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007dc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007dc6:	4413      	add	r3, r2
 8007dc8:	2b05      	cmp	r3, #5
 8007dca:	dd15      	ble.n	8007df8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8007dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	3350      	adds	r3, #80	@ 0x50
 8007dd2:	443b      	add	r3, r7
 8007dd4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4a45      	ldr	r2, [pc, #276]	@ (8007ef0 <BSP_TS_GetState+0x308>)
 8007ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8007de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	3350      	adds	r3, #80	@ 0x50
 8007de8:	443b      	add	r3, r7
 8007dea:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007dee:	4619      	mov	r1, r3
 8007df0:	4a40      	ldr	r2, [pc, #256]	@ (8007ef4 <BSP_TS_GetState+0x30c>)
 8007df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007df4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007df8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee8 <BSP_TS_GetState+0x300>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b70      	cmp	r3, #112	@ 0x70
 8007dfe:	d119      	bne.n	8007e34 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8007e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	3350      	adds	r3, #80	@ 0x50
 8007e06:	443b      	add	r3, r7
 8007e08:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	460a      	mov	r2, r1
 8007e16:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8007e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	3350      	adds	r3, #80	@ 0x50
 8007e1e:	443b      	add	r3, r7
 8007e20:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e28:	3304      	adds	r3, #4
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	460a      	mov	r2, r1
 8007e30:	809a      	strh	r2, [r3, #4]
 8007e32:	e022      	b.n	8007e7a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007e34:	4b30      	ldr	r3, [pc, #192]	@ (8007ef8 <BSP_TS_GetState+0x310>)
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ef0 <BSP_TS_GetState+0x308>)
 8007e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	0b1b      	lsrs	r3, r3, #12
 8007e48:	b299      	uxth	r1, r3
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	4413      	add	r3, r2
 8007e52:	460a      	mov	r2, r1
 8007e54:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007e56:	4b29      	ldr	r3, [pc, #164]	@ (8007efc <BSP_TS_GetState+0x314>)
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4a25      	ldr	r2, [pc, #148]	@ (8007ef4 <BSP_TS_GetState+0x30c>)
 8007e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	0b1b      	lsrs	r3, r3, #12
 8007e6a:	b299      	uxth	r1, r3
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e70:	3304      	adds	r3, #4
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	4413      	add	r3, r2
 8007e76:	460a      	mov	r2, r1
 8007e78:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee8 <BSP_TS_GetState+0x300>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f107 010c 	add.w	r1, r7, #12
 8007e84:	f107 0210 	add.w	r2, r7, #16
 8007e88:	f107 0308 	add.w	r3, r7, #8
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007e92:	f7fb fcf7 	bl	8003884 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	b2d9      	uxtb	r1, r3
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e9e:	4413      	add	r3, r2
 8007ea0:	3316      	adds	r3, #22
 8007ea2:	460a      	mov	r2, r1
 8007ea4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	b2d9      	uxtb	r1, r3
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eae:	4413      	add	r3, r2
 8007eb0:	3320      	adds	r3, #32
 8007eb2:	460a      	mov	r2, r1
 8007eb4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d836      	bhi.n	8007f2a <BSP_TS_GetState+0x342>
 8007ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <BSP_TS_GetState+0x2dc>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007ed5 	.word	0x08007ed5
 8007ec8:	08007f01 	.word	0x08007f01
 8007ecc:	08007f0f 	.word	0x08007f0f
 8007ed0:	08007f1d 	.word	0x08007f1d
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed8:	4413      	add	r3, r2
 8007eda:	331b      	adds	r3, #27
 8007edc:	2201      	movs	r2, #1
 8007ede:	701a      	strb	r2, [r3, #0]
          break;
 8007ee0:	e027      	b.n	8007f32 <BSP_TS_GetState+0x34a>
 8007ee2:	bf00      	nop
 8007ee4:	20001018 	.word	0x20001018
 8007ee8:	20001021 	.word	0x20001021
 8007eec:	20001020 	.word	0x20001020
 8007ef0:	20001024 	.word	0x20001024
 8007ef4:	20001038 	.word	0x20001038
 8007ef8:	2000101c 	.word	0x2000101c
 8007efc:	2000101e 	.word	0x2000101e
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f04:	4413      	add	r3, r2
 8007f06:	331b      	adds	r3, #27
 8007f08:	2202      	movs	r2, #2
 8007f0a:	701a      	strb	r2, [r3, #0]
          break;
 8007f0c:	e011      	b.n	8007f32 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f12:	4413      	add	r3, r2
 8007f14:	331b      	adds	r3, #27
 8007f16:	2203      	movs	r2, #3
 8007f18:	701a      	strb	r2, [r3, #0]
          break;
 8007f1a:	e00a      	b.n	8007f32 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f20:	4413      	add	r3, r2
 8007f22:	331b      	adds	r3, #27
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
          break;
 8007f28:	e003      	b.n	8007f32 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8007f30:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8007f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f34:	3301      	adds	r3, #1
 8007f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f40:	4293      	cmp	r3, r2
 8007f42:	f4ff ae71 	bcc.w	8007c28 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f80a 	bl	8007f60 <BSP_TS_Get_GestureId>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8007f52:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3754      	adds	r7, #84	@ 0x54
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd90      	pop	{r4, r7, pc}
 8007f5e:	bf00      	nop

08007f60 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8007f70:	4b3b      	ldr	r3, [pc, #236]	@ (8008060 <BSP_TS_Get_GestureId+0x100>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	f107 0308 	add.w	r3, r7, #8
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	f7fb fc68 	bl	8003852 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b49      	cmp	r3, #73	@ 0x49
 8007f86:	d05e      	beq.n	8008046 <BSP_TS_Get_GestureId+0xe6>
 8007f88:	2b49      	cmp	r3, #73	@ 0x49
 8007f8a:	d860      	bhi.n	800804e <BSP_TS_Get_GestureId+0xee>
 8007f8c:	2b1c      	cmp	r3, #28
 8007f8e:	d83f      	bhi.n	8008010 <BSP_TS_Get_GestureId+0xb0>
 8007f90:	2b1c      	cmp	r3, #28
 8007f92:	d85c      	bhi.n	800804e <BSP_TS_Get_GestureId+0xee>
 8007f94:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <BSP_TS_Get_GestureId+0x3c>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08008017 	.word	0x08008017
 8007fa0:	0800804f 	.word	0x0800804f
 8007fa4:	0800804f 	.word	0x0800804f
 8007fa8:	0800804f 	.word	0x0800804f
 8007fac:	0800804f 	.word	0x0800804f
 8007fb0:	0800804f 	.word	0x0800804f
 8007fb4:	0800804f 	.word	0x0800804f
 8007fb8:	0800804f 	.word	0x0800804f
 8007fbc:	0800804f 	.word	0x0800804f
 8007fc0:	0800804f 	.word	0x0800804f
 8007fc4:	0800804f 	.word	0x0800804f
 8007fc8:	0800804f 	.word	0x0800804f
 8007fcc:	0800804f 	.word	0x0800804f
 8007fd0:	0800804f 	.word	0x0800804f
 8007fd4:	0800804f 	.word	0x0800804f
 8007fd8:	0800804f 	.word	0x0800804f
 8007fdc:	0800801f 	.word	0x0800801f
 8007fe0:	0800804f 	.word	0x0800804f
 8007fe4:	0800804f 	.word	0x0800804f
 8007fe8:	0800804f 	.word	0x0800804f
 8007fec:	08008027 	.word	0x08008027
 8007ff0:	0800804f 	.word	0x0800804f
 8007ff4:	0800804f 	.word	0x0800804f
 8007ff8:	0800804f 	.word	0x0800804f
 8007ffc:	0800802f 	.word	0x0800802f
 8008000:	0800804f 	.word	0x0800804f
 8008004:	0800804f 	.word	0x0800804f
 8008008:	0800804f 	.word	0x0800804f
 800800c:	08008037 	.word	0x08008037
 8008010:	2b40      	cmp	r3, #64	@ 0x40
 8008012:	d014      	beq.n	800803e <BSP_TS_Get_GestureId+0xde>
 8008014:	e01b      	b.n	800804e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800801c:	e01a      	b.n	8008054 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008024:	e016      	b.n	8008054 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800802c:	e012      	b.n	8008054 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2203      	movs	r2, #3
 8008032:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008034:	e00e      	b.n	8008054 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2204      	movs	r2, #4
 800803a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800803c:	e00a      	b.n	8008054 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2205      	movs	r2, #5
 8008042:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008044:	e006      	b.n	8008054 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2206      	movs	r2, #6
 800804a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800804c:	e002      	b.n	8008054 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	73fb      	strb	r3, [r7, #15]
      break;
 8008052:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20001021 	.word	0x20001021

08008064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800806a:	4b11      	ldr	r3, [pc, #68]	@ (80080b0 <HAL_MspInit+0x4c>)
 800806c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806e:	4a10      	ldr	r2, [pc, #64]	@ (80080b0 <HAL_MspInit+0x4c>)
 8008070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008074:	6413      	str	r3, [r2, #64]	@ 0x40
 8008076:	4b0e      	ldr	r3, [pc, #56]	@ (80080b0 <HAL_MspInit+0x4c>)
 8008078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800807e:	607b      	str	r3, [r7, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008082:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <HAL_MspInit+0x4c>)
 8008084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008086:	4a0a      	ldr	r2, [pc, #40]	@ (80080b0 <HAL_MspInit+0x4c>)
 8008088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800808c:	6453      	str	r3, [r2, #68]	@ 0x44
 800808e:	4b08      	ldr	r3, [pc, #32]	@ (80080b0 <HAL_MspInit+0x4c>)
 8008090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800809a:	2200      	movs	r2, #0
 800809c:	210f      	movs	r1, #15
 800809e:	f06f 0001 	mvn.w	r0, #1
 80080a2:	f003 f811 	bl	800b0c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40023800 	.word	0x40023800

080080b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	@ 0x30
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080bc:	f107 031c 	add.w	r3, r7, #28
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	609a      	str	r2, [r3, #8]
 80080c8:	60da      	str	r2, [r3, #12]
 80080ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a36      	ldr	r2, [pc, #216]	@ (80081ac <HAL_ADC_MspInit+0xf8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d124      	bne.n	8008120 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80080d6:	4b36      	ldr	r3, [pc, #216]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 80080d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080da:	4a35      	ldr	r2, [pc, #212]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 80080dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80080e2:	4b33      	ldr	r3, [pc, #204]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 80080e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ee:	4b30      	ldr	r3, [pc, #192]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f2:	4a2f      	ldr	r2, [pc, #188]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80080fa:	4b2d      	ldr	r3, [pc, #180]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008106:	2301      	movs	r3, #1
 8008108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800810a:	2303      	movs	r3, #3
 800810c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800810e:	2300      	movs	r3, #0
 8008110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008112:	f107 031c 	add.w	r3, r7, #28
 8008116:	4619      	mov	r1, r3
 8008118:	4826      	ldr	r0, [pc, #152]	@ (80081b4 <HAL_ADC_MspInit+0x100>)
 800811a:	f003 fe8f 	bl	800be3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800811e:	e041      	b.n	80081a4 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a24      	ldr	r2, [pc, #144]	@ (80081b8 <HAL_ADC_MspInit+0x104>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d13c      	bne.n	80081a4 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800812a:	4b21      	ldr	r3, [pc, #132]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 800812c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800812e:	4a20      	ldr	r2, [pc, #128]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 8008130:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008134:	6453      	str	r3, [r2, #68]	@ 0x44
 8008136:	4b1e      	ldr	r3, [pc, #120]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 8008138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800813a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008142:	4b1b      	ldr	r3, [pc, #108]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 8008144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008146:	4a1a      	ldr	r2, [pc, #104]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 8008148:	f043 0320 	orr.w	r3, r3, #32
 800814c:	6313      	str	r3, [r2, #48]	@ 0x30
 800814e:	4b18      	ldr	r3, [pc, #96]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 8008150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800815a:	4b15      	ldr	r3, [pc, #84]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 800815c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815e:	4a14      	ldr	r2, [pc, #80]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	6313      	str	r3, [r2, #48]	@ 0x30
 8008166:	4b12      	ldr	r3, [pc, #72]	@ (80081b0 <HAL_ADC_MspInit+0xfc>)
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	60bb      	str	r3, [r7, #8]
 8008170:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8008172:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8008176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008178:	2303      	movs	r3, #3
 800817a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800817c:	2300      	movs	r3, #0
 800817e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008180:	f107 031c 	add.w	r3, r7, #28
 8008184:	4619      	mov	r1, r3
 8008186:	480d      	ldr	r0, [pc, #52]	@ (80081bc <HAL_ADC_MspInit+0x108>)
 8008188:	f003 fe58 	bl	800be3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800818c:	2301      	movs	r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008190:	2303      	movs	r3, #3
 8008192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008194:	2300      	movs	r3, #0
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008198:	f107 031c 	add.w	r3, r7, #28
 800819c:	4619      	mov	r1, r3
 800819e:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <HAL_ADC_MspInit+0x100>)
 80081a0:	f003 fe4c 	bl	800be3c <HAL_GPIO_Init>
}
 80081a4:	bf00      	nop
 80081a6:	3730      	adds	r7, #48	@ 0x30
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40012000 	.word	0x40012000
 80081b0:	40023800 	.word	0x40023800
 80081b4:	40020000 	.word	0x40020000
 80081b8:	40012200 	.word	0x40012200
 80081bc:	40021400 	.word	0x40021400

080081c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a0a      	ldr	r2, [pc, #40]	@ (80081f8 <HAL_DMA2D_MspInit+0x38>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d10b      	bne.n	80081ea <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80081d2:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <HAL_DMA2D_MspInit+0x3c>)
 80081d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d6:	4a09      	ldr	r2, [pc, #36]	@ (80081fc <HAL_DMA2D_MspInit+0x3c>)
 80081d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80081dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80081de:	4b07      	ldr	r3, [pc, #28]	@ (80081fc <HAL_DMA2D_MspInit+0x3c>)
 80081e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80081ea:	bf00      	nop
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	4002b000 	.word	0x4002b000
 80081fc:	40023800 	.word	0x40023800

08008200 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08e      	sub	sp, #56	@ 0x38
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	609a      	str	r2, [r3, #8]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a55      	ldr	r2, [pc, #340]	@ (8008374 <HAL_LTDC_MspInit+0x174>)
 800821e:	4293      	cmp	r3, r2
 8008220:	f040 80a3 	bne.w	800836a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008224:	4b54      	ldr	r3, [pc, #336]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008228:	4a53      	ldr	r2, [pc, #332]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800822a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800822e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008230:	4b51      	ldr	r3, [pc, #324]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008234:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008238:	623b      	str	r3, [r7, #32]
 800823a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800823c:	4b4e      	ldr	r3, [pc, #312]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800823e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008240:	4a4d      	ldr	r2, [pc, #308]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008242:	f043 0310 	orr.w	r3, r3, #16
 8008246:	6313      	str	r3, [r2, #48]	@ 0x30
 8008248:	4b4b      	ldr	r3, [pc, #300]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800824a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008254:	4b48      	ldr	r3, [pc, #288]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008258:	4a47      	ldr	r2, [pc, #284]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800825a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800825e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008260:	4b45      	ldr	r3, [pc, #276]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800826c:	4b42      	ldr	r3, [pc, #264]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008270:	4a41      	ldr	r2, [pc, #260]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008276:	6313      	str	r3, [r2, #48]	@ 0x30
 8008278:	4b3f      	ldr	r3, [pc, #252]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800827a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008284:	4b3c      	ldr	r3, [pc, #240]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	4a3b      	ldr	r2, [pc, #236]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800828a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800828e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008290:	4b39      	ldr	r3, [pc, #228]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 8008292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800829c:	4b36      	ldr	r3, [pc, #216]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 800829e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a0:	4a35      	ldr	r2, [pc, #212]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 80082a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80082a8:	4b33      	ldr	r3, [pc, #204]	@ (8008378 <HAL_LTDC_MspInit+0x178>)
 80082aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80082b4:	2310      	movs	r3, #16
 80082b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082b8:	2302      	movs	r3, #2
 80082ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082bc:	2300      	movs	r3, #0
 80082be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c0:	2300      	movs	r3, #0
 80082c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80082c4:	230e      	movs	r3, #14
 80082c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80082c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082cc:	4619      	mov	r1, r3
 80082ce:	482b      	ldr	r0, [pc, #172]	@ (800837c <HAL_LTDC_MspInit+0x17c>)
 80082d0:	f003 fdb4 	bl	800be3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80082d4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80082d8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082da:	2302      	movs	r3, #2
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e2:	2300      	movs	r3, #0
 80082e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80082e6:	230e      	movs	r3, #14
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80082ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082ee:	4619      	mov	r1, r3
 80082f0:	4823      	ldr	r0, [pc, #140]	@ (8008380 <HAL_LTDC_MspInit+0x180>)
 80082f2:	f003 fda3 	bl	800be3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80082f6:	23f7      	movs	r3, #247	@ 0xf7
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082fa:	2302      	movs	r3, #2
 80082fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008302:	2300      	movs	r3, #0
 8008304:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008306:	230e      	movs	r3, #14
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800830a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800830e:	4619      	mov	r1, r3
 8008310:	481c      	ldr	r0, [pc, #112]	@ (8008384 <HAL_LTDC_MspInit+0x184>)
 8008312:	f003 fd93 	bl	800be3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8008316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800831c:	2302      	movs	r3, #2
 800831e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008320:	2300      	movs	r3, #0
 8008322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008324:	2300      	movs	r3, #0
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008328:	2309      	movs	r3, #9
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800832c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008330:	4619      	mov	r1, r3
 8008332:	4815      	ldr	r0, [pc, #84]	@ (8008388 <HAL_LTDC_MspInit+0x188>)
 8008334:	f003 fd82 	bl	800be3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8008338:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800833e:	2302      	movs	r3, #2
 8008340:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008342:	2300      	movs	r3, #0
 8008344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008346:	2300      	movs	r3, #0
 8008348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800834a:	230e      	movs	r3, #14
 800834c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800834e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008352:	4619      	mov	r1, r3
 8008354:	480d      	ldr	r0, [pc, #52]	@ (800838c <HAL_LTDC_MspInit+0x18c>)
 8008356:	f003 fd71 	bl	800be3c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800835a:	2200      	movs	r2, #0
 800835c:	2105      	movs	r1, #5
 800835e:	2058      	movs	r0, #88	@ 0x58
 8008360:	f002 feb2 	bl	800b0c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8008364:	2058      	movs	r0, #88	@ 0x58
 8008366:	f002 fecb 	bl	800b100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800836a:	bf00      	nop
 800836c:	3738      	adds	r7, #56	@ 0x38
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	40016800 	.word	0x40016800
 8008378:	40023800 	.word	0x40023800
 800837c:	40021000 	.word	0x40021000
 8008380:	40022400 	.word	0x40022400
 8008384:	40022800 	.word	0x40022800
 8008388:	40021800 	.word	0x40021800
 800838c:	40022000 	.word	0x40022000

08008390 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	@ 0x28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	609a      	str	r2, [r3, #8]
 80083a4:	60da      	str	r2, [r3, #12]
 80083a6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a65      	ldr	r2, [pc, #404]	@ (8008544 <HAL_SD_MspInit+0x1b4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	f040 80c3 	bne.w	800853a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80083b4:	4b64      	ldr	r3, [pc, #400]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b8:	4a63      	ldr	r2, [pc, #396]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80083be:	6453      	str	r3, [r2, #68]	@ 0x44
 80083c0:	4b61      	ldr	r3, [pc, #388]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d0:	4a5d      	ldr	r2, [pc, #372]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083d2:	f043 0304 	orr.w	r3, r3, #4
 80083d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80083d8:	4b5b      	ldr	r3, [pc, #364]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80083e4:	4b58      	ldr	r3, [pc, #352]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e8:	4a57      	ldr	r2, [pc, #348]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083ea:	f043 0308 	orr.w	r3, r3, #8
 80083ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80083f0:	4b55      	ldr	r3, [pc, #340]	@ (8008548 <HAL_SD_MspInit+0x1b8>)
 80083f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80083fc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8008400:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008402:	2302      	movs	r3, #2
 8008404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008406:	2300      	movs	r3, #0
 8008408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800840a:	2303      	movs	r3, #3
 800840c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800840e:	230c      	movs	r3, #12
 8008410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008412:	f107 0314 	add.w	r3, r7, #20
 8008416:	4619      	mov	r1, r3
 8008418:	484c      	ldr	r0, [pc, #304]	@ (800854c <HAL_SD_MspInit+0x1bc>)
 800841a:	f003 fd0f 	bl	800be3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800841e:	2304      	movs	r3, #4
 8008420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008422:	2302      	movs	r3, #2
 8008424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800842a:	2303      	movs	r3, #3
 800842c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800842e:	230c      	movs	r3, #12
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8008432:	f107 0314 	add.w	r3, r7, #20
 8008436:	4619      	mov	r1, r3
 8008438:	4845      	ldr	r0, [pc, #276]	@ (8008550 <HAL_SD_MspInit+0x1c0>)
 800843a:	f003 fcff 	bl	800be3c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800843e:	4b45      	ldr	r3, [pc, #276]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008440:	4a45      	ldr	r2, [pc, #276]	@ (8008558 <HAL_SD_MspInit+0x1c8>)
 8008442:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8008444:	4b43      	ldr	r3, [pc, #268]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008446:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800844a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800844c:	4b41      	ldr	r3, [pc, #260]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 800844e:	2200      	movs	r2, #0
 8008450:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008452:	4b40      	ldr	r3, [pc, #256]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008454:	2200      	movs	r2, #0
 8008456:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008458:	4b3e      	ldr	r3, [pc, #248]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 800845a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800845e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008460:	4b3c      	ldr	r3, [pc, #240]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008462:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008466:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008468:	4b3a      	ldr	r3, [pc, #232]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 800846a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800846e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8008470:	4b38      	ldr	r3, [pc, #224]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008472:	2220      	movs	r2, #32
 8008474:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008476:	4b37      	ldr	r3, [pc, #220]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008478:	2200      	movs	r2, #0
 800847a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800847c:	4b35      	ldr	r3, [pc, #212]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 800847e:	2204      	movs	r2, #4
 8008480:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008482:	4b34      	ldr	r3, [pc, #208]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008484:	2203      	movs	r2, #3
 8008486:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8008488:	4b32      	ldr	r3, [pc, #200]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 800848a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800848e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008490:	4b30      	ldr	r3, [pc, #192]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 8008492:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008496:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8008498:	482e      	ldr	r0, [pc, #184]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 800849a:	f002 fe3f 	bl	800b11c <HAL_DMA_Init>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80084a4:	f7fd fcd0 	bl	8005e48 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 80084ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80084ae:	4a29      	ldr	r2, [pc, #164]	@ (8008554 <HAL_SD_MspInit+0x1c4>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80084b4:	4b29      	ldr	r3, [pc, #164]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008560 <HAL_SD_MspInit+0x1d0>)
 80084b8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80084ba:	4b28      	ldr	r3, [pc, #160]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80084c0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80084c2:	4b26      	ldr	r3, [pc, #152]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084c4:	2240      	movs	r2, #64	@ 0x40
 80084c6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084c8:	4b24      	ldr	r3, [pc, #144]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80084ce:	4b23      	ldr	r3, [pc, #140]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084d4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80084d6:	4b21      	ldr	r3, [pc, #132]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80084dc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80084de:	4b1f      	ldr	r3, [pc, #124]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80084e4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80084e6:	4b1d      	ldr	r3, [pc, #116]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084e8:	2220      	movs	r2, #32
 80084ea:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80084ec:	4b1b      	ldr	r3, [pc, #108]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80084f2:	4b1a      	ldr	r3, [pc, #104]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084f4:	2204      	movs	r2, #4
 80084f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80084f8:	4b18      	ldr	r3, [pc, #96]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 80084fa:	2203      	movs	r2, #3
 80084fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80084fe:	4b17      	ldr	r3, [pc, #92]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 8008500:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008504:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008506:	4b15      	ldr	r3, [pc, #84]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 8008508:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800850c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800850e:	4813      	ldr	r0, [pc, #76]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 8008510:	f002 fe04 	bl	800b11c <HAL_DMA_Init>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800851a:	f7fd fc95 	bl	8005e48 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a0e      	ldr	r2, [pc, #56]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 8008522:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008524:	4a0d      	ldr	r2, [pc, #52]	@ (800855c <HAL_SD_MspInit+0x1cc>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800852a:	2200      	movs	r2, #0
 800852c:	2105      	movs	r1, #5
 800852e:	2031      	movs	r0, #49	@ 0x31
 8008530:	f002 fdca 	bl	800b0c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8008534:	2031      	movs	r0, #49	@ 0x31
 8008536:	f002 fde3 	bl	800b100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800853a:	bf00      	nop
 800853c:	3728      	adds	r7, #40	@ 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40012c00 	.word	0x40012c00
 8008548:	40023800 	.word	0x40023800
 800854c:	40020800 	.word	0x40020800
 8008550:	40020c00 	.word	0x40020c00
 8008554:	200007ac 	.word	0x200007ac
 8008558:	40026458 	.word	0x40026458
 800855c:	2000080c 	.word	0x2000080c
 8008560:	400264a0 	.word	0x400264a0

08008564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b0ac      	sub	sp, #176	@ 0xb0
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800856c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	60da      	str	r2, [r3, #12]
 800857a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800857c:	f107 0318 	add.w	r3, r7, #24
 8008580:	2284      	movs	r2, #132	@ 0x84
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f00d fd96 	bl	80160b6 <memset>
  if(huart->Instance==USART1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a32      	ldr	r2, [pc, #200]	@ (8008658 <HAL_UART_MspInit+0xf4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d15c      	bne.n	800864e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008594:	2340      	movs	r3, #64	@ 0x40
 8008596:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008598:	2300      	movs	r3, #0
 800859a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800859c:	f107 0318 	add.w	r3, r7, #24
 80085a0:	4618      	mov	r0, r3
 80085a2:	f005 fd73 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80085ac:	f7fd fc4c 	bl	8005e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085b0:	4b2a      	ldr	r3, [pc, #168]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b4:	4a29      	ldr	r2, [pc, #164]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085b6:	f043 0310 	orr.w	r3, r3, #16
 80085ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80085bc:	4b27      	ldr	r3, [pc, #156]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085c8:	4b24      	ldr	r3, [pc, #144]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085cc:	4a23      	ldr	r2, [pc, #140]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085ce:	f043 0302 	orr.w	r3, r3, #2
 80085d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80085d4:	4b21      	ldr	r3, [pc, #132]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	613b      	str	r3, [r7, #16]
 80085de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085e0:	4b1e      	ldr	r3, [pc, #120]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e4:	4a1d      	ldr	r2, [pc, #116]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80085ec:	4b1b      	ldr	r3, [pc, #108]	@ (800865c <HAL_UART_MspInit+0xf8>)
 80085ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80085f8:	2380      	movs	r3, #128	@ 0x80
 80085fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085fe:	2302      	movs	r3, #2
 8008600:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008604:	2300      	movs	r3, #0
 8008606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800860a:	2300      	movs	r3, #0
 800860c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008610:	2307      	movs	r3, #7
 8008612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008616:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800861a:	4619      	mov	r1, r3
 800861c:	4810      	ldr	r0, [pc, #64]	@ (8008660 <HAL_UART_MspInit+0xfc>)
 800861e:	f003 fc0d 	bl	800be3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8008622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008626:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800862a:	2302      	movs	r3, #2
 800862c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008630:	2300      	movs	r3, #0
 8008632:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008636:	2300      	movs	r3, #0
 8008638:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800863c:	2307      	movs	r3, #7
 800863e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8008642:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008646:	4619      	mov	r1, r3
 8008648:	4806      	ldr	r0, [pc, #24]	@ (8008664 <HAL_UART_MspInit+0x100>)
 800864a:	f003 fbf7 	bl	800be3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800864e:	bf00      	nop
 8008650:	37b0      	adds	r7, #176	@ 0xb0
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	40011000 	.word	0x40011000
 800865c:	40023800 	.word	0x40023800
 8008660:	40020400 	.word	0x40020400
 8008664:	40020000 	.word	0x40020000

08008668 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	609a      	str	r2, [r3, #8]
 8008678:	60da      	str	r2, [r3, #12]
 800867a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800867c:	4b42      	ldr	r3, [pc, #264]	@ (8008788 <HAL_FMC_MspInit+0x120>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d17c      	bne.n	800877e <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 8008684:	4b40      	ldr	r3, [pc, #256]	@ (8008788 <HAL_FMC_MspInit+0x120>)
 8008686:	2201      	movs	r2, #1
 8008688:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800868a:	4b40      	ldr	r3, [pc, #256]	@ (800878c <HAL_FMC_MspInit+0x124>)
 800868c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868e:	4a3f      	ldr	r2, [pc, #252]	@ (800878c <HAL_FMC_MspInit+0x124>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	6393      	str	r3, [r2, #56]	@ 0x38
 8008696:	4b3d      	ldr	r3, [pc, #244]	@ (800878c <HAL_FMC_MspInit+0x124>)
 8008698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	603b      	str	r3, [r7, #0]
 80086a0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80086a2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80086a6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a8:	2302      	movs	r3, #2
 80086aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086b0:	2303      	movs	r3, #3
 80086b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80086b4:	230c      	movs	r3, #12
 80086b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80086b8:	1d3b      	adds	r3, r7, #4
 80086ba:	4619      	mov	r1, r3
 80086bc:	4834      	ldr	r0, [pc, #208]	@ (8008790 <HAL_FMC_MspInit+0x128>)
 80086be:	f003 fbbd 	bl	800be3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80086c2:	2360      	movs	r3, #96	@ 0x60
 80086c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c6:	2302      	movs	r3, #2
 80086c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ce:	2303      	movs	r3, #3
 80086d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80086d2:	230c      	movs	r3, #12
 80086d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086d6:	1d3b      	adds	r3, r7, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	482e      	ldr	r0, [pc, #184]	@ (8008794 <HAL_FMC_MspInit+0x12c>)
 80086dc:	f003 fbae 	bl	800be3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80086e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80086e4:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e6:	2302      	movs	r3, #2
 80086e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ee:	2303      	movs	r3, #3
 80086f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80086f2:	230c      	movs	r3, #12
 80086f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80086f6:	1d3b      	adds	r3, r7, #4
 80086f8:	4619      	mov	r1, r3
 80086fa:	4827      	ldr	r0, [pc, #156]	@ (8008798 <HAL_FMC_MspInit+0x130>)
 80086fc:	f003 fb9e 	bl	800be3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8008700:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8008704:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008706:	2302      	movs	r3, #2
 8008708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800870e:	2303      	movs	r3, #3
 8008710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008712:	230c      	movs	r3, #12
 8008714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008716:	1d3b      	adds	r3, r7, #4
 8008718:	4619      	mov	r1, r3
 800871a:	4820      	ldr	r0, [pc, #128]	@ (800879c <HAL_FMC_MspInit+0x134>)
 800871c:	f003 fb8e 	bl	800be3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8008720:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8008724:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008726:	2302      	movs	r3, #2
 8008728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800872e:	2303      	movs	r3, #3
 8008730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008732:	230c      	movs	r3, #12
 8008734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4819      	ldr	r0, [pc, #100]	@ (80087a0 <HAL_FMC_MspInit+0x138>)
 800873c:	f003 fb7e 	bl	800be3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8008740:	2328      	movs	r3, #40	@ 0x28
 8008742:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008744:	2302      	movs	r3, #2
 8008746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800874c:	2303      	movs	r3, #3
 800874e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008750:	230c      	movs	r3, #12
 8008752:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	4619      	mov	r1, r3
 8008758:	4812      	ldr	r0, [pc, #72]	@ (80087a4 <HAL_FMC_MspInit+0x13c>)
 800875a:	f003 fb6f 	bl	800be3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800875e:	2308      	movs	r3, #8
 8008760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008762:	2302      	movs	r3, #2
 8008764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800876a:	2303      	movs	r3, #3
 800876c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800876e:	230c      	movs	r3, #12
 8008770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	4619      	mov	r1, r3
 8008776:	480c      	ldr	r0, [pc, #48]	@ (80087a8 <HAL_FMC_MspInit+0x140>)
 8008778:	f003 fb60 	bl	800be3c <HAL_GPIO_Init>
 800877c:	e000      	b.n	8008780 <HAL_FMC_MspInit+0x118>
    return;
 800877e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	2000104c 	.word	0x2000104c
 800878c:	40023800 	.word	0x40023800
 8008790:	40021000 	.word	0x40021000
 8008794:	40020400 	.word	0x40020400
 8008798:	40021800 	.word	0x40021800
 800879c:	40020c00 	.word	0x40020c00
 80087a0:	40021400 	.word	0x40021400
 80087a4:	40021c00 	.word	0x40021c00
 80087a8:	40020800 	.word	0x40020800

080087ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80087b4:	f7ff ff58 	bl	8008668 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	@ 0x28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a61      	ldr	r2, [pc, #388]	@ (8008954 <HAL_SAI_MspInit+0x194>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d15b      	bne.n	800888a <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80087d2:	4b61      	ldr	r3, [pc, #388]	@ (8008958 <HAL_SAI_MspInit+0x198>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80087da:	4b60      	ldr	r3, [pc, #384]	@ (800895c <HAL_SAI_MspInit+0x19c>)
 80087dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087de:	4a5f      	ldr	r2, [pc, #380]	@ (800895c <HAL_SAI_MspInit+0x19c>)
 80087e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80087e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80087e6:	4b5d      	ldr	r3, [pc, #372]	@ (800895c <HAL_SAI_MspInit+0x19c>)
 80087e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80087f2:	4b59      	ldr	r3, [pc, #356]	@ (8008958 <HAL_SAI_MspInit+0x198>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	4a57      	ldr	r2, [pc, #348]	@ (8008958 <HAL_SAI_MspInit+0x198>)
 80087fa:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80087fc:	23f0      	movs	r3, #240	@ 0xf0
 80087fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008800:	2302      	movs	r3, #2
 8008802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008804:	2300      	movs	r3, #0
 8008806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008808:	2300      	movs	r3, #0
 800880a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800880c:	230a      	movs	r3, #10
 800880e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008810:	f107 0314 	add.w	r3, r7, #20
 8008814:	4619      	mov	r1, r3
 8008816:	4852      	ldr	r0, [pc, #328]	@ (8008960 <HAL_SAI_MspInit+0x1a0>)
 8008818:	f003 fb10 	bl	800be3c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 800881c:	4b51      	ldr	r3, [pc, #324]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 800881e:	4a52      	ldr	r2, [pc, #328]	@ (8008968 <HAL_SAI_MspInit+0x1a8>)
 8008820:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8008822:	4b50      	ldr	r3, [pc, #320]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008824:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8008828:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800882a:	4b4e      	ldr	r3, [pc, #312]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 800882c:	2240      	movs	r2, #64	@ 0x40
 800882e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008830:	4b4c      	ldr	r3, [pc, #304]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008832:	2200      	movs	r2, #0
 8008834:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8008836:	4b4b      	ldr	r3, [pc, #300]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800883c:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800883e:	4b49      	ldr	r3, [pc, #292]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008844:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008846:	4b47      	ldr	r3, [pc, #284]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008848:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800884c:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800884e:	4b45      	ldr	r3, [pc, #276]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008854:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8008856:	4b43      	ldr	r3, [pc, #268]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008858:	2200      	movs	r2, #0
 800885a:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800885c:	4b41      	ldr	r3, [pc, #260]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 800885e:	2200      	movs	r2, #0
 8008860:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8008862:	4840      	ldr	r0, [pc, #256]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008864:	f002 fc5a 	bl	800b11c <HAL_DMA_Init>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 800886e:	f7fd faeb 	bl	8005e48 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a3b      	ldr	r2, [pc, #236]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008876:	671a      	str	r2, [r3, #112]	@ 0x70
 8008878:	4a3a      	ldr	r2, [pc, #232]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a38      	ldr	r2, [pc, #224]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008882:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008884:	4a37      	ldr	r2, [pc, #220]	@ (8008964 <HAL_SAI_MspInit+0x1a4>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a37      	ldr	r2, [pc, #220]	@ (800896c <HAL_SAI_MspInit+0x1ac>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d15b      	bne.n	800894c <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8008894:	4b30      	ldr	r3, [pc, #192]	@ (8008958 <HAL_SAI_MspInit+0x198>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10b      	bne.n	80088b4 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800889c:	4b2f      	ldr	r3, [pc, #188]	@ (800895c <HAL_SAI_MspInit+0x19c>)
 800889e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a0:	4a2e      	ldr	r2, [pc, #184]	@ (800895c <HAL_SAI_MspInit+0x19c>)
 80088a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80088a8:	4b2c      	ldr	r3, [pc, #176]	@ (800895c <HAL_SAI_MspInit+0x19c>)
 80088aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80088b4:	4b28      	ldr	r3, [pc, #160]	@ (8008958 <HAL_SAI_MspInit+0x198>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3301      	adds	r3, #1
 80088ba:	4a27      	ldr	r2, [pc, #156]	@ (8008958 <HAL_SAI_MspInit+0x198>)
 80088bc:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80088be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c4:	2302      	movs	r3, #2
 80088c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088cc:	2300      	movs	r3, #0
 80088ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80088d0:	230a      	movs	r3, #10
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80088d4:	f107 0314 	add.w	r3, r7, #20
 80088d8:	4619      	mov	r1, r3
 80088da:	4825      	ldr	r0, [pc, #148]	@ (8008970 <HAL_SAI_MspInit+0x1b0>)
 80088dc:	f003 faae 	bl	800be3c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80088e0:	4b24      	ldr	r3, [pc, #144]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 80088e2:	4a25      	ldr	r2, [pc, #148]	@ (8008978 <HAL_SAI_MspInit+0x1b8>)
 80088e4:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80088e6:	4b23      	ldr	r3, [pc, #140]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088ec:	4b21      	ldr	r3, [pc, #132]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80088f2:	4b20      	ldr	r3, [pc, #128]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80088f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 80088fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80088fe:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008900:	4b1c      	ldr	r3, [pc, #112]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 8008902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008906:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008908:	4b1a      	ldr	r3, [pc, #104]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 800890a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800890e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8008910:	4b18      	ldr	r3, [pc, #96]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 8008912:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008916:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8008918:	4b16      	ldr	r3, [pc, #88]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 800891a:	2200      	movs	r2, #0
 800891c:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800891e:	4b15      	ldr	r3, [pc, #84]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 8008920:	2200      	movs	r2, #0
 8008922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8008924:	4813      	ldr	r0, [pc, #76]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 8008926:	f002 fbf9 	bl	800b11c <HAL_DMA_Init>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8008930:	f7fd fa8a 	bl	8005e48 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a0f      	ldr	r2, [pc, #60]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 8008938:	671a      	str	r2, [r3, #112]	@ 0x70
 800893a:	4a0e      	ldr	r2, [pc, #56]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a0c      	ldr	r2, [pc, #48]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 8008944:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008946:	4a0b      	ldr	r2, [pc, #44]	@ (8008974 <HAL_SAI_MspInit+0x1b4>)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800894c:	bf00      	nop
 800894e:	3728      	adds	r7, #40	@ 0x28
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	40015c04 	.word	0x40015c04
 8008958:	20001050 	.word	0x20001050
 800895c:	40023800 	.word	0x40023800
 8008960:	40022000 	.word	0x40022000
 8008964:	20000668 	.word	0x20000668
 8008968:	40026470 	.word	0x40026470
 800896c:	40015c24 	.word	0x40015c24
 8008970:	40021800 	.word	0x40021800
 8008974:	200006c8 	.word	0x200006c8
 8008978:	400264b8 	.word	0x400264b8

0800897c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a23      	ldr	r2, [pc, #140]	@ (8008a18 <HAL_SAI_MspDeInit+0x9c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d11c      	bne.n	80089c8 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 800898e:	4b23      	ldr	r3, [pc, #140]	@ (8008a1c <HAL_SAI_MspDeInit+0xa0>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3b01      	subs	r3, #1
 8008994:	4a21      	ldr	r2, [pc, #132]	@ (8008a1c <HAL_SAI_MspDeInit+0xa0>)
 8008996:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8008998:	4b20      	ldr	r3, [pc, #128]	@ (8008a1c <HAL_SAI_MspDeInit+0xa0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80089a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008a20 <HAL_SAI_MspDeInit+0xa4>)
 80089a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008a20 <HAL_SAI_MspDeInit+0xa4>)
 80089a6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80089aa:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 80089ac:	21f0      	movs	r1, #240	@ 0xf0
 80089ae:	481d      	ldr	r0, [pc, #116]	@ (8008a24 <HAL_SAI_MspDeInit+0xa8>)
 80089b0:	f003 fbf0 	bl	800c194 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b8:	4618      	mov	r0, r3
 80089ba:	f002 fc5d 	bl	800b278 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 fc58 	bl	800b278 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a16      	ldr	r2, [pc, #88]	@ (8008a28 <HAL_SAI_MspDeInit+0xac>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d11d      	bne.n	8008a0e <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 80089d2:	4b12      	ldr	r3, [pc, #72]	@ (8008a1c <HAL_SAI_MspDeInit+0xa0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4a10      	ldr	r2, [pc, #64]	@ (8008a1c <HAL_SAI_MspDeInit+0xa0>)
 80089da:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80089dc:	4b0f      	ldr	r3, [pc, #60]	@ (8008a1c <HAL_SAI_MspDeInit+0xa0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 80089e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008a20 <HAL_SAI_MspDeInit+0xa4>)
 80089e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008a20 <HAL_SAI_MspDeInit+0xa4>)
 80089ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80089ee:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 80089f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089f4:	480d      	ldr	r0, [pc, #52]	@ (8008a2c <HAL_SAI_MspDeInit+0xb0>)
 80089f6:	f003 fbcd 	bl	800c194 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089fe:	4618      	mov	r0, r3
 8008a00:	f002 fc3a 	bl	800b278 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f002 fc35 	bl	800b278 <HAL_DMA_DeInit>
    }
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40015c04 	.word	0x40015c04
 8008a1c:	20001050 	.word	0x20001050
 8008a20:	40023800 	.word	0x40023800
 8008a24:	40022000 	.word	0x40022000
 8008a28:	40015c24 	.word	0x40015c24
 8008a2c:	40021800 	.word	0x40021800

08008a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08e      	sub	sp, #56	@ 0x38
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008a40:	4b33      	ldr	r3, [pc, #204]	@ (8008b10 <HAL_InitTick+0xe0>)
 8008a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a44:	4a32      	ldr	r2, [pc, #200]	@ (8008b10 <HAL_InitTick+0xe0>)
 8008a46:	f043 0310 	orr.w	r3, r3, #16
 8008a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a4c:	4b30      	ldr	r3, [pc, #192]	@ (8008b10 <HAL_InitTick+0xe0>)
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a50:	f003 0310 	and.w	r3, r3, #16
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008a58:	f107 0210 	add.w	r2, r7, #16
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f005 fae0 	bl	800e028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008a72:	f005 fab1 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 8008a76:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a78:	e004      	b.n	8008a84 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008a7a:	f005 faad 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a86:	4a23      	ldr	r2, [pc, #140]	@ (8008b14 <HAL_InitTick+0xe4>)
 8008a88:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8c:	0c9b      	lsrs	r3, r3, #18
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008a92:	4b21      	ldr	r3, [pc, #132]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008a94:	4a21      	ldr	r2, [pc, #132]	@ (8008b1c <HAL_InitTick+0xec>)
 8008a96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008a98:	4b1f      	ldr	r3, [pc, #124]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008a9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008a9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008aac:	4b1a      	ldr	r3, [pc, #104]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ab2:	4b19      	ldr	r3, [pc, #100]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008ab8:	4817      	ldr	r0, [pc, #92]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008aba:	f007 fe2e 	bl	801071a <HAL_TIM_Base_Init>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8008ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d11b      	bne.n	8008b04 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008acc:	4812      	ldr	r0, [pc, #72]	@ (8008b18 <HAL_InitTick+0xe8>)
 8008ace:	f007 fe85 	bl	80107dc <HAL_TIM_Base_Start_IT>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8008ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d111      	bne.n	8008b04 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008ae0:	2036      	movs	r0, #54	@ 0x36
 8008ae2:	f002 fb0d 	bl	800b100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b0f      	cmp	r3, #15
 8008aea:	d808      	bhi.n	8008afe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008aec:	2200      	movs	r2, #0
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	2036      	movs	r0, #54	@ 0x36
 8008af2:	f002 fae9 	bl	800b0c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008af6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b20 <HAL_InitTick+0xf0>)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	e002      	b.n	8008b04 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008b04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3738      	adds	r7, #56	@ 0x38
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	40023800 	.word	0x40023800
 8008b14:	431bde83 	.word	0x431bde83
 8008b18:	20001054 	.word	0x20001054
 8008b1c:	40001000 	.word	0x40001000
 8008b20:	20000094 	.word	0x20000094

08008b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <NMI_Handler+0x4>

08008b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b30:	bf00      	nop
 8008b32:	e7fd      	b.n	8008b30 <HardFault_Handler+0x4>

08008b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <MemManage_Handler+0x4>

08008b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b40:	bf00      	nop
 8008b42:	e7fd      	b.n	8008b40 <BusFault_Handler+0x4>

08008b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b48:	bf00      	nop
 8008b4a:	e7fd      	b.n	8008b48 <UsageFault_Handler+0x4>

08008b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b50:	bf00      	nop
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
	...

08008b5c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8008b60:	4802      	ldr	r0, [pc, #8]	@ (8008b6c <SDMMC1_IRQHandler+0x10>)
 8008b62:	f006 fea1 	bl	800f8a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8008b66:	bf00      	nop
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000728 	.word	0x20000728

08008b70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008b74:	4802      	ldr	r0, [pc, #8]	@ (8008b80 <TIM6_DAC_IRQHandler+0x10>)
 8008b76:	f007 fea9 	bl	80108cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008b7a:	bf00      	nop
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20001054 	.word	0x20001054

08008b84 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8008b88:	4802      	ldr	r0, [pc, #8]	@ (8008b94 <DMA2_Stream3_IRQHandler+0x10>)
 8008b8a:	f002 fc55 	bl	800b438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008b8e:	bf00      	nop
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	200007ac 	.word	0x200007ac

08008b98 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8008b9c:	4802      	ldr	r0, [pc, #8]	@ (8008ba8 <DMA2_Stream4_IRQHandler+0x10>)
 8008b9e:	f002 fc4b 	bl	800b438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8008ba2:	bf00      	nop
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000668 	.word	0x20000668

08008bac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8008bb0:	4802      	ldr	r0, [pc, #8]	@ (8008bbc <DMA2_Stream6_IRQHandler+0x10>)
 8008bb2:	f002 fc41 	bl	800b438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8008bb6:	bf00      	nop
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000080c 	.word	0x2000080c

08008bc0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8008bc4:	4802      	ldr	r0, [pc, #8]	@ (8008bd0 <DMA2_Stream7_IRQHandler+0x10>)
 8008bc6:	f002 fc37 	bl	800b438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200006c8 	.word	0x200006c8

08008bd4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8008bd8:	4802      	ldr	r0, [pc, #8]	@ (8008be4 <LTDC_IRQHandler+0x10>)
 8008bda:	f004 fa93 	bl	800d104 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8008bde:	bf00      	nop
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200004b8 	.word	0x200004b8

08008be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
	return 1;
 8008bec:	2301      	movs	r3, #1
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <_kill>:

int _kill(int pid, int sig)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008c02:	f00d fb0d 	bl	8016220 <__errno>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2216      	movs	r2, #22
 8008c0a:	601a      	str	r2, [r3, #0]
	return -1;
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <_exit>:

void _exit (int status)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008c20:	f04f 31ff 	mov.w	r1, #4294967295
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff ffe7 	bl	8008bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <_exit+0x12>

08008c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b086      	sub	sp, #24
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	e00a      	b.n	8008c56 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008c40:	f3af 8000 	nop.w
 8008c44:	4601      	mov	r1, r0
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	60ba      	str	r2, [r7, #8]
 8008c4c:	b2ca      	uxtb	r2, r1
 8008c4e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	3301      	adds	r3, #1
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	dbf0      	blt.n	8008c40 <_read+0x12>
	}

return len;
 8008c5e:	687b      	ldr	r3, [r7, #4]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	e009      	b.n	8008c8e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	60ba      	str	r2, [r7, #8]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	dbf1      	blt.n	8008c7a <_write+0x12>
	}
	return len;
 8008c96:	687b      	ldr	r3, [r7, #4]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <_close>:

int _close(int file)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	return -1;
 8008ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008cc8:	605a      	str	r2, [r3, #4]
	return 0;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <_isatty>:

int _isatty(int file)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	return 1;
 8008ce0:	2301      	movs	r3, #1
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
	return 0;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d10:	4a14      	ldr	r2, [pc, #80]	@ (8008d64 <_sbrk+0x5c>)
 8008d12:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <_sbrk+0x60>)
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d1c:	4b13      	ldr	r3, [pc, #76]	@ (8008d6c <_sbrk+0x64>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d24:	4b11      	ldr	r3, [pc, #68]	@ (8008d6c <_sbrk+0x64>)
 8008d26:	4a12      	ldr	r2, [pc, #72]	@ (8008d70 <_sbrk+0x68>)
 8008d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d2a:	4b10      	ldr	r3, [pc, #64]	@ (8008d6c <_sbrk+0x64>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4413      	add	r3, r2
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d207      	bcs.n	8008d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d38:	f00d fa72 	bl	8016220 <__errno>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	220c      	movs	r2, #12
 8008d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d42:	f04f 33ff 	mov.w	r3, #4294967295
 8008d46:	e009      	b.n	8008d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d48:	4b08      	ldr	r3, [pc, #32]	@ (8008d6c <_sbrk+0x64>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d4e:	4b07      	ldr	r3, [pc, #28]	@ (8008d6c <_sbrk+0x64>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	4a05      	ldr	r2, [pc, #20]	@ (8008d6c <_sbrk+0x64>)
 8008d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20050000 	.word	0x20050000
 8008d68:	00000800 	.word	0x00000800
 8008d6c:	200010a0 	.word	0x200010a0
 8008d70:	20009808 	.word	0x20009808

08008d74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d78:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <SystemInit+0x20>)
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d7e:	4a05      	ldr	r2, [pc, #20]	@ (8008d94 <SystemInit+0x20>)
 8008d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d88:	bf00      	nop
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	e000ed00 	.word	0xe000ed00

08008d98 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	4603      	mov	r3, r0
 8008da2:	81fb      	strh	r3, [r7, #14]
 8008da4:	460b      	mov	r3, r1
 8008da6:	81bb      	strh	r3, [r7, #12]
 8008da8:	4613      	mov	r3, r2
 8008daa:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8008db0:	89bb      	ldrh	r3, [r7, #12]
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8008db6:	89bb      	ldrh	r3, [r7, #12]
 8008db8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008dbc:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8008dc2:	f7fd f99d 	bl	8006100 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8008dc6:	89fb      	ldrh	r3, [r7, #14]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2203      	movs	r2, #3
 8008dcc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f001 fc35 	bl	800a640 <CODEC_IO_Write>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8008de0:	89fb      	ldrh	r3, [r7, #14]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2200      	movs	r2, #0
 8008de6:	f640 0117 	movw	r1, #2071	@ 0x817
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fc28 	bl	800a640 <CODEC_IO_Write>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	4413      	add	r3, r2
 8008df8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8008dfa:	89fb      	ldrh	r3, [r7, #14]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 fc1b 	bl	800a640 <CODEC_IO_Write>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8008e14:	89fb      	ldrh	r3, [r7, #14]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	226c      	movs	r2, #108	@ 0x6c
 8008e1a:	2139      	movs	r1, #57	@ 0x39
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f001 fc0f 	bl	800a640 <CODEC_IO_Write>
 8008e22:	4603      	mov	r3, r0
 8008e24:	461a      	mov	r2, r3
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8008e2c:	8afb      	ldrh	r3, [r7, #22]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00c      	beq.n	8008e4c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8008e32:	89fb      	ldrh	r3, [r7, #14]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2213      	movs	r2, #19
 8008e38:	2101      	movs	r1, #1
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 fc00 	bl	800a640 <CODEC_IO_Write>
 8008e40:	4603      	mov	r3, r0
 8008e42:	461a      	mov	r2, r3
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	4413      	add	r3, r2
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e00b      	b.n	8008e64 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8008e4c:	89fb      	ldrh	r3, [r7, #14]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2203      	movs	r2, #3
 8008e52:	2101      	movs	r1, #1
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fbf3 	bl	800a640 <CODEC_IO_Write>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8008e64:	2032      	movs	r0, #50	@ 0x32
 8008e66:	f7fd f9b3 	bl	80061d0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8008e6a:	8b3b      	ldrh	r3, [r7, #24]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 815f 	beq.w	8009130 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8008e72:	4bae      	ldr	r3, [pc, #696]	@ (800912c <wm8994_Init+0x394>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8008e78:	8b3b      	ldrh	r3, [r7, #24]
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	f000 808c 	beq.w	8008f98 <wm8994_Init+0x200>
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	f300 8111 	bgt.w	80090a8 <wm8994_Init+0x310>
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d002      	beq.n	8008e90 <wm8994_Init+0xf8>
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d042      	beq.n	8008f14 <wm8994_Init+0x17c>
 8008e8e:	e10b      	b.n	80090a8 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8008e90:	89fb      	ldrh	r3, [r7, #14]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8008e98:	2105      	movs	r1, #5
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f001 fbd0 	bl	800a640 <CODEC_IO_Write>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8008eaa:	89fb      	ldrh	r3, [r7, #14]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f240 6101 	movw	r1, #1537	@ 0x601
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 fbc3 	bl	800a640 <CODEC_IO_Write>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8008ec4:	89fb      	ldrh	r3, [r7, #14]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f240 6102 	movw	r1, #1538	@ 0x602
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 fbb6 	bl	800a640 <CODEC_IO_Write>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f240 6104 	movw	r1, #1540	@ 0x604
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 fba9 	bl	800a640 <CODEC_IO_Write>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8008ef8:	89fb      	ldrh	r3, [r7, #14]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2202      	movs	r2, #2
 8008efe:	f240 6105 	movw	r1, #1541	@ 0x605
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 fb9c 	bl	800a640 <CODEC_IO_Write>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4413      	add	r3, r2
 8008f10:	61fb      	str	r3, [r7, #28]
      break;
 8008f12:	e110      	b.n	8009136 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008f14:	89fb      	ldrh	r3, [r7, #14]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f240 3203 	movw	r2, #771	@ 0x303
 8008f1c:	2105      	movs	r1, #5
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 fb8e 	bl	800a640 <CODEC_IO_Write>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8008f2e:	89fb      	ldrh	r3, [r7, #14]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2201      	movs	r2, #1
 8008f34:	f240 6101 	movw	r1, #1537	@ 0x601
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 fb81 	bl	800a640 <CODEC_IO_Write>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008f48:	89fb      	ldrh	r3, [r7, #14]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f240 6102 	movw	r1, #1538	@ 0x602
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fb74 	bl	800a640 <CODEC_IO_Write>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	4413      	add	r3, r2
 8008f60:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8008f62:	89fb      	ldrh	r3, [r7, #14]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2200      	movs	r2, #0
 8008f68:	f240 6104 	movw	r1, #1540	@ 0x604
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 fb67 	bl	800a640 <CODEC_IO_Write>
 8008f72:	4603      	mov	r3, r0
 8008f74:	461a      	mov	r2, r3
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8008f7c:	89fb      	ldrh	r3, [r7, #14]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2200      	movs	r2, #0
 8008f82:	f240 6105 	movw	r1, #1541	@ 0x605
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fb5a 	bl	800a640 <CODEC_IO_Write>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	4413      	add	r3, r2
 8008f94:	61fb      	str	r3, [r7, #28]
      break;
 8008f96:	e0ce      	b.n	8009136 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008f98:	8afb      	ldrh	r3, [r7, #22]
 8008f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f9e:	d141      	bne.n	8009024 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8008fa0:	89fb      	ldrh	r3, [r7, #14]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8008fa8:	2105      	movs	r1, #5
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 fb48 	bl	800a640 <CODEC_IO_Write>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8008fba:	89fb      	ldrh	r3, [r7, #14]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	f240 6101 	movw	r1, #1537	@ 0x601
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 fb3b 	bl	800a640 <CODEC_IO_Write>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8008fd4:	89fb      	ldrh	r3, [r7, #14]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2203      	movs	r2, #3
 8008fda:	f240 6102 	movw	r1, #1538	@ 0x602
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 fb2e 	bl	800a640 <CODEC_IO_Write>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8008fee:	89fb      	ldrh	r3, [r7, #14]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	f240 6104 	movw	r1, #1540	@ 0x604
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fb21 	bl	800a640 <CODEC_IO_Write>
 8008ffe:	4603      	mov	r3, r0
 8009000:	461a      	mov	r2, r3
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	4413      	add	r3, r2
 8009006:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8009008:	89fb      	ldrh	r3, [r7, #14]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2203      	movs	r2, #3
 800900e:	f240 6105 	movw	r1, #1541	@ 0x605
 8009012:	4618      	mov	r0, r3
 8009014:	f001 fb14 	bl	800a640 <CODEC_IO_Write>
 8009018:	4603      	mov	r3, r0
 800901a:	461a      	mov	r2, r3
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8009022:	e088      	b.n	8009136 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8009024:	89fb      	ldrh	r3, [r7, #14]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800902c:	2105      	movs	r1, #5
 800902e:	4618      	mov	r0, r3
 8009030:	f001 fb06 	bl	800a640 <CODEC_IO_Write>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	4413      	add	r3, r2
 800903c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800903e:	89fb      	ldrh	r3, [r7, #14]
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2201      	movs	r2, #1
 8009044:	f240 6101 	movw	r1, #1537	@ 0x601
 8009048:	4618      	mov	r0, r3
 800904a:	f001 faf9 	bl	800a640 <CODEC_IO_Write>
 800904e:	4603      	mov	r3, r0
 8009050:	461a      	mov	r2, r3
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8009058:	89fb      	ldrh	r3, [r7, #14]
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2201      	movs	r2, #1
 800905e:	f240 6102 	movw	r1, #1538	@ 0x602
 8009062:	4618      	mov	r0, r3
 8009064:	f001 faec 	bl	800a640 <CODEC_IO_Write>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	4413      	add	r3, r2
 8009070:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8009072:	89fb      	ldrh	r3, [r7, #14]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2202      	movs	r2, #2
 8009078:	f240 6104 	movw	r1, #1540	@ 0x604
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fadf 	bl	800a640 <CODEC_IO_Write>
 8009082:	4603      	mov	r3, r0
 8009084:	461a      	mov	r2, r3
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800908c:	89fb      	ldrh	r3, [r7, #14]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2202      	movs	r2, #2
 8009092:	f240 6105 	movw	r1, #1541	@ 0x605
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fad2 	bl	800a640 <CODEC_IO_Write>
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	4413      	add	r3, r2
 80090a4:	61fb      	str	r3, [r7, #28]
      break;
 80090a6:	e046      	b.n	8009136 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80090a8:	89fb      	ldrh	r3, [r7, #14]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f240 3203 	movw	r2, #771	@ 0x303
 80090b0:	2105      	movs	r1, #5
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 fac4 	bl	800a640 <CODEC_IO_Write>
 80090b8:	4603      	mov	r3, r0
 80090ba:	461a      	mov	r2, r3
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80090c2:	89fb      	ldrh	r3, [r7, #14]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2201      	movs	r2, #1
 80090c8:	f240 6101 	movw	r1, #1537	@ 0x601
 80090cc:	4618      	mov	r0, r3
 80090ce:	f001 fab7 	bl	800a640 <CODEC_IO_Write>
 80090d2:	4603      	mov	r3, r0
 80090d4:	461a      	mov	r2, r3
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4413      	add	r3, r2
 80090da:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2201      	movs	r2, #1
 80090e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 faaa 	bl	800a640 <CODEC_IO_Write>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	4413      	add	r3, r2
 80090f4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80090f6:	89fb      	ldrh	r3, [r7, #14]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2200      	movs	r2, #0
 80090fc:	f240 6104 	movw	r1, #1540	@ 0x604
 8009100:	4618      	mov	r0, r3
 8009102:	f001 fa9d 	bl	800a640 <CODEC_IO_Write>
 8009106:	4603      	mov	r3, r0
 8009108:	461a      	mov	r2, r3
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	4413      	add	r3, r2
 800910e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8009110:	89fb      	ldrh	r3, [r7, #14]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2200      	movs	r2, #0
 8009116:	f240 6105 	movw	r1, #1541	@ 0x605
 800911a:	4618      	mov	r0, r3
 800911c:	f001 fa90 	bl	800a640 <CODEC_IO_Write>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	4413      	add	r3, r2
 8009128:	61fb      	str	r3, [r7, #28]
      break;
 800912a:	e004      	b.n	8009136 <wm8994_Init+0x39e>
 800912c:	200010a4 	.word	0x200010a4
    }
  }
  else
  {
    outputEnabled = 0;
 8009130:	4ba5      	ldr	r3, [pc, #660]	@ (80093c8 <wm8994_Init+0x630>)
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8009136:	8afb      	ldrh	r3, [r7, #22]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 81c3 	beq.w	80094c4 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 800913e:	4ba3      	ldr	r3, [pc, #652]	@ (80093cc <wm8994_Init+0x634>)
 8009140:	2201      	movs	r2, #1
 8009142:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8009144:	8afb      	ldrh	r3, [r7, #22]
 8009146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800914a:	f000 8141 	beq.w	80093d0 <wm8994_Init+0x638>
 800914e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009152:	f300 81b3 	bgt.w	80094bc <wm8994_Init+0x724>
 8009156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800915a:	d05a      	beq.n	8009212 <wm8994_Init+0x47a>
 800915c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009160:	f300 81ac 	bgt.w	80094bc <wm8994_Init+0x724>
 8009164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009168:	f000 80de 	beq.w	8009328 <wm8994_Init+0x590>
 800916c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009170:	f040 81a4 	bne.w	80094bc <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8009174:	89fb      	ldrh	r3, [r7, #14]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800917c:	2104      	movs	r1, #4
 800917e:	4618      	mov	r0, r3
 8009180:	f001 fa5e 	bl	800a640 <CODEC_IO_Write>
 8009184:	4603      	mov	r3, r0
 8009186:	461a      	mov	r2, r3
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	4413      	add	r3, r2
 800918c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800918e:	89fb      	ldrh	r3, [r7, #14]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	22db      	movs	r2, #219	@ 0xdb
 8009194:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8009198:	4618      	mov	r0, r3
 800919a:	f001 fa51 	bl	800a640 <CODEC_IO_Write>
 800919e:	4603      	mov	r3, r0
 80091a0:	461a      	mov	r2, r3
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80091a8:	89fb      	ldrh	r3, [r7, #14]
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80091b0:	2102      	movs	r1, #2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 fa44 	bl	800a640 <CODEC_IO_Write>
 80091b8:	4603      	mov	r3, r0
 80091ba:	461a      	mov	r2, r3
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	4413      	add	r3, r2
 80091c0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80091c2:	89fb      	ldrh	r3, [r7, #14]
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2202      	movs	r2, #2
 80091c8:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80091cc:	4618      	mov	r0, r3
 80091ce:	f001 fa37 	bl	800a640 <CODEC_IO_Write>
 80091d2:	4603      	mov	r3, r0
 80091d4:	461a      	mov	r2, r3
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80091dc:	89fb      	ldrh	r3, [r7, #14]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2202      	movs	r2, #2
 80091e2:	f240 6109 	movw	r1, #1545	@ 0x609
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fa2a 	bl	800a640 <CODEC_IO_Write>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	4413      	add	r3, r2
 80091f4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80091f6:	89fb      	ldrh	r3, [r7, #14]
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	220e      	movs	r2, #14
 80091fc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8009200:	4618      	mov	r0, r3
 8009202:	f001 fa1d 	bl	800a640 <CODEC_IO_Write>
 8009206:	4603      	mov	r3, r0
 8009208:	461a      	mov	r2, r3
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	4413      	add	r3, r2
 800920e:	61fb      	str	r3, [r7, #28]
      break;
 8009210:	e15b      	b.n	80094ca <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8009212:	89fb      	ldrh	r3, [r7, #14]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2211      	movs	r2, #17
 8009218:	2128      	movs	r1, #40	@ 0x28
 800921a:	4618      	mov	r0, r3
 800921c:	f001 fa10 	bl	800a640 <CODEC_IO_Write>
 8009220:	4603      	mov	r3, r0
 8009222:	461a      	mov	r2, r3
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	4413      	add	r3, r2
 8009228:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800922a:	89fb      	ldrh	r3, [r7, #14]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2220      	movs	r2, #32
 8009230:	2129      	movs	r1, #41	@ 0x29
 8009232:	4618      	mov	r0, r3
 8009234:	f001 fa04 	bl	800a640 <CODEC_IO_Write>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8009242:	89fb      	ldrh	r3, [r7, #14]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2220      	movs	r2, #32
 8009248:	212a      	movs	r1, #42	@ 0x2a
 800924a:	4618      	mov	r0, r3
 800924c:	f001 f9f8 	bl	800a640 <CODEC_IO_Write>
 8009250:	4603      	mov	r3, r0
 8009252:	461a      	mov	r2, r3
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	4413      	add	r3, r2
 8009258:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 800925a:	89fb      	ldrh	r3, [r7, #14]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2200      	movs	r2, #0
 8009260:	212b      	movs	r1, #43	@ 0x2b
 8009262:	4618      	mov	r0, r3
 8009264:	f001 f9ec 	bl	800a640 <CODEC_IO_Write>
 8009268:	4603      	mov	r3, r0
 800926a:	461a      	mov	r2, r3
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	4413      	add	r3, r2
 8009270:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 8009272:	89fb      	ldrh	r3, [r7, #14]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2200      	movs	r2, #0
 8009278:	212c      	movs	r1, #44	@ 0x2c
 800927a:	4618      	mov	r0, r3
 800927c:	f001 f9e0 	bl	800a640 <CODEC_IO_Write>
 8009280:	4603      	mov	r3, r0
 8009282:	461a      	mov	r2, r3
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	4413      	add	r3, r2
 8009288:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800928a:	89fb      	ldrh	r3, [r7, #14]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f240 3203 	movw	r2, #771	@ 0x303
 8009292:	2104      	movs	r1, #4
 8009294:	4618      	mov	r0, r3
 8009296:	f001 f9d3 	bl	800a640 <CODEC_IO_Write>
 800929a:	4603      	mov	r3, r0
 800929c:	461a      	mov	r2, r3
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	4413      	add	r3, r2
 80092a2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80092a4:	89fb      	ldrh	r3, [r7, #14]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	22db      	movs	r2, #219	@ 0xdb
 80092aa:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80092ae:	4618      	mov	r0, r3
 80092b0:	f001 f9c6 	bl	800a640 <CODEC_IO_Write>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	4413      	add	r3, r2
 80092bc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80092be:	89fb      	ldrh	r3, [r7, #14]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f246 3250 	movw	r2, #25424	@ 0x6350
 80092c6:	2102      	movs	r1, #2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f001 f9b9 	bl	800a640 <CODEC_IO_Write>
 80092ce:	4603      	mov	r3, r0
 80092d0:	461a      	mov	r2, r3
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80092d8:	89fb      	ldrh	r3, [r7, #14]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2202      	movs	r2, #2
 80092de:	f240 6106 	movw	r1, #1542	@ 0x606
 80092e2:	4618      	mov	r0, r3
 80092e4:	f001 f9ac 	bl	800a640 <CODEC_IO_Write>
 80092e8:	4603      	mov	r3, r0
 80092ea:	461a      	mov	r2, r3
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2202      	movs	r2, #2
 80092f8:	f240 6107 	movw	r1, #1543	@ 0x607
 80092fc:	4618      	mov	r0, r3
 80092fe:	f001 f99f 	bl	800a640 <CODEC_IO_Write>
 8009302:	4603      	mov	r3, r0
 8009304:	461a      	mov	r2, r3
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	4413      	add	r3, r2
 800930a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800930c:	89fb      	ldrh	r3, [r7, #14]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	220d      	movs	r2, #13
 8009312:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8009316:	4618      	mov	r0, r3
 8009318:	f001 f992 	bl	800a640 <CODEC_IO_Write>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	61fb      	str	r3, [r7, #28]
      break;
 8009326:	e0d0      	b.n	80094ca <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8009328:	89fb      	ldrh	r3, [r7, #14]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8009330:	2104      	movs	r1, #4
 8009332:	4618      	mov	r0, r3
 8009334:	f001 f984 	bl	800a640 <CODEC_IO_Write>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	4413      	add	r3, r2
 8009340:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8009342:	89fb      	ldrh	r3, [r7, #14]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	22db      	movs	r2, #219	@ 0xdb
 8009348:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800934c:	4618      	mov	r0, r3
 800934e:	f001 f977 	bl	800a640 <CODEC_IO_Write>
 8009352:	4603      	mov	r3, r0
 8009354:	461a      	mov	r2, r3
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	4413      	add	r3, r2
 800935a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800935c:	89fb      	ldrh	r3, [r7, #14]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f246 3250 	movw	r2, #25424	@ 0x6350
 8009364:	2102      	movs	r1, #2
 8009366:	4618      	mov	r0, r3
 8009368:	f001 f96a 	bl	800a640 <CODEC_IO_Write>
 800936c:	4603      	mov	r3, r0
 800936e:	461a      	mov	r2, r3
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	4413      	add	r3, r2
 8009374:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8009376:	89fb      	ldrh	r3, [r7, #14]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2202      	movs	r2, #2
 800937c:	f240 6106 	movw	r1, #1542	@ 0x606
 8009380:	4618      	mov	r0, r3
 8009382:	f001 f95d 	bl	800a640 <CODEC_IO_Write>
 8009386:	4603      	mov	r3, r0
 8009388:	461a      	mov	r2, r3
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	4413      	add	r3, r2
 800938e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2202      	movs	r2, #2
 8009396:	f240 6107 	movw	r1, #1543	@ 0x607
 800939a:	4618      	mov	r0, r3
 800939c:	f001 f950 	bl	800a640 <CODEC_IO_Write>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	4413      	add	r3, r2
 80093a8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80093aa:	89fb      	ldrh	r3, [r7, #14]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	220d      	movs	r2, #13
 80093b0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f943 	bl	800a640 <CODEC_IO_Write>
 80093ba:	4603      	mov	r3, r0
 80093bc:	461a      	mov	r2, r3
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	4413      	add	r3, r2
 80093c2:	61fb      	str	r3, [r7, #28]
      break; 
 80093c4:	e081      	b.n	80094ca <wm8994_Init+0x732>
 80093c6:	bf00      	nop
 80093c8:	200010a4 	.word	0x200010a4
 80093cc:	200010a8 	.word	0x200010a8
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80093d0:	89fb      	ldrh	r3, [r7, #14]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80093d8:	2104      	movs	r1, #4
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 f930 	bl	800a640 <CODEC_IO_Write>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80093ea:	89fb      	ldrh	r3, [r7, #14]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	22db      	movs	r2, #219	@ 0xdb
 80093f0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 f923 	bl	800a640 <CODEC_IO_Write>
 80093fa:	4603      	mov	r3, r0
 80093fc:	461a      	mov	r2, r3
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8009404:	89fb      	ldrh	r3, [r7, #14]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	22db      	movs	r2, #219	@ 0xdb
 800940a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800940e:	4618      	mov	r0, r3
 8009410:	f001 f916 	bl	800a640 <CODEC_IO_Write>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	4413      	add	r3, r2
 800941c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800941e:	89fb      	ldrh	r3, [r7, #14]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8009426:	2102      	movs	r1, #2
 8009428:	4618      	mov	r0, r3
 800942a:	f001 f909 	bl	800a640 <CODEC_IO_Write>
 800942e:	4603      	mov	r3, r0
 8009430:	461a      	mov	r2, r3
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8009438:	89fb      	ldrh	r3, [r7, #14]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2202      	movs	r2, #2
 800943e:	f240 6106 	movw	r1, #1542	@ 0x606
 8009442:	4618      	mov	r0, r3
 8009444:	f001 f8fc 	bl	800a640 <CODEC_IO_Write>
 8009448:	4603      	mov	r3, r0
 800944a:	461a      	mov	r2, r3
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	4413      	add	r3, r2
 8009450:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2202      	movs	r2, #2
 8009458:	f240 6107 	movw	r1, #1543	@ 0x607
 800945c:	4618      	mov	r0, r3
 800945e:	f001 f8ef 	bl	800a640 <CODEC_IO_Write>
 8009462:	4603      	mov	r3, r0
 8009464:	461a      	mov	r2, r3
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	4413      	add	r3, r2
 800946a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800946c:	89fb      	ldrh	r3, [r7, #14]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2202      	movs	r2, #2
 8009472:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8009476:	4618      	mov	r0, r3
 8009478:	f001 f8e2 	bl	800a640 <CODEC_IO_Write>
 800947c:	4603      	mov	r3, r0
 800947e:	461a      	mov	r2, r3
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	4413      	add	r3, r2
 8009484:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8009486:	89fb      	ldrh	r3, [r7, #14]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2202      	movs	r2, #2
 800948c:	f240 6109 	movw	r1, #1545	@ 0x609
 8009490:	4618      	mov	r0, r3
 8009492:	f001 f8d5 	bl	800a640 <CODEC_IO_Write>
 8009496:	4603      	mov	r3, r0
 8009498:	461a      	mov	r2, r3
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80094a0:	89fb      	ldrh	r3, [r7, #14]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	220d      	movs	r2, #13
 80094a6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80094aa:	4618      	mov	r0, r3
 80094ac:	f001 f8c8 	bl	800a640 <CODEC_IO_Write>
 80094b0:	4603      	mov	r3, r0
 80094b2:	461a      	mov	r2, r3
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	4413      	add	r3, r2
 80094b8:	61fb      	str	r3, [r7, #28]
      break;    
 80094ba:	e006      	b.n	80094ca <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	3301      	adds	r3, #1
 80094c0:	61fb      	str	r3, [r7, #28]
      break;
 80094c2:	e002      	b.n	80094ca <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 80094c4:	4ba4      	ldr	r3, [pc, #656]	@ (8009758 <wm8994_Init+0x9c0>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4aa3      	ldr	r2, [pc, #652]	@ (800975c <wm8994_Init+0x9c4>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d079      	beq.n	80095c6 <wm8994_Init+0x82e>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4aa1      	ldr	r2, [pc, #644]	@ (800975c <wm8994_Init+0x9c4>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	f200 80ad 	bhi.w	8009636 <wm8994_Init+0x89e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d061      	beq.n	80095aa <wm8994_Init+0x812>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80094ec:	4293      	cmp	r3, r2
 80094ee:	f200 80a2 	bhi.w	8009636 <wm8994_Init+0x89e>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80094f8:	4293      	cmp	r3, r2
 80094fa:	f000 808e 	beq.w	800961a <wm8994_Init+0x882>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8009504:	4293      	cmp	r3, r2
 8009506:	f200 8096 	bhi.w	8009636 <wm8994_Init+0x89e>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8009510:	d03d      	beq.n	800958e <wm8994_Init+0x7f6>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8009518:	f200 808d 	bhi.w	8009636 <wm8994_Init+0x89e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8009522:	4293      	cmp	r3, r2
 8009524:	d06b      	beq.n	80095fe <wm8994_Init+0x866>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f245 6222 	movw	r2, #22050	@ 0x5622
 800952c:	4293      	cmp	r3, r2
 800952e:	f200 8082 	bhi.w	8009636 <wm8994_Init+0x89e>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009538:	d01b      	beq.n	8009572 <wm8994_Init+0x7da>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009540:	d879      	bhi.n	8009636 <wm8994_Init+0x89e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8009548:	d005      	beq.n	8009556 <wm8994_Init+0x7be>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8009550:	4293      	cmp	r3, r2
 8009552:	d046      	beq.n	80095e2 <wm8994_Init+0x84a>
 8009554:	e06f      	b.n	8009636 <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8009556:	89fb      	ldrh	r3, [r7, #14]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2203      	movs	r2, #3
 800955c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009560:	4618      	mov	r0, r3
 8009562:	f001 f86d 	bl	800a640 <CODEC_IO_Write>
 8009566:	4603      	mov	r3, r0
 8009568:	461a      	mov	r2, r3
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	4413      	add	r3, r2
 800956e:	61fb      	str	r3, [r7, #28]
    break;
 8009570:	e06f      	b.n	8009652 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8009572:	89fb      	ldrh	r3, [r7, #14]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2233      	movs	r2, #51	@ 0x33
 8009578:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800957c:	4618      	mov	r0, r3
 800957e:	f001 f85f 	bl	800a640 <CODEC_IO_Write>
 8009582:	4603      	mov	r3, r0
 8009584:	461a      	mov	r2, r3
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	4413      	add	r3, r2
 800958a:	61fb      	str	r3, [r7, #28]
    break;
 800958c:	e061      	b.n	8009652 <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800958e:	89fb      	ldrh	r3, [r7, #14]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2263      	movs	r2, #99	@ 0x63
 8009594:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009598:	4618      	mov	r0, r3
 800959a:	f001 f851 	bl	800a640 <CODEC_IO_Write>
 800959e:	4603      	mov	r3, r0
 80095a0:	461a      	mov	r2, r3
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	61fb      	str	r3, [r7, #28]
    break;
 80095a8:	e053      	b.n	8009652 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80095aa:	89fb      	ldrh	r3, [r7, #14]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2283      	movs	r2, #131	@ 0x83
 80095b0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f843 	bl	800a640 <CODEC_IO_Write>
 80095ba:	4603      	mov	r3, r0
 80095bc:	461a      	mov	r2, r3
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	4413      	add	r3, r2
 80095c2:	61fb      	str	r3, [r7, #28]
    break;
 80095c4:	e045      	b.n	8009652 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80095c6:	89fb      	ldrh	r3, [r7, #14]
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	22a3      	movs	r2, #163	@ 0xa3
 80095cc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80095d0:	4618      	mov	r0, r3
 80095d2:	f001 f835 	bl	800a640 <CODEC_IO_Write>
 80095d6:	4603      	mov	r3, r0
 80095d8:	461a      	mov	r2, r3
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	61fb      	str	r3, [r7, #28]
    break;
 80095e0:	e037      	b.n	8009652 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80095e2:	89fb      	ldrh	r3, [r7, #14]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2213      	movs	r2, #19
 80095e8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 f827 	bl	800a640 <CODEC_IO_Write>
 80095f2:	4603      	mov	r3, r0
 80095f4:	461a      	mov	r2, r3
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	4413      	add	r3, r2
 80095fa:	61fb      	str	r3, [r7, #28]
    break;
 80095fc:	e029      	b.n	8009652 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80095fe:	89fb      	ldrh	r3, [r7, #14]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2243      	movs	r2, #67	@ 0x43
 8009604:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009608:	4618      	mov	r0, r3
 800960a:	f001 f819 	bl	800a640 <CODEC_IO_Write>
 800960e:	4603      	mov	r3, r0
 8009610:	461a      	mov	r2, r3
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	4413      	add	r3, r2
 8009616:	61fb      	str	r3, [r7, #28]
    break;
 8009618:	e01b      	b.n	8009652 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800961a:	89fb      	ldrh	r3, [r7, #14]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2273      	movs	r2, #115	@ 0x73
 8009620:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009624:	4618      	mov	r0, r3
 8009626:	f001 f80b 	bl	800a640 <CODEC_IO_Write>
 800962a:	4603      	mov	r3, r0
 800962c:	461a      	mov	r2, r3
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4413      	add	r3, r2
 8009632:	61fb      	str	r3, [r7, #28]
    break; 
 8009634:	e00d      	b.n	8009652 <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8009636:	89fb      	ldrh	r3, [r7, #14]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2283      	movs	r2, #131	@ 0x83
 800963c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009640:	4618      	mov	r0, r3
 8009642:	f000 fffd 	bl	800a640 <CODEC_IO_Write>
 8009646:	4603      	mov	r3, r0
 8009648:	461a      	mov	r2, r3
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	61fb      	str	r3, [r7, #28]
    break; 
 8009650:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8009652:	8afb      	ldrh	r3, [r7, #22]
 8009654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009658:	d10e      	bne.n	8009678 <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800965a:	89fb      	ldrh	r3, [r7, #14]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8009662:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8009666:	4618      	mov	r0, r3
 8009668:	f000 ffea 	bl	800a640 <CODEC_IO_Write>
 800966c:	4603      	mov	r3, r0
 800966e:	461a      	mov	r2, r3
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	61fb      	str	r3, [r7, #28]
 8009676:	e00d      	b.n	8009694 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8009678:	89fb      	ldrh	r3, [r7, #14]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8009680:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8009684:	4618      	mov	r0, r3
 8009686:	f000 ffdb 	bl	800a640 <CODEC_IO_Write>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8009694:	89fb      	ldrh	r3, [r7, #14]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2200      	movs	r2, #0
 800969a:	f240 3102 	movw	r1, #770	@ 0x302
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 ffce 	bl	800a640 <CODEC_IO_Write>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461a      	mov	r2, r3
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	4413      	add	r3, r2
 80096ac:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80096ae:	89fb      	ldrh	r3, [r7, #14]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	220a      	movs	r2, #10
 80096b4:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 ffc1 	bl	800a640 <CODEC_IO_Write>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80096c8:	89fb      	ldrh	r3, [r7, #14]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2201      	movs	r2, #1
 80096ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 ffb4 	bl	800a640 <CODEC_IO_Write>
 80096d8:	4603      	mov	r3, r0
 80096da:	461a      	mov	r2, r3
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80096e2:	8b3b      	ldrh	r3, [r7, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 817b 	beq.w	80099e0 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80096ea:	8b3b      	ldrh	r3, [r7, #24]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d157      	bne.n	80097a0 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096f8:	212d      	movs	r1, #45	@ 0x2d
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 ffa0 	bl	800a640 <CODEC_IO_Write>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4413      	add	r3, r2
 8009708:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800970a:	89fb      	ldrh	r3, [r7, #14]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009712:	212e      	movs	r1, #46	@ 0x2e
 8009714:	4618      	mov	r0, r3
 8009716:	f000 ff93 	bl	800a640 <CODEC_IO_Write>
 800971a:	4603      	mov	r3, r0
 800971c:	461a      	mov	r2, r3
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8009724:	4b0e      	ldr	r3, [pc, #56]	@ (8009760 <wm8994_Init+0x9c8>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01b      	beq.n	8009764 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800972c:	89fb      	ldrh	r3, [r7, #14]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8009734:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8009738:	4618      	mov	r0, r3
 800973a:	f000 ff81 	bl	800a640 <CODEC_IO_Write>
 800973e:	4603      	mov	r3, r0
 8009740:	461a      	mov	r2, r3
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4413      	add	r3, r2
 8009746:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8009748:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <wm8994_Init+0x9c8>)
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800974e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009752:	f7fc fd3d 	bl	80061d0 <AUDIO_IO_Delay>
 8009756:	e016      	b.n	8009786 <wm8994_Init+0x9ee>
 8009758:	200010a8 	.word	0x200010a8
 800975c:	00017700 	.word	0x00017700
 8009760:	20000090 	.word	0x20000090
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8009764:	89fb      	ldrh	r3, [r7, #14]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f248 1208 	movw	r2, #33032	@ 0x8108
 800976c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8009770:	4618      	mov	r0, r3
 8009772:	f000 ff65 	bl	800a640 <CODEC_IO_Write>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8009780:	2032      	movs	r0, #50	@ 0x32
 8009782:	f7fc fd25 	bl	80061d0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8009786:	89fb      	ldrh	r3, [r7, #14]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2200      	movs	r2, #0
 800978c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009790:	4618      	mov	r0, r3
 8009792:	f000 ff55 	bl	800a640 <CODEC_IO_Write>
 8009796:	4603      	mov	r3, r0
 8009798:	461a      	mov	r2, r3
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	4413      	add	r3, r2
 800979e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80097a0:	89fb      	ldrh	r3, [r7, #14]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80097a8:	2103      	movs	r1, #3
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 ff48 	bl	800a640 <CODEC_IO_Write>
 80097b0:	4603      	mov	r3, r0
 80097b2:	461a      	mov	r2, r3
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80097ba:	89fb      	ldrh	r3, [r7, #14]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2200      	movs	r2, #0
 80097c0:	2122      	movs	r1, #34	@ 0x22
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 ff3c 	bl	800a640 <CODEC_IO_Write>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80097d2:	89fb      	ldrh	r3, [r7, #14]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2200      	movs	r2, #0
 80097d8:	2123      	movs	r1, #35	@ 0x23
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 ff30 	bl	800a640 <CODEC_IO_Write>
 80097e0:	4603      	mov	r3, r0
 80097e2:	461a      	mov	r2, r3
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4413      	add	r3, r2
 80097e8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80097ea:	89fb      	ldrh	r3, [r7, #14]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80097f2:	2136      	movs	r1, #54	@ 0x36
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 ff23 	bl	800a640 <CODEC_IO_Write>
 80097fa:	4603      	mov	r3, r0
 80097fc:	461a      	mov	r2, r3
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8009804:	89fb      	ldrh	r3, [r7, #14]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	f243 0203 	movw	r2, #12291	@ 0x3003
 800980c:	2101      	movs	r1, #1
 800980e:	4618      	mov	r0, r3
 8009810:	f000 ff16 	bl	800a640 <CODEC_IO_Write>
 8009814:	4603      	mov	r3, r0
 8009816:	461a      	mov	r2, r3
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800981e:	8afb      	ldrh	r3, [r7, #22]
 8009820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009824:	d10d      	bne.n	8009842 <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8009826:	89fb      	ldrh	r3, [r7, #14]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f240 2205 	movw	r2, #517	@ 0x205
 800982e:	2151      	movs	r1, #81	@ 0x51
 8009830:	4618      	mov	r0, r3
 8009832:	f000 ff05 	bl	800a640 <CODEC_IO_Write>
 8009836:	4603      	mov	r3, r0
 8009838:	461a      	mov	r2, r3
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	4413      	add	r3, r2
 800983e:	61fb      	str	r3, [r7, #28]
 8009840:	e00b      	b.n	800985a <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8009842:	89fb      	ldrh	r3, [r7, #14]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2205      	movs	r2, #5
 8009848:	2151      	movs	r1, #81	@ 0x51
 800984a:	4618      	mov	r0, r3
 800984c:	f000 fef8 	bl	800a640 <CODEC_IO_Write>
 8009850:	4603      	mov	r3, r0
 8009852:	461a      	mov	r2, r3
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4413      	add	r3, r2
 8009858:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800985a:	8b7b      	ldrh	r3, [r7, #26]
 800985c:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8009860:	f043 0303 	orr.w	r3, r3, #3
 8009864:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8009866:	89fb      	ldrh	r3, [r7, #14]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	8b7a      	ldrh	r2, [r7, #26]
 800986c:	2101      	movs	r1, #1
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fee6 	bl	800a640 <CODEC_IO_Write>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800987e:	89fb      	ldrh	r3, [r7, #14]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2222      	movs	r2, #34	@ 0x22
 8009884:	2160      	movs	r1, #96	@ 0x60
 8009886:	4618      	mov	r0, r3
 8009888:	f000 feda 	bl	800a640 <CODEC_IO_Write>
 800988c:	4603      	mov	r3, r0
 800988e:	461a      	mov	r2, r3
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8009896:	89fb      	ldrh	r3, [r7, #14]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f649 7225 	movw	r2, #40741	@ 0x9f25
 800989e:	214c      	movs	r1, #76	@ 0x4c
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fecd 	bl	800a640 <CODEC_IO_Write>
 80098a6:	4603      	mov	r3, r0
 80098a8:	461a      	mov	r2, r3
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	4413      	add	r3, r2
 80098ae:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80098b0:	200f      	movs	r0, #15
 80098b2:	f7fc fc8d 	bl	80061d0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80098b6:	89fb      	ldrh	r3, [r7, #14]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2201      	movs	r2, #1
 80098bc:	212d      	movs	r1, #45	@ 0x2d
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 febe 	bl	800a640 <CODEC_IO_Write>
 80098c4:	4603      	mov	r3, r0
 80098c6:	461a      	mov	r2, r3
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80098ce:	89fb      	ldrh	r3, [r7, #14]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2201      	movs	r2, #1
 80098d4:	212e      	movs	r1, #46	@ 0x2e
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 feb2 	bl	800a640 <CODEC_IO_Write>
 80098dc:	4603      	mov	r3, r0
 80098de:	461a      	mov	r2, r3
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80098e6:	89fb      	ldrh	r3, [r7, #14]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80098ee:	2103      	movs	r1, #3
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fea5 	bl	800a640 <CODEC_IO_Write>
 80098f6:	4603      	mov	r3, r0
 80098f8:	461a      	mov	r2, r3
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8009900:	89fb      	ldrh	r3, [r7, #14]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2233      	movs	r2, #51	@ 0x33
 8009906:	2154      	movs	r1, #84	@ 0x54
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fe99 	bl	800a640 <CODEC_IO_Write>
 800990e:	4603      	mov	r3, r0
 8009910:	461a      	mov	r2, r3
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	4413      	add	r3, r2
 8009916:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8009918:	f240 1001 	movw	r0, #257	@ 0x101
 800991c:	f7fc fc58 	bl	80061d0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	22ee      	movs	r2, #238	@ 0xee
 8009926:	2160      	movs	r1, #96	@ 0x60
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fe89 	bl	800a640 <CODEC_IO_Write>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	4413      	add	r3, r2
 8009936:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8009938:	89fb      	ldrh	r3, [r7, #14]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	22c0      	movs	r2, #192	@ 0xc0
 800993e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fe7c 	bl	800a640 <CODEC_IO_Write>
 8009948:	4603      	mov	r3, r0
 800994a:	461a      	mov	r2, r3
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	4413      	add	r3, r2
 8009950:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8009952:	89fb      	ldrh	r3, [r7, #14]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	22c0      	movs	r2, #192	@ 0xc0
 8009958:	f240 6111 	movw	r1, #1553	@ 0x611
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fe6f 	bl	800a640 <CODEC_IO_Write>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800996c:	89fb      	ldrh	r3, [r7, #14]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2210      	movs	r2, #16
 8009972:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fe62 	bl	800a640 <CODEC_IO_Write>
 800997c:	4603      	mov	r3, r0
 800997e:	461a      	mov	r2, r3
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	4413      	add	r3, r2
 8009984:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8009986:	89fb      	ldrh	r3, [r7, #14]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	22c0      	movs	r2, #192	@ 0xc0
 800998c:	f240 6112 	movw	r1, #1554	@ 0x612
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fe55 	bl	800a640 <CODEC_IO_Write>
 8009996:	4603      	mov	r3, r0
 8009998:	461a      	mov	r2, r3
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	4413      	add	r3, r2
 800999e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80099a0:	89fb      	ldrh	r3, [r7, #14]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	22c0      	movs	r2, #192	@ 0xc0
 80099a6:	f240 6113 	movw	r1, #1555	@ 0x613
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fe48 	bl	800a640 <CODEC_IO_Write>
 80099b0:	4603      	mov	r3, r0
 80099b2:	461a      	mov	r2, r3
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	4413      	add	r3, r2
 80099b8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80099ba:	89fb      	ldrh	r3, [r7, #14]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2210      	movs	r2, #16
 80099c0:	f240 4122 	movw	r1, #1058	@ 0x422
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fe3b 	bl	800a640 <CODEC_IO_Write>
 80099ca:	4603      	mov	r3, r0
 80099cc:	461a      	mov	r2, r3
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	4413      	add	r3, r2
 80099d2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80099d4:	7afa      	ldrb	r2, [r7, #11]
 80099d6:	89fb      	ldrh	r3, [r7, #14]
 80099d8:	4611      	mov	r1, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f984 	bl	8009ce8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80099e0:	8afb      	ldrh	r3, [r7, #22]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 80a6 	beq.w	8009b34 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80099e8:	8afb      	ldrh	r3, [r7, #22]
 80099ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099ee:	d003      	beq.n	80099f8 <wm8994_Init+0xc60>
 80099f0:	8afb      	ldrh	r3, [r7, #22]
 80099f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099f6:	d12b      	bne.n	8009a50 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80099f8:	8b7b      	ldrh	r3, [r7, #26]
 80099fa:	f043 0313 	orr.w	r3, r3, #19
 80099fe:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8009a00:	89fb      	ldrh	r3, [r7, #14]
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	8b7a      	ldrh	r2, [r7, #26]
 8009a06:	2101      	movs	r1, #1
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fe19 	bl	800a640 <CODEC_IO_Write>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8009a18:	89fb      	ldrh	r3, [r7, #14]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fe0c 	bl	800a640 <CODEC_IO_Write>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	4413      	add	r3, r2
 8009a30:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8009a32:	89fb      	ldrh	r3, [r7, #14]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8009a3a:	f240 4111 	movw	r1, #1041	@ 0x411
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fdfe 	bl	800a640 <CODEC_IO_Write>
 8009a44:	4603      	mov	r3, r0
 8009a46:	461a      	mov	r2, r3
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e06b      	b.n	8009b28 <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8009a50:	8afb      	ldrh	r3, [r7, #22]
 8009a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a56:	d139      	bne.n	8009acc <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8009a58:	8b7b      	ldrh	r3, [r7, #26]
 8009a5a:	f043 0313 	orr.w	r3, r3, #19
 8009a5e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8009a60:	89fb      	ldrh	r3, [r7, #14]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	8b7a      	ldrh	r2, [r7, #26]
 8009a66:	2101      	movs	r1, #1
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 fde9 	bl	800a640 <CODEC_IO_Write>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461a      	mov	r2, r3
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8009a78:	89fb      	ldrh	r3, [r7, #14]
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fddc 	bl	800a640 <CODEC_IO_Write>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8009a92:	89fb      	ldrh	r3, [r7, #14]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009a9a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fdce 	bl	800a640 <CODEC_IO_Write>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	4413      	add	r3, r2
 8009aac:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8009aae:	89fb      	ldrh	r3, [r7, #14]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009ab6:	f240 4111 	movw	r1, #1041	@ 0x411
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fdc0 	bl	800a640 <CODEC_IO_Write>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	61fb      	str	r3, [r7, #28]
 8009aca:	e02d      	b.n	8009b28 <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8009acc:	8afb      	ldrh	r3, [r7, #22]
 8009ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ad2:	d003      	beq.n	8009adc <wm8994_Init+0xd44>
 8009ad4:	8afb      	ldrh	r3, [r7, #22]
 8009ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ada:	d125      	bne.n	8009b28 <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	228b      	movs	r2, #139	@ 0x8b
 8009ae2:	2118      	movs	r1, #24
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fdab 	bl	800a640 <CODEC_IO_Write>
 8009aea:	4603      	mov	r3, r0
 8009aec:	461a      	mov	r2, r3
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	4413      	add	r3, r2
 8009af2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8009af4:	89fb      	ldrh	r3, [r7, #14]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	228b      	movs	r2, #139	@ 0x8b
 8009afa:	211a      	movs	r1, #26
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fd9f 	bl	800a640 <CODEC_IO_Write>
 8009b02:	4603      	mov	r3, r0
 8009b04:	461a      	mov	r2, r3
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8009b0c:	89fb      	ldrh	r3, [r7, #14]
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009b14:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fd91 	bl	800a640 <CODEC_IO_Write>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	461a      	mov	r2, r3
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	4413      	add	r3, r2
 8009b26:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8009b28:	7afa      	ldrb	r2, [r7, #11]
 8009b2a:	89fb      	ldrh	r3, [r7, #14]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f8da 	bl	8009ce8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8009b34:	69fb      	ldr	r3, [r7, #28]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop

08009b40 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8009b44:	f7fc fae6 	bl	8006114 <AUDIO_IO_DeInit>
}
 8009b48:	bf00      	nop
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8009b56:	f7fc fad3 	bl	8006100 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8009b5a:	88fb      	ldrh	r3, [r7, #6]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fc fb09 	bl	8006178 <AUDIO_IO_Read>
 8009b66:	4603      	mov	r3, r0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	6039      	str	r1, [r7, #0]
 8009b7a:	80fb      	strh	r3, [r7, #6]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009b84:	88fb      	ldrh	r3, [r7, #6]
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 faf3 	bl	800a174 <wm8994_SetMute>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4413      	add	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8009b96:	68fb      	ldr	r3, [r7, #12]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 fade 	bl	800a174 <wm8994_SetMute>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8009bc0:	88fb      	ldrh	r3, [r7, #6]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	2102      	movs	r1, #2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fd39 	bl	800a640 <CODEC_IO_Write>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	4603      	mov	r3, r0
 8009bea:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 fabd 	bl	800a174 <wm8994_SetMute>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4413      	add	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8009c02:	68fb      	ldr	r3, [r7, #12]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8009c1c:	4b31      	ldr	r3, [pc, #196]	@ (8009ce4 <wm8994_Stop+0xd8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d05a      	beq.n	8009cda <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009c24:	88fb      	ldrh	r3, [r7, #6]
 8009c26:	2101      	movs	r1, #1
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 faa3 	bl	800a174 <wm8994_SetMute>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4413      	add	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d04e      	beq.n	8009cda <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c44:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fcf9 	bl	800a640 <CODEC_IO_Write>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	461a      	mov	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8009c58:	88fb      	ldrh	r3, [r7, #6]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c60:	f240 4122 	movw	r1, #1058	@ 0x422
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fceb 	bl	800a640 <CODEC_IO_Write>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2200      	movs	r2, #0
 8009c7a:	212d      	movs	r1, #45	@ 0x2d
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fcdf 	bl	800a640 <CODEC_IO_Write>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461a      	mov	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2200      	movs	r2, #0
 8009c92:	212e      	movs	r1, #46	@ 0x2e
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fcd3 	bl	800a640 <CODEC_IO_Write>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2105      	movs	r1, #5
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fcc7 	bl	800a640 <CODEC_IO_Write>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4413      	add	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8009cbc:	88fb      	ldrh	r3, [r7, #6]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fcbb 	bl	800a640 <CODEC_IO_Write>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8009cd4:	4b03      	ldr	r3, [pc, #12]	@ (8009ce4 <wm8994_Stop+0xd8>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8009cda:	68fb      	ldr	r3, [r7, #12]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	200010a4 	.word	0x200010a4

08009ce8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	460a      	mov	r2, r1
 8009cf2:	80fb      	strh	r3, [r7, #6]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8009cfc:	797b      	ldrb	r3, [r7, #5]
 8009cfe:	2b64      	cmp	r3, #100	@ 0x64
 8009d00:	d80b      	bhi.n	8009d1a <wm8994_SetVolume+0x32>
 8009d02:	797a      	ldrb	r2, [r7, #5]
 8009d04:	4613      	mov	r3, r2
 8009d06:	019b      	lsls	r3, r3, #6
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	4a86      	ldr	r2, [pc, #536]	@ (8009f24 <wm8994_SetVolume+0x23c>)
 8009d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8009d10:	1152      	asrs	r2, r2, #5
 8009d12:	17db      	asrs	r3, r3, #31
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	e000      	b.n	8009d1c <wm8994_SetVolume+0x34>
 8009d1a:	2364      	movs	r3, #100	@ 0x64
 8009d1c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8009d1e:	4b82      	ldr	r3, [pc, #520]	@ (8009f28 <wm8994_SetVolume+0x240>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 809b 	beq.w	8009e5e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d2c:	d93d      	bls.n	8009daa <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009d2e:	88fb      	ldrh	r3, [r7, #6]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 fa1e 	bl	800a174 <wm8994_SetMute>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	f240 127f 	movw	r2, #383	@ 0x17f
 8009d48:	211c      	movs	r1, #28
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fc78 	bl	800a640 <CODEC_IO_Write>
 8009d50:	4603      	mov	r3, r0
 8009d52:	461a      	mov	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f240 127f 	movw	r2, #383	@ 0x17f
 8009d62:	211d      	movs	r1, #29
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fc6b 	bl	800a640 <CODEC_IO_Write>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4413      	add	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	f240 127f 	movw	r2, #383	@ 0x17f
 8009d7c:	2126      	movs	r1, #38	@ 0x26
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fc5e 	bl	800a640 <CODEC_IO_Write>
 8009d84:	4603      	mov	r3, r0
 8009d86:	461a      	mov	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8009d8e:	88fb      	ldrh	r3, [r7, #6]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	f240 127f 	movw	r2, #383	@ 0x17f
 8009d96:	2127      	movs	r1, #39	@ 0x27
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fc51 	bl	800a640 <CODEC_IO_Write>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	461a      	mov	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4413      	add	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e059      	b.n	8009e5e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8009daa:	797b      	ldrb	r3, [r7, #5]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d109      	bne.n	8009dc4 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	2101      	movs	r1, #1
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f9dd 	bl	800a174 <wm8994_SetMute>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e04c      	b.n	8009e5e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009dc4:	88fb      	ldrh	r3, [r7, #6]
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f9d3 	bl	800a174 <wm8994_SetMute>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	b2d8      	uxtb	r0, r3
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	b21b      	sxth	r3, r3
 8009dde:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	461a      	mov	r2, r3
 8009de8:	211c      	movs	r1, #28
 8009dea:	f000 fc29 	bl	800a640 <CODEC_IO_Write>
 8009dee:	4603      	mov	r3, r0
 8009df0:	461a      	mov	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8009df8:	88fb      	ldrh	r3, [r7, #6]
 8009dfa:	b2d8      	uxtb	r0, r3
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	b21b      	sxth	r3, r3
 8009e00:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009e04:	b21b      	sxth	r3, r3
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	211d      	movs	r1, #29
 8009e0c:	f000 fc18 	bl	800a640 <CODEC_IO_Write>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461a      	mov	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4413      	add	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	b2d8      	uxtb	r0, r3
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	b21b      	sxth	r3, r3
 8009e22:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009e26:	b21b      	sxth	r3, r3
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	2126      	movs	r1, #38	@ 0x26
 8009e2e:	f000 fc07 	bl	800a640 <CODEC_IO_Write>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8009e3c:	88fb      	ldrh	r3, [r7, #6]
 8009e3e:	b2d8      	uxtb	r0, r3
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	b21b      	sxth	r3, r3
 8009e44:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009e48:	b21b      	sxth	r3, r3
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	2127      	movs	r1, #39	@ 0x27
 8009e50:	f000 fbf6 	bl	800a640 <CODEC_IO_Write>
 8009e54:	4603      	mov	r3, r0
 8009e56:	461a      	mov	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8009e5e:	4b33      	ldr	r3, [pc, #204]	@ (8009f2c <wm8994_SetVolume+0x244>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d059      	beq.n	8009f1a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8009e66:	797b      	ldrb	r3, [r7, #5]
 8009e68:	2b63      	cmp	r3, #99	@ 0x63
 8009e6a:	d80c      	bhi.n	8009e86 <wm8994_SetVolume+0x19e>
 8009e6c:	797a      	ldrb	r2, [r7, #5]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	1a9b      	subs	r3, r3, r2
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	4a2b      	ldr	r2, [pc, #172]	@ (8009f24 <wm8994_SetVolume+0x23c>)
 8009e78:	fb82 1203 	smull	r1, r2, r2, r3
 8009e7c:	1152      	asrs	r2, r2, #5
 8009e7e:	17db      	asrs	r3, r3, #31
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	e000      	b.n	8009e88 <wm8994_SetVolume+0x1a0>
 8009e86:	23ef      	movs	r3, #239	@ 0xef
 8009e88:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	b2d8      	uxtb	r0, r3
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	b21b      	sxth	r3, r3
 8009e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009ea0:	f000 fbce 	bl	800a640 <CODEC_IO_Write>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4413      	add	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	b2d8      	uxtb	r0, r3
 8009eb2:	7afb      	ldrb	r3, [r7, #11]
 8009eb4:	b21b      	sxth	r3, r3
 8009eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009eba:	b21b      	sxth	r3, r3
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f240 4101 	movw	r1, #1025	@ 0x401
 8009ec4:	f000 fbbc 	bl	800a640 <CODEC_IO_Write>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	461a      	mov	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	b2d8      	uxtb	r0, r3
 8009ed6:	7afb      	ldrb	r3, [r7, #11]
 8009ed8:	b21b      	sxth	r3, r3
 8009eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	f240 4104 	movw	r1, #1028	@ 0x404
 8009ee8:	f000 fbaa 	bl	800a640 <CODEC_IO_Write>
 8009eec:	4603      	mov	r3, r0
 8009eee:	461a      	mov	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8009ef6:	88fb      	ldrh	r3, [r7, #6]
 8009ef8:	b2d8      	uxtb	r0, r3
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	b21b      	sxth	r3, r3
 8009efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f02:	b21b      	sxth	r3, r3
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	461a      	mov	r2, r3
 8009f08:	f240 4105 	movw	r1, #1029	@ 0x405
 8009f0c:	f000 fb98 	bl	800a640 <CODEC_IO_Write>
 8009f10:	4603      	mov	r3, r0
 8009f12:	461a      	mov	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	51eb851f 	.word	0x51eb851f
 8009f28:	200010a4 	.word	0x200010a4
 8009f2c:	200010a8 	.word	0x200010a8

08009f30 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	460a      	mov	r2, r1
 8009f3a:	80fb      	strh	r3, [r7, #6]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8009f44:	797b      	ldrb	r3, [r7, #5]
 8009f46:	2b64      	cmp	r3, #100	@ 0x64
 8009f48:	d80b      	bhi.n	8009f62 <wm8994_SetVolumeOut+0x32>
 8009f4a:	797a      	ldrb	r2, [r7, #5]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	019b      	lsls	r3, r3, #6
 8009f50:	1a9b      	subs	r3, r3, r2
 8009f52:	4a57      	ldr	r2, [pc, #348]	@ (800a0b0 <wm8994_SetVolumeOut+0x180>)
 8009f54:	fb82 1203 	smull	r1, r2, r2, r3
 8009f58:	1152      	asrs	r2, r2, #5
 8009f5a:	17db      	asrs	r3, r3, #31
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	e000      	b.n	8009f64 <wm8994_SetVolumeOut+0x34>
 8009f62:	2364      	movs	r3, #100	@ 0x64
 8009f64:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 8009f66:	4b53      	ldr	r3, [pc, #332]	@ (800a0b4 <wm8994_SetVolumeOut+0x184>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 809b 	beq.w	800a0a6 <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8009f70:	7afb      	ldrb	r3, [r7, #11]
 8009f72:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f74:	d93d      	bls.n	8009ff2 <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 f8fa 	bl	800a174 <wm8994_SetMute>
 8009f80:	4602      	mov	r2, r0
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8009f88:	88fb      	ldrh	r3, [r7, #6]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f240 127f 	movw	r2, #383	@ 0x17f
 8009f90:	211c      	movs	r1, #28
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 fb54 	bl	800a640 <CODEC_IO_Write>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8009fa2:	88fb      	ldrh	r3, [r7, #6]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f240 127f 	movw	r2, #383	@ 0x17f
 8009faa:	211d      	movs	r1, #29
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fb47 	bl	800a640 <CODEC_IO_Write>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4413      	add	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8009fbc:	88fb      	ldrh	r3, [r7, #6]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	f240 127f 	movw	r2, #383	@ 0x17f
 8009fc4:	2126      	movs	r1, #38	@ 0x26
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fb3a 	bl	800a640 <CODEC_IO_Write>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8009fd6:	88fb      	ldrh	r3, [r7, #6]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	f240 127f 	movw	r2, #383	@ 0x17f
 8009fde:	2127      	movs	r1, #39	@ 0x27
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 fb2d 	bl	800a640 <CODEC_IO_Write>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	461a      	mov	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4413      	add	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e059      	b.n	800a0a6 <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 8009ff2:	797b      	ldrb	r3, [r7, #5]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d109      	bne.n	800a00c <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009ff8:	88fb      	ldrh	r3, [r7, #6]
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f8b9 	bl	800a174 <wm8994_SetMute>
 800a002:	4602      	mov	r2, r0
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e04c      	b.n	800a0a6 <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800a00c:	88fb      	ldrh	r3, [r7, #6]
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f000 f8af 	bl	800a174 <wm8994_SetMute>
 800a016:	4602      	mov	r2, r0
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4413      	add	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800a01e:	88fb      	ldrh	r3, [r7, #6]
 800a020:	b2d8      	uxtb	r0, r3
 800a022:	7afb      	ldrb	r3, [r7, #11]
 800a024:	b21b      	sxth	r3, r3
 800a026:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a02a:	b21b      	sxth	r3, r3
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	461a      	mov	r2, r3
 800a030:	211c      	movs	r1, #28
 800a032:	f000 fb05 	bl	800a640 <CODEC_IO_Write>
 800a036:	4603      	mov	r3, r0
 800a038:	461a      	mov	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4413      	add	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	b2d8      	uxtb	r0, r3
 800a044:	7afb      	ldrb	r3, [r7, #11]
 800a046:	b21b      	sxth	r3, r3
 800a048:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a04c:	b21b      	sxth	r3, r3
 800a04e:	b29b      	uxth	r3, r3
 800a050:	461a      	mov	r2, r3
 800a052:	211d      	movs	r1, #29
 800a054:	f000 faf4 	bl	800a640 <CODEC_IO_Write>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800a062:	88fb      	ldrh	r3, [r7, #6]
 800a064:	b2d8      	uxtb	r0, r3
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	b21b      	sxth	r3, r3
 800a06a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a06e:	b21b      	sxth	r3, r3
 800a070:	b29b      	uxth	r3, r3
 800a072:	461a      	mov	r2, r3
 800a074:	2126      	movs	r1, #38	@ 0x26
 800a076:	f000 fae3 	bl	800a640 <CODEC_IO_Write>
 800a07a:	4603      	mov	r3, r0
 800a07c:	461a      	mov	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4413      	add	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	b2d8      	uxtb	r0, r3
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	b21b      	sxth	r3, r3
 800a08c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a090:	b21b      	sxth	r3, r3
 800a092:	b29b      	uxth	r3, r3
 800a094:	461a      	mov	r2, r3
 800a096:	2127      	movs	r1, #39	@ 0x27
 800a098:	f000 fad2 	bl	800a640 <CODEC_IO_Write>
 800a09c:	4603      	mov	r3, r0
 800a09e:	461a      	mov	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	51eb851f 	.word	0x51eb851f
 800a0b4:	200010a4 	.word	0x200010a4

0800a0b8 <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	80fb      	strh	r3, [r7, #6]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 800a0cc:	4b28      	ldr	r3, [pc, #160]	@ (800a170 <wm8994_SetVolumeIn+0xb8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d047      	beq.n	800a164 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 800a0d4:	88fb      	ldrh	r3, [r7, #6]
 800a0d6:	b2d8      	uxtb	r0, r3
 800a0d8:	797b      	ldrb	r3, [r7, #5]
 800a0da:	b21b      	sxth	r3, r3
 800a0dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e0:	b21b      	sxth	r3, r3
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a0ea:	f000 faa9 	bl	800a640 <CODEC_IO_Write>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 800a0f8:	88fb      	ldrh	r3, [r7, #6]
 800a0fa:	b2d8      	uxtb	r0, r3
 800a0fc:	797b      	ldrb	r3, [r7, #5]
 800a0fe:	b21b      	sxth	r3, r3
 800a100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a104:	b21b      	sxth	r3, r3
 800a106:	b29b      	uxth	r3, r3
 800a108:	461a      	mov	r2, r3
 800a10a:	f240 4101 	movw	r1, #1025	@ 0x401
 800a10e:	f000 fa97 	bl	800a640 <CODEC_IO_Write>
 800a112:	4603      	mov	r3, r0
 800a114:	461a      	mov	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4413      	add	r3, r2
 800a11a:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 800a11c:	88fb      	ldrh	r3, [r7, #6]
 800a11e:	b2d8      	uxtb	r0, r3
 800a120:	797b      	ldrb	r3, [r7, #5]
 800a122:	b21b      	sxth	r3, r3
 800a124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a128:	b21b      	sxth	r3, r3
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	f240 4104 	movw	r1, #1028	@ 0x404
 800a132:	f000 fa85 	bl	800a640 <CODEC_IO_Write>
 800a136:	4603      	mov	r3, r0
 800a138:	461a      	mov	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 800a140:	88fb      	ldrh	r3, [r7, #6]
 800a142:	b2d8      	uxtb	r0, r3
 800a144:	797b      	ldrb	r3, [r7, #5]
 800a146:	b21b      	sxth	r3, r3
 800a148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a14c:	b21b      	sxth	r3, r3
 800a14e:	b29b      	uxth	r3, r3
 800a150:	461a      	mov	r2, r3
 800a152:	f240 4105 	movw	r1, #1029	@ 0x405
 800a156:	f000 fa73 	bl	800a640 <CODEC_IO_Write>
 800a15a:	4603      	mov	r3, r0
 800a15c:	461a      	mov	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	4413      	add	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 800a164:	68fb      	ldr	r3, [r7, #12]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	200010a8 	.word	0x200010a8

0800a174 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800a184:	4b21      	ldr	r3, [pc, #132]	@ (800a20c <wm8994_SetMute+0x98>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d039      	beq.n	800a200 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d11c      	bne.n	800a1cc <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a19a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fa4e 	bl	800a640 <CODEC_IO_Write>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800a1ae:	88fb      	ldrh	r3, [r7, #6]
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1b6:	f240 4122 	movw	r1, #1058	@ 0x422
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 fa40 	bl	800a640 <CODEC_IO_Write>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	e019      	b.n	800a200 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800a1cc:	88fb      	ldrh	r3, [r7, #6]
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2210      	movs	r2, #16
 800a1d2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fa32 	bl	800a640 <CODEC_IO_Write>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	461a      	mov	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2210      	movs	r2, #16
 800a1ec:	f240 4122 	movw	r1, #1058	@ 0x422
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fa25 	bl	800a640 <CODEC_IO_Write>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800a200:	68fb      	ldr	r3, [r7, #12]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	200010a4 	.word	0x200010a4

0800a210 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	460a      	mov	r2, r1
 800a21a:	80fb      	strh	r3, [r7, #6]
 800a21c:	4613      	mov	r3, r2
 800a21e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800a224:	797b      	ldrb	r3, [r7, #5]
 800a226:	2b03      	cmp	r3, #3
 800a228:	f000 808c 	beq.w	800a344 <wm8994_SetOutputMode+0x134>
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	f300 80cb 	bgt.w	800a3c8 <wm8994_SetOutputMode+0x1b8>
 800a232:	2b01      	cmp	r3, #1
 800a234:	d002      	beq.n	800a23c <wm8994_SetOutputMode+0x2c>
 800a236:	2b02      	cmp	r3, #2
 800a238:	d042      	beq.n	800a2c0 <wm8994_SetOutputMode+0xb0>
 800a23a:	e0c5      	b.n	800a3c8 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800a23c:	88fb      	ldrh	r3, [r7, #6]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800a244:	2105      	movs	r1, #5
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f9fa 	bl	800a640 <CODEC_IO_Write>
 800a24c:	4603      	mov	r3, r0
 800a24e:	461a      	mov	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4413      	add	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800a256:	88fb      	ldrh	r3, [r7, #6]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2200      	movs	r2, #0
 800a25c:	f240 6101 	movw	r1, #1537	@ 0x601
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f9ed 	bl	800a640 <CODEC_IO_Write>
 800a266:	4603      	mov	r3, r0
 800a268:	461a      	mov	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4413      	add	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2200      	movs	r2, #0
 800a276:	f240 6102 	movw	r1, #1538	@ 0x602
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 f9e0 	bl	800a640 <CODEC_IO_Write>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800a28a:	88fb      	ldrh	r3, [r7, #6]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2202      	movs	r2, #2
 800a290:	f240 6104 	movw	r1, #1540	@ 0x604
 800a294:	4618      	mov	r0, r3
 800a296:	f000 f9d3 	bl	800a640 <CODEC_IO_Write>
 800a29a:	4603      	mov	r3, r0
 800a29c:	461a      	mov	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800a2a4:	88fb      	ldrh	r3, [r7, #6]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	f240 6105 	movw	r1, #1541	@ 0x605
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 f9c6 	bl	800a640 <CODEC_IO_Write>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]
    break;
 800a2be:	e0c5      	b.n	800a44c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800a2c0:	88fb      	ldrh	r3, [r7, #6]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f240 3203 	movw	r2, #771	@ 0x303
 800a2c8:	2105      	movs	r1, #5
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 f9b8 	bl	800a640 <CODEC_IO_Write>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f240 6101 	movw	r1, #1537	@ 0x601
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f9ab 	bl	800a640 <CODEC_IO_Write>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f240 6102 	movw	r1, #1538	@ 0x602
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 f99e 	bl	800a640 <CODEC_IO_Write>
 800a304:	4603      	mov	r3, r0
 800a306:	461a      	mov	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2200      	movs	r2, #0
 800a314:	f240 6104 	movw	r1, #1540	@ 0x604
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 f991 	bl	800a640 <CODEC_IO_Write>
 800a31e:	4603      	mov	r3, r0
 800a320:	461a      	mov	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4413      	add	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800a328:	88fb      	ldrh	r3, [r7, #6]
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2200      	movs	r2, #0
 800a32e:	f240 6105 	movw	r1, #1541	@ 0x605
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f984 	bl	800a640 <CODEC_IO_Write>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
    break;
 800a342:	e083      	b.n	800a44c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800a344:	88fb      	ldrh	r3, [r7, #6]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800a34c:	2105      	movs	r1, #5
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 f976 	bl	800a640 <CODEC_IO_Write>
 800a354:	4603      	mov	r3, r0
 800a356:	461a      	mov	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	4413      	add	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2201      	movs	r2, #1
 800a364:	f240 6101 	movw	r1, #1537	@ 0x601
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 f969 	bl	800a640 <CODEC_IO_Write>
 800a36e:	4603      	mov	r3, r0
 800a370:	461a      	mov	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4413      	add	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a378:	88fb      	ldrh	r3, [r7, #6]
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2201      	movs	r2, #1
 800a37e:	f240 6102 	movw	r1, #1538	@ 0x602
 800a382:	4618      	mov	r0, r3
 800a384:	f000 f95c 	bl	800a640 <CODEC_IO_Write>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2202      	movs	r2, #2
 800a398:	f240 6104 	movw	r1, #1540	@ 0x604
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 f94f 	bl	800a640 <CODEC_IO_Write>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800a3ac:	88fb      	ldrh	r3, [r7, #6]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	f240 6105 	movw	r1, #1541	@ 0x605
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 f942 	bl	800a640 <CODEC_IO_Write>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	461a      	mov	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]
    break;
 800a3c6:	e041      	b.n	800a44c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800a3c8:	88fb      	ldrh	r3, [r7, #6]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	f240 3203 	movw	r2, #771	@ 0x303
 800a3d0:	2105      	movs	r1, #5
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 f934 	bl	800a640 <CODEC_IO_Write>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	461a      	mov	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4413      	add	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a3e2:	88fb      	ldrh	r3, [r7, #6]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f240 6101 	movw	r1, #1537	@ 0x601
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 f927 	bl	800a640 <CODEC_IO_Write>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a3fc:	88fb      	ldrh	r3, [r7, #6]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2201      	movs	r2, #1
 800a402:	f240 6102 	movw	r1, #1538	@ 0x602
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f91a 	bl	800a640 <CODEC_IO_Write>
 800a40c:	4603      	mov	r3, r0
 800a40e:	461a      	mov	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800a416:	88fb      	ldrh	r3, [r7, #6]
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2200      	movs	r2, #0
 800a41c:	f240 6104 	movw	r1, #1540	@ 0x604
 800a420:	4618      	mov	r0, r3
 800a422:	f000 f90d 	bl	800a640 <CODEC_IO_Write>
 800a426:	4603      	mov	r3, r0
 800a428:	461a      	mov	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4413      	add	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800a430:	88fb      	ldrh	r3, [r7, #6]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2200      	movs	r2, #0
 800a436:	f240 6105 	movw	r1, #1541	@ 0x605
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f900 	bl	800a640 <CODEC_IO_Write>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4413      	add	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]
    break;    
 800a44a:	bf00      	nop
  }  
  return counter;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	6039      	str	r1, [r7, #0]
 800a462:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	4a64      	ldr	r2, [pc, #400]	@ (800a5fc <wm8994_SetFrequency+0x1a4>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d079      	beq.n	800a564 <wm8994_SetFrequency+0x10c>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	4a62      	ldr	r2, [pc, #392]	@ (800a5fc <wm8994_SetFrequency+0x1a4>)
 800a474:	4293      	cmp	r3, r2
 800a476:	f200 80ad 	bhi.w	800a5d4 <wm8994_SetFrequency+0x17c>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800a480:	4293      	cmp	r3, r2
 800a482:	d061      	beq.n	800a548 <wm8994_SetFrequency+0xf0>
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800a48a:	4293      	cmp	r3, r2
 800a48c:	f200 80a2 	bhi.w	800a5d4 <wm8994_SetFrequency+0x17c>
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800a496:	4293      	cmp	r3, r2
 800a498:	f000 808e 	beq.w	800a5b8 <wm8994_SetFrequency+0x160>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	f200 8096 	bhi.w	800a5d4 <wm8994_SetFrequency+0x17c>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800a4ae:	d03d      	beq.n	800a52c <wm8994_SetFrequency+0xd4>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800a4b6:	f200 808d 	bhi.w	800a5d4 <wm8994_SetFrequency+0x17c>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	f245 6222 	movw	r2, #22050	@ 0x5622
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d06b      	beq.n	800a59c <wm8994_SetFrequency+0x144>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	f245 6222 	movw	r2, #22050	@ 0x5622
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	f200 8082 	bhi.w	800a5d4 <wm8994_SetFrequency+0x17c>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800a4d6:	d01b      	beq.n	800a510 <wm8994_SetFrequency+0xb8>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800a4de:	d879      	bhi.n	800a5d4 <wm8994_SetFrequency+0x17c>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800a4e6:	d005      	beq.n	800a4f4 <wm8994_SetFrequency+0x9c>
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d046      	beq.n	800a580 <wm8994_SetFrequency+0x128>
 800a4f2:	e06f      	b.n	800a5d4 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800a4f4:	88fb      	ldrh	r3, [r7, #6]
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	2203      	movs	r2, #3
 800a4fa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f89e 	bl	800a640 <CODEC_IO_Write>
 800a504:	4603      	mov	r3, r0
 800a506:	461a      	mov	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4413      	add	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]
    break;
 800a50e:	e06f      	b.n	800a5f0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2233      	movs	r2, #51	@ 0x33
 800a516:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f890 	bl	800a640 <CODEC_IO_Write>
 800a520:	4603      	mov	r3, r0
 800a522:	461a      	mov	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4413      	add	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]
    break;
 800a52a:	e061      	b.n	800a5f0 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2263      	movs	r2, #99	@ 0x63
 800a532:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a536:	4618      	mov	r0, r3
 800a538:	f000 f882 	bl	800a640 <CODEC_IO_Write>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461a      	mov	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]
    break;
 800a546:	e053      	b.n	800a5f0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2283      	movs	r2, #131	@ 0x83
 800a54e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f874 	bl	800a640 <CODEC_IO_Write>
 800a558:	4603      	mov	r3, r0
 800a55a:	461a      	mov	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]
    break;
 800a562:	e045      	b.n	800a5f0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800a564:	88fb      	ldrh	r3, [r7, #6]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	22a3      	movs	r2, #163	@ 0xa3
 800a56a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 f866 	bl	800a640 <CODEC_IO_Write>
 800a574:	4603      	mov	r3, r0
 800a576:	461a      	mov	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4413      	add	r3, r2
 800a57c:	60fb      	str	r3, [r7, #12]
    break;
 800a57e:	e037      	b.n	800a5f0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800a580:	88fb      	ldrh	r3, [r7, #6]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2213      	movs	r2, #19
 800a586:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f858 	bl	800a640 <CODEC_IO_Write>
 800a590:	4603      	mov	r3, r0
 800a592:	461a      	mov	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
    break;
 800a59a:	e029      	b.n	800a5f0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800a59c:	88fb      	ldrh	r3, [r7, #6]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2243      	movs	r2, #67	@ 0x43
 800a5a2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 f84a 	bl	800a640 <CODEC_IO_Write>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	60fb      	str	r3, [r7, #12]
    break;
 800a5b6:	e01b      	b.n	800a5f0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800a5b8:	88fb      	ldrh	r3, [r7, #6]
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2273      	movs	r2, #115	@ 0x73
 800a5be:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 f83c 	bl	800a640 <CODEC_IO_Write>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]
    break; 
 800a5d2:	e00d      	b.n	800a5f0 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2283      	movs	r2, #131	@ 0x83
 800a5da:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 f82e 	bl	800a640 <CODEC_IO_Write>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
    break; 
 800a5ee:	bf00      	nop
  }
  return counter;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	00017700 	.word	0x00017700

0800a600 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2200      	movs	r2, #0
 800a614:	2100      	movs	r1, #0
 800a616:	4618      	mov	r0, r3
 800a618:	f000 f812 	bl	800a640 <CODEC_IO_Write>
 800a61c:	4603      	mov	r3, r0
 800a61e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800a620:	4b05      	ldr	r3, [pc, #20]	@ (800a638 <wm8994_Reset+0x38>)
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800a626:	4b05      	ldr	r3, [pc, #20]	@ (800a63c <wm8994_Reset+0x3c>)
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]

  return counter;
 800a62c:	68fb      	ldr	r3, [r7, #12]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200010a4 	.word	0x200010a4
 800a63c:	200010a8 	.word	0x200010a8

0800a640 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
 800a64a:	460b      	mov	r3, r1
 800a64c:	80bb      	strh	r3, [r7, #4]
 800a64e:	4613      	mov	r3, r2
 800a650:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800a656:	887a      	ldrh	r2, [r7, #2]
 800a658:	88b9      	ldrh	r1, [r7, #4]
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fb fd61 	bl	8006124 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	b2db      	uxtb	r3, r3
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a6a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a674:	480d      	ldr	r0, [pc, #52]	@ (800a6ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a676:	490e      	ldr	r1, [pc, #56]	@ (800a6b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a678:	4a0e      	ldr	r2, [pc, #56]	@ (800a6b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a67a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a67c:	e002      	b.n	800a684 <LoopCopyDataInit>

0800a67e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a67e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a682:	3304      	adds	r3, #4

0800a684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a688:	d3f9      	bcc.n	800a67e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a68a:	4a0b      	ldr	r2, [pc, #44]	@ (800a6b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a68c:	4c0b      	ldr	r4, [pc, #44]	@ (800a6bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800a68e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a690:	e001      	b.n	800a696 <LoopFillZerobss>

0800a692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a694:	3204      	adds	r2, #4

0800a696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a698:	d3fb      	bcc.n	800a692 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a69a:	f7fe fb6b 	bl	8008d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a69e:	f00b fdc5 	bl	801622c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a6a2:	f7f9 fd2f 	bl	8004104 <main>
  bx  lr    
 800a6a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a6a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800a6ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a6b0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800a6b4:	08025770 	.word	0x08025770
  ldr r2, =_sbss
 800a6b8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800a6bc:	20009804 	.word	0x20009804

0800a6c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a6c0:	e7fe      	b.n	800a6c0 <ADC_IRQHandler>

0800a6c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a6c6:	2003      	movs	r0, #3
 800a6c8:	f000 fcf3 	bl	800b0b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	f7fe f9af 	bl	8008a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a6d2:	f7fd fcc7 	bl	8008064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a6e0:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <HAL_IncTick+0x20>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b06      	ldr	r3, [pc, #24]	@ (800a700 <HAL_IncTick+0x24>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	4a04      	ldr	r2, [pc, #16]	@ (800a700 <HAL_IncTick+0x24>)
 800a6ee:	6013      	str	r3, [r2, #0]
}
 800a6f0:	bf00      	nop
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	20000098 	.word	0x20000098
 800a700:	200010ac 	.word	0x200010ac

0800a704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a704:	b480      	push	{r7}
 800a706:	af00      	add	r7, sp, #0
  return uwTick;
 800a708:	4b03      	ldr	r3, [pc, #12]	@ (800a718 <HAL_GetTick+0x14>)
 800a70a:	681b      	ldr	r3, [r3, #0]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	200010ac 	.word	0x200010ac

0800a71c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a724:	f7ff ffee 	bl	800a704 <HAL_GetTick>
 800a728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d005      	beq.n	800a742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a736:	4b0a      	ldr	r3, [pc, #40]	@ (800a760 <HAL_Delay+0x44>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a742:	bf00      	nop
 800a744:	f7ff ffde 	bl	800a704 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	429a      	cmp	r2, r3
 800a752:	d8f7      	bhi.n	800a744 <HAL_Delay+0x28>
  {
  }
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20000098 	.word	0x20000098

0800a764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e031      	b.n	800a7de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d109      	bne.n	800a796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7fd fc96 	bl	80080b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79a:	f003 0310 	and.w	r3, r3, #16
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d116      	bne.n	800a7d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7a6:	4b10      	ldr	r3, [pc, #64]	@ (800a7e8 <HAL_ADC_Init+0x84>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	f043 0202 	orr.w	r2, r3, #2
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fad6 	bl	800ad64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	f043 0201 	orr.w	r2, r3, #1
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	641a      	str	r2, [r3, #64]	@ 0x40
 800a7ce:	e001      	b.n	800a7d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	ffffeefd 	.word	0xffffeefd

0800a7ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_ADC_Start+0x1a>
 800a802:	2302      	movs	r3, #2
 800a804:	e0ad      	b.n	800a962 <HAL_ADC_Start+0x176>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d018      	beq.n	800a84e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a82c:	4b50      	ldr	r3, [pc, #320]	@ (800a970 <HAL_ADC_Start+0x184>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a50      	ldr	r2, [pc, #320]	@ (800a974 <HAL_ADC_Start+0x188>)
 800a832:	fba2 2303 	umull	r2, r3, r2, r3
 800a836:	0c9a      	lsrs	r2, r3, #18
 800a838:	4613      	mov	r3, r2
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	4413      	add	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a840:	e002      	b.n	800a848 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3b01      	subs	r3, #1
 800a846:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f9      	bne.n	800a842 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d175      	bne.n	800a948 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a860:	4b45      	ldr	r3, [pc, #276]	@ (800a978 <HAL_ADC_Start+0x18c>)
 800a862:	4013      	ands	r3, r2
 800a864:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a876:	2b00      	cmp	r3, #0
 800a878:	d007      	beq.n	800a88a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a882:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a896:	d106      	bne.n	800a8a6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a89c:	f023 0206 	bic.w	r2, r3, #6
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	645a      	str	r2, [r3, #68]	@ 0x44
 800a8a4:	e002      	b.n	800a8ac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a8bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a8be:	4b2f      	ldr	r3, [pc, #188]	@ (800a97c <HAL_ADC_Start+0x190>)
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f003 031f 	and.w	r3, r3, #31
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10f      	bne.n	800a8ea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d143      	bne.n	800a960 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689a      	ldr	r2, [r3, #8]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a8e6:	609a      	str	r2, [r3, #8]
 800a8e8:	e03a      	b.n	800a960 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a24      	ldr	r2, [pc, #144]	@ (800a980 <HAL_ADC_Start+0x194>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d10e      	bne.n	800a912 <HAL_ADC_Start+0x126>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d107      	bne.n	800a912 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a910:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800a912:	4b1a      	ldr	r3, [pc, #104]	@ (800a97c <HAL_ADC_Start+0x190>)
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d120      	bne.n	800a960 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a18      	ldr	r2, [pc, #96]	@ (800a984 <HAL_ADC_Start+0x198>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d11b      	bne.n	800a960 <HAL_ADC_Start+0x174>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d114      	bne.n	800a960 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689a      	ldr	r2, [r3, #8]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a944:	609a      	str	r2, [r3, #8]
 800a946:	e00b      	b.n	800a960 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94c:	f043 0210 	orr.w	r2, r3, #16
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a958:	f043 0201 	orr.w	r2, r3, #1
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	20000054 	.word	0x20000054
 800a974:	431bde83 	.word	0x431bde83
 800a978:	fffff8fe 	.word	0xfffff8fe
 800a97c:	40012300 	.word	0x40012300
 800a980:	40012000 	.word	0x40012000
 800a984:	40012200 	.word	0x40012200

0800a988 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9a4:	d113      	bne.n	800a9ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a9b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9b4:	d10b      	bne.n	800a9ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ba:	f043 0220 	orr.w	r2, r3, #32
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e063      	b.n	800aa96 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a9ce:	f7ff fe99 	bl	800a704 <HAL_GetTick>
 800a9d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a9d4:	e021      	b.n	800aa1a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9dc:	d01d      	beq.n	800aa1a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d007      	beq.n	800a9f4 <HAL_ADC_PollForConversion+0x6c>
 800a9e4:	f7ff fe8e 	bl	800a704 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d212      	bcs.n	800aa1a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d00b      	beq.n	800aa1a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa06:	f043 0204 	orr.w	r2, r3, #4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e03d      	b.n	800aa96 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d1d6      	bne.n	800a9d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f06f 0212 	mvn.w	r2, #18
 800aa30:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d123      	bne.n	800aa94 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d11f      	bne.n	800aa94 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d006      	beq.n	800aa70 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d111      	bne.n	800aa94 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa8c:	f043 0201 	orr.w	r2, r3, #1
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d101      	bne.n	800aad4 <HAL_ADC_ConfigChannel+0x1c>
 800aad0:	2302      	movs	r3, #2
 800aad2:	e136      	b.n	800ad42 <HAL_ADC_ConfigChannel+0x28a>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b09      	cmp	r3, #9
 800aae2:	d93a      	bls.n	800ab5a <HAL_ADC_ConfigChannel+0xa2>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaec:	d035      	beq.n	800ab5a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68d9      	ldr	r1, [r3, #12]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	4613      	mov	r3, r2
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	4413      	add	r3, r2
 800ab02:	3b1e      	subs	r3, #30
 800ab04:	2207      	movs	r2, #7
 800ab06:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0a:	43da      	mvns	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	400a      	ands	r2, r1
 800ab12:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a8d      	ldr	r2, [pc, #564]	@ (800ad50 <HAL_ADC_ConfigChannel+0x298>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d10a      	bne.n	800ab34 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68d9      	ldr	r1, [r3, #12]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	061a      	lsls	r2, r3, #24
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ab32:	e035      	b.n	800aba0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68d9      	ldr	r1, [r3, #12]
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	689a      	ldr	r2, [r3, #8]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	4618      	mov	r0, r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	4403      	add	r3, r0
 800ab4c:	3b1e      	subs	r3, #30
 800ab4e:	409a      	lsls	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ab58:	e022      	b.n	800aba0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6919      	ldr	r1, [r3, #16]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	461a      	mov	r2, r3
 800ab68:	4613      	mov	r3, r2
 800ab6a:	005b      	lsls	r3, r3, #1
 800ab6c:	4413      	add	r3, r2
 800ab6e:	2207      	movs	r2, #7
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	43da      	mvns	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	400a      	ands	r2, r1
 800ab7c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6919      	ldr	r1, [r3, #16]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	4618      	mov	r0, r3
 800ab90:	4603      	mov	r3, r0
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	4403      	add	r3, r0
 800ab96:	409a      	lsls	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	2b06      	cmp	r3, #6
 800aba6:	d824      	bhi.n	800abf2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	3b05      	subs	r3, #5
 800abba:	221f      	movs	r2, #31
 800abbc:	fa02 f303 	lsl.w	r3, r2, r3
 800abc0:	43da      	mvns	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	400a      	ands	r2, r1
 800abc8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	4618      	mov	r0, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	3b05      	subs	r3, #5
 800abe4:	fa00 f203 	lsl.w	r2, r0, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	430a      	orrs	r2, r1
 800abee:	635a      	str	r2, [r3, #52]	@ 0x34
 800abf0:	e04c      	b.n	800ac8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	2b0c      	cmp	r3, #12
 800abf8:	d824      	bhi.n	800ac44 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	4613      	mov	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	3b23      	subs	r3, #35	@ 0x23
 800ac0c:	221f      	movs	r2, #31
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	43da      	mvns	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	400a      	ands	r2, r1
 800ac1a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	4618      	mov	r0, r3
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	3b23      	subs	r3, #35	@ 0x23
 800ac36:	fa00 f203 	lsl.w	r2, r0, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac42:	e023      	b.n	800ac8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	3b41      	subs	r3, #65	@ 0x41
 800ac56:	221f      	movs	r2, #31
 800ac58:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5c:	43da      	mvns	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	400a      	ands	r2, r1
 800ac64:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	4618      	mov	r0, r3
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3b41      	subs	r3, #65	@ 0x41
 800ac80:	fa00 f203 	lsl.w	r2, r0, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a30      	ldr	r2, [pc, #192]	@ (800ad54 <HAL_ADC_ConfigChannel+0x29c>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d10a      	bne.n	800acac <HAL_ADC_ConfigChannel+0x1f4>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac9e:	d105      	bne.n	800acac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800aca0:	4b2d      	ldr	r3, [pc, #180]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	4a2c      	ldr	r2, [pc, #176]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800aca6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800acaa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a28      	ldr	r2, [pc, #160]	@ (800ad54 <HAL_ADC_ConfigChannel+0x29c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d10f      	bne.n	800acd6 <HAL_ADC_ConfigChannel+0x21e>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b12      	cmp	r3, #18
 800acbc:	d10b      	bne.n	800acd6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800acbe:	4b26      	ldr	r3, [pc, #152]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4a25      	ldr	r2, [pc, #148]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800acc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800acc8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800acca:	4b23      	ldr	r3, [pc, #140]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	4a22      	ldr	r2, [pc, #136]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800acd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800acd4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a1e      	ldr	r2, [pc, #120]	@ (800ad54 <HAL_ADC_ConfigChannel+0x29c>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d12b      	bne.n	800ad38 <HAL_ADC_ConfigChannel+0x280>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a1a      	ldr	r2, [pc, #104]	@ (800ad50 <HAL_ADC_ConfigChannel+0x298>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d003      	beq.n	800acf2 <HAL_ADC_ConfigChannel+0x23a>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b11      	cmp	r3, #17
 800acf0:	d122      	bne.n	800ad38 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800acf2:	4b19      	ldr	r3, [pc, #100]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	4a18      	ldr	r2, [pc, #96]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800acf8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800acfc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800acfe:	4b16      	ldr	r3, [pc, #88]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	4a15      	ldr	r2, [pc, #84]	@ (800ad58 <HAL_ADC_ConfigChannel+0x2a0>)
 800ad04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a10      	ldr	r2, [pc, #64]	@ (800ad50 <HAL_ADC_ConfigChannel+0x298>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d111      	bne.n	800ad38 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800ad14:	4b11      	ldr	r3, [pc, #68]	@ (800ad5c <HAL_ADC_ConfigChannel+0x2a4>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a11      	ldr	r2, [pc, #68]	@ (800ad60 <HAL_ADC_ConfigChannel+0x2a8>)
 800ad1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1e:	0c9a      	lsrs	r2, r3, #18
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ad2a:	e002      	b.n	800ad32 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1f9      	bne.n	800ad2c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	10000012 	.word	0x10000012
 800ad54:	40012000 	.word	0x40012000
 800ad58:	40012300 	.word	0x40012300
 800ad5c:	20000054 	.word	0x20000054
 800ad60:	431bde83 	.word	0x431bde83

0800ad64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800ad6c:	4b78      	ldr	r3, [pc, #480]	@ (800af50 <ADC_Init+0x1ec>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	4a77      	ldr	r2, [pc, #476]	@ (800af50 <ADC_Init+0x1ec>)
 800ad72:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800ad76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800ad78:	4b75      	ldr	r3, [pc, #468]	@ (800af50 <ADC_Init+0x1ec>)
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	4973      	ldr	r1, [pc, #460]	@ (800af50 <ADC_Init+0x1ec>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ad94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6859      	ldr	r1, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	021a      	lsls	r2, r3, #8
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800adb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	6859      	ldr	r1, [r3, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800adda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6899      	ldr	r1, [r3, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68da      	ldr	r2, [r3, #12]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf2:	4a58      	ldr	r2, [pc, #352]	@ (800af54 <ADC_Init+0x1f0>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d022      	beq.n	800ae3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689a      	ldr	r2, [r3, #8]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6899      	ldr	r1, [r3, #8]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6899      	ldr	r1, [r3, #8]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	609a      	str	r2, [r3, #8]
 800ae3c:	e00f      	b.n	800ae5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	689a      	ldr	r2, [r3, #8]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689a      	ldr	r2, [r3, #8]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 0202 	bic.w	r2, r2, #2
 800ae6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6899      	ldr	r1, [r3, #8]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	005a      	lsls	r2, r3, #1
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d01b      	beq.n	800aec4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800aeaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6859      	ldr	r1, [r3, #4]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	035a      	lsls	r2, r3, #13
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	605a      	str	r2, [r3, #4]
 800aec2:	e007      	b.n	800aed4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aed2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800aee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	051a      	lsls	r2, r3, #20
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800af08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6899      	ldr	r1, [r3, #8]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af16:	025a      	lsls	r2, r3, #9
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	689a      	ldr	r2, [r3, #8]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6899      	ldr	r1, [r3, #8]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	029a      	lsls	r2, r3, #10
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	609a      	str	r2, [r3, #8]
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	40012300 	.word	0x40012300
 800af54:	0f000001 	.word	0x0f000001

0800af58 <__NVIC_SetPriorityGrouping>:
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af68:	4b0b      	ldr	r3, [pc, #44]	@ (800af98 <__NVIC_SetPriorityGrouping+0x40>)
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800af74:	4013      	ands	r3, r2
 800af76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800af80:	4b06      	ldr	r3, [pc, #24]	@ (800af9c <__NVIC_SetPriorityGrouping+0x44>)
 800af82:	4313      	orrs	r3, r2
 800af84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af86:	4a04      	ldr	r2, [pc, #16]	@ (800af98 <__NVIC_SetPriorityGrouping+0x40>)
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	60d3      	str	r3, [r2, #12]
}
 800af8c:	bf00      	nop
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	e000ed00 	.word	0xe000ed00
 800af9c:	05fa0000 	.word	0x05fa0000

0800afa0 <__NVIC_GetPriorityGrouping>:
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800afa4:	4b04      	ldr	r3, [pc, #16]	@ (800afb8 <__NVIC_GetPriorityGrouping+0x18>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	0a1b      	lsrs	r3, r3, #8
 800afaa:	f003 0307 	and.w	r3, r3, #7
}
 800afae:	4618      	mov	r0, r3
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	e000ed00 	.word	0xe000ed00

0800afbc <__NVIC_EnableIRQ>:
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	db0b      	blt.n	800afe6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	f003 021f 	and.w	r2, r3, #31
 800afd4:	4907      	ldr	r1, [pc, #28]	@ (800aff4 <__NVIC_EnableIRQ+0x38>)
 800afd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afda:	095b      	lsrs	r3, r3, #5
 800afdc:	2001      	movs	r0, #1
 800afde:	fa00 f202 	lsl.w	r2, r0, r2
 800afe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800afe6:	bf00      	nop
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	e000e100 	.word	0xe000e100

0800aff8 <__NVIC_SetPriority>:
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	db0a      	blt.n	800b022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	490c      	ldr	r1, [pc, #48]	@ (800b044 <__NVIC_SetPriority+0x4c>)
 800b012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b016:	0112      	lsls	r2, r2, #4
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	440b      	add	r3, r1
 800b01c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b020:	e00a      	b.n	800b038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	b2da      	uxtb	r2, r3
 800b026:	4908      	ldr	r1, [pc, #32]	@ (800b048 <__NVIC_SetPriority+0x50>)
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	f003 030f 	and.w	r3, r3, #15
 800b02e:	3b04      	subs	r3, #4
 800b030:	0112      	lsls	r2, r2, #4
 800b032:	b2d2      	uxtb	r2, r2
 800b034:	440b      	add	r3, r1
 800b036:	761a      	strb	r2, [r3, #24]
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	e000e100 	.word	0xe000e100
 800b048:	e000ed00 	.word	0xe000ed00

0800b04c <NVIC_EncodePriority>:
{
 800b04c:	b480      	push	{r7}
 800b04e:	b089      	sub	sp, #36	@ 0x24
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f003 0307 	and.w	r3, r3, #7
 800b05e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	f1c3 0307 	rsb	r3, r3, #7
 800b066:	2b04      	cmp	r3, #4
 800b068:	bf28      	it	cs
 800b06a:	2304      	movcs	r3, #4
 800b06c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	3304      	adds	r3, #4
 800b072:	2b06      	cmp	r3, #6
 800b074:	d902      	bls.n	800b07c <NVIC_EncodePriority+0x30>
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	3b03      	subs	r3, #3
 800b07a:	e000      	b.n	800b07e <NVIC_EncodePriority+0x32>
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b080:	f04f 32ff 	mov.w	r2, #4294967295
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	fa02 f303 	lsl.w	r3, r2, r3
 800b08a:	43da      	mvns	r2, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	401a      	ands	r2, r3
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b094:	f04f 31ff 	mov.w	r1, #4294967295
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	fa01 f303 	lsl.w	r3, r1, r3
 800b09e:	43d9      	mvns	r1, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0a4:	4313      	orrs	r3, r2
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3724      	adds	r7, #36	@ 0x24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff ff4c 	bl	800af58 <__NVIC_SetPriorityGrouping>
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b0da:	f7ff ff61 	bl	800afa0 <__NVIC_GetPriorityGrouping>
 800b0de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	6978      	ldr	r0, [r7, #20]
 800b0e6:	f7ff ffb1 	bl	800b04c <NVIC_EncodePriority>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff ff80 	bl	800aff8 <__NVIC_SetPriority>
}
 800b0f8:	bf00      	nop
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b10a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff ff54 	bl	800afbc <__NVIC_EnableIRQ>
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b128:	f7ff faec 	bl	800a704 <HAL_GetTick>
 800b12c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e099      	b.n	800b26c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f022 0201 	bic.w	r2, r2, #1
 800b156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b158:	e00f      	b.n	800b17a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b15a:	f7ff fad3 	bl	800a704 <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b05      	cmp	r3, #5
 800b166:	d908      	bls.n	800b17a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2220      	movs	r2, #32
 800b16c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2203      	movs	r2, #3
 800b172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e078      	b.n	800b26c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e8      	bne.n	800b15a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	4b38      	ldr	r3, [pc, #224]	@ (800b274 <HAL_DMA_Init+0x158>)
 800b194:	4013      	ands	r3, r2
 800b196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b1a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a1b      	ldr	r3, [r3, #32]
 800b1c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d0:	2b04      	cmp	r3, #4
 800b1d2:	d107      	bne.n	800b1e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f023 0307 	bic.w	r3, r3, #7
 800b1fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b200:	697a      	ldr	r2, [r7, #20]
 800b202:	4313      	orrs	r3, r2
 800b204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d117      	bne.n	800b23e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	4313      	orrs	r3, r2
 800b216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00e      	beq.n	800b23e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fb03 	bl	800b82c <DMA_CheckFifoParam>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d008      	beq.n	800b23e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2240      	movs	r2, #64	@ 0x40
 800b230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b23a:	2301      	movs	r3, #1
 800b23c:	e016      	b.n	800b26c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 faba 	bl	800b7c0 <DMA_CalcBaseAndBitshift>
 800b24c:	4603      	mov	r3, r0
 800b24e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b254:	223f      	movs	r2, #63	@ 0x3f
 800b256:	409a      	lsls	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	f010803f 	.word	0xf010803f

0800b278 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e050      	b.n	800b32c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b02      	cmp	r3, #2
 800b294:	d101      	bne.n	800b29a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b296:	2302      	movs	r3, #2
 800b298:	e048      	b.n	800b32c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f022 0201 	bic.w	r2, r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2221      	movs	r2, #33	@ 0x21
 800b2d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa70 	bl	800b7c0 <DMA_CalcBaseAndBitshift>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2e8:	223f      	movs	r2, #63	@ 0x3f
 800b2ea:	409a      	lsls	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b34a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b352:	2b01      	cmp	r3, #1
 800b354:	d101      	bne.n	800b35a <HAL_DMA_Start_IT+0x26>
 800b356:	2302      	movs	r3, #2
 800b358:	e048      	b.n	800b3ec <HAL_DMA_Start_IT+0xb8>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2201      	movs	r2, #1
 800b35e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d137      	bne.n	800b3de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2202      	movs	r2, #2
 800b372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	68b9      	ldr	r1, [r7, #8]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f000 f9ee 	bl	800b764 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b38c:	223f      	movs	r2, #63	@ 0x3f
 800b38e:	409a      	lsls	r2, r3
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0216 	orr.w	r2, r2, #22
 800b3a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	695a      	ldr	r2, [r3, #20]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b3b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d007      	beq.n	800b3cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0208 	orr.w	r2, r2, #8
 800b3ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f042 0201 	orr.w	r2, r2, #1
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	e005      	b.n	800b3ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b02      	cmp	r3, #2
 800b406:	d004      	beq.n	800b412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2280      	movs	r2, #128	@ 0x80
 800b40c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e00c      	b.n	800b42c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2205      	movs	r2, #5
 800b416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f022 0201 	bic.w	r2, r2, #1
 800b428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b444:	4b8e      	ldr	r3, [pc, #568]	@ (800b680 <HAL_DMA_IRQHandler+0x248>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a8e      	ldr	r2, [pc, #568]	@ (800b684 <HAL_DMA_IRQHandler+0x24c>)
 800b44a:	fba2 2303 	umull	r2, r3, r2, r3
 800b44e:	0a9b      	lsrs	r3, r3, #10
 800b450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b462:	2208      	movs	r2, #8
 800b464:	409a      	lsls	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	4013      	ands	r3, r2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d01a      	beq.n	800b4a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d013      	beq.n	800b4a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 0204 	bic.w	r2, r2, #4
 800b48a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b490:	2208      	movs	r2, #8
 800b492:	409a      	lsls	r2, r3
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b49c:	f043 0201 	orr.w	r2, r3, #1
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	409a      	lsls	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d012      	beq.n	800b4da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	409a      	lsls	r2, r3
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4d2:	f043 0202 	orr.w	r2, r3, #2
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4de:	2204      	movs	r2, #4
 800b4e0:	409a      	lsls	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d012      	beq.n	800b510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 0302 	and.w	r3, r3, #2
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4fc:	2204      	movs	r2, #4
 800b4fe:	409a      	lsls	r2, r3
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b508:	f043 0204 	orr.w	r2, r3, #4
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b514:	2210      	movs	r2, #16
 800b516:	409a      	lsls	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4013      	ands	r3, r2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d043      	beq.n	800b5a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0308 	and.w	r3, r3, #8
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d03c      	beq.n	800b5a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b532:	2210      	movs	r2, #16
 800b534:	409a      	lsls	r2, r3
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b544:	2b00      	cmp	r3, #0
 800b546:	d018      	beq.n	800b57a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d108      	bne.n	800b568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d024      	beq.n	800b5a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	4798      	blx	r3
 800b566:	e01f      	b.n	800b5a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01b      	beq.n	800b5a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	4798      	blx	r3
 800b578:	e016      	b.n	800b5a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b584:	2b00      	cmp	r3, #0
 800b586:	d107      	bne.n	800b598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f022 0208 	bic.w	r2, r2, #8
 800b596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	409a      	lsls	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 808f 	beq.w	800b6d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0310 	and.w	r3, r3, #16
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 8087 	beq.w	800b6d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5ce:	2220      	movs	r2, #32
 800b5d0:	409a      	lsls	r2, r3
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b05      	cmp	r3, #5
 800b5e0:	d136      	bne.n	800b650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f022 0216 	bic.w	r2, r2, #22
 800b5f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	695a      	ldr	r2, [r3, #20]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b606:	2b00      	cmp	r3, #0
 800b608:	d103      	bne.n	800b612 <HAL_DMA_IRQHandler+0x1da>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d007      	beq.n	800b622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f022 0208 	bic.w	r2, r2, #8
 800b620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b626:	223f      	movs	r2, #63	@ 0x3f
 800b628:	409a      	lsls	r2, r3
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b642:	2b00      	cmp	r3, #0
 800b644:	d07e      	beq.n	800b744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
        }
        return;
 800b64e:	e079      	b.n	800b744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d01d      	beq.n	800b69a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10d      	bne.n	800b688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b670:	2b00      	cmp	r3, #0
 800b672:	d031      	beq.n	800b6d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	4798      	blx	r3
 800b67c:	e02c      	b.n	800b6d8 <HAL_DMA_IRQHandler+0x2a0>
 800b67e:	bf00      	nop
 800b680:	20000054 	.word	0x20000054
 800b684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d023      	beq.n	800b6d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	4798      	blx	r3
 800b698:	e01e      	b.n	800b6d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10f      	bne.n	800b6c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f022 0210 	bic.w	r2, r2, #16
 800b6b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d032      	beq.n	800b746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d022      	beq.n	800b732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2205      	movs	r2, #5
 800b6f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0201 	bic.w	r2, r2, #1
 800b702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3301      	adds	r3, #1
 800b708:	60bb      	str	r3, [r7, #8]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d307      	bcc.n	800b720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1f2      	bne.n	800b704 <HAL_DMA_IRQHandler+0x2cc>
 800b71e:	e000      	b.n	800b722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d005      	beq.n	800b746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	4798      	blx	r3
 800b742:	e000      	b.n	800b746 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b744:	bf00      	nop
    }
  }
}
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b780:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	2b40      	cmp	r3, #64	@ 0x40
 800b790:	d108      	bne.n	800b7a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b7a2:	e007      	b.n	800b7b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	60da      	str	r2, [r3, #12]
}
 800b7b4:	bf00      	nop
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	3b10      	subs	r3, #16
 800b7d0:	4a13      	ldr	r2, [pc, #76]	@ (800b820 <DMA_CalcBaseAndBitshift+0x60>)
 800b7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d6:	091b      	lsrs	r3, r3, #4
 800b7d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b7da:	4a12      	ldr	r2, [pc, #72]	@ (800b824 <DMA_CalcBaseAndBitshift+0x64>)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4413      	add	r3, r2
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d908      	bls.n	800b800 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b828 <DMA_CalcBaseAndBitshift+0x68>)
 800b7f6:	4013      	ands	r3, r2
 800b7f8:	1d1a      	adds	r2, r3, #4
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800b7fe:	e006      	b.n	800b80e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	4b08      	ldr	r3, [pc, #32]	@ (800b828 <DMA_CalcBaseAndBitshift+0x68>)
 800b808:	4013      	ands	r3, r2
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	aaaaaaab 	.word	0xaaaaaaab
 800b824:	08025664 	.word	0x08025664
 800b828:	fffffc00 	.word	0xfffffc00

0800b82c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b83c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d11f      	bne.n	800b886 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d856      	bhi.n	800b8fa <DMA_CheckFifoParam+0xce>
 800b84c:	a201      	add	r2, pc, #4	@ (adr r2, 800b854 <DMA_CheckFifoParam+0x28>)
 800b84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b852:	bf00      	nop
 800b854:	0800b865 	.word	0x0800b865
 800b858:	0800b877 	.word	0x0800b877
 800b85c:	0800b865 	.word	0x0800b865
 800b860:	0800b8fb 	.word	0x0800b8fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d046      	beq.n	800b8fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b874:	e043      	b.n	800b8fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b87e:	d140      	bne.n	800b902 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b884:	e03d      	b.n	800b902 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	699b      	ldr	r3, [r3, #24]
 800b88a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b88e:	d121      	bne.n	800b8d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b03      	cmp	r3, #3
 800b894:	d837      	bhi.n	800b906 <DMA_CheckFifoParam+0xda>
 800b896:	a201      	add	r2, pc, #4	@ (adr r2, 800b89c <DMA_CheckFifoParam+0x70>)
 800b898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89c:	0800b8ad 	.word	0x0800b8ad
 800b8a0:	0800b8b3 	.word	0x0800b8b3
 800b8a4:	0800b8ad 	.word	0x0800b8ad
 800b8a8:	0800b8c5 	.word	0x0800b8c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b0:	e030      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d025      	beq.n	800b90a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8c2:	e022      	b.n	800b90a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b8cc:	d11f      	bne.n	800b90e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b8d2:	e01c      	b.n	800b90e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d903      	bls.n	800b8e2 <DMA_CheckFifoParam+0xb6>
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d003      	beq.n	800b8e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b8e0:	e018      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e6:	e015      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f8:	e00b      	b.n	800b912 <DMA_CheckFifoParam+0xe6>
      break;
 800b8fa:	bf00      	nop
 800b8fc:	e00a      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      break;
 800b8fe:	bf00      	nop
 800b900:	e008      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      break;
 800b902:	bf00      	nop
 800b904:	e006      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      break;
 800b906:	bf00      	nop
 800b908:	e004      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      break;
 800b90a:	bf00      	nop
 800b90c:	e002      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      break;   
 800b90e:	bf00      	nop
 800b910:	e000      	b.n	800b914 <DMA_CheckFifoParam+0xe8>
      break;
 800b912:	bf00      	nop
    }
  } 
  
  return status; 
 800b914:	7bfb      	ldrb	r3, [r7, #15]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop

0800b924 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e039      	b.n	800b9aa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d106      	bne.n	800b950 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7fc fc38 	bl	80081c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2202      	movs	r2, #2
 800b954:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b974:	f023 0107 	bic.w	r1, r3, #7
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689a      	ldr	r2, [r3, #8]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b98a:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b4 <HAL_DMA2D_Init+0x90>)
 800b98c:	4013      	ands	r3, r2
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	68d1      	ldr	r1, [r2, #12]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	6812      	ldr	r2, [r2, #0]
 800b996:	430b      	orrs	r3, r1
 800b998:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	ffffc000 	.word	0xffffc000

0800b9b8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af02      	add	r7, sp, #8
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d101      	bne.n	800b9d4 <HAL_DMA2D_Start+0x1c>
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	e018      	b.n	800ba06 <HAL_DMA2D_Start+0x4e>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	68b9      	ldr	r1, [r7, #8]
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 f988 	bl	800bd04 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f042 0201 	orr.w	r2, r2, #1
 800ba02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b086      	sub	sp, #24
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d056      	beq.n	800bad8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba2a:	f7fe fe6b 	bl	800a704 <HAL_GetTick>
 800ba2e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800ba30:	e04b      	b.n	800baca <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d023      	beq.n	800ba8c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d005      	beq.n	800ba5a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba52:	f043 0202 	orr.w	r2, r3, #2
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d005      	beq.n	800ba70 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba68:	f043 0201 	orr.w	r2, r3, #1
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2221      	movs	r2, #33	@ 0x21
 800ba76:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e0a5      	b.n	800bbd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba92:	d01a      	beq.n	800baca <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ba94:	f7fe fe36 	bl	800a704 <HAL_GetTick>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d302      	bcc.n	800baaa <HAL_DMA2D_PollForTransfer+0x9c>
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10f      	bne.n	800baca <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baae:	f043 0220 	orr.w	r2, r3, #32
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2203      	movs	r2, #3
 800baba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e086      	b.n	800bbd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0ac      	beq.n	800ba32 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	f003 0320 	and.w	r3, r3, #32
 800bae2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baea:	f003 0320 	and.w	r3, r3, #32
 800baee:	693a      	ldr	r2, [r7, #16]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d061      	beq.n	800bbbe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800bafa:	f7fe fe03 	bl	800a704 <HAL_GetTick>
 800bafe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bb00:	e056      	b.n	800bbb0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d02e      	beq.n	800bb72 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f003 0308 	and.w	r3, r3, #8
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d005      	beq.n	800bb2a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb22:	f043 0204 	orr.w	r2, r3, #4
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f003 0320 	and.w	r3, r3, #32
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb38:	f043 0202 	orr.w	r2, r3, #2
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb4e:	f043 0201 	orr.w	r2, r3, #1
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2229      	movs	r2, #41	@ 0x29
 800bb5c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2204      	movs	r2, #4
 800bb62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e032      	b.n	800bbd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb78:	d01a      	beq.n	800bbb0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb7a:	f7fe fdc3 	bl	800a704 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d302      	bcc.n	800bb90 <HAL_DMA2D_PollForTransfer+0x182>
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10f      	bne.n	800bbb0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb94:	f043 0220 	orr.w	r2, r3, #32
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2203      	movs	r2, #3
 800bba0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e013      	b.n	800bbd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f003 0310 	and.w	r3, r3, #16
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0a1      	beq.n	800bb02 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2212      	movs	r2, #18
 800bbc4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d101      	bne.n	800bc00 <HAL_DMA2D_ConfigLayer+0x20>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e079      	b.n	800bcf4 <HAL_DMA2D_ConfigLayer+0x114>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	011b      	lsls	r3, r3, #4
 800bc14:	3318      	adds	r3, #24
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	4413      	add	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	041b      	lsls	r3, r3, #16
 800bc26:	4313      	orrs	r3, r2
 800bc28:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800bc2a:	4b35      	ldr	r3, [pc, #212]	@ (800bd00 <HAL_DMA2D_ConfigLayer+0x120>)
 800bc2c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2b0a      	cmp	r3, #10
 800bc34:	d003      	beq.n	800bc3e <HAL_DMA2D_ConfigLayer+0x5e>
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2b09      	cmp	r3, #9
 800bc3c:	d107      	bne.n	800bc4e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	e005      	b.n	800bc5a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	061b      	lsls	r3, r3, #24
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d120      	bne.n	800bca2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	43db      	mvns	r3, r3
 800bc6a:	ea02 0103 	and.w	r1, r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	2b0a      	cmp	r3, #10
 800bc88:	d003      	beq.n	800bc92 <HAL_DMA2D_ConfigLayer+0xb2>
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	2b09      	cmp	r3, #9
 800bc90:	d127      	bne.n	800bce2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	68da      	ldr	r2, [r3, #12]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800bc9e:	629a      	str	r2, [r3, #40]	@ 0x28
 800bca0:	e01f      	b.n	800bce2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69da      	ldr	r2, [r3, #28]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	43db      	mvns	r3, r3
 800bcac:	ea02 0103 	and.w	r1, r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	430a      	orrs	r2, r1
 800bcb8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	2b0a      	cmp	r3, #10
 800bcca:	d003      	beq.n	800bcd4 <HAL_DMA2D_ConfigLayer+0xf4>
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	2b09      	cmp	r3, #9
 800bcd2:	d106      	bne.n	800bce2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	68da      	ldr	r2, [r3, #12]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800bce0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	371c      	adds	r7, #28
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	ff03000f 	.word	0xff03000f

0800bd04 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b08b      	sub	sp, #44	@ 0x2c
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd18:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	041a      	lsls	r2, r3, #16
 800bd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd22:	431a      	orrs	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd3c:	d174      	bne.n	800be28 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bd44:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bd4c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bd54:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d108      	bne.n	800bd76 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800bd64:	69ba      	ldr	r2, [r7, #24]
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd74:	e053      	b.n	800be1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d106      	bne.n	800bd8c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800bd7e:	69ba      	ldr	r2, [r7, #24]
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd8a:	e048      	b.n	800be1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d111      	bne.n	800bdb8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	0cdb      	lsrs	r3, r3, #19
 800bd98:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	0a9b      	lsrs	r3, r3, #10
 800bd9e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	08db      	lsrs	r3, r3, #3
 800bda4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	015a      	lsls	r2, r3, #5
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	02db      	lsls	r3, r3, #11
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdb6:	e032      	b.n	800be1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	2b03      	cmp	r3, #3
 800bdbe:	d117      	bne.n	800bdf0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	0fdb      	lsrs	r3, r3, #31
 800bdc4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	0cdb      	lsrs	r3, r3, #19
 800bdca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	0adb      	lsrs	r3, r3, #11
 800bdd0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	08db      	lsrs	r3, r3, #3
 800bdd6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	029b      	lsls	r3, r3, #10
 800bde0:	431a      	orrs	r2, r3
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	03db      	lsls	r3, r3, #15
 800bde6:	4313      	orrs	r3, r2
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdee:	e016      	b.n	800be1e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	0f1b      	lsrs	r3, r3, #28
 800bdf4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	0d1b      	lsrs	r3, r3, #20
 800bdfa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	0b1b      	lsrs	r3, r3, #12
 800be00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	091b      	lsrs	r3, r3, #4
 800be06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	011a      	lsls	r2, r3, #4
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	021b      	lsls	r3, r3, #8
 800be10:	431a      	orrs	r2, r3
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	031b      	lsls	r3, r3, #12
 800be16:	4313      	orrs	r3, r2
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be24:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800be26:	e003      	b.n	800be30 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	60da      	str	r2, [r3, #12]
}
 800be30:	bf00      	nop
 800be32:	372c      	adds	r7, #44	@ 0x2c
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b089      	sub	sp, #36	@ 0x24
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800be46:	2300      	movs	r3, #0
 800be48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800be4a:	2300      	movs	r3, #0
 800be4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800be4e:	2300      	movs	r3, #0
 800be50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800be52:	2300      	movs	r3, #0
 800be54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800be56:	2300      	movs	r3, #0
 800be58:	61fb      	str	r3, [r7, #28]
 800be5a:	e175      	b.n	800c148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800be5c:	2201      	movs	r2, #1
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	fa02 f303 	lsl.w	r3, r2, r3
 800be64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	4013      	ands	r3, r2
 800be6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	429a      	cmp	r2, r3
 800be76:	f040 8164 	bne.w	800c142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f003 0303 	and.w	r3, r3, #3
 800be82:	2b01      	cmp	r3, #1
 800be84:	d005      	beq.n	800be92 <HAL_GPIO_Init+0x56>
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f003 0303 	and.w	r3, r3, #3
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d130      	bne.n	800bef4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	2203      	movs	r2, #3
 800be9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bea2:	43db      	mvns	r3, r3
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	4013      	ands	r3, r2
 800bea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	fa02 f303 	lsl.w	r3, r2, r3
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	4313      	orrs	r3, r2
 800beba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bec8:	2201      	movs	r2, #1
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	fa02 f303 	lsl.w	r3, r2, r3
 800bed0:	43db      	mvns	r3, r3
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	4013      	ands	r3, r2
 800bed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	091b      	lsrs	r3, r3, #4
 800bede:	f003 0201 	and.w	r2, r3, #1
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	fa02 f303 	lsl.w	r3, r2, r3
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	4313      	orrs	r3, r2
 800beec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f003 0303 	and.w	r3, r3, #3
 800befc:	2b03      	cmp	r3, #3
 800befe:	d017      	beq.n	800bf30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	2203      	movs	r2, #3
 800bf0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf10:	43db      	mvns	r3, r3
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	4013      	ands	r3, r2
 800bf16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	689a      	ldr	r2, [r3, #8]
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	fa02 f303 	lsl.w	r3, r2, r3
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f003 0303 	and.w	r3, r3, #3
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d123      	bne.n	800bf84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	08da      	lsrs	r2, r3, #3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3208      	adds	r2, #8
 800bf44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	f003 0307 	and.w	r3, r3, #7
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	220f      	movs	r2, #15
 800bf54:	fa02 f303 	lsl.w	r3, r2, r3
 800bf58:	43db      	mvns	r3, r3
 800bf5a:	69ba      	ldr	r2, [r7, #24]
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	691a      	ldr	r2, [r3, #16]
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	08da      	lsrs	r2, r3, #3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3208      	adds	r2, #8
 800bf7e:	69b9      	ldr	r1, [r7, #24]
 800bf80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	2203      	movs	r2, #3
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	43db      	mvns	r3, r3
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	f003 0203 	and.w	r2, r3, #3
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69ba      	ldr	r2, [r7, #24]
 800bfb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 80be 	beq.w	800c142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bfc6:	4b66      	ldr	r3, [pc, #408]	@ (800c160 <HAL_GPIO_Init+0x324>)
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfca:	4a65      	ldr	r2, [pc, #404]	@ (800c160 <HAL_GPIO_Init+0x324>)
 800bfcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfd0:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfd2:	4b63      	ldr	r3, [pc, #396]	@ (800c160 <HAL_GPIO_Init+0x324>)
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800bfde:	4a61      	ldr	r2, [pc, #388]	@ (800c164 <HAL_GPIO_Init+0x328>)
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	089b      	lsrs	r3, r3, #2
 800bfe4:	3302      	adds	r3, #2
 800bfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	f003 0303 	and.w	r3, r3, #3
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	220f      	movs	r2, #15
 800bff6:	fa02 f303 	lsl.w	r3, r2, r3
 800bffa:	43db      	mvns	r3, r3
 800bffc:	69ba      	ldr	r2, [r7, #24]
 800bffe:	4013      	ands	r3, r2
 800c000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a58      	ldr	r2, [pc, #352]	@ (800c168 <HAL_GPIO_Init+0x32c>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d037      	beq.n	800c07a <HAL_GPIO_Init+0x23e>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a57      	ldr	r2, [pc, #348]	@ (800c16c <HAL_GPIO_Init+0x330>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d031      	beq.n	800c076 <HAL_GPIO_Init+0x23a>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a56      	ldr	r2, [pc, #344]	@ (800c170 <HAL_GPIO_Init+0x334>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d02b      	beq.n	800c072 <HAL_GPIO_Init+0x236>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a55      	ldr	r2, [pc, #340]	@ (800c174 <HAL_GPIO_Init+0x338>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d025      	beq.n	800c06e <HAL_GPIO_Init+0x232>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a54      	ldr	r2, [pc, #336]	@ (800c178 <HAL_GPIO_Init+0x33c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d01f      	beq.n	800c06a <HAL_GPIO_Init+0x22e>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a53      	ldr	r2, [pc, #332]	@ (800c17c <HAL_GPIO_Init+0x340>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d019      	beq.n	800c066 <HAL_GPIO_Init+0x22a>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a52      	ldr	r2, [pc, #328]	@ (800c180 <HAL_GPIO_Init+0x344>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d013      	beq.n	800c062 <HAL_GPIO_Init+0x226>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a51      	ldr	r2, [pc, #324]	@ (800c184 <HAL_GPIO_Init+0x348>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d00d      	beq.n	800c05e <HAL_GPIO_Init+0x222>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a50      	ldr	r2, [pc, #320]	@ (800c188 <HAL_GPIO_Init+0x34c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d007      	beq.n	800c05a <HAL_GPIO_Init+0x21e>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a4f      	ldr	r2, [pc, #316]	@ (800c18c <HAL_GPIO_Init+0x350>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d101      	bne.n	800c056 <HAL_GPIO_Init+0x21a>
 800c052:	2309      	movs	r3, #9
 800c054:	e012      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c056:	230a      	movs	r3, #10
 800c058:	e010      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c05a:	2308      	movs	r3, #8
 800c05c:	e00e      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c05e:	2307      	movs	r3, #7
 800c060:	e00c      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c062:	2306      	movs	r3, #6
 800c064:	e00a      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c066:	2305      	movs	r3, #5
 800c068:	e008      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c06a:	2304      	movs	r3, #4
 800c06c:	e006      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c06e:	2303      	movs	r3, #3
 800c070:	e004      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c072:	2302      	movs	r3, #2
 800c074:	e002      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c076:	2301      	movs	r3, #1
 800c078:	e000      	b.n	800c07c <HAL_GPIO_Init+0x240>
 800c07a:	2300      	movs	r3, #0
 800c07c:	69fa      	ldr	r2, [r7, #28]
 800c07e:	f002 0203 	and.w	r2, r2, #3
 800c082:	0092      	lsls	r2, r2, #2
 800c084:	4093      	lsls	r3, r2
 800c086:	69ba      	ldr	r2, [r7, #24]
 800c088:	4313      	orrs	r3, r2
 800c08a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c08c:	4935      	ldr	r1, [pc, #212]	@ (800c164 <HAL_GPIO_Init+0x328>)
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	089b      	lsrs	r3, r3, #2
 800c092:	3302      	adds	r3, #2
 800c094:	69ba      	ldr	r2, [r7, #24]
 800c096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c09a:	4b3d      	ldr	r3, [pc, #244]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	43db      	mvns	r3, r3
 800c0a4:	69ba      	ldr	r2, [r7, #24]
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c0be:	4a34      	ldr	r2, [pc, #208]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c0c4:	4b32      	ldr	r3, [pc, #200]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c0e8:	4a29      	ldr	r2, [pc, #164]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c0ee:	4b28      	ldr	r3, [pc, #160]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	43db      	mvns	r3, r3
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c10a:	69ba      	ldr	r2, [r7, #24]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	4313      	orrs	r3, r2
 800c110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c112:	4a1f      	ldr	r2, [pc, #124]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c118:	4b1d      	ldr	r3, [pc, #116]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	43db      	mvns	r3, r3
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	4013      	ands	r3, r2
 800c126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d003      	beq.n	800c13c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	4313      	orrs	r3, r2
 800c13a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c13c:	4a14      	ldr	r2, [pc, #80]	@ (800c190 <HAL_GPIO_Init+0x354>)
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	3301      	adds	r3, #1
 800c146:	61fb      	str	r3, [r7, #28]
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	2b0f      	cmp	r3, #15
 800c14c:	f67f ae86 	bls.w	800be5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c150:	bf00      	nop
 800c152:	bf00      	nop
 800c154:	3724      	adds	r7, #36	@ 0x24
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	40023800 	.word	0x40023800
 800c164:	40013800 	.word	0x40013800
 800c168:	40020000 	.word	0x40020000
 800c16c:	40020400 	.word	0x40020400
 800c170:	40020800 	.word	0x40020800
 800c174:	40020c00 	.word	0x40020c00
 800c178:	40021000 	.word	0x40021000
 800c17c:	40021400 	.word	0x40021400
 800c180:	40021800 	.word	0x40021800
 800c184:	40021c00 	.word	0x40021c00
 800c188:	40022000 	.word	0x40022000
 800c18c:	40022400 	.word	0x40022400
 800c190:	40013c00 	.word	0x40013c00

0800c194 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c194:	b480      	push	{r7}
 800c196:	b087      	sub	sp, #28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	617b      	str	r3, [r7, #20]
 800c1ae:	e0d9      	b.n	800c364 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	4013      	ands	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	f040 80c9 	bne.w	800c35e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c1cc:	4a6b      	ldr	r2, [pc, #428]	@ (800c37c <HAL_GPIO_DeInit+0x1e8>)
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	089b      	lsrs	r3, r3, #2
 800c1d2:	3302      	adds	r3, #2
 800c1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1d8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	220f      	movs	r2, #15
 800c1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a63      	ldr	r2, [pc, #396]	@ (800c380 <HAL_GPIO_DeInit+0x1ec>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d037      	beq.n	800c266 <HAL_GPIO_DeInit+0xd2>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a62      	ldr	r2, [pc, #392]	@ (800c384 <HAL_GPIO_DeInit+0x1f0>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d031      	beq.n	800c262 <HAL_GPIO_DeInit+0xce>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a61      	ldr	r2, [pc, #388]	@ (800c388 <HAL_GPIO_DeInit+0x1f4>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d02b      	beq.n	800c25e <HAL_GPIO_DeInit+0xca>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a60      	ldr	r2, [pc, #384]	@ (800c38c <HAL_GPIO_DeInit+0x1f8>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d025      	beq.n	800c25a <HAL_GPIO_DeInit+0xc6>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a5f      	ldr	r2, [pc, #380]	@ (800c390 <HAL_GPIO_DeInit+0x1fc>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d01f      	beq.n	800c256 <HAL_GPIO_DeInit+0xc2>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a5e      	ldr	r2, [pc, #376]	@ (800c394 <HAL_GPIO_DeInit+0x200>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d019      	beq.n	800c252 <HAL_GPIO_DeInit+0xbe>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a5d      	ldr	r2, [pc, #372]	@ (800c398 <HAL_GPIO_DeInit+0x204>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d013      	beq.n	800c24e <HAL_GPIO_DeInit+0xba>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a5c      	ldr	r2, [pc, #368]	@ (800c39c <HAL_GPIO_DeInit+0x208>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d00d      	beq.n	800c24a <HAL_GPIO_DeInit+0xb6>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a5b      	ldr	r2, [pc, #364]	@ (800c3a0 <HAL_GPIO_DeInit+0x20c>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d007      	beq.n	800c246 <HAL_GPIO_DeInit+0xb2>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a5a      	ldr	r2, [pc, #360]	@ (800c3a4 <HAL_GPIO_DeInit+0x210>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d101      	bne.n	800c242 <HAL_GPIO_DeInit+0xae>
 800c23e:	2309      	movs	r3, #9
 800c240:	e012      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c242:	230a      	movs	r3, #10
 800c244:	e010      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c246:	2308      	movs	r3, #8
 800c248:	e00e      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c24a:	2307      	movs	r3, #7
 800c24c:	e00c      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c24e:	2306      	movs	r3, #6
 800c250:	e00a      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c252:	2305      	movs	r3, #5
 800c254:	e008      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c256:	2304      	movs	r3, #4
 800c258:	e006      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c25a:	2303      	movs	r3, #3
 800c25c:	e004      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c25e:	2302      	movs	r3, #2
 800c260:	e002      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c262:	2301      	movs	r3, #1
 800c264:	e000      	b.n	800c268 <HAL_GPIO_DeInit+0xd4>
 800c266:	2300      	movs	r3, #0
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	f002 0203 	and.w	r2, r2, #3
 800c26e:	0092      	lsls	r2, r2, #2
 800c270:	4093      	lsls	r3, r2
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	429a      	cmp	r2, r3
 800c276:	d132      	bne.n	800c2de <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c278:	4b4b      	ldr	r3, [pc, #300]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	43db      	mvns	r3, r3
 800c280:	4949      	ldr	r1, [pc, #292]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c282:	4013      	ands	r3, r2
 800c284:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c286:	4b48      	ldr	r3, [pc, #288]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	43db      	mvns	r3, r3
 800c28e:	4946      	ldr	r1, [pc, #280]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c290:	4013      	ands	r3, r2
 800c292:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c294:	4b44      	ldr	r3, [pc, #272]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	43db      	mvns	r3, r3
 800c29c:	4942      	ldr	r1, [pc, #264]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c29e:	4013      	ands	r3, r2
 800c2a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c2a2:	4b41      	ldr	r3, [pc, #260]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c2a4:	689a      	ldr	r2, [r3, #8]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	43db      	mvns	r3, r3
 800c2aa:	493f      	ldr	r1, [pc, #252]	@ (800c3a8 <HAL_GPIO_DeInit+0x214>)
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	220f      	movs	r2, #15
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c2c0:	4a2e      	ldr	r2, [pc, #184]	@ (800c37c <HAL_GPIO_DeInit+0x1e8>)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	089b      	lsrs	r3, r3, #2
 800c2c6:	3302      	adds	r3, #2
 800c2c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	43da      	mvns	r2, r3
 800c2d0:	482a      	ldr	r0, [pc, #168]	@ (800c37c <HAL_GPIO_DeInit+0x1e8>)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	089b      	lsrs	r3, r3, #2
 800c2d6:	400a      	ands	r2, r1
 800c2d8:	3302      	adds	r3, #2
 800c2da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	2103      	movs	r1, #3
 800c2e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ec:	43db      	mvns	r3, r3
 800c2ee:	401a      	ands	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	08da      	lsrs	r2, r3, #3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3208      	adds	r2, #8
 800c2fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f003 0307 	and.w	r3, r3, #7
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	220f      	movs	r2, #15
 800c30a:	fa02 f303 	lsl.w	r3, r2, r3
 800c30e:	43db      	mvns	r3, r3
 800c310:	697a      	ldr	r2, [r7, #20]
 800c312:	08d2      	lsrs	r2, r2, #3
 800c314:	4019      	ands	r1, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3208      	adds	r2, #8
 800c31a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68da      	ldr	r2, [r3, #12]
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	2103      	movs	r1, #3
 800c328:	fa01 f303 	lsl.w	r3, r1, r3
 800c32c:	43db      	mvns	r3, r3
 800c32e:	401a      	ands	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	2101      	movs	r1, #1
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	fa01 f303 	lsl.w	r3, r1, r3
 800c340:	43db      	mvns	r3, r3
 800c342:	401a      	ands	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	2103      	movs	r1, #3
 800c352:	fa01 f303 	lsl.w	r3, r1, r3
 800c356:	43db      	mvns	r3, r3
 800c358:	401a      	ands	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	3301      	adds	r3, #1
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2b0f      	cmp	r3, #15
 800c368:	f67f af22 	bls.w	800c1b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c36c:	bf00      	nop
 800c36e:	bf00      	nop
 800c370:	371c      	adds	r7, #28
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	40013800 	.word	0x40013800
 800c380:	40020000 	.word	0x40020000
 800c384:	40020400 	.word	0x40020400
 800c388:	40020800 	.word	0x40020800
 800c38c:	40020c00 	.word	0x40020c00
 800c390:	40021000 	.word	0x40021000
 800c394:	40021400 	.word	0x40021400
 800c398:	40021800 	.word	0x40021800
 800c39c:	40021c00 	.word	0x40021c00
 800c3a0:	40022000 	.word	0x40022000
 800c3a4:	40022400 	.word	0x40022400
 800c3a8:	40013c00 	.word	0x40013c00

0800c3ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	691a      	ldr	r2, [r3, #16]
 800c3bc:	887b      	ldrh	r3, [r7, #2]
 800c3be:	4013      	ands	r3, r2
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	73fb      	strb	r3, [r7, #15]
 800c3c8:	e001      	b.n	800c3ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	807b      	strh	r3, [r7, #2]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c3ec:	787b      	ldrb	r3, [r7, #1]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c3f2:	887a      	ldrh	r2, [r7, #2]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c3f8:	e003      	b.n	800c402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c3fa:	887b      	ldrh	r3, [r7, #2]
 800c3fc:	041a      	lsls	r2, r3, #16
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	619a      	str	r2, [r3, #24]
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
	...

0800c410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e07f      	b.n	800c522 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f8a9 	bl	800c58e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2224      	movs	r2, #36	@ 0x24
 800c440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 0201 	bic.w	r2, r2, #1
 800c452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c460:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	689a      	ldr	r2, [r3, #8]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c470:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d107      	bne.n	800c48a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	689a      	ldr	r2, [r3, #8]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c486:	609a      	str	r2, [r3, #8]
 800c488:	e006      	b.n	800c498 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	689a      	ldr	r2, [r3, #8]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c496:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d104      	bne.n	800c4aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6859      	ldr	r1, [r3, #4]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c52c <HAL_I2C_Init+0x11c>)
 800c4b6:	430b      	orrs	r3, r1
 800c4b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68da      	ldr	r2, [r3, #12]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c4c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	691a      	ldr	r2, [r3, #16]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	69d9      	ldr	r1, [r3, #28]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a1a      	ldr	r2, [r3, #32]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f042 0201 	orr.w	r2, r2, #1
 800c502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2220      	movs	r2, #32
 800c50e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	02008000 	.word	0x02008000

0800c530 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	e021      	b.n	800c586 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2224      	movs	r2, #36	@ 0x24
 800c546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0201 	bic.w	r2, r2, #1
 800c558:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f821 	bl	800c5a2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c5aa:	bf00      	nop
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b088      	sub	sp, #32
 800c5bc:	af02      	add	r7, sp, #8
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	817b      	strh	r3, [r7, #10]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	813b      	strh	r3, [r7, #8]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b20      	cmp	r3, #32
 800c5dc:	f040 80f9 	bne.w	800c7d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <HAL_I2C_Mem_Write+0x34>
 800c5e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d105      	bne.n	800c5f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e0ed      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d101      	bne.n	800c606 <HAL_I2C_Mem_Write+0x4e>
 800c602:	2302      	movs	r3, #2
 800c604:	e0e6      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c60e:	f7fe f879 	bl	800a704 <HAL_GetTick>
 800c612:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	2319      	movs	r3, #25
 800c61a:	2201      	movs	r2, #1
 800c61c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 fad1 	bl	800cbc8 <I2C_WaitOnFlagUntilTimeout>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d001      	beq.n	800c630 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e0d1      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2221      	movs	r2, #33	@ 0x21
 800c634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2240      	movs	r2, #64	@ 0x40
 800c63c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6a3a      	ldr	r2, [r7, #32]
 800c64a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c650:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c658:	88f8      	ldrh	r0, [r7, #6]
 800c65a:	893a      	ldrh	r2, [r7, #8]
 800c65c:	8979      	ldrh	r1, [r7, #10]
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	4603      	mov	r3, r0
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 f9e1 	bl	800ca30 <I2C_RequestMemoryWrite>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d005      	beq.n	800c680 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e0a9      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c684:	b29b      	uxth	r3, r3
 800c686:	2bff      	cmp	r3, #255	@ 0xff
 800c688:	d90e      	bls.n	800c6a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	22ff      	movs	r2, #255	@ 0xff
 800c68e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c694:	b2da      	uxtb	r2, r3
 800c696:	8979      	ldrh	r1, [r7, #10]
 800c698:	2300      	movs	r3, #0
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 fc2d 	bl	800cf00 <I2C_TransferConfig>
 800c6a6:	e00f      	b.n	800c6c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	8979      	ldrh	r1, [r7, #10]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f000 fc1c 	bl	800cf00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fabb 	bl	800cc48 <I2C_WaitOnTXISFlagUntilTimeout>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e07b      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e0:	781a      	ldrb	r2, [r3, #0]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c704:	3b01      	subs	r3, #1
 800c706:	b29a      	uxth	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c710:	b29b      	uxth	r3, r3
 800c712:	2b00      	cmp	r3, #0
 800c714:	d034      	beq.n	800c780 <HAL_I2C_Mem_Write+0x1c8>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d130      	bne.n	800c780 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	9300      	str	r3, [sp, #0]
 800c722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c724:	2200      	movs	r2, #0
 800c726:	2180      	movs	r1, #128	@ 0x80
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 fa4d 	bl	800cbc8 <I2C_WaitOnFlagUntilTimeout>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d001      	beq.n	800c738 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	e04d      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	2bff      	cmp	r3, #255	@ 0xff
 800c740:	d90e      	bls.n	800c760 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	22ff      	movs	r2, #255	@ 0xff
 800c746:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	8979      	ldrh	r1, [r7, #10]
 800c750:	2300      	movs	r3, #0
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 fbd1 	bl	800cf00 <I2C_TransferConfig>
 800c75e:	e00f      	b.n	800c780 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c764:	b29a      	uxth	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	8979      	ldrh	r1, [r7, #10]
 800c772:	2300      	movs	r3, #0
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f000 fbc0 	bl	800cf00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c784:	b29b      	uxth	r3, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d19e      	bne.n	800c6c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c78a:	697a      	ldr	r2, [r7, #20]
 800c78c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f000 fa9a 	bl	800ccc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e01a      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2220      	movs	r2, #32
 800c7a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6859      	ldr	r1, [r3, #4]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c7dc <HAL_I2C_Mem_Write+0x224>)
 800c7b2:	400b      	ands	r3, r1
 800c7b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e000      	b.n	800c7d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c7d2:	2302      	movs	r3, #2
  }
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	fe00e800 	.word	0xfe00e800

0800c7e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	af02      	add	r7, sp, #8
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	817b      	strh	r3, [r7, #10]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	813b      	strh	r3, [r7, #8]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c800:	b2db      	uxtb	r3, r3
 800c802:	2b20      	cmp	r3, #32
 800c804:	f040 80fd 	bne.w	800ca02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <HAL_I2C_Mem_Read+0x34>
 800c80e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	d105      	bne.n	800c820 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c81a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e0f1      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c826:	2b01      	cmp	r3, #1
 800c828:	d101      	bne.n	800c82e <HAL_I2C_Mem_Read+0x4e>
 800c82a:	2302      	movs	r3, #2
 800c82c:	e0ea      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c836:	f7fd ff65 	bl	800a704 <HAL_GetTick>
 800c83a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	2319      	movs	r3, #25
 800c842:	2201      	movs	r2, #1
 800c844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 f9bd 	bl	800cbc8 <I2C_WaitOnFlagUntilTimeout>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e0d5      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2222      	movs	r2, #34	@ 0x22
 800c85c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2240      	movs	r2, #64	@ 0x40
 800c864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6a3a      	ldr	r2, [r7, #32]
 800c872:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c878:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c880:	88f8      	ldrh	r0, [r7, #6]
 800c882:	893a      	ldrh	r2, [r7, #8]
 800c884:	8979      	ldrh	r1, [r7, #10]
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	4603      	mov	r3, r0
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f000 f921 	bl	800cad8 <I2C_RequestMemoryRead>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e0ad      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	2bff      	cmp	r3, #255	@ 0xff
 800c8b0:	d90e      	bls.n	800c8d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	22ff      	movs	r2, #255	@ 0xff
 800c8b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	8979      	ldrh	r1, [r7, #10]
 800c8c0:	4b52      	ldr	r3, [pc, #328]	@ (800ca0c <HAL_I2C_Mem_Read+0x22c>)
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 fb19 	bl	800cf00 <I2C_TransferConfig>
 800c8ce:	e00f      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	8979      	ldrh	r1, [r7, #10]
 800c8e2:	4b4a      	ldr	r3, [pc, #296]	@ (800ca0c <HAL_I2C_Mem_Read+0x22c>)
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f000 fb08 	bl	800cf00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	2104      	movs	r1, #4
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 f964 	bl	800cbc8 <I2C_WaitOnFlagUntilTimeout>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e07c      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c914:	b2d2      	uxtb	r2, r2
 800c916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c926:	3b01      	subs	r3, #1
 800c928:	b29a      	uxth	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c932:	b29b      	uxth	r3, r3
 800c934:	3b01      	subs	r3, #1
 800c936:	b29a      	uxth	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c940:	b29b      	uxth	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d034      	beq.n	800c9b0 <HAL_I2C_Mem_Read+0x1d0>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d130      	bne.n	800c9b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c954:	2200      	movs	r2, #0
 800c956:	2180      	movs	r1, #128	@ 0x80
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f000 f935 	bl	800cbc8 <I2C_WaitOnFlagUntilTimeout>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	e04d      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	2bff      	cmp	r3, #255	@ 0xff
 800c970:	d90e      	bls.n	800c990 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	22ff      	movs	r2, #255	@ 0xff
 800c976:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c97c:	b2da      	uxtb	r2, r3
 800c97e:	8979      	ldrh	r1, [r7, #10]
 800c980:	2300      	movs	r3, #0
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 fab9 	bl	800cf00 <I2C_TransferConfig>
 800c98e:	e00f      	b.n	800c9b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c994:	b29a      	uxth	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	8979      	ldrh	r1, [r7, #10]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f000 faa8 	bl	800cf00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d19a      	bne.n	800c8f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f000 f982 	bl	800ccc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e01a      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	6859      	ldr	r1, [r3, #4]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca10 <HAL_I2C_Mem_Read+0x230>)
 800c9e2:	400b      	ands	r3, r1
 800c9e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e000      	b.n	800ca04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ca02:	2302      	movs	r3, #2
  }
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	80002400 	.word	0x80002400
 800ca10:	fe00e800 	.word	0xfe00e800

0800ca14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca22:	b2db      	uxtb	r3, r3
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	4608      	mov	r0, r1
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4603      	mov	r3, r0
 800ca40:	817b      	strh	r3, [r7, #10]
 800ca42:	460b      	mov	r3, r1
 800ca44:	813b      	strh	r3, [r7, #8]
 800ca46:	4613      	mov	r3, r2
 800ca48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ca4a:	88fb      	ldrh	r3, [r7, #6]
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	8979      	ldrh	r1, [r7, #10]
 800ca50:	4b20      	ldr	r3, [pc, #128]	@ (800cad4 <I2C_RequestMemoryWrite+0xa4>)
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 fa51 	bl	800cf00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca5e:	69fa      	ldr	r2, [r7, #28]
 800ca60:	69b9      	ldr	r1, [r7, #24]
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f000 f8f0 	bl	800cc48 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e02c      	b.n	800cacc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d105      	bne.n	800ca84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca78:	893b      	ldrh	r3, [r7, #8]
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	629a      	str	r2, [r3, #40]	@ 0x28
 800ca82:	e015      	b.n	800cab0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ca84:	893b      	ldrh	r3, [r7, #8]
 800ca86:	0a1b      	lsrs	r3, r3, #8
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca92:	69fa      	ldr	r2, [r7, #28]
 800ca94:	69b9      	ldr	r1, [r7, #24]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 f8d6 	bl	800cc48 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e012      	b.n	800cacc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800caa6:	893b      	ldrh	r3, [r7, #8]
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2200      	movs	r2, #0
 800cab8:	2180      	movs	r1, #128	@ 0x80
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f000 f884 	bl	800cbc8 <I2C_WaitOnFlagUntilTimeout>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d001      	beq.n	800caca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	e000      	b.n	800cacc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	80002000 	.word	0x80002000

0800cad8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af02      	add	r7, sp, #8
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	4608      	mov	r0, r1
 800cae2:	4611      	mov	r1, r2
 800cae4:	461a      	mov	r2, r3
 800cae6:	4603      	mov	r3, r0
 800cae8:	817b      	strh	r3, [r7, #10]
 800caea:	460b      	mov	r3, r1
 800caec:	813b      	strh	r3, [r7, #8]
 800caee:	4613      	mov	r3, r2
 800caf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800caf2:	88fb      	ldrh	r3, [r7, #6]
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	8979      	ldrh	r1, [r7, #10]
 800caf8:	4b20      	ldr	r3, [pc, #128]	@ (800cb7c <I2C_RequestMemoryRead+0xa4>)
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	2300      	movs	r3, #0
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f000 f9fe 	bl	800cf00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb04:	69fa      	ldr	r2, [r7, #28]
 800cb06:	69b9      	ldr	r1, [r7, #24]
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f000 f89d 	bl	800cc48 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e02c      	b.n	800cb72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cb18:	88fb      	ldrh	r3, [r7, #6]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d105      	bne.n	800cb2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb1e:	893b      	ldrh	r3, [r7, #8]
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	629a      	str	r2, [r3, #40]	@ 0x28
 800cb28:	e015      	b.n	800cb56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cb2a:	893b      	ldrh	r3, [r7, #8]
 800cb2c:	0a1b      	lsrs	r3, r3, #8
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb38:	69fa      	ldr	r2, [r7, #28]
 800cb3a:	69b9      	ldr	r1, [r7, #24]
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f000 f883 	bl	800cc48 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e012      	b.n	800cb72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb4c:	893b      	ldrh	r3, [r7, #8]
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2140      	movs	r1, #64	@ 0x40
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f000 f831 	bl	800cbc8 <I2C_WaitOnFlagUntilTimeout>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e000      	b.n	800cb72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	80002000 	.word	0x80002000

0800cb80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	699b      	ldr	r3, [r3, #24]
 800cb8e:	f003 0302 	and.w	r3, r3, #2
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d103      	bne.n	800cb9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d007      	beq.n	800cbbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	699a      	ldr	r2, [r3, #24]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f042 0201 	orr.w	r2, r2, #1
 800cbba:	619a      	str	r2, [r3, #24]
  }
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cbd8:	e022      	b.n	800cc20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe0:	d01e      	beq.n	800cc20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbe2:	f7fd fd8f 	bl	800a704 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d302      	bcc.n	800cbf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d113      	bne.n	800cc20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbfc:	f043 0220 	orr.w	r2, r3, #32
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e00f      	b.n	800cc40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	699a      	ldr	r2, [r3, #24]
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	4013      	ands	r3, r2
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	bf0c      	ite	eq
 800cc30:	2301      	moveq	r3, #1
 800cc32:	2300      	movne	r3, #0
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	461a      	mov	r2, r3
 800cc38:	79fb      	ldrb	r3, [r7, #7]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d0cd      	beq.n	800cbda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cc54:	e02c      	b.n	800ccb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	68b9      	ldr	r1, [r7, #8]
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f000 f870 	bl	800cd40 <I2C_IsErrorOccurred>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e02a      	b.n	800ccc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc70:	d01e      	beq.n	800ccb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc72:	f7fd fd47 	bl	800a704 <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d302      	bcc.n	800cc88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d113      	bne.n	800ccb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc8c:	f043 0220 	orr.w	r2, r3, #32
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2220      	movs	r2, #32
 800cc98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e007      	b.n	800ccc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	f003 0302 	and.w	r3, r3, #2
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d1cb      	bne.n	800cc56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ccd4:	e028      	b.n	800cd28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	68b9      	ldr	r1, [r7, #8]
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f000 f830 	bl	800cd40 <I2C_IsErrorOccurred>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e026      	b.n	800cd38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccea:	f7fd fd0b 	bl	800a704 <HAL_GetTick>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d302      	bcc.n	800cd00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d113      	bne.n	800cd28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd04:	f043 0220 	orr.w	r2, r3, #32
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2220      	movs	r2, #32
 800cd10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e007      	b.n	800cd38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	f003 0320 	and.w	r3, r3, #32
 800cd32:	2b20      	cmp	r3, #32
 800cd34:	d1cf      	bne.n	800ccd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08a      	sub	sp, #40	@ 0x28
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	699b      	ldr	r3, [r3, #24]
 800cd58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	f003 0310 	and.w	r3, r3, #16
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d068      	beq.n	800ce3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2210      	movs	r2, #16
 800cd72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cd74:	e049      	b.n	800ce0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7c:	d045      	beq.n	800ce0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cd7e:	f7fd fcc1 	bl	800a704 <HAL_GetTick>
 800cd82:	4602      	mov	r2, r0
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d302      	bcc.n	800cd94 <I2C_IsErrorOccurred+0x54>
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d13a      	bne.n	800ce0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cda6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cdb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdb6:	d121      	bne.n	800cdfc <I2C_IsErrorOccurred+0xbc>
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdbe:	d01d      	beq.n	800cdfc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800cdc0:	7cfb      	ldrb	r3, [r7, #19]
 800cdc2:	2b20      	cmp	r3, #32
 800cdc4:	d01a      	beq.n	800cdfc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cdd6:	f7fd fc95 	bl	800a704 <HAL_GetTick>
 800cdda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cddc:	e00e      	b.n	800cdfc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cdde:	f7fd fc91 	bl	800a704 <HAL_GetTick>
 800cde2:	4602      	mov	r2, r0
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	2b19      	cmp	r3, #25
 800cdea:	d907      	bls.n	800cdfc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800cdec:	6a3b      	ldr	r3, [r7, #32]
 800cdee:	f043 0320 	orr.w	r3, r3, #32
 800cdf2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800cdfa:	e006      	b.n	800ce0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	f003 0320 	and.w	r3, r3, #32
 800ce06:	2b20      	cmp	r3, #32
 800ce08:	d1e9      	bne.n	800cdde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	699b      	ldr	r3, [r3, #24]
 800ce10:	f003 0320 	and.w	r3, r3, #32
 800ce14:	2b20      	cmp	r3, #32
 800ce16:	d003      	beq.n	800ce20 <I2C_IsErrorOccurred+0xe0>
 800ce18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0aa      	beq.n	800cd76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ce20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d103      	bne.n	800ce30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2220      	movs	r2, #32
 800ce2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	f043 0304 	orr.w	r3, r3, #4
 800ce36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce62:	2301      	movs	r3, #1
 800ce64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	f043 0308 	orr.w	r3, r3, #8
 800ce78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ce82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce84:	2301      	movs	r3, #1
 800ce86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00b      	beq.n	800ceac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	f043 0302 	orr.w	r3, r3, #2
 800ce9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ceac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01c      	beq.n	800ceee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff fe63 	bl	800cb80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6859      	ldr	r1, [r3, #4]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	4b0d      	ldr	r3, [pc, #52]	@ (800cefc <I2C_IsErrorOccurred+0x1bc>)
 800cec6:	400b      	ands	r3, r1
 800cec8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	431a      	orrs	r2, r3
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2220      	movs	r2, #32
 800ceda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ceee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3728      	adds	r7, #40	@ 0x28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	fe00e800 	.word	0xfe00e800

0800cf00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b087      	sub	sp, #28
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	607b      	str	r3, [r7, #4]
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	817b      	strh	r3, [r7, #10]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf12:	897b      	ldrh	r3, [r7, #10]
 800cf14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cf18:	7a7b      	ldrb	r3, [r7, #9]
 800cf1a:	041b      	lsls	r3, r3, #16
 800cf1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	0d5b      	lsrs	r3, r3, #21
 800cf3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800cf3e:	4b08      	ldr	r3, [pc, #32]	@ (800cf60 <I2C_TransferConfig+0x60>)
 800cf40:	430b      	orrs	r3, r1
 800cf42:	43db      	mvns	r3, r3
 800cf44:	ea02 0103 	and.w	r1, r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	430a      	orrs	r2, r1
 800cf50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cf52:	bf00      	nop
 800cf54:	371c      	adds	r7, #28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	03ff63ff 	.word	0x03ff63ff

0800cf64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e0bf      	b.n	800d0f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d106      	bne.n	800cf90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7fb f938 	bl	8008200 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2202      	movs	r2, #2
 800cf94:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	699a      	ldr	r2, [r3, #24]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800cfa6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	6999      	ldr	r1, [r3, #24]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685a      	ldr	r2, [r3, #4]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cfbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	430a      	orrs	r2, r1
 800cfca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6899      	ldr	r1, [r3, #8]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	4b4a      	ldr	r3, [pc, #296]	@ (800d100 <HAL_LTDC_Init+0x19c>)
 800cfd8:	400b      	ands	r3, r1
 800cfda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	041b      	lsls	r3, r3, #16
 800cfe2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6899      	ldr	r1, [r3, #8]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	699a      	ldr	r2, [r3, #24]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	431a      	orrs	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	430a      	orrs	r2, r1
 800cff8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68d9      	ldr	r1, [r3, #12]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	4b3e      	ldr	r3, [pc, #248]	@ (800d100 <HAL_LTDC_Init+0x19c>)
 800d006:	400b      	ands	r3, r1
 800d008:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	69db      	ldr	r3, [r3, #28]
 800d00e:	041b      	lsls	r3, r3, #16
 800d010:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68d9      	ldr	r1, [r3, #12]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a1a      	ldr	r2, [r3, #32]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	431a      	orrs	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	430a      	orrs	r2, r1
 800d026:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6919      	ldr	r1, [r3, #16]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4b33      	ldr	r3, [pc, #204]	@ (800d100 <HAL_LTDC_Init+0x19c>)
 800d034:	400b      	ands	r3, r1
 800d036:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d03c:	041b      	lsls	r3, r3, #16
 800d03e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6919      	ldr	r1, [r3, #16]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6959      	ldr	r1, [r3, #20]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	4b27      	ldr	r3, [pc, #156]	@ (800d100 <HAL_LTDC_Init+0x19c>)
 800d062:	400b      	ands	r3, r1
 800d064:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d06a:	041b      	lsls	r3, r3, #16
 800d06c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6959      	ldr	r1, [r3, #20]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	431a      	orrs	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	430a      	orrs	r2, r1
 800d082:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d08a:	021b      	lsls	r3, r3, #8
 800d08c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d094:	041b      	lsls	r3, r3, #16
 800d096:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800d0a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f042 0206 	orr.w	r2, r2, #6
 800d0d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	699a      	ldr	r2, [r3, #24]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f042 0201 	orr.w	r2, r2, #1
 800d0e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	f000f800 	.word	0xf000f800

0800d104 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d112:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d11a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f003 0304 	and.w	r3, r3, #4
 800d122:	2b00      	cmp	r3, #0
 800d124:	d023      	beq.n	800d16e <HAL_LTDC_IRQHandler+0x6a>
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f003 0304 	and.w	r3, r3, #4
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01e      	beq.n	800d16e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f022 0204 	bic.w	r2, r2, #4
 800d13e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2204      	movs	r2, #4
 800d146:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d14e:	f043 0201 	orr.w	r2, r3, #1
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2204      	movs	r2, #4
 800d15c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f86f 	bl	800d24c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b00      	cmp	r3, #0
 800d176:	d023      	beq.n	800d1c0 <HAL_LTDC_IRQHandler+0xbc>
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	f003 0302 	and.w	r3, r3, #2
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d01e      	beq.n	800d1c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f022 0202 	bic.w	r2, r2, #2
 800d190:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2202      	movs	r2, #2
 800d198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d1a0:	f043 0202 	orr.w	r2, r3, #2
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2204      	movs	r2, #4
 800d1ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f846 	bl	800d24c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f003 0301 	and.w	r3, r3, #1
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d01b      	beq.n	800d202 <HAL_LTDC_IRQHandler+0xfe>
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f003 0301 	and.w	r3, r3, #1
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d016      	beq.n	800d202 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f022 0201 	bic.w	r2, r2, #1
 800d1e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f82f 	bl	800d260 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f003 0308 	and.w	r3, r3, #8
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d01b      	beq.n	800d244 <HAL_LTDC_IRQHandler+0x140>
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	f003 0308 	and.w	r3, r3, #8
 800d212:	2b00      	cmp	r3, #0
 800d214:	d016      	beq.n	800d244 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f022 0208 	bic.w	r2, r2, #8
 800d224:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2208      	movs	r2, #8
 800d22c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f818 	bl	800d274 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d244:	bf00      	nop
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d27c:	bf00      	nop
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d288:	b5b0      	push	{r4, r5, r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d101      	bne.n	800d2a2 <HAL_LTDC_ConfigLayer+0x1a>
 800d29e:	2302      	movs	r3, #2
 800d2a0:	e02c      	b.n	800d2fc <HAL_LTDC_ConfigLayer+0x74>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2134      	movs	r1, #52	@ 0x34
 800d2b8:	fb01 f303 	mul.w	r3, r1, r3
 800d2bc:	4413      	add	r3, r2
 800d2be:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	4614      	mov	r4, r2
 800d2c6:	461d      	mov	r5, r3
 800d2c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f000 f81f 	bl	800d320 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bdb0      	pop	{r4, r5, r7, pc}

0800d304 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d312:	b2db      	uxtb	r3, r3
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d320:	b480      	push	{r7}
 800d322:	b089      	sub	sp, #36	@ 0x24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	685a      	ldr	r2, [r3, #4]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	0c1b      	lsrs	r3, r3, #16
 800d338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d33c:	4413      	add	r3, r2
 800d33e:	041b      	lsls	r3, r3, #16
 800d340:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	01db      	lsls	r3, r3, #7
 800d34c:	4413      	add	r3, r2
 800d34e:	3384      	adds	r3, #132	@ 0x84
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	6812      	ldr	r2, [r2, #0]
 800d356:	4611      	mov	r1, r2
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	01d2      	lsls	r2, r2, #7
 800d35c:	440a      	add	r2, r1
 800d35e:	3284      	adds	r2, #132	@ 0x84
 800d360:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800d364:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	0c1b      	lsrs	r3, r3, #16
 800d372:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d376:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d378:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4619      	mov	r1, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	01db      	lsls	r3, r3, #7
 800d384:	440b      	add	r3, r1
 800d386:	3384      	adds	r3, #132	@ 0x84
 800d388:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d38e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	68da      	ldr	r2, [r3, #12]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d39e:	4413      	add	r3, r2
 800d3a0:	041b      	lsls	r3, r3, #16
 800d3a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	01db      	lsls	r3, r3, #7
 800d3ae:	4413      	add	r3, r2
 800d3b0:	3384      	adds	r3, #132	@ 0x84
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	6812      	ldr	r2, [r2, #0]
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	01d2      	lsls	r2, r2, #7
 800d3be:	440a      	add	r2, r1
 800d3c0:	3284      	adds	r2, #132	@ 0x84
 800d3c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800d3c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	689a      	ldr	r2, [r3, #8]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3d6:	4413      	add	r3, r2
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	01db      	lsls	r3, r3, #7
 800d3e4:	440b      	add	r3, r1
 800d3e6:	3384      	adds	r3, #132	@ 0x84
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	01db      	lsls	r3, r3, #7
 800d3fa:	4413      	add	r3, r2
 800d3fc:	3384      	adds	r3, #132	@ 0x84
 800d3fe:	691b      	ldr	r3, [r3, #16]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	6812      	ldr	r2, [r2, #0]
 800d404:	4611      	mov	r1, r2
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	01d2      	lsls	r2, r2, #7
 800d40a:	440a      	add	r2, r1
 800d40c:	3284      	adds	r2, #132	@ 0x84
 800d40e:	f023 0307 	bic.w	r3, r3, #7
 800d412:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	461a      	mov	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	01db      	lsls	r3, r3, #7
 800d41e:	4413      	add	r3, r2
 800d420:	3384      	adds	r3, #132	@ 0x84
 800d422:	461a      	mov	r2, r3
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d430:	021b      	lsls	r3, r3, #8
 800d432:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d43a:	041b      	lsls	r3, r3, #16
 800d43c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	061b      	lsls	r3, r3, #24
 800d444:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	01db      	lsls	r3, r3, #7
 800d450:	4413      	add	r3, r2
 800d452:	3384      	adds	r3, #132	@ 0x84
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	01db      	lsls	r3, r3, #7
 800d460:	4413      	add	r3, r2
 800d462:	3384      	adds	r3, #132	@ 0x84
 800d464:	461a      	mov	r2, r3
 800d466:	2300      	movs	r3, #0
 800d468:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d470:	461a      	mov	r2, r3
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	431a      	orrs	r2, r3
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	431a      	orrs	r2, r3
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4619      	mov	r1, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	01db      	lsls	r3, r3, #7
 800d484:	440b      	add	r3, r1
 800d486:	3384      	adds	r3, #132	@ 0x84
 800d488:	4619      	mov	r1, r3
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	4313      	orrs	r3, r2
 800d48e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	461a      	mov	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	01db      	lsls	r3, r3, #7
 800d49a:	4413      	add	r3, r2
 800d49c:	3384      	adds	r3, #132	@ 0x84
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	01d2      	lsls	r2, r2, #7
 800d4aa:	440a      	add	r2, r1
 800d4ac:	3284      	adds	r2, #132	@ 0x84
 800d4ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d4b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	01db      	lsls	r3, r3, #7
 800d4be:	4413      	add	r3, r2
 800d4c0:	3384      	adds	r3, #132	@ 0x84
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	01db      	lsls	r3, r3, #7
 800d4d4:	4413      	add	r3, r2
 800d4d6:	3384      	adds	r3, #132	@ 0x84
 800d4d8:	69da      	ldr	r2, [r3, #28]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	01db      	lsls	r3, r3, #7
 800d4e4:	440b      	add	r3, r1
 800d4e6:	3384      	adds	r3, #132	@ 0x84
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4b58      	ldr	r3, [pc, #352]	@ (800d64c <LTDC_SetConfig+0x32c>)
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	69da      	ldr	r2, [r3, #28]
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	6a1b      	ldr	r3, [r3, #32]
 800d4f8:	68f9      	ldr	r1, [r7, #12]
 800d4fa:	6809      	ldr	r1, [r1, #0]
 800d4fc:	4608      	mov	r0, r1
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	01c9      	lsls	r1, r1, #7
 800d502:	4401      	add	r1, r0
 800d504:	3184      	adds	r1, #132	@ 0x84
 800d506:	4313      	orrs	r3, r2
 800d508:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	461a      	mov	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	01db      	lsls	r3, r3, #7
 800d514:	4413      	add	r3, r2
 800d516:	3384      	adds	r3, #132	@ 0x84
 800d518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	01db      	lsls	r3, r3, #7
 800d524:	4413      	add	r3, r2
 800d526:	3384      	adds	r3, #132	@ 0x84
 800d528:	461a      	mov	r2, r3
 800d52a:	2300      	movs	r3, #0
 800d52c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	01db      	lsls	r3, r3, #7
 800d538:	4413      	add	r3, r2
 800d53a:	3384      	adds	r3, #132	@ 0x84
 800d53c:	461a      	mov	r2, r3
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d542:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d102      	bne.n	800d552 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800d54c:	2304      	movs	r3, #4
 800d54e:	61fb      	str	r3, [r7, #28]
 800d550:	e01b      	b.n	800d58a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d102      	bne.n	800d560 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800d55a:	2303      	movs	r3, #3
 800d55c:	61fb      	str	r3, [r7, #28]
 800d55e:	e014      	b.n	800d58a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	2b04      	cmp	r3, #4
 800d566:	d00b      	beq.n	800d580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d007      	beq.n	800d580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d574:	2b03      	cmp	r3, #3
 800d576:	d003      	beq.n	800d580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d57c:	2b07      	cmp	r3, #7
 800d57e:	d102      	bne.n	800d586 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800d580:	2302      	movs	r3, #2
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	e001      	b.n	800d58a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800d586:	2301      	movs	r3, #1
 800d588:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	01db      	lsls	r3, r3, #7
 800d594:	4413      	add	r3, r2
 800d596:	3384      	adds	r3, #132	@ 0x84
 800d598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	6812      	ldr	r2, [r2, #0]
 800d59e:	4611      	mov	r1, r2
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	01d2      	lsls	r2, r2, #7
 800d5a4:	440a      	add	r2, r1
 800d5a6:	3284      	adds	r2, #132	@ 0x84
 800d5a8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800d5ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b2:	69fa      	ldr	r2, [r7, #28]
 800d5b4:	fb02 f303 	mul.w	r3, r2, r3
 800d5b8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	6859      	ldr	r1, [r3, #4]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	1acb      	subs	r3, r1, r3
 800d5c4:	69f9      	ldr	r1, [r7, #28]
 800d5c6:	fb01 f303 	mul.w	r3, r1, r3
 800d5ca:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d5cc:	68f9      	ldr	r1, [r7, #12]
 800d5ce:	6809      	ldr	r1, [r1, #0]
 800d5d0:	4608      	mov	r0, r1
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	01c9      	lsls	r1, r1, #7
 800d5d6:	4401      	add	r1, r0
 800d5d8:	3184      	adds	r1, #132	@ 0x84
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	01db      	lsls	r3, r3, #7
 800d5e8:	4413      	add	r3, r2
 800d5ea:	3384      	adds	r3, #132	@ 0x84
 800d5ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	01db      	lsls	r3, r3, #7
 800d5f8:	440b      	add	r3, r1
 800d5fa:	3384      	adds	r3, #132	@ 0x84
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4b14      	ldr	r3, [pc, #80]	@ (800d650 <LTDC_SetConfig+0x330>)
 800d600:	4013      	ands	r3, r2
 800d602:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	01db      	lsls	r3, r3, #7
 800d60e:	4413      	add	r3, r2
 800d610:	3384      	adds	r3, #132	@ 0x84
 800d612:	461a      	mov	r2, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d618:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	461a      	mov	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	01db      	lsls	r3, r3, #7
 800d624:	4413      	add	r3, r2
 800d626:	3384      	adds	r3, #132	@ 0x84
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	6812      	ldr	r2, [r2, #0]
 800d62e:	4611      	mov	r1, r2
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	01d2      	lsls	r2, r2, #7
 800d634:	440a      	add	r2, r1
 800d636:	3284      	adds	r2, #132	@ 0x84
 800d638:	f043 0301 	orr.w	r3, r3, #1
 800d63c:	6013      	str	r3, [r2, #0]
}
 800d63e:	bf00      	nop
 800d640:	3724      	adds	r7, #36	@ 0x24
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	fffff8f8 	.word	0xfffff8f8
 800d650:	fffff800 	.word	0xfffff800

0800d654 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d654:	b480      	push	{r7}
 800d656:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d658:	4b05      	ldr	r3, [pc, #20]	@ (800d670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a04      	ldr	r2, [pc, #16]	@ (800d670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d65e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d662:	6013      	str	r3, [r2, #0]
}
 800d664:	bf00      	nop
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	40007000 	.word	0x40007000

0800d674 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d67e:	4b23      	ldr	r3, [pc, #140]	@ (800d70c <HAL_PWREx_EnableOverDrive+0x98>)
 800d680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d682:	4a22      	ldr	r2, [pc, #136]	@ (800d70c <HAL_PWREx_EnableOverDrive+0x98>)
 800d684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d688:	6413      	str	r3, [r2, #64]	@ 0x40
 800d68a:	4b20      	ldr	r3, [pc, #128]	@ (800d70c <HAL_PWREx_EnableOverDrive+0x98>)
 800d68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d68e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d692:	603b      	str	r3, [r7, #0]
 800d694:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d696:	4b1e      	ldr	r3, [pc, #120]	@ (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a1d      	ldr	r2, [pc, #116]	@ (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d69c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d6a2:	f7fd f82f 	bl	800a704 <HAL_GetTick>
 800d6a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d6a8:	e009      	b.n	800d6be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d6aa:	f7fd f82b 	bl	800a704 <HAL_GetTick>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d6b8:	d901      	bls.n	800d6be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	e022      	b.n	800d704 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d6be:	4b14      	ldr	r3, [pc, #80]	@ (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6ca:	d1ee      	bne.n	800d6aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d6cc:	4b10      	ldr	r3, [pc, #64]	@ (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a0f      	ldr	r2, [pc, #60]	@ (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d6d8:	f7fd f814 	bl	800a704 <HAL_GetTick>
 800d6dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d6de:	e009      	b.n	800d6f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d6e0:	f7fd f810 	bl	800a704 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d6ee:	d901      	bls.n	800d6f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e007      	b.n	800d704 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d6f4:	4b06      	ldr	r3, [pc, #24]	@ (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d700:	d1ee      	bne.n	800d6e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	40023800 	.word	0x40023800
 800d710:	40007000 	.word	0x40007000

0800d714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d71c:	2300      	movs	r3, #0
 800d71e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	e291      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 8087 	beq.w	800d846 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d738:	4b96      	ldr	r3, [pc, #600]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f003 030c 	and.w	r3, r3, #12
 800d740:	2b04      	cmp	r3, #4
 800d742:	d00c      	beq.n	800d75e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d744:	4b93      	ldr	r3, [pc, #588]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f003 030c 	and.w	r3, r3, #12
 800d74c:	2b08      	cmp	r3, #8
 800d74e:	d112      	bne.n	800d776 <HAL_RCC_OscConfig+0x62>
 800d750:	4b90      	ldr	r3, [pc, #576]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d75c:	d10b      	bne.n	800d776 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d75e:	4b8d      	ldr	r3, [pc, #564]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d06c      	beq.n	800d844 <HAL_RCC_OscConfig+0x130>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d168      	bne.n	800d844 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e26b      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d77e:	d106      	bne.n	800d78e <HAL_RCC_OscConfig+0x7a>
 800d780:	4b84      	ldr	r3, [pc, #528]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a83      	ldr	r2, [pc, #524]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d78a:	6013      	str	r3, [r2, #0]
 800d78c:	e02e      	b.n	800d7ec <HAL_RCC_OscConfig+0xd8>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10c      	bne.n	800d7b0 <HAL_RCC_OscConfig+0x9c>
 800d796:	4b7f      	ldr	r3, [pc, #508]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a7e      	ldr	r2, [pc, #504]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d79c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	4b7c      	ldr	r3, [pc, #496]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a7b      	ldr	r2, [pc, #492]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	e01d      	b.n	800d7ec <HAL_RCC_OscConfig+0xd8>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d7b8:	d10c      	bne.n	800d7d4 <HAL_RCC_OscConfig+0xc0>
 800d7ba:	4b76      	ldr	r3, [pc, #472]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a75      	ldr	r2, [pc, #468]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	4b73      	ldr	r3, [pc, #460]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a72      	ldr	r2, [pc, #456]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	e00b      	b.n	800d7ec <HAL_RCC_OscConfig+0xd8>
 800d7d4:	4b6f      	ldr	r3, [pc, #444]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a6e      	ldr	r2, [pc, #440]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7de:	6013      	str	r3, [r2, #0]
 800d7e0:	4b6c      	ldr	r3, [pc, #432]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a6b      	ldr	r2, [pc, #428]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d7ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d013      	beq.n	800d81c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7f4:	f7fc ff86 	bl	800a704 <HAL_GetTick>
 800d7f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7fa:	e008      	b.n	800d80e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d7fc:	f7fc ff82 	bl	800a704 <HAL_GetTick>
 800d800:	4602      	mov	r2, r0
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	2b64      	cmp	r3, #100	@ 0x64
 800d808:	d901      	bls.n	800d80e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	e21f      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d80e:	4b61      	ldr	r3, [pc, #388]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d816:	2b00      	cmp	r3, #0
 800d818:	d0f0      	beq.n	800d7fc <HAL_RCC_OscConfig+0xe8>
 800d81a:	e014      	b.n	800d846 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d81c:	f7fc ff72 	bl	800a704 <HAL_GetTick>
 800d820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d822:	e008      	b.n	800d836 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d824:	f7fc ff6e 	bl	800a704 <HAL_GetTick>
 800d828:	4602      	mov	r2, r0
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	2b64      	cmp	r3, #100	@ 0x64
 800d830:	d901      	bls.n	800d836 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e20b      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d836:	4b57      	ldr	r3, [pc, #348]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1f0      	bne.n	800d824 <HAL_RCC_OscConfig+0x110>
 800d842:	e000      	b.n	800d846 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d069      	beq.n	800d926 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d852:	4b50      	ldr	r3, [pc, #320]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	f003 030c 	and.w	r3, r3, #12
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00b      	beq.n	800d876 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d85e:	4b4d      	ldr	r3, [pc, #308]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	f003 030c 	and.w	r3, r3, #12
 800d866:	2b08      	cmp	r3, #8
 800d868:	d11c      	bne.n	800d8a4 <HAL_RCC_OscConfig+0x190>
 800d86a:	4b4a      	ldr	r3, [pc, #296]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d116      	bne.n	800d8a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d876:	4b47      	ldr	r3, [pc, #284]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 0302 	and.w	r3, r3, #2
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d005      	beq.n	800d88e <HAL_RCC_OscConfig+0x17a>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d001      	beq.n	800d88e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e1df      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d88e:	4b41      	ldr	r3, [pc, #260]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	493d      	ldr	r1, [pc, #244]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8a2:	e040      	b.n	800d926 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d023      	beq.n	800d8f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d8ac:	4b39      	ldr	r3, [pc, #228]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a38      	ldr	r2, [pc, #224]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8b2:	f043 0301 	orr.w	r3, r3, #1
 800d8b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b8:	f7fc ff24 	bl	800a704 <HAL_GetTick>
 800d8bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8be:	e008      	b.n	800d8d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d8c0:	f7fc ff20 	bl	800a704 <HAL_GetTick>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d901      	bls.n	800d8d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e1bd      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8d2:	4b30      	ldr	r3, [pc, #192]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 0302 	and.w	r3, r3, #2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0f0      	beq.n	800d8c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8de:	4b2d      	ldr	r3, [pc, #180]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	4929      	ldr	r1, [pc, #164]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	600b      	str	r3, [r1, #0]
 800d8f2:	e018      	b.n	800d926 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d8f4:	4b27      	ldr	r3, [pc, #156]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a26      	ldr	r2, [pc, #152]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8fa:	f023 0301 	bic.w	r3, r3, #1
 800d8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d900:	f7fc ff00 	bl	800a704 <HAL_GetTick>
 800d904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d906:	e008      	b.n	800d91a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d908:	f7fc fefc 	bl	800a704 <HAL_GetTick>
 800d90c:	4602      	mov	r2, r0
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2b02      	cmp	r3, #2
 800d914:	d901      	bls.n	800d91a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d916:	2303      	movs	r3, #3
 800d918:	e199      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d91a:	4b1e      	ldr	r3, [pc, #120]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 0302 	and.w	r3, r3, #2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1f0      	bne.n	800d908 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f003 0308 	and.w	r3, r3, #8
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d038      	beq.n	800d9a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d019      	beq.n	800d96e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d93a:	4b16      	ldr	r3, [pc, #88]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d93c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d93e:	4a15      	ldr	r2, [pc, #84]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d940:	f043 0301 	orr.w	r3, r3, #1
 800d944:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d946:	f7fc fedd 	bl	800a704 <HAL_GetTick>
 800d94a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d94c:	e008      	b.n	800d960 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d94e:	f7fc fed9 	bl	800a704 <HAL_GetTick>
 800d952:	4602      	mov	r2, r0
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d901      	bls.n	800d960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d95c:	2303      	movs	r3, #3
 800d95e:	e176      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d960:	4b0c      	ldr	r3, [pc, #48]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0f0      	beq.n	800d94e <HAL_RCC_OscConfig+0x23a>
 800d96c:	e01a      	b.n	800d9a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d96e:	4b09      	ldr	r3, [pc, #36]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d972:	4a08      	ldr	r2, [pc, #32]	@ (800d994 <HAL_RCC_OscConfig+0x280>)
 800d974:	f023 0301 	bic.w	r3, r3, #1
 800d978:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d97a:	f7fc fec3 	bl	800a704 <HAL_GetTick>
 800d97e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d980:	e00a      	b.n	800d998 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d982:	f7fc febf 	bl	800a704 <HAL_GetTick>
 800d986:	4602      	mov	r2, r0
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d903      	bls.n	800d998 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d990:	2303      	movs	r3, #3
 800d992:	e15c      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
 800d994:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d998:	4b91      	ldr	r3, [pc, #580]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d99a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d99c:	f003 0302 	and.w	r3, r3, #2
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1ee      	bne.n	800d982 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 80a4 	beq.w	800dafa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d9b2:	4b8b      	ldr	r3, [pc, #556]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10d      	bne.n	800d9da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d9be:	4b88      	ldr	r3, [pc, #544]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9c2:	4a87      	ldr	r2, [pc, #540]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d9c8:	6413      	str	r3, [r2, #64]	@ 0x40
 800d9ca:	4b85      	ldr	r3, [pc, #532]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d9d2:	60bb      	str	r3, [r7, #8]
 800d9d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d9da:	4b82      	ldr	r3, [pc, #520]	@ (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d118      	bne.n	800da18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d9e6:	4b7f      	ldr	r3, [pc, #508]	@ (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a7e      	ldr	r2, [pc, #504]	@ (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800d9ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d9f2:	f7fc fe87 	bl	800a704 <HAL_GetTick>
 800d9f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d9f8:	e008      	b.n	800da0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9fa:	f7fc fe83 	bl	800a704 <HAL_GetTick>
 800d9fe:	4602      	mov	r2, r0
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	2b64      	cmp	r3, #100	@ 0x64
 800da06:	d901      	bls.n	800da0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	e120      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da0c:	4b75      	ldr	r3, [pc, #468]	@ (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da14:	2b00      	cmp	r3, #0
 800da16:	d0f0      	beq.n	800d9fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d106      	bne.n	800da2e <HAL_RCC_OscConfig+0x31a>
 800da20:	4b6f      	ldr	r3, [pc, #444]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da24:	4a6e      	ldr	r2, [pc, #440]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da26:	f043 0301 	orr.w	r3, r3, #1
 800da2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800da2c:	e02d      	b.n	800da8a <HAL_RCC_OscConfig+0x376>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10c      	bne.n	800da50 <HAL_RCC_OscConfig+0x33c>
 800da36:	4b6a      	ldr	r3, [pc, #424]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da3a:	4a69      	ldr	r2, [pc, #420]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da3c:	f023 0301 	bic.w	r3, r3, #1
 800da40:	6713      	str	r3, [r2, #112]	@ 0x70
 800da42:	4b67      	ldr	r3, [pc, #412]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da46:	4a66      	ldr	r2, [pc, #408]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da48:	f023 0304 	bic.w	r3, r3, #4
 800da4c:	6713      	str	r3, [r2, #112]	@ 0x70
 800da4e:	e01c      	b.n	800da8a <HAL_RCC_OscConfig+0x376>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	2b05      	cmp	r3, #5
 800da56:	d10c      	bne.n	800da72 <HAL_RCC_OscConfig+0x35e>
 800da58:	4b61      	ldr	r3, [pc, #388]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da5c:	4a60      	ldr	r2, [pc, #384]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da5e:	f043 0304 	orr.w	r3, r3, #4
 800da62:	6713      	str	r3, [r2, #112]	@ 0x70
 800da64:	4b5e      	ldr	r3, [pc, #376]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da68:	4a5d      	ldr	r2, [pc, #372]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da6a:	f043 0301 	orr.w	r3, r3, #1
 800da6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800da70:	e00b      	b.n	800da8a <HAL_RCC_OscConfig+0x376>
 800da72:	4b5b      	ldr	r3, [pc, #364]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da76:	4a5a      	ldr	r2, [pc, #360]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da78:	f023 0301 	bic.w	r3, r3, #1
 800da7c:	6713      	str	r3, [r2, #112]	@ 0x70
 800da7e:	4b58      	ldr	r3, [pc, #352]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da82:	4a57      	ldr	r2, [pc, #348]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da84:	f023 0304 	bic.w	r3, r3, #4
 800da88:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d015      	beq.n	800dabe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da92:	f7fc fe37 	bl	800a704 <HAL_GetTick>
 800da96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da98:	e00a      	b.n	800dab0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da9a:	f7fc fe33 	bl	800a704 <HAL_GetTick>
 800da9e:	4602      	mov	r2, r0
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d901      	bls.n	800dab0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e0ce      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dab0:	4b4b      	ldr	r3, [pc, #300]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dab4:	f003 0302 	and.w	r3, r3, #2
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0ee      	beq.n	800da9a <HAL_RCC_OscConfig+0x386>
 800dabc:	e014      	b.n	800dae8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dabe:	f7fc fe21 	bl	800a704 <HAL_GetTick>
 800dac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dac4:	e00a      	b.n	800dadc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dac6:	f7fc fe1d 	bl	800a704 <HAL_GetTick>
 800daca:	4602      	mov	r2, r0
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d901      	bls.n	800dadc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800dad8:	2303      	movs	r3, #3
 800dada:	e0b8      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dadc:	4b40      	ldr	r3, [pc, #256]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dae0:	f003 0302 	and.w	r3, r3, #2
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1ee      	bne.n	800dac6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d105      	bne.n	800dafa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800daee:	4b3c      	ldr	r3, [pc, #240]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800daf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf2:	4a3b      	ldr	r2, [pc, #236]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800daf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800daf8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f000 80a4 	beq.w	800dc4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800db04:	4b36      	ldr	r3, [pc, #216]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f003 030c 	and.w	r3, r3, #12
 800db0c:	2b08      	cmp	r3, #8
 800db0e:	d06b      	beq.n	800dbe8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	2b02      	cmp	r3, #2
 800db16:	d149      	bne.n	800dbac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db18:	4b31      	ldr	r3, [pc, #196]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a30      	ldr	r2, [pc, #192]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db24:	f7fc fdee 	bl	800a704 <HAL_GetTick>
 800db28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db2a:	e008      	b.n	800db3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db2c:	f7fc fdea 	bl	800a704 <HAL_GetTick>
 800db30:	4602      	mov	r2, r0
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	2b02      	cmp	r3, #2
 800db38:	d901      	bls.n	800db3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e087      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db3e:	4b28      	ldr	r3, [pc, #160]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1f0      	bne.n	800db2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	69da      	ldr	r2, [r3, #28]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	431a      	orrs	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db58:	019b      	lsls	r3, r3, #6
 800db5a:	431a      	orrs	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db60:	085b      	lsrs	r3, r3, #1
 800db62:	3b01      	subs	r3, #1
 800db64:	041b      	lsls	r3, r3, #16
 800db66:	431a      	orrs	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db6c:	061b      	lsls	r3, r3, #24
 800db6e:	4313      	orrs	r3, r2
 800db70:	4a1b      	ldr	r2, [pc, #108]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800db76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db78:	4b19      	ldr	r3, [pc, #100]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a18      	ldr	r2, [pc, #96]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db84:	f7fc fdbe 	bl	800a704 <HAL_GetTick>
 800db88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db8a:	e008      	b.n	800db9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db8c:	f7fc fdba 	bl	800a704 <HAL_GetTick>
 800db90:	4602      	mov	r2, r0
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	2b02      	cmp	r3, #2
 800db98:	d901      	bls.n	800db9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e057      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db9e:	4b10      	ldr	r3, [pc, #64]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0f0      	beq.n	800db8c <HAL_RCC_OscConfig+0x478>
 800dbaa:	e04f      	b.n	800dc4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbac:	4b0c      	ldr	r3, [pc, #48]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a0b      	ldr	r2, [pc, #44]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dbb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbb8:	f7fc fda4 	bl	800a704 <HAL_GetTick>
 800dbbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbbe:	e008      	b.n	800dbd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbc0:	f7fc fda0 	bl	800a704 <HAL_GetTick>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d901      	bls.n	800dbd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	e03d      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbd2:	4b03      	ldr	r3, [pc, #12]	@ (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1f0      	bne.n	800dbc0 <HAL_RCC_OscConfig+0x4ac>
 800dbde:	e035      	b.n	800dc4c <HAL_RCC_OscConfig+0x538>
 800dbe0:	40023800 	.word	0x40023800
 800dbe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800dbe8:	4b1b      	ldr	r3, [pc, #108]	@ (800dc58 <HAL_RCC_OscConfig+0x544>)
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d028      	beq.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d121      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d11a      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800dc18:	4013      	ands	r3, r2
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800dc1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d111      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2e:	085b      	lsrs	r3, r3, #1
 800dc30:	3b01      	subs	r3, #1
 800dc32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d107      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d001      	beq.n	800dc4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e000      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	40023800 	.word	0x40023800

0800dc5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d101      	bne.n	800dc74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e0d0      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc74:	4b6a      	ldr	r3, [pc, #424]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 030f 	and.w	r3, r3, #15
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d910      	bls.n	800dca4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc82:	4b67      	ldr	r3, [pc, #412]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f023 020f 	bic.w	r2, r3, #15
 800dc8a:	4965      	ldr	r1, [pc, #404]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc92:	4b63      	ldr	r3, [pc, #396]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 030f 	and.w	r3, r3, #15
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d001      	beq.n	800dca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e0b8      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 0302 	and.w	r3, r3, #2
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d020      	beq.n	800dcf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f003 0304 	and.w	r3, r3, #4
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d005      	beq.n	800dcc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dcbc:	4b59      	ldr	r3, [pc, #356]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	4a58      	ldr	r2, [pc, #352]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800dcc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f003 0308 	and.w	r3, r3, #8
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d005      	beq.n	800dce0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dcd4:	4b53      	ldr	r3, [pc, #332]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	4a52      	ldr	r2, [pc, #328]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800dcde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dce0:	4b50      	ldr	r3, [pc, #320]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	494d      	ldr	r1, [pc, #308]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d040      	beq.n	800dd80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d107      	bne.n	800dd16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd06:	4b47      	ldr	r3, [pc, #284]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d115      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e07f      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d107      	bne.n	800dd2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd1e:	4b41      	ldr	r3, [pc, #260]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e073      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd2e:	4b3d      	ldr	r3, [pc, #244]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0302 	and.w	r3, r3, #2
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e06b      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd3e:	4b39      	ldr	r3, [pc, #228]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	f023 0203 	bic.w	r2, r3, #3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	4936      	ldr	r1, [pc, #216]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd50:	f7fc fcd8 	bl	800a704 <HAL_GetTick>
 800dd54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd56:	e00a      	b.n	800dd6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd58:	f7fc fcd4 	bl	800a704 <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d901      	bls.n	800dd6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800dd6a:	2303      	movs	r3, #3
 800dd6c:	e053      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd6e:	4b2d      	ldr	r3, [pc, #180]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f003 020c 	and.w	r2, r3, #12
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d1eb      	bne.n	800dd58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dd80:	4b27      	ldr	r3, [pc, #156]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 030f 	and.w	r3, r3, #15
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d210      	bcs.n	800ddb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd8e:	4b24      	ldr	r3, [pc, #144]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f023 020f 	bic.w	r2, r3, #15
 800dd96:	4922      	ldr	r1, [pc, #136]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd9e:	4b20      	ldr	r3, [pc, #128]	@ (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f003 030f 	and.w	r3, r3, #15
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d001      	beq.n	800ddb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ddac:	2301      	movs	r3, #1
 800ddae:	e032      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 0304 	and.w	r3, r3, #4
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d008      	beq.n	800ddce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ddbc:	4b19      	ldr	r3, [pc, #100]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	4916      	ldr	r1, [pc, #88]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f003 0308 	and.w	r3, r3, #8
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d009      	beq.n	800ddee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ddda:	4b12      	ldr	r3, [pc, #72]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	00db      	lsls	r3, r3, #3
 800dde8:	490e      	ldr	r1, [pc, #56]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddea:	4313      	orrs	r3, r2
 800ddec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ddee:	f000 f821 	bl	800de34 <HAL_RCC_GetSysClockFreq>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	4b0b      	ldr	r3, [pc, #44]	@ (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	091b      	lsrs	r3, r3, #4
 800ddfa:	f003 030f 	and.w	r3, r3, #15
 800ddfe:	490a      	ldr	r1, [pc, #40]	@ (800de28 <HAL_RCC_ClockConfig+0x1cc>)
 800de00:	5ccb      	ldrb	r3, [r1, r3]
 800de02:	fa22 f303 	lsr.w	r3, r2, r3
 800de06:	4a09      	ldr	r2, [pc, #36]	@ (800de2c <HAL_RCC_ClockConfig+0x1d0>)
 800de08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800de0a:	4b09      	ldr	r3, [pc, #36]	@ (800de30 <HAL_RCC_ClockConfig+0x1d4>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fa fe0e 	bl	8008a30 <HAL_InitTick>

  return HAL_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	40023c00 	.word	0x40023c00
 800de24:	40023800 	.word	0x40023800
 800de28:	0802564c 	.word	0x0802564c
 800de2c:	20000054 	.word	0x20000054
 800de30:	20000094 	.word	0x20000094

0800de34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de38:	b090      	sub	sp, #64	@ 0x40
 800de3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800de40:	2300      	movs	r3, #0
 800de42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de44:	2300      	movs	r3, #0
 800de46:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de4c:	4b59      	ldr	r3, [pc, #356]	@ (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	f003 030c 	and.w	r3, r3, #12
 800de54:	2b08      	cmp	r3, #8
 800de56:	d00d      	beq.n	800de74 <HAL_RCC_GetSysClockFreq+0x40>
 800de58:	2b08      	cmp	r3, #8
 800de5a:	f200 80a1 	bhi.w	800dfa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <HAL_RCC_GetSysClockFreq+0x34>
 800de62:	2b04      	cmp	r3, #4
 800de64:	d003      	beq.n	800de6e <HAL_RCC_GetSysClockFreq+0x3a>
 800de66:	e09b      	b.n	800dfa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800de68:	4b53      	ldr	r3, [pc, #332]	@ (800dfb8 <HAL_RCC_GetSysClockFreq+0x184>)
 800de6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800de6c:	e09b      	b.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800de6e:	4b53      	ldr	r3, [pc, #332]	@ (800dfbc <HAL_RCC_GetSysClockFreq+0x188>)
 800de70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800de72:	e098      	b.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800de74:	4b4f      	ldr	r3, [pc, #316]	@ (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800de7e:	4b4d      	ldr	r3, [pc, #308]	@ (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d028      	beq.n	800dedc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de8a:	4b4a      	ldr	r3, [pc, #296]	@ (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	099b      	lsrs	r3, r3, #6
 800de90:	2200      	movs	r2, #0
 800de92:	623b      	str	r3, [r7, #32]
 800de94:	627a      	str	r2, [r7, #36]	@ 0x24
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800de9c:	2100      	movs	r1, #0
 800de9e:	4b47      	ldr	r3, [pc, #284]	@ (800dfbc <HAL_RCC_GetSysClockFreq+0x188>)
 800dea0:	fb03 f201 	mul.w	r2, r3, r1
 800dea4:	2300      	movs	r3, #0
 800dea6:	fb00 f303 	mul.w	r3, r0, r3
 800deaa:	4413      	add	r3, r2
 800deac:	4a43      	ldr	r2, [pc, #268]	@ (800dfbc <HAL_RCC_GetSysClockFreq+0x188>)
 800deae:	fba0 1202 	umull	r1, r2, r0, r2
 800deb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800deb4:	460a      	mov	r2, r1
 800deb6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800deb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800deba:	4413      	add	r3, r2
 800debc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800debe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dec0:	2200      	movs	r2, #0
 800dec2:	61bb      	str	r3, [r7, #24]
 800dec4:	61fa      	str	r2, [r7, #28]
 800dec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800deca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800dece:	f7f2 fddd 	bl	8000a8c <__aeabi_uldivmod>
 800ded2:	4602      	mov	r2, r0
 800ded4:	460b      	mov	r3, r1
 800ded6:	4613      	mov	r3, r2
 800ded8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800deda:	e053      	b.n	800df84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dedc:	4b35      	ldr	r3, [pc, #212]	@ (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	099b      	lsrs	r3, r3, #6
 800dee2:	2200      	movs	r2, #0
 800dee4:	613b      	str	r3, [r7, #16]
 800dee6:	617a      	str	r2, [r7, #20]
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800deee:	f04f 0b00 	mov.w	fp, #0
 800def2:	4652      	mov	r2, sl
 800def4:	465b      	mov	r3, fp
 800def6:	f04f 0000 	mov.w	r0, #0
 800defa:	f04f 0100 	mov.w	r1, #0
 800defe:	0159      	lsls	r1, r3, #5
 800df00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800df04:	0150      	lsls	r0, r2, #5
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	ebb2 080a 	subs.w	r8, r2, sl
 800df0e:	eb63 090b 	sbc.w	r9, r3, fp
 800df12:	f04f 0200 	mov.w	r2, #0
 800df16:	f04f 0300 	mov.w	r3, #0
 800df1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800df1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800df22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800df26:	ebb2 0408 	subs.w	r4, r2, r8
 800df2a:	eb63 0509 	sbc.w	r5, r3, r9
 800df2e:	f04f 0200 	mov.w	r2, #0
 800df32:	f04f 0300 	mov.w	r3, #0
 800df36:	00eb      	lsls	r3, r5, #3
 800df38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df3c:	00e2      	lsls	r2, r4, #3
 800df3e:	4614      	mov	r4, r2
 800df40:	461d      	mov	r5, r3
 800df42:	eb14 030a 	adds.w	r3, r4, sl
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	eb45 030b 	adc.w	r3, r5, fp
 800df4c:	607b      	str	r3, [r7, #4]
 800df4e:	f04f 0200 	mov.w	r2, #0
 800df52:	f04f 0300 	mov.w	r3, #0
 800df56:	e9d7 4500 	ldrd	r4, r5, [r7]
 800df5a:	4629      	mov	r1, r5
 800df5c:	028b      	lsls	r3, r1, #10
 800df5e:	4621      	mov	r1, r4
 800df60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800df64:	4621      	mov	r1, r4
 800df66:	028a      	lsls	r2, r1, #10
 800df68:	4610      	mov	r0, r2
 800df6a:	4619      	mov	r1, r3
 800df6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df6e:	2200      	movs	r2, #0
 800df70:	60bb      	str	r3, [r7, #8]
 800df72:	60fa      	str	r2, [r7, #12]
 800df74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df78:	f7f2 fd88 	bl	8000a8c <__aeabi_uldivmod>
 800df7c:	4602      	mov	r2, r0
 800df7e:	460b      	mov	r3, r1
 800df80:	4613      	mov	r3, r2
 800df82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800df84:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	0c1b      	lsrs	r3, r3, #16
 800df8a:	f003 0303 	and.w	r3, r3, #3
 800df8e:	3301      	adds	r3, #1
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800df94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800df96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df98:	fbb2 f3f3 	udiv	r3, r2, r3
 800df9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800df9e:	e002      	b.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dfa0:	4b05      	ldr	r3, [pc, #20]	@ (800dfb8 <HAL_RCC_GetSysClockFreq+0x184>)
 800dfa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800dfa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3740      	adds	r7, #64	@ 0x40
 800dfac:	46bd      	mov	sp, r7
 800dfae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfb2:	bf00      	nop
 800dfb4:	40023800 	.word	0x40023800
 800dfb8:	00f42400 	.word	0x00f42400
 800dfbc:	017d7840 	.word	0x017d7840

0800dfc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfc4:	4b03      	ldr	r3, [pc, #12]	@ (800dfd4 <HAL_RCC_GetHCLKFreq+0x14>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20000054 	.word	0x20000054

0800dfd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dfdc:	f7ff fff0 	bl	800dfc0 <HAL_RCC_GetHCLKFreq>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	4b05      	ldr	r3, [pc, #20]	@ (800dff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	0a9b      	lsrs	r3, r3, #10
 800dfe8:	f003 0307 	and.w	r3, r3, #7
 800dfec:	4903      	ldr	r1, [pc, #12]	@ (800dffc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dfee:	5ccb      	ldrb	r3, [r1, r3]
 800dff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	40023800 	.word	0x40023800
 800dffc:	0802565c 	.word	0x0802565c

0800e000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e004:	f7ff ffdc 	bl	800dfc0 <HAL_RCC_GetHCLKFreq>
 800e008:	4602      	mov	r2, r0
 800e00a:	4b05      	ldr	r3, [pc, #20]	@ (800e020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	0b5b      	lsrs	r3, r3, #13
 800e010:	f003 0307 	and.w	r3, r3, #7
 800e014:	4903      	ldr	r1, [pc, #12]	@ (800e024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e016:	5ccb      	ldrb	r3, [r1, r3]
 800e018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	40023800 	.word	0x40023800
 800e024:	0802565c 	.word	0x0802565c

0800e028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	220f      	movs	r2, #15
 800e036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e038:	4b12      	ldr	r3, [pc, #72]	@ (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	f003 0203 	and.w	r2, r3, #3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e044:	4b0f      	ldr	r3, [pc, #60]	@ (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e050:	4b0c      	ldr	r3, [pc, #48]	@ (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e05c:	4b09      	ldr	r3, [pc, #36]	@ (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	08db      	lsrs	r3, r3, #3
 800e062:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e06a:	4b07      	ldr	r3, [pc, #28]	@ (800e088 <HAL_RCC_GetClockConfig+0x60>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 020f 	and.w	r2, r3, #15
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	601a      	str	r2, [r3, #0]
}
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	40023800 	.word	0x40023800
 800e088:	40023c00 	.word	0x40023c00

0800e08c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 0301 	and.w	r3, r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d012      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e0b4:	4b69      	ldr	r3, [pc, #420]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	4a68      	ldr	r2, [pc, #416]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e0be:	6093      	str	r3, [r2, #8]
 800e0c0:	4b66      	ldr	r3, [pc, #408]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0c2:	689a      	ldr	r2, [r3, #8]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0c8:	4964      	ldr	r1, [pc, #400]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d101      	bne.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d017      	beq.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e0e6:	4b5d      	ldr	r3, [pc, #372]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0f4:	4959      	ldr	r1, [pc, #356]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e104:	d101      	bne.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e106:	2301      	movs	r3, #1
 800e108:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e112:	2301      	movs	r3, #1
 800e114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d017      	beq.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e122:	4b4e      	ldr	r3, [pc, #312]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e128:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e130:	494a      	ldr	r1, [pc, #296]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e132:	4313      	orrs	r3, r2
 800e134:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e13c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e140:	d101      	bne.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e142:	2301      	movs	r3, #1
 800e144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e14e:	2301      	movs	r3, #1
 800e150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e15e:	2301      	movs	r3, #1
 800e160:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f003 0320 	and.w	r3, r3, #32
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 808b 	beq.w	800e286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e170:	4b3a      	ldr	r3, [pc, #232]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e174:	4a39      	ldr	r2, [pc, #228]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e17a:	6413      	str	r3, [r2, #64]	@ 0x40
 800e17c:	4b37      	ldr	r3, [pc, #220]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e184:	60bb      	str	r3, [r7, #8]
 800e186:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e188:	4b35      	ldr	r3, [pc, #212]	@ (800e260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4a34      	ldr	r2, [pc, #208]	@ (800e260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e18e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e194:	f7fc fab6 	bl	800a704 <HAL_GetTick>
 800e198:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e19a:	e008      	b.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e19c:	f7fc fab2 	bl	800a704 <HAL_GetTick>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	2b64      	cmp	r3, #100	@ 0x64
 800e1a8:	d901      	bls.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	e357      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e1ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d0f0      	beq.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e1ba:	4b28      	ldr	r3, [pc, #160]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d035      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d02e      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e1d8:	4b20      	ldr	r3, [pc, #128]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e1e2:	4b1e      	ldr	r3, [pc, #120]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1e6:	4a1d      	ldr	r2, [pc, #116]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e1ee:	4b1b      	ldr	r3, [pc, #108]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1f2:	4a1a      	ldr	r2, [pc, #104]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e1f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e1fa:	4a18      	ldr	r2, [pc, #96]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e200:	4b16      	ldr	r3, [pc, #88]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e204:	f003 0301 	and.w	r3, r3, #1
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d114      	bne.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e20c:	f7fc fa7a 	bl	800a704 <HAL_GetTick>
 800e210:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e212:	e00a      	b.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e214:	f7fc fa76 	bl	800a704 <HAL_GetTick>
 800e218:	4602      	mov	r2, r0
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e222:	4293      	cmp	r3, r2
 800e224:	d901      	bls.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e226:	2303      	movs	r3, #3
 800e228:	e319      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e22a:	4b0c      	ldr	r3, [pc, #48]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e22e:	f003 0302 	and.w	r3, r3, #2
 800e232:	2b00      	cmp	r3, #0
 800e234:	d0ee      	beq.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e23a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e23e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e242:	d111      	bne.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e244:	4b05      	ldr	r3, [pc, #20]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800e250:	4b04      	ldr	r3, [pc, #16]	@ (800e264 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e252:	400b      	ands	r3, r1
 800e254:	4901      	ldr	r1, [pc, #4]	@ (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e256:	4313      	orrs	r3, r2
 800e258:	608b      	str	r3, [r1, #8]
 800e25a:	e00b      	b.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e25c:	40023800 	.word	0x40023800
 800e260:	40007000 	.word	0x40007000
 800e264:	0ffffcff 	.word	0x0ffffcff
 800e268:	4baa      	ldr	r3, [pc, #680]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	4aa9      	ldr	r2, [pc, #676]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e26e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800e272:	6093      	str	r3, [r2, #8]
 800e274:	4ba7      	ldr	r3, [pc, #668]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e276:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e27c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e280:	49a4      	ldr	r1, [pc, #656]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e282:	4313      	orrs	r3, r2
 800e284:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f003 0310 	and.w	r3, r3, #16
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d010      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e292:	4ba0      	ldr	r3, [pc, #640]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e298:	4a9e      	ldr	r2, [pc, #632]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e29a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e29e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800e2a2:	4b9c      	ldr	r3, [pc, #624]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2ac:	4999      	ldr	r1, [pc, #612]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00a      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e2c0:	4b94      	ldr	r3, [pc, #592]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2ce:	4991      	ldr	r1, [pc, #580]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e2e2:	4b8c      	ldr	r3, [pc, #560]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e2f0:	4988      	ldr	r1, [pc, #544]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e304:	4b83      	ldr	r3, [pc, #524]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e30a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e312:	4980      	ldr	r1, [pc, #512]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e314:	4313      	orrs	r3, r2
 800e316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e326:	4b7b      	ldr	r3, [pc, #492]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e32c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e334:	4977      	ldr	r1, [pc, #476]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e336:	4313      	orrs	r3, r2
 800e338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e348:	4b72      	ldr	r3, [pc, #456]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e34e:	f023 0203 	bic.w	r2, r3, #3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e356:	496f      	ldr	r1, [pc, #444]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e358:	4313      	orrs	r3, r2
 800e35a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e36a:	4b6a      	ldr	r3, [pc, #424]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e370:	f023 020c 	bic.w	r2, r3, #12
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e378:	4966      	ldr	r1, [pc, #408]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e37a:	4313      	orrs	r3, r2
 800e37c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e38c:	4b61      	ldr	r3, [pc, #388]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e392:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e39a:	495e      	ldr	r1, [pc, #376]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e39c:	4313      	orrs	r3, r2
 800e39e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00a      	beq.n	800e3c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e3ae:	4b59      	ldr	r3, [pc, #356]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3bc:	4955      	ldr	r1, [pc, #340]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00a      	beq.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e3d0:	4b50      	ldr	r3, [pc, #320]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3de:	494d      	ldr	r1, [pc, #308]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00a      	beq.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e3f2:	4b48      	ldr	r3, [pc, #288]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e400:	4944      	ldr	r1, [pc, #272]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e402:	4313      	orrs	r3, r2
 800e404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00a      	beq.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e414:	4b3f      	ldr	r3, [pc, #252]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e41a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e422:	493c      	ldr	r1, [pc, #240]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e424:	4313      	orrs	r3, r2
 800e426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00a      	beq.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e436:	4b37      	ldr	r3, [pc, #220]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e43c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e444:	4933      	ldr	r1, [pc, #204]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e446:	4313      	orrs	r3, r2
 800e448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00a      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e458:	4b2e      	ldr	r3, [pc, #184]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e45e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e466:	492b      	ldr	r1, [pc, #172]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e468:	4313      	orrs	r3, r2
 800e46a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e476:	2b00      	cmp	r3, #0
 800e478:	d011      	beq.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e47a:	4b26      	ldr	r3, [pc, #152]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e480:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e488:	4922      	ldr	r1, [pc, #136]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e48a:	4313      	orrs	r3, r2
 800e48c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e498:	d101      	bne.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e49a:	2301      	movs	r3, #1
 800e49c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f003 0308 	and.w	r3, r3, #8
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00a      	beq.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e4ba:	4b16      	ldr	r3, [pc, #88]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4c8:	4912      	ldr	r1, [pc, #72]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00b      	beq.n	800e4f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4ec:	4909      	ldr	r1, [pc, #36]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d006      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e502:	2b00      	cmp	r3, #0
 800e504:	f000 80d9 	beq.w	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e508:	4b02      	ldr	r3, [pc, #8]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a01      	ldr	r2, [pc, #4]	@ (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e50e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e512:	e001      	b.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e514:	40023800 	.word	0x40023800
 800e518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e51a:	f7fc f8f3 	bl	800a704 <HAL_GetTick>
 800e51e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e520:	e008      	b.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e522:	f7fc f8ef 	bl	800a704 <HAL_GetTick>
 800e526:	4602      	mov	r2, r0
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	2b64      	cmp	r3, #100	@ 0x64
 800e52e:	d901      	bls.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e530:	2303      	movs	r3, #3
 800e532:	e194      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e534:	4b6c      	ldr	r3, [pc, #432]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1f0      	bne.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d021      	beq.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11d      	bne.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e554:	4b64      	ldr	r3, [pc, #400]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e55a:	0c1b      	lsrs	r3, r3, #16
 800e55c:	f003 0303 	and.w	r3, r3, #3
 800e560:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e562:	4b61      	ldr	r3, [pc, #388]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e568:	0e1b      	lsrs	r3, r3, #24
 800e56a:	f003 030f 	and.w	r3, r3, #15
 800e56e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	019a      	lsls	r2, r3, #6
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	041b      	lsls	r3, r3, #16
 800e57a:	431a      	orrs	r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	061b      	lsls	r3, r3, #24
 800e580:	431a      	orrs	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	071b      	lsls	r3, r3, #28
 800e588:	4957      	ldr	r1, [pc, #348]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e58a:	4313      	orrs	r3, r2
 800e58c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d004      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5a4:	d00a      	beq.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d02e      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e5ba:	d129      	bne.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e5bc:	4b4a      	ldr	r3, [pc, #296]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5c2:	0c1b      	lsrs	r3, r3, #16
 800e5c4:	f003 0303 	and.w	r3, r3, #3
 800e5c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e5ca:	4b47      	ldr	r3, [pc, #284]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5d0:	0f1b      	lsrs	r3, r3, #28
 800e5d2:	f003 0307 	and.w	r3, r3, #7
 800e5d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	019a      	lsls	r2, r3, #6
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	041b      	lsls	r3, r3, #16
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	061b      	lsls	r3, r3, #24
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	071b      	lsls	r3, r3, #28
 800e5f0:	493d      	ldr	r1, [pc, #244]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e5f8:	4b3b      	ldr	r3, [pc, #236]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5fe:	f023 021f 	bic.w	r2, r3, #31
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e606:	3b01      	subs	r3, #1
 800e608:	4937      	ldr	r1, [pc, #220]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e60a:	4313      	orrs	r3, r2
 800e60c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d01d      	beq.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e61c:	4b32      	ldr	r3, [pc, #200]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e622:	0e1b      	lsrs	r3, r3, #24
 800e624:	f003 030f 	and.w	r3, r3, #15
 800e628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e62a:	4b2f      	ldr	r3, [pc, #188]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e630:	0f1b      	lsrs	r3, r3, #28
 800e632:	f003 0307 	and.w	r3, r3, #7
 800e636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	019a      	lsls	r2, r3, #6
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	041b      	lsls	r3, r3, #16
 800e644:	431a      	orrs	r2, r3
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	061b      	lsls	r3, r3, #24
 800e64a:	431a      	orrs	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	071b      	lsls	r3, r3, #28
 800e650:	4925      	ldr	r1, [pc, #148]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e652:	4313      	orrs	r3, r2
 800e654:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e660:	2b00      	cmp	r3, #0
 800e662:	d011      	beq.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	019a      	lsls	r2, r3, #6
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	041b      	lsls	r3, r3, #16
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	061b      	lsls	r3, r3, #24
 800e678:	431a      	orrs	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	071b      	lsls	r3, r3, #28
 800e680:	4919      	ldr	r1, [pc, #100]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e682:	4313      	orrs	r3, r2
 800e684:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e688:	4b17      	ldr	r3, [pc, #92]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a16      	ldr	r2, [pc, #88]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e68e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e694:	f7fc f836 	bl	800a704 <HAL_GetTick>
 800e698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e69a:	e008      	b.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e69c:	f7fc f832 	bl	800a704 <HAL_GetTick>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	2b64      	cmp	r3, #100	@ 0x64
 800e6a8:	d901      	bls.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e0d7      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0f0      	beq.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	f040 80cd 	bne.w	800e85c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e6c2:	4b09      	ldr	r3, [pc, #36]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a08      	ldr	r2, [pc, #32]	@ (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e6cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6ce:	f7fc f819 	bl	800a704 <HAL_GetTick>
 800e6d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e6d4:	e00a      	b.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e6d6:	f7fc f815 	bl	800a704 <HAL_GetTick>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	1ad3      	subs	r3, r2, r3
 800e6e0:	2b64      	cmp	r3, #100	@ 0x64
 800e6e2:	d903      	bls.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6e4:	2303      	movs	r3, #3
 800e6e6:	e0ba      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e6e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e6ec:	4b5e      	ldr	r3, [pc, #376]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e6f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e6f8:	d0ed      	beq.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d003      	beq.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d009      	beq.n	800e722 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e716:	2b00      	cmp	r3, #0
 800e718:	d02e      	beq.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d12a      	bne.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e722:	4b51      	ldr	r3, [pc, #324]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e728:	0c1b      	lsrs	r3, r3, #16
 800e72a:	f003 0303 	and.w	r3, r3, #3
 800e72e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e730:	4b4d      	ldr	r3, [pc, #308]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e736:	0f1b      	lsrs	r3, r3, #28
 800e738:	f003 0307 	and.w	r3, r3, #7
 800e73c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	695b      	ldr	r3, [r3, #20]
 800e742:	019a      	lsls	r2, r3, #6
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	041b      	lsls	r3, r3, #16
 800e748:	431a      	orrs	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	061b      	lsls	r3, r3, #24
 800e750:	431a      	orrs	r2, r3
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	071b      	lsls	r3, r3, #28
 800e756:	4944      	ldr	r1, [pc, #272]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e758:	4313      	orrs	r3, r2
 800e75a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e75e:	4b42      	ldr	r3, [pc, #264]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e764:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e76c:	3b01      	subs	r3, #1
 800e76e:	021b      	lsls	r3, r3, #8
 800e770:	493d      	ldr	r1, [pc, #244]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e772:	4313      	orrs	r3, r2
 800e774:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e780:	2b00      	cmp	r3, #0
 800e782:	d022      	beq.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e78c:	d11d      	bne.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e78e:	4b36      	ldr	r3, [pc, #216]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e794:	0e1b      	lsrs	r3, r3, #24
 800e796:	f003 030f 	and.w	r3, r3, #15
 800e79a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e79c:	4b32      	ldr	r3, [pc, #200]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7a2:	0f1b      	lsrs	r3, r3, #28
 800e7a4:	f003 0307 	and.w	r3, r3, #7
 800e7a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	019a      	lsls	r2, r3, #6
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	041b      	lsls	r3, r3, #16
 800e7b6:	431a      	orrs	r2, r3
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	061b      	lsls	r3, r3, #24
 800e7bc:	431a      	orrs	r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	071b      	lsls	r3, r3, #28
 800e7c2:	4929      	ldr	r1, [pc, #164]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f003 0308 	and.w	r3, r3, #8
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d028      	beq.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e7d6:	4b24      	ldr	r3, [pc, #144]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7dc:	0e1b      	lsrs	r3, r3, #24
 800e7de:	f003 030f 	and.w	r3, r3, #15
 800e7e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e7e4:	4b20      	ldr	r3, [pc, #128]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7ea:	0c1b      	lsrs	r3, r3, #16
 800e7ec:	f003 0303 	and.w	r3, r3, #3
 800e7f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	695b      	ldr	r3, [r3, #20]
 800e7f6:	019a      	lsls	r2, r3, #6
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	041b      	lsls	r3, r3, #16
 800e7fc:	431a      	orrs	r2, r3
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	061b      	lsls	r3, r3, #24
 800e802:	431a      	orrs	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	69db      	ldr	r3, [r3, #28]
 800e808:	071b      	lsls	r3, r3, #28
 800e80a:	4917      	ldr	r1, [pc, #92]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e80c:	4313      	orrs	r3, r2
 800e80e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e812:	4b15      	ldr	r3, [pc, #84]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e818:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e820:	4911      	ldr	r1, [pc, #68]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e822:	4313      	orrs	r3, r2
 800e824:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e828:	4b0f      	ldr	r3, [pc, #60]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a0e      	ldr	r2, [pc, #56]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e82e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e834:	f7fb ff66 	bl	800a704 <HAL_GetTick>
 800e838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e83a:	e008      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e83c:	f7fb ff62 	bl	800a704 <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b64      	cmp	r3, #100	@ 0x64
 800e848:	d901      	bls.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e007      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e84e:	4b06      	ldr	r3, [pc, #24]	@ (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e85a:	d1ef      	bne.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	40023800 	.word	0x40023800

0800e86c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800e874:	2300      	movs	r3, #0
 800e876:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4a80      	ldr	r2, [pc, #512]	@ (800ea7c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800e87c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800e87e:	4b80      	ldr	r3, [pc, #512]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e884:	099b      	lsrs	r3, r3, #6
 800e886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e88e:	4b7c      	ldr	r3, [pc, #496]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e894:	0c1b      	lsrs	r3, r3, #16
 800e896:	f003 0203 	and.w	r2, r3, #3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e89e:	4b78      	ldr	r3, [pc, #480]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8a4:	0e1b      	lsrs	r3, r3, #24
 800e8a6:	f003 020f 	and.w	r2, r3, #15
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e8ae:	4b74      	ldr	r3, [pc, #464]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8b4:	0f1b      	lsrs	r3, r3, #28
 800e8b6:	f003 0207 	and.w	r2, r3, #7
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800e8be:	4b70      	ldr	r3, [pc, #448]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8c4:	099b      	lsrs	r3, r3, #6
 800e8c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e8ce:	4b6c      	ldr	r3, [pc, #432]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8d4:	0c1b      	lsrs	r3, r3, #16
 800e8d6:	f003 0203 	and.w	r2, r3, #3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e8de:	4b68      	ldr	r3, [pc, #416]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8e4:	0e1b      	lsrs	r3, r3, #24
 800e8e6:	f003 020f 	and.w	r2, r3, #15
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e8ee:	4b64      	ldr	r3, [pc, #400]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8f4:	0f1b      	lsrs	r3, r3, #28
 800e8f6:	f003 0207 	and.w	r2, r3, #7
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800e8fe:	4b60      	ldr	r3, [pc, #384]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e904:	f003 021f 	and.w	r2, r3, #31
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800e90c:	4b5c      	ldr	r3, [pc, #368]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e90e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e912:	0a1b      	lsrs	r3, r3, #8
 800e914:	f003 021f 	and.w	r2, r3, #31
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800e91c:	4b58      	ldr	r3, [pc, #352]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e91e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e922:	0c1b      	lsrs	r3, r3, #16
 800e924:	f003 0203 	and.w	r2, r3, #3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800e92c:	4b54      	ldr	r3, [pc, #336]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e932:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800e93a:	4b51      	ldr	r3, [pc, #324]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e940:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800e948:	4b4d      	ldr	r3, [pc, #308]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800e954:	4b4a      	ldr	r3, [pc, #296]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e95a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800e962:	4b47      	ldr	r3, [pc, #284]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e968:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800e970:	4b43      	ldr	r3, [pc, #268]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e976:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800e97e:	4b40      	ldr	r3, [pc, #256]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e984:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800e98c:	4b3c      	ldr	r3, [pc, #240]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e992:	f003 0203 	and.w	r2, r3, #3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800e99a:	4b39      	ldr	r3, [pc, #228]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9a0:	f003 020c 	and.w	r2, r3, #12
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800e9a8:	4b35      	ldr	r3, [pc, #212]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9ae:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800e9b6:	4b32      	ldr	r3, [pc, #200]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9bc:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800e9c4:	4b2e      	ldr	r3, [pc, #184]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9ca:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800e9d2:	4b2b      	ldr	r3, [pc, #172]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9d8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800e9e0:	4b27      	ldr	r3, [pc, #156]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9e6:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800e9ee:	4b24      	ldr	r3, [pc, #144]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9f4:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e9fc:	4b20      	ldr	r3, [pc, #128]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea02:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800ea0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea10:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800ea18:	4b19      	ldr	r3, [pc, #100]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea1e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800ea26:	4b16      	ldr	r3, [pc, #88]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea2c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800ea36:	4b12      	ldr	r3, [pc, #72]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea38:	689b      	ldr	r3, [r3, #8]
 800ea3a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ea3e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800ea40:	4b0f      	ldr	r3, [pc, #60]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea44:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800ea50:	4b0b      	ldr	r3, [pc, #44]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d103      	bne.n	800ea66 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800ea64:	e003      	b.n	800ea6e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ea6c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ea6e:	bf00      	nop
 800ea70:	3714      	adds	r7, #20
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	00fffff1 	.word	0x00fffff1
 800ea80:	40023800 	.word	0x40023800

0800ea84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b087      	sub	sp, #28
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800eaa2:	f040 808d 	bne.w	800ebc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800eaa6:	4b93      	ldr	r3, [pc, #588]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eaa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eaac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800eab4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eabc:	d07c      	beq.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eac4:	d87b      	bhi.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d004      	beq.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ead2:	d039      	beq.n	800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ead4:	e073      	b.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ead6:	4b87      	ldr	r3, [pc, #540]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d108      	bne.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800eae2:	4b84      	ldr	r3, [pc, #528]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eaea:	4a83      	ldr	r2, [pc, #524]	@ (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800eaec:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaf0:	613b      	str	r3, [r7, #16]
 800eaf2:	e007      	b.n	800eb04 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800eaf4:	4b7f      	ldr	r3, [pc, #508]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eafc:	4a7f      	ldr	r2, [pc, #508]	@ (800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb02:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800eb04:	4b7b      	ldr	r3, [pc, #492]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb0a:	0e1b      	lsrs	r3, r3, #24
 800eb0c:	f003 030f 	and.w	r3, r3, #15
 800eb10:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800eb12:	4b78      	ldr	r3, [pc, #480]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb18:	099b      	lsrs	r3, r3, #6
 800eb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb1e:	693a      	ldr	r2, [r7, #16]
 800eb20:	fb03 f202 	mul.w	r2, r3, r2
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb2a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800eb2c:	4b71      	ldr	r3, [pc, #452]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb32:	0a1b      	lsrs	r3, r3, #8
 800eb34:	f003 031f 	and.w	r3, r3, #31
 800eb38:	3301      	adds	r3, #1
 800eb3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800eb3c:	697a      	ldr	r2, [r7, #20]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb44:	617b      	str	r3, [r7, #20]
        break;
 800eb46:	e03b      	b.n	800ebc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800eb48:	4b6a      	ldr	r3, [pc, #424]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d108      	bne.n	800eb66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800eb54:	4b67      	ldr	r3, [pc, #412]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb5c:	4a66      	ldr	r2, [pc, #408]	@ (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800eb5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb62:	613b      	str	r3, [r7, #16]
 800eb64:	e007      	b.n	800eb76 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800eb66:	4b63      	ldr	r3, [pc, #396]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb6e:	4a63      	ldr	r2, [pc, #396]	@ (800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eb70:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb74:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800eb76:	4b5f      	ldr	r3, [pc, #380]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb7c:	0e1b      	lsrs	r3, r3, #24
 800eb7e:	f003 030f 	and.w	r3, r3, #15
 800eb82:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800eb84:	4b5b      	ldr	r3, [pc, #364]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb8a:	099b      	lsrs	r3, r3, #6
 800eb8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb90:	693a      	ldr	r2, [r7, #16]
 800eb92:	fb03 f202 	mul.w	r2, r3, r2
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb9c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800eb9e:	4b55      	ldr	r3, [pc, #340]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eba4:	f003 031f 	and.w	r3, r3, #31
 800eba8:	3301      	adds	r3, #1
 800ebaa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ebac:	697a      	ldr	r2, [r7, #20]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebb4:	617b      	str	r3, [r7, #20]
        break;
 800ebb6:	e003      	b.n	800ebc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ebb8:	4b51      	ldr	r3, [pc, #324]	@ (800ed00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ebba:	617b      	str	r3, [r7, #20]
        break;
 800ebbc:	e000      	b.n	800ebc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800ebbe:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebc6:	f040 808d 	bne.w	800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ebca:	4b4a      	ldr	r3, [pc, #296]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ebd0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ebd8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ebe0:	d07c      	beq.n	800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ebe8:	d87b      	bhi.n	800ece2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d004      	beq.n	800ebfa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ebf6:	d039      	beq.n	800ec6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ebf8:	e073      	b.n	800ece2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ebfa:	4b3e      	ldr	r3, [pc, #248]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d108      	bne.n	800ec18 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ec06:	4b3b      	ldr	r3, [pc, #236]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec0e:	4a3a      	ldr	r2, [pc, #232]	@ (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ec10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec14:	613b      	str	r3, [r7, #16]
 800ec16:	e007      	b.n	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ec18:	4b36      	ldr	r3, [pc, #216]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec20:	4a36      	ldr	r2, [pc, #216]	@ (800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec26:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ec28:	4b32      	ldr	r3, [pc, #200]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec2e:	0e1b      	lsrs	r3, r3, #24
 800ec30:	f003 030f 	and.w	r3, r3, #15
 800ec34:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ec36:	4b2f      	ldr	r3, [pc, #188]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec3c:	099b      	lsrs	r3, r3, #6
 800ec3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	fb03 f202 	mul.w	r2, r3, r2
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec4e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ec50:	4b28      	ldr	r3, [pc, #160]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec56:	0a1b      	lsrs	r3, r3, #8
 800ec58:	f003 031f 	and.w	r3, r3, #31
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ec60:	697a      	ldr	r2, [r7, #20]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec68:	617b      	str	r3, [r7, #20]
        break;
 800ec6a:	e03b      	b.n	800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ec6c:	4b21      	ldr	r3, [pc, #132]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d108      	bne.n	800ec8a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ec78:	4b1e      	ldr	r3, [pc, #120]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec80:	4a1d      	ldr	r2, [pc, #116]	@ (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ec82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec86:	613b      	str	r3, [r7, #16]
 800ec88:	e007      	b.n	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ec8a:	4b1a      	ldr	r3, [pc, #104]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec92:	4a1a      	ldr	r2, [pc, #104]	@ (800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec98:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ec9a:	4b16      	ldr	r3, [pc, #88]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eca0:	0e1b      	lsrs	r3, r3, #24
 800eca2:	f003 030f 	and.w	r3, r3, #15
 800eca6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800eca8:	4b12      	ldr	r3, [pc, #72]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ecae:	099b      	lsrs	r3, r3, #6
 800ecb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	fb03 f202 	mul.w	r2, r3, r2
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ecc2:	4b0c      	ldr	r3, [pc, #48]	@ (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecc8:	f003 031f 	and.w	r3, r3, #31
 800eccc:	3301      	adds	r3, #1
 800ecce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ecd0:	697a      	ldr	r2, [r7, #20]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecd8:	617b      	str	r3, [r7, #20]
        break;
 800ecda:	e003      	b.n	800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ecdc:	4b08      	ldr	r3, [pc, #32]	@ (800ed00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ecde:	617b      	str	r3, [r7, #20]
        break;
 800ece0:	e000      	b.n	800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800ece2:	bf00      	nop
      }
    }
  }

  return frequency;
 800ece4:	697b      	ldr	r3, [r7, #20]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	371c      	adds	r7, #28
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	40023800 	.word	0x40023800
 800ecf8:	00f42400 	.word	0x00f42400
 800ecfc:	017d7840 	.word	0x017d7840
 800ed00:	00bb8000 	.word	0x00bb8000

0800ed04 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b088      	sub	sp, #32
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d101      	bne.n	800ed22 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e156      	b.n	800efd0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d106      	bne.n	800ed3c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f7f9 fd42 	bl	80087c0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2202      	movs	r2, #2
 800ed40:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 fa85 	bl	800f254 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	d00c      	beq.n	800ed6c <HAL_SAI_Init+0x68>
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d80d      	bhi.n	800ed72 <HAL_SAI_Init+0x6e>
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d002      	beq.n	800ed60 <HAL_SAI_Init+0x5c>
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d003      	beq.n	800ed66 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800ed5e:	e008      	b.n	800ed72 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800ed60:	2300      	movs	r3, #0
 800ed62:	61fb      	str	r3, [r7, #28]
      break;
 800ed64:	e006      	b.n	800ed74 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ed66:	2310      	movs	r3, #16
 800ed68:	61fb      	str	r3, [r7, #28]
      break;
 800ed6a:	e003      	b.n	800ed74 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ed6c:	2320      	movs	r3, #32
 800ed6e:	61fb      	str	r3, [r7, #28]
      break;
 800ed70:	e000      	b.n	800ed74 <HAL_SAI_Init+0x70>
      break;
 800ed72:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	d81e      	bhi.n	800edba <HAL_SAI_Init+0xb6>
 800ed7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ed84 <HAL_SAI_Init+0x80>)
 800ed7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed82:	bf00      	nop
 800ed84:	0800ed95 	.word	0x0800ed95
 800ed88:	0800ed9b 	.word	0x0800ed9b
 800ed8c:	0800eda3 	.word	0x0800eda3
 800ed90:	0800edab 	.word	0x0800edab
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]
    }
    break;
 800ed98:	e010      	b.n	800edbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ed9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed9e:	617b      	str	r3, [r7, #20]
    }
    break;
 800eda0:	e00c      	b.n	800edbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eda2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eda6:	617b      	str	r3, [r7, #20]
    }
    break;
 800eda8:	e008      	b.n	800edbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800edaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800edae:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	f043 0301 	orr.w	r3, r3, #1
 800edb6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800edb8:	e000      	b.n	800edbc <HAL_SAI_Init+0xb8>
    default:
      break;
 800edba:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a85      	ldr	r2, [pc, #532]	@ (800efd8 <HAL_SAI_Init+0x2d4>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d004      	beq.n	800edd0 <HAL_SAI_Init+0xcc>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a84      	ldr	r2, [pc, #528]	@ (800efdc <HAL_SAI_Init+0x2d8>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d103      	bne.n	800edd8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800edd0:	4a83      	ldr	r2, [pc, #524]	@ (800efe0 <HAL_SAI_Init+0x2dc>)
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	6013      	str	r3, [r2, #0]
 800edd6:	e002      	b.n	800edde <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800edd8:	4a82      	ldr	r2, [pc, #520]	@ (800efe4 <HAL_SAI_Init+0x2e0>)
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	69db      	ldr	r3, [r3, #28]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d04c      	beq.n	800ee80 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ede6:	2300      	movs	r3, #0
 800ede8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a7a      	ldr	r2, [pc, #488]	@ (800efd8 <HAL_SAI_Init+0x2d4>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d004      	beq.n	800edfe <HAL_SAI_Init+0xfa>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a78      	ldr	r2, [pc, #480]	@ (800efdc <HAL_SAI_Init+0x2d8>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d104      	bne.n	800ee08 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800edfe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ee02:	f7ff fe3f 	bl	800ea84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ee06:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a76      	ldr	r2, [pc, #472]	@ (800efe8 <HAL_SAI_Init+0x2e4>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d004      	beq.n	800ee1c <HAL_SAI_Init+0x118>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a75      	ldr	r2, [pc, #468]	@ (800efec <HAL_SAI_Init+0x2e8>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d104      	bne.n	800ee26 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ee1c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ee20:	f7ff fe30 	bl	800ea84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ee24:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4413      	add	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	461a      	mov	r2, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	69db      	ldr	r3, [r3, #28]
 800ee36:	025b      	lsls	r3, r3, #9
 800ee38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee3c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	4a6b      	ldr	r2, [pc, #428]	@ (800eff0 <HAL_SAI_Init+0x2ec>)
 800ee42:	fba2 2303 	umull	r2, r3, r2, r3
 800ee46:	08da      	lsrs	r2, r3, #3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800ee4c:	68f9      	ldr	r1, [r7, #12]
 800ee4e:	4b68      	ldr	r3, [pc, #416]	@ (800eff0 <HAL_SAI_Init+0x2ec>)
 800ee50:	fba3 2301 	umull	r2, r3, r3, r1
 800ee54:	08da      	lsrs	r2, r3, #3
 800ee56:	4613      	mov	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	1aca      	subs	r2, r1, r3
 800ee60:	2a08      	cmp	r2, #8
 800ee62:	d904      	bls.n	800ee6e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a1b      	ldr	r3, [r3, #32]
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee72:	2b04      	cmp	r3, #4
 800ee74:	d104      	bne.n	800ee80 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a1b      	ldr	r3, [r3, #32]
 800ee7a:	085a      	lsrs	r2, r3, #1
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <HAL_SAI_Init+0x18c>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d109      	bne.n	800eea4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d101      	bne.n	800ee9c <HAL_SAI_Init+0x198>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e001      	b.n	800eea0 <HAL_SAI_Init+0x19c>
 800ee9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eea0:	61bb      	str	r3, [r7, #24]
 800eea2:	e008      	b.n	800eeb6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d102      	bne.n	800eeb2 <HAL_SAI_Init+0x1ae>
 800eeac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eeb0:	e000      	b.n	800eeb4 <HAL_SAI_Init+0x1b0>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	6819      	ldr	r1, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	4b4c      	ldr	r3, [pc, #304]	@ (800eff4 <HAL_SAI_Init+0x2f0>)
 800eec2:	400b      	ands	r3, r1
 800eec4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	6819      	ldr	r1, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685a      	ldr	r2, [r3, #4]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eed4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eeda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eee0:	431a      	orrs	r2, r3
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800eeee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	691b      	ldr	r3, [r3, #16]
 800eef4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eefa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	051b      	lsls	r3, r3, #20
 800ef02:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	430a      	orrs	r2, r1
 800ef0a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6859      	ldr	r1, [r3, #4]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	4b38      	ldr	r3, [pc, #224]	@ (800eff8 <HAL_SAI_Init+0x2f4>)
 800ef18:	400b      	ands	r3, r1
 800ef1a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6859      	ldr	r1, [r3, #4]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	699a      	ldr	r2, [r3, #24]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef2a:	431a      	orrs	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef30:	431a      	orrs	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	430a      	orrs	r2, r1
 800ef38:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	6899      	ldr	r1, [r3, #8]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	4b2d      	ldr	r3, [pc, #180]	@ (800effc <HAL_SAI_Init+0x2f8>)
 800ef46:	400b      	ands	r3, r1
 800ef48:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6899      	ldr	r1, [r3, #8]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef54:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ef5a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800ef60:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800ef66:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ef70:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	430a      	orrs	r2, r1
 800ef78:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68d9      	ldr	r1, [r3, #12]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ef88:	400b      	ands	r3, r1
 800ef8a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68d9      	ldr	r1, [r3, #12]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef9a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efa0:	041b      	lsls	r3, r3, #16
 800efa2:	431a      	orrs	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800efa8:	3b01      	subs	r3, #1
 800efaa:	021b      	lsls	r3, r3, #8
 800efac:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	430a      	orrs	r2, r1
 800efb4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3720      	adds	r7, #32
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	40015804 	.word	0x40015804
 800efdc:	40015824 	.word	0x40015824
 800efe0:	40015800 	.word	0x40015800
 800efe4:	40015c00 	.word	0x40015c00
 800efe8:	40015c04 	.word	0x40015c04
 800efec:	40015c24 	.word	0x40015c24
 800eff0:	cccccccd 	.word	0xcccccccd
 800eff4:	ff05c010 	.word	0xff05c010
 800eff8:	ffff1ff0 	.word	0xffff1ff0
 800effc:	fff88000 	.word	0xfff88000

0800f000 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	e027      	b.n	800f062 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2202      	movs	r2, #2
 800f016:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2200      	movs	r2, #0
 800f020:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f04f 32ff 	mov.w	r2, #4294967295
 800f02a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 f911 	bl	800f254 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	685a      	ldr	r2, [r3, #4]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f042 0208 	orr.w	r2, r2, #8
 800f040:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7f9 fc9a 	bl	800897c <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	4613      	mov	r3, r2
 800f078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f07a:	f7fb fb43 	bl	800a704 <HAL_GetTick>
 800f07e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d002      	beq.n	800f08c <HAL_SAI_Transmit_DMA+0x20>
 800f086:	88fb      	ldrh	r3, [r7, #6]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d101      	bne.n	800f090 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f08c:	2301      	movs	r3, #1
 800f08e:	e093      	b.n	800f1b8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b01      	cmp	r3, #1
 800f09a:	f040 808c 	bne.w	800f1b6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d101      	bne.n	800f0ac <HAL_SAI_Transmit_DMA+0x40>
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	e085      	b.n	800f1b8 <HAL_SAI_Transmit_DMA+0x14c>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	88fa      	ldrh	r2, [r7, #6]
 800f0be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	88fa      	ldrh	r2, [r7, #6]
 800f0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2212      	movs	r2, #18
 800f0d6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0de:	4a38      	ldr	r2, [pc, #224]	@ (800f1c0 <HAL_SAI_Transmit_DMA+0x154>)
 800f0e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0e6:	4a37      	ldr	r2, [pc, #220]	@ (800f1c4 <HAL_SAI_Transmit_DMA+0x158>)
 800f0e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0ee:	4a36      	ldr	r2, [pc, #216]	@ (800f1c8 <HAL_SAI_Transmit_DMA+0x15c>)
 800f0f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f102:	4619      	mov	r1, r3
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	331c      	adds	r3, #28
 800f10a:	461a      	mov	r2, r3
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f112:	f7fc f90f 	bl	800b334 <HAL_DMA_Start_IT>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d005      	beq.n	800f128 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800f124:	2301      	movs	r3, #1
 800f126:	e047      	b.n	800f1b8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f128:	2100      	movs	r1, #0
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f000 f85c 	bl	800f1e8 <SAI_InterruptFlag>
 800f130:	4601      	mov	r1, r0
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	691a      	ldr	r2, [r3, #16]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	430a      	orrs	r2, r1
 800f13e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f14e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f150:	e015      	b.n	800f17e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f152:	f7fb fad7 	bl	800a704 <HAL_GetTick>
 800f156:	4602      	mov	r2, r0
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f160:	d90d      	bls.n	800f17e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f168:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f17a:	2303      	movs	r3, #3
 800f17c:	e01c      	b.n	800f1b8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0e2      	beq.n	800f152 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f196:	2b00      	cmp	r3, #0
 800f198:	d107      	bne.n	800f1aa <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f1a8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e000      	b.n	800f1b8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800f1b6:	2302      	movs	r3, #2
  }
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	0800f325 	.word	0x0800f325
 800f1c4:	0800f2c5 	.word	0x0800f2c5
 800f1c8:	0800f341 	.word	0x0800f341

0800f1cc <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f1da:	b2db      	uxtb	r3, r3
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d103      	bne.n	800f204 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f043 0308 	orr.w	r3, r3, #8
 800f202:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f208:	2b08      	cmp	r3, #8
 800f20a:	d10b      	bne.n	800f224 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f210:	2b03      	cmp	r3, #3
 800f212:	d003      	beq.n	800f21c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d103      	bne.n	800f224 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f043 0310 	orr.w	r3, r3, #16
 800f222:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	2b03      	cmp	r3, #3
 800f22a:	d003      	beq.n	800f234 <SAI_InterruptFlag+0x4c>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	2b02      	cmp	r3, #2
 800f232:	d104      	bne.n	800f23e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f23a:	60fb      	str	r3, [r7, #12]
 800f23c:	e003      	b.n	800f246 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f043 0304 	orr.w	r3, r3, #4
 800f244:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f246:	68fb      	ldr	r3, [r7, #12]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3714      	adds	r7, #20
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f254:	b480      	push	{r7}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800f25c:	4b17      	ldr	r3, [pc, #92]	@ (800f2bc <SAI_Disable+0x68>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a17      	ldr	r2, [pc, #92]	@ (800f2c0 <SAI_Disable+0x6c>)
 800f262:	fba2 2303 	umull	r2, r3, r2, r3
 800f266:	0b1b      	lsrs	r3, r3, #12
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f26c:	2300      	movs	r3, #0
 800f26e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f27e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	1e5a      	subs	r2, r3, #1
 800f284:	60fa      	str	r2, [r7, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10a      	bne.n	800f2a0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f290:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	72fb      	strb	r3, [r7, #11]
      break;
 800f29e:	e006      	b.n	800f2ae <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1e8      	bne.n	800f280 <SAI_Disable+0x2c>

  return status;
 800f2ae:	7afb      	ldrb	r3, [r7, #11]
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr
 800f2bc:	20000054 	.word	0x20000054
 800f2c0:	95cbec1b 	.word	0x95cbec1b

0800f2c4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2d0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	69db      	ldr	r3, [r3, #28]
 800f2d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2da:	d01c      	beq.n	800f316 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f2f2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f7ff ff76 	bl	800f1e8 <SAI_InterruptFlag>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	43d9      	mvns	r1, r3
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	691a      	ldr	r2, [r3, #16]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	400a      	ands	r2, r1
 800f30c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2201      	movs	r2, #1
 800f312:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7f7 f816 	bl	8006348 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f31c:	bf00      	nop
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f330:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f7f7 f812 	bl	800635c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f338:	bf00      	nop
 800f33a:	3710      	adds	r7, #16
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f34c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f354:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f364:	2b01      	cmp	r3, #1
 800f366:	d004      	beq.n	800f372 <SAI_DMAError+0x32>
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d112      	bne.n	800f398 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f380:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f7ff ff66 	bl	800f254 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2200      	movs	r2, #0
 800f394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f7f6 ffe9 	bl	8006370 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f39e:	bf00      	nop
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e022      	b.n	800f3fe <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d105      	bne.n	800f3d0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7f8 ffe0 	bl	8008390 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2203      	movs	r2, #3
 800f3d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 f815 	bl	800f408 <HAL_SD_InitCard>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e00a      	b.n	800f3fe <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f408:	b5b0      	push	{r4, r5, r7, lr}
 800f40a:	b08e      	sub	sp, #56	@ 0x38
 800f40c:	af04      	add	r7, sp, #16
 800f40e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f410:	2300      	movs	r3, #0
 800f412:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f414:	2300      	movs	r3, #0
 800f416:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f418:	2300      	movs	r3, #0
 800f41a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f41c:	2300      	movs	r3, #0
 800f41e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f420:	2300      	movs	r3, #0
 800f422:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f424:	2376      	movs	r3, #118	@ 0x76
 800f426:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681d      	ldr	r5, [r3, #0]
 800f42c:	466c      	mov	r4, sp
 800f42e:	f107 0314 	add.w	r3, r7, #20
 800f432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f43a:	f107 0308 	add.w	r3, r7, #8
 800f43e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f440:	4628      	mov	r0, r5
 800f442:	f002 f99d 	bl	8011780 <SDMMC_Init>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800f44c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f450:	2b00      	cmp	r3, #0
 800f452:	d001      	beq.n	800f458 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f454:	2301      	movs	r3, #1
 800f456:	e059      	b.n	800f50c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	685a      	ldr	r2, [r3, #4]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f466:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f002 f9d1 	bl	8011814 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	685a      	ldr	r2, [r3, #4]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f480:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800f482:	2002      	movs	r0, #2
 800f484:	f7fb f94a 	bl	800a71c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 ff59 	bl	8010340 <SD_PowerON>
 800f48e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00b      	beq.n	800f4ae <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2201      	movs	r2, #1
 800f49a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	431a      	orrs	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e02e      	b.n	800f50c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fe78 	bl	80101a4 <SD_InitCard>
 800f4b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4b6:	6a3b      	ldr	r3, [r7, #32]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4c8:	6a3b      	ldr	r3, [r7, #32]
 800f4ca:	431a      	orrs	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e01b      	b.n	800f50c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f002 fa2b 	bl	8011938 <SDMMC_CmdBlockLength>
 800f4e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4e4:	6a3b      	ldr	r3, [r7, #32]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00f      	beq.n	800f50a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4a09      	ldr	r2, [pc, #36]	@ (800f514 <HAL_SD_InitCard+0x10c>)
 800f4f0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	431a      	orrs	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2201      	movs	r2, #1
 800f502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f506:	2301      	movs	r3, #1
 800f508:	e000      	b.n	800f50c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800f50a:	2300      	movs	r3, #0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3728      	adds	r7, #40	@ 0x28
 800f510:	46bd      	mov	sp, r7
 800f512:	bdb0      	pop	{r4, r5, r7, pc}
 800f514:	004005ff 	.word	0x004005ff

0800f518 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08c      	sub	sp, #48	@ 0x30
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
 800f524:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d107      	bne.n	800f540 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f534:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f53c:	2301      	movs	r3, #1
 800f53e:	e0c3      	b.n	800f6c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f546:	b2db      	uxtb	r3, r3
 800f548:	2b01      	cmp	r3, #1
 800f54a:	f040 80bc 	bne.w	800f6c6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	441a      	add	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f55e:	429a      	cmp	r2, r3
 800f560:	d907      	bls.n	800f572 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f566:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800f56e:	2301      	movs	r3, #1
 800f570:	e0aa      	b.n	800f6c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2203      	movs	r2, #3
 800f576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2200      	movs	r2, #0
 800f580:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800f590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f596:	4a4e      	ldr	r2, [pc, #312]	@ (800f6d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800f598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f59e:	4a4d      	ldr	r2, [pc, #308]	@ (800f6d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800f5a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5c2:	689a      	ldr	r2, [r3, #8]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	430a      	orrs	r2, r1
 800f5cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	3380      	adds	r3, #128	@ 0x80
 800f5d8:	4619      	mov	r1, r3
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	025b      	lsls	r3, r3, #9
 800f5e0:	089b      	lsrs	r3, r3, #2
 800f5e2:	f7fb fea7 	bl	800b334 <HAL_DMA_Start_IT>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d017      	beq.n	800f61c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800f5fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a35      	ldr	r2, [pc, #212]	@ (800f6d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f602:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f608:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2201      	movs	r2, #1
 800f614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f618:	2301      	movs	r3, #1
 800f61a:	e055      	b.n	800f6c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f042 0208 	orr.w	r2, r2, #8
 800f62a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f630:	2b01      	cmp	r3, #1
 800f632:	d002      	beq.n	800f63a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800f634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f636:	025b      	lsls	r3, r3, #9
 800f638:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f63a:	f04f 33ff 	mov.w	r3, #4294967295
 800f63e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	025b      	lsls	r3, r3, #9
 800f644:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f646:	2390      	movs	r3, #144	@ 0x90
 800f648:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f64a:	2302      	movs	r3, #2
 800f64c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f64e:	2300      	movs	r3, #0
 800f650:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f652:	2301      	movs	r3, #1
 800f654:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f107 0210 	add.w	r2, r7, #16
 800f65e:	4611      	mov	r1, r2
 800f660:	4618      	mov	r0, r3
 800f662:	f002 f93d 	bl	80118e0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d90a      	bls.n	800f682 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2282      	movs	r2, #130	@ 0x82
 800f670:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f678:	4618      	mov	r0, r3
 800f67a:	f002 f9a1 	bl	80119c0 <SDMMC_CmdReadMultiBlock>
 800f67e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f680:	e009      	b.n	800f696 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2281      	movs	r2, #129	@ 0x81
 800f686:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f68e:	4618      	mov	r0, r3
 800f690:	f002 f974 	bl	801197c <SDMMC_CmdReadSingleBlock>
 800f694:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d012      	beq.n	800f6c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a0d      	ldr	r2, [pc, #52]	@ (800f6d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f6a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6aa:	431a      	orrs	r2, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e002      	b.n	800f6c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e000      	b.n	800f6c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f6c6:	2302      	movs	r3, #2
  }
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3730      	adds	r7, #48	@ 0x30
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	0800ffb3 	.word	0x0800ffb3
 800f6d4:	08010025 	.word	0x08010025
 800f6d8:	004005ff 	.word	0x004005ff

0800f6dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08c      	sub	sp, #48	@ 0x30
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
 800f6e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d107      	bne.n	800f704 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f700:	2301      	movs	r3, #1
 800f702:	e0c6      	b.n	800f892 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	f040 80bf 	bne.w	800f890 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2200      	movs	r2, #0
 800f716:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	441a      	add	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f722:	429a      	cmp	r2, r3
 800f724:	d907      	bls.n	800f736 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f72a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800f732:	2301      	movs	r3, #1
 800f734:	e0ad      	b.n	800f892 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2203      	movs	r2, #3
 800f73a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2200      	movs	r2, #0
 800f744:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f042 021a 	orr.w	r2, r2, #26
 800f754:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f75a:	4a50      	ldr	r2, [pc, #320]	@ (800f89c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f75c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f762:	4a4f      	ldr	r2, [pc, #316]	@ (800f8a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f764:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f76a:	2200      	movs	r2, #0
 800f76c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f772:	2b01      	cmp	r3, #1
 800f774:	d002      	beq.n	800f77c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f778:	025b      	lsls	r3, r3, #9
 800f77a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d90a      	bls.n	800f798 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	22a0      	movs	r2, #160	@ 0xa0
 800f786:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f78e:	4618      	mov	r0, r3
 800f790:	f002 f95a 	bl	8011a48 <SDMMC_CmdWriteMultiBlock>
 800f794:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f796:	e009      	b.n	800f7ac <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2290      	movs	r2, #144	@ 0x90
 800f79c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f002 f92d 	bl	8011a04 <SDMMC_CmdWriteSingleBlock>
 800f7aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d012      	beq.n	800f7d8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	4a3b      	ldr	r2, [pc, #236]	@ (800f8a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f7b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7c0:	431a      	orrs	r2, r3
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e05c      	b.n	800f892 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f042 0208 	orr.w	r2, r2, #8
 800f7e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7ec:	2240      	movs	r2, #64	@ 0x40
 800f7ee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f800:	689a      	ldr	r2, [r3, #8]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	430a      	orrs	r2, r1
 800f80a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f810:	68b9      	ldr	r1, [r7, #8]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	3380      	adds	r3, #128	@ 0x80
 800f818:	461a      	mov	r2, r3
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	025b      	lsls	r3, r3, #9
 800f81e:	089b      	lsrs	r3, r3, #2
 800f820:	f7fb fd88 	bl	800b334 <HAL_DMA_Start_IT>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d01a      	beq.n	800f860 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f022 021a 	bic.w	r2, r2, #26
 800f838:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a19      	ldr	r2, [pc, #100]	@ (800f8a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f840:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f846:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2201      	movs	r2, #1
 800f852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2200      	movs	r2, #0
 800f85a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800f85c:	2301      	movs	r3, #1
 800f85e:	e018      	b.n	800f892 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f860:	f04f 33ff 	mov.w	r3, #4294967295
 800f864:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	025b      	lsls	r3, r3, #9
 800f86a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f86c:	2390      	movs	r3, #144	@ 0x90
 800f86e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f870:	2300      	movs	r3, #0
 800f872:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f874:	2300      	movs	r3, #0
 800f876:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f878:	2301      	movs	r3, #1
 800f87a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f107 0210 	add.w	r2, r7, #16
 800f884:	4611      	mov	r1, r2
 800f886:	4618      	mov	r0, r3
 800f888:	f002 f82a 	bl	80118e0 <SDMMC_ConfigData>

      return HAL_OK;
 800f88c:	2300      	movs	r3, #0
 800f88e:	e000      	b.n	800f892 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f890:	2302      	movs	r3, #2
  }
}
 800f892:	4618      	mov	r0, r3
 800f894:	3730      	adds	r7, #48	@ 0x30
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	0800ff89 	.word	0x0800ff89
 800f8a0:	08010025 	.word	0x08010025
 800f8a4:	004005ff 	.word	0x004005ff

0800f8a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d008      	beq.n	800f8d6 <HAL_SD_IRQHandler+0x2e>
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f003 0308 	and.w	r3, r3, #8
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 fdec 	bl	80104ac <SD_Read_IT>
 800f8d4:	e15a      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 808d 	beq.w	800fa00 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f8ee:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	4b9a      	ldr	r3, [pc, #616]	@ (800fb64 <HAL_SD_IRQHandler+0x2bc>)
 800f8fc:	400b      	ands	r3, r1
 800f8fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f022 0201 	bic.w	r2, r2, #1
 800f90e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f003 0308 	and.w	r3, r3, #8
 800f916:	2b00      	cmp	r3, #0
 800f918:	d039      	beq.n	800f98e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f003 0302 	and.w	r3, r3, #2
 800f920:	2b00      	cmp	r3, #0
 800f922:	d104      	bne.n	800f92e <HAL_SD_IRQHandler+0x86>
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f003 0320 	and.w	r3, r3, #32
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d011      	beq.n	800f952 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	4618      	mov	r0, r3
 800f934:	f002 f8aa 	bl	8011a8c <SDMMC_CmdStopTransfer>
 800f938:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d008      	beq.n	800f952 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	431a      	orrs	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f921 	bl	800fb94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f240 523a 	movw	r2, #1338	@ 0x53a
 800f95a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	d104      	bne.n	800f97e <HAL_SD_IRQHandler+0xd6>
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f003 0302 	and.w	r3, r3, #2
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d003      	beq.n	800f986 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f002 fcc8 	bl	8012314 <HAL_SD_RxCpltCallback>
 800f984:	e102      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f002 fcba 	bl	8012300 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f98c:	e0fe      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 80f9 	beq.w	800fb8c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f003 0320 	and.w	r3, r3, #32
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d011      	beq.n	800f9c8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f002 f86f 	bl	8011a8c <SDMMC_CmdStopTransfer>
 800f9ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d008      	beq.n	800f9c8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	431a      	orrs	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 f8e6 	bl	800fb94 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f003 0301 	and.w	r3, r3, #1
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f040 80dc 	bne.w	800fb8c <HAL_SD_IRQHandler+0x2e4>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f003 0302 	and.w	r3, r3, #2
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f040 80d6 	bne.w	800fb8c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f022 0208 	bic.w	r2, r2, #8
 800f9ee:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f002 fc81 	bl	8012300 <HAL_SD_TxCpltCallback>
}
 800f9fe:	e0c5      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d008      	beq.n	800fa20 <HAL_SD_IRQHandler+0x178>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f003 0308 	and.w	r3, r3, #8
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d003      	beq.n	800fa20 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 fd98 	bl	801054e <SD_Write_IT>
 800fa1e:	e0b5      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa26:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 80ae 	beq.w	800fb8c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa36:	f003 0302 	and.w	r3, r3, #2
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d005      	beq.n	800fa4a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa42:	f043 0202 	orr.w	r2, r3, #2
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa50:	f003 0308 	and.w	r3, r3, #8
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d005      	beq.n	800fa64 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa5c:	f043 0208 	orr.w	r2, r3, #8
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa6a:	f003 0320 	and.w	r3, r3, #32
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d005      	beq.n	800fa7e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa76:	f043 0220 	orr.w	r2, r3, #32
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa84:	f003 0310 	and.w	r3, r3, #16
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d005      	beq.n	800fa98 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa90:	f043 0210 	orr.w	r2, r3, #16
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800faa0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800fab0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4618      	mov	r0, r3
 800fab8:	f001 ffe8 	bl	8011a8c <SDMMC_CmdStopTransfer>
 800fabc:	4602      	mov	r2, r0
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac2:	431a      	orrs	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f003 0308 	and.w	r3, r3, #8
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00a      	beq.n	800fae8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f857 	bl	800fb94 <HAL_SD_ErrorCallback>
}
 800fae6:	e051      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d04c      	beq.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f003 0310 	and.w	r3, r3, #16
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d104      	bne.n	800fb06 <HAL_SD_IRQHandler+0x25e>
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f003 0320 	and.w	r3, r3, #32
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d011      	beq.n	800fb2a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb0a:	4a17      	ldr	r2, [pc, #92]	@ (800fb68 <HAL_SD_IRQHandler+0x2c0>)
 800fb0c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fb fc6e 	bl	800b3f4 <HAL_DMA_Abort_IT>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d036      	beq.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 fad0 	bl	80100c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fb28:	e030      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f003 0301 	and.w	r3, r3, #1
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d104      	bne.n	800fb3e <HAL_SD_IRQHandler+0x296>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f003 0302 	and.w	r3, r3, #2
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d018      	beq.n	800fb70 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb42:	4a0a      	ldr	r2, [pc, #40]	@ (800fb6c <HAL_SD_IRQHandler+0x2c4>)
 800fb44:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fb fc52 	bl	800b3f4 <HAL_DMA_Abort_IT>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d01a      	beq.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f000 faeb 	bl	8010136 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fb60:	e014      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
 800fb62:	bf00      	nop
 800fb64:	ffff3ec5 	.word	0xffff3ec5
 800fb68:	080100c9 	.word	0x080100c9
 800fb6c:	08010137 	.word	0x08010137
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2201      	movs	r2, #1
 800fb7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f002 fbb1 	bl	80122ec <HAL_SD_AbortCallback>
}
 800fb8a:	e7ff      	b.n	800fb8c <HAL_SD_IRQHandler+0x2e4>
 800fb8c:	bf00      	nop
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800fb9c:	bf00      	nop
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbb6:	0f9b      	lsrs	r3, r3, #30
 800fbb8:	b2da      	uxtb	r2, r3
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbc2:	0e9b      	lsrs	r3, r3, #26
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	f003 030f 	and.w	r3, r3, #15
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbd4:	0e1b      	lsrs	r3, r3, #24
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	f003 0303 	and.w	r3, r3, #3
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbe6:	0c1b      	lsrs	r3, r3, #16
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbf2:	0a1b      	lsrs	r3, r3, #8
 800fbf4:	b2da      	uxtb	r2, r3
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbfe:	b2da      	uxtb	r2, r3
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc08:	0d1b      	lsrs	r3, r3, #20
 800fc0a:	b29a      	uxth	r2, r3
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc14:	0c1b      	lsrs	r3, r3, #16
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	f003 030f 	and.w	r3, r3, #15
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc26:	0bdb      	lsrs	r3, r3, #15
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	f003 0301 	and.w	r3, r3, #1
 800fc2e:	b2da      	uxtb	r2, r3
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc38:	0b9b      	lsrs	r3, r3, #14
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 0301 	and.w	r3, r3, #1
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc4a:	0b5b      	lsrs	r3, r3, #13
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	f003 0301 	and.w	r3, r3, #1
 800fc52:	b2da      	uxtb	r2, r3
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc5c:	0b1b      	lsrs	r3, r3, #12
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	f003 0301 	and.w	r3, r3, #1
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d163      	bne.n	800fd40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc7c:	009a      	lsls	r2, r3, #2
 800fc7e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800fc82:	4013      	ands	r3, r2
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800fc88:	0f92      	lsrs	r2, r2, #30
 800fc8a:	431a      	orrs	r2, r3
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc94:	0edb      	lsrs	r3, r3, #27
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	f003 0307 	and.w	r3, r3, #7
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fca6:	0e1b      	lsrs	r3, r3, #24
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	f003 0307 	and.w	r3, r3, #7
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcb8:	0d5b      	lsrs	r3, r3, #21
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	f003 0307 	and.w	r3, r3, #7
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcca:	0c9b      	lsrs	r3, r3, #18
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	f003 0307 	and.w	r3, r3, #7
 800fcd2:	b2da      	uxtb	r2, r3
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcdc:	0bdb      	lsrs	r3, r3, #15
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	f003 0307 	and.w	r3, r3, #7
 800fce4:	b2da      	uxtb	r2, r3
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	691b      	ldr	r3, [r3, #16]
 800fcee:	1c5a      	adds	r2, r3, #1
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	7e1b      	ldrb	r3, [r3, #24]
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	f003 0307 	and.w	r3, r3, #7
 800fcfe:	3302      	adds	r3, #2
 800fd00:	2201      	movs	r2, #1
 800fd02:	fa02 f303 	lsl.w	r3, r2, r3
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800fd0a:	fb03 f202 	mul.w	r2, r3, r2
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	7a1b      	ldrb	r3, [r3, #8]
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	f003 030f 	and.w	r3, r3, #15
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	409a      	lsls	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800fd2c:	0a52      	lsrs	r2, r2, #9
 800fd2e:	fb03 f202 	mul.w	r2, r3, r2
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd3c:	661a      	str	r2, [r3, #96]	@ 0x60
 800fd3e:	e031      	b.n	800fda4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d11d      	bne.n	800fd84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd4c:	041b      	lsls	r3, r3, #16
 800fd4e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd56:	0c1b      	lsrs	r3, r3, #16
 800fd58:	431a      	orrs	r2, r3
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	691b      	ldr	r3, [r3, #16]
 800fd62:	3301      	adds	r3, #1
 800fd64:	029a      	lsls	r2, r3, #10
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd78:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	661a      	str	r2, [r3, #96]	@ 0x60
 800fd82:	e00f      	b.n	800fda4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4a58      	ldr	r2, [pc, #352]	@ (800feec <HAL_SD_GetCardCSD+0x344>)
 800fd8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800fda0:	2301      	movs	r3, #1
 800fda2:	e09d      	b.n	800fee0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fda8:	0b9b      	lsrs	r3, r3, #14
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	f003 0301 	and.w	r3, r3, #1
 800fdb0:	b2da      	uxtb	r2, r3
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdba:	09db      	lsrs	r3, r3, #7
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fddc:	0fdb      	lsrs	r3, r3, #31
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fde8:	0f5b      	lsrs	r3, r3, #29
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	f003 0303 	and.w	r3, r3, #3
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdfa:	0e9b      	lsrs	r3, r3, #26
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	f003 0307 	and.w	r3, r3, #7
 800fe02:	b2da      	uxtb	r2, r3
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe0c:	0d9b      	lsrs	r3, r3, #22
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	f003 030f 	and.w	r3, r3, #15
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe1e:	0d5b      	lsrs	r3, r3, #21
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	f003 0301 	and.w	r3, r3, #1
 800fe26:	b2da      	uxtb	r2, r3
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe3a:	0c1b      	lsrs	r3, r3, #16
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	f003 0301 	and.w	r3, r3, #1
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe4e:	0bdb      	lsrs	r3, r3, #15
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	f003 0301 	and.w	r3, r3, #1
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe62:	0b9b      	lsrs	r3, r3, #14
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	f003 0301 	and.w	r3, r3, #1
 800fe6a:	b2da      	uxtb	r2, r3
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe76:	0b5b      	lsrs	r3, r3, #13
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe8a:	0b1b      	lsrs	r3, r3, #12
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	f003 0301 	and.w	r3, r3, #1
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe9e:	0a9b      	lsrs	r3, r3, #10
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	f003 0303 	and.w	r3, r3, #3
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feb2:	0a1b      	lsrs	r3, r3, #8
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	f003 0303 	and.w	r3, r3, #3
 800feba:	b2da      	uxtb	r2, r3
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fec6:	085b      	lsrs	r3, r3, #1
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fece:	b2da      	uxtb	r2, r3
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	2201      	movs	r2, #1
 800feda:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	004005ff 	.word	0x004005ff

0800fef0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b086      	sub	sp, #24
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ff54:	f107 030c 	add.w	r3, r7, #12
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fa7e 	bl	801045c <SD_SendStatus>
 800ff60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d005      	beq.n	800ff74 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	431a      	orrs	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	0a5b      	lsrs	r3, r3, #9
 800ff78:	f003 030f 	and.w	r3, r3, #15
 800ff7c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ff7e:	693b      	ldr	r3, [r7, #16]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3718      	adds	r7, #24
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff94:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ffa4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ffa6:	bf00      	nop
 800ffa8:	3714      	adds	r7, #20
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b084      	sub	sp, #16
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffbe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffc4:	2b82      	cmp	r3, #130	@ 0x82
 800ffc6:	d111      	bne.n	800ffec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f001 fd5d 	bl	8011a8c <SDMMC_CmdStopTransfer>
 800ffd2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d008      	beq.n	800ffec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	431a      	orrs	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f7ff fdd4 	bl	800fb94 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f022 0208 	bic.w	r2, r2, #8
 800fffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f240 523a 	movw	r2, #1338	@ 0x53a
 8010004:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2201      	movs	r2, #1
 801000a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2200      	movs	r2, #0
 8010012:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f002 f97d 	bl	8012314 <HAL_SD_RxCpltCallback>
#endif
}
 801001a:	bf00      	nop
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
	...

08010024 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010030:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f7fb fb8a 	bl	800b74c <HAL_DMA_GetError>
 8010038:	4603      	mov	r3, r0
 801003a:	2b02      	cmp	r3, #2
 801003c:	d03e      	beq.n	80100bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010044:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801004a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801004c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	2b01      	cmp	r3, #1
 8010052:	d002      	beq.n	801005a <SD_DMAError+0x36>
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2b01      	cmp	r3, #1
 8010058:	d12d      	bne.n	80100b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4a19      	ldr	r2, [pc, #100]	@ (80100c4 <SD_DMAError+0xa0>)
 8010060:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8010070:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010076:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 801007e:	6978      	ldr	r0, [r7, #20]
 8010080:	f7ff ff62 	bl	800ff48 <HAL_SD_GetCardState>
 8010084:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2b06      	cmp	r3, #6
 801008a:	d002      	beq.n	8010092 <SD_DMAError+0x6e>
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	2b05      	cmp	r3, #5
 8010090:	d10a      	bne.n	80100a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4618      	mov	r0, r3
 8010098:	f001 fcf8 	bl	8011a8c <SDMMC_CmdStopTransfer>
 801009c:	4602      	mov	r2, r0
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100a2:	431a      	orrs	r2, r3
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	2200      	movs	r2, #0
 80100b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80100b6:	6978      	ldr	r0, [r7, #20]
 80100b8:	f7ff fd6c 	bl	800fb94 <HAL_SD_ErrorCallback>
#endif
  }
}
 80100bc:	bf00      	nop
 80100be:	3718      	adds	r7, #24
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	004005ff 	.word	0x004005ff

080100c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f240 523a 	movw	r2, #1338	@ 0x53a
 80100de:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f7ff ff31 	bl	800ff48 <HAL_SD_GetCardState>
 80100e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2201      	movs	r2, #1
 80100ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2200      	movs	r2, #0
 80100f4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	2b06      	cmp	r3, #6
 80100fa:	d002      	beq.n	8010102 <SD_DMATxAbort+0x3a>
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	2b05      	cmp	r3, #5
 8010100:	d10a      	bne.n	8010118 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4618      	mov	r0, r3
 8010108:	f001 fcc0 	bl	8011a8c <SDMMC_CmdStopTransfer>
 801010c:	4602      	mov	r2, r0
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010112:	431a      	orrs	r2, r3
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801011c:	2b00      	cmp	r3, #0
 801011e:	d103      	bne.n	8010128 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f002 f8e3 	bl	80122ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8010126:	e002      	b.n	801012e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f7ff fd33 	bl	800fb94 <HAL_SD_ErrorCallback>
}
 801012e:	bf00      	nop
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b084      	sub	sp, #16
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010142:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f240 523a 	movw	r2, #1338	@ 0x53a
 801014c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f7ff fefa 	bl	800ff48 <HAL_SD_GetCardState>
 8010154:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2201      	movs	r2, #1
 801015a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2200      	movs	r2, #0
 8010162:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2b06      	cmp	r3, #6
 8010168:	d002      	beq.n	8010170 <SD_DMARxAbort+0x3a>
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2b05      	cmp	r3, #5
 801016e:	d10a      	bne.n	8010186 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4618      	mov	r0, r3
 8010176:	f001 fc89 	bl	8011a8c <SDMMC_CmdStopTransfer>
 801017a:	4602      	mov	r2, r0
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010180:	431a      	orrs	r2, r3
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801018a:	2b00      	cmp	r3, #0
 801018c:	d103      	bne.n	8010196 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f002 f8ac 	bl	80122ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8010194:	e002      	b.n	801019c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f7ff fcfc 	bl	800fb94 <HAL_SD_ErrorCallback>
}
 801019c:	bf00      	nop
 801019e:	3710      	adds	r7, #16
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80101a4:	b5b0      	push	{r4, r5, r7, lr}
 80101a6:	b094      	sub	sp, #80	@ 0x50
 80101a8:	af04      	add	r7, sp, #16
 80101aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80101ac:	2301      	movs	r3, #1
 80101ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f001 fb3b 	bl	8011830 <SDMMC_GetPowerState>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d102      	bne.n	80101c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80101c0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80101c4:	e0b8      	b.n	8010338 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101ca:	2b03      	cmp	r3, #3
 80101cc:	d02f      	beq.n	801022e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f001 fd22 	bl	8011c1c <SDMMC_CmdSendCID>
 80101d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80101da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80101e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101e2:	e0a9      	b.n	8010338 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2100      	movs	r1, #0
 80101ea:	4618      	mov	r0, r3
 80101ec:	f001 fb65 	bl	80118ba <SDMMC_GetResponse>
 80101f0:	4602      	mov	r2, r0
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2104      	movs	r1, #4
 80101fc:	4618      	mov	r0, r3
 80101fe:	f001 fb5c 	bl	80118ba <SDMMC_GetResponse>
 8010202:	4602      	mov	r2, r0
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2108      	movs	r1, #8
 801020e:	4618      	mov	r0, r3
 8010210:	f001 fb53 	bl	80118ba <SDMMC_GetResponse>
 8010214:	4602      	mov	r2, r0
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	210c      	movs	r1, #12
 8010220:	4618      	mov	r0, r3
 8010222:	f001 fb4a 	bl	80118ba <SDMMC_GetResponse>
 8010226:	4602      	mov	r2, r0
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010232:	2b03      	cmp	r3, #3
 8010234:	d00d      	beq.n	8010252 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f107 020e 	add.w	r2, r7, #14
 801023e:	4611      	mov	r1, r2
 8010240:	4618      	mov	r0, r3
 8010242:	f001 fd28 	bl	8011c96 <SDMMC_CmdSetRelAdd>
 8010246:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801024a:	2b00      	cmp	r3, #0
 801024c:	d001      	beq.n	8010252 <SD_InitCard+0xae>
    {
      return errorstate;
 801024e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010250:	e072      	b.n	8010338 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010256:	2b03      	cmp	r3, #3
 8010258:	d036      	beq.n	80102c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801025a:	89fb      	ldrh	r3, [r7, #14]
 801025c:	461a      	mov	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801026a:	041b      	lsls	r3, r3, #16
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f001 fcf2 	bl	8011c58 <SDMMC_CmdSendCSD>
 8010274:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <SD_InitCard+0xdc>
    {
      return errorstate;
 801027c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801027e:	e05b      	b.n	8010338 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2100      	movs	r1, #0
 8010286:	4618      	mov	r0, r3
 8010288:	f001 fb17 	bl	80118ba <SDMMC_GetResponse>
 801028c:	4602      	mov	r2, r0
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2104      	movs	r1, #4
 8010298:	4618      	mov	r0, r3
 801029a:	f001 fb0e 	bl	80118ba <SDMMC_GetResponse>
 801029e:	4602      	mov	r2, r0
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2108      	movs	r1, #8
 80102aa:	4618      	mov	r0, r3
 80102ac:	f001 fb05 	bl	80118ba <SDMMC_GetResponse>
 80102b0:	4602      	mov	r2, r0
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	210c      	movs	r1, #12
 80102bc:	4618      	mov	r0, r3
 80102be:	f001 fafc 	bl	80118ba <SDMMC_GetResponse>
 80102c2:	4602      	mov	r2, r0
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2104      	movs	r1, #4
 80102ce:	4618      	mov	r0, r3
 80102d0:	f001 faf3 	bl	80118ba <SDMMC_GetResponse>
 80102d4:	4603      	mov	r3, r0
 80102d6:	0d1a      	lsrs	r2, r3, #20
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80102dc:	f107 0310 	add.w	r3, r7, #16
 80102e0:	4619      	mov	r1, r3
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7ff fc60 	bl	800fba8 <HAL_SD_GetCardCSD>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d002      	beq.n	80102f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80102ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80102f2:	e021      	b.n	8010338 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6819      	ldr	r1, [r3, #0]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102fc:	041b      	lsls	r3, r3, #16
 80102fe:	2200      	movs	r2, #0
 8010300:	461c      	mov	r4, r3
 8010302:	4615      	mov	r5, r2
 8010304:	4622      	mov	r2, r4
 8010306:	462b      	mov	r3, r5
 8010308:	4608      	mov	r0, r1
 801030a:	f001 fbe1 	bl	8011ad0 <SDMMC_CmdSelDesel>
 801030e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8010310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <SD_InitCard+0x176>
  {
    return errorstate;
 8010316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010318:	e00e      	b.n	8010338 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681d      	ldr	r5, [r3, #0]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	466c      	mov	r4, sp
 8010322:	f103 0210 	add.w	r2, r3, #16
 8010326:	ca07      	ldmia	r2, {r0, r1, r2}
 8010328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801032c:	3304      	adds	r3, #4
 801032e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010330:	4628      	mov	r0, r5
 8010332:	f001 fa25 	bl	8011780 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3740      	adds	r7, #64	@ 0x40
 801033c:	46bd      	mov	sp, r7
 801033e:	bdb0      	pop	{r4, r5, r7, pc}

08010340 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010348:	2300      	movs	r3, #0
 801034a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 801034c:	2300      	movs	r3, #0
 801034e:	617b      	str	r3, [r7, #20]
 8010350:	2300      	movs	r3, #0
 8010352:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4618      	mov	r0, r3
 801035a:	f001 fbdc 	bl	8011b16 <SDMMC_CmdGoIdleState>
 801035e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d001      	beq.n	801036a <SD_PowerON+0x2a>
  {
    return errorstate;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	e072      	b.n	8010450 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	4618      	mov	r0, r3
 8010370:	f001 fbef 	bl	8011b52 <SDMMC_CmdOperCond>
 8010374:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00d      	beq.n	8010398 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4618      	mov	r0, r3
 8010388:	f001 fbc5 	bl	8011b16 <SDMMC_CmdGoIdleState>
 801038c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <SD_PowerON+0x5e>
    {
      return errorstate;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	e05b      	b.n	8010450 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d137      	bne.n	8010416 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2100      	movs	r1, #0
 80103ac:	4618      	mov	r0, r3
 80103ae:	f001 fbef 	bl	8011b90 <SDMMC_CmdAppCommand>
 80103b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d02d      	beq.n	8010416 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80103ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80103be:	e047      	b.n	8010450 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2100      	movs	r1, #0
 80103c6:	4618      	mov	r0, r3
 80103c8:	f001 fbe2 	bl	8011b90 <SDMMC_CmdAppCommand>
 80103cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d001      	beq.n	80103d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	e03b      	b.n	8010450 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	491e      	ldr	r1, [pc, #120]	@ (8010458 <SD_PowerON+0x118>)
 80103de:	4618      	mov	r0, r3
 80103e0:	f001 fbf8 	bl	8011bd4 <SDMMC_CmdAppOperCommand>
 80103e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d002      	beq.n	80103f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80103ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80103f0:	e02e      	b.n	8010450 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2100      	movs	r1, #0
 80103f8:	4618      	mov	r0, r3
 80103fa:	f001 fa5e 	bl	80118ba <SDMMC_GetResponse>
 80103fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	0fdb      	lsrs	r3, r3, #31
 8010404:	2b01      	cmp	r3, #1
 8010406:	d101      	bne.n	801040c <SD_PowerON+0xcc>
 8010408:	2301      	movs	r3, #1
 801040a:	e000      	b.n	801040e <SD_PowerON+0xce>
 801040c:	2300      	movs	r3, #0
 801040e:	613b      	str	r3, [r7, #16]

    count++;
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	3301      	adds	r3, #1
 8010414:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801041c:	4293      	cmp	r3, r2
 801041e:	d802      	bhi.n	8010426 <SD_PowerON+0xe6>
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d0cc      	beq.n	80103c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801042c:	4293      	cmp	r3, r2
 801042e:	d902      	bls.n	8010436 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010430:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8010434:	e00c      	b.n	8010450 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801043c:	2b00      	cmp	r3, #0
 801043e:	d003      	beq.n	8010448 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2201      	movs	r2, #1
 8010444:	645a      	str	r2, [r3, #68]	@ 0x44
 8010446:	e002      	b.n	801044e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 801044e:	2300      	movs	r3, #0
}
 8010450:	4618      	mov	r0, r3
 8010452:	3718      	adds	r7, #24
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	c1100000 	.word	0xc1100000

0801045c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d102      	bne.n	8010472 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801046c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010470:	e018      	b.n	80104a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801047a:	041b      	lsls	r3, r3, #16
 801047c:	4619      	mov	r1, r3
 801047e:	4610      	mov	r0, r2
 8010480:	f001 fc2a 	bl	8011cd8 <SDMMC_CmdSendStatus>
 8010484:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d001      	beq.n	8010490 <SD_SendStatus+0x34>
  {
    return errorstate;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	e009      	b.n	80104a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2100      	movs	r1, #0
 8010496:	4618      	mov	r0, r3
 8010498:	f001 fa0f 	bl	80118ba <SDMMC_GetResponse>
 801049c:	4602      	mov	r2, r0
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80104a2:	2300      	movs	r3, #0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b086      	sub	sp, #24
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d03f      	beq.n	8010546 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80104c6:	2300      	movs	r3, #0
 80104c8:	617b      	str	r3, [r7, #20]
 80104ca:	e033      	b.n	8010534 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f001 f981 	bl	80117d8 <SDMMC_ReadFIFO>
 80104d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	3301      	adds	r3, #1
 80104e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	3b01      	subs	r3, #1
 80104ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	0a1b      	lsrs	r3, r3, #8
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	3301      	adds	r3, #1
 80104fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	3b01      	subs	r3, #1
 8010500:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	0c1b      	lsrs	r3, r3, #16
 8010506:	b2da      	uxtb	r2, r3
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	3301      	adds	r3, #1
 8010510:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	3b01      	subs	r3, #1
 8010516:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	0e1b      	lsrs	r3, r3, #24
 801051c:	b2da      	uxtb	r2, r3
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3301      	adds	r3, #1
 8010526:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	3b01      	subs	r3, #1
 801052c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	3301      	adds	r3, #1
 8010532:	617b      	str	r3, [r7, #20]
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	2b07      	cmp	r3, #7
 8010538:	d9c8      	bls.n	80104cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8010546:	bf00      	nop
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801054e:	b580      	push	{r7, lr}
 8010550:	b086      	sub	sp, #24
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6a1b      	ldr	r3, [r3, #32]
 801055a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010560:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d043      	beq.n	80105f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8010568:	2300      	movs	r3, #0
 801056a:	617b      	str	r3, [r7, #20]
 801056c:	e037      	b.n	80105de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	3301      	adds	r3, #1
 8010578:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	3b01      	subs	r3, #1
 801057e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	021a      	lsls	r2, r3, #8
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	4313      	orrs	r3, r2
 801058a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	3301      	adds	r3, #1
 8010590:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	3b01      	subs	r3, #1
 8010596:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	041a      	lsls	r2, r3, #16
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	3301      	adds	r3, #1
 80105a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	3b01      	subs	r3, #1
 80105ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	061a      	lsls	r2, r3, #24
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	3301      	adds	r3, #1
 80105c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	3b01      	subs	r3, #1
 80105c6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f107 0208 	add.w	r2, r7, #8
 80105d0:	4611      	mov	r1, r2
 80105d2:	4618      	mov	r0, r3
 80105d4:	f001 f90d 	bl	80117f2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	3301      	adds	r3, #1
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	2b07      	cmp	r3, #7
 80105e2:	d9c4      	bls.n	801056e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	68fa      	ldr	r2, [r7, #12]
 80105e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	693a      	ldr	r2, [r7, #16]
 80105ee:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80105f0:	bf00      	nop
 80105f2:	3718      	adds	r7, #24
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d101      	bne.n	801060c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8010608:	2301      	movs	r3, #1
 801060a:	e025      	b.n	8010658 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b00      	cmp	r3, #0
 8010616:	d106      	bne.n	8010626 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f7f8 f8c3 	bl	80087ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2202      	movs	r2, #2
 801062a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	3304      	adds	r3, #4
 8010636:	4619      	mov	r1, r3
 8010638:	4610      	mov	r0, r2
 801063a:	f000 ff9f 	bl	801157c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6818      	ldr	r0, [r3, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	461a      	mov	r2, r3
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	f000 fff3 	bl	8011634 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2201      	movs	r2, #1
 8010652:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010672:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8010674:	7dfb      	ldrb	r3, [r7, #23]
 8010676:	2b02      	cmp	r3, #2
 8010678:	d101      	bne.n	801067e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801067a:	2302      	movs	r3, #2
 801067c:	e021      	b.n	80106c2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801067e:	7dfb      	ldrb	r3, [r7, #23]
 8010680:	2b01      	cmp	r3, #1
 8010682:	d002      	beq.n	801068a <HAL_SDRAM_SendCommand+0x2a>
 8010684:	7dfb      	ldrb	r3, [r7, #23]
 8010686:	2b05      	cmp	r3, #5
 8010688:	d118      	bne.n	80106bc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2202      	movs	r2, #2
 801068e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	68b9      	ldr	r1, [r7, #8]
 801069a:	4618      	mov	r0, r3
 801069c:	f001 f834 	bl	8011708 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2b02      	cmp	r3, #2
 80106a6:	d104      	bne.n	80106b2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2205      	movs	r2, #5
 80106ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80106b0:	e006      	b.n	80106c0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2201      	movs	r2, #1
 80106b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80106ba:	e001      	b.n	80106c0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	e000      	b.n	80106c2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3718      	adds	r7, #24
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b082      	sub	sp, #8
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d101      	bne.n	80106e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80106e0:	2302      	movs	r3, #2
 80106e2:	e016      	b.n	8010712 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d10f      	bne.n	8010710 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2202      	movs	r2, #2
 80106f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	4618      	mov	r0, r3
 8010700:	f001 f826 	bl	8011750 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2201      	movs	r2, #1
 8010708:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	e000      	b.n	8010712 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8010710:	2301      	movs	r3, #1
}
 8010712:	4618      	mov	r0, r3
 8010714:	3708      	adds	r7, #8
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b082      	sub	sp, #8
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d101      	bne.n	801072c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010728:	2301      	movs	r3, #1
 801072a:	e049      	b.n	80107c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010732:	b2db      	uxtb	r3, r3
 8010734:	2b00      	cmp	r3, #0
 8010736:	d106      	bne.n	8010746 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 f841 	bl	80107c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2202      	movs	r2, #2
 801074a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	3304      	adds	r3, #4
 8010756:	4619      	mov	r1, r3
 8010758:	4610      	mov	r0, r2
 801075a:	f000 f9ff 	bl	8010b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2201      	movs	r2, #1
 8010762:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2201      	movs	r2, #1
 801076a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2201      	movs	r2, #1
 8010772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2201      	movs	r2, #1
 801077a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2201      	movs	r2, #1
 801078a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2201      	movs	r2, #1
 8010792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2201      	movs	r2, #1
 801079a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2201      	movs	r2, #1
 80107a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2201      	movs	r2, #1
 80107aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2201      	movs	r2, #1
 80107b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2201      	movs	r2, #1
 80107ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80107dc:	b480      	push	{r7}
 80107de:	b085      	sub	sp, #20
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d001      	beq.n	80107f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80107f0:	2301      	movs	r3, #1
 80107f2:	e054      	b.n	801089e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2202      	movs	r2, #2
 80107f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	68da      	ldr	r2, [r3, #12]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f042 0201 	orr.w	r2, r2, #1
 801080a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a26      	ldr	r2, [pc, #152]	@ (80108ac <HAL_TIM_Base_Start_IT+0xd0>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d022      	beq.n	801085c <HAL_TIM_Base_Start_IT+0x80>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801081e:	d01d      	beq.n	801085c <HAL_TIM_Base_Start_IT+0x80>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a22      	ldr	r2, [pc, #136]	@ (80108b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d018      	beq.n	801085c <HAL_TIM_Base_Start_IT+0x80>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4a21      	ldr	r2, [pc, #132]	@ (80108b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d013      	beq.n	801085c <HAL_TIM_Base_Start_IT+0x80>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4a1f      	ldr	r2, [pc, #124]	@ (80108b8 <HAL_TIM_Base_Start_IT+0xdc>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d00e      	beq.n	801085c <HAL_TIM_Base_Start_IT+0x80>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4a1e      	ldr	r2, [pc, #120]	@ (80108bc <HAL_TIM_Base_Start_IT+0xe0>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d009      	beq.n	801085c <HAL_TIM_Base_Start_IT+0x80>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a1c      	ldr	r2, [pc, #112]	@ (80108c0 <HAL_TIM_Base_Start_IT+0xe4>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d004      	beq.n	801085c <HAL_TIM_Base_Start_IT+0x80>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a1b      	ldr	r2, [pc, #108]	@ (80108c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d115      	bne.n	8010888 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	689a      	ldr	r2, [r3, #8]
 8010862:	4b19      	ldr	r3, [pc, #100]	@ (80108c8 <HAL_TIM_Base_Start_IT+0xec>)
 8010864:	4013      	ands	r3, r2
 8010866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2b06      	cmp	r3, #6
 801086c:	d015      	beq.n	801089a <HAL_TIM_Base_Start_IT+0xbe>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010874:	d011      	beq.n	801089a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f042 0201 	orr.w	r2, r2, #1
 8010884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010886:	e008      	b.n	801089a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f042 0201 	orr.w	r2, r2, #1
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	e000      	b.n	801089c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801089a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3714      	adds	r7, #20
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	40010000 	.word	0x40010000
 80108b0:	40000400 	.word	0x40000400
 80108b4:	40000800 	.word	0x40000800
 80108b8:	40000c00 	.word	0x40000c00
 80108bc:	40010400 	.word	0x40010400
 80108c0:	40014000 	.word	0x40014000
 80108c4:	40001800 	.word	0x40001800
 80108c8:	00010007 	.word	0x00010007

080108cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	f003 0302 	and.w	r3, r3, #2
 80108de:	2b02      	cmp	r3, #2
 80108e0:	d122      	bne.n	8010928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	f003 0302 	and.w	r3, r3, #2
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d11b      	bne.n	8010928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f06f 0202 	mvn.w	r2, #2
 80108f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2201      	movs	r2, #1
 80108fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	699b      	ldr	r3, [r3, #24]
 8010906:	f003 0303 	and.w	r3, r3, #3
 801090a:	2b00      	cmp	r3, #0
 801090c:	d003      	beq.n	8010916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f905 	bl	8010b1e <HAL_TIM_IC_CaptureCallback>
 8010914:	e005      	b.n	8010922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 f8f7 	bl	8010b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f000 f908 	bl	8010b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2200      	movs	r2, #0
 8010926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	691b      	ldr	r3, [r3, #16]
 801092e:	f003 0304 	and.w	r3, r3, #4
 8010932:	2b04      	cmp	r3, #4
 8010934:	d122      	bne.n	801097c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f003 0304 	and.w	r3, r3, #4
 8010940:	2b04      	cmp	r3, #4
 8010942:	d11b      	bne.n	801097c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f06f 0204 	mvn.w	r2, #4
 801094c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2202      	movs	r2, #2
 8010952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	699b      	ldr	r3, [r3, #24]
 801095a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801095e:	2b00      	cmp	r3, #0
 8010960:	d003      	beq.n	801096a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 f8db 	bl	8010b1e <HAL_TIM_IC_CaptureCallback>
 8010968:	e005      	b.n	8010976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 f8cd 	bl	8010b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 f8de 	bl	8010b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	f003 0308 	and.w	r3, r3, #8
 8010986:	2b08      	cmp	r3, #8
 8010988:	d122      	bne.n	80109d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	68db      	ldr	r3, [r3, #12]
 8010990:	f003 0308 	and.w	r3, r3, #8
 8010994:	2b08      	cmp	r3, #8
 8010996:	d11b      	bne.n	80109d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f06f 0208 	mvn.w	r2, #8
 80109a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2204      	movs	r2, #4
 80109a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	69db      	ldr	r3, [r3, #28]
 80109ae:	f003 0303 	and.w	r3, r3, #3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d003      	beq.n	80109be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f000 f8b1 	bl	8010b1e <HAL_TIM_IC_CaptureCallback>
 80109bc:	e005      	b.n	80109ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f8a3 	bl	8010b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 f8b4 	bl	8010b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	691b      	ldr	r3, [r3, #16]
 80109d6:	f003 0310 	and.w	r3, r3, #16
 80109da:	2b10      	cmp	r3, #16
 80109dc:	d122      	bne.n	8010a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	f003 0310 	and.w	r3, r3, #16
 80109e8:	2b10      	cmp	r3, #16
 80109ea:	d11b      	bne.n	8010a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f06f 0210 	mvn.w	r2, #16
 80109f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2208      	movs	r2, #8
 80109fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	69db      	ldr	r3, [r3, #28]
 8010a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d003      	beq.n	8010a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 f887 	bl	8010b1e <HAL_TIM_IC_CaptureCallback>
 8010a10:	e005      	b.n	8010a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 f879 	bl	8010b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 f88a 	bl	8010b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2200      	movs	r2, #0
 8010a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	f003 0301 	and.w	r3, r3, #1
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d10e      	bne.n	8010a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	f003 0301 	and.w	r3, r3, #1
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	d107      	bne.n	8010a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f06f 0201 	mvn.w	r2, #1
 8010a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f7f5 f9ea 	bl	8005e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	691b      	ldr	r3, [r3, #16]
 8010a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a5a:	2b80      	cmp	r3, #128	@ 0x80
 8010a5c:	d10e      	bne.n	8010a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a68:	2b80      	cmp	r3, #128	@ 0x80
 8010a6a:	d107      	bne.n	8010a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 f91a 	bl	8010cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a8a:	d10e      	bne.n	8010aaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a96:	2b80      	cmp	r3, #128	@ 0x80
 8010a98:	d107      	bne.n	8010aaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 f90d 	bl	8010cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ab4:	2b40      	cmp	r3, #64	@ 0x40
 8010ab6:	d10e      	bne.n	8010ad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ac2:	2b40      	cmp	r3, #64	@ 0x40
 8010ac4:	d107      	bne.n	8010ad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f000 f838 	bl	8010b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	691b      	ldr	r3, [r3, #16]
 8010adc:	f003 0320 	and.w	r3, r3, #32
 8010ae0:	2b20      	cmp	r3, #32
 8010ae2:	d10e      	bne.n	8010b02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	f003 0320 	and.w	r3, r3, #32
 8010aee:	2b20      	cmp	r3, #32
 8010af0:	d107      	bne.n	8010b02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f06f 0220 	mvn.w	r2, #32
 8010afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f000 f8cd 	bl	8010c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010b02:	bf00      	nop
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b0a:	b480      	push	{r7}
 8010b0c:	b083      	sub	sp, #12
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b12:	bf00      	nop
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010b1e:	b480      	push	{r7}
 8010b20:	b083      	sub	sp, #12
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b26:	bf00      	nop
 8010b28:	370c      	adds	r7, #12
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr

08010b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b32:	b480      	push	{r7}
 8010b34:	b083      	sub	sp, #12
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b3a:	bf00      	nop
 8010b3c:	370c      	adds	r7, #12
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr

08010b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010b46:	b480      	push	{r7}
 8010b48:	b083      	sub	sp, #12
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010b4e:	bf00      	nop
 8010b50:	370c      	adds	r7, #12
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
	...

08010b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b085      	sub	sp, #20
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	4a40      	ldr	r2, [pc, #256]	@ (8010c70 <TIM_Base_SetConfig+0x114>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d013      	beq.n	8010b9c <TIM_Base_SetConfig+0x40>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b7a:	d00f      	beq.n	8010b9c <TIM_Base_SetConfig+0x40>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8010c74 <TIM_Base_SetConfig+0x118>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d00b      	beq.n	8010b9c <TIM_Base_SetConfig+0x40>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	4a3c      	ldr	r2, [pc, #240]	@ (8010c78 <TIM_Base_SetConfig+0x11c>)
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	d007      	beq.n	8010b9c <TIM_Base_SetConfig+0x40>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8010c7c <TIM_Base_SetConfig+0x120>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d003      	beq.n	8010b9c <TIM_Base_SetConfig+0x40>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	4a3a      	ldr	r2, [pc, #232]	@ (8010c80 <TIM_Base_SetConfig+0x124>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d108      	bne.n	8010bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	4313      	orrs	r3, r2
 8010bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8010c70 <TIM_Base_SetConfig+0x114>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d02b      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010bbc:	d027      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8010c74 <TIM_Base_SetConfig+0x118>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d023      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8010c78 <TIM_Base_SetConfig+0x11c>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d01f      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8010c7c <TIM_Base_SetConfig+0x120>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d01b      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4a29      	ldr	r2, [pc, #164]	@ (8010c80 <TIM_Base_SetConfig+0x124>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d017      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4a28      	ldr	r2, [pc, #160]	@ (8010c84 <TIM_Base_SetConfig+0x128>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d013      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	4a27      	ldr	r2, [pc, #156]	@ (8010c88 <TIM_Base_SetConfig+0x12c>)
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d00f      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	4a26      	ldr	r2, [pc, #152]	@ (8010c8c <TIM_Base_SetConfig+0x130>)
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d00b      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	4a25      	ldr	r2, [pc, #148]	@ (8010c90 <TIM_Base_SetConfig+0x134>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d007      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4a24      	ldr	r2, [pc, #144]	@ (8010c94 <TIM_Base_SetConfig+0x138>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d003      	beq.n	8010c0e <TIM_Base_SetConfig+0xb2>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	4a23      	ldr	r2, [pc, #140]	@ (8010c98 <TIM_Base_SetConfig+0x13c>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d108      	bne.n	8010c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	695b      	ldr	r3, [r3, #20]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	68fa      	ldr	r2, [r7, #12]
 8010c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	689a      	ldr	r2, [r3, #8]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4a0a      	ldr	r2, [pc, #40]	@ (8010c70 <TIM_Base_SetConfig+0x114>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d003      	beq.n	8010c54 <TIM_Base_SetConfig+0xf8>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8010c80 <TIM_Base_SetConfig+0x124>)
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d103      	bne.n	8010c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	691a      	ldr	r2, [r3, #16]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2201      	movs	r2, #1
 8010c60:	615a      	str	r2, [r3, #20]
}
 8010c62:	bf00      	nop
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	40010000 	.word	0x40010000
 8010c74:	40000400 	.word	0x40000400
 8010c78:	40000800 	.word	0x40000800
 8010c7c:	40000c00 	.word	0x40000c00
 8010c80:	40010400 	.word	0x40010400
 8010c84:	40014000 	.word	0x40014000
 8010c88:	40014400 	.word	0x40014400
 8010c8c:	40014800 	.word	0x40014800
 8010c90:	40001800 	.word	0x40001800
 8010c94:	40001c00 	.word	0x40001c00
 8010c98:	40002000 	.word	0x40002000

08010c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010ca4:	bf00      	nop
 8010ca6:	370c      	adds	r7, #12
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010cb8:	bf00      	nop
 8010cba:	370c      	adds	r7, #12
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b083      	sub	sp, #12
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ccc:	bf00      	nop
 8010cce:	370c      	adds	r7, #12
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	4770      	bx	lr

08010cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d101      	bne.n	8010cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e040      	b.n	8010d6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d106      	bne.n	8010d00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7f7 fc32 	bl	8008564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2224      	movs	r2, #36	@ 0x24
 8010d04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f022 0201 	bic.w	r2, r2, #1
 8010d14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 f82c 	bl	8010d74 <UART_SetConfig>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d101      	bne.n	8010d26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010d22:	2301      	movs	r3, #1
 8010d24:	e022      	b.n	8010d6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d002      	beq.n	8010d34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 fa84 	bl	801123c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	685a      	ldr	r2, [r3, #4]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	689a      	ldr	r2, [r3, #8]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f042 0201 	orr.w	r2, r2, #1
 8010d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f000 fb0b 	bl	8011380 <UART_CheckIdleState>
 8010d6a:	4603      	mov	r3, r0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b088      	sub	sp, #32
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	689a      	ldr	r2, [r3, #8]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	691b      	ldr	r3, [r3, #16]
 8010d88:	431a      	orrs	r2, r3
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	695b      	ldr	r3, [r3, #20]
 8010d8e:	431a      	orrs	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	4313      	orrs	r3, r2
 8010d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	4ba6      	ldr	r3, [pc, #664]	@ (8011038 <UART_SetConfig+0x2c4>)
 8010da0:	4013      	ands	r3, r2
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	6812      	ldr	r2, [r2, #0]
 8010da6:	6979      	ldr	r1, [r7, #20]
 8010da8:	430b      	orrs	r3, r1
 8010daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	68da      	ldr	r2, [r3, #12]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	430a      	orrs	r2, r1
 8010dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	699b      	ldr	r3, [r3, #24]
 8010dc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a1b      	ldr	r3, [r3, #32]
 8010dcc:	697a      	ldr	r2, [r7, #20]
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	697a      	ldr	r2, [r7, #20]
 8010de2:	430a      	orrs	r2, r1
 8010de4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a94      	ldr	r2, [pc, #592]	@ (801103c <UART_SetConfig+0x2c8>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d120      	bne.n	8010e32 <UART_SetConfig+0xbe>
 8010df0:	4b93      	ldr	r3, [pc, #588]	@ (8011040 <UART_SetConfig+0x2cc>)
 8010df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010df6:	f003 0303 	and.w	r3, r3, #3
 8010dfa:	2b03      	cmp	r3, #3
 8010dfc:	d816      	bhi.n	8010e2c <UART_SetConfig+0xb8>
 8010dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8010e04 <UART_SetConfig+0x90>)
 8010e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e04:	08010e15 	.word	0x08010e15
 8010e08:	08010e21 	.word	0x08010e21
 8010e0c:	08010e1b 	.word	0x08010e1b
 8010e10:	08010e27 	.word	0x08010e27
 8010e14:	2301      	movs	r3, #1
 8010e16:	77fb      	strb	r3, [r7, #31]
 8010e18:	e150      	b.n	80110bc <UART_SetConfig+0x348>
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	77fb      	strb	r3, [r7, #31]
 8010e1e:	e14d      	b.n	80110bc <UART_SetConfig+0x348>
 8010e20:	2304      	movs	r3, #4
 8010e22:	77fb      	strb	r3, [r7, #31]
 8010e24:	e14a      	b.n	80110bc <UART_SetConfig+0x348>
 8010e26:	2308      	movs	r3, #8
 8010e28:	77fb      	strb	r3, [r7, #31]
 8010e2a:	e147      	b.n	80110bc <UART_SetConfig+0x348>
 8010e2c:	2310      	movs	r3, #16
 8010e2e:	77fb      	strb	r3, [r7, #31]
 8010e30:	e144      	b.n	80110bc <UART_SetConfig+0x348>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a83      	ldr	r2, [pc, #524]	@ (8011044 <UART_SetConfig+0x2d0>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d132      	bne.n	8010ea2 <UART_SetConfig+0x12e>
 8010e3c:	4b80      	ldr	r3, [pc, #512]	@ (8011040 <UART_SetConfig+0x2cc>)
 8010e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e42:	f003 030c 	and.w	r3, r3, #12
 8010e46:	2b0c      	cmp	r3, #12
 8010e48:	d828      	bhi.n	8010e9c <UART_SetConfig+0x128>
 8010e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8010e50 <UART_SetConfig+0xdc>)
 8010e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e50:	08010e85 	.word	0x08010e85
 8010e54:	08010e9d 	.word	0x08010e9d
 8010e58:	08010e9d 	.word	0x08010e9d
 8010e5c:	08010e9d 	.word	0x08010e9d
 8010e60:	08010e91 	.word	0x08010e91
 8010e64:	08010e9d 	.word	0x08010e9d
 8010e68:	08010e9d 	.word	0x08010e9d
 8010e6c:	08010e9d 	.word	0x08010e9d
 8010e70:	08010e8b 	.word	0x08010e8b
 8010e74:	08010e9d 	.word	0x08010e9d
 8010e78:	08010e9d 	.word	0x08010e9d
 8010e7c:	08010e9d 	.word	0x08010e9d
 8010e80:	08010e97 	.word	0x08010e97
 8010e84:	2300      	movs	r3, #0
 8010e86:	77fb      	strb	r3, [r7, #31]
 8010e88:	e118      	b.n	80110bc <UART_SetConfig+0x348>
 8010e8a:	2302      	movs	r3, #2
 8010e8c:	77fb      	strb	r3, [r7, #31]
 8010e8e:	e115      	b.n	80110bc <UART_SetConfig+0x348>
 8010e90:	2304      	movs	r3, #4
 8010e92:	77fb      	strb	r3, [r7, #31]
 8010e94:	e112      	b.n	80110bc <UART_SetConfig+0x348>
 8010e96:	2308      	movs	r3, #8
 8010e98:	77fb      	strb	r3, [r7, #31]
 8010e9a:	e10f      	b.n	80110bc <UART_SetConfig+0x348>
 8010e9c:	2310      	movs	r3, #16
 8010e9e:	77fb      	strb	r3, [r7, #31]
 8010ea0:	e10c      	b.n	80110bc <UART_SetConfig+0x348>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	4a68      	ldr	r2, [pc, #416]	@ (8011048 <UART_SetConfig+0x2d4>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d120      	bne.n	8010eee <UART_SetConfig+0x17a>
 8010eac:	4b64      	ldr	r3, [pc, #400]	@ (8011040 <UART_SetConfig+0x2cc>)
 8010eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010eb2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010eb6:	2b30      	cmp	r3, #48	@ 0x30
 8010eb8:	d013      	beq.n	8010ee2 <UART_SetConfig+0x16e>
 8010eba:	2b30      	cmp	r3, #48	@ 0x30
 8010ebc:	d814      	bhi.n	8010ee8 <UART_SetConfig+0x174>
 8010ebe:	2b20      	cmp	r3, #32
 8010ec0:	d009      	beq.n	8010ed6 <UART_SetConfig+0x162>
 8010ec2:	2b20      	cmp	r3, #32
 8010ec4:	d810      	bhi.n	8010ee8 <UART_SetConfig+0x174>
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d002      	beq.n	8010ed0 <UART_SetConfig+0x15c>
 8010eca:	2b10      	cmp	r3, #16
 8010ecc:	d006      	beq.n	8010edc <UART_SetConfig+0x168>
 8010ece:	e00b      	b.n	8010ee8 <UART_SetConfig+0x174>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	77fb      	strb	r3, [r7, #31]
 8010ed4:	e0f2      	b.n	80110bc <UART_SetConfig+0x348>
 8010ed6:	2302      	movs	r3, #2
 8010ed8:	77fb      	strb	r3, [r7, #31]
 8010eda:	e0ef      	b.n	80110bc <UART_SetConfig+0x348>
 8010edc:	2304      	movs	r3, #4
 8010ede:	77fb      	strb	r3, [r7, #31]
 8010ee0:	e0ec      	b.n	80110bc <UART_SetConfig+0x348>
 8010ee2:	2308      	movs	r3, #8
 8010ee4:	77fb      	strb	r3, [r7, #31]
 8010ee6:	e0e9      	b.n	80110bc <UART_SetConfig+0x348>
 8010ee8:	2310      	movs	r3, #16
 8010eea:	77fb      	strb	r3, [r7, #31]
 8010eec:	e0e6      	b.n	80110bc <UART_SetConfig+0x348>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	4a56      	ldr	r2, [pc, #344]	@ (801104c <UART_SetConfig+0x2d8>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d120      	bne.n	8010f3a <UART_SetConfig+0x1c6>
 8010ef8:	4b51      	ldr	r3, [pc, #324]	@ (8011040 <UART_SetConfig+0x2cc>)
 8010efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8010f04:	d013      	beq.n	8010f2e <UART_SetConfig+0x1ba>
 8010f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8010f08:	d814      	bhi.n	8010f34 <UART_SetConfig+0x1c0>
 8010f0a:	2b80      	cmp	r3, #128	@ 0x80
 8010f0c:	d009      	beq.n	8010f22 <UART_SetConfig+0x1ae>
 8010f0e:	2b80      	cmp	r3, #128	@ 0x80
 8010f10:	d810      	bhi.n	8010f34 <UART_SetConfig+0x1c0>
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d002      	beq.n	8010f1c <UART_SetConfig+0x1a8>
 8010f16:	2b40      	cmp	r3, #64	@ 0x40
 8010f18:	d006      	beq.n	8010f28 <UART_SetConfig+0x1b4>
 8010f1a:	e00b      	b.n	8010f34 <UART_SetConfig+0x1c0>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	77fb      	strb	r3, [r7, #31]
 8010f20:	e0cc      	b.n	80110bc <UART_SetConfig+0x348>
 8010f22:	2302      	movs	r3, #2
 8010f24:	77fb      	strb	r3, [r7, #31]
 8010f26:	e0c9      	b.n	80110bc <UART_SetConfig+0x348>
 8010f28:	2304      	movs	r3, #4
 8010f2a:	77fb      	strb	r3, [r7, #31]
 8010f2c:	e0c6      	b.n	80110bc <UART_SetConfig+0x348>
 8010f2e:	2308      	movs	r3, #8
 8010f30:	77fb      	strb	r3, [r7, #31]
 8010f32:	e0c3      	b.n	80110bc <UART_SetConfig+0x348>
 8010f34:	2310      	movs	r3, #16
 8010f36:	77fb      	strb	r3, [r7, #31]
 8010f38:	e0c0      	b.n	80110bc <UART_SetConfig+0x348>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4a44      	ldr	r2, [pc, #272]	@ (8011050 <UART_SetConfig+0x2dc>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d125      	bne.n	8010f90 <UART_SetConfig+0x21c>
 8010f44:	4b3e      	ldr	r3, [pc, #248]	@ (8011040 <UART_SetConfig+0x2cc>)
 8010f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010f52:	d017      	beq.n	8010f84 <UART_SetConfig+0x210>
 8010f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010f58:	d817      	bhi.n	8010f8a <UART_SetConfig+0x216>
 8010f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f5e:	d00b      	beq.n	8010f78 <UART_SetConfig+0x204>
 8010f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f64:	d811      	bhi.n	8010f8a <UART_SetConfig+0x216>
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d003      	beq.n	8010f72 <UART_SetConfig+0x1fe>
 8010f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f6e:	d006      	beq.n	8010f7e <UART_SetConfig+0x20a>
 8010f70:	e00b      	b.n	8010f8a <UART_SetConfig+0x216>
 8010f72:	2300      	movs	r3, #0
 8010f74:	77fb      	strb	r3, [r7, #31]
 8010f76:	e0a1      	b.n	80110bc <UART_SetConfig+0x348>
 8010f78:	2302      	movs	r3, #2
 8010f7a:	77fb      	strb	r3, [r7, #31]
 8010f7c:	e09e      	b.n	80110bc <UART_SetConfig+0x348>
 8010f7e:	2304      	movs	r3, #4
 8010f80:	77fb      	strb	r3, [r7, #31]
 8010f82:	e09b      	b.n	80110bc <UART_SetConfig+0x348>
 8010f84:	2308      	movs	r3, #8
 8010f86:	77fb      	strb	r3, [r7, #31]
 8010f88:	e098      	b.n	80110bc <UART_SetConfig+0x348>
 8010f8a:	2310      	movs	r3, #16
 8010f8c:	77fb      	strb	r3, [r7, #31]
 8010f8e:	e095      	b.n	80110bc <UART_SetConfig+0x348>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4a2f      	ldr	r2, [pc, #188]	@ (8011054 <UART_SetConfig+0x2e0>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d125      	bne.n	8010fe6 <UART_SetConfig+0x272>
 8010f9a:	4b29      	ldr	r3, [pc, #164]	@ (8011040 <UART_SetConfig+0x2cc>)
 8010f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010fa8:	d017      	beq.n	8010fda <UART_SetConfig+0x266>
 8010faa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010fae:	d817      	bhi.n	8010fe0 <UART_SetConfig+0x26c>
 8010fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010fb4:	d00b      	beq.n	8010fce <UART_SetConfig+0x25a>
 8010fb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010fba:	d811      	bhi.n	8010fe0 <UART_SetConfig+0x26c>
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d003      	beq.n	8010fc8 <UART_SetConfig+0x254>
 8010fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010fc4:	d006      	beq.n	8010fd4 <UART_SetConfig+0x260>
 8010fc6:	e00b      	b.n	8010fe0 <UART_SetConfig+0x26c>
 8010fc8:	2301      	movs	r3, #1
 8010fca:	77fb      	strb	r3, [r7, #31]
 8010fcc:	e076      	b.n	80110bc <UART_SetConfig+0x348>
 8010fce:	2302      	movs	r3, #2
 8010fd0:	77fb      	strb	r3, [r7, #31]
 8010fd2:	e073      	b.n	80110bc <UART_SetConfig+0x348>
 8010fd4:	2304      	movs	r3, #4
 8010fd6:	77fb      	strb	r3, [r7, #31]
 8010fd8:	e070      	b.n	80110bc <UART_SetConfig+0x348>
 8010fda:	2308      	movs	r3, #8
 8010fdc:	77fb      	strb	r3, [r7, #31]
 8010fde:	e06d      	b.n	80110bc <UART_SetConfig+0x348>
 8010fe0:	2310      	movs	r3, #16
 8010fe2:	77fb      	strb	r3, [r7, #31]
 8010fe4:	e06a      	b.n	80110bc <UART_SetConfig+0x348>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	4a1b      	ldr	r2, [pc, #108]	@ (8011058 <UART_SetConfig+0x2e4>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d138      	bne.n	8011062 <UART_SetConfig+0x2ee>
 8010ff0:	4b13      	ldr	r3, [pc, #76]	@ (8011040 <UART_SetConfig+0x2cc>)
 8010ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ff6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8010ffa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010ffe:	d017      	beq.n	8011030 <UART_SetConfig+0x2bc>
 8011000:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011004:	d82a      	bhi.n	801105c <UART_SetConfig+0x2e8>
 8011006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801100a:	d00b      	beq.n	8011024 <UART_SetConfig+0x2b0>
 801100c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011010:	d824      	bhi.n	801105c <UART_SetConfig+0x2e8>
 8011012:	2b00      	cmp	r3, #0
 8011014:	d003      	beq.n	801101e <UART_SetConfig+0x2aa>
 8011016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801101a:	d006      	beq.n	801102a <UART_SetConfig+0x2b6>
 801101c:	e01e      	b.n	801105c <UART_SetConfig+0x2e8>
 801101e:	2300      	movs	r3, #0
 8011020:	77fb      	strb	r3, [r7, #31]
 8011022:	e04b      	b.n	80110bc <UART_SetConfig+0x348>
 8011024:	2302      	movs	r3, #2
 8011026:	77fb      	strb	r3, [r7, #31]
 8011028:	e048      	b.n	80110bc <UART_SetConfig+0x348>
 801102a:	2304      	movs	r3, #4
 801102c:	77fb      	strb	r3, [r7, #31]
 801102e:	e045      	b.n	80110bc <UART_SetConfig+0x348>
 8011030:	2308      	movs	r3, #8
 8011032:	77fb      	strb	r3, [r7, #31]
 8011034:	e042      	b.n	80110bc <UART_SetConfig+0x348>
 8011036:	bf00      	nop
 8011038:	efff69f3 	.word	0xefff69f3
 801103c:	40011000 	.word	0x40011000
 8011040:	40023800 	.word	0x40023800
 8011044:	40004400 	.word	0x40004400
 8011048:	40004800 	.word	0x40004800
 801104c:	40004c00 	.word	0x40004c00
 8011050:	40005000 	.word	0x40005000
 8011054:	40011400 	.word	0x40011400
 8011058:	40007800 	.word	0x40007800
 801105c:	2310      	movs	r3, #16
 801105e:	77fb      	strb	r3, [r7, #31]
 8011060:	e02c      	b.n	80110bc <UART_SetConfig+0x348>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4a72      	ldr	r2, [pc, #456]	@ (8011230 <UART_SetConfig+0x4bc>)
 8011068:	4293      	cmp	r3, r2
 801106a:	d125      	bne.n	80110b8 <UART_SetConfig+0x344>
 801106c:	4b71      	ldr	r3, [pc, #452]	@ (8011234 <UART_SetConfig+0x4c0>)
 801106e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011072:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011076:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801107a:	d017      	beq.n	80110ac <UART_SetConfig+0x338>
 801107c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011080:	d817      	bhi.n	80110b2 <UART_SetConfig+0x33e>
 8011082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011086:	d00b      	beq.n	80110a0 <UART_SetConfig+0x32c>
 8011088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801108c:	d811      	bhi.n	80110b2 <UART_SetConfig+0x33e>
 801108e:	2b00      	cmp	r3, #0
 8011090:	d003      	beq.n	801109a <UART_SetConfig+0x326>
 8011092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011096:	d006      	beq.n	80110a6 <UART_SetConfig+0x332>
 8011098:	e00b      	b.n	80110b2 <UART_SetConfig+0x33e>
 801109a:	2300      	movs	r3, #0
 801109c:	77fb      	strb	r3, [r7, #31]
 801109e:	e00d      	b.n	80110bc <UART_SetConfig+0x348>
 80110a0:	2302      	movs	r3, #2
 80110a2:	77fb      	strb	r3, [r7, #31]
 80110a4:	e00a      	b.n	80110bc <UART_SetConfig+0x348>
 80110a6:	2304      	movs	r3, #4
 80110a8:	77fb      	strb	r3, [r7, #31]
 80110aa:	e007      	b.n	80110bc <UART_SetConfig+0x348>
 80110ac:	2308      	movs	r3, #8
 80110ae:	77fb      	strb	r3, [r7, #31]
 80110b0:	e004      	b.n	80110bc <UART_SetConfig+0x348>
 80110b2:	2310      	movs	r3, #16
 80110b4:	77fb      	strb	r3, [r7, #31]
 80110b6:	e001      	b.n	80110bc <UART_SetConfig+0x348>
 80110b8:	2310      	movs	r3, #16
 80110ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	69db      	ldr	r3, [r3, #28]
 80110c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80110c4:	d15b      	bne.n	801117e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80110c6:	7ffb      	ldrb	r3, [r7, #31]
 80110c8:	2b08      	cmp	r3, #8
 80110ca:	d828      	bhi.n	801111e <UART_SetConfig+0x3aa>
 80110cc:	a201      	add	r2, pc, #4	@ (adr r2, 80110d4 <UART_SetConfig+0x360>)
 80110ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d2:	bf00      	nop
 80110d4:	080110f9 	.word	0x080110f9
 80110d8:	08011101 	.word	0x08011101
 80110dc:	08011109 	.word	0x08011109
 80110e0:	0801111f 	.word	0x0801111f
 80110e4:	0801110f 	.word	0x0801110f
 80110e8:	0801111f 	.word	0x0801111f
 80110ec:	0801111f 	.word	0x0801111f
 80110f0:	0801111f 	.word	0x0801111f
 80110f4:	08011117 	.word	0x08011117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110f8:	f7fc ff6e 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 80110fc:	61b8      	str	r0, [r7, #24]
        break;
 80110fe:	e013      	b.n	8011128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011100:	f7fc ff7e 	bl	800e000 <HAL_RCC_GetPCLK2Freq>
 8011104:	61b8      	str	r0, [r7, #24]
        break;
 8011106:	e00f      	b.n	8011128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011108:	4b4b      	ldr	r3, [pc, #300]	@ (8011238 <UART_SetConfig+0x4c4>)
 801110a:	61bb      	str	r3, [r7, #24]
        break;
 801110c:	e00c      	b.n	8011128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801110e:	f7fc fe91 	bl	800de34 <HAL_RCC_GetSysClockFreq>
 8011112:	61b8      	str	r0, [r7, #24]
        break;
 8011114:	e008      	b.n	8011128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801111a:	61bb      	str	r3, [r7, #24]
        break;
 801111c:	e004      	b.n	8011128 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801111e:	2300      	movs	r3, #0
 8011120:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011122:	2301      	movs	r3, #1
 8011124:	77bb      	strb	r3, [r7, #30]
        break;
 8011126:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d074      	beq.n	8011218 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	005a      	lsls	r2, r3, #1
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	085b      	lsrs	r3, r3, #1
 8011138:	441a      	add	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011142:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	2b0f      	cmp	r3, #15
 8011148:	d916      	bls.n	8011178 <UART_SetConfig+0x404>
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011150:	d212      	bcs.n	8011178 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	b29b      	uxth	r3, r3
 8011156:	f023 030f 	bic.w	r3, r3, #15
 801115a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	085b      	lsrs	r3, r3, #1
 8011160:	b29b      	uxth	r3, r3
 8011162:	f003 0307 	and.w	r3, r3, #7
 8011166:	b29a      	uxth	r2, r3
 8011168:	89fb      	ldrh	r3, [r7, #14]
 801116a:	4313      	orrs	r3, r2
 801116c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	89fa      	ldrh	r2, [r7, #14]
 8011174:	60da      	str	r2, [r3, #12]
 8011176:	e04f      	b.n	8011218 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011178:	2301      	movs	r3, #1
 801117a:	77bb      	strb	r3, [r7, #30]
 801117c:	e04c      	b.n	8011218 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801117e:	7ffb      	ldrb	r3, [r7, #31]
 8011180:	2b08      	cmp	r3, #8
 8011182:	d828      	bhi.n	80111d6 <UART_SetConfig+0x462>
 8011184:	a201      	add	r2, pc, #4	@ (adr r2, 801118c <UART_SetConfig+0x418>)
 8011186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801118a:	bf00      	nop
 801118c:	080111b1 	.word	0x080111b1
 8011190:	080111b9 	.word	0x080111b9
 8011194:	080111c1 	.word	0x080111c1
 8011198:	080111d7 	.word	0x080111d7
 801119c:	080111c7 	.word	0x080111c7
 80111a0:	080111d7 	.word	0x080111d7
 80111a4:	080111d7 	.word	0x080111d7
 80111a8:	080111d7 	.word	0x080111d7
 80111ac:	080111cf 	.word	0x080111cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111b0:	f7fc ff12 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 80111b4:	61b8      	str	r0, [r7, #24]
        break;
 80111b6:	e013      	b.n	80111e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111b8:	f7fc ff22 	bl	800e000 <HAL_RCC_GetPCLK2Freq>
 80111bc:	61b8      	str	r0, [r7, #24]
        break;
 80111be:	e00f      	b.n	80111e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80111c0:	4b1d      	ldr	r3, [pc, #116]	@ (8011238 <UART_SetConfig+0x4c4>)
 80111c2:	61bb      	str	r3, [r7, #24]
        break;
 80111c4:	e00c      	b.n	80111e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80111c6:	f7fc fe35 	bl	800de34 <HAL_RCC_GetSysClockFreq>
 80111ca:	61b8      	str	r0, [r7, #24]
        break;
 80111cc:	e008      	b.n	80111e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111d2:	61bb      	str	r3, [r7, #24]
        break;
 80111d4:	e004      	b.n	80111e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80111d6:	2300      	movs	r3, #0
 80111d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	77bb      	strb	r3, [r7, #30]
        break;
 80111de:	bf00      	nop
    }

    if (pclk != 0U)
 80111e0:	69bb      	ldr	r3, [r7, #24]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d018      	beq.n	8011218 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	085a      	lsrs	r2, r3, #1
 80111ec:	69bb      	ldr	r3, [r7, #24]
 80111ee:	441a      	add	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80111f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	2b0f      	cmp	r3, #15
 80111fe:	d909      	bls.n	8011214 <UART_SetConfig+0x4a0>
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011206:	d205      	bcs.n	8011214 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	b29a      	uxth	r2, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	60da      	str	r2, [r3, #12]
 8011212:	e001      	b.n	8011218 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011214:	2301      	movs	r3, #1
 8011216:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8011224:	7fbb      	ldrb	r3, [r7, #30]
}
 8011226:	4618      	mov	r0, r3
 8011228:	3720      	adds	r7, #32
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	40007c00 	.word	0x40007c00
 8011234:	40023800 	.word	0x40023800
 8011238:	00f42400 	.word	0x00f42400

0801123c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011248:	f003 0301 	and.w	r3, r3, #1
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00a      	beq.n	8011266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	430a      	orrs	r2, r1
 8011264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126a:	f003 0302 	and.w	r3, r3, #2
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00a      	beq.n	8011288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	430a      	orrs	r2, r1
 8011286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801128c:	f003 0304 	and.w	r3, r3, #4
 8011290:	2b00      	cmp	r3, #0
 8011292:	d00a      	beq.n	80112aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	430a      	orrs	r2, r1
 80112a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ae:	f003 0308 	and.w	r3, r3, #8
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d00a      	beq.n	80112cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	430a      	orrs	r2, r1
 80112ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112d0:	f003 0310 	and.w	r3, r3, #16
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d00a      	beq.n	80112ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	430a      	orrs	r2, r1
 80112ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112f2:	f003 0320 	and.w	r3, r3, #32
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00a      	beq.n	8011310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	689b      	ldr	r3, [r3, #8]
 8011300:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	430a      	orrs	r2, r1
 801130e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011318:	2b00      	cmp	r3, #0
 801131a:	d01a      	beq.n	8011352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	430a      	orrs	r2, r1
 8011330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801133a:	d10a      	bne.n	8011352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	430a      	orrs	r2, r1
 8011350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00a      	beq.n	8011374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	430a      	orrs	r2, r1
 8011372:	605a      	str	r2, [r3, #4]
  }
}
 8011374:	bf00      	nop
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b086      	sub	sp, #24
 8011384:	af02      	add	r7, sp, #8
 8011386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2200      	movs	r2, #0
 801138c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011390:	f7f9 f9b8 	bl	800a704 <HAL_GetTick>
 8011394:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f003 0308 	and.w	r3, r3, #8
 80113a0:	2b08      	cmp	r3, #8
 80113a2:	d10e      	bne.n	80113c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80113a8:	9300      	str	r3, [sp, #0]
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2200      	movs	r2, #0
 80113ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f000 f81b 	bl	80113ee <UART_WaitOnFlagUntilTimeout>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113be:	2303      	movs	r3, #3
 80113c0:	e011      	b.n	80113e6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2220      	movs	r2, #32
 80113c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2220      	movs	r2, #32
 80113cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2200      	movs	r2, #0
 80113e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80113e4:	2300      	movs	r3, #0
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3710      	adds	r7, #16
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}

080113ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b09c      	sub	sp, #112	@ 0x70
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	60f8      	str	r0, [r7, #12]
 80113f6:	60b9      	str	r1, [r7, #8]
 80113f8:	603b      	str	r3, [r7, #0]
 80113fa:	4613      	mov	r3, r2
 80113fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113fe:	e0a7      	b.n	8011550 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011406:	f000 80a3 	beq.w	8011550 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801140a:	f7f9 f97b 	bl	800a704 <HAL_GetTick>
 801140e:	4602      	mov	r2, r0
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	1ad3      	subs	r3, r2, r3
 8011414:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011416:	429a      	cmp	r2, r3
 8011418:	d302      	bcc.n	8011420 <UART_WaitOnFlagUntilTimeout+0x32>
 801141a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801141c:	2b00      	cmp	r3, #0
 801141e:	d13f      	bne.n	80114a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011428:	e853 3f00 	ldrex	r3, [r3]
 801142c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801142e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011430:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011434:	667b      	str	r3, [r7, #100]	@ 0x64
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	461a      	mov	r2, r3
 801143c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801143e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011440:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011442:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011444:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011446:	e841 2300 	strex	r3, r2, [r1]
 801144a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801144c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1e6      	bne.n	8011420 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3308      	adds	r3, #8
 8011458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801145c:	e853 3f00 	ldrex	r3, [r3]
 8011460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011464:	f023 0301 	bic.w	r3, r3, #1
 8011468:	663b      	str	r3, [r7, #96]	@ 0x60
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	3308      	adds	r3, #8
 8011470:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011472:	64ba      	str	r2, [r7, #72]	@ 0x48
 8011474:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011476:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801147a:	e841 2300 	strex	r3, r2, [r1]
 801147e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011482:	2b00      	cmp	r3, #0
 8011484:	d1e5      	bne.n	8011452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2220      	movs	r2, #32
 801148a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2220      	movs	r2, #32
 8011490:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2200      	movs	r2, #0
 8011498:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 801149c:	2303      	movs	r3, #3
 801149e:	e068      	b.n	8011572 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f003 0304 	and.w	r3, r3, #4
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d050      	beq.n	8011550 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	69db      	ldr	r3, [r3, #28]
 80114b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80114b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80114bc:	d148      	bne.n	8011550 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80114c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114d0:	e853 3f00 	ldrex	r3, [r3]
 80114d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80114d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80114dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	461a      	mov	r2, r3
 80114e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80114e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80114e8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80114ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80114ee:	e841 2300 	strex	r3, r2, [r1]
 80114f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80114f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d1e6      	bne.n	80114c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	3308      	adds	r3, #8
 8011500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	e853 3f00 	ldrex	r3, [r3]
 8011508:	613b      	str	r3, [r7, #16]
   return(result);
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	f023 0301 	bic.w	r3, r3, #1
 8011510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	3308      	adds	r3, #8
 8011518:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801151a:	623a      	str	r2, [r7, #32]
 801151c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151e:	69f9      	ldr	r1, [r7, #28]
 8011520:	6a3a      	ldr	r2, [r7, #32]
 8011522:	e841 2300 	strex	r3, r2, [r1]
 8011526:	61bb      	str	r3, [r7, #24]
   return(result);
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d1e5      	bne.n	80114fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2220      	movs	r2, #32
 8011532:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2220      	movs	r2, #32
 8011538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2220      	movs	r2, #32
 8011540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2200      	movs	r2, #0
 8011548:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801154c:	2303      	movs	r3, #3
 801154e:	e010      	b.n	8011572 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	69da      	ldr	r2, [r3, #28]
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	4013      	ands	r3, r2
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	429a      	cmp	r2, r3
 801155e:	bf0c      	ite	eq
 8011560:	2301      	moveq	r3, #1
 8011562:	2300      	movne	r3, #0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	461a      	mov	r2, r3
 8011568:	79fb      	ldrb	r3, [r7, #7]
 801156a:	429a      	cmp	r2, r3
 801156c:	f43f af48 	beq.w	8011400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3770      	adds	r7, #112	@ 0x70
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
	...

0801157c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d121      	bne.n	80115d2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	4b27      	ldr	r3, [pc, #156]	@ (8011630 <FMC_SDRAM_Init+0xb4>)
 8011594:	4013      	ands	r3, r2
 8011596:	683a      	ldr	r2, [r7, #0]
 8011598:	6851      	ldr	r1, [r2, #4]
 801159a:	683a      	ldr	r2, [r7, #0]
 801159c:	6892      	ldr	r2, [r2, #8]
 801159e:	4311      	orrs	r1, r2
 80115a0:	683a      	ldr	r2, [r7, #0]
 80115a2:	68d2      	ldr	r2, [r2, #12]
 80115a4:	4311      	orrs	r1, r2
 80115a6:	683a      	ldr	r2, [r7, #0]
 80115a8:	6912      	ldr	r2, [r2, #16]
 80115aa:	4311      	orrs	r1, r2
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	6952      	ldr	r2, [r2, #20]
 80115b0:	4311      	orrs	r1, r2
 80115b2:	683a      	ldr	r2, [r7, #0]
 80115b4:	6992      	ldr	r2, [r2, #24]
 80115b6:	4311      	orrs	r1, r2
 80115b8:	683a      	ldr	r2, [r7, #0]
 80115ba:	69d2      	ldr	r2, [r2, #28]
 80115bc:	4311      	orrs	r1, r2
 80115be:	683a      	ldr	r2, [r7, #0]
 80115c0:	6a12      	ldr	r2, [r2, #32]
 80115c2:	4311      	orrs	r1, r2
 80115c4:	683a      	ldr	r2, [r7, #0]
 80115c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80115c8:	430a      	orrs	r2, r1
 80115ca:	431a      	orrs	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	601a      	str	r2, [r3, #0]
 80115d0:	e026      	b.n	8011620 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	69d9      	ldr	r1, [r3, #28]
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	6a1b      	ldr	r3, [r3, #32]
 80115e2:	4319      	orrs	r1, r3
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115e8:	430b      	orrs	r3, r1
 80115ea:	431a      	orrs	r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685a      	ldr	r2, [r3, #4]
 80115f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011630 <FMC_SDRAM_Init+0xb4>)
 80115f6:	4013      	ands	r3, r2
 80115f8:	683a      	ldr	r2, [r7, #0]
 80115fa:	6851      	ldr	r1, [r2, #4]
 80115fc:	683a      	ldr	r2, [r7, #0]
 80115fe:	6892      	ldr	r2, [r2, #8]
 8011600:	4311      	orrs	r1, r2
 8011602:	683a      	ldr	r2, [r7, #0]
 8011604:	68d2      	ldr	r2, [r2, #12]
 8011606:	4311      	orrs	r1, r2
 8011608:	683a      	ldr	r2, [r7, #0]
 801160a:	6912      	ldr	r2, [r2, #16]
 801160c:	4311      	orrs	r1, r2
 801160e:	683a      	ldr	r2, [r7, #0]
 8011610:	6952      	ldr	r2, [r2, #20]
 8011612:	4311      	orrs	r1, r2
 8011614:	683a      	ldr	r2, [r7, #0]
 8011616:	6992      	ldr	r2, [r2, #24]
 8011618:	430a      	orrs	r2, r1
 801161a:	431a      	orrs	r2, r3
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	370c      	adds	r7, #12
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	ffff8000 	.word	0xffff8000

08011634 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011634:	b480      	push	{r7}
 8011636:	b085      	sub	sp, #20
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d128      	bne.n	8011698 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	1e59      	subs	r1, r3, #1
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	3b01      	subs	r3, #1
 801165a:	011b      	lsls	r3, r3, #4
 801165c:	4319      	orrs	r1, r3
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	689b      	ldr	r3, [r3, #8]
 8011662:	3b01      	subs	r3, #1
 8011664:	021b      	lsls	r3, r3, #8
 8011666:	4319      	orrs	r1, r3
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	3b01      	subs	r3, #1
 801166e:	031b      	lsls	r3, r3, #12
 8011670:	4319      	orrs	r1, r3
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	3b01      	subs	r3, #1
 8011678:	041b      	lsls	r3, r3, #16
 801167a:	4319      	orrs	r1, r3
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	695b      	ldr	r3, [r3, #20]
 8011680:	3b01      	subs	r3, #1
 8011682:	051b      	lsls	r3, r3, #20
 8011684:	4319      	orrs	r1, r3
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	699b      	ldr	r3, [r3, #24]
 801168a:	3b01      	subs	r3, #1
 801168c:	061b      	lsls	r3, r3, #24
 801168e:	430b      	orrs	r3, r1
 8011690:	431a      	orrs	r2, r3
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	609a      	str	r2, [r3, #8]
 8011696:	e02d      	b.n	80116f4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	689a      	ldr	r2, [r3, #8]
 801169c:	4b19      	ldr	r3, [pc, #100]	@ (8011704 <FMC_SDRAM_Timing_Init+0xd0>)
 801169e:	4013      	ands	r3, r2
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	68d2      	ldr	r2, [r2, #12]
 80116a4:	3a01      	subs	r2, #1
 80116a6:	0311      	lsls	r1, r2, #12
 80116a8:	68ba      	ldr	r2, [r7, #8]
 80116aa:	6952      	ldr	r2, [r2, #20]
 80116ac:	3a01      	subs	r2, #1
 80116ae:	0512      	lsls	r2, r2, #20
 80116b0:	430a      	orrs	r2, r1
 80116b2:	431a      	orrs	r2, r3
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	1e59      	subs	r1, r3, #1
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	3b01      	subs	r3, #1
 80116cc:	011b      	lsls	r3, r3, #4
 80116ce:	4319      	orrs	r1, r3
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	689b      	ldr	r3, [r3, #8]
 80116d4:	3b01      	subs	r3, #1
 80116d6:	021b      	lsls	r3, r3, #8
 80116d8:	4319      	orrs	r1, r3
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	691b      	ldr	r3, [r3, #16]
 80116de:	3b01      	subs	r3, #1
 80116e0:	041b      	lsls	r3, r3, #16
 80116e2:	4319      	orrs	r1, r3
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	699b      	ldr	r3, [r3, #24]
 80116e8:	3b01      	subs	r3, #1
 80116ea:	061b      	lsls	r3, r3, #24
 80116ec:	430b      	orrs	r3, r1
 80116ee:	431a      	orrs	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3714      	adds	r7, #20
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	ff0f0fff 	.word	0xff0f0fff

08011708 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011708:	b480      	push	{r7}
 801170a:	b085      	sub	sp, #20
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	691a      	ldr	r2, [r3, #16]
 8011718:	4b0c      	ldr	r3, [pc, #48]	@ (801174c <FMC_SDRAM_SendCommand+0x44>)
 801171a:	4013      	ands	r3, r2
 801171c:	68ba      	ldr	r2, [r7, #8]
 801171e:	6811      	ldr	r1, [r2, #0]
 8011720:	68ba      	ldr	r2, [r7, #8]
 8011722:	6852      	ldr	r2, [r2, #4]
 8011724:	4311      	orrs	r1, r2
 8011726:	68ba      	ldr	r2, [r7, #8]
 8011728:	6892      	ldr	r2, [r2, #8]
 801172a:	3a01      	subs	r2, #1
 801172c:	0152      	lsls	r2, r2, #5
 801172e:	4311      	orrs	r1, r2
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	68d2      	ldr	r2, [r2, #12]
 8011734:	0252      	lsls	r2, r2, #9
 8011736:	430a      	orrs	r2, r1
 8011738:	431a      	orrs	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801173e:	2300      	movs	r3, #0
}
 8011740:	4618      	mov	r0, r3
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr
 801174c:	ffc00000 	.word	0xffc00000

08011750 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	695a      	ldr	r2, [r3, #20]
 801175e:	4b07      	ldr	r3, [pc, #28]	@ (801177c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011760:	4013      	ands	r3, r2
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	0052      	lsls	r2, r2, #1
 8011766:	431a      	orrs	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 801176c:	2300      	movs	r3, #0
}
 801176e:	4618      	mov	r0, r3
 8011770:	370c      	adds	r7, #12
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	ffffc001 	.word	0xffffc001

08011780 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011780:	b084      	sub	sp, #16
 8011782:	b480      	push	{r7}
 8011784:	b085      	sub	sp, #20
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
 801178a:	f107 001c 	add.w	r0, r7, #28
 801178e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011792:	2300      	movs	r3, #0
 8011794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011796:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011798:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801179a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 801179e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80117a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80117a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80117a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80117a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80117a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80117aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	4b07      	ldr	r3, [pc, #28]	@ (80117d4 <SDMMC_Init+0x54>)
 80117b8:	4013      	ands	r3, r2
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	431a      	orrs	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80117c2:	2300      	movs	r3, #0
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3714      	adds	r7, #20
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	b004      	add	sp, #16
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop
 80117d4:	ffff8100 	.word	0xffff8100

080117d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80117d8:	b480      	push	{r7}
 80117da:	b083      	sub	sp, #12
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	370c      	adds	r7, #12
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80117f2:	b480      	push	{r7}
 80117f4:	b083      	sub	sp, #12
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2203      	movs	r2, #3
 8011820:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f003 0303 	and.w	r3, r3, #3
}
 8011840:	4618      	mov	r0, r3
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011856:	2300      	movs	r3, #0
 8011858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801186a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011870:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011876:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	4313      	orrs	r3, r2
 801187c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	68da      	ldr	r2, [r3, #12]
 8011882:	4b06      	ldr	r3, [pc, #24]	@ (801189c <SDMMC_SendCommand+0x50>)
 8011884:	4013      	ands	r3, r2
 8011886:	68fa      	ldr	r2, [r7, #12]
 8011888:	431a      	orrs	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801188e:	2300      	movs	r3, #0
}
 8011890:	4618      	mov	r0, r3
 8011892:	3714      	adds	r7, #20
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	fffff000 	.word	0xfffff000

080118a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	691b      	ldr	r3, [r3, #16]
 80118ac:	b2db      	uxtb	r3, r3
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	370c      	adds	r7, #12
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr

080118ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80118ba:	b480      	push	{r7}
 80118bc:	b085      	sub	sp, #20
 80118be:	af00      	add	r7, sp, #0
 80118c0:	6078      	str	r0, [r7, #4]
 80118c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	3314      	adds	r3, #20
 80118c8:	461a      	mov	r2, r3
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	4413      	add	r3, r2
 80118ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
}  
 80118d4:	4618      	mov	r0, r3
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	685a      	ldr	r2, [r3, #4]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011906:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801190c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011912:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011914:	68fa      	ldr	r2, [r7, #12]
 8011916:	4313      	orrs	r3, r2
 8011918:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801191e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	431a      	orrs	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801192a:	2300      	movs	r3, #0

}
 801192c:	4618      	mov	r0, r3
 801192e:	3714      	adds	r7, #20
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr

08011938 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b088      	sub	sp, #32
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011946:	2310      	movs	r3, #16
 8011948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801194a:	2340      	movs	r3, #64	@ 0x40
 801194c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801194e:	2300      	movs	r3, #0
 8011950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011958:	f107 0308 	add.w	r3, r7, #8
 801195c:	4619      	mov	r1, r3
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7ff ff74 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011968:	2110      	movs	r1, #16
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f9d6 	bl	8011d1c <SDMMC_GetCmdResp1>
 8011970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011972:	69fb      	ldr	r3, [r7, #28]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3720      	adds	r7, #32
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b088      	sub	sp, #32
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801198a:	2311      	movs	r3, #17
 801198c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801198e:	2340      	movs	r3, #64	@ 0x40
 8011990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011992:	2300      	movs	r3, #0
 8011994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801199a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801199c:	f107 0308 	add.w	r3, r7, #8
 80119a0:	4619      	mov	r1, r3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7ff ff52 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80119a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80119ac:	2111      	movs	r1, #17
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 f9b4 	bl	8011d1c <SDMMC_GetCmdResp1>
 80119b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119b6:	69fb      	ldr	r3, [r7, #28]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3720      	adds	r7, #32
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b088      	sub	sp, #32
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80119ce:	2312      	movs	r3, #18
 80119d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119d2:	2340      	movs	r3, #64	@ 0x40
 80119d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119d6:	2300      	movs	r3, #0
 80119d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119e0:	f107 0308 	add.w	r3, r7, #8
 80119e4:	4619      	mov	r1, r3
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f7ff ff30 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80119ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80119f0:	2112      	movs	r1, #18
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 f992 	bl	8011d1c <SDMMC_GetCmdResp1>
 80119f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119fa:	69fb      	ldr	r3, [r7, #28]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3720      	adds	r7, #32
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b088      	sub	sp, #32
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011a12:	2318      	movs	r3, #24
 8011a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a16:	2340      	movs	r3, #64	@ 0x40
 8011a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a24:	f107 0308 	add.w	r3, r7, #8
 8011a28:	4619      	mov	r1, r3
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f7ff ff0e 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a34:	2118      	movs	r1, #24
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f000 f970 	bl	8011d1c <SDMMC_GetCmdResp1>
 8011a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a3e:	69fb      	ldr	r3, [r7, #28]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3720      	adds	r7, #32
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b088      	sub	sp, #32
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011a56:	2319      	movs	r3, #25
 8011a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a5a:	2340      	movs	r3, #64	@ 0x40
 8011a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a68:	f107 0308 	add.w	r3, r7, #8
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7ff feec 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a78:	2119      	movs	r1, #25
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f000 f94e 	bl	8011d1c <SDMMC_GetCmdResp1>
 8011a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a82:	69fb      	ldr	r3, [r7, #28]
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3720      	adds	r7, #32
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b088      	sub	sp, #32
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011a94:	2300      	movs	r3, #0
 8011a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011a98:	230c      	movs	r3, #12
 8011a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a9c:	2340      	movs	r3, #64	@ 0x40
 8011a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011aa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011aaa:	f107 0308 	add.w	r3, r7, #8
 8011aae:	4619      	mov	r1, r3
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7ff fecb 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011ab6:	4a05      	ldr	r2, [pc, #20]	@ (8011acc <SDMMC_CmdStopTransfer+0x40>)
 8011ab8:	210c      	movs	r1, #12
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 f92e 	bl	8011d1c <SDMMC_GetCmdResp1>
 8011ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ac2:	69fb      	ldr	r3, [r7, #28]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3720      	adds	r7, #32
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	05f5e100 	.word	0x05f5e100

08011ad0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b08a      	sub	sp, #40	@ 0x28
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011ae0:	2307      	movs	r3, #7
 8011ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ae4:	2340      	movs	r3, #64	@ 0x40
 8011ae6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011af0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011af2:	f107 0310 	add.w	r3, r7, #16
 8011af6:	4619      	mov	r1, r3
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f7ff fea7 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011b02:	2107      	movs	r1, #7
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f000 f909 	bl	8011d1c <SDMMC_GetCmdResp1>
 8011b0a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3728      	adds	r7, #40	@ 0x28
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011b16:	b580      	push	{r7, lr}
 8011b18:	b088      	sub	sp, #32
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011b22:	2300      	movs	r3, #0
 8011b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011b26:	2300      	movs	r3, #0
 8011b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b34:	f107 0308 	add.w	r3, r7, #8
 8011b38:	4619      	mov	r1, r3
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7ff fe86 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f000 fb23 	bl	801218c <SDMMC_GetCmdError>
 8011b46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b48:	69fb      	ldr	r3, [r7, #28]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3720      	adds	r7, #32
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b088      	sub	sp, #32
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011b5a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8011b5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011b60:	2308      	movs	r3, #8
 8011b62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b64:	2340      	movs	r3, #64	@ 0x40
 8011b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b72:	f107 0308 	add.w	r3, r7, #8
 8011b76:	4619      	mov	r1, r3
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff fe67 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f000 fab6 	bl	80120f0 <SDMMC_GetCmdResp7>
 8011b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b86:	69fb      	ldr	r3, [r7, #28]
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3720      	adds	r7, #32
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b088      	sub	sp, #32
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011b9e:	2337      	movs	r3, #55	@ 0x37
 8011ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ba2:	2340      	movs	r3, #64	@ 0x40
 8011ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bb0:	f107 0308 	add.w	r3, r7, #8
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f7ff fe48 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011bc0:	2137      	movs	r1, #55	@ 0x37
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f000 f8aa 	bl	8011d1c <SDMMC_GetCmdResp1>
 8011bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011bca:	69fb      	ldr	r3, [r7, #28]
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3720      	adds	r7, #32
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b088      	sub	sp, #32
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011bde:	683a      	ldr	r2, [r7, #0]
 8011be0:	4b0d      	ldr	r3, [pc, #52]	@ (8011c18 <SDMMC_CmdAppOperCommand+0x44>)
 8011be2:	4313      	orrs	r3, r2
 8011be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011be6:	2329      	movs	r3, #41	@ 0x29
 8011be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bea:	2340      	movs	r3, #64	@ 0x40
 8011bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bf8:	f107 0308 	add.w	r3, r7, #8
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7ff fe24 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f000 f9bf 	bl	8011f88 <SDMMC_GetCmdResp3>
 8011c0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c0c:	69fb      	ldr	r3, [r7, #28]
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3720      	adds	r7, #32
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	80100000 	.word	0x80100000

08011c1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b088      	sub	sp, #32
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011c24:	2300      	movs	r3, #0
 8011c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011c28:	2302      	movs	r3, #2
 8011c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011c2c:	23c0      	movs	r3, #192	@ 0xc0
 8011c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c30:	2300      	movs	r3, #0
 8011c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c3a:	f107 0308 	add.w	r3, r7, #8
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7ff fe03 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f000 f956 	bl	8011ef8 <SDMMC_GetCmdResp2>
 8011c4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c4e:	69fb      	ldr	r3, [r7, #28]
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3720      	adds	r7, #32
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b088      	sub	sp, #32
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011c66:	2309      	movs	r3, #9
 8011c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011c6a:	23c0      	movs	r3, #192	@ 0xc0
 8011c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c78:	f107 0308 	add.w	r3, r7, #8
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7ff fde4 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 f937 	bl	8011ef8 <SDMMC_GetCmdResp2>
 8011c8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c8c:	69fb      	ldr	r3, [r7, #28]
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3720      	adds	r7, #32
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}

08011c96 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011c96:	b580      	push	{r7, lr}
 8011c98:	b088      	sub	sp, #32
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	6078      	str	r0, [r7, #4]
 8011c9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ca8:	2340      	movs	r3, #64	@ 0x40
 8011caa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cac:	2300      	movs	r3, #0
 8011cae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cb6:	f107 0308 	add.w	r3, r7, #8
 8011cba:	4619      	mov	r1, r3
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f7ff fdc5 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011cc2:	683a      	ldr	r2, [r7, #0]
 8011cc4:	2103      	movs	r1, #3
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 f99c 	bl	8012004 <SDMMC_GetCmdResp6>
 8011ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cce:	69fb      	ldr	r3, [r7, #28]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3720      	adds	r7, #32
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b088      	sub	sp, #32
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011ce6:	230d      	movs	r3, #13
 8011ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cea:	2340      	movs	r3, #64	@ 0x40
 8011cec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cf8:	f107 0308 	add.w	r3, r7, #8
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ff fda4 	bl	801184c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011d08:	210d      	movs	r1, #13
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 f806 	bl	8011d1c <SDMMC_GetCmdResp1>
 8011d10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d12:	69fb      	ldr	r3, [r7, #28]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3720      	adds	r7, #32
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b088      	sub	sp, #32
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	460b      	mov	r3, r1
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d2a:	4b70      	ldr	r3, [pc, #448]	@ (8011eec <SDMMC_GetCmdResp1+0x1d0>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	4a70      	ldr	r2, [pc, #448]	@ (8011ef0 <SDMMC_GetCmdResp1+0x1d4>)
 8011d30:	fba2 2303 	umull	r2, r3, r2, r3
 8011d34:	0a5a      	lsrs	r2, r3, #9
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	fb02 f303 	mul.w	r3, r2, r3
 8011d3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	1e5a      	subs	r2, r3, #1
 8011d42:	61fa      	str	r2, [r7, #28]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d102      	bne.n	8011d4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011d48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011d4c:	e0c9      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d0ef      	beq.n	8011d3e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1ea      	bne.n	8011d3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d6c:	f003 0304 	and.w	r3, r3, #4
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d004      	beq.n	8011d7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2204      	movs	r2, #4
 8011d78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011d7a:	2304      	movs	r3, #4
 8011d7c:	e0b1      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d004      	beq.n	8011d94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d90:	2301      	movs	r3, #1
 8011d92:	e0a6      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	22c5      	movs	r2, #197	@ 0xc5
 8011d98:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011d9a:	68f8      	ldr	r0, [r7, #12]
 8011d9c:	f7ff fd80 	bl	80118a0 <SDMMC_GetCommandResponse>
 8011da0:	4603      	mov	r3, r0
 8011da2:	461a      	mov	r2, r3
 8011da4:	7afb      	ldrb	r3, [r7, #11]
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d001      	beq.n	8011dae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011daa:	2301      	movs	r3, #1
 8011dac:	e099      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011dae:	2100      	movs	r1, #0
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f7ff fd82 	bl	80118ba <SDMMC_GetResponse>
 8011db6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011db8:	697a      	ldr	r2, [r7, #20]
 8011dba:	4b4e      	ldr	r3, [pc, #312]	@ (8011ef4 <SDMMC_GetCmdResp1+0x1d8>)
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d101      	bne.n	8011dc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	e08d      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	da02      	bge.n	8011dd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011dd0:	e087      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d001      	beq.n	8011de0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011ddc:	2340      	movs	r3, #64	@ 0x40
 8011dde:	e080      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d001      	beq.n	8011dee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011dea:	2380      	movs	r3, #128	@ 0x80
 8011dec:	e079      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d002      	beq.n	8011dfe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011dfc:	e071      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d002      	beq.n	8011e0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011e0c:	e069      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d002      	beq.n	8011e1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e1c:	e061      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d002      	beq.n	8011e2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011e28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011e2c:	e059      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d002      	beq.n	8011e3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011e3c:	e051      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d002      	beq.n	8011e4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011e4c:	e049      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d002      	beq.n	8011e5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011e58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011e5c:	e041      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d002      	beq.n	8011e6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011e6c:	e039      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d002      	beq.n	8011e7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011e78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011e7c:	e031      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d002      	beq.n	8011e8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011e88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8011e8c:	e029      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d002      	beq.n	8011e9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011e98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011e9c:	e021      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d002      	beq.n	8011eae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011ea8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011eac:	e019      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d002      	beq.n	8011ebe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011eb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011ebc:	e011      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d002      	beq.n	8011ece <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011ec8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011ecc:	e009      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	f003 0308 	and.w	r3, r3, #8
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d002      	beq.n	8011ede <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011ed8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011edc:	e001      	b.n	8011ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011ede:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3720      	adds	r7, #32
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	20000054 	.word	0x20000054
 8011ef0:	10624dd3 	.word	0x10624dd3
 8011ef4:	fdffe008 	.word	0xfdffe008

08011ef8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f00:	4b1f      	ldr	r3, [pc, #124]	@ (8011f80 <SDMMC_GetCmdResp2+0x88>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	4a1f      	ldr	r2, [pc, #124]	@ (8011f84 <SDMMC_GetCmdResp2+0x8c>)
 8011f06:	fba2 2303 	umull	r2, r3, r2, r3
 8011f0a:	0a5b      	lsrs	r3, r3, #9
 8011f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011f10:	fb02 f303 	mul.w	r3, r2, r3
 8011f14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	1e5a      	subs	r2, r3, #1
 8011f1a:	60fa      	str	r2, [r7, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d102      	bne.n	8011f26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011f24:	e026      	b.n	8011f74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d0ef      	beq.n	8011f16 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1ea      	bne.n	8011f16 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f44:	f003 0304 	and.w	r3, r3, #4
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d004      	beq.n	8011f56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2204      	movs	r2, #4
 8011f50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011f52:	2304      	movs	r3, #4
 8011f54:	e00e      	b.n	8011f74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d004      	beq.n	8011f6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2201      	movs	r2, #1
 8011f66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	e003      	b.n	8011f74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	22c5      	movs	r2, #197	@ 0xc5
 8011f70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3714      	adds	r7, #20
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr
 8011f80:	20000054 	.word	0x20000054
 8011f84:	10624dd3 	.word	0x10624dd3

08011f88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f90:	4b1a      	ldr	r3, [pc, #104]	@ (8011ffc <SDMMC_GetCmdResp3+0x74>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4a1a      	ldr	r2, [pc, #104]	@ (8012000 <SDMMC_GetCmdResp3+0x78>)
 8011f96:	fba2 2303 	umull	r2, r3, r2, r3
 8011f9a:	0a5b      	lsrs	r3, r3, #9
 8011f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011fa0:	fb02 f303 	mul.w	r3, r2, r3
 8011fa4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	1e5a      	subs	r2, r3, #1
 8011faa:	60fa      	str	r2, [r7, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011fb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011fb4:	e01b      	b.n	8011fee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d0ef      	beq.n	8011fa6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d1ea      	bne.n	8011fa6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fd4:	f003 0304 	and.w	r3, r3, #4
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d004      	beq.n	8011fe6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2204      	movs	r2, #4
 8011fe0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011fe2:	2304      	movs	r3, #4
 8011fe4:	e003      	b.n	8011fee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	22c5      	movs	r2, #197	@ 0xc5
 8011fea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011fec:	2300      	movs	r3, #0
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3714      	adds	r7, #20
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop
 8011ffc:	20000054 	.word	0x20000054
 8012000:	10624dd3 	.word	0x10624dd3

08012004 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b088      	sub	sp, #32
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	460b      	mov	r3, r1
 801200e:	607a      	str	r2, [r7, #4]
 8012010:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012012:	4b35      	ldr	r3, [pc, #212]	@ (80120e8 <SDMMC_GetCmdResp6+0xe4>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4a35      	ldr	r2, [pc, #212]	@ (80120ec <SDMMC_GetCmdResp6+0xe8>)
 8012018:	fba2 2303 	umull	r2, r3, r2, r3
 801201c:	0a5b      	lsrs	r3, r3, #9
 801201e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012022:	fb02 f303 	mul.w	r3, r2, r3
 8012026:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	1e5a      	subs	r2, r3, #1
 801202c:	61fa      	str	r2, [r7, #28]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d102      	bne.n	8012038 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012032:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012036:	e052      	b.n	80120de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801203c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801203e:	69bb      	ldr	r3, [r7, #24]
 8012040:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012044:	2b00      	cmp	r3, #0
 8012046:	d0ef      	beq.n	8012028 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801204e:	2b00      	cmp	r3, #0
 8012050:	d1ea      	bne.n	8012028 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012056:	f003 0304 	and.w	r3, r3, #4
 801205a:	2b00      	cmp	r3, #0
 801205c:	d004      	beq.n	8012068 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	2204      	movs	r2, #4
 8012062:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012064:	2304      	movs	r3, #4
 8012066:	e03a      	b.n	80120de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b00      	cmp	r3, #0
 8012072:	d004      	beq.n	801207e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2201      	movs	r2, #1
 8012078:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801207a:	2301      	movs	r3, #1
 801207c:	e02f      	b.n	80120de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f7ff fc0e 	bl	80118a0 <SDMMC_GetCommandResponse>
 8012084:	4603      	mov	r3, r0
 8012086:	461a      	mov	r2, r3
 8012088:	7afb      	ldrb	r3, [r7, #11]
 801208a:	4293      	cmp	r3, r2
 801208c:	d001      	beq.n	8012092 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801208e:	2301      	movs	r3, #1
 8012090:	e025      	b.n	80120de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	22c5      	movs	r2, #197	@ 0xc5
 8012096:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012098:	2100      	movs	r1, #0
 801209a:	68f8      	ldr	r0, [r7, #12]
 801209c:	f7ff fc0d 	bl	80118ba <SDMMC_GetResponse>
 80120a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d106      	bne.n	80120ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	0c1b      	lsrs	r3, r3, #16
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80120b6:	2300      	movs	r3, #0
 80120b8:	e011      	b.n	80120de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d002      	beq.n	80120ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80120c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80120c8:	e009      	b.n	80120de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d002      	beq.n	80120da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80120d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80120d8:	e001      	b.n	80120de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80120da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3720      	adds	r7, #32
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	20000054 	.word	0x20000054
 80120ec:	10624dd3 	.word	0x10624dd3

080120f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80120f8:	4b22      	ldr	r3, [pc, #136]	@ (8012184 <SDMMC_GetCmdResp7+0x94>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a22      	ldr	r2, [pc, #136]	@ (8012188 <SDMMC_GetCmdResp7+0x98>)
 80120fe:	fba2 2303 	umull	r2, r3, r2, r3
 8012102:	0a5b      	lsrs	r3, r3, #9
 8012104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012108:	fb02 f303 	mul.w	r3, r2, r3
 801210c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	1e5a      	subs	r2, r3, #1
 8012112:	60fa      	str	r2, [r7, #12]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d102      	bne.n	801211e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012118:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801211c:	e02c      	b.n	8012178 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012122:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801212a:	2b00      	cmp	r3, #0
 801212c:	d0ef      	beq.n	801210e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1ea      	bne.n	801210e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801213c:	f003 0304 	and.w	r3, r3, #4
 8012140:	2b00      	cmp	r3, #0
 8012142:	d004      	beq.n	801214e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2204      	movs	r2, #4
 8012148:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801214a:	2304      	movs	r3, #4
 801214c:	e014      	b.n	8012178 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012152:	f003 0301 	and.w	r3, r3, #1
 8012156:	2b00      	cmp	r3, #0
 8012158:	d004      	beq.n	8012164 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2201      	movs	r2, #1
 801215e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012160:	2301      	movs	r3, #1
 8012162:	e009      	b.n	8012178 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2240      	movs	r2, #64	@ 0x40
 8012174:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012176:	2300      	movs	r3, #0
  
}
 8012178:	4618      	mov	r0, r3
 801217a:	3714      	adds	r7, #20
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr
 8012184:	20000054 	.word	0x20000054
 8012188:	10624dd3 	.word	0x10624dd3

0801218c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012194:	4b11      	ldr	r3, [pc, #68]	@ (80121dc <SDMMC_GetCmdError+0x50>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	4a11      	ldr	r2, [pc, #68]	@ (80121e0 <SDMMC_GetCmdError+0x54>)
 801219a:	fba2 2303 	umull	r2, r3, r2, r3
 801219e:	0a5b      	lsrs	r3, r3, #9
 80121a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80121a4:	fb02 f303 	mul.w	r3, r2, r3
 80121a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	1e5a      	subs	r2, r3, #1
 80121ae:	60fa      	str	r2, [r7, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d102      	bne.n	80121ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80121b8:	e009      	b.n	80121ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d0f1      	beq.n	80121aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	22c5      	movs	r2, #197	@ 0xc5
 80121ca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3714      	adds	r7, #20
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	20000054 	.word	0x20000054
 80121e0:	10624dd3 	.word	0x10624dd3

080121e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80121e8:	4904      	ldr	r1, [pc, #16]	@ (80121fc <MX_FATFS_Init+0x18>)
 80121ea:	4805      	ldr	r0, [pc, #20]	@ (8012200 <MX_FATFS_Init+0x1c>)
 80121ec:	f000 fb58 	bl	80128a0 <FATFS_LinkDriver>
 80121f0:	4603      	mov	r3, r0
 80121f2:	461a      	mov	r2, r3
 80121f4:	4b03      	ldr	r3, [pc, #12]	@ (8012204 <MX_FATFS_Init+0x20>)
 80121f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80121f8:	bf00      	nop
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	200010b4 	.word	0x200010b4
 8012200:	0802566c 	.word	0x0802566c
 8012204:	200010b0 	.word	0x200010b0

08012208 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012208:	b480      	push	{r7}
 801220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801220c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801220e:	4618      	mov	r0, r3
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801221e:	2300      	movs	r3, #0
 8012220:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012222:	f000 f888 	bl	8012336 <BSP_SD_IsDetected>
 8012226:	4603      	mov	r3, r0
 8012228:	2b01      	cmp	r3, #1
 801222a:	d001      	beq.n	8012230 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801222c:	2302      	movs	r3, #2
 801222e:	e005      	b.n	801223c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012230:	4804      	ldr	r0, [pc, #16]	@ (8012244 <BSP_SD_Init+0x2c>)
 8012232:	f7fd f8b8 	bl	800f3a6 <HAL_SD_Init>
 8012236:	4603      	mov	r3, r0
 8012238:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801223a:	79fb      	ldrb	r3, [r7, #7]
}
 801223c:	4618      	mov	r0, r3
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	20000728 	.word	0x20000728

08012248 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b086      	sub	sp, #24
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012254:	2300      	movs	r3, #0
 8012256:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	68ba      	ldr	r2, [r7, #8]
 801225c:	68f9      	ldr	r1, [r7, #12]
 801225e:	4806      	ldr	r0, [pc, #24]	@ (8012278 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012260:	f7fd f95a 	bl	800f518 <HAL_SD_ReadBlocks_DMA>
 8012264:	4603      	mov	r3, r0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d001      	beq.n	801226e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801226a:	2301      	movs	r3, #1
 801226c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012270:	4618      	mov	r0, r3
 8012272:	3718      	adds	r7, #24
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	20000728 	.word	0x20000728

0801227c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b086      	sub	sp, #24
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012288:	2300      	movs	r3, #0
 801228a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	68ba      	ldr	r2, [r7, #8]
 8012290:	68f9      	ldr	r1, [r7, #12]
 8012292:	4806      	ldr	r0, [pc, #24]	@ (80122ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8012294:	f7fd fa22 	bl	800f6dc <HAL_SD_WriteBlocks_DMA>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d001      	beq.n	80122a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801229e:	2301      	movs	r3, #1
 80122a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80122a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3718      	adds	r7, #24
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	20000728 	.word	0x20000728

080122b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80122b4:	4805      	ldr	r0, [pc, #20]	@ (80122cc <BSP_SD_GetCardState+0x1c>)
 80122b6:	f7fd fe47 	bl	800ff48 <HAL_SD_GetCardState>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b04      	cmp	r3, #4
 80122be:	bf14      	ite	ne
 80122c0:	2301      	movne	r3, #1
 80122c2:	2300      	moveq	r3, #0
 80122c4:	b2db      	uxtb	r3, r3
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop
 80122cc:	20000728 	.word	0x20000728

080122d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b082      	sub	sp, #8
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80122d8:	6879      	ldr	r1, [r7, #4]
 80122da:	4803      	ldr	r0, [pc, #12]	@ (80122e8 <BSP_SD_GetCardInfo+0x18>)
 80122dc:	f7fd fe08 	bl	800fef0 <HAL_SD_GetCardInfo>
}
 80122e0:	bf00      	nop
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	20000728 	.word	0x20000728

080122ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80122f4:	f000 f818 	bl	8012328 <BSP_SD_AbortCallback>
}
 80122f8:	bf00      	nop
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012308:	f000 f9c4 	bl	8012694 <BSP_SD_WriteCpltCallback>
}
 801230c:	bf00      	nop
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801231c:	f000 f9c8 	bl	80126b0 <BSP_SD_ReadCpltCallback>
}
 8012320:	bf00      	nop
 8012322:	3708      	adds	r7, #8
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012328:	b480      	push	{r7}
 801232a:	af00      	add	r7, sp, #0

}
 801232c:	bf00      	nop
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012336:	b580      	push	{r7, lr}
 8012338:	b082      	sub	sp, #8
 801233a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801233c:	2301      	movs	r3, #1
 801233e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012340:	f000 f80c 	bl	801235c <BSP_PlatformIsDetected>
 8012344:	4603      	mov	r3, r0
 8012346:	2b00      	cmp	r3, #0
 8012348:	d101      	bne.n	801234e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801234a:	2300      	movs	r3, #0
 801234c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801234e:	79fb      	ldrb	r3, [r7, #7]
 8012350:	b2db      	uxtb	r3, r3
}
 8012352:	4618      	mov	r0, r3
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
	...

0801235c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012362:	2301      	movs	r3, #1
 8012364:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012366:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801236a:	4806      	ldr	r0, [pc, #24]	@ (8012384 <BSP_PlatformIsDetected+0x28>)
 801236c:	f7fa f81e 	bl	800c3ac <HAL_GPIO_ReadPin>
 8012370:	4603      	mov	r3, r0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d001      	beq.n	801237a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012376:	2300      	movs	r3, #0
 8012378:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801237a:	79fb      	ldrb	r3, [r7, #7]
}
 801237c:	4618      	mov	r0, r3
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}
 8012384:	40020800 	.word	0x40020800

08012388 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012390:	f000 fb1e 	bl	80129d0 <osKernelSysTick>
 8012394:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8012396:	e006      	b.n	80123a6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012398:	f7ff ff8a 	bl	80122b0 <BSP_SD_GetCardState>
 801239c:	4603      	mov	r3, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d101      	bne.n	80123a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80123a2:	2300      	movs	r3, #0
 80123a4:	e009      	b.n	80123ba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80123a6:	f000 fb13 	bl	80129d0 <osKernelSysTick>
 80123aa:	4602      	mov	r2, r0
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	1ad3      	subs	r3, r2, r3
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d8f0      	bhi.n	8012398 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80123b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3710      	adds	r7, #16
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
	...

080123c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	4603      	mov	r3, r0
 80123cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80123ce:	4b0b      	ldr	r3, [pc, #44]	@ (80123fc <SD_CheckStatus+0x38>)
 80123d0:	2201      	movs	r2, #1
 80123d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80123d4:	f7ff ff6c 	bl	80122b0 <BSP_SD_GetCardState>
 80123d8:	4603      	mov	r3, r0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d107      	bne.n	80123ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80123de:	4b07      	ldr	r3, [pc, #28]	@ (80123fc <SD_CheckStatus+0x38>)
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	f023 0301 	bic.w	r3, r3, #1
 80123e8:	b2da      	uxtb	r2, r3
 80123ea:	4b04      	ldr	r3, [pc, #16]	@ (80123fc <SD_CheckStatus+0x38>)
 80123ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80123ee:	4b03      	ldr	r3, [pc, #12]	@ (80123fc <SD_CheckStatus+0x38>)
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	b2db      	uxtb	r3, r3
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3708      	adds	r7, #8
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	20000099 	.word	0x20000099

08012400 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012400:	b590      	push	{r4, r7, lr}
 8012402:	b087      	sub	sp, #28
 8012404:	af00      	add	r7, sp, #0
 8012406:	4603      	mov	r3, r0
 8012408:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801240a:	4b20      	ldr	r3, [pc, #128]	@ (801248c <SD_initialize+0x8c>)
 801240c:	2201      	movs	r2, #1
 801240e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8012410:	f000 fad2 	bl	80129b8 <osKernelRunning>
 8012414:	4603      	mov	r3, r0
 8012416:	2b00      	cmp	r3, #0
 8012418:	d030      	beq.n	801247c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801241a:	f7ff fefd 	bl	8012218 <BSP_SD_Init>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d107      	bne.n	8012434 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012424:	79fb      	ldrb	r3, [r7, #7]
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff ffcc 	bl	80123c4 <SD_CheckStatus>
 801242c:	4603      	mov	r3, r0
 801242e:	461a      	mov	r2, r3
 8012430:	4b16      	ldr	r3, [pc, #88]	@ (801248c <SD_initialize+0x8c>)
 8012432:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012434:	4b15      	ldr	r3, [pc, #84]	@ (801248c <SD_initialize+0x8c>)
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	b2db      	uxtb	r3, r3
 801243a:	2b01      	cmp	r3, #1
 801243c:	d01e      	beq.n	801247c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 801243e:	4b14      	ldr	r3, [pc, #80]	@ (8012490 <SD_initialize+0x90>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d10e      	bne.n	8012464 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8012446:	4b13      	ldr	r3, [pc, #76]	@ (8012494 <SD_initialize+0x94>)
 8012448:	f107 0408 	add.w	r4, r7, #8
 801244c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801244e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012452:	f107 0308 	add.w	r3, r7, #8
 8012456:	2100      	movs	r1, #0
 8012458:	4618      	mov	r0, r3
 801245a:	f000 fc0a 	bl	8012c72 <osMessageCreate>
 801245e:	4603      	mov	r3, r0
 8012460:	4a0b      	ldr	r2, [pc, #44]	@ (8012490 <SD_initialize+0x90>)
 8012462:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012464:	4b0a      	ldr	r3, [pc, #40]	@ (8012490 <SD_initialize+0x90>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d107      	bne.n	801247c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 801246c:	4b07      	ldr	r3, [pc, #28]	@ (801248c <SD_initialize+0x8c>)
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	f043 0301 	orr.w	r3, r3, #1
 8012476:	b2da      	uxtb	r2, r3
 8012478:	4b04      	ldr	r3, [pc, #16]	@ (801248c <SD_initialize+0x8c>)
 801247a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801247c:	4b03      	ldr	r3, [pc, #12]	@ (801248c <SD_initialize+0x8c>)
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	b2db      	uxtb	r3, r3
}
 8012482:	4618      	mov	r0, r3
 8012484:	371c      	adds	r7, #28
 8012486:	46bd      	mov	sp, r7
 8012488:	bd90      	pop	{r4, r7, pc}
 801248a:	bf00      	nop
 801248c:	20000099 	.word	0x20000099
 8012490:	2000151c 	.word	0x2000151c
 8012494:	080172e4 	.word	0x080172e4

08012498 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	4603      	mov	r3, r0
 80124a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80124a2:	79fb      	ldrb	r3, [r7, #7]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7ff ff8d 	bl	80123c4 <SD_CheckStatus>
 80124aa:	4603      	mov	r3, r0
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08a      	sub	sp, #40	@ 0x28
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60b9      	str	r1, [r7, #8]
 80124bc:	607a      	str	r2, [r7, #4]
 80124be:	603b      	str	r3, [r7, #0]
 80124c0:	4603      	mov	r3, r0
 80124c2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80124c4:	2301      	movs	r3, #1
 80124c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80124ca:	f247 5030 	movw	r0, #30000	@ 0x7530
 80124ce:	f7ff ff5b 	bl	8012388 <SD_CheckStatusWithTimeout>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	da02      	bge.n	80124de <SD_read+0x2a>
  {
    return res;
 80124d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80124dc:	e032      	b.n	8012544 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80124de:	683a      	ldr	r2, [r7, #0]
 80124e0:	6879      	ldr	r1, [r7, #4]
 80124e2:	68b8      	ldr	r0, [r7, #8]
 80124e4:	f7ff feb0 	bl	8012248 <BSP_SD_ReadBlocks_DMA>
 80124e8:	4603      	mov	r3, r0
 80124ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 80124ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d124      	bne.n	8012540 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80124f6:	4b15      	ldr	r3, [pc, #84]	@ (801254c <SD_read+0x98>)
 80124f8:	6819      	ldr	r1, [r3, #0]
 80124fa:	f107 0314 	add.w	r3, r7, #20
 80124fe:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012502:	4618      	mov	r0, r3
 8012504:	f000 fc1e 	bl	8012d44 <osMessageGet>

    if (event.status == osEventMessage)
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	2b10      	cmp	r3, #16
 801250c:	d118      	bne.n	8012540 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	2b01      	cmp	r3, #1
 8012512:	d115      	bne.n	8012540 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012514:	f000 fa5c 	bl	80129d0 <osKernelSysTick>
 8012518:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801251a:	e008      	b.n	801252e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801251c:	f7ff fec8 	bl	80122b0 <BSP_SD_GetCardState>
 8012520:	4603      	mov	r3, r0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d103      	bne.n	801252e <SD_read+0x7a>
              {
                res = RES_OK;
 8012526:	2300      	movs	r3, #0
 8012528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801252c:	e008      	b.n	8012540 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801252e:	f000 fa4f 	bl	80129d0 <osKernelSysTick>
 8012532:	4602      	mov	r2, r0
 8012534:	6a3b      	ldr	r3, [r7, #32]
 8012536:	1ad3      	subs	r3, r2, r3
 8012538:	f247 522f 	movw	r2, #29999	@ 0x752f
 801253c:	4293      	cmp	r3, r2
 801253e:	d9ed      	bls.n	801251c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012544:	4618      	mov	r0, r3
 8012546:	3728      	adds	r7, #40	@ 0x28
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}
 801254c:	2000151c 	.word	0x2000151c

08012550 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b08a      	sub	sp, #40	@ 0x28
 8012554:	af00      	add	r7, sp, #0
 8012556:	60b9      	str	r1, [r7, #8]
 8012558:	607a      	str	r2, [r7, #4]
 801255a:	603b      	str	r3, [r7, #0]
 801255c:	4603      	mov	r3, r0
 801255e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012560:	2301      	movs	r3, #1
 8012562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012566:	f247 5030 	movw	r0, #30000	@ 0x7530
 801256a:	f7ff ff0d 	bl	8012388 <SD_CheckStatusWithTimeout>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	da02      	bge.n	801257a <SD_write+0x2a>
  {
    return res;
 8012574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012578:	e02e      	b.n	80125d8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	6879      	ldr	r1, [r7, #4]
 801257e:	68b8      	ldr	r0, [r7, #8]
 8012580:	f7ff fe7c 	bl	801227c <BSP_SD_WriteBlocks_DMA>
 8012584:	4603      	mov	r3, r0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d124      	bne.n	80125d4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801258a:	4b15      	ldr	r3, [pc, #84]	@ (80125e0 <SD_write+0x90>)
 801258c:	6819      	ldr	r1, [r3, #0]
 801258e:	f107 0314 	add.w	r3, r7, #20
 8012592:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012596:	4618      	mov	r0, r3
 8012598:	f000 fbd4 	bl	8012d44 <osMessageGet>

    if (event.status == osEventMessage)
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	2b10      	cmp	r3, #16
 80125a0:	d118      	bne.n	80125d4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	2b02      	cmp	r3, #2
 80125a6:	d115      	bne.n	80125d4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80125a8:	f000 fa12 	bl	80129d0 <osKernelSysTick>
 80125ac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80125ae:	e008      	b.n	80125c2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80125b0:	f7ff fe7e 	bl	80122b0 <BSP_SD_GetCardState>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d103      	bne.n	80125c2 <SD_write+0x72>
          {
            res = RES_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80125c0:	e008      	b.n	80125d4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80125c2:	f000 fa05 	bl	80129d0 <osKernelSysTick>
 80125c6:	4602      	mov	r2, r0
 80125c8:	6a3b      	ldr	r3, [r7, #32]
 80125ca:	1ad3      	subs	r3, r2, r3
 80125cc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80125d0:	4293      	cmp	r3, r2
 80125d2:	d9ed      	bls.n	80125b0 <SD_write+0x60>
    }

  }
#endif

  return res;
 80125d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3728      	adds	r7, #40	@ 0x28
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	2000151c 	.word	0x2000151c

080125e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b08c      	sub	sp, #48	@ 0x30
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	603a      	str	r2, [r7, #0]
 80125ee:	71fb      	strb	r3, [r7, #7]
 80125f0:	460b      	mov	r3, r1
 80125f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80125f4:	2301      	movs	r3, #1
 80125f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80125fa:	4b25      	ldr	r3, [pc, #148]	@ (8012690 <SD_ioctl+0xac>)
 80125fc:	781b      	ldrb	r3, [r3, #0]
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	f003 0301 	and.w	r3, r3, #1
 8012604:	2b00      	cmp	r3, #0
 8012606:	d001      	beq.n	801260c <SD_ioctl+0x28>
 8012608:	2303      	movs	r3, #3
 801260a:	e03c      	b.n	8012686 <SD_ioctl+0xa2>

  switch (cmd)
 801260c:	79bb      	ldrb	r3, [r7, #6]
 801260e:	2b03      	cmp	r3, #3
 8012610:	d834      	bhi.n	801267c <SD_ioctl+0x98>
 8012612:	a201      	add	r2, pc, #4	@ (adr r2, 8012618 <SD_ioctl+0x34>)
 8012614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012618:	08012629 	.word	0x08012629
 801261c:	08012631 	.word	0x08012631
 8012620:	08012649 	.word	0x08012649
 8012624:	08012663 	.word	0x08012663
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801262e:	e028      	b.n	8012682 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012630:	f107 030c 	add.w	r3, r7, #12
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff fe4b 	bl	80122d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801263a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012640:	2300      	movs	r3, #0
 8012642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012646:	e01c      	b.n	8012682 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012648:	f107 030c 	add.w	r3, r7, #12
 801264c:	4618      	mov	r0, r3
 801264e:	f7ff fe3f 	bl	80122d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012654:	b29a      	uxth	r2, r3
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801265a:	2300      	movs	r3, #0
 801265c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012660:	e00f      	b.n	8012682 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012662:	f107 030c 	add.w	r3, r7, #12
 8012666:	4618      	mov	r0, r3
 8012668:	f7ff fe32 	bl	80122d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801266e:	0a5a      	lsrs	r2, r3, #9
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012674:	2300      	movs	r3, #0
 8012676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801267a:	e002      	b.n	8012682 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801267c:	2304      	movs	r3, #4
 801267e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012686:	4618      	mov	r0, r3
 8012688:	3730      	adds	r7, #48	@ 0x30
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	20000099 	.word	0x20000099

08012694 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8012698:	4b04      	ldr	r3, [pc, #16]	@ (80126ac <BSP_SD_WriteCpltCallback+0x18>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2200      	movs	r2, #0
 801269e:	2102      	movs	r1, #2
 80126a0:	4618      	mov	r0, r3
 80126a2:	f000 fb0f 	bl	8012cc4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80126a6:	bf00      	nop
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	2000151c 	.word	0x2000151c

080126b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80126b4:	4b04      	ldr	r3, [pc, #16]	@ (80126c8 <BSP_SD_ReadCpltCallback+0x18>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2200      	movs	r2, #0
 80126ba:	2101      	movs	r1, #1
 80126bc:	4618      	mov	r0, r3
 80126be:	f000 fb01 	bl	8012cc4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80126c2:	bf00      	nop
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	2000151c 	.word	0x2000151c

080126cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	4603      	mov	r3, r0
 80126d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80126d6:	79fb      	ldrb	r3, [r7, #7]
 80126d8:	4a08      	ldr	r2, [pc, #32]	@ (80126fc <disk_status+0x30>)
 80126da:	009b      	lsls	r3, r3, #2
 80126dc:	4413      	add	r3, r2
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	79fa      	ldrb	r2, [r7, #7]
 80126e4:	4905      	ldr	r1, [pc, #20]	@ (80126fc <disk_status+0x30>)
 80126e6:	440a      	add	r2, r1
 80126e8:	7a12      	ldrb	r2, [r2, #8]
 80126ea:	4610      	mov	r0, r2
 80126ec:	4798      	blx	r3
 80126ee:	4603      	mov	r3, r0
 80126f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80126f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3710      	adds	r7, #16
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	20001520 	.word	0x20001520

08012700 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	4603      	mov	r3, r0
 8012708:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801270a:	2300      	movs	r3, #0
 801270c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801270e:	79fb      	ldrb	r3, [r7, #7]
 8012710:	4a0d      	ldr	r2, [pc, #52]	@ (8012748 <disk_initialize+0x48>)
 8012712:	5cd3      	ldrb	r3, [r2, r3]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d111      	bne.n	801273c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012718:	79fb      	ldrb	r3, [r7, #7]
 801271a:	4a0b      	ldr	r2, [pc, #44]	@ (8012748 <disk_initialize+0x48>)
 801271c:	2101      	movs	r1, #1
 801271e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012720:	79fb      	ldrb	r3, [r7, #7]
 8012722:	4a09      	ldr	r2, [pc, #36]	@ (8012748 <disk_initialize+0x48>)
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	79fa      	ldrb	r2, [r7, #7]
 801272e:	4906      	ldr	r1, [pc, #24]	@ (8012748 <disk_initialize+0x48>)
 8012730:	440a      	add	r2, r1
 8012732:	7a12      	ldrb	r2, [r2, #8]
 8012734:	4610      	mov	r0, r2
 8012736:	4798      	blx	r3
 8012738:	4603      	mov	r3, r0
 801273a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801273c:	7bfb      	ldrb	r3, [r7, #15]
}
 801273e:	4618      	mov	r0, r3
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	20001520 	.word	0x20001520

0801274c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801274c:	b590      	push	{r4, r7, lr}
 801274e:	b087      	sub	sp, #28
 8012750:	af00      	add	r7, sp, #0
 8012752:	60b9      	str	r1, [r7, #8]
 8012754:	607a      	str	r2, [r7, #4]
 8012756:	603b      	str	r3, [r7, #0]
 8012758:	4603      	mov	r3, r0
 801275a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801275c:	7bfb      	ldrb	r3, [r7, #15]
 801275e:	4a0a      	ldr	r2, [pc, #40]	@ (8012788 <disk_read+0x3c>)
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	4413      	add	r3, r2
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	689c      	ldr	r4, [r3, #8]
 8012768:	7bfb      	ldrb	r3, [r7, #15]
 801276a:	4a07      	ldr	r2, [pc, #28]	@ (8012788 <disk_read+0x3c>)
 801276c:	4413      	add	r3, r2
 801276e:	7a18      	ldrb	r0, [r3, #8]
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	68b9      	ldr	r1, [r7, #8]
 8012776:	47a0      	blx	r4
 8012778:	4603      	mov	r3, r0
 801277a:	75fb      	strb	r3, [r7, #23]
  return res;
 801277c:	7dfb      	ldrb	r3, [r7, #23]
}
 801277e:	4618      	mov	r0, r3
 8012780:	371c      	adds	r7, #28
 8012782:	46bd      	mov	sp, r7
 8012784:	bd90      	pop	{r4, r7, pc}
 8012786:	bf00      	nop
 8012788:	20001520 	.word	0x20001520

0801278c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801278c:	b590      	push	{r4, r7, lr}
 801278e:	b087      	sub	sp, #28
 8012790:	af00      	add	r7, sp, #0
 8012792:	60b9      	str	r1, [r7, #8]
 8012794:	607a      	str	r2, [r7, #4]
 8012796:	603b      	str	r3, [r7, #0]
 8012798:	4603      	mov	r3, r0
 801279a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801279c:	7bfb      	ldrb	r3, [r7, #15]
 801279e:	4a0a      	ldr	r2, [pc, #40]	@ (80127c8 <disk_write+0x3c>)
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4413      	add	r3, r2
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	68dc      	ldr	r4, [r3, #12]
 80127a8:	7bfb      	ldrb	r3, [r7, #15]
 80127aa:	4a07      	ldr	r2, [pc, #28]	@ (80127c8 <disk_write+0x3c>)
 80127ac:	4413      	add	r3, r2
 80127ae:	7a18      	ldrb	r0, [r3, #8]
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	687a      	ldr	r2, [r7, #4]
 80127b4:	68b9      	ldr	r1, [r7, #8]
 80127b6:	47a0      	blx	r4
 80127b8:	4603      	mov	r3, r0
 80127ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80127bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	371c      	adds	r7, #28
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd90      	pop	{r4, r7, pc}
 80127c6:	bf00      	nop
 80127c8:	20001520 	.word	0x20001520

080127cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	4603      	mov	r3, r0
 80127d4:	603a      	str	r2, [r7, #0]
 80127d6:	71fb      	strb	r3, [r7, #7]
 80127d8:	460b      	mov	r3, r1
 80127da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80127dc:	79fb      	ldrb	r3, [r7, #7]
 80127de:	4a09      	ldr	r2, [pc, #36]	@ (8012804 <disk_ioctl+0x38>)
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	4413      	add	r3, r2
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	691b      	ldr	r3, [r3, #16]
 80127e8:	79fa      	ldrb	r2, [r7, #7]
 80127ea:	4906      	ldr	r1, [pc, #24]	@ (8012804 <disk_ioctl+0x38>)
 80127ec:	440a      	add	r2, r1
 80127ee:	7a10      	ldrb	r0, [r2, #8]
 80127f0:	79b9      	ldrb	r1, [r7, #6]
 80127f2:	683a      	ldr	r2, [r7, #0]
 80127f4:	4798      	blx	r3
 80127f6:	4603      	mov	r3, r0
 80127f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80127fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3710      	adds	r7, #16
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	20001520 	.word	0x20001520

08012808 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012808:	b480      	push	{r7}
 801280a:	b087      	sub	sp, #28
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	60b9      	str	r1, [r7, #8]
 8012812:	4613      	mov	r3, r2
 8012814:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012816:	2301      	movs	r3, #1
 8012818:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801281a:	2300      	movs	r3, #0
 801281c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801281e:	4b1f      	ldr	r3, [pc, #124]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 8012820:	7a5b      	ldrb	r3, [r3, #9]
 8012822:	b2db      	uxtb	r3, r3
 8012824:	2b00      	cmp	r3, #0
 8012826:	d131      	bne.n	801288c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012828:	4b1c      	ldr	r3, [pc, #112]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 801282a:	7a5b      	ldrb	r3, [r3, #9]
 801282c:	b2db      	uxtb	r3, r3
 801282e:	461a      	mov	r2, r3
 8012830:	4b1a      	ldr	r3, [pc, #104]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 8012832:	2100      	movs	r1, #0
 8012834:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012836:	4b19      	ldr	r3, [pc, #100]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 8012838:	7a5b      	ldrb	r3, [r3, #9]
 801283a:	b2db      	uxtb	r3, r3
 801283c:	4a17      	ldr	r2, [pc, #92]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	4413      	add	r3, r2
 8012842:	68fa      	ldr	r2, [r7, #12]
 8012844:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012846:	4b15      	ldr	r3, [pc, #84]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 8012848:	7a5b      	ldrb	r3, [r3, #9]
 801284a:	b2db      	uxtb	r3, r3
 801284c:	461a      	mov	r2, r3
 801284e:	4b13      	ldr	r3, [pc, #76]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 8012850:	4413      	add	r3, r2
 8012852:	79fa      	ldrb	r2, [r7, #7]
 8012854:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012856:	4b11      	ldr	r3, [pc, #68]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 8012858:	7a5b      	ldrb	r3, [r3, #9]
 801285a:	b2db      	uxtb	r3, r3
 801285c:	1c5a      	adds	r2, r3, #1
 801285e:	b2d1      	uxtb	r1, r2
 8012860:	4a0e      	ldr	r2, [pc, #56]	@ (801289c <FATFS_LinkDriverEx+0x94>)
 8012862:	7251      	strb	r1, [r2, #9]
 8012864:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012866:	7dbb      	ldrb	r3, [r7, #22]
 8012868:	3330      	adds	r3, #48	@ 0x30
 801286a:	b2da      	uxtb	r2, r3
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	3301      	adds	r3, #1
 8012874:	223a      	movs	r2, #58	@ 0x3a
 8012876:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	3302      	adds	r3, #2
 801287c:	222f      	movs	r2, #47	@ 0x2f
 801287e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	3303      	adds	r3, #3
 8012884:	2200      	movs	r2, #0
 8012886:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012888:	2300      	movs	r3, #0
 801288a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801288c:	7dfb      	ldrb	r3, [r7, #23]
}
 801288e:	4618      	mov	r0, r3
 8012890:	371c      	adds	r7, #28
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	20001520 	.word	0x20001520

080128a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80128aa:	2200      	movs	r2, #0
 80128ac:	6839      	ldr	r1, [r7, #0]
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f7ff ffaa 	bl	8012808 <FATFS_LinkDriverEx>
 80128b4:	4603      	mov	r3, r0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3708      	adds	r7, #8
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b086      	sub	sp, #24
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	4603      	mov	r3, r0
 80128c6:	6039      	str	r1, [r7, #0]
 80128c8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80128ca:	2300      	movs	r3, #0
 80128cc:	60fb      	str	r3, [r7, #12]
 80128ce:	2300      	movs	r3, #0
 80128d0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80128d2:	f107 030c 	add.w	r3, r7, #12
 80128d6:	2101      	movs	r1, #1
 80128d8:	4618      	mov	r0, r3
 80128da:	f000 f901 	bl	8012ae0 <osSemaphoreCreate>
 80128de:	4602      	mov	r2, r0
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	bf14      	ite	ne
 80128ec:	2301      	movne	r3, #1
 80128ee:	2300      	moveq	r3, #0
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	617b      	str	r3, [r7, #20]

    return ret;
 80128f4:	697b      	ldr	r3, [r7, #20]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3718      	adds	r7, #24
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}

080128fe <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80128fe:	b580      	push	{r7, lr}
 8012900:	b082      	sub	sp, #8
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 f9a0 	bl	8012c4c <osSemaphoreDelete>
#endif
    return 1;
 801290c:	2301      	movs	r3, #1
}
 801290e:	4618      	mov	r0, r3
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}

08012916 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012916:	b580      	push	{r7, lr}
 8012918:	b084      	sub	sp, #16
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8012922:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f000 f90c 	bl	8012b44 <osSemaphoreWait>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d101      	bne.n	8012936 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8012932:	2301      	movs	r3, #1
 8012934:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012936:	68fb      	ldr	r3, [r7, #12]
}
 8012938:	4618      	mov	r0, r3
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f000 f949 	bl	8012be0 <osSemaphoreRelease>
#endif
}
 801294e:	bf00      	nop
 8012950:	3708      	adds	r7, #8
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}

08012956 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012956:	b480      	push	{r7}
 8012958:	b085      	sub	sp, #20
 801295a:	af00      	add	r7, sp, #0
 801295c:	4603      	mov	r3, r0
 801295e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012960:	2300      	movs	r3, #0
 8012962:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012968:	2b84      	cmp	r3, #132	@ 0x84
 801296a:	d005      	beq.n	8012978 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801296c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	4413      	add	r3, r2
 8012974:	3303      	adds	r3, #3
 8012976:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012978:	68fb      	ldr	r3, [r7, #12]
}
 801297a:	4618      	mov	r0, r3
 801297c:	3714      	adds	r7, #20
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr

08012986 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012986:	b480      	push	{r7}
 8012988:	b083      	sub	sp, #12
 801298a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801298c:	f3ef 8305 	mrs	r3, IPSR
 8012990:	607b      	str	r3, [r7, #4]
  return(result);
 8012992:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012994:	2b00      	cmp	r3, #0
 8012996:	bf14      	ite	ne
 8012998:	2301      	movne	r3, #1
 801299a:	2300      	moveq	r3, #0
 801299c:	b2db      	uxtb	r3, r3
}
 801299e:	4618      	mov	r0, r3
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr

080129aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80129aa:	b580      	push	{r7, lr}
 80129ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80129ae:	f001 fe81 	bl	80146b4 <vTaskStartScheduler>
  
  return osOK;
 80129b2:	2300      	movs	r3, #0
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80129bc:	f002 faf6 	bl	8014fac <xTaskGetSchedulerState>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d101      	bne.n	80129ca <osKernelRunning+0x12>
    return 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	e000      	b.n	80129cc <osKernelRunning+0x14>
  else
    return 1;
 80129ca:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80129d4:	f7ff ffd7 	bl	8012986 <inHandlerMode>
 80129d8:	4603      	mov	r3, r0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d003      	beq.n	80129e6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80129de:	f001 ff95 	bl	801490c <xTaskGetTickCountFromISR>
 80129e2:	4603      	mov	r3, r0
 80129e4:	e002      	b.n	80129ec <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80129e6:	f001 ff81 	bl	80148ec <xTaskGetTickCount>
 80129ea:	4603      	mov	r3, r0
  }
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80129f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129f2:	b089      	sub	sp, #36	@ 0x24
 80129f4:	af04      	add	r7, sp, #16
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	695b      	ldr	r3, [r3, #20]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d020      	beq.n	8012a44 <osThreadCreate+0x54>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	699b      	ldr	r3, [r3, #24]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d01c      	beq.n	8012a44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	685c      	ldr	r4, [r3, #4]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	691e      	ldr	r6, [r3, #16]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7ff ff9a 	bl	8012956 <makeFreeRtosPriority>
 8012a22:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	695b      	ldr	r3, [r3, #20]
 8012a28:	687a      	ldr	r2, [r7, #4]
 8012a2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a2c:	9202      	str	r2, [sp, #8]
 8012a2e:	9301      	str	r3, [sp, #4]
 8012a30:	9100      	str	r1, [sp, #0]
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	4632      	mov	r2, r6
 8012a36:	4629      	mov	r1, r5
 8012a38:	4620      	mov	r0, r4
 8012a3a:	f001 fa93 	bl	8013f64 <xTaskCreateStatic>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	60fb      	str	r3, [r7, #12]
 8012a42:	e01c      	b.n	8012a7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	685c      	ldr	r4, [r3, #4]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a50:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7ff ff7c 	bl	8012956 <makeFreeRtosPriority>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	f107 030c 	add.w	r3, r7, #12
 8012a64:	9301      	str	r3, [sp, #4]
 8012a66:	9200      	str	r2, [sp, #0]
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	4632      	mov	r2, r6
 8012a6c:	4629      	mov	r1, r5
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f001 fade 	bl	8014030 <xTaskCreate>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d001      	beq.n	8012a7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	e000      	b.n	8012a80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3714      	adds	r7, #20
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <osDelay+0x16>
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	e000      	b.n	8012aa0 <osDelay+0x18>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f001 fca5 	bl	80143f0 <vTaskDelay>
  
  return osOK;
 8012aa6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d007      	beq.n	8012ad0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	4619      	mov	r1, r3
 8012ac6:	2001      	movs	r0, #1
 8012ac8:	f000 fbeb 	bl	80132a2 <xQueueCreateMutexStatic>
 8012acc:	4603      	mov	r3, r0
 8012ace:	e003      	b.n	8012ad8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	f000 fbce 	bl	8013272 <xQueueCreateMutex>
 8012ad6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3708      	adds	r7, #8
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b086      	sub	sp, #24
 8012ae4:	af02      	add	r7, sp, #8
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00f      	beq.n	8012b12 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d10a      	bne.n	8012b0e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	2203      	movs	r2, #3
 8012afe:	9200      	str	r2, [sp, #0]
 8012b00:	2200      	movs	r2, #0
 8012b02:	2100      	movs	r1, #0
 8012b04:	2001      	movs	r0, #1
 8012b06:	f000 fab1 	bl	801306c <xQueueGenericCreateStatic>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	e016      	b.n	8012b3c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	e014      	b.n	8012b3c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	d110      	bne.n	8012b3a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012b18:	2203      	movs	r2, #3
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	f000 fb2c 	bl	801317a <xQueueGenericCreate>
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d005      	beq.n	8012b36 <osSemaphoreCreate+0x56>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	2100      	movs	r1, #0
 8012b30:	68f8      	ldr	r0, [r7, #12]
 8012b32:	f000 fbd1 	bl	80132d8 <xQueueGenericSend>
      return sema;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	e000      	b.n	8012b3c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012b3a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3710      	adds	r7, #16
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012b4e:	2300      	movs	r3, #0
 8012b50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d101      	bne.n	8012b5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012b58:	2380      	movs	r3, #128	@ 0x80
 8012b5a:	e03a      	b.n	8012bd2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b66:	d103      	bne.n	8012b70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012b68:	f04f 33ff 	mov.w	r3, #4294967295
 8012b6c:	60fb      	str	r3, [r7, #12]
 8012b6e:	e009      	b.n	8012b84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d006      	beq.n	8012b84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d101      	bne.n	8012b84 <osSemaphoreWait+0x40>
      ticks = 1;
 8012b80:	2301      	movs	r3, #1
 8012b82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012b84:	f7ff feff 	bl	8012986 <inHandlerMode>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d017      	beq.n	8012bbe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012b8e:	f107 0308 	add.w	r3, r7, #8
 8012b92:	461a      	mov	r2, r3
 8012b94:	2100      	movs	r1, #0
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f000 ffe4 	bl	8013b64 <xQueueReceiveFromISR>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d001      	beq.n	8012ba6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8012ba2:	23ff      	movs	r3, #255	@ 0xff
 8012ba4:	e015      	b.n	8012bd2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d011      	beq.n	8012bd0 <osSemaphoreWait+0x8c>
 8012bac:	4b0b      	ldr	r3, [pc, #44]	@ (8012bdc <osSemaphoreWait+0x98>)
 8012bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bb2:	601a      	str	r2, [r3, #0]
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	f3bf 8f6f 	isb	sy
 8012bbc:	e008      	b.n	8012bd0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012bbe:	68f9      	ldr	r1, [r7, #12]
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f000 feb7 	bl	8013934 <xQueueSemaphoreTake>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d001      	beq.n	8012bd0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012bcc:	23ff      	movs	r3, #255	@ 0xff
 8012bce:	e000      	b.n	8012bd2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3710      	adds	r7, #16
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	e000ed04 	.word	0xe000ed04

08012be0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012be8:	2300      	movs	r3, #0
 8012bea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012bec:	2300      	movs	r3, #0
 8012bee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012bf0:	f7ff fec9 	bl	8012986 <inHandlerMode>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d016      	beq.n	8012c28 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012bfa:	f107 0308 	add.w	r3, r7, #8
 8012bfe:	4619      	mov	r1, r3
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f000 fd16 	bl	8013632 <xQueueGiveFromISR>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d001      	beq.n	8012c10 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012c0c:	23ff      	movs	r3, #255	@ 0xff
 8012c0e:	e017      	b.n	8012c40 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d013      	beq.n	8012c3e <osSemaphoreRelease+0x5e>
 8012c16:	4b0c      	ldr	r3, [pc, #48]	@ (8012c48 <osSemaphoreRelease+0x68>)
 8012c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c1c:	601a      	str	r2, [r3, #0]
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	e00a      	b.n	8012c3e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012c28:	2300      	movs	r3, #0
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	2100      	movs	r1, #0
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f000 fb52 	bl	80132d8 <xQueueGenericSend>
 8012c34:	4603      	mov	r3, r0
 8012c36:	2b01      	cmp	r3, #1
 8012c38:	d001      	beq.n	8012c3e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012c3a:	23ff      	movs	r3, #255	@ 0xff
 8012c3c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3710      	adds	r7, #16
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	e000ed04 	.word	0xe000ed04

08012c4c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012c54:	f7ff fe97 	bl	8012986 <inHandlerMode>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d001      	beq.n	8012c62 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012c5e:	2382      	movs	r3, #130	@ 0x82
 8012c60:	e003      	b.n	8012c6a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f001 f806 	bl	8013c74 <vQueueDelete>

  return osOK; 
 8012c68:	2300      	movs	r3, #0
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3708      	adds	r7, #8
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}

08012c72 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012c72:	b590      	push	{r4, r7, lr}
 8012c74:	b085      	sub	sp, #20
 8012c76:	af02      	add	r7, sp, #8
 8012c78:	6078      	str	r0, [r7, #4]
 8012c7a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d011      	beq.n	8012ca8 <osMessageCreate+0x36>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00d      	beq.n	8012ca8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6818      	ldr	r0, [r3, #0]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6859      	ldr	r1, [r3, #4]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	689a      	ldr	r2, [r3, #8]
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	2400      	movs	r4, #0
 8012c9e:	9400      	str	r4, [sp, #0]
 8012ca0:	f000 f9e4 	bl	801306c <xQueueGenericCreateStatic>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	e008      	b.n	8012cba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6818      	ldr	r0, [r3, #0]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	f000 fa61 	bl	801317a <xQueueGenericCreate>
 8012cb8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	370c      	adds	r7, #12
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd90      	pop	{r4, r7, pc}
	...

08012cc4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b086      	sub	sp, #24
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d101      	bne.n	8012ce2 <osMessagePut+0x1e>
    ticks = 1;
 8012cde:	2301      	movs	r3, #1
 8012ce0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012ce2:	f7ff fe50 	bl	8012986 <inHandlerMode>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d018      	beq.n	8012d1e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012cec:	f107 0210 	add.w	r2, r7, #16
 8012cf0:	f107 0108 	add.w	r1, r7, #8
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	68f8      	ldr	r0, [r7, #12]
 8012cf8:	f000 fbf8 	bl	80134ec <xQueueGenericSendFromISR>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b01      	cmp	r3, #1
 8012d00:	d001      	beq.n	8012d06 <osMessagePut+0x42>
      return osErrorOS;
 8012d02:	23ff      	movs	r3, #255	@ 0xff
 8012d04:	e018      	b.n	8012d38 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d014      	beq.n	8012d36 <osMessagePut+0x72>
 8012d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8012d40 <osMessagePut+0x7c>)
 8012d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d12:	601a      	str	r2, [r3, #0]
 8012d14:	f3bf 8f4f 	dsb	sy
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	e00b      	b.n	8012d36 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012d1e:	f107 0108 	add.w	r1, r7, #8
 8012d22:	2300      	movs	r3, #0
 8012d24:	697a      	ldr	r2, [r7, #20]
 8012d26:	68f8      	ldr	r0, [r7, #12]
 8012d28:	f000 fad6 	bl	80132d8 <xQueueGenericSend>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d001      	beq.n	8012d36 <osMessagePut+0x72>
      return osErrorOS;
 8012d32:	23ff      	movs	r3, #255	@ 0xff
 8012d34:	e000      	b.n	8012d38 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012d36:	2300      	movs	r3, #0
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3718      	adds	r7, #24
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}
 8012d40:	e000ed04 	.word	0xe000ed04

08012d44 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012d44:	b590      	push	{r4, r7, lr}
 8012d46:	b08b      	sub	sp, #44	@ 0x2c
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012d54:	2300      	movs	r3, #0
 8012d56:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d10a      	bne.n	8012d74 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012d5e:	2380      	movs	r3, #128	@ 0x80
 8012d60:	617b      	str	r3, [r7, #20]
    return event;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	461c      	mov	r4, r3
 8012d66:	f107 0314 	add.w	r3, r7, #20
 8012d6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012d72:	e054      	b.n	8012e1e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012d74:	2300      	movs	r3, #0
 8012d76:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d82:	d103      	bne.n	8012d8c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012d84:	f04f 33ff 	mov.w	r3, #4294967295
 8012d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d8a:	e009      	b.n	8012da0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d006      	beq.n	8012da0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d101      	bne.n	8012da0 <osMessageGet+0x5c>
      ticks = 1;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012da0:	f7ff fdf1 	bl	8012986 <inHandlerMode>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d01c      	beq.n	8012de4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012daa:	f107 0220 	add.w	r2, r7, #32
 8012dae:	f107 0314 	add.w	r3, r7, #20
 8012db2:	3304      	adds	r3, #4
 8012db4:	4619      	mov	r1, r3
 8012db6:	68b8      	ldr	r0, [r7, #8]
 8012db8:	f000 fed4 	bl	8013b64 <xQueueReceiveFromISR>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d102      	bne.n	8012dc8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012dc2:	2310      	movs	r3, #16
 8012dc4:	617b      	str	r3, [r7, #20]
 8012dc6:	e001      	b.n	8012dcc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012dcc:	6a3b      	ldr	r3, [r7, #32]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d01d      	beq.n	8012e0e <osMessageGet+0xca>
 8012dd2:	4b15      	ldr	r3, [pc, #84]	@ (8012e28 <osMessageGet+0xe4>)
 8012dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dd8:	601a      	str	r2, [r3, #0]
 8012dda:	f3bf 8f4f 	dsb	sy
 8012dde:	f3bf 8f6f 	isb	sy
 8012de2:	e014      	b.n	8012e0e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012de4:	f107 0314 	add.w	r3, r7, #20
 8012de8:	3304      	adds	r3, #4
 8012dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012dec:	4619      	mov	r1, r3
 8012dee:	68b8      	ldr	r0, [r7, #8]
 8012df0:	f000 fcb8 	bl	8013764 <xQueueReceive>
 8012df4:	4603      	mov	r3, r0
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d102      	bne.n	8012e00 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012dfa:	2310      	movs	r3, #16
 8012dfc:	617b      	str	r3, [r7, #20]
 8012dfe:	e006      	b.n	8012e0e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d101      	bne.n	8012e0a <osMessageGet+0xc6>
 8012e06:	2300      	movs	r3, #0
 8012e08:	e000      	b.n	8012e0c <osMessageGet+0xc8>
 8012e0a:	2340      	movs	r3, #64	@ 0x40
 8012e0c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	461c      	mov	r4, r3
 8012e12:	f107 0314 	add.w	r3, r7, #20
 8012e16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012e1e:	68f8      	ldr	r0, [r7, #12]
 8012e20:	372c      	adds	r7, #44	@ 0x2c
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd90      	pop	{r4, r7, pc}
 8012e26:	bf00      	nop
 8012e28:	e000ed04 	.word	0xe000ed04

08012e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f103 0208 	add.w	r2, r3, #8
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f04f 32ff 	mov.w	r2, #4294967295
 8012e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f103 0208 	add.w	r2, r3, #8
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f103 0208 	add.w	r2, r3, #8
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012e60:	bf00      	nop
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2200      	movs	r2, #0
 8012e78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012e7a:	bf00      	nop
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e86:	b480      	push	{r7}
 8012e88:	b085      	sub	sp, #20
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
 8012e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	689a      	ldr	r2, [r3, #8]
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	689b      	ldr	r3, [r3, #8]
 8012ea8:	683a      	ldr	r2, [r7, #0]
 8012eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	683a      	ldr	r2, [r7, #0]
 8012eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	1c5a      	adds	r2, r3, #1
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	601a      	str	r2, [r3, #0]
}
 8012ec2:	bf00      	nop
 8012ec4:	3714      	adds	r7, #20
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr

08012ece <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012ece:	b480      	push	{r7}
 8012ed0:	b085      	sub	sp, #20
 8012ed2:	af00      	add	r7, sp, #0
 8012ed4:	6078      	str	r0, [r7, #4]
 8012ed6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee4:	d103      	bne.n	8012eee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	60fb      	str	r3, [r7, #12]
 8012eec:	e00c      	b.n	8012f08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	3308      	adds	r3, #8
 8012ef2:	60fb      	str	r3, [r7, #12]
 8012ef4:	e002      	b.n	8012efc <vListInsert+0x2e>
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	60fb      	str	r3, [r7, #12]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	68ba      	ldr	r2, [r7, #8]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d2f6      	bcs.n	8012ef6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	685a      	ldr	r2, [r3, #4]
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	683a      	ldr	r2, [r7, #0]
 8012f16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	683a      	ldr	r2, [r7, #0]
 8012f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	1c5a      	adds	r2, r3, #1
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	601a      	str	r2, [r3, #0]
}
 8012f34:	bf00      	nop
 8012f36:	3714      	adds	r7, #20
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr

08012f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012f40:	b480      	push	{r7}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	691b      	ldr	r3, [r3, #16]
 8012f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	6892      	ldr	r2, [r2, #8]
 8012f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	689b      	ldr	r3, [r3, #8]
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	6852      	ldr	r2, [r2, #4]
 8012f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d103      	bne.n	8012f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	689a      	ldr	r2, [r3, #8]
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	1e5a      	subs	r2, r3, #1
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3714      	adds	r7, #20
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10d      	bne.n	8012fc4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fac:	b672      	cpsid	i
 8012fae:	f383 8811 	msr	BASEPRI, r3
 8012fb2:	f3bf 8f6f 	isb	sy
 8012fb6:	f3bf 8f4f 	dsb	sy
 8012fba:	b662      	cpsie	i
 8012fbc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012fbe:	bf00      	nop
 8012fc0:	bf00      	nop
 8012fc2:	e7fd      	b.n	8012fc0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012fc4:	f002 fb42 	bl	801564c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fd0:	68f9      	ldr	r1, [r7, #12]
 8012fd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012fd4:	fb01 f303 	mul.w	r3, r1, r3
 8012fd8:	441a      	add	r2, r3
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681a      	ldr	r2, [r3, #0]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ff4:	3b01      	subs	r3, #1
 8012ff6:	68f9      	ldr	r1, [r7, #12]
 8012ff8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012ffa:	fb01 f303 	mul.w	r3, r1, r3
 8012ffe:	441a      	add	r2, r3
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	22ff      	movs	r2, #255	@ 0xff
 8013008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	22ff      	movs	r2, #255	@ 0xff
 8013010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d114      	bne.n	8013044 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	691b      	ldr	r3, [r3, #16]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d01a      	beq.n	8013058 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	3310      	adds	r3, #16
 8013026:	4618      	mov	r0, r3
 8013028:	f001 fdf0 	bl	8014c0c <xTaskRemoveFromEventList>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d012      	beq.n	8013058 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013032:	4b0d      	ldr	r3, [pc, #52]	@ (8013068 <xQueueGenericReset+0xd4>)
 8013034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013038:	601a      	str	r2, [r3, #0]
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	f3bf 8f6f 	isb	sy
 8013042:	e009      	b.n	8013058 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	3310      	adds	r3, #16
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff feef 	bl	8012e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	3324      	adds	r3, #36	@ 0x24
 8013052:	4618      	mov	r0, r3
 8013054:	f7ff feea 	bl	8012e2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013058:	f002 fb2e 	bl	80156b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801305c:	2301      	movs	r3, #1
}
 801305e:	4618      	mov	r0, r3
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	e000ed04 	.word	0xe000ed04

0801306c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801306c:	b580      	push	{r7, lr}
 801306e:	b08e      	sub	sp, #56	@ 0x38
 8013070:	af02      	add	r7, sp, #8
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
 8013078:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d10d      	bne.n	801309c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8013080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013084:	b672      	cpsid	i
 8013086:	f383 8811 	msr	BASEPRI, r3
 801308a:	f3bf 8f6f 	isb	sy
 801308e:	f3bf 8f4f 	dsb	sy
 8013092:	b662      	cpsie	i
 8013094:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013096:	bf00      	nop
 8013098:	bf00      	nop
 801309a:	e7fd      	b.n	8013098 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d10d      	bne.n	80130be <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80130a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a6:	b672      	cpsid	i
 80130a8:	f383 8811 	msr	BASEPRI, r3
 80130ac:	f3bf 8f6f 	isb	sy
 80130b0:	f3bf 8f4f 	dsb	sy
 80130b4:	b662      	cpsie	i
 80130b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80130b8:	bf00      	nop
 80130ba:	bf00      	nop
 80130bc:	e7fd      	b.n	80130ba <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d002      	beq.n	80130ca <xQueueGenericCreateStatic+0x5e>
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d001      	beq.n	80130ce <xQueueGenericCreateStatic+0x62>
 80130ca:	2301      	movs	r3, #1
 80130cc:	e000      	b.n	80130d0 <xQueueGenericCreateStatic+0x64>
 80130ce:	2300      	movs	r3, #0
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10d      	bne.n	80130f0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80130d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d8:	b672      	cpsid	i
 80130da:	f383 8811 	msr	BASEPRI, r3
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	f3bf 8f4f 	dsb	sy
 80130e6:	b662      	cpsie	i
 80130e8:	623b      	str	r3, [r7, #32]
}
 80130ea:	bf00      	nop
 80130ec:	bf00      	nop
 80130ee:	e7fd      	b.n	80130ec <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d102      	bne.n	80130fc <xQueueGenericCreateStatic+0x90>
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d101      	bne.n	8013100 <xQueueGenericCreateStatic+0x94>
 80130fc:	2301      	movs	r3, #1
 80130fe:	e000      	b.n	8013102 <xQueueGenericCreateStatic+0x96>
 8013100:	2300      	movs	r3, #0
 8013102:	2b00      	cmp	r3, #0
 8013104:	d10d      	bne.n	8013122 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8013106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801310a:	b672      	cpsid	i
 801310c:	f383 8811 	msr	BASEPRI, r3
 8013110:	f3bf 8f6f 	isb	sy
 8013114:	f3bf 8f4f 	dsb	sy
 8013118:	b662      	cpsie	i
 801311a:	61fb      	str	r3, [r7, #28]
}
 801311c:	bf00      	nop
 801311e:	bf00      	nop
 8013120:	e7fd      	b.n	801311e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013122:	2348      	movs	r3, #72	@ 0x48
 8013124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	2b48      	cmp	r3, #72	@ 0x48
 801312a:	d00d      	beq.n	8013148 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 801312c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013130:	b672      	cpsid	i
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	b662      	cpsie	i
 8013140:	61bb      	str	r3, [r7, #24]
}
 8013142:	bf00      	nop
 8013144:	bf00      	nop
 8013146:	e7fd      	b.n	8013144 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013148:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013150:	2b00      	cmp	r3, #0
 8013152:	d00d      	beq.n	8013170 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013156:	2201      	movs	r2, #1
 8013158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801315c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	4613      	mov	r3, r2
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	68b9      	ldr	r1, [r7, #8]
 801316a:	68f8      	ldr	r0, [r7, #12]
 801316c:	f000 f848 	bl	8013200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013172:	4618      	mov	r0, r3
 8013174:	3730      	adds	r7, #48	@ 0x30
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}

0801317a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801317a:	b580      	push	{r7, lr}
 801317c:	b08a      	sub	sp, #40	@ 0x28
 801317e:	af02      	add	r7, sp, #8
 8013180:	60f8      	str	r0, [r7, #12]
 8013182:	60b9      	str	r1, [r7, #8]
 8013184:	4613      	mov	r3, r2
 8013186:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d10d      	bne.n	80131aa <xQueueGenericCreate+0x30>
	__asm volatile
 801318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013192:	b672      	cpsid	i
 8013194:	f383 8811 	msr	BASEPRI, r3
 8013198:	f3bf 8f6f 	isb	sy
 801319c:	f3bf 8f4f 	dsb	sy
 80131a0:	b662      	cpsie	i
 80131a2:	613b      	str	r3, [r7, #16]
}
 80131a4:	bf00      	nop
 80131a6:	bf00      	nop
 80131a8:	e7fd      	b.n	80131a6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d102      	bne.n	80131b6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80131b0:	2300      	movs	r3, #0
 80131b2:	61fb      	str	r3, [r7, #28]
 80131b4:	e004      	b.n	80131c0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	68ba      	ldr	r2, [r7, #8]
 80131ba:	fb02 f303 	mul.w	r3, r2, r3
 80131be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	3348      	adds	r3, #72	@ 0x48
 80131c4:	4618      	mov	r0, r3
 80131c6:	f002 fb6f 	bl	80158a8 <pvPortMalloc>
 80131ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d011      	beq.n	80131f6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80131d2:	69bb      	ldr	r3, [r7, #24]
 80131d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	3348      	adds	r3, #72	@ 0x48
 80131da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80131dc:	69bb      	ldr	r3, [r7, #24]
 80131de:	2200      	movs	r2, #0
 80131e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80131e4:	79fa      	ldrb	r2, [r7, #7]
 80131e6:	69bb      	ldr	r3, [r7, #24]
 80131e8:	9300      	str	r3, [sp, #0]
 80131ea:	4613      	mov	r3, r2
 80131ec:	697a      	ldr	r2, [r7, #20]
 80131ee:	68b9      	ldr	r1, [r7, #8]
 80131f0:	68f8      	ldr	r0, [r7, #12]
 80131f2:	f000 f805 	bl	8013200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80131f6:	69bb      	ldr	r3, [r7, #24]
	}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3720      	adds	r7, #32
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	60b9      	str	r1, [r7, #8]
 801320a:	607a      	str	r2, [r7, #4]
 801320c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d103      	bne.n	801321c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	69ba      	ldr	r2, [r7, #24]
 8013218:	601a      	str	r2, [r3, #0]
 801321a:	e002      	b.n	8013222 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	68fa      	ldr	r2, [r7, #12]
 8013226:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	68ba      	ldr	r2, [r7, #8]
 801322c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801322e:	2101      	movs	r1, #1
 8013230:	69b8      	ldr	r0, [r7, #24]
 8013232:	f7ff feaf 	bl	8012f94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013236:	bf00      	nop
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}

0801323e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801323e:	b580      	push	{r7, lr}
 8013240:	b082      	sub	sp, #8
 8013242:	af00      	add	r7, sp, #0
 8013244:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00e      	beq.n	801326a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2200      	movs	r2, #0
 8013250:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2200      	movs	r2, #0
 8013256:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801325e:	2300      	movs	r3, #0
 8013260:	2200      	movs	r2, #0
 8013262:	2100      	movs	r1, #0
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f000 f837 	bl	80132d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801326a:	bf00      	nop
 801326c:	3708      	adds	r7, #8
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013272:	b580      	push	{r7, lr}
 8013274:	b086      	sub	sp, #24
 8013276:	af00      	add	r7, sp, #0
 8013278:	4603      	mov	r3, r0
 801327a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801327c:	2301      	movs	r3, #1
 801327e:	617b      	str	r3, [r7, #20]
 8013280:	2300      	movs	r3, #0
 8013282:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013284:	79fb      	ldrb	r3, [r7, #7]
 8013286:	461a      	mov	r2, r3
 8013288:	6939      	ldr	r1, [r7, #16]
 801328a:	6978      	ldr	r0, [r7, #20]
 801328c:	f7ff ff75 	bl	801317a <xQueueGenericCreate>
 8013290:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	f7ff ffd3 	bl	801323e <prvInitialiseMutex>

		return xNewQueue;
 8013298:	68fb      	ldr	r3, [r7, #12]
	}
 801329a:	4618      	mov	r0, r3
 801329c:	3718      	adds	r7, #24
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b088      	sub	sp, #32
 80132a6:	af02      	add	r7, sp, #8
 80132a8:	4603      	mov	r3, r0
 80132aa:	6039      	str	r1, [r7, #0]
 80132ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80132ae:	2301      	movs	r3, #1
 80132b0:	617b      	str	r3, [r7, #20]
 80132b2:	2300      	movs	r3, #0
 80132b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80132b6:	79fb      	ldrb	r3, [r7, #7]
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	2200      	movs	r2, #0
 80132be:	6939      	ldr	r1, [r7, #16]
 80132c0:	6978      	ldr	r0, [r7, #20]
 80132c2:	f7ff fed3 	bl	801306c <xQueueGenericCreateStatic>
 80132c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f7ff ffb8 	bl	801323e <prvInitialiseMutex>

		return xNewQueue;
 80132ce:	68fb      	ldr	r3, [r7, #12]
	}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3718      	adds	r7, #24
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08e      	sub	sp, #56	@ 0x38
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	607a      	str	r2, [r7, #4]
 80132e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80132e6:	2300      	movs	r3, #0
 80132e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80132ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10d      	bne.n	8013310 <xQueueGenericSend+0x38>
	__asm volatile
 80132f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132f8:	b672      	cpsid	i
 80132fa:	f383 8811 	msr	BASEPRI, r3
 80132fe:	f3bf 8f6f 	isb	sy
 8013302:	f3bf 8f4f 	dsb	sy
 8013306:	b662      	cpsie	i
 8013308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801330a:	bf00      	nop
 801330c:	bf00      	nop
 801330e:	e7fd      	b.n	801330c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d103      	bne.n	801331e <xQueueGenericSend+0x46>
 8013316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <xQueueGenericSend+0x4a>
 801331e:	2301      	movs	r3, #1
 8013320:	e000      	b.n	8013324 <xQueueGenericSend+0x4c>
 8013322:	2300      	movs	r3, #0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d10d      	bne.n	8013344 <xQueueGenericSend+0x6c>
	__asm volatile
 8013328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801332c:	b672      	cpsid	i
 801332e:	f383 8811 	msr	BASEPRI, r3
 8013332:	f3bf 8f6f 	isb	sy
 8013336:	f3bf 8f4f 	dsb	sy
 801333a:	b662      	cpsie	i
 801333c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801333e:	bf00      	nop
 8013340:	bf00      	nop
 8013342:	e7fd      	b.n	8013340 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	2b02      	cmp	r3, #2
 8013348:	d103      	bne.n	8013352 <xQueueGenericSend+0x7a>
 801334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801334c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801334e:	2b01      	cmp	r3, #1
 8013350:	d101      	bne.n	8013356 <xQueueGenericSend+0x7e>
 8013352:	2301      	movs	r3, #1
 8013354:	e000      	b.n	8013358 <xQueueGenericSend+0x80>
 8013356:	2300      	movs	r3, #0
 8013358:	2b00      	cmp	r3, #0
 801335a:	d10d      	bne.n	8013378 <xQueueGenericSend+0xa0>
	__asm volatile
 801335c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013360:	b672      	cpsid	i
 8013362:	f383 8811 	msr	BASEPRI, r3
 8013366:	f3bf 8f6f 	isb	sy
 801336a:	f3bf 8f4f 	dsb	sy
 801336e:	b662      	cpsie	i
 8013370:	623b      	str	r3, [r7, #32]
}
 8013372:	bf00      	nop
 8013374:	bf00      	nop
 8013376:	e7fd      	b.n	8013374 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013378:	f001 fe18 	bl	8014fac <xTaskGetSchedulerState>
 801337c:	4603      	mov	r3, r0
 801337e:	2b00      	cmp	r3, #0
 8013380:	d102      	bne.n	8013388 <xQueueGenericSend+0xb0>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d101      	bne.n	801338c <xQueueGenericSend+0xb4>
 8013388:	2301      	movs	r3, #1
 801338a:	e000      	b.n	801338e <xQueueGenericSend+0xb6>
 801338c:	2300      	movs	r3, #0
 801338e:	2b00      	cmp	r3, #0
 8013390:	d10d      	bne.n	80133ae <xQueueGenericSend+0xd6>
	__asm volatile
 8013392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013396:	b672      	cpsid	i
 8013398:	f383 8811 	msr	BASEPRI, r3
 801339c:	f3bf 8f6f 	isb	sy
 80133a0:	f3bf 8f4f 	dsb	sy
 80133a4:	b662      	cpsie	i
 80133a6:	61fb      	str	r3, [r7, #28]
}
 80133a8:	bf00      	nop
 80133aa:	bf00      	nop
 80133ac:	e7fd      	b.n	80133aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133ae:	f002 f94d 	bl	801564c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80133b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d302      	bcc.n	80133c4 <xQueueGenericSend+0xec>
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	2b02      	cmp	r3, #2
 80133c2:	d129      	bne.n	8013418 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133c4:	683a      	ldr	r2, [r7, #0]
 80133c6:	68b9      	ldr	r1, [r7, #8]
 80133c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133ca:	f000 fc91 	bl	8013cf0 <prvCopyDataToQueue>
 80133ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d010      	beq.n	80133fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133da:	3324      	adds	r3, #36	@ 0x24
 80133dc:	4618      	mov	r0, r3
 80133de:	f001 fc15 	bl	8014c0c <xTaskRemoveFromEventList>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d013      	beq.n	8013410 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80133e8:	4b3f      	ldr	r3, [pc, #252]	@ (80134e8 <xQueueGenericSend+0x210>)
 80133ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133ee:	601a      	str	r2, [r3, #0]
 80133f0:	f3bf 8f4f 	dsb	sy
 80133f4:	f3bf 8f6f 	isb	sy
 80133f8:	e00a      	b.n	8013410 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80133fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d007      	beq.n	8013410 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013400:	4b39      	ldr	r3, [pc, #228]	@ (80134e8 <xQueueGenericSend+0x210>)
 8013402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013406:	601a      	str	r2, [r3, #0]
 8013408:	f3bf 8f4f 	dsb	sy
 801340c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013410:	f002 f952 	bl	80156b8 <vPortExitCritical>
				return pdPASS;
 8013414:	2301      	movs	r3, #1
 8013416:	e063      	b.n	80134e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d103      	bne.n	8013426 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801341e:	f002 f94b 	bl	80156b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013422:	2300      	movs	r3, #0
 8013424:	e05c      	b.n	80134e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013428:	2b00      	cmp	r3, #0
 801342a:	d106      	bne.n	801343a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801342c:	f107 0314 	add.w	r3, r7, #20
 8013430:	4618      	mov	r0, r3
 8013432:	f001 fc51 	bl	8014cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013436:	2301      	movs	r3, #1
 8013438:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801343a:	f002 f93d 	bl	80156b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801343e:	f001 f9a7 	bl	8014790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013442:	f002 f903 	bl	801564c <vPortEnterCritical>
 8013446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801344c:	b25b      	sxtb	r3, r3
 801344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013452:	d103      	bne.n	801345c <xQueueGenericSend+0x184>
 8013454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013456:	2200      	movs	r2, #0
 8013458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801345e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013462:	b25b      	sxtb	r3, r3
 8013464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013468:	d103      	bne.n	8013472 <xQueueGenericSend+0x19a>
 801346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801346c:	2200      	movs	r2, #0
 801346e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013472:	f002 f921 	bl	80156b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013476:	1d3a      	adds	r2, r7, #4
 8013478:	f107 0314 	add.w	r3, r7, #20
 801347c:	4611      	mov	r1, r2
 801347e:	4618      	mov	r0, r3
 8013480:	f001 fc40 	bl	8014d04 <xTaskCheckForTimeOut>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d124      	bne.n	80134d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801348a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801348c:	f000 fd28 	bl	8013ee0 <prvIsQueueFull>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d018      	beq.n	80134c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013498:	3310      	adds	r3, #16
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	4611      	mov	r1, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f001 fb8c 	bl	8014bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80134a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134a6:	f000 fcb3 	bl	8013e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80134aa:	f001 f97f 	bl	80147ac <xTaskResumeAll>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f47f af7c 	bne.w	80133ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80134b6:	4b0c      	ldr	r3, [pc, #48]	@ (80134e8 <xQueueGenericSend+0x210>)
 80134b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134bc:	601a      	str	r2, [r3, #0]
 80134be:	f3bf 8f4f 	dsb	sy
 80134c2:	f3bf 8f6f 	isb	sy
 80134c6:	e772      	b.n	80133ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80134c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134ca:	f000 fca1 	bl	8013e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134ce:	f001 f96d 	bl	80147ac <xTaskResumeAll>
 80134d2:	e76c      	b.n	80133ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80134d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134d6:	f000 fc9b 	bl	8013e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134da:	f001 f967 	bl	80147ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80134de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3738      	adds	r7, #56	@ 0x38
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	e000ed04 	.word	0xe000ed04

080134ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b08e      	sub	sp, #56	@ 0x38
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	60f8      	str	r0, [r7, #12]
 80134f4:	60b9      	str	r1, [r7, #8]
 80134f6:	607a      	str	r2, [r7, #4]
 80134f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80134fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013500:	2b00      	cmp	r3, #0
 8013502:	d10d      	bne.n	8013520 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013508:	b672      	cpsid	i
 801350a:	f383 8811 	msr	BASEPRI, r3
 801350e:	f3bf 8f6f 	isb	sy
 8013512:	f3bf 8f4f 	dsb	sy
 8013516:	b662      	cpsie	i
 8013518:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801351a:	bf00      	nop
 801351c:	bf00      	nop
 801351e:	e7fd      	b.n	801351c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d103      	bne.n	801352e <xQueueGenericSendFromISR+0x42>
 8013526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801352a:	2b00      	cmp	r3, #0
 801352c:	d101      	bne.n	8013532 <xQueueGenericSendFromISR+0x46>
 801352e:	2301      	movs	r3, #1
 8013530:	e000      	b.n	8013534 <xQueueGenericSendFromISR+0x48>
 8013532:	2300      	movs	r3, #0
 8013534:	2b00      	cmp	r3, #0
 8013536:	d10d      	bne.n	8013554 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8013538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801353c:	b672      	cpsid	i
 801353e:	f383 8811 	msr	BASEPRI, r3
 8013542:	f3bf 8f6f 	isb	sy
 8013546:	f3bf 8f4f 	dsb	sy
 801354a:	b662      	cpsie	i
 801354c:	623b      	str	r3, [r7, #32]
}
 801354e:	bf00      	nop
 8013550:	bf00      	nop
 8013552:	e7fd      	b.n	8013550 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	2b02      	cmp	r3, #2
 8013558:	d103      	bne.n	8013562 <xQueueGenericSendFromISR+0x76>
 801355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801355e:	2b01      	cmp	r3, #1
 8013560:	d101      	bne.n	8013566 <xQueueGenericSendFromISR+0x7a>
 8013562:	2301      	movs	r3, #1
 8013564:	e000      	b.n	8013568 <xQueueGenericSendFromISR+0x7c>
 8013566:	2300      	movs	r3, #0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10d      	bne.n	8013588 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 801356c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013570:	b672      	cpsid	i
 8013572:	f383 8811 	msr	BASEPRI, r3
 8013576:	f3bf 8f6f 	isb	sy
 801357a:	f3bf 8f4f 	dsb	sy
 801357e:	b662      	cpsie	i
 8013580:	61fb      	str	r3, [r7, #28]
}
 8013582:	bf00      	nop
 8013584:	bf00      	nop
 8013586:	e7fd      	b.n	8013584 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013588:	f002 f948 	bl	801581c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801358c:	f3ef 8211 	mrs	r2, BASEPRI
 8013590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013594:	b672      	cpsid	i
 8013596:	f383 8811 	msr	BASEPRI, r3
 801359a:	f3bf 8f6f 	isb	sy
 801359e:	f3bf 8f4f 	dsb	sy
 80135a2:	b662      	cpsie	i
 80135a4:	61ba      	str	r2, [r7, #24]
 80135a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80135a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80135aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80135ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80135b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d302      	bcc.n	80135be <xQueueGenericSendFromISR+0xd2>
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	2b02      	cmp	r3, #2
 80135bc:	d12c      	bne.n	8013618 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80135be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80135c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80135c8:	683a      	ldr	r2, [r7, #0]
 80135ca:	68b9      	ldr	r1, [r7, #8]
 80135cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135ce:	f000 fb8f 	bl	8013cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80135d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80135d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135da:	d112      	bne.n	8013602 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d016      	beq.n	8013612 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e6:	3324      	adds	r3, #36	@ 0x24
 80135e8:	4618      	mov	r0, r3
 80135ea:	f001 fb0f 	bl	8014c0c <xTaskRemoveFromEventList>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d00e      	beq.n	8013612 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d00b      	beq.n	8013612 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2201      	movs	r2, #1
 80135fe:	601a      	str	r2, [r3, #0]
 8013600:	e007      	b.n	8013612 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013602:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013606:	3301      	adds	r3, #1
 8013608:	b2db      	uxtb	r3, r3
 801360a:	b25a      	sxtb	r2, r3
 801360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013612:	2301      	movs	r3, #1
 8013614:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8013616:	e001      	b.n	801361c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013618:	2300      	movs	r3, #0
 801361a:	637b      	str	r3, [r7, #52]	@ 0x34
 801361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801361e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013626:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801362a:	4618      	mov	r0, r3
 801362c:	3738      	adds	r7, #56	@ 0x38
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}

08013632 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013632:	b580      	push	{r7, lr}
 8013634:	b08e      	sub	sp, #56	@ 0x38
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
 801363a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013642:	2b00      	cmp	r3, #0
 8013644:	d10d      	bne.n	8013662 <xQueueGiveFromISR+0x30>
	__asm volatile
 8013646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801364a:	b672      	cpsid	i
 801364c:	f383 8811 	msr	BASEPRI, r3
 8013650:	f3bf 8f6f 	isb	sy
 8013654:	f3bf 8f4f 	dsb	sy
 8013658:	b662      	cpsie	i
 801365a:	623b      	str	r3, [r7, #32]
}
 801365c:	bf00      	nop
 801365e:	bf00      	nop
 8013660:	e7fd      	b.n	801365e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013666:	2b00      	cmp	r3, #0
 8013668:	d00d      	beq.n	8013686 <xQueueGiveFromISR+0x54>
	__asm volatile
 801366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801366e:	b672      	cpsid	i
 8013670:	f383 8811 	msr	BASEPRI, r3
 8013674:	f3bf 8f6f 	isb	sy
 8013678:	f3bf 8f4f 	dsb	sy
 801367c:	b662      	cpsie	i
 801367e:	61fb      	str	r3, [r7, #28]
}
 8013680:	bf00      	nop
 8013682:	bf00      	nop
 8013684:	e7fd      	b.n	8013682 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d103      	bne.n	8013696 <xQueueGiveFromISR+0x64>
 801368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013690:	689b      	ldr	r3, [r3, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d101      	bne.n	801369a <xQueueGiveFromISR+0x68>
 8013696:	2301      	movs	r3, #1
 8013698:	e000      	b.n	801369c <xQueueGiveFromISR+0x6a>
 801369a:	2300      	movs	r3, #0
 801369c:	2b00      	cmp	r3, #0
 801369e:	d10d      	bne.n	80136bc <xQueueGiveFromISR+0x8a>
	__asm volatile
 80136a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136a4:	b672      	cpsid	i
 80136a6:	f383 8811 	msr	BASEPRI, r3
 80136aa:	f3bf 8f6f 	isb	sy
 80136ae:	f3bf 8f4f 	dsb	sy
 80136b2:	b662      	cpsie	i
 80136b4:	61bb      	str	r3, [r7, #24]
}
 80136b6:	bf00      	nop
 80136b8:	bf00      	nop
 80136ba:	e7fd      	b.n	80136b8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136bc:	f002 f8ae 	bl	801581c <vPortValidateInterruptPriority>
	__asm volatile
 80136c0:	f3ef 8211 	mrs	r2, BASEPRI
 80136c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136c8:	b672      	cpsid	i
 80136ca:	f383 8811 	msr	BASEPRI, r3
 80136ce:	f3bf 8f6f 	isb	sy
 80136d2:	f3bf 8f4f 	dsb	sy
 80136d6:	b662      	cpsie	i
 80136d8:	617a      	str	r2, [r7, #20]
 80136da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80136dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80136de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80136e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d22b      	bcs.n	8013748 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80136f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80136f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80136fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136fc:	1c5a      	adds	r2, r3, #1
 80136fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013700:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013702:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801370a:	d112      	bne.n	8013732 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013710:	2b00      	cmp	r3, #0
 8013712:	d016      	beq.n	8013742 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013716:	3324      	adds	r3, #36	@ 0x24
 8013718:	4618      	mov	r0, r3
 801371a:	f001 fa77 	bl	8014c0c <xTaskRemoveFromEventList>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d00e      	beq.n	8013742 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d00b      	beq.n	8013742 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	2201      	movs	r2, #1
 801372e:	601a      	str	r2, [r3, #0]
 8013730:	e007      	b.n	8013742 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013736:	3301      	adds	r3, #1
 8013738:	b2db      	uxtb	r3, r3
 801373a:	b25a      	sxtb	r2, r3
 801373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013742:	2301      	movs	r3, #1
 8013744:	637b      	str	r3, [r7, #52]	@ 0x34
 8013746:	e001      	b.n	801374c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013748:	2300      	movs	r3, #0
 801374a:	637b      	str	r3, [r7, #52]	@ 0x34
 801374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801374e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	f383 8811 	msr	BASEPRI, r3
}
 8013756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801375a:	4618      	mov	r0, r3
 801375c:	3738      	adds	r7, #56	@ 0x38
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
	...

08013764 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b08c      	sub	sp, #48	@ 0x30
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013770:	2300      	movs	r3, #0
 8013772:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801377a:	2b00      	cmp	r3, #0
 801377c:	d10d      	bne.n	801379a <xQueueReceive+0x36>
	__asm volatile
 801377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013782:	b672      	cpsid	i
 8013784:	f383 8811 	msr	BASEPRI, r3
 8013788:	f3bf 8f6f 	isb	sy
 801378c:	f3bf 8f4f 	dsb	sy
 8013790:	b662      	cpsie	i
 8013792:	623b      	str	r3, [r7, #32]
}
 8013794:	bf00      	nop
 8013796:	bf00      	nop
 8013798:	e7fd      	b.n	8013796 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d103      	bne.n	80137a8 <xQueueReceive+0x44>
 80137a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d101      	bne.n	80137ac <xQueueReceive+0x48>
 80137a8:	2301      	movs	r3, #1
 80137aa:	e000      	b.n	80137ae <xQueueReceive+0x4a>
 80137ac:	2300      	movs	r3, #0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d10d      	bne.n	80137ce <xQueueReceive+0x6a>
	__asm volatile
 80137b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137b6:	b672      	cpsid	i
 80137b8:	f383 8811 	msr	BASEPRI, r3
 80137bc:	f3bf 8f6f 	isb	sy
 80137c0:	f3bf 8f4f 	dsb	sy
 80137c4:	b662      	cpsie	i
 80137c6:	61fb      	str	r3, [r7, #28]
}
 80137c8:	bf00      	nop
 80137ca:	bf00      	nop
 80137cc:	e7fd      	b.n	80137ca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137ce:	f001 fbed 	bl	8014fac <xTaskGetSchedulerState>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d102      	bne.n	80137de <xQueueReceive+0x7a>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d101      	bne.n	80137e2 <xQueueReceive+0x7e>
 80137de:	2301      	movs	r3, #1
 80137e0:	e000      	b.n	80137e4 <xQueueReceive+0x80>
 80137e2:	2300      	movs	r3, #0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10d      	bne.n	8013804 <xQueueReceive+0xa0>
	__asm volatile
 80137e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ec:	b672      	cpsid	i
 80137ee:	f383 8811 	msr	BASEPRI, r3
 80137f2:	f3bf 8f6f 	isb	sy
 80137f6:	f3bf 8f4f 	dsb	sy
 80137fa:	b662      	cpsie	i
 80137fc:	61bb      	str	r3, [r7, #24]
}
 80137fe:	bf00      	nop
 8013800:	bf00      	nop
 8013802:	e7fd      	b.n	8013800 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013804:	f001 ff22 	bl	801564c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801380c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013810:	2b00      	cmp	r3, #0
 8013812:	d01f      	beq.n	8013854 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013814:	68b9      	ldr	r1, [r7, #8]
 8013816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013818:	f000 fad4 	bl	8013dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801381e:	1e5a      	subs	r2, r3, #1
 8013820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013822:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013826:	691b      	ldr	r3, [r3, #16]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00f      	beq.n	801384c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801382e:	3310      	adds	r3, #16
 8013830:	4618      	mov	r0, r3
 8013832:	f001 f9eb 	bl	8014c0c <xTaskRemoveFromEventList>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d007      	beq.n	801384c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801383c:	4b3c      	ldr	r3, [pc, #240]	@ (8013930 <xQueueReceive+0x1cc>)
 801383e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013842:	601a      	str	r2, [r3, #0]
 8013844:	f3bf 8f4f 	dsb	sy
 8013848:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801384c:	f001 ff34 	bl	80156b8 <vPortExitCritical>
				return pdPASS;
 8013850:	2301      	movs	r3, #1
 8013852:	e069      	b.n	8013928 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d103      	bne.n	8013862 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801385a:	f001 ff2d 	bl	80156b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801385e:	2300      	movs	r3, #0
 8013860:	e062      	b.n	8013928 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013864:	2b00      	cmp	r3, #0
 8013866:	d106      	bne.n	8013876 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013868:	f107 0310 	add.w	r3, r7, #16
 801386c:	4618      	mov	r0, r3
 801386e:	f001 fa33 	bl	8014cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013872:	2301      	movs	r3, #1
 8013874:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013876:	f001 ff1f 	bl	80156b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801387a:	f000 ff89 	bl	8014790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801387e:	f001 fee5 	bl	801564c <vPortEnterCritical>
 8013882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013884:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013888:	b25b      	sxtb	r3, r3
 801388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801388e:	d103      	bne.n	8013898 <xQueueReceive+0x134>
 8013890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013892:	2200      	movs	r2, #0
 8013894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801389a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801389e:	b25b      	sxtb	r3, r3
 80138a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a4:	d103      	bne.n	80138ae <xQueueReceive+0x14a>
 80138a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a8:	2200      	movs	r2, #0
 80138aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138ae:	f001 ff03 	bl	80156b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138b2:	1d3a      	adds	r2, r7, #4
 80138b4:	f107 0310 	add.w	r3, r7, #16
 80138b8:	4611      	mov	r1, r2
 80138ba:	4618      	mov	r0, r3
 80138bc:	f001 fa22 	bl	8014d04 <xTaskCheckForTimeOut>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d123      	bne.n	801390e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138c8:	f000 faf4 	bl	8013eb4 <prvIsQueueEmpty>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d017      	beq.n	8013902 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80138d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d4:	3324      	adds	r3, #36	@ 0x24
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	4611      	mov	r1, r2
 80138da:	4618      	mov	r0, r3
 80138dc:	f001 f96e 	bl	8014bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80138e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138e2:	f000 fa95 	bl	8013e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80138e6:	f000 ff61 	bl	80147ac <xTaskResumeAll>
 80138ea:	4603      	mov	r3, r0
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d189      	bne.n	8013804 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80138f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013930 <xQueueReceive+0x1cc>)
 80138f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138f6:	601a      	str	r2, [r3, #0]
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	f3bf 8f6f 	isb	sy
 8013900:	e780      	b.n	8013804 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013904:	f000 fa84 	bl	8013e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013908:	f000 ff50 	bl	80147ac <xTaskResumeAll>
 801390c:	e77a      	b.n	8013804 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801390e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013910:	f000 fa7e 	bl	8013e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013914:	f000 ff4a 	bl	80147ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801391a:	f000 facb 	bl	8013eb4 <prvIsQueueEmpty>
 801391e:	4603      	mov	r3, r0
 8013920:	2b00      	cmp	r3, #0
 8013922:	f43f af6f 	beq.w	8013804 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013926:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013928:	4618      	mov	r0, r3
 801392a:	3730      	adds	r7, #48	@ 0x30
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	e000ed04 	.word	0xe000ed04

08013934 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b08e      	sub	sp, #56	@ 0x38
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801393e:	2300      	movs	r3, #0
 8013940:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013946:	2300      	movs	r3, #0
 8013948:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394c:	2b00      	cmp	r3, #0
 801394e:	d10d      	bne.n	801396c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013954:	b672      	cpsid	i
 8013956:	f383 8811 	msr	BASEPRI, r3
 801395a:	f3bf 8f6f 	isb	sy
 801395e:	f3bf 8f4f 	dsb	sy
 8013962:	b662      	cpsie	i
 8013964:	623b      	str	r3, [r7, #32]
}
 8013966:	bf00      	nop
 8013968:	bf00      	nop
 801396a:	e7fd      	b.n	8013968 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013970:	2b00      	cmp	r3, #0
 8013972:	d00d      	beq.n	8013990 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8013974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013978:	b672      	cpsid	i
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
 8013986:	b662      	cpsie	i
 8013988:	61fb      	str	r3, [r7, #28]
}
 801398a:	bf00      	nop
 801398c:	bf00      	nop
 801398e:	e7fd      	b.n	801398c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013990:	f001 fb0c 	bl	8014fac <xTaskGetSchedulerState>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d102      	bne.n	80139a0 <xQueueSemaphoreTake+0x6c>
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d101      	bne.n	80139a4 <xQueueSemaphoreTake+0x70>
 80139a0:	2301      	movs	r3, #1
 80139a2:	e000      	b.n	80139a6 <xQueueSemaphoreTake+0x72>
 80139a4:	2300      	movs	r3, #0
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d10d      	bne.n	80139c6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80139aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ae:	b672      	cpsid	i
 80139b0:	f383 8811 	msr	BASEPRI, r3
 80139b4:	f3bf 8f6f 	isb	sy
 80139b8:	f3bf 8f4f 	dsb	sy
 80139bc:	b662      	cpsie	i
 80139be:	61bb      	str	r3, [r7, #24]
}
 80139c0:	bf00      	nop
 80139c2:	bf00      	nop
 80139c4:	e7fd      	b.n	80139c2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80139c6:	f001 fe41 	bl	801564c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80139ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80139d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d024      	beq.n	8013a20 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80139d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139d8:	1e5a      	subs	r2, r3, #1
 80139da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80139de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d104      	bne.n	80139f0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80139e6:	f001 fcab 	bl	8015340 <pvTaskIncrementMutexHeldCount>
 80139ea:	4602      	mov	r2, r0
 80139ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139f2:	691b      	ldr	r3, [r3, #16]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00f      	beq.n	8013a18 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139fa:	3310      	adds	r3, #16
 80139fc:	4618      	mov	r0, r3
 80139fe:	f001 f905 	bl	8014c0c <xTaskRemoveFromEventList>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d007      	beq.n	8013a18 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a08:	4b55      	ldr	r3, [pc, #340]	@ (8013b60 <xQueueSemaphoreTake+0x22c>)
 8013a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a0e:	601a      	str	r2, [r3, #0]
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013a18:	f001 fe4e 	bl	80156b8 <vPortExitCritical>
				return pdPASS;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e09a      	b.n	8013b56 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d114      	bne.n	8013a50 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00d      	beq.n	8013a48 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a30:	b672      	cpsid	i
 8013a32:	f383 8811 	msr	BASEPRI, r3
 8013a36:	f3bf 8f6f 	isb	sy
 8013a3a:	f3bf 8f4f 	dsb	sy
 8013a3e:	b662      	cpsie	i
 8013a40:	617b      	str	r3, [r7, #20]
}
 8013a42:	bf00      	nop
 8013a44:	bf00      	nop
 8013a46:	e7fd      	b.n	8013a44 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013a48:	f001 fe36 	bl	80156b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	e082      	b.n	8013b56 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d106      	bne.n	8013a64 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a56:	f107 030c 	add.w	r3, r7, #12
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f001 f93c 	bl	8014cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a60:	2301      	movs	r3, #1
 8013a62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a64:	f001 fe28 	bl	80156b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a68:	f000 fe92 	bl	8014790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a6c:	f001 fdee 	bl	801564c <vPortEnterCritical>
 8013a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a76:	b25b      	sxtb	r3, r3
 8013a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a7c:	d103      	bne.n	8013a86 <xQueueSemaphoreTake+0x152>
 8013a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a80:	2200      	movs	r2, #0
 8013a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a8c:	b25b      	sxtb	r3, r3
 8013a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a92:	d103      	bne.n	8013a9c <xQueueSemaphoreTake+0x168>
 8013a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a96:	2200      	movs	r2, #0
 8013a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a9c:	f001 fe0c 	bl	80156b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013aa0:	463a      	mov	r2, r7
 8013aa2:	f107 030c 	add.w	r3, r7, #12
 8013aa6:	4611      	mov	r1, r2
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f001 f92b 	bl	8014d04 <xTaskCheckForTimeOut>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d132      	bne.n	8013b1a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ab4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ab6:	f000 f9fd 	bl	8013eb4 <prvIsQueueEmpty>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d026      	beq.n	8013b0e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d109      	bne.n	8013adc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013ac8:	f001 fdc0 	bl	801564c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f001 fa89 	bl	8014fe8 <xTaskPriorityInherit>
 8013ad6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013ad8:	f001 fdee 	bl	80156b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ade:	3324      	adds	r3, #36	@ 0x24
 8013ae0:	683a      	ldr	r2, [r7, #0]
 8013ae2:	4611      	mov	r1, r2
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f001 f869 	bl	8014bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013aea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013aec:	f000 f990 	bl	8013e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013af0:	f000 fe5c 	bl	80147ac <xTaskResumeAll>
 8013af4:	4603      	mov	r3, r0
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	f47f af65 	bne.w	80139c6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013afc:	4b18      	ldr	r3, [pc, #96]	@ (8013b60 <xQueueSemaphoreTake+0x22c>)
 8013afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b02:	601a      	str	r2, [r3, #0]
 8013b04:	f3bf 8f4f 	dsb	sy
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	e75b      	b.n	80139c6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013b0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b10:	f000 f97e 	bl	8013e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b14:	f000 fe4a 	bl	80147ac <xTaskResumeAll>
 8013b18:	e755      	b.n	80139c6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013b1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b1c:	f000 f978 	bl	8013e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b20:	f000 fe44 	bl	80147ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b26:	f000 f9c5 	bl	8013eb4 <prvIsQueueEmpty>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f43f af4a 	beq.w	80139c6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d00d      	beq.n	8013b54 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8013b38:	f001 fd88 	bl	801564c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013b3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b3e:	f000 f8bf 	bl	8013cc0 <prvGetDisinheritPriorityAfterTimeout>
 8013b42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f001 fb58 	bl	8015200 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013b50:	f001 fdb2 	bl	80156b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3738      	adds	r7, #56	@ 0x38
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	e000ed04 	.word	0xe000ed04

08013b64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b08e      	sub	sp, #56	@ 0x38
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	60b9      	str	r1, [r7, #8]
 8013b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d10d      	bne.n	8013b96 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b7e:	b672      	cpsid	i
 8013b80:	f383 8811 	msr	BASEPRI, r3
 8013b84:	f3bf 8f6f 	isb	sy
 8013b88:	f3bf 8f4f 	dsb	sy
 8013b8c:	b662      	cpsie	i
 8013b8e:	623b      	str	r3, [r7, #32]
}
 8013b90:	bf00      	nop
 8013b92:	bf00      	nop
 8013b94:	e7fd      	b.n	8013b92 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d103      	bne.n	8013ba4 <xQueueReceiveFromISR+0x40>
 8013b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d101      	bne.n	8013ba8 <xQueueReceiveFromISR+0x44>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	e000      	b.n	8013baa <xQueueReceiveFromISR+0x46>
 8013ba8:	2300      	movs	r3, #0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d10d      	bne.n	8013bca <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb2:	b672      	cpsid	i
 8013bb4:	f383 8811 	msr	BASEPRI, r3
 8013bb8:	f3bf 8f6f 	isb	sy
 8013bbc:	f3bf 8f4f 	dsb	sy
 8013bc0:	b662      	cpsie	i
 8013bc2:	61fb      	str	r3, [r7, #28]
}
 8013bc4:	bf00      	nop
 8013bc6:	bf00      	nop
 8013bc8:	e7fd      	b.n	8013bc6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bca:	f001 fe27 	bl	801581c <vPortValidateInterruptPriority>
	__asm volatile
 8013bce:	f3ef 8211 	mrs	r2, BASEPRI
 8013bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bd6:	b672      	cpsid	i
 8013bd8:	f383 8811 	msr	BASEPRI, r3
 8013bdc:	f3bf 8f6f 	isb	sy
 8013be0:	f3bf 8f4f 	dsb	sy
 8013be4:	b662      	cpsie	i
 8013be6:	61ba      	str	r2, [r7, #24]
 8013be8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013bea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bf2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d02f      	beq.n	8013c5a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c04:	68b9      	ldr	r1, [r7, #8]
 8013c06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013c08:	f000 f8dc 	bl	8013dc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c0e:	1e5a      	subs	r2, r3, #1
 8013c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013c14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c1c:	d112      	bne.n	8013c44 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c20:	691b      	ldr	r3, [r3, #16]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d016      	beq.n	8013c54 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c28:	3310      	adds	r3, #16
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f000 ffee 	bl	8014c0c <xTaskRemoveFromEventList>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00e      	beq.n	8013c54 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00b      	beq.n	8013c54 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2201      	movs	r2, #1
 8013c40:	601a      	str	r2, [r3, #0]
 8013c42:	e007      	b.n	8013c54 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c48:	3301      	adds	r3, #1
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	b25a      	sxtb	r2, r3
 8013c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013c54:	2301      	movs	r3, #1
 8013c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c58:	e001      	b.n	8013c5e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	f383 8811 	msr	BASEPRI, r3
}
 8013c68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3738      	adds	r7, #56	@ 0x38
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d10d      	bne.n	8013ca2 <vQueueDelete+0x2e>
	__asm volatile
 8013c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c8a:	b672      	cpsid	i
 8013c8c:	f383 8811 	msr	BASEPRI, r3
 8013c90:	f3bf 8f6f 	isb	sy
 8013c94:	f3bf 8f4f 	dsb	sy
 8013c98:	b662      	cpsie	i
 8013c9a:	60bb      	str	r3, [r7, #8]
}
 8013c9c:	bf00      	nop
 8013c9e:	bf00      	nop
 8013ca0:	e7fd      	b.n	8013c9e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f000 f934 	bl	8013f10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d102      	bne.n	8013cb8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f001 feca 	bl	8015a4c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013cb8:	bf00      	nop
 8013cba:	3710      	adds	r7, #16
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b085      	sub	sp, #20
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d006      	beq.n	8013cde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f1c3 0307 	rsb	r3, r3, #7
 8013cda:	60fb      	str	r3, [r7, #12]
 8013cdc:	e001      	b.n	8013ce2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3714      	adds	r7, #20
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d10d      	bne.n	8013d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d14d      	bne.n	8013db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	689b      	ldr	r3, [r3, #8]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f001 f9e4 	bl	80150e8 <xTaskPriorityDisinherit>
 8013d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2200      	movs	r2, #0
 8013d26:	609a      	str	r2, [r3, #8]
 8013d28:	e043      	b.n	8013db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d119      	bne.n	8013d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	6858      	ldr	r0, [r3, #4]
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d38:	461a      	mov	r2, r3
 8013d3a:	68b9      	ldr	r1, [r7, #8]
 8013d3c:	f002 fa9d 	bl	801627a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	685a      	ldr	r2, [r3, #4]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d48:	441a      	add	r2, r3
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	685a      	ldr	r2, [r3, #4]
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	689b      	ldr	r3, [r3, #8]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d32b      	bcc.n	8013db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	681a      	ldr	r2, [r3, #0]
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	605a      	str	r2, [r3, #4]
 8013d62:	e026      	b.n	8013db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	68d8      	ldr	r0, [r3, #12]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	68b9      	ldr	r1, [r7, #8]
 8013d70:	f002 fa83 	bl	801627a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	68da      	ldr	r2, [r3, #12]
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d7c:	425b      	negs	r3, r3
 8013d7e:	441a      	add	r2, r3
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	68da      	ldr	r2, [r3, #12]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d207      	bcs.n	8013da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	689a      	ldr	r2, [r3, #8]
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d98:	425b      	negs	r3, r3
 8013d9a:	441a      	add	r2, r3
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2b02      	cmp	r3, #2
 8013da4:	d105      	bne.n	8013db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	3b01      	subs	r3, #1
 8013db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	1c5a      	adds	r2, r3, #1
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013dba:	697b      	ldr	r3, [r7, #20]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3718      	adds	r7, #24
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d018      	beq.n	8013e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	68da      	ldr	r2, [r3, #12]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dde:	441a      	add	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	68da      	ldr	r2, [r3, #12]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	689b      	ldr	r3, [r3, #8]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d303      	bcc.n	8013df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	68d9      	ldr	r1, [r3, #12]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e00:	461a      	mov	r2, r3
 8013e02:	6838      	ldr	r0, [r7, #0]
 8013e04:	f002 fa39 	bl	801627a <memcpy>
	}
}
 8013e08:	bf00      	nop
 8013e0a:	3708      	adds	r7, #8
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013e18:	f001 fc18 	bl	801564c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e24:	e011      	b.n	8013e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d012      	beq.n	8013e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	3324      	adds	r3, #36	@ 0x24
 8013e32:	4618      	mov	r0, r3
 8013e34:	f000 feea 	bl	8014c0c <xTaskRemoveFromEventList>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d001      	beq.n	8013e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013e3e:	f000 ffc9 	bl	8014dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013e42:	7bfb      	ldrb	r3, [r7, #15]
 8013e44:	3b01      	subs	r3, #1
 8013e46:	b2db      	uxtb	r3, r3
 8013e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	dce9      	bgt.n	8013e26 <prvUnlockQueue+0x16>
 8013e52:	e000      	b.n	8013e56 <prvUnlockQueue+0x46>
					break;
 8013e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	22ff      	movs	r2, #255	@ 0xff
 8013e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013e5e:	f001 fc2b 	bl	80156b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013e62:	f001 fbf3 	bl	801564c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e6e:	e011      	b.n	8013e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	691b      	ldr	r3, [r3, #16]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d012      	beq.n	8013e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	3310      	adds	r3, #16
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f000 fec5 	bl	8014c0c <xTaskRemoveFromEventList>
 8013e82:	4603      	mov	r3, r0
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d001      	beq.n	8013e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013e88:	f000 ffa4 	bl	8014dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013e8c:	7bbb      	ldrb	r3, [r7, #14]
 8013e8e:	3b01      	subs	r3, #1
 8013e90:	b2db      	uxtb	r3, r3
 8013e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	dce9      	bgt.n	8013e70 <prvUnlockQueue+0x60>
 8013e9c:	e000      	b.n	8013ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	22ff      	movs	r2, #255	@ 0xff
 8013ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013ea8:	f001 fc06 	bl	80156b8 <vPortExitCritical>
}
 8013eac:	bf00      	nop
 8013eae:	3710      	adds	r7, #16
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ebc:	f001 fbc6 	bl	801564c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d102      	bne.n	8013ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	60fb      	str	r3, [r7, #12]
 8013ecc:	e001      	b.n	8013ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ed2:	f001 fbf1 	bl	80156b8 <vPortExitCritical>

	return xReturn;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3710      	adds	r7, #16
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ee8:	f001 fbb0 	bl	801564c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	d102      	bne.n	8013efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	60fb      	str	r3, [r7, #12]
 8013efc:	e001      	b.n	8013f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013efe:	2300      	movs	r3, #0
 8013f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f02:	f001 fbd9 	bl	80156b8 <vPortExitCritical>

	return xReturn;
 8013f06:	68fb      	ldr	r3, [r7, #12]
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3710      	adds	r7, #16
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013f10:	b480      	push	{r7}
 8013f12:	b085      	sub	sp, #20
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f18:	2300      	movs	r3, #0
 8013f1a:	60fb      	str	r3, [r7, #12]
 8013f1c:	e016      	b.n	8013f4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013f1e:	4a10      	ldr	r2, [pc, #64]	@ (8013f60 <vQueueUnregisterQueue+0x50>)
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	00db      	lsls	r3, r3, #3
 8013f24:	4413      	add	r3, r2
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d10b      	bne.n	8013f46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8013f60 <vQueueUnregisterQueue+0x50>)
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	2100      	movs	r1, #0
 8013f34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013f38:	4a09      	ldr	r2, [pc, #36]	@ (8013f60 <vQueueUnregisterQueue+0x50>)
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	00db      	lsls	r3, r3, #3
 8013f3e:	4413      	add	r3, r2
 8013f40:	2200      	movs	r2, #0
 8013f42:	605a      	str	r2, [r3, #4]
				break;
 8013f44:	e006      	b.n	8013f54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	3301      	adds	r3, #1
 8013f4a:	60fb      	str	r3, [r7, #12]
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b07      	cmp	r3, #7
 8013f50:	d9e5      	bls.n	8013f1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013f52:	bf00      	nop
 8013f54:	bf00      	nop
 8013f56:	3714      	adds	r7, #20
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	2000152c 	.word	0x2000152c

08013f64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b08e      	sub	sp, #56	@ 0x38
 8013f68:	af04      	add	r7, sp, #16
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	607a      	str	r2, [r7, #4]
 8013f70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d10d      	bne.n	8013f94 <xTaskCreateStatic+0x30>
	__asm volatile
 8013f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f7c:	b672      	cpsid	i
 8013f7e:	f383 8811 	msr	BASEPRI, r3
 8013f82:	f3bf 8f6f 	isb	sy
 8013f86:	f3bf 8f4f 	dsb	sy
 8013f8a:	b662      	cpsie	i
 8013f8c:	623b      	str	r3, [r7, #32]
}
 8013f8e:	bf00      	nop
 8013f90:	bf00      	nop
 8013f92:	e7fd      	b.n	8013f90 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d10d      	bne.n	8013fb6 <xTaskCreateStatic+0x52>
	__asm volatile
 8013f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9e:	b672      	cpsid	i
 8013fa0:	f383 8811 	msr	BASEPRI, r3
 8013fa4:	f3bf 8f6f 	isb	sy
 8013fa8:	f3bf 8f4f 	dsb	sy
 8013fac:	b662      	cpsie	i
 8013fae:	61fb      	str	r3, [r7, #28]
}
 8013fb0:	bf00      	nop
 8013fb2:	bf00      	nop
 8013fb4:	e7fd      	b.n	8013fb2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013fb6:	23a0      	movs	r3, #160	@ 0xa0
 8013fb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	2ba0      	cmp	r3, #160	@ 0xa0
 8013fbe:	d00d      	beq.n	8013fdc <xTaskCreateStatic+0x78>
	__asm volatile
 8013fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fc4:	b672      	cpsid	i
 8013fc6:	f383 8811 	msr	BASEPRI, r3
 8013fca:	f3bf 8f6f 	isb	sy
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	b662      	cpsie	i
 8013fd4:	61bb      	str	r3, [r7, #24]
}
 8013fd6:	bf00      	nop
 8013fd8:	bf00      	nop
 8013fda:	e7fd      	b.n	8013fd8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013fdc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d01e      	beq.n	8014022 <xTaskCreateStatic+0xbe>
 8013fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d01b      	beq.n	8014022 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ff2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ff6:	2202      	movs	r2, #2
 8013ff8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	9303      	str	r3, [sp, #12]
 8014000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014002:	9302      	str	r3, [sp, #8]
 8014004:	f107 0314 	add.w	r3, r7, #20
 8014008:	9301      	str	r3, [sp, #4]
 801400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801400c:	9300      	str	r3, [sp, #0]
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	68b9      	ldr	r1, [r7, #8]
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f000 f851 	bl	80140bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801401a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801401c:	f000 f8f8 	bl	8014210 <prvAddNewTaskToReadyList>
 8014020:	e001      	b.n	8014026 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8014022:	2300      	movs	r3, #0
 8014024:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014026:	697b      	ldr	r3, [r7, #20]
	}
 8014028:	4618      	mov	r0, r3
 801402a:	3728      	adds	r7, #40	@ 0x28
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014030:	b580      	push	{r7, lr}
 8014032:	b08c      	sub	sp, #48	@ 0x30
 8014034:	af04      	add	r7, sp, #16
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	603b      	str	r3, [r7, #0]
 801403c:	4613      	mov	r3, r2
 801403e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014040:	88fb      	ldrh	r3, [r7, #6]
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	4618      	mov	r0, r3
 8014046:	f001 fc2f 	bl	80158a8 <pvPortMalloc>
 801404a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d00e      	beq.n	8014070 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014052:	20a0      	movs	r0, #160	@ 0xa0
 8014054:	f001 fc28 	bl	80158a8 <pvPortMalloc>
 8014058:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d003      	beq.n	8014068 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	697a      	ldr	r2, [r7, #20]
 8014064:	631a      	str	r2, [r3, #48]	@ 0x30
 8014066:	e005      	b.n	8014074 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014068:	6978      	ldr	r0, [r7, #20]
 801406a:	f001 fcef 	bl	8015a4c <vPortFree>
 801406e:	e001      	b.n	8014074 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014070:	2300      	movs	r3, #0
 8014072:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d017      	beq.n	80140aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801407a:	69fb      	ldr	r3, [r7, #28]
 801407c:	2200      	movs	r2, #0
 801407e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014082:	88fa      	ldrh	r2, [r7, #6]
 8014084:	2300      	movs	r3, #0
 8014086:	9303      	str	r3, [sp, #12]
 8014088:	69fb      	ldr	r3, [r7, #28]
 801408a:	9302      	str	r3, [sp, #8]
 801408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801408e:	9301      	str	r3, [sp, #4]
 8014090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	68b9      	ldr	r1, [r7, #8]
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f000 f80f 	bl	80140bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801409e:	69f8      	ldr	r0, [r7, #28]
 80140a0:	f000 f8b6 	bl	8014210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80140a4:	2301      	movs	r3, #1
 80140a6:	61bb      	str	r3, [r7, #24]
 80140a8:	e002      	b.n	80140b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80140aa:	f04f 33ff 	mov.w	r3, #4294967295
 80140ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80140b0:	69bb      	ldr	r3, [r7, #24]
	}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3720      	adds	r7, #32
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
	...

080140bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b088      	sub	sp, #32
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80140ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	461a      	mov	r2, r3
 80140d4:	21a5      	movs	r1, #165	@ 0xa5
 80140d6:	f001 ffee 	bl	80160b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80140da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80140de:	6879      	ldr	r1, [r7, #4]
 80140e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80140e4:	440b      	add	r3, r1
 80140e6:	009b      	lsls	r3, r3, #2
 80140e8:	4413      	add	r3, r2
 80140ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80140ec:	69bb      	ldr	r3, [r7, #24]
 80140ee:	f023 0307 	bic.w	r3, r3, #7
 80140f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80140f4:	69bb      	ldr	r3, [r7, #24]
 80140f6:	f003 0307 	and.w	r3, r3, #7
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d00d      	beq.n	801411a <prvInitialiseNewTask+0x5e>
	__asm volatile
 80140fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014102:	b672      	cpsid	i
 8014104:	f383 8811 	msr	BASEPRI, r3
 8014108:	f3bf 8f6f 	isb	sy
 801410c:	f3bf 8f4f 	dsb	sy
 8014110:	b662      	cpsie	i
 8014112:	617b      	str	r3, [r7, #20]
}
 8014114:	bf00      	nop
 8014116:	bf00      	nop
 8014118:	e7fd      	b.n	8014116 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d01f      	beq.n	8014160 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014120:	2300      	movs	r3, #0
 8014122:	61fb      	str	r3, [r7, #28]
 8014124:	e012      	b.n	801414c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014126:	68ba      	ldr	r2, [r7, #8]
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	4413      	add	r3, r2
 801412c:	7819      	ldrb	r1, [r3, #0]
 801412e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	4413      	add	r3, r2
 8014134:	3334      	adds	r3, #52	@ 0x34
 8014136:	460a      	mov	r2, r1
 8014138:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801413a:	68ba      	ldr	r2, [r7, #8]
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	4413      	add	r3, r2
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d006      	beq.n	8014154 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	3301      	adds	r3, #1
 801414a:	61fb      	str	r3, [r7, #28]
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	2b0f      	cmp	r3, #15
 8014150:	d9e9      	bls.n	8014126 <prvInitialiseNewTask+0x6a>
 8014152:	e000      	b.n	8014156 <prvInitialiseNewTask+0x9a>
			{
				break;
 8014154:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014158:	2200      	movs	r2, #0
 801415a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801415e:	e003      	b.n	8014168 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014162:	2200      	movs	r2, #0
 8014164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801416a:	2b06      	cmp	r3, #6
 801416c:	d901      	bls.n	8014172 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801416e:	2306      	movs	r3, #6
 8014170:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014176:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801417a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801417c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014180:	2200      	movs	r2, #0
 8014182:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014186:	3304      	adds	r3, #4
 8014188:	4618      	mov	r0, r3
 801418a:	f7fe fe6f 	bl	8012e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014190:	3318      	adds	r3, #24
 8014192:	4618      	mov	r0, r3
 8014194:	f7fe fe6a 	bl	8012e6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801419a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801419c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141a0:	f1c3 0207 	rsb	r2, r3, #7
 80141a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80141a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80141ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b0:	2200      	movs	r2, #0
 80141b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b8:	2200      	movs	r2, #0
 80141ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80141be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c0:	334c      	adds	r3, #76	@ 0x4c
 80141c2:	224c      	movs	r2, #76	@ 0x4c
 80141c4:	2100      	movs	r1, #0
 80141c6:	4618      	mov	r0, r3
 80141c8:	f001 ff75 	bl	80160b6 <memset>
 80141cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ce:	4a0d      	ldr	r2, [pc, #52]	@ (8014204 <prvInitialiseNewTask+0x148>)
 80141d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80141d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d4:	4a0c      	ldr	r2, [pc, #48]	@ (8014208 <prvInitialiseNewTask+0x14c>)
 80141d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80141d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141da:	4a0c      	ldr	r2, [pc, #48]	@ (801420c <prvInitialiseNewTask+0x150>)
 80141dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80141de:	683a      	ldr	r2, [r7, #0]
 80141e0:	68f9      	ldr	r1, [r7, #12]
 80141e2:	69b8      	ldr	r0, [r7, #24]
 80141e4:	f001 f926 	bl	8015434 <pxPortInitialiseStack>
 80141e8:	4602      	mov	r2, r0
 80141ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80141ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d002      	beq.n	80141fa <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80141f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141fa:	bf00      	nop
 80141fc:	3720      	adds	r7, #32
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	200096c0 	.word	0x200096c0
 8014208:	20009728 	.word	0x20009728
 801420c:	20009790 	.word	0x20009790

08014210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014218:	f001 fa18 	bl	801564c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801421c:	4b2a      	ldr	r3, [pc, #168]	@ (80142c8 <prvAddNewTaskToReadyList+0xb8>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	3301      	adds	r3, #1
 8014222:	4a29      	ldr	r2, [pc, #164]	@ (80142c8 <prvAddNewTaskToReadyList+0xb8>)
 8014224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014226:	4b29      	ldr	r3, [pc, #164]	@ (80142cc <prvAddNewTaskToReadyList+0xbc>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d109      	bne.n	8014242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801422e:	4a27      	ldr	r2, [pc, #156]	@ (80142cc <prvAddNewTaskToReadyList+0xbc>)
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014234:	4b24      	ldr	r3, [pc, #144]	@ (80142c8 <prvAddNewTaskToReadyList+0xb8>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d110      	bne.n	801425e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801423c:	f000 fdf0 	bl	8014e20 <prvInitialiseTaskLists>
 8014240:	e00d      	b.n	801425e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014242:	4b23      	ldr	r3, [pc, #140]	@ (80142d0 <prvAddNewTaskToReadyList+0xc0>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d109      	bne.n	801425e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801424a:	4b20      	ldr	r3, [pc, #128]	@ (80142cc <prvAddNewTaskToReadyList+0xbc>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014254:	429a      	cmp	r2, r3
 8014256:	d802      	bhi.n	801425e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014258:	4a1c      	ldr	r2, [pc, #112]	@ (80142cc <prvAddNewTaskToReadyList+0xbc>)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801425e:	4b1d      	ldr	r3, [pc, #116]	@ (80142d4 <prvAddNewTaskToReadyList+0xc4>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	3301      	adds	r3, #1
 8014264:	4a1b      	ldr	r2, [pc, #108]	@ (80142d4 <prvAddNewTaskToReadyList+0xc4>)
 8014266:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801426c:	2201      	movs	r2, #1
 801426e:	409a      	lsls	r2, r3
 8014270:	4b19      	ldr	r3, [pc, #100]	@ (80142d8 <prvAddNewTaskToReadyList+0xc8>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4313      	orrs	r3, r2
 8014276:	4a18      	ldr	r2, [pc, #96]	@ (80142d8 <prvAddNewTaskToReadyList+0xc8>)
 8014278:	6013      	str	r3, [r2, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801427e:	4613      	mov	r3, r2
 8014280:	009b      	lsls	r3, r3, #2
 8014282:	4413      	add	r3, r2
 8014284:	009b      	lsls	r3, r3, #2
 8014286:	4a15      	ldr	r2, [pc, #84]	@ (80142dc <prvAddNewTaskToReadyList+0xcc>)
 8014288:	441a      	add	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	3304      	adds	r3, #4
 801428e:	4619      	mov	r1, r3
 8014290:	4610      	mov	r0, r2
 8014292:	f7fe fdf8 	bl	8012e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014296:	f001 fa0f 	bl	80156b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801429a:	4b0d      	ldr	r3, [pc, #52]	@ (80142d0 <prvAddNewTaskToReadyList+0xc0>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d00e      	beq.n	80142c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80142a2:	4b0a      	ldr	r3, [pc, #40]	@ (80142cc <prvAddNewTaskToReadyList+0xbc>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d207      	bcs.n	80142c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80142b0:	4b0b      	ldr	r3, [pc, #44]	@ (80142e0 <prvAddNewTaskToReadyList+0xd0>)
 80142b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	f3bf 8f4f 	dsb	sy
 80142bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142c0:	bf00      	nop
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	2000166c 	.word	0x2000166c
 80142cc:	2000156c 	.word	0x2000156c
 80142d0:	20001678 	.word	0x20001678
 80142d4:	20001688 	.word	0x20001688
 80142d8:	20001674 	.word	0x20001674
 80142dc:	20001570 	.word	0x20001570
 80142e0:	e000ed04 	.word	0xe000ed04

080142e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b08a      	sub	sp, #40	@ 0x28
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80142ee:	2300      	movs	r3, #0
 80142f0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d10d      	bne.n	8014314 <vTaskDelayUntil+0x30>
	__asm volatile
 80142f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142fc:	b672      	cpsid	i
 80142fe:	f383 8811 	msr	BASEPRI, r3
 8014302:	f3bf 8f6f 	isb	sy
 8014306:	f3bf 8f4f 	dsb	sy
 801430a:	b662      	cpsie	i
 801430c:	617b      	str	r3, [r7, #20]
}
 801430e:	bf00      	nop
 8014310:	bf00      	nop
 8014312:	e7fd      	b.n	8014310 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d10d      	bne.n	8014336 <vTaskDelayUntil+0x52>
	__asm volatile
 801431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801431e:	b672      	cpsid	i
 8014320:	f383 8811 	msr	BASEPRI, r3
 8014324:	f3bf 8f6f 	isb	sy
 8014328:	f3bf 8f4f 	dsb	sy
 801432c:	b662      	cpsie	i
 801432e:	613b      	str	r3, [r7, #16]
}
 8014330:	bf00      	nop
 8014332:	bf00      	nop
 8014334:	e7fd      	b.n	8014332 <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8014336:	4b2b      	ldr	r3, [pc, #172]	@ (80143e4 <vTaskDelayUntil+0x100>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d00d      	beq.n	801435a <vTaskDelayUntil+0x76>
	__asm volatile
 801433e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014342:	b672      	cpsid	i
 8014344:	f383 8811 	msr	BASEPRI, r3
 8014348:	f3bf 8f6f 	isb	sy
 801434c:	f3bf 8f4f 	dsb	sy
 8014350:	b662      	cpsie	i
 8014352:	60fb      	str	r3, [r7, #12]
}
 8014354:	bf00      	nop
 8014356:	bf00      	nop
 8014358:	e7fd      	b.n	8014356 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 801435a:	f000 fa19 	bl	8014790 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801435e:	4b22      	ldr	r3, [pc, #136]	@ (80143e8 <vTaskDelayUntil+0x104>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	683a      	ldr	r2, [r7, #0]
 801436a:	4413      	add	r3, r2
 801436c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	6a3a      	ldr	r2, [r7, #32]
 8014374:	429a      	cmp	r2, r3
 8014376:	d20b      	bcs.n	8014390 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	69fa      	ldr	r2, [r7, #28]
 801437e:	429a      	cmp	r2, r3
 8014380:	d211      	bcs.n	80143a6 <vTaskDelayUntil+0xc2>
 8014382:	69fa      	ldr	r2, [r7, #28]
 8014384:	6a3b      	ldr	r3, [r7, #32]
 8014386:	429a      	cmp	r2, r3
 8014388:	d90d      	bls.n	80143a6 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 801438a:	2301      	movs	r3, #1
 801438c:	627b      	str	r3, [r7, #36]	@ 0x24
 801438e:	e00a      	b.n	80143a6 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	69fa      	ldr	r2, [r7, #28]
 8014396:	429a      	cmp	r2, r3
 8014398:	d303      	bcc.n	80143a2 <vTaskDelayUntil+0xbe>
 801439a:	69fa      	ldr	r2, [r7, #28]
 801439c:	6a3b      	ldr	r3, [r7, #32]
 801439e:	429a      	cmp	r2, r3
 80143a0:	d901      	bls.n	80143a6 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 80143a2:	2301      	movs	r3, #1
 80143a4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	69fa      	ldr	r2, [r7, #28]
 80143aa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80143ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d006      	beq.n	80143c0 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80143b2:	69fa      	ldr	r2, [r7, #28]
 80143b4:	6a3b      	ldr	r3, [r7, #32]
 80143b6:	1ad3      	subs	r3, r2, r3
 80143b8:	2100      	movs	r1, #0
 80143ba:	4618      	mov	r0, r3
 80143bc:	f000 ffd4 	bl	8015368 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80143c0:	f000 f9f4 	bl	80147ac <xTaskResumeAll>
 80143c4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80143c6:	69bb      	ldr	r3, [r7, #24]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d107      	bne.n	80143dc <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 80143cc:	4b07      	ldr	r3, [pc, #28]	@ (80143ec <vTaskDelayUntil+0x108>)
 80143ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80143d2:	601a      	str	r2, [r3, #0]
 80143d4:	f3bf 8f4f 	dsb	sy
 80143d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80143dc:	bf00      	nop
 80143de:	3728      	adds	r7, #40	@ 0x28
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	20001694 	.word	0x20001694
 80143e8:	20001670 	.word	0x20001670
 80143ec:	e000ed04 	.word	0xe000ed04

080143f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80143f8:	2300      	movs	r3, #0
 80143fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d01a      	beq.n	8014438 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014402:	4b15      	ldr	r3, [pc, #84]	@ (8014458 <vTaskDelay+0x68>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d00d      	beq.n	8014426 <vTaskDelay+0x36>
	__asm volatile
 801440a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801440e:	b672      	cpsid	i
 8014410:	f383 8811 	msr	BASEPRI, r3
 8014414:	f3bf 8f6f 	isb	sy
 8014418:	f3bf 8f4f 	dsb	sy
 801441c:	b662      	cpsie	i
 801441e:	60bb      	str	r3, [r7, #8]
}
 8014420:	bf00      	nop
 8014422:	bf00      	nop
 8014424:	e7fd      	b.n	8014422 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8014426:	f000 f9b3 	bl	8014790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801442a:	2100      	movs	r1, #0
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f000 ff9b 	bl	8015368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014432:	f000 f9bb 	bl	80147ac <xTaskResumeAll>
 8014436:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d107      	bne.n	801444e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801443e:	4b07      	ldr	r3, [pc, #28]	@ (801445c <vTaskDelay+0x6c>)
 8014440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014444:	601a      	str	r2, [r3, #0]
 8014446:	f3bf 8f4f 	dsb	sy
 801444a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801444e:	bf00      	nop
 8014450:	3710      	adds	r7, #16
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	20001694 	.word	0x20001694
 801445c:	e000ed04 	.word	0xe000ed04

08014460 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014460:	b580      	push	{r7, lr}
 8014462:	b084      	sub	sp, #16
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014468:	f001 f8f0 	bl	801564c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d102      	bne.n	8014478 <vTaskSuspend+0x18>
 8014472:	4b3e      	ldr	r3, [pc, #248]	@ (801456c <vTaskSuspend+0x10c>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	e000      	b.n	801447a <vTaskSuspend+0x1a>
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	3304      	adds	r3, #4
 8014480:	4618      	mov	r0, r3
 8014482:	f7fe fd5d 	bl	8012f40 <uxListRemove>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d115      	bne.n	80144b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014490:	4937      	ldr	r1, [pc, #220]	@ (8014570 <vTaskSuspend+0x110>)
 8014492:	4613      	mov	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4413      	add	r3, r2
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	440b      	add	r3, r1
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d10a      	bne.n	80144b8 <vTaskSuspend+0x58>
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144a6:	2201      	movs	r2, #1
 80144a8:	fa02 f303 	lsl.w	r3, r2, r3
 80144ac:	43da      	mvns	r2, r3
 80144ae:	4b31      	ldr	r3, [pc, #196]	@ (8014574 <vTaskSuspend+0x114>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	4013      	ands	r3, r2
 80144b4:	4a2f      	ldr	r2, [pc, #188]	@ (8014574 <vTaskSuspend+0x114>)
 80144b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d004      	beq.n	80144ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	3318      	adds	r3, #24
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7fe fd3b 	bl	8012f40 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	3304      	adds	r3, #4
 80144ce:	4619      	mov	r1, r3
 80144d0:	4829      	ldr	r0, [pc, #164]	@ (8014578 <vTaskSuspend+0x118>)
 80144d2:	f7fe fcd8 	bl	8012e86 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d103      	bne.n	80144ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	2200      	movs	r2, #0
 80144e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80144ea:	f001 f8e5 	bl	80156b8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80144ee:	4b23      	ldr	r3, [pc, #140]	@ (801457c <vTaskSuspend+0x11c>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d005      	beq.n	8014502 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80144f6:	f001 f8a9 	bl	801564c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80144fa:	f000 fd37 	bl	8014f6c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80144fe:	f001 f8db 	bl	80156b8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014502:	4b1a      	ldr	r3, [pc, #104]	@ (801456c <vTaskSuspend+0x10c>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	68fa      	ldr	r2, [r7, #12]
 8014508:	429a      	cmp	r2, r3
 801450a:	d12a      	bne.n	8014562 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 801450c:	4b1b      	ldr	r3, [pc, #108]	@ (801457c <vTaskSuspend+0x11c>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d01a      	beq.n	801454a <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014514:	4b1a      	ldr	r3, [pc, #104]	@ (8014580 <vTaskSuspend+0x120>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d00d      	beq.n	8014538 <vTaskSuspend+0xd8>
	__asm volatile
 801451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014520:	b672      	cpsid	i
 8014522:	f383 8811 	msr	BASEPRI, r3
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	f3bf 8f4f 	dsb	sy
 801452e:	b662      	cpsie	i
 8014530:	60bb      	str	r3, [r7, #8]
}
 8014532:	bf00      	nop
 8014534:	bf00      	nop
 8014536:	e7fd      	b.n	8014534 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8014538:	4b12      	ldr	r3, [pc, #72]	@ (8014584 <vTaskSuspend+0x124>)
 801453a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801453e:	601a      	str	r2, [r3, #0]
 8014540:	f3bf 8f4f 	dsb	sy
 8014544:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014548:	e00b      	b.n	8014562 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801454a:	4b0b      	ldr	r3, [pc, #44]	@ (8014578 <vTaskSuspend+0x118>)
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	4b0e      	ldr	r3, [pc, #56]	@ (8014588 <vTaskSuspend+0x128>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	429a      	cmp	r2, r3
 8014554:	d103      	bne.n	801455e <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 8014556:	4b05      	ldr	r3, [pc, #20]	@ (801456c <vTaskSuspend+0x10c>)
 8014558:	2200      	movs	r2, #0
 801455a:	601a      	str	r2, [r3, #0]
	}
 801455c:	e001      	b.n	8014562 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 801455e:	f000 faa3 	bl	8014aa8 <vTaskSwitchContext>
	}
 8014562:	bf00      	nop
 8014564:	3710      	adds	r7, #16
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	2000156c 	.word	0x2000156c
 8014570:	20001570 	.word	0x20001570
 8014574:	20001674 	.word	0x20001674
 8014578:	20001658 	.word	0x20001658
 801457c:	20001678 	.word	0x20001678
 8014580:	20001694 	.word	0x20001694
 8014584:	e000ed04 	.word	0xe000ed04
 8014588:	2000166c 	.word	0x2000166c

0801458c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801458c:	b480      	push	{r7}
 801458e:	b087      	sub	sp, #28
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014594:	2300      	movs	r3, #0
 8014596:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d10d      	bne.n	80145be <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 80145a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145a6:	b672      	cpsid	i
 80145a8:	f383 8811 	msr	BASEPRI, r3
 80145ac:	f3bf 8f6f 	isb	sy
 80145b0:	f3bf 8f4f 	dsb	sy
 80145b4:	b662      	cpsie	i
 80145b6:	60fb      	str	r3, [r7, #12]
}
 80145b8:	bf00      	nop
 80145ba:	bf00      	nop
 80145bc:	e7fd      	b.n	80145ba <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	695b      	ldr	r3, [r3, #20]
 80145c2:	4a0a      	ldr	r2, [pc, #40]	@ (80145ec <prvTaskIsTaskSuspended+0x60>)
 80145c4:	4293      	cmp	r3, r2
 80145c6:	d10a      	bne.n	80145de <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145cc:	4a08      	ldr	r2, [pc, #32]	@ (80145f0 <prvTaskIsTaskSuspended+0x64>)
 80145ce:	4293      	cmp	r3, r2
 80145d0:	d005      	beq.n	80145de <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d101      	bne.n	80145de <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 80145da:	2301      	movs	r3, #1
 80145dc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80145de:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80145e0:	4618      	mov	r0, r3
 80145e2:	371c      	adds	r7, #28
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	20001658 	.word	0x20001658
 80145f0:	2000162c 	.word	0x2000162c

080145f4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b084      	sub	sp, #16
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d10d      	bne.n	8014622 <vTaskResume+0x2e>
	__asm volatile
 8014606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801460a:	b672      	cpsid	i
 801460c:	f383 8811 	msr	BASEPRI, r3
 8014610:	f3bf 8f6f 	isb	sy
 8014614:	f3bf 8f4f 	dsb	sy
 8014618:	b662      	cpsie	i
 801461a:	60bb      	str	r3, [r7, #8]
}
 801461c:	bf00      	nop
 801461e:	bf00      	nop
 8014620:	e7fd      	b.n	801461e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014622:	4b20      	ldr	r3, [pc, #128]	@ (80146a4 <vTaskResume+0xb0>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	68fa      	ldr	r2, [r7, #12]
 8014628:	429a      	cmp	r2, r3
 801462a:	d037      	beq.n	801469c <vTaskResume+0xa8>
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d034      	beq.n	801469c <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8014632:	f001 f80b 	bl	801564c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014636:	68f8      	ldr	r0, [r7, #12]
 8014638:	f7ff ffa8 	bl	801458c <prvTaskIsTaskSuspended>
 801463c:	4603      	mov	r3, r0
 801463e:	2b00      	cmp	r3, #0
 8014640:	d02a      	beq.n	8014698 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	3304      	adds	r3, #4
 8014646:	4618      	mov	r0, r3
 8014648:	f7fe fc7a 	bl	8012f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014650:	2201      	movs	r2, #1
 8014652:	409a      	lsls	r2, r3
 8014654:	4b14      	ldr	r3, [pc, #80]	@ (80146a8 <vTaskResume+0xb4>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	4313      	orrs	r3, r2
 801465a:	4a13      	ldr	r2, [pc, #76]	@ (80146a8 <vTaskResume+0xb4>)
 801465c:	6013      	str	r3, [r2, #0]
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014662:	4613      	mov	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	4413      	add	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	4a10      	ldr	r2, [pc, #64]	@ (80146ac <vTaskResume+0xb8>)
 801466c:	441a      	add	r2, r3
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	3304      	adds	r3, #4
 8014672:	4619      	mov	r1, r3
 8014674:	4610      	mov	r0, r2
 8014676:	f7fe fc06 	bl	8012e86 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801467e:	4b09      	ldr	r3, [pc, #36]	@ (80146a4 <vTaskResume+0xb0>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014684:	429a      	cmp	r2, r3
 8014686:	d307      	bcc.n	8014698 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014688:	4b09      	ldr	r3, [pc, #36]	@ (80146b0 <vTaskResume+0xbc>)
 801468a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801468e:	601a      	str	r2, [r3, #0]
 8014690:	f3bf 8f4f 	dsb	sy
 8014694:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014698:	f001 f80e 	bl	80156b8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801469c:	bf00      	nop
 801469e:	3710      	adds	r7, #16
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	2000156c 	.word	0x2000156c
 80146a8:	20001674 	.word	0x20001674
 80146ac:	20001570 	.word	0x20001570
 80146b0:	e000ed04 	.word	0xe000ed04

080146b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b08a      	sub	sp, #40	@ 0x28
 80146b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80146ba:	2300      	movs	r3, #0
 80146bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80146be:	2300      	movs	r3, #0
 80146c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80146c2:	463a      	mov	r2, r7
 80146c4:	1d39      	adds	r1, r7, #4
 80146c6:	f107 0308 	add.w	r3, r7, #8
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7ee fef6 	bl	80034bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80146d0:	6839      	ldr	r1, [r7, #0]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	68ba      	ldr	r2, [r7, #8]
 80146d6:	9202      	str	r2, [sp, #8]
 80146d8:	9301      	str	r3, [sp, #4]
 80146da:	2300      	movs	r3, #0
 80146dc:	9300      	str	r3, [sp, #0]
 80146de:	2300      	movs	r3, #0
 80146e0:	460a      	mov	r2, r1
 80146e2:	4923      	ldr	r1, [pc, #140]	@ (8014770 <vTaskStartScheduler+0xbc>)
 80146e4:	4823      	ldr	r0, [pc, #140]	@ (8014774 <vTaskStartScheduler+0xc0>)
 80146e6:	f7ff fc3d 	bl	8013f64 <xTaskCreateStatic>
 80146ea:	4603      	mov	r3, r0
 80146ec:	4a22      	ldr	r2, [pc, #136]	@ (8014778 <vTaskStartScheduler+0xc4>)
 80146ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80146f0:	4b21      	ldr	r3, [pc, #132]	@ (8014778 <vTaskStartScheduler+0xc4>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d002      	beq.n	80146fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80146f8:	2301      	movs	r3, #1
 80146fa:	617b      	str	r3, [r7, #20]
 80146fc:	e001      	b.n	8014702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80146fe:	2300      	movs	r3, #0
 8014700:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d11d      	bne.n	8014744 <vTaskStartScheduler+0x90>
	__asm volatile
 8014708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801470c:	b672      	cpsid	i
 801470e:	f383 8811 	msr	BASEPRI, r3
 8014712:	f3bf 8f6f 	isb	sy
 8014716:	f3bf 8f4f 	dsb	sy
 801471a:	b662      	cpsie	i
 801471c:	613b      	str	r3, [r7, #16]
}
 801471e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014720:	4b16      	ldr	r3, [pc, #88]	@ (801477c <vTaskStartScheduler+0xc8>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	334c      	adds	r3, #76	@ 0x4c
 8014726:	4a16      	ldr	r2, [pc, #88]	@ (8014780 <vTaskStartScheduler+0xcc>)
 8014728:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801472a:	4b16      	ldr	r3, [pc, #88]	@ (8014784 <vTaskStartScheduler+0xd0>)
 801472c:	f04f 32ff 	mov.w	r2, #4294967295
 8014730:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014732:	4b15      	ldr	r3, [pc, #84]	@ (8014788 <vTaskStartScheduler+0xd4>)
 8014734:	2201      	movs	r2, #1
 8014736:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014738:	4b14      	ldr	r3, [pc, #80]	@ (801478c <vTaskStartScheduler+0xd8>)
 801473a:	2200      	movs	r2, #0
 801473c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801473e:	f000 ff07 	bl	8015550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014742:	e011      	b.n	8014768 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801474a:	d10d      	bne.n	8014768 <vTaskStartScheduler+0xb4>
	__asm volatile
 801474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014750:	b672      	cpsid	i
 8014752:	f383 8811 	msr	BASEPRI, r3
 8014756:	f3bf 8f6f 	isb	sy
 801475a:	f3bf 8f4f 	dsb	sy
 801475e:	b662      	cpsie	i
 8014760:	60fb      	str	r3, [r7, #12]
}
 8014762:	bf00      	nop
 8014764:	bf00      	nop
 8014766:	e7fd      	b.n	8014764 <vTaskStartScheduler+0xb0>
}
 8014768:	bf00      	nop
 801476a:	3718      	adds	r7, #24
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	080172f4 	.word	0x080172f4
 8014774:	08014ded 	.word	0x08014ded
 8014778:	20001690 	.word	0x20001690
 801477c:	2000156c 	.word	0x2000156c
 8014780:	200000ac 	.word	0x200000ac
 8014784:	2000168c 	.word	0x2000168c
 8014788:	20001678 	.word	0x20001678
 801478c:	20001670 	.word	0x20001670

08014790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014790:	b480      	push	{r7}
 8014792:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014794:	4b04      	ldr	r3, [pc, #16]	@ (80147a8 <vTaskSuspendAll+0x18>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	3301      	adds	r3, #1
 801479a:	4a03      	ldr	r2, [pc, #12]	@ (80147a8 <vTaskSuspendAll+0x18>)
 801479c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801479e:	bf00      	nop
 80147a0:	46bd      	mov	sp, r7
 80147a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a6:	4770      	bx	lr
 80147a8:	20001694 	.word	0x20001694

080147ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80147b2:	2300      	movs	r3, #0
 80147b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80147b6:	2300      	movs	r3, #0
 80147b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80147ba:	4b43      	ldr	r3, [pc, #268]	@ (80148c8 <xTaskResumeAll+0x11c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d10d      	bne.n	80147de <xTaskResumeAll+0x32>
	__asm volatile
 80147c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147c6:	b672      	cpsid	i
 80147c8:	f383 8811 	msr	BASEPRI, r3
 80147cc:	f3bf 8f6f 	isb	sy
 80147d0:	f3bf 8f4f 	dsb	sy
 80147d4:	b662      	cpsie	i
 80147d6:	603b      	str	r3, [r7, #0]
}
 80147d8:	bf00      	nop
 80147da:	bf00      	nop
 80147dc:	e7fd      	b.n	80147da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80147de:	f000 ff35 	bl	801564c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80147e2:	4b39      	ldr	r3, [pc, #228]	@ (80148c8 <xTaskResumeAll+0x11c>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	3b01      	subs	r3, #1
 80147e8:	4a37      	ldr	r2, [pc, #220]	@ (80148c8 <xTaskResumeAll+0x11c>)
 80147ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147ec:	4b36      	ldr	r3, [pc, #216]	@ (80148c8 <xTaskResumeAll+0x11c>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d161      	bne.n	80148b8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80147f4:	4b35      	ldr	r3, [pc, #212]	@ (80148cc <xTaskResumeAll+0x120>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d05d      	beq.n	80148b8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80147fc:	e02e      	b.n	801485c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147fe:	4b34      	ldr	r3, [pc, #208]	@ (80148d0 <xTaskResumeAll+0x124>)
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	3318      	adds	r3, #24
 801480a:	4618      	mov	r0, r3
 801480c:	f7fe fb98 	bl	8012f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	3304      	adds	r3, #4
 8014814:	4618      	mov	r0, r3
 8014816:	f7fe fb93 	bl	8012f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801481e:	2201      	movs	r2, #1
 8014820:	409a      	lsls	r2, r3
 8014822:	4b2c      	ldr	r3, [pc, #176]	@ (80148d4 <xTaskResumeAll+0x128>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	4313      	orrs	r3, r2
 8014828:	4a2a      	ldr	r2, [pc, #168]	@ (80148d4 <xTaskResumeAll+0x128>)
 801482a:	6013      	str	r3, [r2, #0]
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014830:	4613      	mov	r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	4413      	add	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4a27      	ldr	r2, [pc, #156]	@ (80148d8 <xTaskResumeAll+0x12c>)
 801483a:	441a      	add	r2, r3
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	3304      	adds	r3, #4
 8014840:	4619      	mov	r1, r3
 8014842:	4610      	mov	r0, r2
 8014844:	f7fe fb1f 	bl	8012e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801484c:	4b23      	ldr	r3, [pc, #140]	@ (80148dc <xTaskResumeAll+0x130>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014852:	429a      	cmp	r2, r3
 8014854:	d302      	bcc.n	801485c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8014856:	4b22      	ldr	r3, [pc, #136]	@ (80148e0 <xTaskResumeAll+0x134>)
 8014858:	2201      	movs	r2, #1
 801485a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801485c:	4b1c      	ldr	r3, [pc, #112]	@ (80148d0 <xTaskResumeAll+0x124>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d1cc      	bne.n	80147fe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d001      	beq.n	801486e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801486a:	f000 fb7f 	bl	8014f6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801486e:	4b1d      	ldr	r3, [pc, #116]	@ (80148e4 <xTaskResumeAll+0x138>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d010      	beq.n	801489c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801487a:	f000 f859 	bl	8014930 <xTaskIncrementTick>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d002      	beq.n	801488a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8014884:	4b16      	ldr	r3, [pc, #88]	@ (80148e0 <xTaskResumeAll+0x134>)
 8014886:	2201      	movs	r2, #1
 8014888:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	3b01      	subs	r3, #1
 801488e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d1f1      	bne.n	801487a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8014896:	4b13      	ldr	r3, [pc, #76]	@ (80148e4 <xTaskResumeAll+0x138>)
 8014898:	2200      	movs	r2, #0
 801489a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801489c:	4b10      	ldr	r3, [pc, #64]	@ (80148e0 <xTaskResumeAll+0x134>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d009      	beq.n	80148b8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80148a4:	2301      	movs	r3, #1
 80148a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80148a8:	4b0f      	ldr	r3, [pc, #60]	@ (80148e8 <xTaskResumeAll+0x13c>)
 80148aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148ae:	601a      	str	r2, [r3, #0]
 80148b0:	f3bf 8f4f 	dsb	sy
 80148b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80148b8:	f000 fefe 	bl	80156b8 <vPortExitCritical>

	return xAlreadyYielded;
 80148bc:	68bb      	ldr	r3, [r7, #8]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	20001694 	.word	0x20001694
 80148cc:	2000166c 	.word	0x2000166c
 80148d0:	2000162c 	.word	0x2000162c
 80148d4:	20001674 	.word	0x20001674
 80148d8:	20001570 	.word	0x20001570
 80148dc:	2000156c 	.word	0x2000156c
 80148e0:	20001680 	.word	0x20001680
 80148e4:	2000167c 	.word	0x2000167c
 80148e8:	e000ed04 	.word	0xe000ed04

080148ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80148ec:	b480      	push	{r7}
 80148ee:	b083      	sub	sp, #12
 80148f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80148f2:	4b05      	ldr	r3, [pc, #20]	@ (8014908 <xTaskGetTickCount+0x1c>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80148f8:	687b      	ldr	r3, [r7, #4]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	370c      	adds	r7, #12
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr
 8014906:	bf00      	nop
 8014908:	20001670 	.word	0x20001670

0801490c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014912:	f000 ff83 	bl	801581c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014916:	2300      	movs	r3, #0
 8014918:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801491a:	4b04      	ldr	r3, [pc, #16]	@ (801492c <xTaskGetTickCountFromISR+0x20>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014920:	683b      	ldr	r3, [r7, #0]
}
 8014922:	4618      	mov	r0, r3
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	20001670 	.word	0x20001670

08014930 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b086      	sub	sp, #24
 8014934:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014936:	2300      	movs	r3, #0
 8014938:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801493a:	4b50      	ldr	r3, [pc, #320]	@ (8014a7c <xTaskIncrementTick+0x14c>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	f040 808b 	bne.w	8014a5a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014944:	4b4e      	ldr	r3, [pc, #312]	@ (8014a80 <xTaskIncrementTick+0x150>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	3301      	adds	r3, #1
 801494a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801494c:	4a4c      	ldr	r2, [pc, #304]	@ (8014a80 <xTaskIncrementTick+0x150>)
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d123      	bne.n	80149a0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8014958:	4b4a      	ldr	r3, [pc, #296]	@ (8014a84 <xTaskIncrementTick+0x154>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d00d      	beq.n	801497e <xTaskIncrementTick+0x4e>
	__asm volatile
 8014962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014966:	b672      	cpsid	i
 8014968:	f383 8811 	msr	BASEPRI, r3
 801496c:	f3bf 8f6f 	isb	sy
 8014970:	f3bf 8f4f 	dsb	sy
 8014974:	b662      	cpsie	i
 8014976:	603b      	str	r3, [r7, #0]
}
 8014978:	bf00      	nop
 801497a:	bf00      	nop
 801497c:	e7fd      	b.n	801497a <xTaskIncrementTick+0x4a>
 801497e:	4b41      	ldr	r3, [pc, #260]	@ (8014a84 <xTaskIncrementTick+0x154>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	60fb      	str	r3, [r7, #12]
 8014984:	4b40      	ldr	r3, [pc, #256]	@ (8014a88 <xTaskIncrementTick+0x158>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a3e      	ldr	r2, [pc, #248]	@ (8014a84 <xTaskIncrementTick+0x154>)
 801498a:	6013      	str	r3, [r2, #0]
 801498c:	4a3e      	ldr	r2, [pc, #248]	@ (8014a88 <xTaskIncrementTick+0x158>)
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	6013      	str	r3, [r2, #0]
 8014992:	4b3e      	ldr	r3, [pc, #248]	@ (8014a8c <xTaskIncrementTick+0x15c>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	3301      	adds	r3, #1
 8014998:	4a3c      	ldr	r2, [pc, #240]	@ (8014a8c <xTaskIncrementTick+0x15c>)
 801499a:	6013      	str	r3, [r2, #0]
 801499c:	f000 fae6 	bl	8014f6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80149a0:	4b3b      	ldr	r3, [pc, #236]	@ (8014a90 <xTaskIncrementTick+0x160>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	693a      	ldr	r2, [r7, #16]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d348      	bcc.n	8014a3c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149aa:	4b36      	ldr	r3, [pc, #216]	@ (8014a84 <xTaskIncrementTick+0x154>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d104      	bne.n	80149be <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149b4:	4b36      	ldr	r3, [pc, #216]	@ (8014a90 <xTaskIncrementTick+0x160>)
 80149b6:	f04f 32ff 	mov.w	r2, #4294967295
 80149ba:	601a      	str	r2, [r3, #0]
					break;
 80149bc:	e03e      	b.n	8014a3c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149be:	4b31      	ldr	r3, [pc, #196]	@ (8014a84 <xTaskIncrementTick+0x154>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	68db      	ldr	r3, [r3, #12]
 80149c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80149ce:	693a      	ldr	r2, [r7, #16]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d203      	bcs.n	80149de <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149d6:	4a2e      	ldr	r2, [pc, #184]	@ (8014a90 <xTaskIncrementTick+0x160>)
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149dc:	e02e      	b.n	8014a3c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	3304      	adds	r3, #4
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7fe faac 	bl	8012f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d004      	beq.n	80149fa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	3318      	adds	r3, #24
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fe faa3 	bl	8012f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149fe:	2201      	movs	r2, #1
 8014a00:	409a      	lsls	r2, r3
 8014a02:	4b24      	ldr	r3, [pc, #144]	@ (8014a94 <xTaskIncrementTick+0x164>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	4313      	orrs	r3, r2
 8014a08:	4a22      	ldr	r2, [pc, #136]	@ (8014a94 <xTaskIncrementTick+0x164>)
 8014a0a:	6013      	str	r3, [r2, #0]
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a10:	4613      	mov	r3, r2
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	4413      	add	r3, r2
 8014a16:	009b      	lsls	r3, r3, #2
 8014a18:	4a1f      	ldr	r2, [pc, #124]	@ (8014a98 <xTaskIncrementTick+0x168>)
 8014a1a:	441a      	add	r2, r3
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	3304      	adds	r3, #4
 8014a20:	4619      	mov	r1, r3
 8014a22:	4610      	mov	r0, r2
 8014a24:	f7fe fa2f 	bl	8012e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8014a9c <xTaskIncrementTick+0x16c>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d3b9      	bcc.n	80149aa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8014a36:	2301      	movs	r3, #1
 8014a38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a3a:	e7b6      	b.n	80149aa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a3c:	4b17      	ldr	r3, [pc, #92]	@ (8014a9c <xTaskIncrementTick+0x16c>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a42:	4915      	ldr	r1, [pc, #84]	@ (8014a98 <xTaskIncrementTick+0x168>)
 8014a44:	4613      	mov	r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	4413      	add	r3, r2
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	440b      	add	r3, r1
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	d907      	bls.n	8014a64 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014a54:	2301      	movs	r3, #1
 8014a56:	617b      	str	r3, [r7, #20]
 8014a58:	e004      	b.n	8014a64 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014a5a:	4b11      	ldr	r3, [pc, #68]	@ (8014aa0 <xTaskIncrementTick+0x170>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	3301      	adds	r3, #1
 8014a60:	4a0f      	ldr	r2, [pc, #60]	@ (8014aa0 <xTaskIncrementTick+0x170>)
 8014a62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014a64:	4b0f      	ldr	r3, [pc, #60]	@ (8014aa4 <xTaskIncrementTick+0x174>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d001      	beq.n	8014a70 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014a70:	697b      	ldr	r3, [r7, #20]
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3718      	adds	r7, #24
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	20001694 	.word	0x20001694
 8014a80:	20001670 	.word	0x20001670
 8014a84:	20001624 	.word	0x20001624
 8014a88:	20001628 	.word	0x20001628
 8014a8c:	20001684 	.word	0x20001684
 8014a90:	2000168c 	.word	0x2000168c
 8014a94:	20001674 	.word	0x20001674
 8014a98:	20001570 	.word	0x20001570
 8014a9c:	2000156c 	.word	0x2000156c
 8014aa0:	2000167c 	.word	0x2000167c
 8014aa4:	20001680 	.word	0x20001680

08014aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b088      	sub	sp, #32
 8014aac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014aae:	4b3d      	ldr	r3, [pc, #244]	@ (8014ba4 <vTaskSwitchContext+0xfc>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d003      	beq.n	8014abe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8014ba8 <vTaskSwitchContext+0x100>)
 8014ab8:	2201      	movs	r2, #1
 8014aba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014abc:	e06e      	b.n	8014b9c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8014abe:	4b3a      	ldr	r3, [pc, #232]	@ (8014ba8 <vTaskSwitchContext+0x100>)
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014ac4:	4b39      	ldr	r3, [pc, #228]	@ (8014bac <vTaskSwitchContext+0x104>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014aca:	61fb      	str	r3, [r7, #28]
 8014acc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014ad0:	61bb      	str	r3, [r7, #24]
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	69ba      	ldr	r2, [r7, #24]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d111      	bne.n	8014b00 <vTaskSwitchContext+0x58>
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	3304      	adds	r3, #4
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	69ba      	ldr	r2, [r7, #24]
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d10b      	bne.n	8014b00 <vTaskSwitchContext+0x58>
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	3308      	adds	r3, #8
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	69ba      	ldr	r2, [r7, #24]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d105      	bne.n	8014b00 <vTaskSwitchContext+0x58>
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	330c      	adds	r3, #12
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	69ba      	ldr	r2, [r7, #24]
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d008      	beq.n	8014b12 <vTaskSwitchContext+0x6a>
 8014b00:	4b2a      	ldr	r3, [pc, #168]	@ (8014bac <vTaskSwitchContext+0x104>)
 8014b02:	681a      	ldr	r2, [r3, #0]
 8014b04:	4b29      	ldr	r3, [pc, #164]	@ (8014bac <vTaskSwitchContext+0x104>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	3334      	adds	r3, #52	@ 0x34
 8014b0a:	4619      	mov	r1, r3
 8014b0c:	4610      	mov	r0, r2
 8014b0e:	f7ee fcc2 	bl	8003496 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b12:	4b27      	ldr	r3, [pc, #156]	@ (8014bb0 <vTaskSwitchContext+0x108>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	fab3 f383 	clz	r3, r3
 8014b1e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014b20:	7afb      	ldrb	r3, [r7, #11]
 8014b22:	f1c3 031f 	rsb	r3, r3, #31
 8014b26:	617b      	str	r3, [r7, #20]
 8014b28:	4922      	ldr	r1, [pc, #136]	@ (8014bb4 <vTaskSwitchContext+0x10c>)
 8014b2a:	697a      	ldr	r2, [r7, #20]
 8014b2c:	4613      	mov	r3, r2
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	4413      	add	r3, r2
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	440b      	add	r3, r1
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d10d      	bne.n	8014b58 <vTaskSwitchContext+0xb0>
	__asm volatile
 8014b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b40:	b672      	cpsid	i
 8014b42:	f383 8811 	msr	BASEPRI, r3
 8014b46:	f3bf 8f6f 	isb	sy
 8014b4a:	f3bf 8f4f 	dsb	sy
 8014b4e:	b662      	cpsie	i
 8014b50:	607b      	str	r3, [r7, #4]
}
 8014b52:	bf00      	nop
 8014b54:	bf00      	nop
 8014b56:	e7fd      	b.n	8014b54 <vTaskSwitchContext+0xac>
 8014b58:	697a      	ldr	r2, [r7, #20]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4a14      	ldr	r2, [pc, #80]	@ (8014bb4 <vTaskSwitchContext+0x10c>)
 8014b64:	4413      	add	r3, r2
 8014b66:	613b      	str	r3, [r7, #16]
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	605a      	str	r2, [r3, #4]
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	685a      	ldr	r2, [r3, #4]
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	3308      	adds	r3, #8
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d104      	bne.n	8014b88 <vTaskSwitchContext+0xe0>
 8014b7e:	693b      	ldr	r3, [r7, #16]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	685a      	ldr	r2, [r3, #4]
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	605a      	str	r2, [r3, #4]
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	4a07      	ldr	r2, [pc, #28]	@ (8014bac <vTaskSwitchContext+0x104>)
 8014b90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014b92:	4b06      	ldr	r3, [pc, #24]	@ (8014bac <vTaskSwitchContext+0x104>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	334c      	adds	r3, #76	@ 0x4c
 8014b98:	4a07      	ldr	r2, [pc, #28]	@ (8014bb8 <vTaskSwitchContext+0x110>)
 8014b9a:	6013      	str	r3, [r2, #0]
}
 8014b9c:	bf00      	nop
 8014b9e:	3720      	adds	r7, #32
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	20001694 	.word	0x20001694
 8014ba8:	20001680 	.word	0x20001680
 8014bac:	2000156c 	.word	0x2000156c
 8014bb0:	20001674 	.word	0x20001674
 8014bb4:	20001570 	.word	0x20001570
 8014bb8:	200000ac 	.word	0x200000ac

08014bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10d      	bne.n	8014be8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bd0:	b672      	cpsid	i
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	b662      	cpsie	i
 8014be0:	60fb      	str	r3, [r7, #12]
}
 8014be2:	bf00      	nop
 8014be4:	bf00      	nop
 8014be6:	e7fd      	b.n	8014be4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014be8:	4b07      	ldr	r3, [pc, #28]	@ (8014c08 <vTaskPlaceOnEventList+0x4c>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	3318      	adds	r3, #24
 8014bee:	4619      	mov	r1, r3
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7fe f96c 	bl	8012ece <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014bf6:	2101      	movs	r1, #1
 8014bf8:	6838      	ldr	r0, [r7, #0]
 8014bfa:	f000 fbb5 	bl	8015368 <prvAddCurrentTaskToDelayedList>
}
 8014bfe:	bf00      	nop
 8014c00:	3710      	adds	r7, #16
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	2000156c 	.word	0x2000156c

08014c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b086      	sub	sp, #24
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	68db      	ldr	r3, [r3, #12]
 8014c18:	68db      	ldr	r3, [r3, #12]
 8014c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d10d      	bne.n	8014c3e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c26:	b672      	cpsid	i
 8014c28:	f383 8811 	msr	BASEPRI, r3
 8014c2c:	f3bf 8f6f 	isb	sy
 8014c30:	f3bf 8f4f 	dsb	sy
 8014c34:	b662      	cpsie	i
 8014c36:	60fb      	str	r3, [r7, #12]
}
 8014c38:	bf00      	nop
 8014c3a:	bf00      	nop
 8014c3c:	e7fd      	b.n	8014c3a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	3318      	adds	r3, #24
 8014c42:	4618      	mov	r0, r3
 8014c44:	f7fe f97c 	bl	8012f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c48:	4b1d      	ldr	r3, [pc, #116]	@ (8014cc0 <xTaskRemoveFromEventList+0xb4>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d11c      	bne.n	8014c8a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	3304      	adds	r3, #4
 8014c54:	4618      	mov	r0, r3
 8014c56:	f7fe f973 	bl	8012f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c5e:	2201      	movs	r2, #1
 8014c60:	409a      	lsls	r2, r3
 8014c62:	4b18      	ldr	r3, [pc, #96]	@ (8014cc4 <xTaskRemoveFromEventList+0xb8>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	4313      	orrs	r3, r2
 8014c68:	4a16      	ldr	r2, [pc, #88]	@ (8014cc4 <xTaskRemoveFromEventList+0xb8>)
 8014c6a:	6013      	str	r3, [r2, #0]
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c70:	4613      	mov	r3, r2
 8014c72:	009b      	lsls	r3, r3, #2
 8014c74:	4413      	add	r3, r2
 8014c76:	009b      	lsls	r3, r3, #2
 8014c78:	4a13      	ldr	r2, [pc, #76]	@ (8014cc8 <xTaskRemoveFromEventList+0xbc>)
 8014c7a:	441a      	add	r2, r3
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	3304      	adds	r3, #4
 8014c80:	4619      	mov	r1, r3
 8014c82:	4610      	mov	r0, r2
 8014c84:	f7fe f8ff 	bl	8012e86 <vListInsertEnd>
 8014c88:	e005      	b.n	8014c96 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	3318      	adds	r3, #24
 8014c8e:	4619      	mov	r1, r3
 8014c90:	480e      	ldr	r0, [pc, #56]	@ (8014ccc <xTaskRemoveFromEventList+0xc0>)
 8014c92:	f7fe f8f8 	bl	8012e86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8014cd0 <xTaskRemoveFromEventList+0xc4>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d905      	bls.n	8014cb0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8014cd4 <xTaskRemoveFromEventList+0xc8>)
 8014caa:	2201      	movs	r2, #1
 8014cac:	601a      	str	r2, [r3, #0]
 8014cae:	e001      	b.n	8014cb4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014cb4:	697b      	ldr	r3, [r7, #20]
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3718      	adds	r7, #24
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	20001694 	.word	0x20001694
 8014cc4:	20001674 	.word	0x20001674
 8014cc8:	20001570 	.word	0x20001570
 8014ccc:	2000162c 	.word	0x2000162c
 8014cd0:	2000156c 	.word	0x2000156c
 8014cd4:	20001680 	.word	0x20001680

08014cd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014ce0:	4b06      	ldr	r3, [pc, #24]	@ (8014cfc <vTaskInternalSetTimeOutState+0x24>)
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014ce8:	4b05      	ldr	r3, [pc, #20]	@ (8014d00 <vTaskInternalSetTimeOutState+0x28>)
 8014cea:	681a      	ldr	r2, [r3, #0]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	605a      	str	r2, [r3, #4]
}
 8014cf0:	bf00      	nop
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr
 8014cfc:	20001684 	.word	0x20001684
 8014d00:	20001670 	.word	0x20001670

08014d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b088      	sub	sp, #32
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d10d      	bne.n	8014d30 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d18:	b672      	cpsid	i
 8014d1a:	f383 8811 	msr	BASEPRI, r3
 8014d1e:	f3bf 8f6f 	isb	sy
 8014d22:	f3bf 8f4f 	dsb	sy
 8014d26:	b662      	cpsie	i
 8014d28:	613b      	str	r3, [r7, #16]
}
 8014d2a:	bf00      	nop
 8014d2c:	bf00      	nop
 8014d2e:	e7fd      	b.n	8014d2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d10d      	bne.n	8014d52 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d3a:	b672      	cpsid	i
 8014d3c:	f383 8811 	msr	BASEPRI, r3
 8014d40:	f3bf 8f6f 	isb	sy
 8014d44:	f3bf 8f4f 	dsb	sy
 8014d48:	b662      	cpsie	i
 8014d4a:	60fb      	str	r3, [r7, #12]
}
 8014d4c:	bf00      	nop
 8014d4e:	bf00      	nop
 8014d50:	e7fd      	b.n	8014d4e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014d52:	f000 fc7b 	bl	801564c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014d56:	4b1d      	ldr	r3, [pc, #116]	@ (8014dcc <xTaskCheckForTimeOut+0xc8>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	69ba      	ldr	r2, [r7, #24]
 8014d62:	1ad3      	subs	r3, r2, r3
 8014d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d6e:	d102      	bne.n	8014d76 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014d70:	2300      	movs	r3, #0
 8014d72:	61fb      	str	r3, [r7, #28]
 8014d74:	e023      	b.n	8014dbe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	4b15      	ldr	r3, [pc, #84]	@ (8014dd0 <xTaskCheckForTimeOut+0xcc>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d007      	beq.n	8014d92 <xTaskCheckForTimeOut+0x8e>
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	69ba      	ldr	r2, [r7, #24]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d302      	bcc.n	8014d92 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	61fb      	str	r3, [r7, #28]
 8014d90:	e015      	b.n	8014dbe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	697a      	ldr	r2, [r7, #20]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d20b      	bcs.n	8014db4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	1ad2      	subs	r2, r2, r3
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f7ff ff95 	bl	8014cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014dae:	2300      	movs	r3, #0
 8014db0:	61fb      	str	r3, [r7, #28]
 8014db2:	e004      	b.n	8014dbe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	2200      	movs	r2, #0
 8014db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014dba:	2301      	movs	r3, #1
 8014dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014dbe:	f000 fc7b 	bl	80156b8 <vPortExitCritical>

	return xReturn;
 8014dc2:	69fb      	ldr	r3, [r7, #28]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3720      	adds	r7, #32
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	20001670 	.word	0x20001670
 8014dd0:	20001684 	.word	0x20001684

08014dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014dd8:	4b03      	ldr	r3, [pc, #12]	@ (8014de8 <vTaskMissedYield+0x14>)
 8014dda:	2201      	movs	r2, #1
 8014ddc:	601a      	str	r2, [r3, #0]
}
 8014dde:	bf00      	nop
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr
 8014de8:	20001680 	.word	0x20001680

08014dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014df4:	f000 f854 	bl	8014ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014df8:	4b07      	ldr	r3, [pc, #28]	@ (8014e18 <prvIdleTask+0x2c>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	d907      	bls.n	8014e10 <prvIdleTask+0x24>
			{
				taskYIELD();
 8014e00:	4b06      	ldr	r3, [pc, #24]	@ (8014e1c <prvIdleTask+0x30>)
 8014e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e06:	601a      	str	r2, [r3, #0]
 8014e08:	f3bf 8f4f 	dsb	sy
 8014e0c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014e10:	f7ee fb3a 	bl	8003488 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014e14:	e7ee      	b.n	8014df4 <prvIdleTask+0x8>
 8014e16:	bf00      	nop
 8014e18:	20001570 	.word	0x20001570
 8014e1c:	e000ed04 	.word	0xe000ed04

08014e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e26:	2300      	movs	r3, #0
 8014e28:	607b      	str	r3, [r7, #4]
 8014e2a:	e00c      	b.n	8014e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	4613      	mov	r3, r2
 8014e30:	009b      	lsls	r3, r3, #2
 8014e32:	4413      	add	r3, r2
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	4a12      	ldr	r2, [pc, #72]	@ (8014e80 <prvInitialiseTaskLists+0x60>)
 8014e38:	4413      	add	r3, r2
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7fd fff6 	bl	8012e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	3301      	adds	r3, #1
 8014e44:	607b      	str	r3, [r7, #4]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2b06      	cmp	r3, #6
 8014e4a:	d9ef      	bls.n	8014e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014e4c:	480d      	ldr	r0, [pc, #52]	@ (8014e84 <prvInitialiseTaskLists+0x64>)
 8014e4e:	f7fd ffed 	bl	8012e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014e52:	480d      	ldr	r0, [pc, #52]	@ (8014e88 <prvInitialiseTaskLists+0x68>)
 8014e54:	f7fd ffea 	bl	8012e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014e58:	480c      	ldr	r0, [pc, #48]	@ (8014e8c <prvInitialiseTaskLists+0x6c>)
 8014e5a:	f7fd ffe7 	bl	8012e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014e5e:	480c      	ldr	r0, [pc, #48]	@ (8014e90 <prvInitialiseTaskLists+0x70>)
 8014e60:	f7fd ffe4 	bl	8012e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014e64:	480b      	ldr	r0, [pc, #44]	@ (8014e94 <prvInitialiseTaskLists+0x74>)
 8014e66:	f7fd ffe1 	bl	8012e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8014e98 <prvInitialiseTaskLists+0x78>)
 8014e6c:	4a05      	ldr	r2, [pc, #20]	@ (8014e84 <prvInitialiseTaskLists+0x64>)
 8014e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014e70:	4b0a      	ldr	r3, [pc, #40]	@ (8014e9c <prvInitialiseTaskLists+0x7c>)
 8014e72:	4a05      	ldr	r2, [pc, #20]	@ (8014e88 <prvInitialiseTaskLists+0x68>)
 8014e74:	601a      	str	r2, [r3, #0]
}
 8014e76:	bf00      	nop
 8014e78:	3708      	adds	r7, #8
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	20001570 	.word	0x20001570
 8014e84:	200015fc 	.word	0x200015fc
 8014e88:	20001610 	.word	0x20001610
 8014e8c:	2000162c 	.word	0x2000162c
 8014e90:	20001640 	.word	0x20001640
 8014e94:	20001658 	.word	0x20001658
 8014e98:	20001624 	.word	0x20001624
 8014e9c:	20001628 	.word	0x20001628

08014ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ea6:	e019      	b.n	8014edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014ea8:	f000 fbd0 	bl	801564c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014eac:	4b10      	ldr	r3, [pc, #64]	@ (8014ef0 <prvCheckTasksWaitingTermination+0x50>)
 8014eae:	68db      	ldr	r3, [r3, #12]
 8014eb0:	68db      	ldr	r3, [r3, #12]
 8014eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	3304      	adds	r3, #4
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7fe f841 	bl	8012f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8014ef4 <prvCheckTasksWaitingTermination+0x54>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	3b01      	subs	r3, #1
 8014ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8014ef4 <prvCheckTasksWaitingTermination+0x54>)
 8014ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8014ef8 <prvCheckTasksWaitingTermination+0x58>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	4a0a      	ldr	r2, [pc, #40]	@ (8014ef8 <prvCheckTasksWaitingTermination+0x58>)
 8014ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014ed2:	f000 fbf1 	bl	80156b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f000 f810 	bl	8014efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014edc:	4b06      	ldr	r3, [pc, #24]	@ (8014ef8 <prvCheckTasksWaitingTermination+0x58>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d1e1      	bne.n	8014ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ee4:	bf00      	nop
 8014ee6:	bf00      	nop
 8014ee8:	3708      	adds	r7, #8
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	20001640 	.word	0x20001640
 8014ef4:	2000166c 	.word	0x2000166c
 8014ef8:	20001654 	.word	0x20001654

08014efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	334c      	adds	r3, #76	@ 0x4c
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f001 f8ed 	bl	80160e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d108      	bne.n	8014f2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f000 fd95 	bl	8015a4c <vPortFree>
				vPortFree( pxTCB );
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f000 fd92 	bl	8015a4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014f28:	e01b      	b.n	8014f62 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014f30:	2b01      	cmp	r3, #1
 8014f32:	d103      	bne.n	8014f3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f000 fd89 	bl	8015a4c <vPortFree>
	}
 8014f3a:	e012      	b.n	8014f62 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014f42:	2b02      	cmp	r3, #2
 8014f44:	d00d      	beq.n	8014f62 <prvDeleteTCB+0x66>
	__asm volatile
 8014f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f4a:	b672      	cpsid	i
 8014f4c:	f383 8811 	msr	BASEPRI, r3
 8014f50:	f3bf 8f6f 	isb	sy
 8014f54:	f3bf 8f4f 	dsb	sy
 8014f58:	b662      	cpsie	i
 8014f5a:	60fb      	str	r3, [r7, #12]
}
 8014f5c:	bf00      	nop
 8014f5e:	bf00      	nop
 8014f60:	e7fd      	b.n	8014f5e <prvDeleteTCB+0x62>
	}
 8014f62:	bf00      	nop
 8014f64:	3710      	adds	r7, #16
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
	...

08014f6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	b083      	sub	sp, #12
 8014f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f72:	4b0c      	ldr	r3, [pc, #48]	@ (8014fa4 <prvResetNextTaskUnblockTime+0x38>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d104      	bne.n	8014f86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8014fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8014f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8014f82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014f84:	e008      	b.n	8014f98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f86:	4b07      	ldr	r3, [pc, #28]	@ (8014fa4 <prvResetNextTaskUnblockTime+0x38>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	4a04      	ldr	r2, [pc, #16]	@ (8014fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8014f96:	6013      	str	r3, [r2, #0]
}
 8014f98:	bf00      	nop
 8014f9a:	370c      	adds	r7, #12
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr
 8014fa4:	20001624 	.word	0x20001624
 8014fa8:	2000168c 	.word	0x2000168c

08014fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014fac:	b480      	push	{r7}
 8014fae:	b083      	sub	sp, #12
 8014fb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8014fe0 <xTaskGetSchedulerState+0x34>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d102      	bne.n	8014fc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	607b      	str	r3, [r7, #4]
 8014fbe:	e008      	b.n	8014fd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fc0:	4b08      	ldr	r3, [pc, #32]	@ (8014fe4 <xTaskGetSchedulerState+0x38>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d102      	bne.n	8014fce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014fc8:	2302      	movs	r3, #2
 8014fca:	607b      	str	r3, [r7, #4]
 8014fcc:	e001      	b.n	8014fd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014fd2:	687b      	ldr	r3, [r7, #4]
	}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	370c      	adds	r7, #12
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fde:	4770      	bx	lr
 8014fe0:	20001678 	.word	0x20001678
 8014fe4:	20001694 	.word	0x20001694

08014fe8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d069      	beq.n	80150d2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015002:	4b36      	ldr	r3, [pc, #216]	@ (80150dc <xTaskPriorityInherit+0xf4>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015008:	429a      	cmp	r2, r3
 801500a:	d259      	bcs.n	80150c0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	699b      	ldr	r3, [r3, #24]
 8015010:	2b00      	cmp	r3, #0
 8015012:	db06      	blt.n	8015022 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015014:	4b31      	ldr	r3, [pc, #196]	@ (80150dc <xTaskPriorityInherit+0xf4>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801501a:	f1c3 0207 	rsb	r2, r3, #7
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	6959      	ldr	r1, [r3, #20]
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801502a:	4613      	mov	r3, r2
 801502c:	009b      	lsls	r3, r3, #2
 801502e:	4413      	add	r3, r2
 8015030:	009b      	lsls	r3, r3, #2
 8015032:	4a2b      	ldr	r2, [pc, #172]	@ (80150e0 <xTaskPriorityInherit+0xf8>)
 8015034:	4413      	add	r3, r2
 8015036:	4299      	cmp	r1, r3
 8015038:	d13a      	bne.n	80150b0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	3304      	adds	r3, #4
 801503e:	4618      	mov	r0, r3
 8015040:	f7fd ff7e 	bl	8012f40 <uxListRemove>
 8015044:	4603      	mov	r3, r0
 8015046:	2b00      	cmp	r3, #0
 8015048:	d115      	bne.n	8015076 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801504e:	4924      	ldr	r1, [pc, #144]	@ (80150e0 <xTaskPriorityInherit+0xf8>)
 8015050:	4613      	mov	r3, r2
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	4413      	add	r3, r2
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	440b      	add	r3, r1
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d10a      	bne.n	8015076 <xTaskPriorityInherit+0x8e>
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015064:	2201      	movs	r2, #1
 8015066:	fa02 f303 	lsl.w	r3, r2, r3
 801506a:	43da      	mvns	r2, r3
 801506c:	4b1d      	ldr	r3, [pc, #116]	@ (80150e4 <xTaskPriorityInherit+0xfc>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	4013      	ands	r3, r2
 8015072:	4a1c      	ldr	r2, [pc, #112]	@ (80150e4 <xTaskPriorityInherit+0xfc>)
 8015074:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015076:	4b19      	ldr	r3, [pc, #100]	@ (80150dc <xTaskPriorityInherit+0xf4>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015084:	2201      	movs	r2, #1
 8015086:	409a      	lsls	r2, r3
 8015088:	4b16      	ldr	r3, [pc, #88]	@ (80150e4 <xTaskPriorityInherit+0xfc>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	4313      	orrs	r3, r2
 801508e:	4a15      	ldr	r2, [pc, #84]	@ (80150e4 <xTaskPriorityInherit+0xfc>)
 8015090:	6013      	str	r3, [r2, #0]
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015096:	4613      	mov	r3, r2
 8015098:	009b      	lsls	r3, r3, #2
 801509a:	4413      	add	r3, r2
 801509c:	009b      	lsls	r3, r3, #2
 801509e:	4a10      	ldr	r2, [pc, #64]	@ (80150e0 <xTaskPriorityInherit+0xf8>)
 80150a0:	441a      	add	r2, r3
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	3304      	adds	r3, #4
 80150a6:	4619      	mov	r1, r3
 80150a8:	4610      	mov	r0, r2
 80150aa:	f7fd feec 	bl	8012e86 <vListInsertEnd>
 80150ae:	e004      	b.n	80150ba <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80150b0:	4b0a      	ldr	r3, [pc, #40]	@ (80150dc <xTaskPriorityInherit+0xf4>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80150ba:	2301      	movs	r3, #1
 80150bc:	60fb      	str	r3, [r7, #12]
 80150be:	e008      	b.n	80150d2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80150c4:	4b05      	ldr	r3, [pc, #20]	@ (80150dc <xTaskPriorityInherit+0xf4>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d201      	bcs.n	80150d2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80150ce:	2301      	movs	r3, #1
 80150d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80150d2:	68fb      	ldr	r3, [r7, #12]
	}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3710      	adds	r7, #16
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	2000156c 	.word	0x2000156c
 80150e0:	20001570 	.word	0x20001570
 80150e4:	20001674 	.word	0x20001674

080150e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b086      	sub	sp, #24
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80150f4:	2300      	movs	r3, #0
 80150f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d074      	beq.n	80151e8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80150fe:	4b3d      	ldr	r3, [pc, #244]	@ (80151f4 <xTaskPriorityDisinherit+0x10c>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	693a      	ldr	r2, [r7, #16]
 8015104:	429a      	cmp	r2, r3
 8015106:	d00d      	beq.n	8015124 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801510c:	b672      	cpsid	i
 801510e:	f383 8811 	msr	BASEPRI, r3
 8015112:	f3bf 8f6f 	isb	sy
 8015116:	f3bf 8f4f 	dsb	sy
 801511a:	b662      	cpsie	i
 801511c:	60fb      	str	r3, [r7, #12]
}
 801511e:	bf00      	nop
 8015120:	bf00      	nop
 8015122:	e7fd      	b.n	8015120 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015128:	2b00      	cmp	r3, #0
 801512a:	d10d      	bne.n	8015148 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015130:	b672      	cpsid	i
 8015132:	f383 8811 	msr	BASEPRI, r3
 8015136:	f3bf 8f6f 	isb	sy
 801513a:	f3bf 8f4f 	dsb	sy
 801513e:	b662      	cpsie	i
 8015140:	60bb      	str	r3, [r7, #8]
}
 8015142:	bf00      	nop
 8015144:	bf00      	nop
 8015146:	e7fd      	b.n	8015144 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801514c:	1e5a      	subs	r2, r3, #1
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801515a:	429a      	cmp	r2, r3
 801515c:	d044      	beq.n	80151e8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015162:	2b00      	cmp	r3, #0
 8015164:	d140      	bne.n	80151e8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	3304      	adds	r3, #4
 801516a:	4618      	mov	r0, r3
 801516c:	f7fd fee8 	bl	8012f40 <uxListRemove>
 8015170:	4603      	mov	r3, r0
 8015172:	2b00      	cmp	r3, #0
 8015174:	d115      	bne.n	80151a2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801517a:	491f      	ldr	r1, [pc, #124]	@ (80151f8 <xTaskPriorityDisinherit+0x110>)
 801517c:	4613      	mov	r3, r2
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	4413      	add	r3, r2
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	440b      	add	r3, r1
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d10a      	bne.n	80151a2 <xTaskPriorityDisinherit+0xba>
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015190:	2201      	movs	r2, #1
 8015192:	fa02 f303 	lsl.w	r3, r2, r3
 8015196:	43da      	mvns	r2, r3
 8015198:	4b18      	ldr	r3, [pc, #96]	@ (80151fc <xTaskPriorityDisinherit+0x114>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	4013      	ands	r3, r2
 801519e:	4a17      	ldr	r2, [pc, #92]	@ (80151fc <xTaskPriorityDisinherit+0x114>)
 80151a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151ae:	f1c3 0207 	rsb	r2, r3, #7
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151ba:	2201      	movs	r2, #1
 80151bc:	409a      	lsls	r2, r3
 80151be:	4b0f      	ldr	r3, [pc, #60]	@ (80151fc <xTaskPriorityDisinherit+0x114>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	4313      	orrs	r3, r2
 80151c4:	4a0d      	ldr	r2, [pc, #52]	@ (80151fc <xTaskPriorityDisinherit+0x114>)
 80151c6:	6013      	str	r3, [r2, #0]
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151cc:	4613      	mov	r3, r2
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	4413      	add	r3, r2
 80151d2:	009b      	lsls	r3, r3, #2
 80151d4:	4a08      	ldr	r2, [pc, #32]	@ (80151f8 <xTaskPriorityDisinherit+0x110>)
 80151d6:	441a      	add	r2, r3
 80151d8:	693b      	ldr	r3, [r7, #16]
 80151da:	3304      	adds	r3, #4
 80151dc:	4619      	mov	r1, r3
 80151de:	4610      	mov	r0, r2
 80151e0:	f7fd fe51 	bl	8012e86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80151e4:	2301      	movs	r3, #1
 80151e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80151e8:	697b      	ldr	r3, [r7, #20]
	}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3718      	adds	r7, #24
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	2000156c 	.word	0x2000156c
 80151f8:	20001570 	.word	0x20001570
 80151fc:	20001674 	.word	0x20001674

08015200 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015200:	b580      	push	{r7, lr}
 8015202:	b088      	sub	sp, #32
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801520e:	2301      	movs	r3, #1
 8015210:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2b00      	cmp	r3, #0
 8015216:	f000 8089 	beq.w	801532c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801521e:	2b00      	cmp	r3, #0
 8015220:	d10d      	bne.n	801523e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8015222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015226:	b672      	cpsid	i
 8015228:	f383 8811 	msr	BASEPRI, r3
 801522c:	f3bf 8f6f 	isb	sy
 8015230:	f3bf 8f4f 	dsb	sy
 8015234:	b662      	cpsie	i
 8015236:	60fb      	str	r3, [r7, #12]
}
 8015238:	bf00      	nop
 801523a:	bf00      	nop
 801523c:	e7fd      	b.n	801523a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801523e:	69bb      	ldr	r3, [r7, #24]
 8015240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015242:	683a      	ldr	r2, [r7, #0]
 8015244:	429a      	cmp	r2, r3
 8015246:	d902      	bls.n	801524e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	61fb      	str	r3, [r7, #28]
 801524c:	e002      	b.n	8015254 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015252:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015254:	69bb      	ldr	r3, [r7, #24]
 8015256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015258:	69fa      	ldr	r2, [r7, #28]
 801525a:	429a      	cmp	r2, r3
 801525c:	d066      	beq.n	801532c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015262:	697a      	ldr	r2, [r7, #20]
 8015264:	429a      	cmp	r2, r3
 8015266:	d161      	bne.n	801532c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015268:	4b32      	ldr	r3, [pc, #200]	@ (8015334 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	69ba      	ldr	r2, [r7, #24]
 801526e:	429a      	cmp	r2, r3
 8015270:	d10d      	bne.n	801528e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8015272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015276:	b672      	cpsid	i
 8015278:	f383 8811 	msr	BASEPRI, r3
 801527c:	f3bf 8f6f 	isb	sy
 8015280:	f3bf 8f4f 	dsb	sy
 8015284:	b662      	cpsie	i
 8015286:	60bb      	str	r3, [r7, #8]
}
 8015288:	bf00      	nop
 801528a:	bf00      	nop
 801528c:	e7fd      	b.n	801528a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801528e:	69bb      	ldr	r3, [r7, #24]
 8015290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015292:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015294:	69bb      	ldr	r3, [r7, #24]
 8015296:	69fa      	ldr	r2, [r7, #28]
 8015298:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	699b      	ldr	r3, [r3, #24]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	db04      	blt.n	80152ac <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152a2:	69fb      	ldr	r3, [r7, #28]
 80152a4:	f1c3 0207 	rsb	r2, r3, #7
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80152ac:	69bb      	ldr	r3, [r7, #24]
 80152ae:	6959      	ldr	r1, [r3, #20]
 80152b0:	693a      	ldr	r2, [r7, #16]
 80152b2:	4613      	mov	r3, r2
 80152b4:	009b      	lsls	r3, r3, #2
 80152b6:	4413      	add	r3, r2
 80152b8:	009b      	lsls	r3, r3, #2
 80152ba:	4a1f      	ldr	r2, [pc, #124]	@ (8015338 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80152bc:	4413      	add	r3, r2
 80152be:	4299      	cmp	r1, r3
 80152c0:	d134      	bne.n	801532c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	3304      	adds	r3, #4
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7fd fe3a 	bl	8012f40 <uxListRemove>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d115      	bne.n	80152fe <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152d6:	4918      	ldr	r1, [pc, #96]	@ (8015338 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80152d8:	4613      	mov	r3, r2
 80152da:	009b      	lsls	r3, r3, #2
 80152dc:	4413      	add	r3, r2
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	440b      	add	r3, r1
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d10a      	bne.n	80152fe <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80152e8:	69bb      	ldr	r3, [r7, #24]
 80152ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152ec:	2201      	movs	r2, #1
 80152ee:	fa02 f303 	lsl.w	r3, r2, r3
 80152f2:	43da      	mvns	r2, r3
 80152f4:	4b11      	ldr	r3, [pc, #68]	@ (801533c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4013      	ands	r3, r2
 80152fa:	4a10      	ldr	r2, [pc, #64]	@ (801533c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80152fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015302:	2201      	movs	r2, #1
 8015304:	409a      	lsls	r2, r3
 8015306:	4b0d      	ldr	r3, [pc, #52]	@ (801533c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4313      	orrs	r3, r2
 801530c:	4a0b      	ldr	r2, [pc, #44]	@ (801533c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801530e:	6013      	str	r3, [r2, #0]
 8015310:	69bb      	ldr	r3, [r7, #24]
 8015312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015314:	4613      	mov	r3, r2
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	4413      	add	r3, r2
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	4a06      	ldr	r2, [pc, #24]	@ (8015338 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801531e:	441a      	add	r2, r3
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	3304      	adds	r3, #4
 8015324:	4619      	mov	r1, r3
 8015326:	4610      	mov	r0, r2
 8015328:	f7fd fdad 	bl	8012e86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801532c:	bf00      	nop
 801532e:	3720      	adds	r7, #32
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	2000156c 	.word	0x2000156c
 8015338:	20001570 	.word	0x20001570
 801533c:	20001674 	.word	0x20001674

08015340 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015340:	b480      	push	{r7}
 8015342:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015344:	4b07      	ldr	r3, [pc, #28]	@ (8015364 <pvTaskIncrementMutexHeldCount+0x24>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d004      	beq.n	8015356 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801534c:	4b05      	ldr	r3, [pc, #20]	@ (8015364 <pvTaskIncrementMutexHeldCount+0x24>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015352:	3201      	adds	r2, #1
 8015354:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8015356:	4b03      	ldr	r3, [pc, #12]	@ (8015364 <pvTaskIncrementMutexHeldCount+0x24>)
 8015358:	681b      	ldr	r3, [r3, #0]
	}
 801535a:	4618      	mov	r0, r3
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr
 8015364:	2000156c 	.word	0x2000156c

08015368 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015372:	4b29      	ldr	r3, [pc, #164]	@ (8015418 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015378:	4b28      	ldr	r3, [pc, #160]	@ (801541c <prvAddCurrentTaskToDelayedList+0xb4>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	3304      	adds	r3, #4
 801537e:	4618      	mov	r0, r3
 8015380:	f7fd fdde 	bl	8012f40 <uxListRemove>
 8015384:	4603      	mov	r3, r0
 8015386:	2b00      	cmp	r3, #0
 8015388:	d10b      	bne.n	80153a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801538a:	4b24      	ldr	r3, [pc, #144]	@ (801541c <prvAddCurrentTaskToDelayedList+0xb4>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015390:	2201      	movs	r2, #1
 8015392:	fa02 f303 	lsl.w	r3, r2, r3
 8015396:	43da      	mvns	r2, r3
 8015398:	4b21      	ldr	r3, [pc, #132]	@ (8015420 <prvAddCurrentTaskToDelayedList+0xb8>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	4013      	ands	r3, r2
 801539e:	4a20      	ldr	r2, [pc, #128]	@ (8015420 <prvAddCurrentTaskToDelayedList+0xb8>)
 80153a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a8:	d10a      	bne.n	80153c0 <prvAddCurrentTaskToDelayedList+0x58>
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d007      	beq.n	80153c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153b0:	4b1a      	ldr	r3, [pc, #104]	@ (801541c <prvAddCurrentTaskToDelayedList+0xb4>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	3304      	adds	r3, #4
 80153b6:	4619      	mov	r1, r3
 80153b8:	481a      	ldr	r0, [pc, #104]	@ (8015424 <prvAddCurrentTaskToDelayedList+0xbc>)
 80153ba:	f7fd fd64 	bl	8012e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80153be:	e026      	b.n	801540e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80153c0:	68fa      	ldr	r2, [r7, #12]
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	4413      	add	r3, r2
 80153c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80153c8:	4b14      	ldr	r3, [pc, #80]	@ (801541c <prvAddCurrentTaskToDelayedList+0xb4>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	68ba      	ldr	r2, [r7, #8]
 80153ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80153d0:	68ba      	ldr	r2, [r7, #8]
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d209      	bcs.n	80153ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153d8:	4b13      	ldr	r3, [pc, #76]	@ (8015428 <prvAddCurrentTaskToDelayedList+0xc0>)
 80153da:	681a      	ldr	r2, [r3, #0]
 80153dc:	4b0f      	ldr	r3, [pc, #60]	@ (801541c <prvAddCurrentTaskToDelayedList+0xb4>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	3304      	adds	r3, #4
 80153e2:	4619      	mov	r1, r3
 80153e4:	4610      	mov	r0, r2
 80153e6:	f7fd fd72 	bl	8012ece <vListInsert>
}
 80153ea:	e010      	b.n	801540e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153ec:	4b0f      	ldr	r3, [pc, #60]	@ (801542c <prvAddCurrentTaskToDelayedList+0xc4>)
 80153ee:	681a      	ldr	r2, [r3, #0]
 80153f0:	4b0a      	ldr	r3, [pc, #40]	@ (801541c <prvAddCurrentTaskToDelayedList+0xb4>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	3304      	adds	r3, #4
 80153f6:	4619      	mov	r1, r3
 80153f8:	4610      	mov	r0, r2
 80153fa:	f7fd fd68 	bl	8012ece <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80153fe:	4b0c      	ldr	r3, [pc, #48]	@ (8015430 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	68ba      	ldr	r2, [r7, #8]
 8015404:	429a      	cmp	r2, r3
 8015406:	d202      	bcs.n	801540e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015408:	4a09      	ldr	r2, [pc, #36]	@ (8015430 <prvAddCurrentTaskToDelayedList+0xc8>)
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	6013      	str	r3, [r2, #0]
}
 801540e:	bf00      	nop
 8015410:	3710      	adds	r7, #16
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	20001670 	.word	0x20001670
 801541c:	2000156c 	.word	0x2000156c
 8015420:	20001674 	.word	0x20001674
 8015424:	20001658 	.word	0x20001658
 8015428:	20001628 	.word	0x20001628
 801542c:	20001624 	.word	0x20001624
 8015430:	2000168c 	.word	0x2000168c

08015434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015434:	b480      	push	{r7}
 8015436:	b085      	sub	sp, #20
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	3b04      	subs	r3, #4
 8015444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801544c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	3b04      	subs	r3, #4
 8015452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015454:	68bb      	ldr	r3, [r7, #8]
 8015456:	f023 0201 	bic.w	r2, r3, #1
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	3b04      	subs	r3, #4
 8015462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015464:	4a0c      	ldr	r2, [pc, #48]	@ (8015498 <pxPortInitialiseStack+0x64>)
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	3b14      	subs	r3, #20
 801546e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	3b04      	subs	r3, #4
 801547a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	f06f 0202 	mvn.w	r2, #2
 8015482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	3b20      	subs	r3, #32
 8015488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801548a:	68fb      	ldr	r3, [r7, #12]
}
 801548c:	4618      	mov	r0, r3
 801548e:	3714      	adds	r7, #20
 8015490:	46bd      	mov	sp, r7
 8015492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015496:	4770      	bx	lr
 8015498:	0801549d 	.word	0x0801549d

0801549c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801549c:	b480      	push	{r7}
 801549e:	b085      	sub	sp, #20
 80154a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80154a2:	2300      	movs	r3, #0
 80154a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80154a6:	4b15      	ldr	r3, [pc, #84]	@ (80154fc <prvTaskExitError+0x60>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154ae:	d00d      	beq.n	80154cc <prvTaskExitError+0x30>
	__asm volatile
 80154b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154b4:	b672      	cpsid	i
 80154b6:	f383 8811 	msr	BASEPRI, r3
 80154ba:	f3bf 8f6f 	isb	sy
 80154be:	f3bf 8f4f 	dsb	sy
 80154c2:	b662      	cpsie	i
 80154c4:	60fb      	str	r3, [r7, #12]
}
 80154c6:	bf00      	nop
 80154c8:	bf00      	nop
 80154ca:	e7fd      	b.n	80154c8 <prvTaskExitError+0x2c>
	__asm volatile
 80154cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154d0:	b672      	cpsid	i
 80154d2:	f383 8811 	msr	BASEPRI, r3
 80154d6:	f3bf 8f6f 	isb	sy
 80154da:	f3bf 8f4f 	dsb	sy
 80154de:	b662      	cpsie	i
 80154e0:	60bb      	str	r3, [r7, #8]
}
 80154e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80154e4:	bf00      	nop
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d0fc      	beq.n	80154e6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80154ec:	bf00      	nop
 80154ee:	bf00      	nop
 80154f0:	3714      	adds	r7, #20
 80154f2:	46bd      	mov	sp, r7
 80154f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f8:	4770      	bx	lr
 80154fa:	bf00      	nop
 80154fc:	2000009c 	.word	0x2000009c

08015500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015500:	4b07      	ldr	r3, [pc, #28]	@ (8015520 <pxCurrentTCBConst2>)
 8015502:	6819      	ldr	r1, [r3, #0]
 8015504:	6808      	ldr	r0, [r1, #0]
 8015506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550a:	f380 8809 	msr	PSP, r0
 801550e:	f3bf 8f6f 	isb	sy
 8015512:	f04f 0000 	mov.w	r0, #0
 8015516:	f380 8811 	msr	BASEPRI, r0
 801551a:	4770      	bx	lr
 801551c:	f3af 8000 	nop.w

08015520 <pxCurrentTCBConst2>:
 8015520:	2000156c 	.word	0x2000156c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015524:	bf00      	nop
 8015526:	bf00      	nop

08015528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015528:	4808      	ldr	r0, [pc, #32]	@ (801554c <prvPortStartFirstTask+0x24>)
 801552a:	6800      	ldr	r0, [r0, #0]
 801552c:	6800      	ldr	r0, [r0, #0]
 801552e:	f380 8808 	msr	MSP, r0
 8015532:	f04f 0000 	mov.w	r0, #0
 8015536:	f380 8814 	msr	CONTROL, r0
 801553a:	b662      	cpsie	i
 801553c:	b661      	cpsie	f
 801553e:	f3bf 8f4f 	dsb	sy
 8015542:	f3bf 8f6f 	isb	sy
 8015546:	df00      	svc	0
 8015548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801554a:	bf00      	nop
 801554c:	e000ed08 	.word	0xe000ed08

08015550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b084      	sub	sp, #16
 8015554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015556:	4b37      	ldr	r3, [pc, #220]	@ (8015634 <xPortStartScheduler+0xe4>)
 8015558:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	b2db      	uxtb	r3, r3
 8015560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	22ff      	movs	r2, #255	@ 0xff
 8015566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	781b      	ldrb	r3, [r3, #0]
 801556c:	b2db      	uxtb	r3, r3
 801556e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015570:	78fb      	ldrb	r3, [r7, #3]
 8015572:	b2db      	uxtb	r3, r3
 8015574:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015578:	b2da      	uxtb	r2, r3
 801557a:	4b2f      	ldr	r3, [pc, #188]	@ (8015638 <xPortStartScheduler+0xe8>)
 801557c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801557e:	4b2f      	ldr	r3, [pc, #188]	@ (801563c <xPortStartScheduler+0xec>)
 8015580:	2207      	movs	r2, #7
 8015582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015584:	e009      	b.n	801559a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015586:	4b2d      	ldr	r3, [pc, #180]	@ (801563c <xPortStartScheduler+0xec>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	3b01      	subs	r3, #1
 801558c:	4a2b      	ldr	r2, [pc, #172]	@ (801563c <xPortStartScheduler+0xec>)
 801558e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015590:	78fb      	ldrb	r3, [r7, #3]
 8015592:	b2db      	uxtb	r3, r3
 8015594:	005b      	lsls	r3, r3, #1
 8015596:	b2db      	uxtb	r3, r3
 8015598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801559a:	78fb      	ldrb	r3, [r7, #3]
 801559c:	b2db      	uxtb	r3, r3
 801559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80155a2:	2b80      	cmp	r3, #128	@ 0x80
 80155a4:	d0ef      	beq.n	8015586 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80155a6:	4b25      	ldr	r3, [pc, #148]	@ (801563c <xPortStartScheduler+0xec>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f1c3 0307 	rsb	r3, r3, #7
 80155ae:	2b04      	cmp	r3, #4
 80155b0:	d00d      	beq.n	80155ce <xPortStartScheduler+0x7e>
	__asm volatile
 80155b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b6:	b672      	cpsid	i
 80155b8:	f383 8811 	msr	BASEPRI, r3
 80155bc:	f3bf 8f6f 	isb	sy
 80155c0:	f3bf 8f4f 	dsb	sy
 80155c4:	b662      	cpsie	i
 80155c6:	60bb      	str	r3, [r7, #8]
}
 80155c8:	bf00      	nop
 80155ca:	bf00      	nop
 80155cc:	e7fd      	b.n	80155ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80155ce:	4b1b      	ldr	r3, [pc, #108]	@ (801563c <xPortStartScheduler+0xec>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	021b      	lsls	r3, r3, #8
 80155d4:	4a19      	ldr	r2, [pc, #100]	@ (801563c <xPortStartScheduler+0xec>)
 80155d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80155d8:	4b18      	ldr	r3, [pc, #96]	@ (801563c <xPortStartScheduler+0xec>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80155e0:	4a16      	ldr	r2, [pc, #88]	@ (801563c <xPortStartScheduler+0xec>)
 80155e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	b2da      	uxtb	r2, r3
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80155ec:	4b14      	ldr	r3, [pc, #80]	@ (8015640 <xPortStartScheduler+0xf0>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	4a13      	ldr	r2, [pc, #76]	@ (8015640 <xPortStartScheduler+0xf0>)
 80155f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80155f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80155f8:	4b11      	ldr	r3, [pc, #68]	@ (8015640 <xPortStartScheduler+0xf0>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	4a10      	ldr	r2, [pc, #64]	@ (8015640 <xPortStartScheduler+0xf0>)
 80155fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015604:	f000 f8dc 	bl	80157c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015608:	4b0e      	ldr	r3, [pc, #56]	@ (8015644 <xPortStartScheduler+0xf4>)
 801560a:	2200      	movs	r2, #0
 801560c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801560e:	f000 f8fb 	bl	8015808 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015612:	4b0d      	ldr	r3, [pc, #52]	@ (8015648 <xPortStartScheduler+0xf8>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a0c      	ldr	r2, [pc, #48]	@ (8015648 <xPortStartScheduler+0xf8>)
 8015618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801561c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801561e:	f7ff ff83 	bl	8015528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015622:	f7ff fa41 	bl	8014aa8 <vTaskSwitchContext>
	prvTaskExitError();
 8015626:	f7ff ff39 	bl	801549c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801562a:	2300      	movs	r3, #0
}
 801562c:	4618      	mov	r0, r3
 801562e:	3710      	adds	r7, #16
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}
 8015634:	e000e400 	.word	0xe000e400
 8015638:	20001698 	.word	0x20001698
 801563c:	2000169c 	.word	0x2000169c
 8015640:	e000ed20 	.word	0xe000ed20
 8015644:	2000009c 	.word	0x2000009c
 8015648:	e000ef34 	.word	0xe000ef34

0801564c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
	__asm volatile
 8015652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015656:	b672      	cpsid	i
 8015658:	f383 8811 	msr	BASEPRI, r3
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	b662      	cpsie	i
 8015666:	607b      	str	r3, [r7, #4]
}
 8015668:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801566a:	4b11      	ldr	r3, [pc, #68]	@ (80156b0 <vPortEnterCritical+0x64>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	3301      	adds	r3, #1
 8015670:	4a0f      	ldr	r2, [pc, #60]	@ (80156b0 <vPortEnterCritical+0x64>)
 8015672:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015674:	4b0e      	ldr	r3, [pc, #56]	@ (80156b0 <vPortEnterCritical+0x64>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	2b01      	cmp	r3, #1
 801567a:	d112      	bne.n	80156a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801567c:	4b0d      	ldr	r3, [pc, #52]	@ (80156b4 <vPortEnterCritical+0x68>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	b2db      	uxtb	r3, r3
 8015682:	2b00      	cmp	r3, #0
 8015684:	d00d      	beq.n	80156a2 <vPortEnterCritical+0x56>
	__asm volatile
 8015686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801568a:	b672      	cpsid	i
 801568c:	f383 8811 	msr	BASEPRI, r3
 8015690:	f3bf 8f6f 	isb	sy
 8015694:	f3bf 8f4f 	dsb	sy
 8015698:	b662      	cpsie	i
 801569a:	603b      	str	r3, [r7, #0]
}
 801569c:	bf00      	nop
 801569e:	bf00      	nop
 80156a0:	e7fd      	b.n	801569e <vPortEnterCritical+0x52>
	}
}
 80156a2:	bf00      	nop
 80156a4:	370c      	adds	r7, #12
 80156a6:	46bd      	mov	sp, r7
 80156a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop
 80156b0:	2000009c 	.word	0x2000009c
 80156b4:	e000ed04 	.word	0xe000ed04

080156b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80156b8:	b480      	push	{r7}
 80156ba:	b083      	sub	sp, #12
 80156bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80156be:	4b13      	ldr	r3, [pc, #76]	@ (801570c <vPortExitCritical+0x54>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d10d      	bne.n	80156e2 <vPortExitCritical+0x2a>
	__asm volatile
 80156c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156ca:	b672      	cpsid	i
 80156cc:	f383 8811 	msr	BASEPRI, r3
 80156d0:	f3bf 8f6f 	isb	sy
 80156d4:	f3bf 8f4f 	dsb	sy
 80156d8:	b662      	cpsie	i
 80156da:	607b      	str	r3, [r7, #4]
}
 80156dc:	bf00      	nop
 80156de:	bf00      	nop
 80156e0:	e7fd      	b.n	80156de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80156e2:	4b0a      	ldr	r3, [pc, #40]	@ (801570c <vPortExitCritical+0x54>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	3b01      	subs	r3, #1
 80156e8:	4a08      	ldr	r2, [pc, #32]	@ (801570c <vPortExitCritical+0x54>)
 80156ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80156ec:	4b07      	ldr	r3, [pc, #28]	@ (801570c <vPortExitCritical+0x54>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d105      	bne.n	8015700 <vPortExitCritical+0x48>
 80156f4:	2300      	movs	r3, #0
 80156f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	f383 8811 	msr	BASEPRI, r3
}
 80156fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015700:	bf00      	nop
 8015702:	370c      	adds	r7, #12
 8015704:	46bd      	mov	sp, r7
 8015706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570a:	4770      	bx	lr
 801570c:	2000009c 	.word	0x2000009c

08015710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015710:	f3ef 8009 	mrs	r0, PSP
 8015714:	f3bf 8f6f 	isb	sy
 8015718:	4b15      	ldr	r3, [pc, #84]	@ (8015770 <pxCurrentTCBConst>)
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	f01e 0f10 	tst.w	lr, #16
 8015720:	bf08      	it	eq
 8015722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801572a:	6010      	str	r0, [r2, #0]
 801572c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015734:	b672      	cpsid	i
 8015736:	f380 8811 	msr	BASEPRI, r0
 801573a:	f3bf 8f4f 	dsb	sy
 801573e:	f3bf 8f6f 	isb	sy
 8015742:	b662      	cpsie	i
 8015744:	f7ff f9b0 	bl	8014aa8 <vTaskSwitchContext>
 8015748:	f04f 0000 	mov.w	r0, #0
 801574c:	f380 8811 	msr	BASEPRI, r0
 8015750:	bc09      	pop	{r0, r3}
 8015752:	6819      	ldr	r1, [r3, #0]
 8015754:	6808      	ldr	r0, [r1, #0]
 8015756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801575a:	f01e 0f10 	tst.w	lr, #16
 801575e:	bf08      	it	eq
 8015760:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015764:	f380 8809 	msr	PSP, r0
 8015768:	f3bf 8f6f 	isb	sy
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop

08015770 <pxCurrentTCBConst>:
 8015770:	2000156c 	.word	0x2000156c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015774:	bf00      	nop
 8015776:	bf00      	nop

08015778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
	__asm volatile
 801577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015782:	b672      	cpsid	i
 8015784:	f383 8811 	msr	BASEPRI, r3
 8015788:	f3bf 8f6f 	isb	sy
 801578c:	f3bf 8f4f 	dsb	sy
 8015790:	b662      	cpsie	i
 8015792:	607b      	str	r3, [r7, #4]
}
 8015794:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015796:	f7ff f8cb 	bl	8014930 <xTaskIncrementTick>
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d003      	beq.n	80157a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80157a0:	4b06      	ldr	r3, [pc, #24]	@ (80157bc <SysTick_Handler+0x44>)
 80157a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157a6:	601a      	str	r2, [r3, #0]
 80157a8:	2300      	movs	r3, #0
 80157aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	f383 8811 	msr	BASEPRI, r3
}
 80157b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80157b4:	bf00      	nop
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	e000ed04 	.word	0xe000ed04

080157c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80157c0:	b480      	push	{r7}
 80157c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80157c4:	4b0b      	ldr	r3, [pc, #44]	@ (80157f4 <vPortSetupTimerInterrupt+0x34>)
 80157c6:	2200      	movs	r2, #0
 80157c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80157ca:	4b0b      	ldr	r3, [pc, #44]	@ (80157f8 <vPortSetupTimerInterrupt+0x38>)
 80157cc:	2200      	movs	r2, #0
 80157ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80157d0:	4b0a      	ldr	r3, [pc, #40]	@ (80157fc <vPortSetupTimerInterrupt+0x3c>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	4a0a      	ldr	r2, [pc, #40]	@ (8015800 <vPortSetupTimerInterrupt+0x40>)
 80157d6:	fba2 2303 	umull	r2, r3, r2, r3
 80157da:	099b      	lsrs	r3, r3, #6
 80157dc:	4a09      	ldr	r2, [pc, #36]	@ (8015804 <vPortSetupTimerInterrupt+0x44>)
 80157de:	3b01      	subs	r3, #1
 80157e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80157e2:	4b04      	ldr	r3, [pc, #16]	@ (80157f4 <vPortSetupTimerInterrupt+0x34>)
 80157e4:	2207      	movs	r2, #7
 80157e6:	601a      	str	r2, [r3, #0]
}
 80157e8:	bf00      	nop
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr
 80157f2:	bf00      	nop
 80157f4:	e000e010 	.word	0xe000e010
 80157f8:	e000e018 	.word	0xe000e018
 80157fc:	20000054 	.word	0x20000054
 8015800:	10624dd3 	.word	0x10624dd3
 8015804:	e000e014 	.word	0xe000e014

08015808 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015808:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015818 <vPortEnableVFP+0x10>
 801580c:	6801      	ldr	r1, [r0, #0]
 801580e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015812:	6001      	str	r1, [r0, #0]
 8015814:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015816:	bf00      	nop
 8015818:	e000ed88 	.word	0xe000ed88

0801581c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801581c:	b480      	push	{r7}
 801581e:	b085      	sub	sp, #20
 8015820:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015822:	f3ef 8305 	mrs	r3, IPSR
 8015826:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	2b0f      	cmp	r3, #15
 801582c:	d917      	bls.n	801585e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801582e:	4a1a      	ldr	r2, [pc, #104]	@ (8015898 <vPortValidateInterruptPriority+0x7c>)
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	4413      	add	r3, r2
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015838:	4b18      	ldr	r3, [pc, #96]	@ (801589c <vPortValidateInterruptPriority+0x80>)
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	7afa      	ldrb	r2, [r7, #11]
 801583e:	429a      	cmp	r2, r3
 8015840:	d20d      	bcs.n	801585e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8015842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015846:	b672      	cpsid	i
 8015848:	f383 8811 	msr	BASEPRI, r3
 801584c:	f3bf 8f6f 	isb	sy
 8015850:	f3bf 8f4f 	dsb	sy
 8015854:	b662      	cpsie	i
 8015856:	607b      	str	r3, [r7, #4]
}
 8015858:	bf00      	nop
 801585a:	bf00      	nop
 801585c:	e7fd      	b.n	801585a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801585e:	4b10      	ldr	r3, [pc, #64]	@ (80158a0 <vPortValidateInterruptPriority+0x84>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015866:	4b0f      	ldr	r3, [pc, #60]	@ (80158a4 <vPortValidateInterruptPriority+0x88>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	429a      	cmp	r2, r3
 801586c:	d90d      	bls.n	801588a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015872:	b672      	cpsid	i
 8015874:	f383 8811 	msr	BASEPRI, r3
 8015878:	f3bf 8f6f 	isb	sy
 801587c:	f3bf 8f4f 	dsb	sy
 8015880:	b662      	cpsie	i
 8015882:	603b      	str	r3, [r7, #0]
}
 8015884:	bf00      	nop
 8015886:	bf00      	nop
 8015888:	e7fd      	b.n	8015886 <vPortValidateInterruptPriority+0x6a>
	}
 801588a:	bf00      	nop
 801588c:	3714      	adds	r7, #20
 801588e:	46bd      	mov	sp, r7
 8015890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015894:	4770      	bx	lr
 8015896:	bf00      	nop
 8015898:	e000e3f0 	.word	0xe000e3f0
 801589c:	20001698 	.word	0x20001698
 80158a0:	e000ed0c 	.word	0xe000ed0c
 80158a4:	2000169c 	.word	0x2000169c

080158a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b08a      	sub	sp, #40	@ 0x28
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80158b0:	2300      	movs	r3, #0
 80158b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80158b4:	f7fe ff6c 	bl	8014790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80158b8:	4b5f      	ldr	r3, [pc, #380]	@ (8015a38 <pvPortMalloc+0x190>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d101      	bne.n	80158c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80158c0:	f000 f924 	bl	8015b0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80158c4:	4b5d      	ldr	r3, [pc, #372]	@ (8015a3c <pvPortMalloc+0x194>)
 80158c6:	681a      	ldr	r2, [r3, #0]
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	4013      	ands	r3, r2
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	f040 8094 	bne.w	80159fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d020      	beq.n	801591a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80158d8:	2208      	movs	r2, #8
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	4413      	add	r3, r2
 80158de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f003 0307 	and.w	r3, r3, #7
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d017      	beq.n	801591a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f023 0307 	bic.w	r3, r3, #7
 80158f0:	3308      	adds	r3, #8
 80158f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f003 0307 	and.w	r3, r3, #7
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d00d      	beq.n	801591a <pvPortMalloc+0x72>
	__asm volatile
 80158fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015902:	b672      	cpsid	i
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	b662      	cpsie	i
 8015912:	617b      	str	r3, [r7, #20]
}
 8015914:	bf00      	nop
 8015916:	bf00      	nop
 8015918:	e7fd      	b.n	8015916 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d06c      	beq.n	80159fa <pvPortMalloc+0x152>
 8015920:	4b47      	ldr	r3, [pc, #284]	@ (8015a40 <pvPortMalloc+0x198>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	429a      	cmp	r2, r3
 8015928:	d867      	bhi.n	80159fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801592a:	4b46      	ldr	r3, [pc, #280]	@ (8015a44 <pvPortMalloc+0x19c>)
 801592c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801592e:	4b45      	ldr	r3, [pc, #276]	@ (8015a44 <pvPortMalloc+0x19c>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015934:	e004      	b.n	8015940 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	687a      	ldr	r2, [r7, #4]
 8015946:	429a      	cmp	r2, r3
 8015948:	d903      	bls.n	8015952 <pvPortMalloc+0xaa>
 801594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d1f1      	bne.n	8015936 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015952:	4b39      	ldr	r3, [pc, #228]	@ (8015a38 <pvPortMalloc+0x190>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015958:	429a      	cmp	r2, r3
 801595a:	d04e      	beq.n	80159fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801595c:	6a3b      	ldr	r3, [r7, #32]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	2208      	movs	r2, #8
 8015962:	4413      	add	r3, r2
 8015964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015968:	681a      	ldr	r2, [r3, #0]
 801596a:	6a3b      	ldr	r3, [r7, #32]
 801596c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015970:	685a      	ldr	r2, [r3, #4]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	1ad2      	subs	r2, r2, r3
 8015976:	2308      	movs	r3, #8
 8015978:	005b      	lsls	r3, r3, #1
 801597a:	429a      	cmp	r2, r3
 801597c:	d922      	bls.n	80159c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	4413      	add	r3, r2
 8015984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	f003 0307 	and.w	r3, r3, #7
 801598c:	2b00      	cmp	r3, #0
 801598e:	d00d      	beq.n	80159ac <pvPortMalloc+0x104>
	__asm volatile
 8015990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015994:	b672      	cpsid	i
 8015996:	f383 8811 	msr	BASEPRI, r3
 801599a:	f3bf 8f6f 	isb	sy
 801599e:	f3bf 8f4f 	dsb	sy
 80159a2:	b662      	cpsie	i
 80159a4:	613b      	str	r3, [r7, #16]
}
 80159a6:	bf00      	nop
 80159a8:	bf00      	nop
 80159aa:	e7fd      	b.n	80159a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80159ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ae:	685a      	ldr	r2, [r3, #4]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	1ad2      	subs	r2, r2, r3
 80159b4:	69bb      	ldr	r3, [r7, #24]
 80159b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80159b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80159be:	69b8      	ldr	r0, [r7, #24]
 80159c0:	f000 f906 	bl	8015bd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80159c4:	4b1e      	ldr	r3, [pc, #120]	@ (8015a40 <pvPortMalloc+0x198>)
 80159c6:	681a      	ldr	r2, [r3, #0]
 80159c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	1ad3      	subs	r3, r2, r3
 80159ce:	4a1c      	ldr	r2, [pc, #112]	@ (8015a40 <pvPortMalloc+0x198>)
 80159d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80159d2:	4b1b      	ldr	r3, [pc, #108]	@ (8015a40 <pvPortMalloc+0x198>)
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	4b1c      	ldr	r3, [pc, #112]	@ (8015a48 <pvPortMalloc+0x1a0>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d203      	bcs.n	80159e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80159de:	4b18      	ldr	r3, [pc, #96]	@ (8015a40 <pvPortMalloc+0x198>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	4a19      	ldr	r2, [pc, #100]	@ (8015a48 <pvPortMalloc+0x1a0>)
 80159e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80159e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e8:	685a      	ldr	r2, [r3, #4]
 80159ea:	4b14      	ldr	r3, [pc, #80]	@ (8015a3c <pvPortMalloc+0x194>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	431a      	orrs	r2, r3
 80159f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80159f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f6:	2200      	movs	r2, #0
 80159f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80159fa:	f7fe fed7 	bl	80147ac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80159fe:	69fb      	ldr	r3, [r7, #28]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d101      	bne.n	8015a08 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015a04:	f7ed fd52 	bl	80034ac <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a08:	69fb      	ldr	r3, [r7, #28]
 8015a0a:	f003 0307 	and.w	r3, r3, #7
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d00d      	beq.n	8015a2e <pvPortMalloc+0x186>
	__asm volatile
 8015a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a16:	b672      	cpsid	i
 8015a18:	f383 8811 	msr	BASEPRI, r3
 8015a1c:	f3bf 8f6f 	isb	sy
 8015a20:	f3bf 8f4f 	dsb	sy
 8015a24:	b662      	cpsie	i
 8015a26:	60fb      	str	r3, [r7, #12]
}
 8015a28:	bf00      	nop
 8015a2a:	bf00      	nop
 8015a2c:	e7fd      	b.n	8015a2a <pvPortMalloc+0x182>
	return pvReturn;
 8015a2e:	69fb      	ldr	r3, [r7, #28]
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	3728      	adds	r7, #40	@ 0x28
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}
 8015a38:	200096a8 	.word	0x200096a8
 8015a3c:	200096b4 	.word	0x200096b4
 8015a40:	200096ac 	.word	0x200096ac
 8015a44:	200096a0 	.word	0x200096a0
 8015a48:	200096b0 	.word	0x200096b0

08015a4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b086      	sub	sp, #24
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d04e      	beq.n	8015afc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015a5e:	2308      	movs	r3, #8
 8015a60:	425b      	negs	r3, r3
 8015a62:	697a      	ldr	r2, [r7, #20]
 8015a64:	4413      	add	r3, r2
 8015a66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015a6c:	693b      	ldr	r3, [r7, #16]
 8015a6e:	685a      	ldr	r2, [r3, #4]
 8015a70:	4b24      	ldr	r3, [pc, #144]	@ (8015b04 <vPortFree+0xb8>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4013      	ands	r3, r2
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d10d      	bne.n	8015a96 <vPortFree+0x4a>
	__asm volatile
 8015a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a7e:	b672      	cpsid	i
 8015a80:	f383 8811 	msr	BASEPRI, r3
 8015a84:	f3bf 8f6f 	isb	sy
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	b662      	cpsie	i
 8015a8e:	60fb      	str	r3, [r7, #12]
}
 8015a90:	bf00      	nop
 8015a92:	bf00      	nop
 8015a94:	e7fd      	b.n	8015a92 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d00d      	beq.n	8015aba <vPortFree+0x6e>
	__asm volatile
 8015a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015aa2:	b672      	cpsid	i
 8015aa4:	f383 8811 	msr	BASEPRI, r3
 8015aa8:	f3bf 8f6f 	isb	sy
 8015aac:	f3bf 8f4f 	dsb	sy
 8015ab0:	b662      	cpsie	i
 8015ab2:	60bb      	str	r3, [r7, #8]
}
 8015ab4:	bf00      	nop
 8015ab6:	bf00      	nop
 8015ab8:	e7fd      	b.n	8015ab6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	685a      	ldr	r2, [r3, #4]
 8015abe:	4b11      	ldr	r3, [pc, #68]	@ (8015b04 <vPortFree+0xb8>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	4013      	ands	r3, r2
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d019      	beq.n	8015afc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d115      	bne.n	8015afc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	685a      	ldr	r2, [r3, #4]
 8015ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8015b04 <vPortFree+0xb8>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	43db      	mvns	r3, r3
 8015ada:	401a      	ands	r2, r3
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015ae0:	f7fe fe56 	bl	8014790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	685a      	ldr	r2, [r3, #4]
 8015ae8:	4b07      	ldr	r3, [pc, #28]	@ (8015b08 <vPortFree+0xbc>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4413      	add	r3, r2
 8015aee:	4a06      	ldr	r2, [pc, #24]	@ (8015b08 <vPortFree+0xbc>)
 8015af0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015af2:	6938      	ldr	r0, [r7, #16]
 8015af4:	f000 f86c 	bl	8015bd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015af8:	f7fe fe58 	bl	80147ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015afc:	bf00      	nop
 8015afe:	3718      	adds	r7, #24
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	200096b4 	.word	0x200096b4
 8015b08:	200096ac 	.word	0x200096ac

08015b0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015b16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015b18:	4b27      	ldr	r3, [pc, #156]	@ (8015bb8 <prvHeapInit+0xac>)
 8015b1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f003 0307 	and.w	r3, r3, #7
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d00c      	beq.n	8015b40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	3307      	adds	r3, #7
 8015b2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	f023 0307 	bic.w	r3, r3, #7
 8015b32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015b34:	68ba      	ldr	r2, [r7, #8]
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	1ad3      	subs	r3, r2, r3
 8015b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8015bb8 <prvHeapInit+0xac>)
 8015b3c:	4413      	add	r3, r2
 8015b3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015b44:	4a1d      	ldr	r2, [pc, #116]	@ (8015bbc <prvHeapInit+0xb0>)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8015bbc <prvHeapInit+0xb0>)
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	68ba      	ldr	r2, [r7, #8]
 8015b54:	4413      	add	r3, r2
 8015b56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015b58:	2208      	movs	r2, #8
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	1a9b      	subs	r3, r3, r2
 8015b5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	f023 0307 	bic.w	r3, r3, #7
 8015b66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	4a15      	ldr	r2, [pc, #84]	@ (8015bc0 <prvHeapInit+0xb4>)
 8015b6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015b6e:	4b14      	ldr	r3, [pc, #80]	@ (8015bc0 <prvHeapInit+0xb4>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	2200      	movs	r2, #0
 8015b74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015b76:	4b12      	ldr	r3, [pc, #72]	@ (8015bc0 <prvHeapInit+0xb4>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	68fa      	ldr	r2, [r7, #12]
 8015b86:	1ad2      	subs	r2, r2, r3
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8015bc0 <prvHeapInit+0xb4>)
 8015b8e:	681a      	ldr	r2, [r3, #0]
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	685b      	ldr	r3, [r3, #4]
 8015b98:	4a0a      	ldr	r2, [pc, #40]	@ (8015bc4 <prvHeapInit+0xb8>)
 8015b9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	4a09      	ldr	r2, [pc, #36]	@ (8015bc8 <prvHeapInit+0xbc>)
 8015ba2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015ba4:	4b09      	ldr	r3, [pc, #36]	@ (8015bcc <prvHeapInit+0xc0>)
 8015ba6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015baa:	601a      	str	r2, [r3, #0]
}
 8015bac:	bf00      	nop
 8015bae:	3714      	adds	r7, #20
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr
 8015bb8:	200016a0 	.word	0x200016a0
 8015bbc:	200096a0 	.word	0x200096a0
 8015bc0:	200096a8 	.word	0x200096a8
 8015bc4:	200096b0 	.word	0x200096b0
 8015bc8:	200096ac 	.word	0x200096ac
 8015bcc:	200096b4 	.word	0x200096b4

08015bd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b085      	sub	sp, #20
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015bd8:	4b28      	ldr	r3, [pc, #160]	@ (8015c7c <prvInsertBlockIntoFreeList+0xac>)
 8015bda:	60fb      	str	r3, [r7, #12]
 8015bdc:	e002      	b.n	8015be4 <prvInsertBlockIntoFreeList+0x14>
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	60fb      	str	r3, [r7, #12]
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	687a      	ldr	r2, [r7, #4]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d8f7      	bhi.n	8015bde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	685b      	ldr	r3, [r3, #4]
 8015bf6:	68ba      	ldr	r2, [r7, #8]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d108      	bne.n	8015c12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	685a      	ldr	r2, [r3, #4]
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	685b      	ldr	r3, [r3, #4]
 8015c08:	441a      	add	r2, r3
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	68ba      	ldr	r2, [r7, #8]
 8015c1c:	441a      	add	r2, r3
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d118      	bne.n	8015c58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	4b15      	ldr	r3, [pc, #84]	@ (8015c80 <prvInsertBlockIntoFreeList+0xb0>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d00d      	beq.n	8015c4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	685a      	ldr	r2, [r3, #4]
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	441a      	add	r2, r3
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	601a      	str	r2, [r3, #0]
 8015c4c:	e008      	b.n	8015c60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8015c80 <prvInsertBlockIntoFreeList+0xb0>)
 8015c50:	681a      	ldr	r2, [r3, #0]
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	601a      	str	r2, [r3, #0]
 8015c56:	e003      	b.n	8015c60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	681a      	ldr	r2, [r3, #0]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015c60:	68fa      	ldr	r2, [r7, #12]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d002      	beq.n	8015c6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	687a      	ldr	r2, [r7, #4]
 8015c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015c6e:	bf00      	nop
 8015c70:	3714      	adds	r7, #20
 8015c72:	46bd      	mov	sp, r7
 8015c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c78:	4770      	bx	lr
 8015c7a:	bf00      	nop
 8015c7c:	200096a0 	.word	0x200096a0
 8015c80:	200096a8 	.word	0x200096a8

08015c84 <malloc>:
 8015c84:	4b02      	ldr	r3, [pc, #8]	@ (8015c90 <malloc+0xc>)
 8015c86:	4601      	mov	r1, r0
 8015c88:	6818      	ldr	r0, [r3, #0]
 8015c8a:	f000 b825 	b.w	8015cd8 <_malloc_r>
 8015c8e:	bf00      	nop
 8015c90:	200000ac 	.word	0x200000ac

08015c94 <sbrk_aligned>:
 8015c94:	b570      	push	{r4, r5, r6, lr}
 8015c96:	4e0f      	ldr	r6, [pc, #60]	@ (8015cd4 <sbrk_aligned+0x40>)
 8015c98:	460c      	mov	r4, r1
 8015c9a:	6831      	ldr	r1, [r6, #0]
 8015c9c:	4605      	mov	r5, r0
 8015c9e:	b911      	cbnz	r1, 8015ca6 <sbrk_aligned+0x12>
 8015ca0:	f000 fa9c 	bl	80161dc <_sbrk_r>
 8015ca4:	6030      	str	r0, [r6, #0]
 8015ca6:	4621      	mov	r1, r4
 8015ca8:	4628      	mov	r0, r5
 8015caa:	f000 fa97 	bl	80161dc <_sbrk_r>
 8015cae:	1c43      	adds	r3, r0, #1
 8015cb0:	d103      	bne.n	8015cba <sbrk_aligned+0x26>
 8015cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	bd70      	pop	{r4, r5, r6, pc}
 8015cba:	1cc4      	adds	r4, r0, #3
 8015cbc:	f024 0403 	bic.w	r4, r4, #3
 8015cc0:	42a0      	cmp	r0, r4
 8015cc2:	d0f8      	beq.n	8015cb6 <sbrk_aligned+0x22>
 8015cc4:	1a21      	subs	r1, r4, r0
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f000 fa88 	bl	80161dc <_sbrk_r>
 8015ccc:	3001      	adds	r0, #1
 8015cce:	d1f2      	bne.n	8015cb6 <sbrk_aligned+0x22>
 8015cd0:	e7ef      	b.n	8015cb2 <sbrk_aligned+0x1e>
 8015cd2:	bf00      	nop
 8015cd4:	200096b8 	.word	0x200096b8

08015cd8 <_malloc_r>:
 8015cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cdc:	1ccd      	adds	r5, r1, #3
 8015cde:	f025 0503 	bic.w	r5, r5, #3
 8015ce2:	3508      	adds	r5, #8
 8015ce4:	2d0c      	cmp	r5, #12
 8015ce6:	bf38      	it	cc
 8015ce8:	250c      	movcc	r5, #12
 8015cea:	2d00      	cmp	r5, #0
 8015cec:	4606      	mov	r6, r0
 8015cee:	db01      	blt.n	8015cf4 <_malloc_r+0x1c>
 8015cf0:	42a9      	cmp	r1, r5
 8015cf2:	d904      	bls.n	8015cfe <_malloc_r+0x26>
 8015cf4:	230c      	movs	r3, #12
 8015cf6:	6033      	str	r3, [r6, #0]
 8015cf8:	2000      	movs	r0, #0
 8015cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015dd4 <_malloc_r+0xfc>
 8015d02:	f000 f869 	bl	8015dd8 <__malloc_lock>
 8015d06:	f8d8 3000 	ldr.w	r3, [r8]
 8015d0a:	461c      	mov	r4, r3
 8015d0c:	bb44      	cbnz	r4, 8015d60 <_malloc_r+0x88>
 8015d0e:	4629      	mov	r1, r5
 8015d10:	4630      	mov	r0, r6
 8015d12:	f7ff ffbf 	bl	8015c94 <sbrk_aligned>
 8015d16:	1c43      	adds	r3, r0, #1
 8015d18:	4604      	mov	r4, r0
 8015d1a:	d158      	bne.n	8015dce <_malloc_r+0xf6>
 8015d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8015d20:	4627      	mov	r7, r4
 8015d22:	2f00      	cmp	r7, #0
 8015d24:	d143      	bne.n	8015dae <_malloc_r+0xd6>
 8015d26:	2c00      	cmp	r4, #0
 8015d28:	d04b      	beq.n	8015dc2 <_malloc_r+0xea>
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	4639      	mov	r1, r7
 8015d2e:	4630      	mov	r0, r6
 8015d30:	eb04 0903 	add.w	r9, r4, r3
 8015d34:	f000 fa52 	bl	80161dc <_sbrk_r>
 8015d38:	4581      	cmp	r9, r0
 8015d3a:	d142      	bne.n	8015dc2 <_malloc_r+0xea>
 8015d3c:	6821      	ldr	r1, [r4, #0]
 8015d3e:	1a6d      	subs	r5, r5, r1
 8015d40:	4629      	mov	r1, r5
 8015d42:	4630      	mov	r0, r6
 8015d44:	f7ff ffa6 	bl	8015c94 <sbrk_aligned>
 8015d48:	3001      	adds	r0, #1
 8015d4a:	d03a      	beq.n	8015dc2 <_malloc_r+0xea>
 8015d4c:	6823      	ldr	r3, [r4, #0]
 8015d4e:	442b      	add	r3, r5
 8015d50:	6023      	str	r3, [r4, #0]
 8015d52:	f8d8 3000 	ldr.w	r3, [r8]
 8015d56:	685a      	ldr	r2, [r3, #4]
 8015d58:	bb62      	cbnz	r2, 8015db4 <_malloc_r+0xdc>
 8015d5a:	f8c8 7000 	str.w	r7, [r8]
 8015d5e:	e00f      	b.n	8015d80 <_malloc_r+0xa8>
 8015d60:	6822      	ldr	r2, [r4, #0]
 8015d62:	1b52      	subs	r2, r2, r5
 8015d64:	d420      	bmi.n	8015da8 <_malloc_r+0xd0>
 8015d66:	2a0b      	cmp	r2, #11
 8015d68:	d917      	bls.n	8015d9a <_malloc_r+0xc2>
 8015d6a:	1961      	adds	r1, r4, r5
 8015d6c:	42a3      	cmp	r3, r4
 8015d6e:	6025      	str	r5, [r4, #0]
 8015d70:	bf18      	it	ne
 8015d72:	6059      	strne	r1, [r3, #4]
 8015d74:	6863      	ldr	r3, [r4, #4]
 8015d76:	bf08      	it	eq
 8015d78:	f8c8 1000 	streq.w	r1, [r8]
 8015d7c:	5162      	str	r2, [r4, r5]
 8015d7e:	604b      	str	r3, [r1, #4]
 8015d80:	4630      	mov	r0, r6
 8015d82:	f000 f82f 	bl	8015de4 <__malloc_unlock>
 8015d86:	f104 000b 	add.w	r0, r4, #11
 8015d8a:	1d23      	adds	r3, r4, #4
 8015d8c:	f020 0007 	bic.w	r0, r0, #7
 8015d90:	1ac2      	subs	r2, r0, r3
 8015d92:	bf1c      	itt	ne
 8015d94:	1a1b      	subne	r3, r3, r0
 8015d96:	50a3      	strne	r3, [r4, r2]
 8015d98:	e7af      	b.n	8015cfa <_malloc_r+0x22>
 8015d9a:	6862      	ldr	r2, [r4, #4]
 8015d9c:	42a3      	cmp	r3, r4
 8015d9e:	bf0c      	ite	eq
 8015da0:	f8c8 2000 	streq.w	r2, [r8]
 8015da4:	605a      	strne	r2, [r3, #4]
 8015da6:	e7eb      	b.n	8015d80 <_malloc_r+0xa8>
 8015da8:	4623      	mov	r3, r4
 8015daa:	6864      	ldr	r4, [r4, #4]
 8015dac:	e7ae      	b.n	8015d0c <_malloc_r+0x34>
 8015dae:	463c      	mov	r4, r7
 8015db0:	687f      	ldr	r7, [r7, #4]
 8015db2:	e7b6      	b.n	8015d22 <_malloc_r+0x4a>
 8015db4:	461a      	mov	r2, r3
 8015db6:	685b      	ldr	r3, [r3, #4]
 8015db8:	42a3      	cmp	r3, r4
 8015dba:	d1fb      	bne.n	8015db4 <_malloc_r+0xdc>
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	6053      	str	r3, [r2, #4]
 8015dc0:	e7de      	b.n	8015d80 <_malloc_r+0xa8>
 8015dc2:	230c      	movs	r3, #12
 8015dc4:	6033      	str	r3, [r6, #0]
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	f000 f80c 	bl	8015de4 <__malloc_unlock>
 8015dcc:	e794      	b.n	8015cf8 <_malloc_r+0x20>
 8015dce:	6005      	str	r5, [r0, #0]
 8015dd0:	e7d6      	b.n	8015d80 <_malloc_r+0xa8>
 8015dd2:	bf00      	nop
 8015dd4:	200096bc 	.word	0x200096bc

08015dd8 <__malloc_lock>:
 8015dd8:	4801      	ldr	r0, [pc, #4]	@ (8015de0 <__malloc_lock+0x8>)
 8015dda:	f000 ba4c 	b.w	8016276 <__retarget_lock_acquire_recursive>
 8015dde:	bf00      	nop
 8015de0:	20009800 	.word	0x20009800

08015de4 <__malloc_unlock>:
 8015de4:	4801      	ldr	r0, [pc, #4]	@ (8015dec <__malloc_unlock+0x8>)
 8015de6:	f000 ba47 	b.w	8016278 <__retarget_lock_release_recursive>
 8015dea:	bf00      	nop
 8015dec:	20009800 	.word	0x20009800

08015df0 <rand>:
 8015df0:	4b16      	ldr	r3, [pc, #88]	@ (8015e4c <rand+0x5c>)
 8015df2:	b510      	push	{r4, lr}
 8015df4:	681c      	ldr	r4, [r3, #0]
 8015df6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015df8:	b9b3      	cbnz	r3, 8015e28 <rand+0x38>
 8015dfa:	2018      	movs	r0, #24
 8015dfc:	f7ff ff42 	bl	8015c84 <malloc>
 8015e00:	4602      	mov	r2, r0
 8015e02:	6320      	str	r0, [r4, #48]	@ 0x30
 8015e04:	b920      	cbnz	r0, 8015e10 <rand+0x20>
 8015e06:	4b12      	ldr	r3, [pc, #72]	@ (8015e50 <rand+0x60>)
 8015e08:	4812      	ldr	r0, [pc, #72]	@ (8015e54 <rand+0x64>)
 8015e0a:	2152      	movs	r1, #82	@ 0x52
 8015e0c:	f000 fa44 	bl	8016298 <__assert_func>
 8015e10:	4911      	ldr	r1, [pc, #68]	@ (8015e58 <rand+0x68>)
 8015e12:	4b12      	ldr	r3, [pc, #72]	@ (8015e5c <rand+0x6c>)
 8015e14:	e9c0 1300 	strd	r1, r3, [r0]
 8015e18:	4b11      	ldr	r3, [pc, #68]	@ (8015e60 <rand+0x70>)
 8015e1a:	6083      	str	r3, [r0, #8]
 8015e1c:	230b      	movs	r3, #11
 8015e1e:	8183      	strh	r3, [r0, #12]
 8015e20:	2100      	movs	r1, #0
 8015e22:	2001      	movs	r0, #1
 8015e24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015e28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015e2a:	480e      	ldr	r0, [pc, #56]	@ (8015e64 <rand+0x74>)
 8015e2c:	690b      	ldr	r3, [r1, #16]
 8015e2e:	694c      	ldr	r4, [r1, #20]
 8015e30:	4a0d      	ldr	r2, [pc, #52]	@ (8015e68 <rand+0x78>)
 8015e32:	4358      	muls	r0, r3
 8015e34:	fb02 0004 	mla	r0, r2, r4, r0
 8015e38:	fba3 3202 	umull	r3, r2, r3, r2
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	eb40 0002 	adc.w	r0, r0, r2
 8015e42:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015e46:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015e4a:	bd10      	pop	{r4, pc}
 8015e4c:	200000ac 	.word	0x200000ac
 8015e50:	08025680 	.word	0x08025680
 8015e54:	08025697 	.word	0x08025697
 8015e58:	abcd330e 	.word	0xabcd330e
 8015e5c:	e66d1234 	.word	0xe66d1234
 8015e60:	0005deec 	.word	0x0005deec
 8015e64:	5851f42d 	.word	0x5851f42d
 8015e68:	4c957f2d 	.word	0x4c957f2d

08015e6c <std>:
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	b510      	push	{r4, lr}
 8015e70:	4604      	mov	r4, r0
 8015e72:	e9c0 3300 	strd	r3, r3, [r0]
 8015e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e7a:	6083      	str	r3, [r0, #8]
 8015e7c:	8181      	strh	r1, [r0, #12]
 8015e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8015e80:	81c2      	strh	r2, [r0, #14]
 8015e82:	6183      	str	r3, [r0, #24]
 8015e84:	4619      	mov	r1, r3
 8015e86:	2208      	movs	r2, #8
 8015e88:	305c      	adds	r0, #92	@ 0x5c
 8015e8a:	f000 f914 	bl	80160b6 <memset>
 8015e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ec4 <std+0x58>)
 8015e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8015e92:	4b0d      	ldr	r3, [pc, #52]	@ (8015ec8 <std+0x5c>)
 8015e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015e96:	4b0d      	ldr	r3, [pc, #52]	@ (8015ecc <std+0x60>)
 8015e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed0 <std+0x64>)
 8015e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8015e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed4 <std+0x68>)
 8015ea0:	6224      	str	r4, [r4, #32]
 8015ea2:	429c      	cmp	r4, r3
 8015ea4:	d006      	beq.n	8015eb4 <std+0x48>
 8015ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015eaa:	4294      	cmp	r4, r2
 8015eac:	d002      	beq.n	8015eb4 <std+0x48>
 8015eae:	33d0      	adds	r3, #208	@ 0xd0
 8015eb0:	429c      	cmp	r4, r3
 8015eb2:	d105      	bne.n	8015ec0 <std+0x54>
 8015eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ebc:	f000 b9da 	b.w	8016274 <__retarget_lock_init_recursive>
 8015ec0:	bd10      	pop	{r4, pc}
 8015ec2:	bf00      	nop
 8015ec4:	08016031 	.word	0x08016031
 8015ec8:	08016053 	.word	0x08016053
 8015ecc:	0801608b 	.word	0x0801608b
 8015ed0:	080160af 	.word	0x080160af
 8015ed4:	200096c0 	.word	0x200096c0

08015ed8 <stdio_exit_handler>:
 8015ed8:	4a02      	ldr	r2, [pc, #8]	@ (8015ee4 <stdio_exit_handler+0xc>)
 8015eda:	4903      	ldr	r1, [pc, #12]	@ (8015ee8 <stdio_exit_handler+0x10>)
 8015edc:	4803      	ldr	r0, [pc, #12]	@ (8015eec <stdio_exit_handler+0x14>)
 8015ede:	f000 b869 	b.w	8015fb4 <_fwalk_sglue>
 8015ee2:	bf00      	nop
 8015ee4:	200000a0 	.word	0x200000a0
 8015ee8:	08016a3d 	.word	0x08016a3d
 8015eec:	200000b0 	.word	0x200000b0

08015ef0 <cleanup_stdio>:
 8015ef0:	6841      	ldr	r1, [r0, #4]
 8015ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8015f24 <cleanup_stdio+0x34>)
 8015ef4:	4299      	cmp	r1, r3
 8015ef6:	b510      	push	{r4, lr}
 8015ef8:	4604      	mov	r4, r0
 8015efa:	d001      	beq.n	8015f00 <cleanup_stdio+0x10>
 8015efc:	f000 fd9e 	bl	8016a3c <_fflush_r>
 8015f00:	68a1      	ldr	r1, [r4, #8]
 8015f02:	4b09      	ldr	r3, [pc, #36]	@ (8015f28 <cleanup_stdio+0x38>)
 8015f04:	4299      	cmp	r1, r3
 8015f06:	d002      	beq.n	8015f0e <cleanup_stdio+0x1e>
 8015f08:	4620      	mov	r0, r4
 8015f0a:	f000 fd97 	bl	8016a3c <_fflush_r>
 8015f0e:	68e1      	ldr	r1, [r4, #12]
 8015f10:	4b06      	ldr	r3, [pc, #24]	@ (8015f2c <cleanup_stdio+0x3c>)
 8015f12:	4299      	cmp	r1, r3
 8015f14:	d004      	beq.n	8015f20 <cleanup_stdio+0x30>
 8015f16:	4620      	mov	r0, r4
 8015f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f1c:	f000 bd8e 	b.w	8016a3c <_fflush_r>
 8015f20:	bd10      	pop	{r4, pc}
 8015f22:	bf00      	nop
 8015f24:	200096c0 	.word	0x200096c0
 8015f28:	20009728 	.word	0x20009728
 8015f2c:	20009790 	.word	0x20009790

08015f30 <global_stdio_init.part.0>:
 8015f30:	b510      	push	{r4, lr}
 8015f32:	4b0b      	ldr	r3, [pc, #44]	@ (8015f60 <global_stdio_init.part.0+0x30>)
 8015f34:	4c0b      	ldr	r4, [pc, #44]	@ (8015f64 <global_stdio_init.part.0+0x34>)
 8015f36:	4a0c      	ldr	r2, [pc, #48]	@ (8015f68 <global_stdio_init.part.0+0x38>)
 8015f38:	601a      	str	r2, [r3, #0]
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	2104      	movs	r1, #4
 8015f40:	f7ff ff94 	bl	8015e6c <std>
 8015f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015f48:	2201      	movs	r2, #1
 8015f4a:	2109      	movs	r1, #9
 8015f4c:	f7ff ff8e 	bl	8015e6c <std>
 8015f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015f54:	2202      	movs	r2, #2
 8015f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f5a:	2112      	movs	r1, #18
 8015f5c:	f7ff bf86 	b.w	8015e6c <std>
 8015f60:	200097f8 	.word	0x200097f8
 8015f64:	200096c0 	.word	0x200096c0
 8015f68:	08015ed9 	.word	0x08015ed9

08015f6c <__sfp_lock_acquire>:
 8015f6c:	4801      	ldr	r0, [pc, #4]	@ (8015f74 <__sfp_lock_acquire+0x8>)
 8015f6e:	f000 b982 	b.w	8016276 <__retarget_lock_acquire_recursive>
 8015f72:	bf00      	nop
 8015f74:	20009801 	.word	0x20009801

08015f78 <__sfp_lock_release>:
 8015f78:	4801      	ldr	r0, [pc, #4]	@ (8015f80 <__sfp_lock_release+0x8>)
 8015f7a:	f000 b97d 	b.w	8016278 <__retarget_lock_release_recursive>
 8015f7e:	bf00      	nop
 8015f80:	20009801 	.word	0x20009801

08015f84 <__sinit>:
 8015f84:	b510      	push	{r4, lr}
 8015f86:	4604      	mov	r4, r0
 8015f88:	f7ff fff0 	bl	8015f6c <__sfp_lock_acquire>
 8015f8c:	6a23      	ldr	r3, [r4, #32]
 8015f8e:	b11b      	cbz	r3, 8015f98 <__sinit+0x14>
 8015f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f94:	f7ff bff0 	b.w	8015f78 <__sfp_lock_release>
 8015f98:	4b04      	ldr	r3, [pc, #16]	@ (8015fac <__sinit+0x28>)
 8015f9a:	6223      	str	r3, [r4, #32]
 8015f9c:	4b04      	ldr	r3, [pc, #16]	@ (8015fb0 <__sinit+0x2c>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d1f5      	bne.n	8015f90 <__sinit+0xc>
 8015fa4:	f7ff ffc4 	bl	8015f30 <global_stdio_init.part.0>
 8015fa8:	e7f2      	b.n	8015f90 <__sinit+0xc>
 8015faa:	bf00      	nop
 8015fac:	08015ef1 	.word	0x08015ef1
 8015fb0:	200097f8 	.word	0x200097f8

08015fb4 <_fwalk_sglue>:
 8015fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fb8:	4607      	mov	r7, r0
 8015fba:	4688      	mov	r8, r1
 8015fbc:	4614      	mov	r4, r2
 8015fbe:	2600      	movs	r6, #0
 8015fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8015fc8:	d505      	bpl.n	8015fd6 <_fwalk_sglue+0x22>
 8015fca:	6824      	ldr	r4, [r4, #0]
 8015fcc:	2c00      	cmp	r4, #0
 8015fce:	d1f7      	bne.n	8015fc0 <_fwalk_sglue+0xc>
 8015fd0:	4630      	mov	r0, r6
 8015fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fd6:	89ab      	ldrh	r3, [r5, #12]
 8015fd8:	2b01      	cmp	r3, #1
 8015fda:	d907      	bls.n	8015fec <_fwalk_sglue+0x38>
 8015fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fe0:	3301      	adds	r3, #1
 8015fe2:	d003      	beq.n	8015fec <_fwalk_sglue+0x38>
 8015fe4:	4629      	mov	r1, r5
 8015fe6:	4638      	mov	r0, r7
 8015fe8:	47c0      	blx	r8
 8015fea:	4306      	orrs	r6, r0
 8015fec:	3568      	adds	r5, #104	@ 0x68
 8015fee:	e7e9      	b.n	8015fc4 <_fwalk_sglue+0x10>

08015ff0 <siprintf>:
 8015ff0:	b40e      	push	{r1, r2, r3}
 8015ff2:	b500      	push	{lr}
 8015ff4:	b09c      	sub	sp, #112	@ 0x70
 8015ff6:	ab1d      	add	r3, sp, #116	@ 0x74
 8015ff8:	9002      	str	r0, [sp, #8]
 8015ffa:	9006      	str	r0, [sp, #24]
 8015ffc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016000:	4809      	ldr	r0, [pc, #36]	@ (8016028 <siprintf+0x38>)
 8016002:	9107      	str	r1, [sp, #28]
 8016004:	9104      	str	r1, [sp, #16]
 8016006:	4909      	ldr	r1, [pc, #36]	@ (801602c <siprintf+0x3c>)
 8016008:	f853 2b04 	ldr.w	r2, [r3], #4
 801600c:	9105      	str	r1, [sp, #20]
 801600e:	6800      	ldr	r0, [r0, #0]
 8016010:	9301      	str	r3, [sp, #4]
 8016012:	a902      	add	r1, sp, #8
 8016014:	f000 fa04 	bl	8016420 <_svfiprintf_r>
 8016018:	9b02      	ldr	r3, [sp, #8]
 801601a:	2200      	movs	r2, #0
 801601c:	701a      	strb	r2, [r3, #0]
 801601e:	b01c      	add	sp, #112	@ 0x70
 8016020:	f85d eb04 	ldr.w	lr, [sp], #4
 8016024:	b003      	add	sp, #12
 8016026:	4770      	bx	lr
 8016028:	200000ac 	.word	0x200000ac
 801602c:	ffff0208 	.word	0xffff0208

08016030 <__sread>:
 8016030:	b510      	push	{r4, lr}
 8016032:	460c      	mov	r4, r1
 8016034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016038:	f000 f8be 	bl	80161b8 <_read_r>
 801603c:	2800      	cmp	r0, #0
 801603e:	bfab      	itete	ge
 8016040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016042:	89a3      	ldrhlt	r3, [r4, #12]
 8016044:	181b      	addge	r3, r3, r0
 8016046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801604a:	bfac      	ite	ge
 801604c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801604e:	81a3      	strhlt	r3, [r4, #12]
 8016050:	bd10      	pop	{r4, pc}

08016052 <__swrite>:
 8016052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016056:	461f      	mov	r7, r3
 8016058:	898b      	ldrh	r3, [r1, #12]
 801605a:	05db      	lsls	r3, r3, #23
 801605c:	4605      	mov	r5, r0
 801605e:	460c      	mov	r4, r1
 8016060:	4616      	mov	r6, r2
 8016062:	d505      	bpl.n	8016070 <__swrite+0x1e>
 8016064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016068:	2302      	movs	r3, #2
 801606a:	2200      	movs	r2, #0
 801606c:	f000 f892 	bl	8016194 <_lseek_r>
 8016070:	89a3      	ldrh	r3, [r4, #12]
 8016072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801607a:	81a3      	strh	r3, [r4, #12]
 801607c:	4632      	mov	r2, r6
 801607e:	463b      	mov	r3, r7
 8016080:	4628      	mov	r0, r5
 8016082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016086:	f000 b8b9 	b.w	80161fc <_write_r>

0801608a <__sseek>:
 801608a:	b510      	push	{r4, lr}
 801608c:	460c      	mov	r4, r1
 801608e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016092:	f000 f87f 	bl	8016194 <_lseek_r>
 8016096:	1c43      	adds	r3, r0, #1
 8016098:	89a3      	ldrh	r3, [r4, #12]
 801609a:	bf15      	itete	ne
 801609c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801609e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80160a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80160a6:	81a3      	strheq	r3, [r4, #12]
 80160a8:	bf18      	it	ne
 80160aa:	81a3      	strhne	r3, [r4, #12]
 80160ac:	bd10      	pop	{r4, pc}

080160ae <__sclose>:
 80160ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160b2:	f000 b809 	b.w	80160c8 <_close_r>

080160b6 <memset>:
 80160b6:	4402      	add	r2, r0
 80160b8:	4603      	mov	r3, r0
 80160ba:	4293      	cmp	r3, r2
 80160bc:	d100      	bne.n	80160c0 <memset+0xa>
 80160be:	4770      	bx	lr
 80160c0:	f803 1b01 	strb.w	r1, [r3], #1
 80160c4:	e7f9      	b.n	80160ba <memset+0x4>
	...

080160c8 <_close_r>:
 80160c8:	b538      	push	{r3, r4, r5, lr}
 80160ca:	4d06      	ldr	r5, [pc, #24]	@ (80160e4 <_close_r+0x1c>)
 80160cc:	2300      	movs	r3, #0
 80160ce:	4604      	mov	r4, r0
 80160d0:	4608      	mov	r0, r1
 80160d2:	602b      	str	r3, [r5, #0]
 80160d4:	f7f2 fde4 	bl	8008ca0 <_close>
 80160d8:	1c43      	adds	r3, r0, #1
 80160da:	d102      	bne.n	80160e2 <_close_r+0x1a>
 80160dc:	682b      	ldr	r3, [r5, #0]
 80160de:	b103      	cbz	r3, 80160e2 <_close_r+0x1a>
 80160e0:	6023      	str	r3, [r4, #0]
 80160e2:	bd38      	pop	{r3, r4, r5, pc}
 80160e4:	200097fc 	.word	0x200097fc

080160e8 <_reclaim_reent>:
 80160e8:	4b29      	ldr	r3, [pc, #164]	@ (8016190 <_reclaim_reent+0xa8>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4283      	cmp	r3, r0
 80160ee:	b570      	push	{r4, r5, r6, lr}
 80160f0:	4604      	mov	r4, r0
 80160f2:	d04b      	beq.n	801618c <_reclaim_reent+0xa4>
 80160f4:	69c3      	ldr	r3, [r0, #28]
 80160f6:	b1ab      	cbz	r3, 8016124 <_reclaim_reent+0x3c>
 80160f8:	68db      	ldr	r3, [r3, #12]
 80160fa:	b16b      	cbz	r3, 8016118 <_reclaim_reent+0x30>
 80160fc:	2500      	movs	r5, #0
 80160fe:	69e3      	ldr	r3, [r4, #28]
 8016100:	68db      	ldr	r3, [r3, #12]
 8016102:	5959      	ldr	r1, [r3, r5]
 8016104:	2900      	cmp	r1, #0
 8016106:	d13b      	bne.n	8016180 <_reclaim_reent+0x98>
 8016108:	3504      	adds	r5, #4
 801610a:	2d80      	cmp	r5, #128	@ 0x80
 801610c:	d1f7      	bne.n	80160fe <_reclaim_reent+0x16>
 801610e:	69e3      	ldr	r3, [r4, #28]
 8016110:	4620      	mov	r0, r4
 8016112:	68d9      	ldr	r1, [r3, #12]
 8016114:	f000 f8de 	bl	80162d4 <_free_r>
 8016118:	69e3      	ldr	r3, [r4, #28]
 801611a:	6819      	ldr	r1, [r3, #0]
 801611c:	b111      	cbz	r1, 8016124 <_reclaim_reent+0x3c>
 801611e:	4620      	mov	r0, r4
 8016120:	f000 f8d8 	bl	80162d4 <_free_r>
 8016124:	6961      	ldr	r1, [r4, #20]
 8016126:	b111      	cbz	r1, 801612e <_reclaim_reent+0x46>
 8016128:	4620      	mov	r0, r4
 801612a:	f000 f8d3 	bl	80162d4 <_free_r>
 801612e:	69e1      	ldr	r1, [r4, #28]
 8016130:	b111      	cbz	r1, 8016138 <_reclaim_reent+0x50>
 8016132:	4620      	mov	r0, r4
 8016134:	f000 f8ce 	bl	80162d4 <_free_r>
 8016138:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801613a:	b111      	cbz	r1, 8016142 <_reclaim_reent+0x5a>
 801613c:	4620      	mov	r0, r4
 801613e:	f000 f8c9 	bl	80162d4 <_free_r>
 8016142:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016144:	b111      	cbz	r1, 801614c <_reclaim_reent+0x64>
 8016146:	4620      	mov	r0, r4
 8016148:	f000 f8c4 	bl	80162d4 <_free_r>
 801614c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801614e:	b111      	cbz	r1, 8016156 <_reclaim_reent+0x6e>
 8016150:	4620      	mov	r0, r4
 8016152:	f000 f8bf 	bl	80162d4 <_free_r>
 8016156:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016158:	b111      	cbz	r1, 8016160 <_reclaim_reent+0x78>
 801615a:	4620      	mov	r0, r4
 801615c:	f000 f8ba 	bl	80162d4 <_free_r>
 8016160:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016162:	b111      	cbz	r1, 801616a <_reclaim_reent+0x82>
 8016164:	4620      	mov	r0, r4
 8016166:	f000 f8b5 	bl	80162d4 <_free_r>
 801616a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801616c:	b111      	cbz	r1, 8016174 <_reclaim_reent+0x8c>
 801616e:	4620      	mov	r0, r4
 8016170:	f000 f8b0 	bl	80162d4 <_free_r>
 8016174:	6a23      	ldr	r3, [r4, #32]
 8016176:	b14b      	cbz	r3, 801618c <_reclaim_reent+0xa4>
 8016178:	4620      	mov	r0, r4
 801617a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801617e:	4718      	bx	r3
 8016180:	680e      	ldr	r6, [r1, #0]
 8016182:	4620      	mov	r0, r4
 8016184:	f000 f8a6 	bl	80162d4 <_free_r>
 8016188:	4631      	mov	r1, r6
 801618a:	e7bb      	b.n	8016104 <_reclaim_reent+0x1c>
 801618c:	bd70      	pop	{r4, r5, r6, pc}
 801618e:	bf00      	nop
 8016190:	200000ac 	.word	0x200000ac

08016194 <_lseek_r>:
 8016194:	b538      	push	{r3, r4, r5, lr}
 8016196:	4d07      	ldr	r5, [pc, #28]	@ (80161b4 <_lseek_r+0x20>)
 8016198:	4604      	mov	r4, r0
 801619a:	4608      	mov	r0, r1
 801619c:	4611      	mov	r1, r2
 801619e:	2200      	movs	r2, #0
 80161a0:	602a      	str	r2, [r5, #0]
 80161a2:	461a      	mov	r2, r3
 80161a4:	f7f2 fda3 	bl	8008cee <_lseek>
 80161a8:	1c43      	adds	r3, r0, #1
 80161aa:	d102      	bne.n	80161b2 <_lseek_r+0x1e>
 80161ac:	682b      	ldr	r3, [r5, #0]
 80161ae:	b103      	cbz	r3, 80161b2 <_lseek_r+0x1e>
 80161b0:	6023      	str	r3, [r4, #0]
 80161b2:	bd38      	pop	{r3, r4, r5, pc}
 80161b4:	200097fc 	.word	0x200097fc

080161b8 <_read_r>:
 80161b8:	b538      	push	{r3, r4, r5, lr}
 80161ba:	4d07      	ldr	r5, [pc, #28]	@ (80161d8 <_read_r+0x20>)
 80161bc:	4604      	mov	r4, r0
 80161be:	4608      	mov	r0, r1
 80161c0:	4611      	mov	r1, r2
 80161c2:	2200      	movs	r2, #0
 80161c4:	602a      	str	r2, [r5, #0]
 80161c6:	461a      	mov	r2, r3
 80161c8:	f7f2 fd31 	bl	8008c2e <_read>
 80161cc:	1c43      	adds	r3, r0, #1
 80161ce:	d102      	bne.n	80161d6 <_read_r+0x1e>
 80161d0:	682b      	ldr	r3, [r5, #0]
 80161d2:	b103      	cbz	r3, 80161d6 <_read_r+0x1e>
 80161d4:	6023      	str	r3, [r4, #0]
 80161d6:	bd38      	pop	{r3, r4, r5, pc}
 80161d8:	200097fc 	.word	0x200097fc

080161dc <_sbrk_r>:
 80161dc:	b538      	push	{r3, r4, r5, lr}
 80161de:	4d06      	ldr	r5, [pc, #24]	@ (80161f8 <_sbrk_r+0x1c>)
 80161e0:	2300      	movs	r3, #0
 80161e2:	4604      	mov	r4, r0
 80161e4:	4608      	mov	r0, r1
 80161e6:	602b      	str	r3, [r5, #0]
 80161e8:	f7f2 fd8e 	bl	8008d08 <_sbrk>
 80161ec:	1c43      	adds	r3, r0, #1
 80161ee:	d102      	bne.n	80161f6 <_sbrk_r+0x1a>
 80161f0:	682b      	ldr	r3, [r5, #0]
 80161f2:	b103      	cbz	r3, 80161f6 <_sbrk_r+0x1a>
 80161f4:	6023      	str	r3, [r4, #0]
 80161f6:	bd38      	pop	{r3, r4, r5, pc}
 80161f8:	200097fc 	.word	0x200097fc

080161fc <_write_r>:
 80161fc:	b538      	push	{r3, r4, r5, lr}
 80161fe:	4d07      	ldr	r5, [pc, #28]	@ (801621c <_write_r+0x20>)
 8016200:	4604      	mov	r4, r0
 8016202:	4608      	mov	r0, r1
 8016204:	4611      	mov	r1, r2
 8016206:	2200      	movs	r2, #0
 8016208:	602a      	str	r2, [r5, #0]
 801620a:	461a      	mov	r2, r3
 801620c:	f7f2 fd2c 	bl	8008c68 <_write>
 8016210:	1c43      	adds	r3, r0, #1
 8016212:	d102      	bne.n	801621a <_write_r+0x1e>
 8016214:	682b      	ldr	r3, [r5, #0]
 8016216:	b103      	cbz	r3, 801621a <_write_r+0x1e>
 8016218:	6023      	str	r3, [r4, #0]
 801621a:	bd38      	pop	{r3, r4, r5, pc}
 801621c:	200097fc 	.word	0x200097fc

08016220 <__errno>:
 8016220:	4b01      	ldr	r3, [pc, #4]	@ (8016228 <__errno+0x8>)
 8016222:	6818      	ldr	r0, [r3, #0]
 8016224:	4770      	bx	lr
 8016226:	bf00      	nop
 8016228:	200000ac 	.word	0x200000ac

0801622c <__libc_init_array>:
 801622c:	b570      	push	{r4, r5, r6, lr}
 801622e:	4d0d      	ldr	r5, [pc, #52]	@ (8016264 <__libc_init_array+0x38>)
 8016230:	4c0d      	ldr	r4, [pc, #52]	@ (8016268 <__libc_init_array+0x3c>)
 8016232:	1b64      	subs	r4, r4, r5
 8016234:	10a4      	asrs	r4, r4, #2
 8016236:	2600      	movs	r6, #0
 8016238:	42a6      	cmp	r6, r4
 801623a:	d109      	bne.n	8016250 <__libc_init_array+0x24>
 801623c:	4d0b      	ldr	r5, [pc, #44]	@ (801626c <__libc_init_array+0x40>)
 801623e:	4c0c      	ldr	r4, [pc, #48]	@ (8016270 <__libc_init_array+0x44>)
 8016240:	f000 ff2a 	bl	8017098 <_init>
 8016244:	1b64      	subs	r4, r4, r5
 8016246:	10a4      	asrs	r4, r4, #2
 8016248:	2600      	movs	r6, #0
 801624a:	42a6      	cmp	r6, r4
 801624c:	d105      	bne.n	801625a <__libc_init_array+0x2e>
 801624e:	bd70      	pop	{r4, r5, r6, pc}
 8016250:	f855 3b04 	ldr.w	r3, [r5], #4
 8016254:	4798      	blx	r3
 8016256:	3601      	adds	r6, #1
 8016258:	e7ee      	b.n	8016238 <__libc_init_array+0xc>
 801625a:	f855 3b04 	ldr.w	r3, [r5], #4
 801625e:	4798      	blx	r3
 8016260:	3601      	adds	r6, #1
 8016262:	e7f2      	b.n	801624a <__libc_init_array+0x1e>
 8016264:	08025768 	.word	0x08025768
 8016268:	08025768 	.word	0x08025768
 801626c:	08025768 	.word	0x08025768
 8016270:	0802576c 	.word	0x0802576c

08016274 <__retarget_lock_init_recursive>:
 8016274:	4770      	bx	lr

08016276 <__retarget_lock_acquire_recursive>:
 8016276:	4770      	bx	lr

08016278 <__retarget_lock_release_recursive>:
 8016278:	4770      	bx	lr

0801627a <memcpy>:
 801627a:	440a      	add	r2, r1
 801627c:	4291      	cmp	r1, r2
 801627e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016282:	d100      	bne.n	8016286 <memcpy+0xc>
 8016284:	4770      	bx	lr
 8016286:	b510      	push	{r4, lr}
 8016288:	f811 4b01 	ldrb.w	r4, [r1], #1
 801628c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016290:	4291      	cmp	r1, r2
 8016292:	d1f9      	bne.n	8016288 <memcpy+0xe>
 8016294:	bd10      	pop	{r4, pc}
	...

08016298 <__assert_func>:
 8016298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801629a:	4614      	mov	r4, r2
 801629c:	461a      	mov	r2, r3
 801629e:	4b09      	ldr	r3, [pc, #36]	@ (80162c4 <__assert_func+0x2c>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	4605      	mov	r5, r0
 80162a4:	68d8      	ldr	r0, [r3, #12]
 80162a6:	b954      	cbnz	r4, 80162be <__assert_func+0x26>
 80162a8:	4b07      	ldr	r3, [pc, #28]	@ (80162c8 <__assert_func+0x30>)
 80162aa:	461c      	mov	r4, r3
 80162ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80162b0:	9100      	str	r1, [sp, #0]
 80162b2:	462b      	mov	r3, r5
 80162b4:	4905      	ldr	r1, [pc, #20]	@ (80162cc <__assert_func+0x34>)
 80162b6:	f000 fbe9 	bl	8016a8c <fiprintf>
 80162ba:	f000 fc13 	bl	8016ae4 <abort>
 80162be:	4b04      	ldr	r3, [pc, #16]	@ (80162d0 <__assert_func+0x38>)
 80162c0:	e7f4      	b.n	80162ac <__assert_func+0x14>
 80162c2:	bf00      	nop
 80162c4:	200000ac 	.word	0x200000ac
 80162c8:	0802572a 	.word	0x0802572a
 80162cc:	080256fc 	.word	0x080256fc
 80162d0:	080256ef 	.word	0x080256ef

080162d4 <_free_r>:
 80162d4:	b538      	push	{r3, r4, r5, lr}
 80162d6:	4605      	mov	r5, r0
 80162d8:	2900      	cmp	r1, #0
 80162da:	d041      	beq.n	8016360 <_free_r+0x8c>
 80162dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162e0:	1f0c      	subs	r4, r1, #4
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	bfb8      	it	lt
 80162e6:	18e4      	addlt	r4, r4, r3
 80162e8:	f7ff fd76 	bl	8015dd8 <__malloc_lock>
 80162ec:	4a1d      	ldr	r2, [pc, #116]	@ (8016364 <_free_r+0x90>)
 80162ee:	6813      	ldr	r3, [r2, #0]
 80162f0:	b933      	cbnz	r3, 8016300 <_free_r+0x2c>
 80162f2:	6063      	str	r3, [r4, #4]
 80162f4:	6014      	str	r4, [r2, #0]
 80162f6:	4628      	mov	r0, r5
 80162f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162fc:	f7ff bd72 	b.w	8015de4 <__malloc_unlock>
 8016300:	42a3      	cmp	r3, r4
 8016302:	d908      	bls.n	8016316 <_free_r+0x42>
 8016304:	6820      	ldr	r0, [r4, #0]
 8016306:	1821      	adds	r1, r4, r0
 8016308:	428b      	cmp	r3, r1
 801630a:	bf01      	itttt	eq
 801630c:	6819      	ldreq	r1, [r3, #0]
 801630e:	685b      	ldreq	r3, [r3, #4]
 8016310:	1809      	addeq	r1, r1, r0
 8016312:	6021      	streq	r1, [r4, #0]
 8016314:	e7ed      	b.n	80162f2 <_free_r+0x1e>
 8016316:	461a      	mov	r2, r3
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	b10b      	cbz	r3, 8016320 <_free_r+0x4c>
 801631c:	42a3      	cmp	r3, r4
 801631e:	d9fa      	bls.n	8016316 <_free_r+0x42>
 8016320:	6811      	ldr	r1, [r2, #0]
 8016322:	1850      	adds	r0, r2, r1
 8016324:	42a0      	cmp	r0, r4
 8016326:	d10b      	bne.n	8016340 <_free_r+0x6c>
 8016328:	6820      	ldr	r0, [r4, #0]
 801632a:	4401      	add	r1, r0
 801632c:	1850      	adds	r0, r2, r1
 801632e:	4283      	cmp	r3, r0
 8016330:	6011      	str	r1, [r2, #0]
 8016332:	d1e0      	bne.n	80162f6 <_free_r+0x22>
 8016334:	6818      	ldr	r0, [r3, #0]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	6053      	str	r3, [r2, #4]
 801633a:	4408      	add	r0, r1
 801633c:	6010      	str	r0, [r2, #0]
 801633e:	e7da      	b.n	80162f6 <_free_r+0x22>
 8016340:	d902      	bls.n	8016348 <_free_r+0x74>
 8016342:	230c      	movs	r3, #12
 8016344:	602b      	str	r3, [r5, #0]
 8016346:	e7d6      	b.n	80162f6 <_free_r+0x22>
 8016348:	6820      	ldr	r0, [r4, #0]
 801634a:	1821      	adds	r1, r4, r0
 801634c:	428b      	cmp	r3, r1
 801634e:	bf04      	itt	eq
 8016350:	6819      	ldreq	r1, [r3, #0]
 8016352:	685b      	ldreq	r3, [r3, #4]
 8016354:	6063      	str	r3, [r4, #4]
 8016356:	bf04      	itt	eq
 8016358:	1809      	addeq	r1, r1, r0
 801635a:	6021      	streq	r1, [r4, #0]
 801635c:	6054      	str	r4, [r2, #4]
 801635e:	e7ca      	b.n	80162f6 <_free_r+0x22>
 8016360:	bd38      	pop	{r3, r4, r5, pc}
 8016362:	bf00      	nop
 8016364:	200096bc 	.word	0x200096bc

08016368 <__ssputs_r>:
 8016368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801636c:	688e      	ldr	r6, [r1, #8]
 801636e:	461f      	mov	r7, r3
 8016370:	42be      	cmp	r6, r7
 8016372:	680b      	ldr	r3, [r1, #0]
 8016374:	4682      	mov	sl, r0
 8016376:	460c      	mov	r4, r1
 8016378:	4690      	mov	r8, r2
 801637a:	d82d      	bhi.n	80163d8 <__ssputs_r+0x70>
 801637c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016380:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016384:	d026      	beq.n	80163d4 <__ssputs_r+0x6c>
 8016386:	6965      	ldr	r5, [r4, #20]
 8016388:	6909      	ldr	r1, [r1, #16]
 801638a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801638e:	eba3 0901 	sub.w	r9, r3, r1
 8016392:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016396:	1c7b      	adds	r3, r7, #1
 8016398:	444b      	add	r3, r9
 801639a:	106d      	asrs	r5, r5, #1
 801639c:	429d      	cmp	r5, r3
 801639e:	bf38      	it	cc
 80163a0:	461d      	movcc	r5, r3
 80163a2:	0553      	lsls	r3, r2, #21
 80163a4:	d527      	bpl.n	80163f6 <__ssputs_r+0x8e>
 80163a6:	4629      	mov	r1, r5
 80163a8:	f7ff fc96 	bl	8015cd8 <_malloc_r>
 80163ac:	4606      	mov	r6, r0
 80163ae:	b360      	cbz	r0, 801640a <__ssputs_r+0xa2>
 80163b0:	6921      	ldr	r1, [r4, #16]
 80163b2:	464a      	mov	r2, r9
 80163b4:	f7ff ff61 	bl	801627a <memcpy>
 80163b8:	89a3      	ldrh	r3, [r4, #12]
 80163ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80163be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80163c2:	81a3      	strh	r3, [r4, #12]
 80163c4:	6126      	str	r6, [r4, #16]
 80163c6:	6165      	str	r5, [r4, #20]
 80163c8:	444e      	add	r6, r9
 80163ca:	eba5 0509 	sub.w	r5, r5, r9
 80163ce:	6026      	str	r6, [r4, #0]
 80163d0:	60a5      	str	r5, [r4, #8]
 80163d2:	463e      	mov	r6, r7
 80163d4:	42be      	cmp	r6, r7
 80163d6:	d900      	bls.n	80163da <__ssputs_r+0x72>
 80163d8:	463e      	mov	r6, r7
 80163da:	6820      	ldr	r0, [r4, #0]
 80163dc:	4632      	mov	r2, r6
 80163de:	4641      	mov	r1, r8
 80163e0:	f000 fb66 	bl	8016ab0 <memmove>
 80163e4:	68a3      	ldr	r3, [r4, #8]
 80163e6:	1b9b      	subs	r3, r3, r6
 80163e8:	60a3      	str	r3, [r4, #8]
 80163ea:	6823      	ldr	r3, [r4, #0]
 80163ec:	4433      	add	r3, r6
 80163ee:	6023      	str	r3, [r4, #0]
 80163f0:	2000      	movs	r0, #0
 80163f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f6:	462a      	mov	r2, r5
 80163f8:	f000 fb7b 	bl	8016af2 <_realloc_r>
 80163fc:	4606      	mov	r6, r0
 80163fe:	2800      	cmp	r0, #0
 8016400:	d1e0      	bne.n	80163c4 <__ssputs_r+0x5c>
 8016402:	6921      	ldr	r1, [r4, #16]
 8016404:	4650      	mov	r0, sl
 8016406:	f7ff ff65 	bl	80162d4 <_free_r>
 801640a:	230c      	movs	r3, #12
 801640c:	f8ca 3000 	str.w	r3, [sl]
 8016410:	89a3      	ldrh	r3, [r4, #12]
 8016412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016416:	81a3      	strh	r3, [r4, #12]
 8016418:	f04f 30ff 	mov.w	r0, #4294967295
 801641c:	e7e9      	b.n	80163f2 <__ssputs_r+0x8a>
	...

08016420 <_svfiprintf_r>:
 8016420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016424:	4698      	mov	r8, r3
 8016426:	898b      	ldrh	r3, [r1, #12]
 8016428:	061b      	lsls	r3, r3, #24
 801642a:	b09d      	sub	sp, #116	@ 0x74
 801642c:	4607      	mov	r7, r0
 801642e:	460d      	mov	r5, r1
 8016430:	4614      	mov	r4, r2
 8016432:	d510      	bpl.n	8016456 <_svfiprintf_r+0x36>
 8016434:	690b      	ldr	r3, [r1, #16]
 8016436:	b973      	cbnz	r3, 8016456 <_svfiprintf_r+0x36>
 8016438:	2140      	movs	r1, #64	@ 0x40
 801643a:	f7ff fc4d 	bl	8015cd8 <_malloc_r>
 801643e:	6028      	str	r0, [r5, #0]
 8016440:	6128      	str	r0, [r5, #16]
 8016442:	b930      	cbnz	r0, 8016452 <_svfiprintf_r+0x32>
 8016444:	230c      	movs	r3, #12
 8016446:	603b      	str	r3, [r7, #0]
 8016448:	f04f 30ff 	mov.w	r0, #4294967295
 801644c:	b01d      	add	sp, #116	@ 0x74
 801644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016452:	2340      	movs	r3, #64	@ 0x40
 8016454:	616b      	str	r3, [r5, #20]
 8016456:	2300      	movs	r3, #0
 8016458:	9309      	str	r3, [sp, #36]	@ 0x24
 801645a:	2320      	movs	r3, #32
 801645c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016460:	f8cd 800c 	str.w	r8, [sp, #12]
 8016464:	2330      	movs	r3, #48	@ 0x30
 8016466:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016604 <_svfiprintf_r+0x1e4>
 801646a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801646e:	f04f 0901 	mov.w	r9, #1
 8016472:	4623      	mov	r3, r4
 8016474:	469a      	mov	sl, r3
 8016476:	f813 2b01 	ldrb.w	r2, [r3], #1
 801647a:	b10a      	cbz	r2, 8016480 <_svfiprintf_r+0x60>
 801647c:	2a25      	cmp	r2, #37	@ 0x25
 801647e:	d1f9      	bne.n	8016474 <_svfiprintf_r+0x54>
 8016480:	ebba 0b04 	subs.w	fp, sl, r4
 8016484:	d00b      	beq.n	801649e <_svfiprintf_r+0x7e>
 8016486:	465b      	mov	r3, fp
 8016488:	4622      	mov	r2, r4
 801648a:	4629      	mov	r1, r5
 801648c:	4638      	mov	r0, r7
 801648e:	f7ff ff6b 	bl	8016368 <__ssputs_r>
 8016492:	3001      	adds	r0, #1
 8016494:	f000 80a7 	beq.w	80165e6 <_svfiprintf_r+0x1c6>
 8016498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801649a:	445a      	add	r2, fp
 801649c:	9209      	str	r2, [sp, #36]	@ 0x24
 801649e:	f89a 3000 	ldrb.w	r3, [sl]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	f000 809f 	beq.w	80165e6 <_svfiprintf_r+0x1c6>
 80164a8:	2300      	movs	r3, #0
 80164aa:	f04f 32ff 	mov.w	r2, #4294967295
 80164ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164b2:	f10a 0a01 	add.w	sl, sl, #1
 80164b6:	9304      	str	r3, [sp, #16]
 80164b8:	9307      	str	r3, [sp, #28]
 80164ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80164be:	931a      	str	r3, [sp, #104]	@ 0x68
 80164c0:	4654      	mov	r4, sl
 80164c2:	2205      	movs	r2, #5
 80164c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164c8:	484e      	ldr	r0, [pc, #312]	@ (8016604 <_svfiprintf_r+0x1e4>)
 80164ca:	f7e9 fea1 	bl	8000210 <memchr>
 80164ce:	9a04      	ldr	r2, [sp, #16]
 80164d0:	b9d8      	cbnz	r0, 801650a <_svfiprintf_r+0xea>
 80164d2:	06d0      	lsls	r0, r2, #27
 80164d4:	bf44      	itt	mi
 80164d6:	2320      	movmi	r3, #32
 80164d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80164dc:	0711      	lsls	r1, r2, #28
 80164de:	bf44      	itt	mi
 80164e0:	232b      	movmi	r3, #43	@ 0x2b
 80164e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80164e6:	f89a 3000 	ldrb.w	r3, [sl]
 80164ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80164ec:	d015      	beq.n	801651a <_svfiprintf_r+0xfa>
 80164ee:	9a07      	ldr	r2, [sp, #28]
 80164f0:	4654      	mov	r4, sl
 80164f2:	2000      	movs	r0, #0
 80164f4:	f04f 0c0a 	mov.w	ip, #10
 80164f8:	4621      	mov	r1, r4
 80164fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164fe:	3b30      	subs	r3, #48	@ 0x30
 8016500:	2b09      	cmp	r3, #9
 8016502:	d94b      	bls.n	801659c <_svfiprintf_r+0x17c>
 8016504:	b1b0      	cbz	r0, 8016534 <_svfiprintf_r+0x114>
 8016506:	9207      	str	r2, [sp, #28]
 8016508:	e014      	b.n	8016534 <_svfiprintf_r+0x114>
 801650a:	eba0 0308 	sub.w	r3, r0, r8
 801650e:	fa09 f303 	lsl.w	r3, r9, r3
 8016512:	4313      	orrs	r3, r2
 8016514:	9304      	str	r3, [sp, #16]
 8016516:	46a2      	mov	sl, r4
 8016518:	e7d2      	b.n	80164c0 <_svfiprintf_r+0xa0>
 801651a:	9b03      	ldr	r3, [sp, #12]
 801651c:	1d19      	adds	r1, r3, #4
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	9103      	str	r1, [sp, #12]
 8016522:	2b00      	cmp	r3, #0
 8016524:	bfbb      	ittet	lt
 8016526:	425b      	neglt	r3, r3
 8016528:	f042 0202 	orrlt.w	r2, r2, #2
 801652c:	9307      	strge	r3, [sp, #28]
 801652e:	9307      	strlt	r3, [sp, #28]
 8016530:	bfb8      	it	lt
 8016532:	9204      	strlt	r2, [sp, #16]
 8016534:	7823      	ldrb	r3, [r4, #0]
 8016536:	2b2e      	cmp	r3, #46	@ 0x2e
 8016538:	d10a      	bne.n	8016550 <_svfiprintf_r+0x130>
 801653a:	7863      	ldrb	r3, [r4, #1]
 801653c:	2b2a      	cmp	r3, #42	@ 0x2a
 801653e:	d132      	bne.n	80165a6 <_svfiprintf_r+0x186>
 8016540:	9b03      	ldr	r3, [sp, #12]
 8016542:	1d1a      	adds	r2, r3, #4
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	9203      	str	r2, [sp, #12]
 8016548:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801654c:	3402      	adds	r4, #2
 801654e:	9305      	str	r3, [sp, #20]
 8016550:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016614 <_svfiprintf_r+0x1f4>
 8016554:	7821      	ldrb	r1, [r4, #0]
 8016556:	2203      	movs	r2, #3
 8016558:	4650      	mov	r0, sl
 801655a:	f7e9 fe59 	bl	8000210 <memchr>
 801655e:	b138      	cbz	r0, 8016570 <_svfiprintf_r+0x150>
 8016560:	9b04      	ldr	r3, [sp, #16]
 8016562:	eba0 000a 	sub.w	r0, r0, sl
 8016566:	2240      	movs	r2, #64	@ 0x40
 8016568:	4082      	lsls	r2, r0
 801656a:	4313      	orrs	r3, r2
 801656c:	3401      	adds	r4, #1
 801656e:	9304      	str	r3, [sp, #16]
 8016570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016574:	4824      	ldr	r0, [pc, #144]	@ (8016608 <_svfiprintf_r+0x1e8>)
 8016576:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801657a:	2206      	movs	r2, #6
 801657c:	f7e9 fe48 	bl	8000210 <memchr>
 8016580:	2800      	cmp	r0, #0
 8016582:	d036      	beq.n	80165f2 <_svfiprintf_r+0x1d2>
 8016584:	4b21      	ldr	r3, [pc, #132]	@ (801660c <_svfiprintf_r+0x1ec>)
 8016586:	bb1b      	cbnz	r3, 80165d0 <_svfiprintf_r+0x1b0>
 8016588:	9b03      	ldr	r3, [sp, #12]
 801658a:	3307      	adds	r3, #7
 801658c:	f023 0307 	bic.w	r3, r3, #7
 8016590:	3308      	adds	r3, #8
 8016592:	9303      	str	r3, [sp, #12]
 8016594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016596:	4433      	add	r3, r6
 8016598:	9309      	str	r3, [sp, #36]	@ 0x24
 801659a:	e76a      	b.n	8016472 <_svfiprintf_r+0x52>
 801659c:	fb0c 3202 	mla	r2, ip, r2, r3
 80165a0:	460c      	mov	r4, r1
 80165a2:	2001      	movs	r0, #1
 80165a4:	e7a8      	b.n	80164f8 <_svfiprintf_r+0xd8>
 80165a6:	2300      	movs	r3, #0
 80165a8:	3401      	adds	r4, #1
 80165aa:	9305      	str	r3, [sp, #20]
 80165ac:	4619      	mov	r1, r3
 80165ae:	f04f 0c0a 	mov.w	ip, #10
 80165b2:	4620      	mov	r0, r4
 80165b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165b8:	3a30      	subs	r2, #48	@ 0x30
 80165ba:	2a09      	cmp	r2, #9
 80165bc:	d903      	bls.n	80165c6 <_svfiprintf_r+0x1a6>
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d0c6      	beq.n	8016550 <_svfiprintf_r+0x130>
 80165c2:	9105      	str	r1, [sp, #20]
 80165c4:	e7c4      	b.n	8016550 <_svfiprintf_r+0x130>
 80165c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80165ca:	4604      	mov	r4, r0
 80165cc:	2301      	movs	r3, #1
 80165ce:	e7f0      	b.n	80165b2 <_svfiprintf_r+0x192>
 80165d0:	ab03      	add	r3, sp, #12
 80165d2:	9300      	str	r3, [sp, #0]
 80165d4:	462a      	mov	r2, r5
 80165d6:	4b0e      	ldr	r3, [pc, #56]	@ (8016610 <_svfiprintf_r+0x1f0>)
 80165d8:	a904      	add	r1, sp, #16
 80165da:	4638      	mov	r0, r7
 80165dc:	f3af 8000 	nop.w
 80165e0:	1c42      	adds	r2, r0, #1
 80165e2:	4606      	mov	r6, r0
 80165e4:	d1d6      	bne.n	8016594 <_svfiprintf_r+0x174>
 80165e6:	89ab      	ldrh	r3, [r5, #12]
 80165e8:	065b      	lsls	r3, r3, #25
 80165ea:	f53f af2d 	bmi.w	8016448 <_svfiprintf_r+0x28>
 80165ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80165f0:	e72c      	b.n	801644c <_svfiprintf_r+0x2c>
 80165f2:	ab03      	add	r3, sp, #12
 80165f4:	9300      	str	r3, [sp, #0]
 80165f6:	462a      	mov	r2, r5
 80165f8:	4b05      	ldr	r3, [pc, #20]	@ (8016610 <_svfiprintf_r+0x1f0>)
 80165fa:	a904      	add	r1, sp, #16
 80165fc:	4638      	mov	r0, r7
 80165fe:	f000 f879 	bl	80166f4 <_printf_i>
 8016602:	e7ed      	b.n	80165e0 <_svfiprintf_r+0x1c0>
 8016604:	0802572b 	.word	0x0802572b
 8016608:	08025735 	.word	0x08025735
 801660c:	00000000 	.word	0x00000000
 8016610:	08016369 	.word	0x08016369
 8016614:	08025731 	.word	0x08025731

08016618 <_printf_common>:
 8016618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801661c:	4616      	mov	r6, r2
 801661e:	4698      	mov	r8, r3
 8016620:	688a      	ldr	r2, [r1, #8]
 8016622:	690b      	ldr	r3, [r1, #16]
 8016624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016628:	4293      	cmp	r3, r2
 801662a:	bfb8      	it	lt
 801662c:	4613      	movlt	r3, r2
 801662e:	6033      	str	r3, [r6, #0]
 8016630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016634:	4607      	mov	r7, r0
 8016636:	460c      	mov	r4, r1
 8016638:	b10a      	cbz	r2, 801663e <_printf_common+0x26>
 801663a:	3301      	adds	r3, #1
 801663c:	6033      	str	r3, [r6, #0]
 801663e:	6823      	ldr	r3, [r4, #0]
 8016640:	0699      	lsls	r1, r3, #26
 8016642:	bf42      	ittt	mi
 8016644:	6833      	ldrmi	r3, [r6, #0]
 8016646:	3302      	addmi	r3, #2
 8016648:	6033      	strmi	r3, [r6, #0]
 801664a:	6825      	ldr	r5, [r4, #0]
 801664c:	f015 0506 	ands.w	r5, r5, #6
 8016650:	d106      	bne.n	8016660 <_printf_common+0x48>
 8016652:	f104 0a19 	add.w	sl, r4, #25
 8016656:	68e3      	ldr	r3, [r4, #12]
 8016658:	6832      	ldr	r2, [r6, #0]
 801665a:	1a9b      	subs	r3, r3, r2
 801665c:	42ab      	cmp	r3, r5
 801665e:	dc26      	bgt.n	80166ae <_printf_common+0x96>
 8016660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016664:	6822      	ldr	r2, [r4, #0]
 8016666:	3b00      	subs	r3, #0
 8016668:	bf18      	it	ne
 801666a:	2301      	movne	r3, #1
 801666c:	0692      	lsls	r2, r2, #26
 801666e:	d42b      	bmi.n	80166c8 <_printf_common+0xb0>
 8016670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016674:	4641      	mov	r1, r8
 8016676:	4638      	mov	r0, r7
 8016678:	47c8      	blx	r9
 801667a:	3001      	adds	r0, #1
 801667c:	d01e      	beq.n	80166bc <_printf_common+0xa4>
 801667e:	6823      	ldr	r3, [r4, #0]
 8016680:	6922      	ldr	r2, [r4, #16]
 8016682:	f003 0306 	and.w	r3, r3, #6
 8016686:	2b04      	cmp	r3, #4
 8016688:	bf02      	ittt	eq
 801668a:	68e5      	ldreq	r5, [r4, #12]
 801668c:	6833      	ldreq	r3, [r6, #0]
 801668e:	1aed      	subeq	r5, r5, r3
 8016690:	68a3      	ldr	r3, [r4, #8]
 8016692:	bf0c      	ite	eq
 8016694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016698:	2500      	movne	r5, #0
 801669a:	4293      	cmp	r3, r2
 801669c:	bfc4      	itt	gt
 801669e:	1a9b      	subgt	r3, r3, r2
 80166a0:	18ed      	addgt	r5, r5, r3
 80166a2:	2600      	movs	r6, #0
 80166a4:	341a      	adds	r4, #26
 80166a6:	42b5      	cmp	r5, r6
 80166a8:	d11a      	bne.n	80166e0 <_printf_common+0xc8>
 80166aa:	2000      	movs	r0, #0
 80166ac:	e008      	b.n	80166c0 <_printf_common+0xa8>
 80166ae:	2301      	movs	r3, #1
 80166b0:	4652      	mov	r2, sl
 80166b2:	4641      	mov	r1, r8
 80166b4:	4638      	mov	r0, r7
 80166b6:	47c8      	blx	r9
 80166b8:	3001      	adds	r0, #1
 80166ba:	d103      	bne.n	80166c4 <_printf_common+0xac>
 80166bc:	f04f 30ff 	mov.w	r0, #4294967295
 80166c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c4:	3501      	adds	r5, #1
 80166c6:	e7c6      	b.n	8016656 <_printf_common+0x3e>
 80166c8:	18e1      	adds	r1, r4, r3
 80166ca:	1c5a      	adds	r2, r3, #1
 80166cc:	2030      	movs	r0, #48	@ 0x30
 80166ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80166d2:	4422      	add	r2, r4
 80166d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80166d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80166dc:	3302      	adds	r3, #2
 80166de:	e7c7      	b.n	8016670 <_printf_common+0x58>
 80166e0:	2301      	movs	r3, #1
 80166e2:	4622      	mov	r2, r4
 80166e4:	4641      	mov	r1, r8
 80166e6:	4638      	mov	r0, r7
 80166e8:	47c8      	blx	r9
 80166ea:	3001      	adds	r0, #1
 80166ec:	d0e6      	beq.n	80166bc <_printf_common+0xa4>
 80166ee:	3601      	adds	r6, #1
 80166f0:	e7d9      	b.n	80166a6 <_printf_common+0x8e>
	...

080166f4 <_printf_i>:
 80166f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166f8:	7e0f      	ldrb	r7, [r1, #24]
 80166fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80166fc:	2f78      	cmp	r7, #120	@ 0x78
 80166fe:	4691      	mov	r9, r2
 8016700:	4680      	mov	r8, r0
 8016702:	460c      	mov	r4, r1
 8016704:	469a      	mov	sl, r3
 8016706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801670a:	d807      	bhi.n	801671c <_printf_i+0x28>
 801670c:	2f62      	cmp	r7, #98	@ 0x62
 801670e:	d80a      	bhi.n	8016726 <_printf_i+0x32>
 8016710:	2f00      	cmp	r7, #0
 8016712:	f000 80d2 	beq.w	80168ba <_printf_i+0x1c6>
 8016716:	2f58      	cmp	r7, #88	@ 0x58
 8016718:	f000 80b9 	beq.w	801688e <_printf_i+0x19a>
 801671c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016724:	e03a      	b.n	801679c <_printf_i+0xa8>
 8016726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801672a:	2b15      	cmp	r3, #21
 801672c:	d8f6      	bhi.n	801671c <_printf_i+0x28>
 801672e:	a101      	add	r1, pc, #4	@ (adr r1, 8016734 <_printf_i+0x40>)
 8016730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016734:	0801678d 	.word	0x0801678d
 8016738:	080167a1 	.word	0x080167a1
 801673c:	0801671d 	.word	0x0801671d
 8016740:	0801671d 	.word	0x0801671d
 8016744:	0801671d 	.word	0x0801671d
 8016748:	0801671d 	.word	0x0801671d
 801674c:	080167a1 	.word	0x080167a1
 8016750:	0801671d 	.word	0x0801671d
 8016754:	0801671d 	.word	0x0801671d
 8016758:	0801671d 	.word	0x0801671d
 801675c:	0801671d 	.word	0x0801671d
 8016760:	080168a1 	.word	0x080168a1
 8016764:	080167cb 	.word	0x080167cb
 8016768:	0801685b 	.word	0x0801685b
 801676c:	0801671d 	.word	0x0801671d
 8016770:	0801671d 	.word	0x0801671d
 8016774:	080168c3 	.word	0x080168c3
 8016778:	0801671d 	.word	0x0801671d
 801677c:	080167cb 	.word	0x080167cb
 8016780:	0801671d 	.word	0x0801671d
 8016784:	0801671d 	.word	0x0801671d
 8016788:	08016863 	.word	0x08016863
 801678c:	6833      	ldr	r3, [r6, #0]
 801678e:	1d1a      	adds	r2, r3, #4
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	6032      	str	r2, [r6, #0]
 8016794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801679c:	2301      	movs	r3, #1
 801679e:	e09d      	b.n	80168dc <_printf_i+0x1e8>
 80167a0:	6833      	ldr	r3, [r6, #0]
 80167a2:	6820      	ldr	r0, [r4, #0]
 80167a4:	1d19      	adds	r1, r3, #4
 80167a6:	6031      	str	r1, [r6, #0]
 80167a8:	0606      	lsls	r6, r0, #24
 80167aa:	d501      	bpl.n	80167b0 <_printf_i+0xbc>
 80167ac:	681d      	ldr	r5, [r3, #0]
 80167ae:	e003      	b.n	80167b8 <_printf_i+0xc4>
 80167b0:	0645      	lsls	r5, r0, #25
 80167b2:	d5fb      	bpl.n	80167ac <_printf_i+0xb8>
 80167b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80167b8:	2d00      	cmp	r5, #0
 80167ba:	da03      	bge.n	80167c4 <_printf_i+0xd0>
 80167bc:	232d      	movs	r3, #45	@ 0x2d
 80167be:	426d      	negs	r5, r5
 80167c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80167c4:	4859      	ldr	r0, [pc, #356]	@ (801692c <_printf_i+0x238>)
 80167c6:	230a      	movs	r3, #10
 80167c8:	e011      	b.n	80167ee <_printf_i+0xfa>
 80167ca:	6821      	ldr	r1, [r4, #0]
 80167cc:	6833      	ldr	r3, [r6, #0]
 80167ce:	0608      	lsls	r0, r1, #24
 80167d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80167d4:	d402      	bmi.n	80167dc <_printf_i+0xe8>
 80167d6:	0649      	lsls	r1, r1, #25
 80167d8:	bf48      	it	mi
 80167da:	b2ad      	uxthmi	r5, r5
 80167dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80167de:	4853      	ldr	r0, [pc, #332]	@ (801692c <_printf_i+0x238>)
 80167e0:	6033      	str	r3, [r6, #0]
 80167e2:	bf14      	ite	ne
 80167e4:	230a      	movne	r3, #10
 80167e6:	2308      	moveq	r3, #8
 80167e8:	2100      	movs	r1, #0
 80167ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80167ee:	6866      	ldr	r6, [r4, #4]
 80167f0:	60a6      	str	r6, [r4, #8]
 80167f2:	2e00      	cmp	r6, #0
 80167f4:	bfa2      	ittt	ge
 80167f6:	6821      	ldrge	r1, [r4, #0]
 80167f8:	f021 0104 	bicge.w	r1, r1, #4
 80167fc:	6021      	strge	r1, [r4, #0]
 80167fe:	b90d      	cbnz	r5, 8016804 <_printf_i+0x110>
 8016800:	2e00      	cmp	r6, #0
 8016802:	d04b      	beq.n	801689c <_printf_i+0x1a8>
 8016804:	4616      	mov	r6, r2
 8016806:	fbb5 f1f3 	udiv	r1, r5, r3
 801680a:	fb03 5711 	mls	r7, r3, r1, r5
 801680e:	5dc7      	ldrb	r7, [r0, r7]
 8016810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016814:	462f      	mov	r7, r5
 8016816:	42bb      	cmp	r3, r7
 8016818:	460d      	mov	r5, r1
 801681a:	d9f4      	bls.n	8016806 <_printf_i+0x112>
 801681c:	2b08      	cmp	r3, #8
 801681e:	d10b      	bne.n	8016838 <_printf_i+0x144>
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	07df      	lsls	r7, r3, #31
 8016824:	d508      	bpl.n	8016838 <_printf_i+0x144>
 8016826:	6923      	ldr	r3, [r4, #16]
 8016828:	6861      	ldr	r1, [r4, #4]
 801682a:	4299      	cmp	r1, r3
 801682c:	bfde      	ittt	le
 801682e:	2330      	movle	r3, #48	@ 0x30
 8016830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016838:	1b92      	subs	r2, r2, r6
 801683a:	6122      	str	r2, [r4, #16]
 801683c:	f8cd a000 	str.w	sl, [sp]
 8016840:	464b      	mov	r3, r9
 8016842:	aa03      	add	r2, sp, #12
 8016844:	4621      	mov	r1, r4
 8016846:	4640      	mov	r0, r8
 8016848:	f7ff fee6 	bl	8016618 <_printf_common>
 801684c:	3001      	adds	r0, #1
 801684e:	d14a      	bne.n	80168e6 <_printf_i+0x1f2>
 8016850:	f04f 30ff 	mov.w	r0, #4294967295
 8016854:	b004      	add	sp, #16
 8016856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801685a:	6823      	ldr	r3, [r4, #0]
 801685c:	f043 0320 	orr.w	r3, r3, #32
 8016860:	6023      	str	r3, [r4, #0]
 8016862:	4833      	ldr	r0, [pc, #204]	@ (8016930 <_printf_i+0x23c>)
 8016864:	2778      	movs	r7, #120	@ 0x78
 8016866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801686a:	6823      	ldr	r3, [r4, #0]
 801686c:	6831      	ldr	r1, [r6, #0]
 801686e:	061f      	lsls	r7, r3, #24
 8016870:	f851 5b04 	ldr.w	r5, [r1], #4
 8016874:	d402      	bmi.n	801687c <_printf_i+0x188>
 8016876:	065f      	lsls	r7, r3, #25
 8016878:	bf48      	it	mi
 801687a:	b2ad      	uxthmi	r5, r5
 801687c:	6031      	str	r1, [r6, #0]
 801687e:	07d9      	lsls	r1, r3, #31
 8016880:	bf44      	itt	mi
 8016882:	f043 0320 	orrmi.w	r3, r3, #32
 8016886:	6023      	strmi	r3, [r4, #0]
 8016888:	b11d      	cbz	r5, 8016892 <_printf_i+0x19e>
 801688a:	2310      	movs	r3, #16
 801688c:	e7ac      	b.n	80167e8 <_printf_i+0xf4>
 801688e:	4827      	ldr	r0, [pc, #156]	@ (801692c <_printf_i+0x238>)
 8016890:	e7e9      	b.n	8016866 <_printf_i+0x172>
 8016892:	6823      	ldr	r3, [r4, #0]
 8016894:	f023 0320 	bic.w	r3, r3, #32
 8016898:	6023      	str	r3, [r4, #0]
 801689a:	e7f6      	b.n	801688a <_printf_i+0x196>
 801689c:	4616      	mov	r6, r2
 801689e:	e7bd      	b.n	801681c <_printf_i+0x128>
 80168a0:	6833      	ldr	r3, [r6, #0]
 80168a2:	6825      	ldr	r5, [r4, #0]
 80168a4:	6961      	ldr	r1, [r4, #20]
 80168a6:	1d18      	adds	r0, r3, #4
 80168a8:	6030      	str	r0, [r6, #0]
 80168aa:	062e      	lsls	r6, r5, #24
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	d501      	bpl.n	80168b4 <_printf_i+0x1c0>
 80168b0:	6019      	str	r1, [r3, #0]
 80168b2:	e002      	b.n	80168ba <_printf_i+0x1c6>
 80168b4:	0668      	lsls	r0, r5, #25
 80168b6:	d5fb      	bpl.n	80168b0 <_printf_i+0x1bc>
 80168b8:	8019      	strh	r1, [r3, #0]
 80168ba:	2300      	movs	r3, #0
 80168bc:	6123      	str	r3, [r4, #16]
 80168be:	4616      	mov	r6, r2
 80168c0:	e7bc      	b.n	801683c <_printf_i+0x148>
 80168c2:	6833      	ldr	r3, [r6, #0]
 80168c4:	1d1a      	adds	r2, r3, #4
 80168c6:	6032      	str	r2, [r6, #0]
 80168c8:	681e      	ldr	r6, [r3, #0]
 80168ca:	6862      	ldr	r2, [r4, #4]
 80168cc:	2100      	movs	r1, #0
 80168ce:	4630      	mov	r0, r6
 80168d0:	f7e9 fc9e 	bl	8000210 <memchr>
 80168d4:	b108      	cbz	r0, 80168da <_printf_i+0x1e6>
 80168d6:	1b80      	subs	r0, r0, r6
 80168d8:	6060      	str	r0, [r4, #4]
 80168da:	6863      	ldr	r3, [r4, #4]
 80168dc:	6123      	str	r3, [r4, #16]
 80168de:	2300      	movs	r3, #0
 80168e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80168e4:	e7aa      	b.n	801683c <_printf_i+0x148>
 80168e6:	6923      	ldr	r3, [r4, #16]
 80168e8:	4632      	mov	r2, r6
 80168ea:	4649      	mov	r1, r9
 80168ec:	4640      	mov	r0, r8
 80168ee:	47d0      	blx	sl
 80168f0:	3001      	adds	r0, #1
 80168f2:	d0ad      	beq.n	8016850 <_printf_i+0x15c>
 80168f4:	6823      	ldr	r3, [r4, #0]
 80168f6:	079b      	lsls	r3, r3, #30
 80168f8:	d413      	bmi.n	8016922 <_printf_i+0x22e>
 80168fa:	68e0      	ldr	r0, [r4, #12]
 80168fc:	9b03      	ldr	r3, [sp, #12]
 80168fe:	4298      	cmp	r0, r3
 8016900:	bfb8      	it	lt
 8016902:	4618      	movlt	r0, r3
 8016904:	e7a6      	b.n	8016854 <_printf_i+0x160>
 8016906:	2301      	movs	r3, #1
 8016908:	4632      	mov	r2, r6
 801690a:	4649      	mov	r1, r9
 801690c:	4640      	mov	r0, r8
 801690e:	47d0      	blx	sl
 8016910:	3001      	adds	r0, #1
 8016912:	d09d      	beq.n	8016850 <_printf_i+0x15c>
 8016914:	3501      	adds	r5, #1
 8016916:	68e3      	ldr	r3, [r4, #12]
 8016918:	9903      	ldr	r1, [sp, #12]
 801691a:	1a5b      	subs	r3, r3, r1
 801691c:	42ab      	cmp	r3, r5
 801691e:	dcf2      	bgt.n	8016906 <_printf_i+0x212>
 8016920:	e7eb      	b.n	80168fa <_printf_i+0x206>
 8016922:	2500      	movs	r5, #0
 8016924:	f104 0619 	add.w	r6, r4, #25
 8016928:	e7f5      	b.n	8016916 <_printf_i+0x222>
 801692a:	bf00      	nop
 801692c:	0802573c 	.word	0x0802573c
 8016930:	0802574d 	.word	0x0802574d

08016934 <__sflush_r>:
 8016934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801693c:	0716      	lsls	r6, r2, #28
 801693e:	4605      	mov	r5, r0
 8016940:	460c      	mov	r4, r1
 8016942:	d454      	bmi.n	80169ee <__sflush_r+0xba>
 8016944:	684b      	ldr	r3, [r1, #4]
 8016946:	2b00      	cmp	r3, #0
 8016948:	dc02      	bgt.n	8016950 <__sflush_r+0x1c>
 801694a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801694c:	2b00      	cmp	r3, #0
 801694e:	dd48      	ble.n	80169e2 <__sflush_r+0xae>
 8016950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016952:	2e00      	cmp	r6, #0
 8016954:	d045      	beq.n	80169e2 <__sflush_r+0xae>
 8016956:	2300      	movs	r3, #0
 8016958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801695c:	682f      	ldr	r7, [r5, #0]
 801695e:	6a21      	ldr	r1, [r4, #32]
 8016960:	602b      	str	r3, [r5, #0]
 8016962:	d030      	beq.n	80169c6 <__sflush_r+0x92>
 8016964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016966:	89a3      	ldrh	r3, [r4, #12]
 8016968:	0759      	lsls	r1, r3, #29
 801696a:	d505      	bpl.n	8016978 <__sflush_r+0x44>
 801696c:	6863      	ldr	r3, [r4, #4]
 801696e:	1ad2      	subs	r2, r2, r3
 8016970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016972:	b10b      	cbz	r3, 8016978 <__sflush_r+0x44>
 8016974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016976:	1ad2      	subs	r2, r2, r3
 8016978:	2300      	movs	r3, #0
 801697a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801697c:	6a21      	ldr	r1, [r4, #32]
 801697e:	4628      	mov	r0, r5
 8016980:	47b0      	blx	r6
 8016982:	1c43      	adds	r3, r0, #1
 8016984:	89a3      	ldrh	r3, [r4, #12]
 8016986:	d106      	bne.n	8016996 <__sflush_r+0x62>
 8016988:	6829      	ldr	r1, [r5, #0]
 801698a:	291d      	cmp	r1, #29
 801698c:	d82b      	bhi.n	80169e6 <__sflush_r+0xb2>
 801698e:	4a2a      	ldr	r2, [pc, #168]	@ (8016a38 <__sflush_r+0x104>)
 8016990:	410a      	asrs	r2, r1
 8016992:	07d6      	lsls	r6, r2, #31
 8016994:	d427      	bmi.n	80169e6 <__sflush_r+0xb2>
 8016996:	2200      	movs	r2, #0
 8016998:	6062      	str	r2, [r4, #4]
 801699a:	04d9      	lsls	r1, r3, #19
 801699c:	6922      	ldr	r2, [r4, #16]
 801699e:	6022      	str	r2, [r4, #0]
 80169a0:	d504      	bpl.n	80169ac <__sflush_r+0x78>
 80169a2:	1c42      	adds	r2, r0, #1
 80169a4:	d101      	bne.n	80169aa <__sflush_r+0x76>
 80169a6:	682b      	ldr	r3, [r5, #0]
 80169a8:	b903      	cbnz	r3, 80169ac <__sflush_r+0x78>
 80169aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80169ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80169ae:	602f      	str	r7, [r5, #0]
 80169b0:	b1b9      	cbz	r1, 80169e2 <__sflush_r+0xae>
 80169b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80169b6:	4299      	cmp	r1, r3
 80169b8:	d002      	beq.n	80169c0 <__sflush_r+0x8c>
 80169ba:	4628      	mov	r0, r5
 80169bc:	f7ff fc8a 	bl	80162d4 <_free_r>
 80169c0:	2300      	movs	r3, #0
 80169c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80169c4:	e00d      	b.n	80169e2 <__sflush_r+0xae>
 80169c6:	2301      	movs	r3, #1
 80169c8:	4628      	mov	r0, r5
 80169ca:	47b0      	blx	r6
 80169cc:	4602      	mov	r2, r0
 80169ce:	1c50      	adds	r0, r2, #1
 80169d0:	d1c9      	bne.n	8016966 <__sflush_r+0x32>
 80169d2:	682b      	ldr	r3, [r5, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d0c6      	beq.n	8016966 <__sflush_r+0x32>
 80169d8:	2b1d      	cmp	r3, #29
 80169da:	d001      	beq.n	80169e0 <__sflush_r+0xac>
 80169dc:	2b16      	cmp	r3, #22
 80169de:	d11e      	bne.n	8016a1e <__sflush_r+0xea>
 80169e0:	602f      	str	r7, [r5, #0]
 80169e2:	2000      	movs	r0, #0
 80169e4:	e022      	b.n	8016a2c <__sflush_r+0xf8>
 80169e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80169ea:	b21b      	sxth	r3, r3
 80169ec:	e01b      	b.n	8016a26 <__sflush_r+0xf2>
 80169ee:	690f      	ldr	r7, [r1, #16]
 80169f0:	2f00      	cmp	r7, #0
 80169f2:	d0f6      	beq.n	80169e2 <__sflush_r+0xae>
 80169f4:	0793      	lsls	r3, r2, #30
 80169f6:	680e      	ldr	r6, [r1, #0]
 80169f8:	bf08      	it	eq
 80169fa:	694b      	ldreq	r3, [r1, #20]
 80169fc:	600f      	str	r7, [r1, #0]
 80169fe:	bf18      	it	ne
 8016a00:	2300      	movne	r3, #0
 8016a02:	eba6 0807 	sub.w	r8, r6, r7
 8016a06:	608b      	str	r3, [r1, #8]
 8016a08:	f1b8 0f00 	cmp.w	r8, #0
 8016a0c:	dde9      	ble.n	80169e2 <__sflush_r+0xae>
 8016a0e:	6a21      	ldr	r1, [r4, #32]
 8016a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016a12:	4643      	mov	r3, r8
 8016a14:	463a      	mov	r2, r7
 8016a16:	4628      	mov	r0, r5
 8016a18:	47b0      	blx	r6
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	dc08      	bgt.n	8016a30 <__sflush_r+0xfc>
 8016a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a26:	81a3      	strh	r3, [r4, #12]
 8016a28:	f04f 30ff 	mov.w	r0, #4294967295
 8016a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a30:	4407      	add	r7, r0
 8016a32:	eba8 0800 	sub.w	r8, r8, r0
 8016a36:	e7e7      	b.n	8016a08 <__sflush_r+0xd4>
 8016a38:	dfbffffe 	.word	0xdfbffffe

08016a3c <_fflush_r>:
 8016a3c:	b538      	push	{r3, r4, r5, lr}
 8016a3e:	690b      	ldr	r3, [r1, #16]
 8016a40:	4605      	mov	r5, r0
 8016a42:	460c      	mov	r4, r1
 8016a44:	b913      	cbnz	r3, 8016a4c <_fflush_r+0x10>
 8016a46:	2500      	movs	r5, #0
 8016a48:	4628      	mov	r0, r5
 8016a4a:	bd38      	pop	{r3, r4, r5, pc}
 8016a4c:	b118      	cbz	r0, 8016a56 <_fflush_r+0x1a>
 8016a4e:	6a03      	ldr	r3, [r0, #32]
 8016a50:	b90b      	cbnz	r3, 8016a56 <_fflush_r+0x1a>
 8016a52:	f7ff fa97 	bl	8015f84 <__sinit>
 8016a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d0f3      	beq.n	8016a46 <_fflush_r+0xa>
 8016a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a60:	07d0      	lsls	r0, r2, #31
 8016a62:	d404      	bmi.n	8016a6e <_fflush_r+0x32>
 8016a64:	0599      	lsls	r1, r3, #22
 8016a66:	d402      	bmi.n	8016a6e <_fflush_r+0x32>
 8016a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a6a:	f7ff fc04 	bl	8016276 <__retarget_lock_acquire_recursive>
 8016a6e:	4628      	mov	r0, r5
 8016a70:	4621      	mov	r1, r4
 8016a72:	f7ff ff5f 	bl	8016934 <__sflush_r>
 8016a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a78:	07da      	lsls	r2, r3, #31
 8016a7a:	4605      	mov	r5, r0
 8016a7c:	d4e4      	bmi.n	8016a48 <_fflush_r+0xc>
 8016a7e:	89a3      	ldrh	r3, [r4, #12]
 8016a80:	059b      	lsls	r3, r3, #22
 8016a82:	d4e1      	bmi.n	8016a48 <_fflush_r+0xc>
 8016a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a86:	f7ff fbf7 	bl	8016278 <__retarget_lock_release_recursive>
 8016a8a:	e7dd      	b.n	8016a48 <_fflush_r+0xc>

08016a8c <fiprintf>:
 8016a8c:	b40e      	push	{r1, r2, r3}
 8016a8e:	b503      	push	{r0, r1, lr}
 8016a90:	4601      	mov	r1, r0
 8016a92:	ab03      	add	r3, sp, #12
 8016a94:	4805      	ldr	r0, [pc, #20]	@ (8016aac <fiprintf+0x20>)
 8016a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a9a:	6800      	ldr	r0, [r0, #0]
 8016a9c:	9301      	str	r3, [sp, #4]
 8016a9e:	f000 f87f 	bl	8016ba0 <_vfiprintf_r>
 8016aa2:	b002      	add	sp, #8
 8016aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016aa8:	b003      	add	sp, #12
 8016aaa:	4770      	bx	lr
 8016aac:	200000ac 	.word	0x200000ac

08016ab0 <memmove>:
 8016ab0:	4288      	cmp	r0, r1
 8016ab2:	b510      	push	{r4, lr}
 8016ab4:	eb01 0402 	add.w	r4, r1, r2
 8016ab8:	d902      	bls.n	8016ac0 <memmove+0x10>
 8016aba:	4284      	cmp	r4, r0
 8016abc:	4623      	mov	r3, r4
 8016abe:	d807      	bhi.n	8016ad0 <memmove+0x20>
 8016ac0:	1e43      	subs	r3, r0, #1
 8016ac2:	42a1      	cmp	r1, r4
 8016ac4:	d008      	beq.n	8016ad8 <memmove+0x28>
 8016ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ace:	e7f8      	b.n	8016ac2 <memmove+0x12>
 8016ad0:	4402      	add	r2, r0
 8016ad2:	4601      	mov	r1, r0
 8016ad4:	428a      	cmp	r2, r1
 8016ad6:	d100      	bne.n	8016ada <memmove+0x2a>
 8016ad8:	bd10      	pop	{r4, pc}
 8016ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ae2:	e7f7      	b.n	8016ad4 <memmove+0x24>

08016ae4 <abort>:
 8016ae4:	b508      	push	{r3, lr}
 8016ae6:	2006      	movs	r0, #6
 8016ae8:	f000 fa2e 	bl	8016f48 <raise>
 8016aec:	2001      	movs	r0, #1
 8016aee:	f7f2 f893 	bl	8008c18 <_exit>

08016af2 <_realloc_r>:
 8016af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af6:	4680      	mov	r8, r0
 8016af8:	4615      	mov	r5, r2
 8016afa:	460c      	mov	r4, r1
 8016afc:	b921      	cbnz	r1, 8016b08 <_realloc_r+0x16>
 8016afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b02:	4611      	mov	r1, r2
 8016b04:	f7ff b8e8 	b.w	8015cd8 <_malloc_r>
 8016b08:	b92a      	cbnz	r2, 8016b16 <_realloc_r+0x24>
 8016b0a:	f7ff fbe3 	bl	80162d4 <_free_r>
 8016b0e:	2400      	movs	r4, #0
 8016b10:	4620      	mov	r0, r4
 8016b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b16:	f000 fa33 	bl	8016f80 <_malloc_usable_size_r>
 8016b1a:	4285      	cmp	r5, r0
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	d802      	bhi.n	8016b26 <_realloc_r+0x34>
 8016b20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016b24:	d8f4      	bhi.n	8016b10 <_realloc_r+0x1e>
 8016b26:	4629      	mov	r1, r5
 8016b28:	4640      	mov	r0, r8
 8016b2a:	f7ff f8d5 	bl	8015cd8 <_malloc_r>
 8016b2e:	4607      	mov	r7, r0
 8016b30:	2800      	cmp	r0, #0
 8016b32:	d0ec      	beq.n	8016b0e <_realloc_r+0x1c>
 8016b34:	42b5      	cmp	r5, r6
 8016b36:	462a      	mov	r2, r5
 8016b38:	4621      	mov	r1, r4
 8016b3a:	bf28      	it	cs
 8016b3c:	4632      	movcs	r2, r6
 8016b3e:	f7ff fb9c 	bl	801627a <memcpy>
 8016b42:	4621      	mov	r1, r4
 8016b44:	4640      	mov	r0, r8
 8016b46:	f7ff fbc5 	bl	80162d4 <_free_r>
 8016b4a:	463c      	mov	r4, r7
 8016b4c:	e7e0      	b.n	8016b10 <_realloc_r+0x1e>

08016b4e <__sfputc_r>:
 8016b4e:	6893      	ldr	r3, [r2, #8]
 8016b50:	3b01      	subs	r3, #1
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	b410      	push	{r4}
 8016b56:	6093      	str	r3, [r2, #8]
 8016b58:	da08      	bge.n	8016b6c <__sfputc_r+0x1e>
 8016b5a:	6994      	ldr	r4, [r2, #24]
 8016b5c:	42a3      	cmp	r3, r4
 8016b5e:	db01      	blt.n	8016b64 <__sfputc_r+0x16>
 8016b60:	290a      	cmp	r1, #10
 8016b62:	d103      	bne.n	8016b6c <__sfputc_r+0x1e>
 8016b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b68:	f000 b932 	b.w	8016dd0 <__swbuf_r>
 8016b6c:	6813      	ldr	r3, [r2, #0]
 8016b6e:	1c58      	adds	r0, r3, #1
 8016b70:	6010      	str	r0, [r2, #0]
 8016b72:	7019      	strb	r1, [r3, #0]
 8016b74:	4608      	mov	r0, r1
 8016b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b7a:	4770      	bx	lr

08016b7c <__sfputs_r>:
 8016b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b7e:	4606      	mov	r6, r0
 8016b80:	460f      	mov	r7, r1
 8016b82:	4614      	mov	r4, r2
 8016b84:	18d5      	adds	r5, r2, r3
 8016b86:	42ac      	cmp	r4, r5
 8016b88:	d101      	bne.n	8016b8e <__sfputs_r+0x12>
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	e007      	b.n	8016b9e <__sfputs_r+0x22>
 8016b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b92:	463a      	mov	r2, r7
 8016b94:	4630      	mov	r0, r6
 8016b96:	f7ff ffda 	bl	8016b4e <__sfputc_r>
 8016b9a:	1c43      	adds	r3, r0, #1
 8016b9c:	d1f3      	bne.n	8016b86 <__sfputs_r+0xa>
 8016b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016ba0 <_vfiprintf_r>:
 8016ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba4:	460d      	mov	r5, r1
 8016ba6:	b09d      	sub	sp, #116	@ 0x74
 8016ba8:	4614      	mov	r4, r2
 8016baa:	4698      	mov	r8, r3
 8016bac:	4606      	mov	r6, r0
 8016bae:	b118      	cbz	r0, 8016bb8 <_vfiprintf_r+0x18>
 8016bb0:	6a03      	ldr	r3, [r0, #32]
 8016bb2:	b90b      	cbnz	r3, 8016bb8 <_vfiprintf_r+0x18>
 8016bb4:	f7ff f9e6 	bl	8015f84 <__sinit>
 8016bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016bba:	07d9      	lsls	r1, r3, #31
 8016bbc:	d405      	bmi.n	8016bca <_vfiprintf_r+0x2a>
 8016bbe:	89ab      	ldrh	r3, [r5, #12]
 8016bc0:	059a      	lsls	r2, r3, #22
 8016bc2:	d402      	bmi.n	8016bca <_vfiprintf_r+0x2a>
 8016bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016bc6:	f7ff fb56 	bl	8016276 <__retarget_lock_acquire_recursive>
 8016bca:	89ab      	ldrh	r3, [r5, #12]
 8016bcc:	071b      	lsls	r3, r3, #28
 8016bce:	d501      	bpl.n	8016bd4 <_vfiprintf_r+0x34>
 8016bd0:	692b      	ldr	r3, [r5, #16]
 8016bd2:	b99b      	cbnz	r3, 8016bfc <_vfiprintf_r+0x5c>
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	f000 f938 	bl	8016e4c <__swsetup_r>
 8016bdc:	b170      	cbz	r0, 8016bfc <_vfiprintf_r+0x5c>
 8016bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016be0:	07dc      	lsls	r4, r3, #31
 8016be2:	d504      	bpl.n	8016bee <_vfiprintf_r+0x4e>
 8016be4:	f04f 30ff 	mov.w	r0, #4294967295
 8016be8:	b01d      	add	sp, #116	@ 0x74
 8016bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bee:	89ab      	ldrh	r3, [r5, #12]
 8016bf0:	0598      	lsls	r0, r3, #22
 8016bf2:	d4f7      	bmi.n	8016be4 <_vfiprintf_r+0x44>
 8016bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016bf6:	f7ff fb3f 	bl	8016278 <__retarget_lock_release_recursive>
 8016bfa:	e7f3      	b.n	8016be4 <_vfiprintf_r+0x44>
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c00:	2320      	movs	r3, #32
 8016c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c0a:	2330      	movs	r3, #48	@ 0x30
 8016c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016dbc <_vfiprintf_r+0x21c>
 8016c10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016c14:	f04f 0901 	mov.w	r9, #1
 8016c18:	4623      	mov	r3, r4
 8016c1a:	469a      	mov	sl, r3
 8016c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c20:	b10a      	cbz	r2, 8016c26 <_vfiprintf_r+0x86>
 8016c22:	2a25      	cmp	r2, #37	@ 0x25
 8016c24:	d1f9      	bne.n	8016c1a <_vfiprintf_r+0x7a>
 8016c26:	ebba 0b04 	subs.w	fp, sl, r4
 8016c2a:	d00b      	beq.n	8016c44 <_vfiprintf_r+0xa4>
 8016c2c:	465b      	mov	r3, fp
 8016c2e:	4622      	mov	r2, r4
 8016c30:	4629      	mov	r1, r5
 8016c32:	4630      	mov	r0, r6
 8016c34:	f7ff ffa2 	bl	8016b7c <__sfputs_r>
 8016c38:	3001      	adds	r0, #1
 8016c3a:	f000 80a7 	beq.w	8016d8c <_vfiprintf_r+0x1ec>
 8016c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c40:	445a      	add	r2, fp
 8016c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c44:	f89a 3000 	ldrb.w	r3, [sl]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f000 809f 	beq.w	8016d8c <_vfiprintf_r+0x1ec>
 8016c4e:	2300      	movs	r3, #0
 8016c50:	f04f 32ff 	mov.w	r2, #4294967295
 8016c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c58:	f10a 0a01 	add.w	sl, sl, #1
 8016c5c:	9304      	str	r3, [sp, #16]
 8016c5e:	9307      	str	r3, [sp, #28]
 8016c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c66:	4654      	mov	r4, sl
 8016c68:	2205      	movs	r2, #5
 8016c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c6e:	4853      	ldr	r0, [pc, #332]	@ (8016dbc <_vfiprintf_r+0x21c>)
 8016c70:	f7e9 face 	bl	8000210 <memchr>
 8016c74:	9a04      	ldr	r2, [sp, #16]
 8016c76:	b9d8      	cbnz	r0, 8016cb0 <_vfiprintf_r+0x110>
 8016c78:	06d1      	lsls	r1, r2, #27
 8016c7a:	bf44      	itt	mi
 8016c7c:	2320      	movmi	r3, #32
 8016c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c82:	0713      	lsls	r3, r2, #28
 8016c84:	bf44      	itt	mi
 8016c86:	232b      	movmi	r3, #43	@ 0x2b
 8016c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8016c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c92:	d015      	beq.n	8016cc0 <_vfiprintf_r+0x120>
 8016c94:	9a07      	ldr	r2, [sp, #28]
 8016c96:	4654      	mov	r4, sl
 8016c98:	2000      	movs	r0, #0
 8016c9a:	f04f 0c0a 	mov.w	ip, #10
 8016c9e:	4621      	mov	r1, r4
 8016ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ca4:	3b30      	subs	r3, #48	@ 0x30
 8016ca6:	2b09      	cmp	r3, #9
 8016ca8:	d94b      	bls.n	8016d42 <_vfiprintf_r+0x1a2>
 8016caa:	b1b0      	cbz	r0, 8016cda <_vfiprintf_r+0x13a>
 8016cac:	9207      	str	r2, [sp, #28]
 8016cae:	e014      	b.n	8016cda <_vfiprintf_r+0x13a>
 8016cb0:	eba0 0308 	sub.w	r3, r0, r8
 8016cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8016cb8:	4313      	orrs	r3, r2
 8016cba:	9304      	str	r3, [sp, #16]
 8016cbc:	46a2      	mov	sl, r4
 8016cbe:	e7d2      	b.n	8016c66 <_vfiprintf_r+0xc6>
 8016cc0:	9b03      	ldr	r3, [sp, #12]
 8016cc2:	1d19      	adds	r1, r3, #4
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	9103      	str	r1, [sp, #12]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	bfbb      	ittet	lt
 8016ccc:	425b      	neglt	r3, r3
 8016cce:	f042 0202 	orrlt.w	r2, r2, #2
 8016cd2:	9307      	strge	r3, [sp, #28]
 8016cd4:	9307      	strlt	r3, [sp, #28]
 8016cd6:	bfb8      	it	lt
 8016cd8:	9204      	strlt	r2, [sp, #16]
 8016cda:	7823      	ldrb	r3, [r4, #0]
 8016cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8016cde:	d10a      	bne.n	8016cf6 <_vfiprintf_r+0x156>
 8016ce0:	7863      	ldrb	r3, [r4, #1]
 8016ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ce4:	d132      	bne.n	8016d4c <_vfiprintf_r+0x1ac>
 8016ce6:	9b03      	ldr	r3, [sp, #12]
 8016ce8:	1d1a      	adds	r2, r3, #4
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	9203      	str	r2, [sp, #12]
 8016cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016cf2:	3402      	adds	r4, #2
 8016cf4:	9305      	str	r3, [sp, #20]
 8016cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016dcc <_vfiprintf_r+0x22c>
 8016cfa:	7821      	ldrb	r1, [r4, #0]
 8016cfc:	2203      	movs	r2, #3
 8016cfe:	4650      	mov	r0, sl
 8016d00:	f7e9 fa86 	bl	8000210 <memchr>
 8016d04:	b138      	cbz	r0, 8016d16 <_vfiprintf_r+0x176>
 8016d06:	9b04      	ldr	r3, [sp, #16]
 8016d08:	eba0 000a 	sub.w	r0, r0, sl
 8016d0c:	2240      	movs	r2, #64	@ 0x40
 8016d0e:	4082      	lsls	r2, r0
 8016d10:	4313      	orrs	r3, r2
 8016d12:	3401      	adds	r4, #1
 8016d14:	9304      	str	r3, [sp, #16]
 8016d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d1a:	4829      	ldr	r0, [pc, #164]	@ (8016dc0 <_vfiprintf_r+0x220>)
 8016d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016d20:	2206      	movs	r2, #6
 8016d22:	f7e9 fa75 	bl	8000210 <memchr>
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d03f      	beq.n	8016daa <_vfiprintf_r+0x20a>
 8016d2a:	4b26      	ldr	r3, [pc, #152]	@ (8016dc4 <_vfiprintf_r+0x224>)
 8016d2c:	bb1b      	cbnz	r3, 8016d76 <_vfiprintf_r+0x1d6>
 8016d2e:	9b03      	ldr	r3, [sp, #12]
 8016d30:	3307      	adds	r3, #7
 8016d32:	f023 0307 	bic.w	r3, r3, #7
 8016d36:	3308      	adds	r3, #8
 8016d38:	9303      	str	r3, [sp, #12]
 8016d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d3c:	443b      	add	r3, r7
 8016d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d40:	e76a      	b.n	8016c18 <_vfiprintf_r+0x78>
 8016d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d46:	460c      	mov	r4, r1
 8016d48:	2001      	movs	r0, #1
 8016d4a:	e7a8      	b.n	8016c9e <_vfiprintf_r+0xfe>
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	3401      	adds	r4, #1
 8016d50:	9305      	str	r3, [sp, #20]
 8016d52:	4619      	mov	r1, r3
 8016d54:	f04f 0c0a 	mov.w	ip, #10
 8016d58:	4620      	mov	r0, r4
 8016d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d5e:	3a30      	subs	r2, #48	@ 0x30
 8016d60:	2a09      	cmp	r2, #9
 8016d62:	d903      	bls.n	8016d6c <_vfiprintf_r+0x1cc>
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d0c6      	beq.n	8016cf6 <_vfiprintf_r+0x156>
 8016d68:	9105      	str	r1, [sp, #20]
 8016d6a:	e7c4      	b.n	8016cf6 <_vfiprintf_r+0x156>
 8016d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d70:	4604      	mov	r4, r0
 8016d72:	2301      	movs	r3, #1
 8016d74:	e7f0      	b.n	8016d58 <_vfiprintf_r+0x1b8>
 8016d76:	ab03      	add	r3, sp, #12
 8016d78:	9300      	str	r3, [sp, #0]
 8016d7a:	462a      	mov	r2, r5
 8016d7c:	4b12      	ldr	r3, [pc, #72]	@ (8016dc8 <_vfiprintf_r+0x228>)
 8016d7e:	a904      	add	r1, sp, #16
 8016d80:	4630      	mov	r0, r6
 8016d82:	f3af 8000 	nop.w
 8016d86:	4607      	mov	r7, r0
 8016d88:	1c78      	adds	r0, r7, #1
 8016d8a:	d1d6      	bne.n	8016d3a <_vfiprintf_r+0x19a>
 8016d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d8e:	07d9      	lsls	r1, r3, #31
 8016d90:	d405      	bmi.n	8016d9e <_vfiprintf_r+0x1fe>
 8016d92:	89ab      	ldrh	r3, [r5, #12]
 8016d94:	059a      	lsls	r2, r3, #22
 8016d96:	d402      	bmi.n	8016d9e <_vfiprintf_r+0x1fe>
 8016d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d9a:	f7ff fa6d 	bl	8016278 <__retarget_lock_release_recursive>
 8016d9e:	89ab      	ldrh	r3, [r5, #12]
 8016da0:	065b      	lsls	r3, r3, #25
 8016da2:	f53f af1f 	bmi.w	8016be4 <_vfiprintf_r+0x44>
 8016da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016da8:	e71e      	b.n	8016be8 <_vfiprintf_r+0x48>
 8016daa:	ab03      	add	r3, sp, #12
 8016dac:	9300      	str	r3, [sp, #0]
 8016dae:	462a      	mov	r2, r5
 8016db0:	4b05      	ldr	r3, [pc, #20]	@ (8016dc8 <_vfiprintf_r+0x228>)
 8016db2:	a904      	add	r1, sp, #16
 8016db4:	4630      	mov	r0, r6
 8016db6:	f7ff fc9d 	bl	80166f4 <_printf_i>
 8016dba:	e7e4      	b.n	8016d86 <_vfiprintf_r+0x1e6>
 8016dbc:	0802572b 	.word	0x0802572b
 8016dc0:	08025735 	.word	0x08025735
 8016dc4:	00000000 	.word	0x00000000
 8016dc8:	08016b7d 	.word	0x08016b7d
 8016dcc:	08025731 	.word	0x08025731

08016dd0 <__swbuf_r>:
 8016dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dd2:	460e      	mov	r6, r1
 8016dd4:	4614      	mov	r4, r2
 8016dd6:	4605      	mov	r5, r0
 8016dd8:	b118      	cbz	r0, 8016de2 <__swbuf_r+0x12>
 8016dda:	6a03      	ldr	r3, [r0, #32]
 8016ddc:	b90b      	cbnz	r3, 8016de2 <__swbuf_r+0x12>
 8016dde:	f7ff f8d1 	bl	8015f84 <__sinit>
 8016de2:	69a3      	ldr	r3, [r4, #24]
 8016de4:	60a3      	str	r3, [r4, #8]
 8016de6:	89a3      	ldrh	r3, [r4, #12]
 8016de8:	071a      	lsls	r2, r3, #28
 8016dea:	d501      	bpl.n	8016df0 <__swbuf_r+0x20>
 8016dec:	6923      	ldr	r3, [r4, #16]
 8016dee:	b943      	cbnz	r3, 8016e02 <__swbuf_r+0x32>
 8016df0:	4621      	mov	r1, r4
 8016df2:	4628      	mov	r0, r5
 8016df4:	f000 f82a 	bl	8016e4c <__swsetup_r>
 8016df8:	b118      	cbz	r0, 8016e02 <__swbuf_r+0x32>
 8016dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8016dfe:	4638      	mov	r0, r7
 8016e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e02:	6823      	ldr	r3, [r4, #0]
 8016e04:	6922      	ldr	r2, [r4, #16]
 8016e06:	1a98      	subs	r0, r3, r2
 8016e08:	6963      	ldr	r3, [r4, #20]
 8016e0a:	b2f6      	uxtb	r6, r6
 8016e0c:	4283      	cmp	r3, r0
 8016e0e:	4637      	mov	r7, r6
 8016e10:	dc05      	bgt.n	8016e1e <__swbuf_r+0x4e>
 8016e12:	4621      	mov	r1, r4
 8016e14:	4628      	mov	r0, r5
 8016e16:	f7ff fe11 	bl	8016a3c <_fflush_r>
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	d1ed      	bne.n	8016dfa <__swbuf_r+0x2a>
 8016e1e:	68a3      	ldr	r3, [r4, #8]
 8016e20:	3b01      	subs	r3, #1
 8016e22:	60a3      	str	r3, [r4, #8]
 8016e24:	6823      	ldr	r3, [r4, #0]
 8016e26:	1c5a      	adds	r2, r3, #1
 8016e28:	6022      	str	r2, [r4, #0]
 8016e2a:	701e      	strb	r6, [r3, #0]
 8016e2c:	6962      	ldr	r2, [r4, #20]
 8016e2e:	1c43      	adds	r3, r0, #1
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d004      	beq.n	8016e3e <__swbuf_r+0x6e>
 8016e34:	89a3      	ldrh	r3, [r4, #12]
 8016e36:	07db      	lsls	r3, r3, #31
 8016e38:	d5e1      	bpl.n	8016dfe <__swbuf_r+0x2e>
 8016e3a:	2e0a      	cmp	r6, #10
 8016e3c:	d1df      	bne.n	8016dfe <__swbuf_r+0x2e>
 8016e3e:	4621      	mov	r1, r4
 8016e40:	4628      	mov	r0, r5
 8016e42:	f7ff fdfb 	bl	8016a3c <_fflush_r>
 8016e46:	2800      	cmp	r0, #0
 8016e48:	d0d9      	beq.n	8016dfe <__swbuf_r+0x2e>
 8016e4a:	e7d6      	b.n	8016dfa <__swbuf_r+0x2a>

08016e4c <__swsetup_r>:
 8016e4c:	b538      	push	{r3, r4, r5, lr}
 8016e4e:	4b29      	ldr	r3, [pc, #164]	@ (8016ef4 <__swsetup_r+0xa8>)
 8016e50:	4605      	mov	r5, r0
 8016e52:	6818      	ldr	r0, [r3, #0]
 8016e54:	460c      	mov	r4, r1
 8016e56:	b118      	cbz	r0, 8016e60 <__swsetup_r+0x14>
 8016e58:	6a03      	ldr	r3, [r0, #32]
 8016e5a:	b90b      	cbnz	r3, 8016e60 <__swsetup_r+0x14>
 8016e5c:	f7ff f892 	bl	8015f84 <__sinit>
 8016e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e64:	0719      	lsls	r1, r3, #28
 8016e66:	d422      	bmi.n	8016eae <__swsetup_r+0x62>
 8016e68:	06da      	lsls	r2, r3, #27
 8016e6a:	d407      	bmi.n	8016e7c <__swsetup_r+0x30>
 8016e6c:	2209      	movs	r2, #9
 8016e6e:	602a      	str	r2, [r5, #0]
 8016e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e74:	81a3      	strh	r3, [r4, #12]
 8016e76:	f04f 30ff 	mov.w	r0, #4294967295
 8016e7a:	e033      	b.n	8016ee4 <__swsetup_r+0x98>
 8016e7c:	0758      	lsls	r0, r3, #29
 8016e7e:	d512      	bpl.n	8016ea6 <__swsetup_r+0x5a>
 8016e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e82:	b141      	cbz	r1, 8016e96 <__swsetup_r+0x4a>
 8016e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e88:	4299      	cmp	r1, r3
 8016e8a:	d002      	beq.n	8016e92 <__swsetup_r+0x46>
 8016e8c:	4628      	mov	r0, r5
 8016e8e:	f7ff fa21 	bl	80162d4 <_free_r>
 8016e92:	2300      	movs	r3, #0
 8016e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e96:	89a3      	ldrh	r3, [r4, #12]
 8016e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016e9c:	81a3      	strh	r3, [r4, #12]
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	6063      	str	r3, [r4, #4]
 8016ea2:	6923      	ldr	r3, [r4, #16]
 8016ea4:	6023      	str	r3, [r4, #0]
 8016ea6:	89a3      	ldrh	r3, [r4, #12]
 8016ea8:	f043 0308 	orr.w	r3, r3, #8
 8016eac:	81a3      	strh	r3, [r4, #12]
 8016eae:	6923      	ldr	r3, [r4, #16]
 8016eb0:	b94b      	cbnz	r3, 8016ec6 <__swsetup_r+0x7a>
 8016eb2:	89a3      	ldrh	r3, [r4, #12]
 8016eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016ebc:	d003      	beq.n	8016ec6 <__swsetup_r+0x7a>
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	f000 f88b 	bl	8016fdc <__smakebuf_r>
 8016ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016eca:	f013 0201 	ands.w	r2, r3, #1
 8016ece:	d00a      	beq.n	8016ee6 <__swsetup_r+0x9a>
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	60a2      	str	r2, [r4, #8]
 8016ed4:	6962      	ldr	r2, [r4, #20]
 8016ed6:	4252      	negs	r2, r2
 8016ed8:	61a2      	str	r2, [r4, #24]
 8016eda:	6922      	ldr	r2, [r4, #16]
 8016edc:	b942      	cbnz	r2, 8016ef0 <__swsetup_r+0xa4>
 8016ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016ee2:	d1c5      	bne.n	8016e70 <__swsetup_r+0x24>
 8016ee4:	bd38      	pop	{r3, r4, r5, pc}
 8016ee6:	0799      	lsls	r1, r3, #30
 8016ee8:	bf58      	it	pl
 8016eea:	6962      	ldrpl	r2, [r4, #20]
 8016eec:	60a2      	str	r2, [r4, #8]
 8016eee:	e7f4      	b.n	8016eda <__swsetup_r+0x8e>
 8016ef0:	2000      	movs	r0, #0
 8016ef2:	e7f7      	b.n	8016ee4 <__swsetup_r+0x98>
 8016ef4:	200000ac 	.word	0x200000ac

08016ef8 <_raise_r>:
 8016ef8:	291f      	cmp	r1, #31
 8016efa:	b538      	push	{r3, r4, r5, lr}
 8016efc:	4605      	mov	r5, r0
 8016efe:	460c      	mov	r4, r1
 8016f00:	d904      	bls.n	8016f0c <_raise_r+0x14>
 8016f02:	2316      	movs	r3, #22
 8016f04:	6003      	str	r3, [r0, #0]
 8016f06:	f04f 30ff 	mov.w	r0, #4294967295
 8016f0a:	bd38      	pop	{r3, r4, r5, pc}
 8016f0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016f0e:	b112      	cbz	r2, 8016f16 <_raise_r+0x1e>
 8016f10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f14:	b94b      	cbnz	r3, 8016f2a <_raise_r+0x32>
 8016f16:	4628      	mov	r0, r5
 8016f18:	f000 f830 	bl	8016f7c <_getpid_r>
 8016f1c:	4622      	mov	r2, r4
 8016f1e:	4601      	mov	r1, r0
 8016f20:	4628      	mov	r0, r5
 8016f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f26:	f000 b817 	b.w	8016f58 <_kill_r>
 8016f2a:	2b01      	cmp	r3, #1
 8016f2c:	d00a      	beq.n	8016f44 <_raise_r+0x4c>
 8016f2e:	1c59      	adds	r1, r3, #1
 8016f30:	d103      	bne.n	8016f3a <_raise_r+0x42>
 8016f32:	2316      	movs	r3, #22
 8016f34:	6003      	str	r3, [r0, #0]
 8016f36:	2001      	movs	r0, #1
 8016f38:	e7e7      	b.n	8016f0a <_raise_r+0x12>
 8016f3a:	2100      	movs	r1, #0
 8016f3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016f40:	4620      	mov	r0, r4
 8016f42:	4798      	blx	r3
 8016f44:	2000      	movs	r0, #0
 8016f46:	e7e0      	b.n	8016f0a <_raise_r+0x12>

08016f48 <raise>:
 8016f48:	4b02      	ldr	r3, [pc, #8]	@ (8016f54 <raise+0xc>)
 8016f4a:	4601      	mov	r1, r0
 8016f4c:	6818      	ldr	r0, [r3, #0]
 8016f4e:	f7ff bfd3 	b.w	8016ef8 <_raise_r>
 8016f52:	bf00      	nop
 8016f54:	200000ac 	.word	0x200000ac

08016f58 <_kill_r>:
 8016f58:	b538      	push	{r3, r4, r5, lr}
 8016f5a:	4d07      	ldr	r5, [pc, #28]	@ (8016f78 <_kill_r+0x20>)
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	4604      	mov	r4, r0
 8016f60:	4608      	mov	r0, r1
 8016f62:	4611      	mov	r1, r2
 8016f64:	602b      	str	r3, [r5, #0]
 8016f66:	f7f1 fe47 	bl	8008bf8 <_kill>
 8016f6a:	1c43      	adds	r3, r0, #1
 8016f6c:	d102      	bne.n	8016f74 <_kill_r+0x1c>
 8016f6e:	682b      	ldr	r3, [r5, #0]
 8016f70:	b103      	cbz	r3, 8016f74 <_kill_r+0x1c>
 8016f72:	6023      	str	r3, [r4, #0]
 8016f74:	bd38      	pop	{r3, r4, r5, pc}
 8016f76:	bf00      	nop
 8016f78:	200097fc 	.word	0x200097fc

08016f7c <_getpid_r>:
 8016f7c:	f7f1 be34 	b.w	8008be8 <_getpid>

08016f80 <_malloc_usable_size_r>:
 8016f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f84:	1f18      	subs	r0, r3, #4
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	bfbc      	itt	lt
 8016f8a:	580b      	ldrlt	r3, [r1, r0]
 8016f8c:	18c0      	addlt	r0, r0, r3
 8016f8e:	4770      	bx	lr

08016f90 <__swhatbuf_r>:
 8016f90:	b570      	push	{r4, r5, r6, lr}
 8016f92:	460c      	mov	r4, r1
 8016f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f98:	2900      	cmp	r1, #0
 8016f9a:	b096      	sub	sp, #88	@ 0x58
 8016f9c:	4615      	mov	r5, r2
 8016f9e:	461e      	mov	r6, r3
 8016fa0:	da0d      	bge.n	8016fbe <__swhatbuf_r+0x2e>
 8016fa2:	89a3      	ldrh	r3, [r4, #12]
 8016fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016fa8:	f04f 0100 	mov.w	r1, #0
 8016fac:	bf14      	ite	ne
 8016fae:	2340      	movne	r3, #64	@ 0x40
 8016fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	6031      	str	r1, [r6, #0]
 8016fb8:	602b      	str	r3, [r5, #0]
 8016fba:	b016      	add	sp, #88	@ 0x58
 8016fbc:	bd70      	pop	{r4, r5, r6, pc}
 8016fbe:	466a      	mov	r2, sp
 8016fc0:	f000 f848 	bl	8017054 <_fstat_r>
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	dbec      	blt.n	8016fa2 <__swhatbuf_r+0x12>
 8016fc8:	9901      	ldr	r1, [sp, #4]
 8016fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016fd2:	4259      	negs	r1, r3
 8016fd4:	4159      	adcs	r1, r3
 8016fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016fda:	e7eb      	b.n	8016fb4 <__swhatbuf_r+0x24>

08016fdc <__smakebuf_r>:
 8016fdc:	898b      	ldrh	r3, [r1, #12]
 8016fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016fe0:	079d      	lsls	r5, r3, #30
 8016fe2:	4606      	mov	r6, r0
 8016fe4:	460c      	mov	r4, r1
 8016fe6:	d507      	bpl.n	8016ff8 <__smakebuf_r+0x1c>
 8016fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016fec:	6023      	str	r3, [r4, #0]
 8016fee:	6123      	str	r3, [r4, #16]
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	6163      	str	r3, [r4, #20]
 8016ff4:	b003      	add	sp, #12
 8016ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ff8:	ab01      	add	r3, sp, #4
 8016ffa:	466a      	mov	r2, sp
 8016ffc:	f7ff ffc8 	bl	8016f90 <__swhatbuf_r>
 8017000:	9f00      	ldr	r7, [sp, #0]
 8017002:	4605      	mov	r5, r0
 8017004:	4639      	mov	r1, r7
 8017006:	4630      	mov	r0, r6
 8017008:	f7fe fe66 	bl	8015cd8 <_malloc_r>
 801700c:	b948      	cbnz	r0, 8017022 <__smakebuf_r+0x46>
 801700e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017012:	059a      	lsls	r2, r3, #22
 8017014:	d4ee      	bmi.n	8016ff4 <__smakebuf_r+0x18>
 8017016:	f023 0303 	bic.w	r3, r3, #3
 801701a:	f043 0302 	orr.w	r3, r3, #2
 801701e:	81a3      	strh	r3, [r4, #12]
 8017020:	e7e2      	b.n	8016fe8 <__smakebuf_r+0xc>
 8017022:	89a3      	ldrh	r3, [r4, #12]
 8017024:	6020      	str	r0, [r4, #0]
 8017026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801702a:	81a3      	strh	r3, [r4, #12]
 801702c:	9b01      	ldr	r3, [sp, #4]
 801702e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017032:	b15b      	cbz	r3, 801704c <__smakebuf_r+0x70>
 8017034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017038:	4630      	mov	r0, r6
 801703a:	f000 f81d 	bl	8017078 <_isatty_r>
 801703e:	b128      	cbz	r0, 801704c <__smakebuf_r+0x70>
 8017040:	89a3      	ldrh	r3, [r4, #12]
 8017042:	f023 0303 	bic.w	r3, r3, #3
 8017046:	f043 0301 	orr.w	r3, r3, #1
 801704a:	81a3      	strh	r3, [r4, #12]
 801704c:	89a3      	ldrh	r3, [r4, #12]
 801704e:	431d      	orrs	r5, r3
 8017050:	81a5      	strh	r5, [r4, #12]
 8017052:	e7cf      	b.n	8016ff4 <__smakebuf_r+0x18>

08017054 <_fstat_r>:
 8017054:	b538      	push	{r3, r4, r5, lr}
 8017056:	4d07      	ldr	r5, [pc, #28]	@ (8017074 <_fstat_r+0x20>)
 8017058:	2300      	movs	r3, #0
 801705a:	4604      	mov	r4, r0
 801705c:	4608      	mov	r0, r1
 801705e:	4611      	mov	r1, r2
 8017060:	602b      	str	r3, [r5, #0]
 8017062:	f7f1 fe29 	bl	8008cb8 <_fstat>
 8017066:	1c43      	adds	r3, r0, #1
 8017068:	d102      	bne.n	8017070 <_fstat_r+0x1c>
 801706a:	682b      	ldr	r3, [r5, #0]
 801706c:	b103      	cbz	r3, 8017070 <_fstat_r+0x1c>
 801706e:	6023      	str	r3, [r4, #0]
 8017070:	bd38      	pop	{r3, r4, r5, pc}
 8017072:	bf00      	nop
 8017074:	200097fc 	.word	0x200097fc

08017078 <_isatty_r>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	4d06      	ldr	r5, [pc, #24]	@ (8017094 <_isatty_r+0x1c>)
 801707c:	2300      	movs	r3, #0
 801707e:	4604      	mov	r4, r0
 8017080:	4608      	mov	r0, r1
 8017082:	602b      	str	r3, [r5, #0]
 8017084:	f7f1 fe28 	bl	8008cd8 <_isatty>
 8017088:	1c43      	adds	r3, r0, #1
 801708a:	d102      	bne.n	8017092 <_isatty_r+0x1a>
 801708c:	682b      	ldr	r3, [r5, #0]
 801708e:	b103      	cbz	r3, 8017092 <_isatty_r+0x1a>
 8017090:	6023      	str	r3, [r4, #0]
 8017092:	bd38      	pop	{r3, r4, r5, pc}
 8017094:	200097fc 	.word	0x200097fc

08017098 <_init>:
 8017098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801709a:	bf00      	nop
 801709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801709e:	bc08      	pop	{r3}
 80170a0:	469e      	mov	lr, r3
 80170a2:	4770      	bx	lr

080170a4 <_fini>:
 80170a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170a6:	bf00      	nop
 80170a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170aa:	bc08      	pop	{r3}
 80170ac:	469e      	mov	lr, r3
 80170ae:	4770      	bx	lr
