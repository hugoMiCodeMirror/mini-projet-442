
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fa0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e700  08017170  08017170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025870  08025870  000270f8  2**0
                  CONTENTS
  4 .ARM          00000008  08025870  08025870  00026870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025878  08025878  000270f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025878  08025878  00026878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802587c  0802587c  0002687c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08025880  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009710  200000f8  08025978  000270f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20009808  08025978  00027808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000270f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034b95  00000000  00000000  00027128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070f3  00000000  00000000  0005bcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c70  00000000  00000000  00062db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002271  00000000  00000000  00065a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a4e8  00000000  00000000  00067c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003839f  00000000  00000000  00072179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ad32  00000000  00000000  000aa518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c524a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c6dc  00000000  00000000  001c5290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001d196c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017158 	.word	0x08017158

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	08017158 	.word	0x08017158

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3303      	adds	r3, #3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	3202      	adds	r2, #2
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	3201      	adds	r2, #1
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
	return rv;
 8000de4:	68fb      	ldr	r3, [r7, #12]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	0a1b      	lsrs	r3, r3, #8
 8000e54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00d      	beq.n	8000eb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	1c53      	adds	r3, r2, #1
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	1c59      	adds	r1, r3, #1
 8000ea4:	6179      	str	r1, [r7, #20]
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f1      	bne.n	8000e9a <mem_cpy+0x1a>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000ec2:	b480      	push	{r7}
 8000ec4:	b087      	sub	sp, #28
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	617a      	str	r2, [r7, #20]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f3      	bne.n	8000ed2 <mem_set+0x10>
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	61fa      	str	r2, [r7, #28]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	61ba      	str	r2, [r7, #24]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <mem_cmp+0x40>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0eb      	beq.n	8000f10 <mem_cmp+0x18>

	return r;
 8000f38:	697b      	ldr	r3, [r7, #20]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8000f50:	e002      	b.n	8000f58 <chk_chr+0x12>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3301      	adds	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <chk_chr+0x26>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d1f2      	bne.n	8000f52 <chk_chr+0xc>
	return *str;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <lock_fs+0x22>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f011 fd1b 	bl	80129ca <ff_req_grant>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <lock_fs+0x22>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <lock_fs+0x24>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00d      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b0c      	cmp	r3, #12
 8000fbe:	d00a      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b0b      	cmp	r3, #11
 8000fc4:	d007      	beq.n	8000fd6 <unlock_fs+0x2e>
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d004      	beq.n	8000fd6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f011 fd0f 	bl	80129f4 <ff_rel_grant>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e029      	b.n	8001048 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <chk_lock+0xb4>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01d      	beq.n	800103e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001002:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <chk_lock+0xb4>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d116      	bne.n	8001042 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <chk_lock+0xb4>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001024:	429a      	cmp	r2, r3
 8001026:	d10c      	bne.n	8001042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001028:	4a1a      	ldr	r2, [pc, #104]	@ (8001094 <chk_lock+0xb4>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	3308      	adds	r3, #8
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8001038:	429a      	cmp	r2, r3
 800103a:	d102      	bne.n	8001042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800103c:	e007      	b.n	800104e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d9d2      	bls.n	8000ff4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d109      	bne.n	8001068 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <chk_lock+0x80>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d101      	bne.n	8001064 <chk_lock+0x84>
 8001060:	2300      	movs	r3, #0
 8001062:	e010      	b.n	8001086 <chk_lock+0xa6>
 8001064:	2312      	movs	r3, #18
 8001066:	e00e      	b.n	8001086 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d108      	bne.n	8001080 <chk_lock+0xa0>
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <chk_lock+0xb4>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	330c      	adds	r3, #12
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800107e:	d101      	bne.n	8001084 <chk_lock+0xa4>
 8001080:	2310      	movs	r3, #16
 8001082:	e000      	b.n	8001086 <chk_lock+0xa6>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000011c 	.word	0x2000011c

08001098 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e002      	b.n	80010aa <enq_lock+0x12>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d806      	bhi.n	80010be <enq_lock+0x26>
 80010b0:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <enq_lock+0x40>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f2      	bne.n	80010a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000011c 	.word	0x2000011c

080010dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e01f      	b.n	800112c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80010ec:	4a41      	ldr	r2, [pc, #260]	@ (80011f4 <inc_lock+0x118>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	4413      	add	r3, r2
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d113      	bne.n	8001126 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80010fe:	4a3d      	ldr	r2, [pc, #244]	@ (80011f4 <inc_lock+0x118>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800110e:	429a      	cmp	r2, r3
 8001110:	d109      	bne.n	8001126 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8001112:	4a38      	ldr	r2, [pc, #224]	@ (80011f4 <inc_lock+0x118>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	3308      	adds	r3, #8
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8001122:	429a      	cmp	r2, r3
 8001124:	d006      	beq.n	8001134 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d9dc      	bls.n	80010ec <inc_lock+0x10>
 8001132:	e000      	b.n	8001136 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8001134:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d132      	bne.n	80011a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e002      	b.n	8001148 <inc_lock+0x6c>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d806      	bhi.n	800115c <inc_lock+0x80>
 800114e:	4a29      	ldr	r2, [pc, #164]	@ (80011f4 <inc_lock+0x118>)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f2      	bne.n	8001142 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d101      	bne.n	8001166 <inc_lock+0x8a>
 8001162:	2300      	movs	r3, #0
 8001164:	e040      	b.n	80011e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4922      	ldr	r1, [pc, #136]	@ (80011f4 <inc_lock+0x118>)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	440b      	add	r3, r1
 8001172:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	491e      	ldr	r1, [pc, #120]	@ (80011f4 <inc_lock+0x118>)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	3304      	adds	r3, #4
 8001182:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	491a      	ldr	r1, [pc, #104]	@ (80011f4 <inc_lock+0x118>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	440b      	add	r3, r1
 8001190:	3308      	adds	r3, #8
 8001192:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8001194:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <inc_lock+0x118>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	4413      	add	r3, r2
 800119c:	330c      	adds	r3, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d009      	beq.n	80011bc <inc_lock+0xe0>
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <inc_lock+0x118>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	330c      	adds	r3, #12
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <inc_lock+0xe0>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e015      	b.n	80011e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d108      	bne.n	80011d4 <inc_lock+0xf8>
 80011c2:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <inc_lock+0x118>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	330c      	adds	r3, #12
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	e001      	b.n	80011d8 <inc_lock+0xfc>
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	4906      	ldr	r1, [pc, #24]	@ (80011f4 <inc_lock+0x118>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	330c      	adds	r3, #12
 80011e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	2000011c 	.word	0x2000011c

080011f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d825      	bhi.n	8001258 <dec_lock+0x60>
		n = Files[i].ctr;
 800120c:	4a17      	ldr	r2, [pc, #92]	@ (800126c <dec_lock+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	330c      	adds	r3, #12
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001220:	d101      	bne.n	8001226 <dec_lock+0x2e>
 8001222:	2300      	movs	r3, #0
 8001224:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <dec_lock+0x3a>
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	3b01      	subs	r3, #1
 8001230:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8001232:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <dec_lock+0x74>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	330c      	adds	r3, #12
 800123c:	89fa      	ldrh	r2, [r7, #14]
 800123e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <dec_lock+0x5a>
 8001246:	4a09      	ldr	r2, [pc, #36]	@ (800126c <dec_lock+0x74>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	737b      	strb	r3, [r7, #13]
 8001256:	e001      	b.n	800125c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001258:	2302      	movs	r3, #2
 800125a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800125c:	7b7b      	ldrb	r3, [r7, #13]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000011c 	.word	0x2000011c

08001270 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e010      	b.n	80012a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <clear_lock+0x44>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d105      	bne.n	800129a <clear_lock+0x2a>
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <clear_lock+0x44>)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d9eb      	bls.n	800127e <clear_lock+0xe>
	}
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	2000011c 	.word	0x2000011c

080012b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d034      	beq.n	8001336 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7858      	ldrb	r0, [r3, #1]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012dc:	2301      	movs	r3, #1
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	f011 faae 	bl	8012840 <disk_write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e022      	b.n	8001336 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	429a      	cmp	r2, r3
 8001304:	d217      	bcs.n	8001336 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	e010      	b.n	8001330 <sync_window+0x78>
					wsect += fs->fsize;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7858      	ldrb	r0, [r3, #1]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001322:	2301      	movs	r3, #1
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	f011 fa8b 	bl	8012840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	3b01      	subs	r3, #1
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d8eb      	bhi.n	800130e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d01b      	beq.n	8001390 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <sync_window>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d113      	bne.n	8001390 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7858      	ldrb	r0, [r3, #1]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001372:	2301      	movs	r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	f011 fa43 	bl	8012800 <disk_read>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff87 	bl	80012b8 <sync_window>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d158      	bne.n	8001466 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d148      	bne.n	800144e <sync_fs+0xb2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d144      	bne.n	800144e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3334      	adds	r3, #52	@ 0x34
 80013c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd77 	bl	8000ec2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3334      	adds	r3, #52	@ 0x34
 80013d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80013dc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fd06 	bl	8000df2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3334      	adds	r3, #52	@ 0x34
 80013ea:	4921      	ldr	r1, [pc, #132]	@ (8001470 <sync_fs+0xd4>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd1b 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3334      	adds	r3, #52	@ 0x34
 80013f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80013fa:	491e      	ldr	r1, [pc, #120]	@ (8001474 <sync_fs+0xd8>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd13 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3334      	adds	r3, #52	@ 0x34
 8001406:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f7ff fd09 	bl	8000e28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3334      	adds	r3, #52	@ 0x34
 800141a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff fcff 	bl	8000e28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7858      	ldrb	r0, [r3, #1]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001442:	2301      	movs	r3, #1
 8001444:	f011 f9fc 	bl	8012840 <disk_write>
			fs->fsi_flag = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f011 fa12 	bl	8012880 <disk_ioctl>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <sync_fs+0xca>
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	41615252 	.word	0x41615252
 8001474:	61417272 	.word	0x61417272

08001478 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3b02      	subs	r3, #2
 8001486:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	3b02      	subs	r3, #2
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d301      	bcc.n	8001498 <clust2sect+0x20>
 8001494:	2300      	movs	r3, #0
 8001496:	e008      	b.n	80014aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	895b      	ldrh	r3, [r3, #10]
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	fb03 f202 	mul.w	r2, r3, r2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	4413      	add	r3, r2
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d904      	bls.n	80014d6 <get_fat+0x20>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e08e      	b.n	80015fa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d061      	beq.n	80015ae <get_fat+0xf8>
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	dc7b      	bgt.n	80015e6 <get_fat+0x130>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d002      	beq.n	80014f8 <get_fat+0x42>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d041      	beq.n	800157a <get_fat+0xc4>
 80014f6:	e076      	b.n	80015e6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	085b      	lsrs	r3, r3, #1
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	0a5b      	lsrs	r3, r3, #9
 800150e:	4413      	add	r3, r2
 8001510:	4619      	mov	r1, r3
 8001512:	6938      	ldr	r0, [r7, #16]
 8001514:	f7ff ff14 	bl	8001340 <move_window>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d166      	bne.n	80015ec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60fa      	str	r2, [r7, #12]
 8001524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001530:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	0a5b      	lsrs	r3, r3, #9
 800153a:	4413      	add	r3, r2
 800153c:	4619      	mov	r1, r3
 800153e:	6938      	ldr	r0, [r7, #16]
 8001540:	f7ff fefe 	bl	8001340 <move_window>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d152      	bne.n	80015f0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4413      	add	r3, r2
 8001554:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4313      	orrs	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <get_fat+0xba>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	e002      	b.n	8001576 <get_fat+0xc0>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	617b      	str	r3, [r7, #20]
			break;
 8001578:	e03f      	b.n	80015fa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	4413      	add	r3, r2
 8001584:	4619      	mov	r1, r3
 8001586:	6938      	ldr	r0, [r7, #16]
 8001588:	f7ff feda 	bl	8001340 <move_window>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d130      	bne.n	80015f4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80015a0:	4413      	add	r3, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fbea 	bl	8000d7c <ld_word>
 80015a8:	4603      	mov	r3, r0
 80015aa:	617b      	str	r3, [r7, #20]
			break;
 80015ac:	e025      	b.n	80015fa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	09db      	lsrs	r3, r3, #7
 80015b6:	4413      	add	r3, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	6938      	ldr	r0, [r7, #16]
 80015bc:	f7ff fec0 	bl	8001340 <move_window>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80015d4:	4413      	add	r3, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fbe8 	bl	8000dac <ld_dword>
 80015dc:	4603      	mov	r3, r0
 80015de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80015e2:	617b      	str	r3, [r7, #20]
			break;
 80015e4:	e009      	b.n	80015fa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80015e6:	2301      	movs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e006      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80015ec:	bf00      	nop
 80015ee:	e004      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80015f0:	bf00      	nop
 80015f2:	e002      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80015f4:	bf00      	nop
 80015f6:	e000      	b.n	80015fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80015f8:	bf00      	nop
		}
	}

	return val;
 80015fa:	697b      	ldr	r3, [r7, #20]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001610:	2302      	movs	r3, #2
 8001612:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b01      	cmp	r3, #1
 8001618:	f240 80d9 	bls.w	80017ce <put_fat+0x1ca>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	f080 80d3 	bcs.w	80017ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	f000 8096 	beq.w	800175e <put_fat+0x15a>
 8001632:	2b03      	cmp	r3, #3
 8001634:	f300 80cb 	bgt.w	80017ce <put_fat+0x1ca>
 8001638:	2b01      	cmp	r3, #1
 800163a:	d002      	beq.n	8001642 <put_fat+0x3e>
 800163c:	2b02      	cmp	r3, #2
 800163e:	d06e      	beq.n	800171e <put_fat+0x11a>
 8001640:	e0c5      	b.n	80017ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4413      	add	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	0a5b      	lsrs	r3, r3, #9
 8001658:	4413      	add	r3, r2
 800165a:	4619      	mov	r1, r3
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff fe6f 	bl	8001340 <move_window>
 8001662:	4603      	mov	r3, r0
 8001664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 80a9 	bne.w	80017c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	61b9      	str	r1, [r7, #24]
 800167a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00d      	beq.n	80016a8 <put_fat+0xa4>
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	b25a      	sxtb	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e001      	b.n	80016ac <put_fat+0xa8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	0a5b      	lsrs	r3, r3, #9
 80016be:	4413      	add	r3, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fe3c 	bl	8001340 <move_window>
 80016c8:	4603      	mov	r3, r0
 80016ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d178      	bne.n	80017c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <put_fat+0xf0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	e00e      	b.n	8001712 <put_fat+0x10e>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	f023 030f 	bic.w	r3, r3, #15
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b25b      	sxtb	r3, r3
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25b      	sxtb	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	70da      	strb	r2, [r3, #3]
			break;
 800171c:	e057      	b.n	80017ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	4413      	add	r3, r2
 8001728:	4619      	mov	r1, r3
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fe08 	bl	8001340 <move_window>
 8001730:	4603      	mov	r3, r0
 8001732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d146      	bne.n	80017c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8001748:	4413      	add	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	b292      	uxth	r2, r2
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fb4e 	bl	8000df2 <st_word>
			fs->wflag = 1;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	70da      	strb	r2, [r3, #3]
			break;
 800175c:	e037      	b.n	80017ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	09db      	lsrs	r3, r3, #7
 8001766:	4413      	add	r3, r2
 8001768:	4619      	mov	r1, r3
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fde8 	bl	8001340 <move_window>
 8001770:	4603      	mov	r3, r0
 8001772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d128      	bne.n	80017cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb0b 	bl	8000dac <ld_dword>
 8001796:	4603      	mov	r3, r0
 8001798:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800179c:	4323      	orrs	r3, r4
 800179e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80017ae:	4413      	add	r3, r2
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fb38 	bl	8000e28 <st_dword>
			fs->wflag = 1;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	70da      	strb	r2, [r3, #3]
			break;
 80017be:	e006      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c0:	bf00      	nop
 80017c2:	e004      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c4:	bf00      	nop
 80017c6:	e002      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017c8:	bf00      	nop
 80017ca:	e000      	b.n	80017ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80017cc:	bf00      	nop
		}
	}
	return res;
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3724      	adds	r7, #36	@ 0x24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d904      	bls.n	80017fe <remove_chain+0x26>
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d301      	bcc.n	8001802 <remove_chain+0x2a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e04b      	b.n	800189a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	69b8      	ldr	r0, [r7, #24]
 8001810:	f7ff fef8 	bl	8001604 <put_fat>
 8001814:	4603      	mov	r3, r0
 8001816:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001818:	7ffb      	ldrb	r3, [r7, #31]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <remove_chain+0x4a>
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	e03b      	b.n	800189a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fe46 	bl	80014b6 <get_fat>
 800182a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d031      	beq.n	8001896 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <remove_chain+0x64>
 8001838:	2302      	movs	r3, #2
 800183a:	e02e      	b.n	800189a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	d101      	bne.n	8001848 <remove_chain+0x70>
 8001844:	2301      	movs	r3, #1
 8001846:	e028      	b.n	800189a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001848:	2200      	movs	r2, #0
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	69b8      	ldr	r0, [r7, #24]
 800184e:	f7ff fed9 	bl	8001604 <put_fat>
 8001852:	4603      	mov	r3, r0
 8001854:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001856:	7ffb      	ldrb	r3, [r7, #31]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <remove_chain+0x88>
 800185c:	7ffb      	ldrb	r3, [r7, #31]
 800185e:	e01c      	b.n	800189a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	3b02      	subs	r3, #2
 800186a:	429a      	cmp	r2, r3
 800186c:	d20b      	bcs.n	8001886 <remove_chain+0xae>
			fs->free_clst++;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	791b      	ldrb	r3, [r3, #4]
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3c6      	bcc.n	8001822 <remove_chain+0x4a>
 8001894:	e000      	b.n	8001898 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8001896:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b088      	sub	sp, #32
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <create_chain+0x2c>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d31b      	bcc.n	8001906 <create_chain+0x64>
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e018      	b.n	8001906 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fded 	bl	80014b6 <get_fat>
 80018dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d801      	bhi.n	80018e8 <create_chain+0x46>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e070      	b.n	80019ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d101      	bne.n	80018f4 <create_chain+0x52>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	e06a      	b.n	80019ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d201      	bcs.n	8001902 <create_chain+0x60>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	e063      	b.n	80019ca <create_chain+0x128>
		scl = clst;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	429a      	cmp	r2, r3
 8001918:	d307      	bcc.n	800192a <create_chain+0x88>
				ncl = 2;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	429a      	cmp	r2, r3
 8001924:	d901      	bls.n	800192a <create_chain+0x88>
 8001926:	2300      	movs	r3, #0
 8001928:	e04f      	b.n	80019ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800192a:	69f9      	ldr	r1, [r7, #28]
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fdc2 	bl	80014b6 <get_fat>
 8001932:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d003      	beq.n	8001948 <create_chain+0xa6>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001946:	d101      	bne.n	800194c <create_chain+0xaa>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	e03e      	b.n	80019ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	429a      	cmp	r2, r3
 8001952:	d1da      	bne.n	800190a <create_chain+0x68>
 8001954:	2300      	movs	r3, #0
 8001956:	e038      	b.n	80019ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8001958:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	69f9      	ldr	r1, [r7, #28]
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f7ff fe4f 	bl	8001604 <put_fat>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <create_chain+0xe2>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	6938      	ldr	r0, [r7, #16]
 800197c:	f7ff fe42 	bl	8001604 <put_fat>
 8001980:	4603      	mov	r3, r0
 8001982:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	3b02      	subs	r3, #2
 800199a:	429a      	cmp	r2, r3
 800199c:	d804      	bhi.n	80019a8 <create_chain+0x106>
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	711a      	strb	r2, [r3, #4]
 80019b6:	e007      	b.n	80019c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <create_chain+0x122>
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e000      	b.n	80019c6 <create_chain+0x124>
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80019c8:	69fb      	ldr	r3, [r7, #28]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	3304      	adds	r3, #4
 80019e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	0a5b      	lsrs	r3, r3, #9
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	8952      	ldrh	r2, [r2, #10]
 80019f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	613a      	str	r2, [r7, #16]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <clmt_clust+0x3a>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e010      	b.n	8001a2e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d307      	bcc.n	8001a24 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001a22:	e7e9      	b.n	80019f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8001a24:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a50:	d204      	bcs.n	8001a5c <dir_sdi+0x22>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <dir_sdi+0x26>
		return FR_INT_ERR;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e063      	b.n	8001b28 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <dir_sdi+0x46>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <dir_sdi+0x46>
		clst = fs->dirbase;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	8912      	ldrh	r2, [r2, #8]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d301      	bcc.n	8001a96 <dir_sdi+0x5c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e048      	b.n	8001b28 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	61da      	str	r2, [r3, #28]
 8001a9e:	e029      	b.n	8001af4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	895b      	ldrh	r3, [r3, #10]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001aa8:	e019      	b.n	8001ade <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fd01 	bl	80014b6 <get_fat>
 8001ab4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d101      	bne.n	8001ac2 <dir_sdi+0x88>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d904      	bls.n	8001ad2 <dir_sdi+0x98>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d301      	bcc.n	8001ad6 <dir_sdi+0x9c>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e028      	b.n	8001b28 <dir_sdi+0xee>
			ofs -= csz;
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2e1      	bcs.n	8001aaa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fcc5 	bl	8001478 <clust2sect>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <dir_sdi+0xcc>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e010      	b.n	8001b28 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	0a5b      	lsrs	r3, r3, #9
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	3320      	adds	r3, #32
 8001b46:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <dir_next+0x28>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b56:	d301      	bcc.n	8001b5c <dir_next+0x2c>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e0aa      	b.n	8001cb2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 8098 	bne.w	8001c98 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10b      	bne.n	8001b92 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	8912      	ldrh	r2, [r2, #8]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f0c0 8088 	bcc.w	8001c98 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e08f      	b.n	8001cb2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	0a5b      	lsrs	r3, r3, #9
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	8952      	ldrh	r2, [r2, #10]
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d17a      	bne.n	8001c98 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7ff fc83 	bl	80014b6 <get_fat>
 8001bb0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d801      	bhi.n	8001bbc <dir_next+0x8c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e07a      	b.n	8001cb2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d101      	bne.n	8001bc8 <dir_next+0x98>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e074      	b.n	8001cb2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d358      	bcc.n	8001c84 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	2304      	movs	r3, #4
 8001be0:	e067      	b.n	8001cb2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff fe59 	bl	80018a2 <create_chain>
 8001bf0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <dir_next+0xcc>
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	e05a      	b.n	8001cb2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <dir_next+0xd6>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e055      	b.n	8001cb2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d101      	bne.n	8001c12 <dir_next+0xe2>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e04f      	b.n	8001cb2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fb50 	bl	80012b8 <sync_window>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <dir_next+0xf2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e047      	b.n	8001cb2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3334      	adds	r3, #52	@ 0x34
 8001c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f948 	bl	8000ec2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fc1d 	bl	8001478 <clust2sect>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c44:	e012      	b.n	8001c6c <dir_next+0x13c>
						fs->wflag = 1;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fb33 	bl	80012b8 <sync_window>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <dir_next+0x12c>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e02a      	b.n	8001cb2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	895b      	ldrh	r3, [r3, #10]
 8001c70:	461a      	mov	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d3e6      	bcc.n	8001c46 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad2      	subs	r2, r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8001c8a:	6979      	ldr	r1, [r7, #20]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff fbf3 	bl	8001478 <clust2sect>
 8001c92:	4602      	mov	r2, r0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001caa:	441a      	add	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff feb4 	bl	8001a3a <dir_sdi>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12b      	bne.n	8001d34 <dir_alloc+0x7a>
		n = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff fb2a 	bl	8001340 <move_window>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11d      	bne.n	8001d32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2be5      	cmp	r3, #229	@ 0xe5
 8001cfe:	d004      	beq.n	8001d0a <dir_alloc+0x50>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d102      	bne.n	8001d1e <dir_alloc+0x64>
 8001d18:	e00c      	b.n	8001d34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff05 	bl	8001b30 <dir_next>
 8001d26:	4603      	mov	r3, r0
 8001d28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0d7      	beq.n	8001ce0 <dir_alloc+0x26>
 8001d30:	e000      	b.n	8001d34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8001d32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d101      	bne.n	8001d3e <dir_alloc+0x84>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	331a      	adds	r3, #26
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f810 	bl	8000d7c <ld_word>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d109      	bne.n	8001d7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f805 	bl	8000d7c <ld_word>
 8001d72:	4603      	mov	r3, r0
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	331a      	adds	r3, #26
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f828 	bl	8000df2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d109      	bne.n	8001dbe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f103 0214 	add.w	r2, r3, #20
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7ff f81a 	bl	8000df2 <st_word>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fe2f 	bl	8001a3a <dir_sdi>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <dir_find+0x24>
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	e03e      	b.n	8001e68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6938      	ldr	r0, [r7, #16]
 8001df2:	f7ff faa5 	bl	8001340 <move_window>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12f      	bne.n	8001e60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <dir_find+0x4e>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e028      	b.n	8001e66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	330b      	adds	r3, #11
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	330b      	adds	r3, #11
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <dir_find+0x86>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a18      	ldr	r0, [r3, #32]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3324      	adds	r3, #36	@ 0x24
 8001e3e:	220b      	movs	r2, #11
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7ff f859 	bl	8000ef8 <mem_cmp>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fe6e 	bl	8001b30 <dir_next>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0c5      	beq.n	8001dea <dir_find+0x24>
 8001e5e:	e002      	b.n	8001e66 <dir_find+0xa0>
		if (res != FR_OK) break;
 8001e60:	bf00      	nop
 8001e62:	e000      	b.n	8001e66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001e64:	bf00      	nop

	return res;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8001e7e:	2101      	movs	r1, #1
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff1a 	bl	8001cba <dir_alloc>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11c      	bne.n	8001eca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4619      	mov	r1, r3
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	f7ff fa52 	bl	8001340 <move_window>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d111      	bne.n	8001eca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f807 	bl	8000ec2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a18      	ldr	r0, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3324      	adds	r3, #36	@ 0x24
 8001ebc:	220b      	movs	r2, #11
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe ffde 	bl	8000e80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3324      	adds	r3, #36	@ 0x24
 8001ee8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8001eea:	220b      	movs	r2, #11
 8001eec:	2120      	movs	r1, #32
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f7fe ffe7 	bl	8000ec2 <mem_set>
	si = i = 0; ni = 8;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	2308      	movs	r3, #8
 8001efe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	61fa      	str	r2, [r7, #28]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001f0e:	7efb      	ldrb	r3, [r7, #27]
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d94e      	bls.n	8001fb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8001f14:	7efb      	ldrb	r3, [r7, #27]
 8001f16:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f18:	d006      	beq.n	8001f28 <create_name+0x54>
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f1e:	d110      	bne.n	8001f42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8001f20:	e002      	b.n	8001f28 <create_name+0x54>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f32:	d0f6      	beq.n	8001f22 <create_name+0x4e>
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f3e:	d0f0      	beq.n	8001f22 <create_name+0x4e>
			break;
 8001f40:	e038      	b.n	8001fb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8001f42:	7efb      	ldrb	r3, [r7, #27]
 8001f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f46:	d003      	beq.n	8001f50 <create_name+0x7c>
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d30c      	bcc.n	8001f6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b0b      	cmp	r3, #11
 8001f54:	d002      	beq.n	8001f5c <create_name+0x88>
 8001f56:	7efb      	ldrb	r3, [r7, #27]
 8001f58:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f5a:	d001      	beq.n	8001f60 <create_name+0x8c>
 8001f5c:	2306      	movs	r3, #6
 8001f5e:	e044      	b.n	8001fea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8001f60:	2308      	movs	r3, #8
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	230b      	movs	r3, #11
 8001f66:	617b      	str	r3, [r7, #20]
			continue;
 8001f68:	e022      	b.n	8001fb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8001f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da04      	bge.n	8001f7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001f72:	7efb      	ldrb	r3, [r7, #27]
 8001f74:	3b80      	subs	r3, #128	@ 0x80
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <create_name+0x120>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8001f7c:	7efb      	ldrb	r3, [r7, #27]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481d      	ldr	r0, [pc, #116]	@ (8001ff8 <create_name+0x124>)
 8001f82:	f7fe ffe0 	bl	8000f46 <chk_chr>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <create_name+0xbc>
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	e02c      	b.n	8001fea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8001f90:	7efb      	ldrb	r3, [r7, #27]
 8001f92:	2b60      	cmp	r3, #96	@ 0x60
 8001f94:	d905      	bls.n	8001fa2 <create_name+0xce>
 8001f96:	7efb      	ldrb	r3, [r7, #27]
 8001f98:	2b7a      	cmp	r3, #122	@ 0x7a
 8001f9a:	d802      	bhi.n	8001fa2 <create_name+0xce>
 8001f9c:	7efb      	ldrb	r3, [r7, #27]
 8001f9e:	3b20      	subs	r3, #32
 8001fa0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	613a      	str	r2, [r7, #16]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	7efa      	ldrb	r2, [r7, #27]
 8001fae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001fb0:	e7a6      	b.n	8001f00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001fb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	441a      	add	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <create_name+0xf4>
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	e010      	b.n	8001fea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2be5      	cmp	r3, #229	@ 0xe5
 8001fce:	d102      	bne.n	8001fd6 <create_name+0x102>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8001fd6:	7efb      	ldrb	r3, [r7, #27]
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d801      	bhi.n	8001fe0 <create_name+0x10c>
 8001fdc:	2204      	movs	r2, #4
 8001fde:	e000      	b.n	8001fe2 <create_name+0x10e>
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	330b      	adds	r3, #11
 8001fe6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001fe8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	08017408 	.word	0x08017408
 8001ff8:	08017170 	.word	0x08017170

08001ffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002010:	e002      	b.n	8002018 <follow_path+0x1c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b2f      	cmp	r3, #47	@ 0x2f
 800201e:	d0f8      	beq.n	8002012 <follow_path+0x16>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b5c      	cmp	r3, #92	@ 0x5c
 8002026:	d0f4      	beq.n	8002012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b1f      	cmp	r3, #31
 8002034:	d80a      	bhi.n	800204c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800203e:	2100      	movs	r1, #0
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fcfa 	bl	8001a3a <dir_sdi>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
 800204a:	e043      	b.n	80020d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff3f 	bl	8001ed4 <create_name>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d134      	bne.n	80020ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff feb0 	bl	8001dc6 <dir_find>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d127      	bne.n	80020ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d122      	bne.n	80020ce <follow_path+0xd2>
 8002088:	2305      	movs	r3, #5
 800208a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800208c:	e01f      	b.n	80020ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11c      	bne.n	80020d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	799b      	ldrb	r3, [r3, #6]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80020a4:	2305      	movs	r3, #5
 80020a6:	75fb      	strb	r3, [r7, #23]
 80020a8:	e014      	b.n	80020d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	4413      	add	r3, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fe43 	bl	8001d48 <ld_clust>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80020c8:	e7c0      	b.n	800204c <follow_path+0x50>
			if (res != FR_OK) break;
 80020ca:	bf00      	nop
 80020cc:	e002      	b.n	80020d4 <follow_path+0xd8>
				break;
 80020ce:	bf00      	nop
 80020d0:	e000      	b.n	80020d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80020d2:	bf00      	nop
			}
		}
	}

	return res;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80020de:	b480      	push	{r7}
 80020e0:	b087      	sub	sp, #28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d031      	beq.n	8002158 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e002      	b.n	8002102 <get_ldnumber+0x24>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b20      	cmp	r3, #32
 8002108:	d903      	bls.n	8002112 <get_ldnumber+0x34>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002110:	d1f4      	bne.n	80020fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b3a      	cmp	r3, #58	@ 0x3a
 8002118:	d11c      	bne.n	8002154 <get_ldnumber+0x76>
			tp = *path;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60fa      	str	r2, [r7, #12]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	3b30      	subs	r3, #48	@ 0x30
 800212a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b09      	cmp	r3, #9
 8002130:	d80e      	bhi.n	8002150 <get_ldnumber+0x72>
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	429a      	cmp	r2, r3
 8002138:	d10a      	bne.n	8002150 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <get_ldnumber+0x72>
					vol = (int)i;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	e002      	b.n	800215a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002158:	693b      	ldr	r3, [r7, #16]
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	70da      	strb	r2, [r3, #3]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff f8dc 	bl	8001340 <move_window>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <check_fs+0x2a>
 800218e:	2304      	movs	r3, #4
 8002190:	e038      	b.n	8002204 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3334      	adds	r3, #52	@ 0x34
 8002196:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fdee 	bl	8000d7c <ld_word>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <check_fs+0x48>
 80021ac:	2303      	movs	r3, #3
 80021ae:	e029      	b.n	8002204 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021b6:	2be9      	cmp	r3, #233	@ 0xe9
 80021b8:	d009      	beq.n	80021ce <check_fs+0x66>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021c0:	2beb      	cmp	r3, #235	@ 0xeb
 80021c2:	d11e      	bne.n	8002202 <check_fs+0x9a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80021ca:	2b90      	cmp	r3, #144	@ 0x90
 80021cc:	d119      	bne.n	8002202 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3334      	adds	r3, #52	@ 0x34
 80021d2:	3336      	adds	r3, #54	@ 0x36
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fde9 	bl	8000dac <ld_dword>
 80021da:	4603      	mov	r3, r0
 80021dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021e0:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <check_fs+0xa4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <check_fs+0x82>
 80021e6:	2300      	movs	r3, #0
 80021e8:	e00c      	b.n	8002204 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3334      	adds	r3, #52	@ 0x34
 80021ee:	3352      	adds	r3, #82	@ 0x52
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fddb 	bl	8000dac <ld_dword>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <check_fs+0xa8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <check_fs+0x9a>
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8002202:	2302      	movs	r3, #2
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00544146 	.word	0x00544146
 8002210:	33544146 	.word	0x33544146

08002214 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b096      	sub	sp, #88	@ 0x58
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff ff58 	bl	80020de <get_ldnumber>
 800222e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	da01      	bge.n	800223a <find_volume+0x26>
 8002236:	230b      	movs	r3, #11
 8002238:	e235      	b.n	80026a6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800223a:	4aa5      	ldr	r2, [pc, #660]	@ (80024d0 <find_volume+0x2bc>)
 800223c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <find_volume+0x3a>
 800224a:	230c      	movs	r3, #12
 800224c:	e22b      	b.n	80026a6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800224e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002250:	f7fe fe94 	bl	8000f7c <lock_fs>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <find_volume+0x4a>
 800225a:	230f      	movs	r3, #15
 800225c:	e223      	b.n	80026a6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002262:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800226c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01a      	beq.n	80022aa <find_volume+0x96>
		stat = disk_status(fs->drv);
 8002274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	4618      	mov	r0, r3
 800227a:	f010 fa81 	bl	8012780 <disk_status>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10c      	bne.n	80022aa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <find_volume+0x92>
 8002296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80022a2:	230a      	movs	r3, #10
 80022a4:	e1ff      	b.n	80026a6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80022a6:	2300      	movs	r3, #0
 80022a8:	e1fd      	b.n	80026a6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80022b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	4618      	mov	r0, r3
 80022be:	f010 fa79 	bl	80127b4 <disk_initialize>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80022c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80022d4:	2303      	movs	r3, #3
 80022d6:	e1e6      	b.n	80026a6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <find_volume+0xda>
 80022de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80022ea:	230a      	movs	r3, #10
 80022ec:	e1db      	b.n	80026a6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80022f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80022f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80022f6:	f7ff ff37 	bl	8002168 <check_fs>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002304:	2b02      	cmp	r3, #2
 8002306:	d149      	bne.n	800239c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	@ 0x40
 800230c:	e01e      	b.n	800234c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002310:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8002314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800231c:	4413      	add	r3, r2
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	3304      	adds	r3, #4
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <find_volume+0x124>
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	3308      	adds	r3, #8
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fd3c 	bl	8000dac <ld_dword>
 8002334:	4602      	mov	r2, r0
 8002336:	e000      	b.n	800233a <find_volume+0x126>
 8002338:	2200      	movs	r2, #0
 800233a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3358      	adds	r3, #88	@ 0x58
 8002340:	443b      	add	r3, r7
 8002342:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002348:	3301      	adds	r3, #1
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
 800234c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234e:	2b03      	cmp	r3, #3
 8002350:	d9dd      	bls.n	800230e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002352:	2300      	movs	r3, #0
 8002354:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8002356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <find_volume+0x14e>
 800235c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235e:	3b01      	subs	r3, #1
 8002360:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3358      	adds	r3, #88	@ 0x58
 8002368:	443b      	add	r3, r7
 800236a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800236e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <find_volume+0x16e>
 8002376:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002378:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800237a:	f7ff fef5 	bl	8002168 <check_fs>
 800237e:	4603      	mov	r3, r0
 8002380:	e000      	b.n	8002384 <find_volume+0x170>
 8002382:	2303      	movs	r3, #3
 8002384:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002388:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800238c:	2b01      	cmp	r3, #1
 800238e:	d905      	bls.n	800239c <find_volume+0x188>
 8002390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002392:	3301      	adds	r3, #1
 8002394:	643b      	str	r3, [r7, #64]	@ 0x40
 8002396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002398:	2b03      	cmp	r3, #3
 800239a:	d9e2      	bls.n	8002362 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800239c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d101      	bne.n	80023a8 <find_volume+0x194>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e17e      	b.n	80026a6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80023a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d901      	bls.n	80023b4 <find_volume+0x1a0>
 80023b0:	230d      	movs	r3, #13
 80023b2:	e178      	b.n	80026a6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80023b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b6:	3334      	adds	r3, #52	@ 0x34
 80023b8:	330b      	adds	r3, #11
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fcde 	bl	8000d7c <ld_word>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c6:	d001      	beq.n	80023cc <find_volume+0x1b8>
 80023c8:	230d      	movs	r3, #13
 80023ca:	e16c      	b.n	80026a6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80023cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ce:	3334      	adds	r3, #52	@ 0x34
 80023d0:	3316      	adds	r3, #22
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fcd2 	bl	8000d7c <ld_word>
 80023d8:	4603      	mov	r3, r0
 80023da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80023dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <find_volume+0x1dc>
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	3334      	adds	r3, #52	@ 0x34
 80023e6:	3324      	adds	r3, #36	@ 0x24
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fcdf 	bl	8000dac <ld_dword>
 80023ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80023f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80023f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80023fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d005      	beq.n	8002414 <find_volume+0x200>
 8002408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d001      	beq.n	8002414 <find_volume+0x200>
 8002410:	230d      	movs	r3, #13
 8002412:	e148      	b.n	80026a6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	789b      	ldrb	r3, [r3, #2]
 8002418:	461a      	mov	r2, r3
 800241a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002428:	461a      	mov	r2, r3
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800242e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002430:	895b      	ldrh	r3, [r3, #10]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <find_volume+0x234>
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	895b      	ldrh	r3, [r3, #10]
 800243a:	461a      	mov	r2, r3
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	895b      	ldrh	r3, [r3, #10]
 8002440:	3b01      	subs	r3, #1
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <find_volume+0x238>
 8002448:	230d      	movs	r3, #13
 800244a:	e12c      	b.n	80026a6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	3334      	adds	r3, #52	@ 0x34
 8002450:	3311      	adds	r3, #17
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc92 	bl	8000d7c <ld_word>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	891b      	ldrh	r3, [r3, #8]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <find_volume+0x25e>
 800246e:	230d      	movs	r3, #13
 8002470:	e119      	b.n	80026a6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002474:	3334      	adds	r3, #52	@ 0x34
 8002476:	3313      	adds	r3, #19
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fc7f 	bl	8000d7c <ld_word>
 800247e:	4603      	mov	r3, r0
 8002480:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d106      	bne.n	8002496 <find_volume+0x282>
 8002488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248a:	3334      	adds	r3, #52	@ 0x34
 800248c:	3320      	adds	r3, #32
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fc8c 	bl	8000dac <ld_dword>
 8002494:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	3334      	adds	r3, #52	@ 0x34
 800249a:	330e      	adds	r3, #14
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc6d 	bl	8000d7c <ld_word>
 80024a2:	4603      	mov	r3, r0
 80024a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80024a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <find_volume+0x29c>
 80024ac:	230d      	movs	r3, #13
 80024ae:	e0fa      	b.n	80026a6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80024b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80024b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024b4:	4413      	add	r3, r2
 80024b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b8:	8912      	ldrh	r2, [r2, #8]
 80024ba:	0912      	lsrs	r2, r2, #4
 80024bc:	b292      	uxth	r2, r2
 80024be:	4413      	add	r3, r2
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80024c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d204      	bcs.n	80024d4 <find_volume+0x2c0>
 80024ca:	230d      	movs	r3, #13
 80024cc:	e0eb      	b.n	80026a6 <find_volume+0x492>
 80024ce:	bf00      	nop
 80024d0:	20000114 	.word	0x20000114
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80024d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024dc:	8952      	ldrh	r2, [r2, #10]
 80024de:	fbb3 f3f2 	udiv	r3, r3, r2
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <find_volume+0x2da>
 80024ea:	230d      	movs	r3, #13
 80024ec:	e0db      	b.n	80026a6 <find_volume+0x492>
		fmt = FS_FAT32;
 80024ee:	2303      	movs	r3, #3
 80024f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d802      	bhi.n	8002504 <find_volume+0x2f0>
 80024fe:	2302      	movs	r3, #2
 8002500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800250a:	4293      	cmp	r3, r2
 800250c:	d802      	bhi.n	8002514 <find_volume+0x300>
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800251c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002520:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002522:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002526:	441a      	add	r2, r3
 8002528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800252c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800252e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002530:	441a      	add	r2, r3
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8002536:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800253a:	2b03      	cmp	r3, #3
 800253c:	d11e      	bne.n	800257c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	3334      	adds	r3, #52	@ 0x34
 8002542:	332a      	adds	r3, #42	@ 0x2a
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fc19 	bl	8000d7c <ld_word>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <find_volume+0x340>
 8002550:	230d      	movs	r3, #13
 8002552:	e0a8      	b.n	80026a6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002556:	891b      	ldrh	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <find_volume+0x34c>
 800255c:	230d      	movs	r3, #13
 800255e:	e0a2      	b.n	80026a6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002562:	3334      	adds	r3, #52	@ 0x34
 8002564:	332c      	adds	r3, #44	@ 0x2c
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fc20 	bl	8000dac <ld_dword>
 800256c:	4602      	mov	r2, r0
 800256e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	647b      	str	r3, [r7, #68]	@ 0x44
 800257a:	e01f      	b.n	80025bc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257e:	891b      	ldrh	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <find_volume+0x374>
 8002584:	230d      	movs	r3, #13
 8002586:	e08e      	b.n	80026a6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258e:	441a      	add	r2, r3
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002598:	2b02      	cmp	r3, #2
 800259a:	d103      	bne.n	80025a4 <find_volume+0x390>
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	e00a      	b.n	80025ba <find_volume+0x3a6>
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	085a      	lsrs	r2, r3, #1
 80025b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80025ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80025c6:	0a5b      	lsrs	r3, r3, #9
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d201      	bcs.n	80025d0 <find_volume+0x3bc>
 80025cc:	230d      	movs	r3, #13
 80025ce:	e06a      	b.n	80026a6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80025d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d2:	f04f 32ff 	mov.w	r2, #4294967295
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80025e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80025e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d149      	bne.n	8002682 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	3334      	adds	r3, #52	@ 0x34
 80025f2:	3330      	adds	r3, #48	@ 0x30
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fbc1 	bl	8000d7c <ld_word>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d140      	bne.n	8002682 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002602:	3301      	adds	r3, #1
 8002604:	4619      	mov	r1, r3
 8002606:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002608:	f7fe fe9a 	bl	8001340 <move_window>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d137      	bne.n	8002682 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002614:	2200      	movs	r2, #0
 8002616:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	3334      	adds	r3, #52	@ 0x34
 800261c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fbab 	bl	8000d7c <ld_word>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800262e:	429a      	cmp	r2, r3
 8002630:	d127      	bne.n	8002682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002634:	3334      	adds	r3, #52	@ 0x34
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fbb8 	bl	8000dac <ld_dword>
 800263c:	4603      	mov	r3, r0
 800263e:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <find_volume+0x49c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d11e      	bne.n	8002682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	3334      	adds	r3, #52	@ 0x34
 8002648:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fbad 	bl	8000dac <ld_dword>
 8002652:	4603      	mov	r3, r0
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <find_volume+0x4a0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d113      	bne.n	8002682 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	3334      	adds	r3, #52	@ 0x34
 800265e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fba2 	bl	8000dac <ld_dword>
 8002668:	4602      	mov	r2, r0
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	3334      	adds	r3, #52	@ 0x34
 8002672:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fb98 	bl	8000dac <ld_dword>
 800267c:	4602      	mov	r2, r0
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002680:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002684:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8002688:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <find_volume+0x4a4>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <find_volume+0x4a4>)
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <find_volume+0x4a4>)
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800269e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026a0:	f7fe fde6 	bl	8001270 <clear_lock>
#endif
	return FR_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3758      	adds	r7, #88	@ 0x58
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	41615252 	.word	0x41615252
 80026b4:	61417272 	.word	0x61417272
 80026b8:	20000118 	.word	0x20000118

080026bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80026c6:	2309      	movs	r3, #9
 80026c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02e      	beq.n	800272e <validate+0x72>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02a      	beq.n	800272e <validate+0x72>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d025      	beq.n	800272e <validate+0x72>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	889a      	ldrh	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	88db      	ldrh	r3, [r3, #6]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d11e      	bne.n	800272e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fc41 	bl	8000f7c <lock_fs>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d014      	beq.n	800272a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	4618      	mov	r0, r3
 8002708:	f010 f83a 	bl	8012780 <disk_status>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <validate+0x60>
				res = FR_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e008      	b.n	800272e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc40 	bl	8000fa8 <unlock_fs>
 8002728:	e001      	b.n	800272e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800272a:	230f      	movs	r3, #15
 800272c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <validate+0x7e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e000      	b.n	800273c <validate+0x80>
 800273a:	2300      	movs	r3, #0
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6013      	str	r3, [r2, #0]
	return res;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fcbb 	bl	80020de <get_ldnumber>
 8002768:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b00      	cmp	r3, #0
 800276e:	da01      	bge.n	8002774 <f_mount+0x28>
 8002770:	230b      	movs	r3, #11
 8002772:	e048      	b.n	8002806 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002774:	4a26      	ldr	r2, [pc, #152]	@ (8002810 <f_mount+0xc4>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8002784:	69b8      	ldr	r0, [r7, #24]
 8002786:	f7fe fd73 	bl	8001270 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f010 f90f 	bl	80129b2 <ff_del_syncobj>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <f_mount+0x52>
 800279a:	2302      	movs	r3, #2
 800279c:	e033      	b.n	8002806 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	330c      	adds	r3, #12
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f010 f8d9 	bl	8012972 <ff_cre_syncobj>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <f_mount+0x7e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e01d      	b.n	8002806 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4910      	ldr	r1, [pc, #64]	@ (8002810 <f_mount+0xc4>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <f_mount+0x94>
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d001      	beq.n	80027e4 <f_mount+0x98>
 80027e0:	2300      	movs	r3, #0
 80027e2:	e010      	b.n	8002806 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80027e4:	f107 010c 	add.w	r1, r7, #12
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	2200      	movs	r2, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fd10 	bl	8002214 <find_volume>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	7dfa      	ldrb	r2, [r7, #23]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fbd2 	bl	8000fa8 <unlock_fs>
 8002804:	7dfb      	ldrb	r3, [r7, #23]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000114 	.word	0x20000114

08002814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b09a      	sub	sp, #104	@ 0x68
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	4613      	mov	r3, r2
 8002820:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <f_open+0x18>
 8002828:	2309      	movs	r3, #9
 800282a:	e1b0      	b.n	8002b8e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002832:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	f107 0114 	add.w	r1, r7, #20
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fce8 	bl	8002214 <find_volume>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800284a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 818d 	bne.w	8002b6e <f_open+0x35a>
		dj.obj.fs = fs;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	f107 0318 	add.w	r3, r7, #24
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fbcb 	bl	8001ffc <follow_path>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800286c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002870:	2b00      	cmp	r3, #0
 8002872:	d118      	bne.n	80028a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002874:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002878:	b25b      	sxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	da03      	bge.n	8002886 <f_open+0x72>
				res = FR_INVALID_NAME;
 800287e:	2306      	movs	r3, #6
 8002880:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002884:	e00f      	b.n	80028a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf8c      	ite	hi
 800288c:	2301      	movhi	r3, #1
 800288e:	2300      	movls	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fba0 	bl	8000fe0 <chk_lock>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 031c 	and.w	r3, r3, #28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d07f      	beq.n	80029b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80028b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d017      	beq.n	80028e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80028b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d10e      	bne.n	80028de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80028c0:	f7fe fbea 	bl	8001098 <enq_lock>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <f_open+0xc4>
 80028ca:	f107 0318 	add.w	r3, r7, #24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff face 	bl	8001e70 <dir_register>
 80028d4:	4603      	mov	r3, r0
 80028d6:	e000      	b.n	80028da <f_open+0xc6>
 80028d8:	2312      	movs	r3, #18
 80028da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	e010      	b.n	800290a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80028e8:	7fbb      	ldrb	r3, [r7, #30]
 80028ea:	f003 0311 	and.w	r3, r3, #17
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <f_open+0xe6>
					res = FR_DENIED;
 80028f2:	2307      	movs	r3, #7
 80028f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80028f8:	e007      	b.n	800290a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <f_open+0xf6>
 8002904:	2308      	movs	r3, #8
 8002906:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800290a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800290e:	2b00      	cmp	r3, #0
 8002910:	d168      	bne.n	80029e4 <f_open+0x1d0>
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d063      	beq.n	80029e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800291c:	f00f fcce 	bl	80122bc <get_fattime>
 8002920:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002924:	330e      	adds	r3, #14
 8002926:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fa7d 	bl	8000e28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	3316      	adds	r3, #22
 8002932:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fa77 	bl	8000e28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	330b      	adds	r3, #11
 800293e:	2220      	movs	r2, #32
 8002940:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f9fd 	bl	8001d48 <ld_clust>
 800294e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fa15 	bl	8001d86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295e:	331c      	adds	r3, #28
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fa60 	bl	8000e28 <st_dword>
					fs->wflag = 1;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2201      	movs	r2, #1
 800296c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800296e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d037      	beq.n	80029e4 <f_open+0x1d0>
						dw = fs->winsect;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800297a:	f107 0318 	add.w	r3, r7, #24
 800297e:	2200      	movs	r2, #0
 8002980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe ff28 	bl	80017d8 <remove_chain>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800298e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002992:	2b00      	cmp	r3, #0
 8002994:	d126      	bne.n	80029e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fcd0 	bl	8001340 <move_window>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029aa:	3a01      	subs	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e019      	b.n	80029e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80029b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d115      	bne.n	80029e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80029b8:	7fbb      	ldrb	r3, [r7, #30]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80029c2:	2304      	movs	r3, #4
 80029c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80029c8:	e00c      	b.n	80029e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <f_open+0x1d0>
 80029d4:	7fbb      	ldrb	r3, [r7, #30]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <f_open+0x1d0>
						res = FR_DENIED;
 80029de:	2307      	movs	r3, #7
 80029e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80029e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d126      	bne.n	8002a3a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8002a06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	bf8c      	ite	hi
 8002a12:	2301      	movhi	r3, #1
 8002a14:	2300      	movls	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f107 0318 	add.w	r3, r7, #24
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fb5b 	bl	80010dc <inc_lock>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <f_open+0x226>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8002a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8095 	bne.w	8002b6e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f97c 	bl	8001d48 <ld_clust>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a58:	331c      	adds	r3, #28
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f9a6 	bl	8000dac <ld_dword>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	88da      	ldrh	r2, [r3, #6]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	79fa      	ldrb	r2, [r7, #7]
 8002a7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3330      	adds	r3, #48	@ 0x30
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fa10 	bl	8000ec2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d060      	beq.n	8002b6e <f_open+0x35a>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05c      	beq.n	8002b6e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	895b      	ldrh	r3, [r3, #10]
 8002ac0:	025b      	lsls	r3, r3, #9
 8002ac2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ad0:	e016      	b.n	8002b00 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fced 	bl	80014b6 <get_fat>
 8002adc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8002ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d802      	bhi.n	8002aea <f_open+0x2d6>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8002aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d102      	bne.n	8002af8 <f_open+0x2e4>
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002af8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <f_open+0x2fc>
 8002b08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8e0      	bhi.n	8002ad2 <f_open+0x2be>
				}
				fp->clust = clst;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002b16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d127      	bne.n	8002b6e <f_open+0x35a>
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d022      	beq.n	8002b6e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fca3 	bl	8001478 <clust2sect>
 8002b32:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <f_open+0x32e>
						res = FR_INT_ERR;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b40:	e015      	b.n	8002b6e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b44:	0a5a      	lsrs	r2, r3, #9
 8002b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b48:	441a      	add	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	7858      	ldrb	r0, [r3, #1]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f00f fe4f 	bl	8012800 <disk_read>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <f_open+0x35a>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <f_open+0x368>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fa0f 	bl	8000fa8 <unlock_fs>
 8002b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3768      	adds	r7, #104	@ 0x68
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b08e      	sub	sp, #56	@ 0x38
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f107 0214 	add.w	r2, r7, #20
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fd80 	bl	80026bc <validate>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <f_read+0x44>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	7d5b      	ldrb	r3, [r3, #21]
 8002bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <f_read+0x58>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f9e0 	bl	8000fa8 <unlock_fs>
 8002be8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bec:	e13d      	b.n	8002e6a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	7d1b      	ldrb	r3, [r3, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <f_read+0x72>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f9d2 	bl	8000fa8 <unlock_fs>
 8002c04:	2307      	movs	r3, #7
 8002c06:	e130      	b.n	8002e6a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f240 811c 	bls.w	8002e56 <f_read+0x2c0>
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8002c22:	e118      	b.n	8002e56 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 80e4 	bne.w	8002dfa <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	8952      	ldrh	r2, [r2, #10]
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d139      	bne.n	8002cbc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c56:	e013      	b.n	8002c80 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4619      	mov	r1, r3
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7fe feb3 	bl	80019d2 <clmt_clust>
 8002c6c:	6338      	str	r0, [r7, #48]	@ 0x30
 8002c6e:	e007      	b.n	8002c80 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fe fc1c 	bl	80014b6 <get_fat>
 8002c7e:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d809      	bhi.n	8002c9a <f_read+0x104>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	755a      	strb	r2, [r3, #21]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f989 	bl	8000fa8 <unlock_fs>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e0e7      	b.n	8002e6a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d109      	bne.n	8002cb6 <f_read+0x120>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	755a      	strb	r2, [r3, #21]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f97b 	bl	8000fa8 <unlock_fs>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0d9      	b.n	8002e6a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cba:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7fe fbd7 	bl	8001478 <clust2sect>
 8002cca:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <f_read+0x150>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	755a      	strb	r2, [r3, #21]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f963 	bl	8000fa8 <unlock_fs>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e0c1      	b.n	8002e6a <f_read+0x2d4>
			sect += csect;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0a5b      	lsrs	r3, r3, #9
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d03e      	beq.n	8002d78 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfe:	4413      	add	r3, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	8952      	ldrh	r2, [r2, #10]
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d905      	bls.n	8002d14 <f_read+0x17e>
					cc = fs->csize - csect;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	895b      	ldrh	r3, [r3, #10]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	7858      	ldrb	r0, [r3, #1]
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d1e:	f00f fd6f 	bl	8012800 <disk_read>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <f_read+0x1a6>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	755a      	strb	r2, [r3, #21]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f938 	bl	8000fa8 <unlock_fs>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e096      	b.n	8002e6a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	7d1b      	ldrb	r3, [r3, #20]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da14      	bge.n	8002d70 <f_read+0x1da>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d90d      	bls.n	8002d70 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d60:	18d0      	adds	r0, r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3330      	adds	r3, #48	@ 0x30
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fe f888 	bl	8000e80 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8002d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8002d76:	e05a      	b.n	8002e2e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d038      	beq.n	8002df4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	7d1b      	ldrb	r3, [r3, #20]
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	da1d      	bge.n	8002dc8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	7858      	ldrb	r0, [r3, #1]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f00f fd50 	bl	8012840 <disk_write>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <f_read+0x224>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	755a      	strb	r2, [r3, #21]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe f8f9 	bl	8000fa8 <unlock_fs>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e057      	b.n	8002e6a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	7d1b      	ldrb	r3, [r3, #20]
 8002dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	7858      	ldrb	r0, [r3, #1]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f00f fd13 	bl	8012800 <disk_read>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <f_read+0x25e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	755a      	strb	r2, [r3, #21]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f8dc 	bl	8000fa8 <unlock_fs>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e03a      	b.n	8002e6a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8002e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d901      	bls.n	8002e14 <f_read+0x27e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	4413      	add	r3, r2
 8002e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e26:	4619      	mov	r1, r3
 8002e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e2a:	f7fe f829 	bl	8000e80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	4413      	add	r3, r2
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	619a      	str	r2, [r3, #24]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	441a      	add	r2, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f aee3 	bne.w	8002c24 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe f8a0 	bl	8000fa8 <unlock_fs>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3738      	adds	r7, #56	@ 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f107 0208 	add.w	r2, r7, #8
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fc1a 	bl	80026bc <validate>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d16d      	bne.n	8002f6e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7d1b      	ldrb	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d067      	beq.n	8002f6e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7d1b      	ldrb	r3, [r3, #20]
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da1a      	bge.n	8002ede <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	7858      	ldrb	r0, [r3, #1]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f00f fcc2 	bl	8012840 <disk_write>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <f_sync+0x5e>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f86e 	bl	8000fa8 <unlock_fs>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e055      	b.n	8002f7c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7d1b      	ldrb	r3, [r3, #20]
 8002ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8002ede:	f00f f9ed 	bl	80122bc <get_fattime>
 8002ee2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7fe fa27 	bl	8001340 <move_window>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d138      	bne.n	8002f6e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	330b      	adds	r3, #11
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	330b      	adds	r3, #11
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	f7fe ff31 	bl	8001d86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f103 021c 	add.w	r2, r3, #28
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7fd ff79 	bl	8000e28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3316      	adds	r3, #22
 8002f3a:	6939      	ldr	r1, [r7, #16]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd ff73 	bl	8000e28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3312      	adds	r3, #18
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd ff52 	bl	8000df2 <st_word>
					fs->wflag = 1;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2201      	movs	r2, #1
 8002f52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fa20 	bl	800139c <sync_fs>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7d1b      	ldrb	r3, [r3, #20]
 8002f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	7dfa      	ldrb	r2, [r7, #23]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe f817 	bl	8000fa8 <unlock_fs>
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff70 	bl	8002e72 <f_sync>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11d      	bne.n	8002fd8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fb89 	bl	80026bc <validate>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f91d 	bl	80011f8 <dec_lock>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd ffe8 	bl	8000fa8 <unlock_fs>
#endif
		}
	}
	return res;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b090      	sub	sp, #64	@ 0x40
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f107 0208 	add.w	r2, r7, #8
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fb61 	bl	80026bc <validate>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003000:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <f_lseek+0x2e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7d5b      	ldrb	r3, [r3, #21]
 800300c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003010:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <f_lseek+0x4a>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd ffc1 	bl	8000fa8 <unlock_fs>
 8003026:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800302a:	e229      	b.n	8003480 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80ea 	beq.w	800320a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d164      	bne.n	8003108 <f_lseek+0x126>
			tbl = fp->cltbl;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	627a      	str	r2, [r7, #36]	@ 0x24
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	2302      	movs	r3, #2
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	2300      	movs	r3, #0
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	3302      	adds	r3, #2
 800306a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003072:	3301      	adds	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fa1b 	bl	80014b6 <get_fat>
 8003080:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d809      	bhi.n	800309c <f_lseek+0xba>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	755a      	strb	r2, [r3, #21]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd ff88 	bl	8000fa8 <unlock_fs>
 8003098:	2302      	movs	r3, #2
 800309a:	e1f1      	b.n	8003480 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d109      	bne.n	80030b8 <f_lseek+0xd6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	755a      	strb	r2, [r3, #21]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd ff7a 	bl	8000fa8 <unlock_fs>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e1e3      	b.n	8003480 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030be:	429a      	cmp	r2, r3
 80030c0:	d0d4      	beq.n	800306c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80030c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d809      	bhi.n	80030de <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	1d1a      	adds	r2, r3, #4
 80030ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80030d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	1d1a      	adds	r2, r3, #4
 80030d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3ba      	bcc.n	800305e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80030f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d803      	bhi.n	8003100 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e1b6      	b.n	800346e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003100:	2311      	movs	r3, #17
 8003102:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003106:	e1b2      	b.n	800346e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d902      	bls.n	8003118 <f_lseek+0x136>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 81a4 	beq.w	800346e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fe fc50 	bl	80019d2 <clmt_clust>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7fe f999 	bl	8001478 <clust2sect>
 8003146:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <f_lseek+0x180>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	755a      	strb	r2, [r3, #21]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd ff25 	bl	8000fa8 <unlock_fs>
 800315e:	2302      	movs	r3, #2
 8003160:	e18e      	b.n	8003480 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	0a5b      	lsrs	r3, r3, #9
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	8952      	ldrh	r2, [r2, #10]
 800316c:	3a01      	subs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8175 	beq.w	800346e <f_lseek+0x48c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	429a      	cmp	r2, r3
 800318c:	f000 816f 	beq.w	800346e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7d1b      	ldrb	r3, [r3, #20]
 8003194:	b25b      	sxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	da1d      	bge.n	80031d6 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	7858      	ldrb	r0, [r3, #1]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	2301      	movs	r3, #1
 80031aa:	f00f fb49 	bl	8012840 <disk_write>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <f_lseek+0x1e6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	755a      	strb	r2, [r3, #21]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fef2 	bl	8000fa8 <unlock_fs>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e15b      	b.n	8003480 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7d1b      	ldrb	r3, [r3, #20]
 80031cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	7858      	ldrb	r0, [r3, #1]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80031e0:	2301      	movs	r3, #1
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	f00f fb0c 	bl	8012800 <disk_read>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <f_lseek+0x220>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	755a      	strb	r2, [r3, #21]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fed5 	bl	8000fa8 <unlock_fs>
 80031fe:	2301      	movs	r3, #1
 8003200:	e13e      	b.n	8003480 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	621a      	str	r2, [r3, #32]
 8003208:	e131      	b.n	800346e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <f_lseek+0x244>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7d1b      	ldrb	r3, [r3, #20]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003234:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80c0 	beq.w	80033be <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	895b      	ldrh	r3, [r3, #10]
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	fbb2 f2f3 	udiv	r2, r2, r3
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	1e59      	subs	r1, r3, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8003260:	429a      	cmp	r2, r3
 8003262:	d30f      	bcc.n	8003284 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	425b      	negs	r3, r3
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003282:	e02c      	b.n	80032de <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d123      	bne.n	80032d8 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fb04 	bl	80018a2 <create_chain>
 800329a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d109      	bne.n	80032b6 <f_lseek+0x2d4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	755a      	strb	r2, [r3, #21]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe7b 	bl	8000fa8 <unlock_fs>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e0e4      	b.n	8003480 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d109      	bne.n	80032d2 <f_lseek+0x2f0>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	755a      	strb	r2, [r3, #21]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fe6d 	bl	8000fa8 <unlock_fs>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0d6      	b.n	8003480 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032d6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032dc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06c      	beq.n	80033be <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80032e4:	e044      	b.n	8003370 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7d1b      	ldrb	r3, [r3, #20]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fac9 	bl	80018a2 <create_chain>
 8003310:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003314:	2b00      	cmp	r3, #0
 8003316:	d108      	bne.n	800332a <f_lseek+0x348>
							ofs = 0; break;
 8003318:	2300      	movs	r3, #0
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	e02c      	b.n	8003378 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f8c7 	bl	80014b6 <get_fat>
 8003328:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800332a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d109      	bne.n	8003346 <f_lseek+0x364>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	755a      	strb	r2, [r3, #21]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd fe33 	bl	8000fa8 <unlock_fs>
 8003342:	2301      	movs	r3, #1
 8003344:	e09c      	b.n	8003480 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	2b01      	cmp	r3, #1
 800334a:	d904      	bls.n	8003356 <f_lseek+0x374>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003352:	429a      	cmp	r2, r3
 8003354:	d309      	bcc.n	800336a <f_lseek+0x388>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	755a      	strb	r2, [r3, #21]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fe21 	bl	8000fa8 <unlock_fs>
 8003366:	2302      	movs	r3, #2
 8003368:	e08a      	b.n	8003480 <f_lseek+0x49e>
					fp->clust = clst;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800336e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	429a      	cmp	r2, r3
 8003376:	d8b6      	bhi.n	80032e6 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	441a      	add	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe f870 	bl	8001478 <clust2sect>
 8003398:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <f_lseek+0x3d2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	755a      	strb	r2, [r3, #21]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fdfc 	bl	8000fa8 <unlock_fs>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e065      	b.n	8003480 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033ba:	4413      	add	r3, r2
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90a      	bls.n	80033e0 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7d1b      	ldrb	r3, [r3, #20]
 80033d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d040      	beq.n	800346e <f_lseek+0x48c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d03b      	beq.n	800346e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7d1b      	ldrb	r3, [r3, #20]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da1d      	bge.n	800343c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	7858      	ldrb	r0, [r3, #1]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	2301      	movs	r3, #1
 8003410:	f00f fa16 	bl	8012840 <disk_write>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <f_lseek+0x44c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	755a      	strb	r2, [r3, #21]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd fdbf 	bl	8000fa8 <unlock_fs>
 800342a:	2301      	movs	r3, #1
 800342c:	e028      	b.n	8003480 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7d1b      	ldrb	r3, [r3, #20]
 8003432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003436:	b2da      	uxtb	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	7858      	ldrb	r0, [r3, #1]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003446:	2301      	movs	r3, #1
 8003448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800344a:	f00f f9d9 	bl	8012800 <disk_read>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <f_lseek+0x486>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	755a      	strb	r2, [r3, #21]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fda2 	bl	8000fa8 <unlock_fs>
 8003464:	2301      	movs	r3, #1
 8003466:	e00b      	b.n	8003480 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800346c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fd96 	bl	8000fa8 <unlock_fs>
 800347c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8003480:	4618      	mov	r0, r3
 8003482:	3740      	adds	r7, #64	@ 0x40
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a07      	ldr	r2, [pc, #28]	@ (80034e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80034cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <vApplicationGetIdleTaskMemory+0x30>)
 80034d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2280      	movs	r2, #128	@ 0x80
 80034d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000013c 	.word	0x2000013c
 80034ec:	200001dc 	.word	0x200001dc

080034f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80034fa:	20c8      	movs	r0, #200	@ 0xc8
 80034fc:	f002 ff10 	bl	8006320 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003500:	f000 fa7a 	bl	80039f8 <ft5336_I2C_InitializeIfRequired>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003534:	2300      	movs	r3, #0
 8003536:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003538:	f000 fa5e 	bl	80039f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e010      	b.n	8003564 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	21a8      	movs	r1, #168	@ 0xa8
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fecb 	bl	80062e4 <TS_IO_Read>
 800354e:	4603      	mov	r3, r0
 8003550:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b51      	cmp	r3, #81	@ 0x51
 8003558:	d101      	bne.n	800355e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	3301      	adds	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d802      	bhi.n	8003570 <ft5336_ReadID+0x4e>
 800356a:	7bbb      	ldrb	r3, [r7, #14]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0e8      	beq.n	8003542 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003570:	7b7b      	ldrb	r3, [r7, #13]
 8003572:	b2db      	uxtb	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fa45 	bl	8003a18 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f933 	bl	80037fc <ft5336_TS_DisableIT>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 fe95 	bl	80062e4 <TS_IO_Read>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d901      	bls.n	80035d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <ft5336_TS_DetectTouch+0x50>)
 80035dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <ft5336_TS_DetectTouch+0x50>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	b2db      	uxtb	r3, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200003dc 	.word	0x200003dc

080035f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003616:	4b6d      	ldr	r3, [pc, #436]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 8003618:	789a      	ldrb	r2, [r3, #2]
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	429a      	cmp	r2, r3
 8003620:	f080 80cf 	bcs.w	80037c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8003624:	4b69      	ldr	r3, [pc, #420]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 8003626:	789b      	ldrb	r3, [r3, #2]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d871      	bhi.n	8003710 <ft5336_TS_GetXY+0x11c>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <ft5336_TS_GetXY+0x40>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	0800365d 	.word	0x0800365d
 8003638:	0800366f 	.word	0x0800366f
 800363c:	08003681 	.word	0x08003681
 8003640:	08003693 	.word	0x08003693
 8003644:	080036a5 	.word	0x080036a5
 8003648:	080036b7 	.word	0x080036b7
 800364c:	080036c9 	.word	0x080036c9
 8003650:	080036db 	.word	0x080036db
 8003654:	080036ed 	.word	0x080036ed
 8003658:	080036ff 	.word	0x080036ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800365c:	2304      	movs	r3, #4
 800365e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8003660:	2303      	movs	r3, #3
 8003662:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8003664:	2306      	movs	r3, #6
 8003666:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8003668:	2305      	movs	r3, #5
 800366a:	753b      	strb	r3, [r7, #20]
      break;
 800366c:	e051      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800366e:	230a      	movs	r3, #10
 8003670:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8003672:	2309      	movs	r3, #9
 8003674:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8003676:	230c      	movs	r3, #12
 8003678:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800367a:	230b      	movs	r3, #11
 800367c:	753b      	strb	r3, [r7, #20]
      break;
 800367e:	e048      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003680:	2310      	movs	r3, #16
 8003682:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8003684:	230f      	movs	r3, #15
 8003686:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003688:	2312      	movs	r3, #18
 800368a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800368c:	2311      	movs	r3, #17
 800368e:	753b      	strb	r3, [r7, #20]
      break;
 8003690:	e03f      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8003692:	2316      	movs	r3, #22
 8003694:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8003696:	2315      	movs	r3, #21
 8003698:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800369a:	2318      	movs	r3, #24
 800369c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800369e:	2317      	movs	r3, #23
 80036a0:	753b      	strb	r3, [r7, #20]
      break;
 80036a2:	e036      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80036a4:	231c      	movs	r3, #28
 80036a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80036a8:	231b      	movs	r3, #27
 80036aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80036ac:	231e      	movs	r3, #30
 80036ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80036b0:	231d      	movs	r3, #29
 80036b2:	753b      	strb	r3, [r7, #20]
      break;
 80036b4:	e02d      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80036b6:	2322      	movs	r3, #34	@ 0x22
 80036b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80036ba:	2321      	movs	r3, #33	@ 0x21
 80036bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80036be:	2324      	movs	r3, #36	@ 0x24
 80036c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80036c2:	2323      	movs	r3, #35	@ 0x23
 80036c4:	753b      	strb	r3, [r7, #20]
      break;
 80036c6:	e024      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80036c8:	2328      	movs	r3, #40	@ 0x28
 80036ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80036cc:	2327      	movs	r3, #39	@ 0x27
 80036ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80036d0:	232a      	movs	r3, #42	@ 0x2a
 80036d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80036d4:	2329      	movs	r3, #41	@ 0x29
 80036d6:	753b      	strb	r3, [r7, #20]
      break;
 80036d8:	e01b      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80036da:	232e      	movs	r3, #46	@ 0x2e
 80036dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80036de:	232d      	movs	r3, #45	@ 0x2d
 80036e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80036e2:	2330      	movs	r3, #48	@ 0x30
 80036e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80036e6:	232f      	movs	r3, #47	@ 0x2f
 80036e8:	753b      	strb	r3, [r7, #20]
      break;
 80036ea:	e012      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80036ec:	2334      	movs	r3, #52	@ 0x34
 80036ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80036f0:	2333      	movs	r3, #51	@ 0x33
 80036f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80036f4:	2336      	movs	r3, #54	@ 0x36
 80036f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80036f8:	2335      	movs	r3, #53	@ 0x35
 80036fa:	753b      	strb	r3, [r7, #20]
      break;
 80036fc:	e009      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80036fe:	233a      	movs	r3, #58	@ 0x3a
 8003700:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8003702:	2339      	movs	r3, #57	@ 0x39
 8003704:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003706:	233c      	movs	r3, #60	@ 0x3c
 8003708:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800370a:	233b      	movs	r3, #59	@ 0x3b
 800370c:	753b      	strb	r3, [r7, #20]
      break;
 800370e:	e000      	b.n	8003712 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003710:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	7dfa      	ldrb	r2, [r7, #23]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f002 fde2 	bl	80062e4 <TS_IO_Read>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	4b29      	ldr	r3, [pc, #164]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800372c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800372e:	89fb      	ldrh	r3, [r7, #14]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	7dba      	ldrb	r2, [r7, #22]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fdd4 	bl	80062e4 <TS_IO_Read>
 800373c:	4603      	mov	r3, r0
 800373e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800374a:	b21a      	sxth	r2, r3
 800374c:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b21b      	sxth	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b21b      	sxth	r3, r3
 8003756:	b29a      	uxth	r2, r3
 8003758:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800375a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800375c:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	7d7a      	ldrb	r2, [r7, #21]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fdb9 	bl	80062e4 <TS_IO_Read>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 800377e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	7d3a      	ldrb	r2, [r7, #20]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f002 fdab 	bl	80062e4 <TS_IO_Read>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800379c:	b21a      	sxth	r2, r3
 800379e:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b21b      	sxth	r3, r3
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <ft5336_TS_GetXY+0x1dc>)
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 80037b8:	789b      	ldrb	r3, [r3, #2]
 80037ba:	3301      	adds	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <ft5336_TS_GetXY+0x1d8>)
 80037c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200003dc 	.word	0x200003dc
 80037d0:	200003e0 	.word	0x200003e0

080037d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	21a4      	movs	r1, #164	@ 0xa4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fd5e 	bl	80062b0 <TS_IO_Write>
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	21a4      	movs	r1, #164	@ 0xa4
 8003816:	4618      	mov	r0, r3
 8003818:	f002 fd4a 	bl	80062b0 <TS_IO_Write>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	6039      	str	r1, [r7, #0]
 800385c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fd3b 	bl	80062e4 <TS_IO_Read>
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80038a4:	4b4d      	ldr	r3, [pc, #308]	@ (80039dc <ft5336_TS_GetTouchInfo+0x158>)
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	f080 8090 	bcs.w	80039d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	d85d      	bhi.n	8003974 <ft5336_TS_GetTouchInfo+0xf0>
 80038b8:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038f7 	.word	0x080038f7
 80038c8:	08003905 	.word	0x08003905
 80038cc:	08003913 	.word	0x08003913
 80038d0:	08003921 	.word	0x08003921
 80038d4:	0800392f 	.word	0x0800392f
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	0800394b 	.word	0x0800394b
 80038e0:	08003959 	.word	0x08003959
 80038e4:	08003967 	.word	0x08003967
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80038e8:	2303      	movs	r3, #3
 80038ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80038ec:	2307      	movs	r3, #7
 80038ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80038f0:	2308      	movs	r3, #8
 80038f2:	757b      	strb	r3, [r7, #21]
      break;
 80038f4:	e03f      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80038f6:	2309      	movs	r3, #9
 80038f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80038fa:	230d      	movs	r3, #13
 80038fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80038fe:	230e      	movs	r3, #14
 8003900:	757b      	strb	r3, [r7, #21]
      break;
 8003902:	e038      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003904:	230f      	movs	r3, #15
 8003906:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003908:	2313      	movs	r3, #19
 800390a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800390c:	2314      	movs	r3, #20
 800390e:	757b      	strb	r3, [r7, #21]
      break;
 8003910:	e031      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8003912:	2315      	movs	r3, #21
 8003914:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8003916:	2319      	movs	r3, #25
 8003918:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800391a:	231a      	movs	r3, #26
 800391c:	757b      	strb	r3, [r7, #21]
      break;
 800391e:	e02a      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8003920:	231b      	movs	r3, #27
 8003922:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8003924:	231f      	movs	r3, #31
 8003926:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8003928:	2320      	movs	r3, #32
 800392a:	757b      	strb	r3, [r7, #21]
      break;
 800392c:	e023      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800392e:	2321      	movs	r3, #33	@ 0x21
 8003930:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8003932:	2325      	movs	r3, #37	@ 0x25
 8003934:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8003936:	2326      	movs	r3, #38	@ 0x26
 8003938:	757b      	strb	r3, [r7, #21]
      break;
 800393a:	e01c      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800393c:	2327      	movs	r3, #39	@ 0x27
 800393e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8003940:	232b      	movs	r3, #43	@ 0x2b
 8003942:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8003944:	232c      	movs	r3, #44	@ 0x2c
 8003946:	757b      	strb	r3, [r7, #21]
      break;
 8003948:	e015      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800394a:	232d      	movs	r3, #45	@ 0x2d
 800394c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800394e:	2331      	movs	r3, #49	@ 0x31
 8003950:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8003952:	2332      	movs	r3, #50	@ 0x32
 8003954:	757b      	strb	r3, [r7, #21]
      break;
 8003956:	e00e      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8003958:	2333      	movs	r3, #51	@ 0x33
 800395a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800395c:	2337      	movs	r3, #55	@ 0x37
 800395e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8003960:	2338      	movs	r3, #56	@ 0x38
 8003962:	757b      	strb	r3, [r7, #21]
      break;
 8003964:	e007      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8003966:	2339      	movs	r3, #57	@ 0x39
 8003968:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800396a:	233d      	movs	r3, #61	@ 0x3d
 800396c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800396e:	233e      	movs	r3, #62	@ 0x3e
 8003970:	757b      	strb	r3, [r7, #21]
      break;
 8003972:	e000      	b.n	8003976 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003974:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	7dfa      	ldrb	r2, [r7, #23]
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f002 fcb0 	bl	80062e4 <TS_IO_Read>
 8003984:	4603      	mov	r3, r0
 8003986:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8003988:	7d3b      	ldrb	r3, [r7, #20]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	119b      	asrs	r3, r3, #6
 800398e:	f003 0203 	and.w	r2, r3, #3
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	7dba      	ldrb	r2, [r7, #22]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 fca0 	bl	80062e4 <TS_IO_Read>
 80039a4:	4603      	mov	r3, r0
 80039a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80039a8:	7d3b      	ldrb	r3, [r7, #20]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80039b2:	89fb      	ldrh	r3, [r7, #14]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	7d7a      	ldrb	r2, [r7, #21]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 fc92 	bl	80062e4 <TS_IO_Read>
 80039c0:	4603      	mov	r3, r0
 80039c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80039c4:	7d3b      	ldrb	r3, [r7, #20]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	111b      	asrs	r3, r3, #4
 80039ca:	f003 0204 	and.w	r2, r3, #4
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200003dc 	.word	0x200003dc

080039e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80039e4:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200003dc 	.word	0x200003dc

080039f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80039fc:	f7ff fff0 	bl	80039e0 <ft5336_Get_I2C_InitializedStatus>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003a06:	f002 fc49 	bl	800629c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003a0a:	4b02      	ldr	r3, [pc, #8]	@ (8003a14 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
  }
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200003dc 	.word	0x200003dc

08003a18 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a38:	f3bf 8f4f 	dsb	sy
}
 8003a3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a3e:	f3bf 8f6f 	isb	sy
}
 8003a42:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003a4c:	f3bf 8f4f 	dsb	sy
}
 8003a50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a52:	f3bf 8f6f 	isb	sy
}
 8003a56:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	@ (8003a7c <SCB_EnableICache+0x48>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a64:	f3bf 8f4f 	dsb	sy
}
 8003a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a6a:	f3bf 8f6f 	isb	sy
}
 8003a6e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003a86:	4b1f      	ldr	r3, [pc, #124]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a8e:	f3bf 8f4f 	dsb	sy
}
 8003a92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003aa4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003ab8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003abe:	4911      	ldr	r1, [pc, #68]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	60ba      	str	r2, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ef      	bne.n	8003ab0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e5a      	subs	r2, r3, #1
 8003ad4:	60fa      	str	r2, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ada:	f3bf 8f4f 	dsb	sy
}
 8003ade:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <SCB_EnableDCache+0x84>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aec:	f3bf 8f4f 	dsb	sy
}
 8003af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003af2:	f3bf 8f6f 	isb	sy
}
 8003af6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <whatBodyPart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8003b08:	b490      	push	{r4, r7}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4623      	mov	r3, r4
 8003b18:	71fb      	strb	r3, [r7, #7]
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71bb      	strb	r3, [r7, #6]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	717b      	strb	r3, [r7, #5]
 8003b22:	4613      	mov	r3, r2
 8003b24:	713b      	strb	r3, [r7, #4]
	/*
	  . F .
	  . X .
	  . B .
	*/
	if (frontX == backX)
 8003b26:	79fa      	ldrb	r2, [r7, #7]
 8003b28:	797b      	ldrb	r3, [r7, #5]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d101      	bne.n	8003b32 <whatBodyPart+0x2a>
		return BottomTop;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e046      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .
	  F X B
	  . . .
	*/
	if (frontY == backY)
 8003b32:	79ba      	ldrb	r2, [r7, #6]
 8003b34:	793b      	ldrb	r3, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d101      	bne.n	8003b3e <whatBodyPart+0x36>
		return LeftRight;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e040      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . B .       . . .
	  F X .       . X B
	  . . .       . F .
	*/
	if (frontX < backX && frontY > backY)
 8003b3e:	79fa      	ldrb	r2, [r7, #7]
 8003b40:	797b      	ldrb	r3, [r7, #5]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d20b      	bcs.n	8003b5e <whatBodyPart+0x56>
 8003b46:	79ba      	ldrb	r2, [r7, #6]
 8003b48:	793b      	ldrb	r3, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d907      	bls.n	8003b5e <whatBodyPart+0x56>
	{
		if (missingX == frontX)
 8003b4e:	7c3a      	ldrb	r2, [r7, #16]
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d101      	bne.n	8003b5a <whatBodyPart+0x52>
			return BottomRight;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e032      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return LeftTop;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e030      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .       . F .
	  F X .       . X B
	  . B .       . . .
	*/
	if (frontX < backX && frontY < backY)
 8003b5e:	79fa      	ldrb	r2, [r7, #7]
 8003b60:	797b      	ldrb	r3, [r7, #5]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d20b      	bcs.n	8003b7e <whatBodyPart+0x76>
 8003b66:	79ba      	ldrb	r2, [r7, #6]
 8003b68:	793b      	ldrb	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d207      	bcs.n	8003b7e <whatBodyPart+0x76>
	{
		if (missingX == frontX)
 8003b6e:	7c3a      	ldrb	r2, [r7, #16]
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d101      	bne.n	8003b7a <whatBodyPart+0x72>
			return RightTop;
 8003b76:	2305      	movs	r3, #5
 8003b78:	e022      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return BottomLeft;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e020      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . . .       . F .
	  . X F       B X .
	  . B .       . . .
	*/
	if (frontX > backX && frontY < backY)
 8003b7e:	79fa      	ldrb	r2, [r7, #7]
 8003b80:	797b      	ldrb	r3, [r7, #5]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90b      	bls.n	8003b9e <whatBodyPart+0x96>
 8003b86:	79ba      	ldrb	r2, [r7, #6]
 8003b88:	793b      	ldrb	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d207      	bcs.n	8003b9e <whatBodyPart+0x96>
	{
		if (missingX == frontX)
 8003b8e:	7c3a      	ldrb	r2, [r7, #16]
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d101      	bne.n	8003b9a <whatBodyPart+0x92>
			return LeftTop;
 8003b96:	2304      	movs	r3, #4
 8003b98:	e012      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return BottomRight;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e010      	b.n	8003bc0 <whatBodyPart+0xb8>
	/*
	  . B .       . . .
	  . X F       B X .
	  . . .       . F .
	*/
	if (frontX > backX && frontY > backY)
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	797b      	ldrb	r3, [r7, #5]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90b      	bls.n	8003bbe <whatBodyPart+0xb6>
 8003ba6:	79ba      	ldrb	r2, [r7, #6]
 8003ba8:	793b      	ldrb	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d907      	bls.n	8003bbe <whatBodyPart+0xb6>
	{
		if (missingX == frontX)
 8003bae:	7c3a      	ldrb	r2, [r7, #16]
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d101      	bne.n	8003bba <whatBodyPart+0xb2>
			return BottomLeft;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e002      	b.n	8003bc0 <whatBodyPart+0xb8>
		else
			return RightTop;
 8003bba:	2305      	movs	r3, #5
 8003bbc:	e000      	b.n	8003bc0 <whatBodyPart+0xb8>
	}

	return BottomTop; // should never happen
 8003bbe:	2302      	movs	r3, #2
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc90      	pop	{r4, r7}
 8003bc8:	4770      	bx	lr
	...

08003bcc <isSnakePosition>:

uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71bb      	strb	r3, [r7, #6]
	if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <isSnakePosition+0x88>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	79fa      	ldrb	r2, [r7, #7]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d106      	bne.n	8003bf4 <isSnakePosition+0x28>
 8003be6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <isSnakePosition+0x88>)
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	79ba      	ldrb	r2, [r7, #6]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d101      	bne.n	8003bf4 <isSnakePosition+0x28>
		return 1;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e029      	b.n	8003c48 <isSnakePosition+0x7c>

	for (int i = 0; i < snakeSize; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e013      	b.n	8003c22 <isSnakePosition+0x56>
	{
		if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8003bfa:	4a17      	ldr	r2, [pc, #92]	@ (8003c58 <isSnakePosition+0x8c>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003c02:	79fa      	ldrb	r2, [r7, #7]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d109      	bne.n	8003c1c <isSnakePosition+0x50>
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <isSnakePosition+0x8c>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	79ba      	ldrb	r2, [r7, #6]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d101      	bne.n	8003c1c <isSnakePosition+0x50>
			return 1;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e015      	b.n	8003c48 <isSnakePosition+0x7c>
	for (int i = 0; i < snakeSize; i++)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <isSnakePosition+0x90>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	dbe5      	blt.n	8003bfa <isSnakePosition+0x2e>
	}

	if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <isSnakePosition+0x94>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	79fa      	ldrb	r2, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <isSnakePosition+0x7a>
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <isSnakePosition+0x94>)
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	79ba      	ldrb	r2, [r7, #6]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d101      	bne.n	8003c46 <isSnakePosition+0x7a>
		return 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <isSnakePosition+0x7c>

	return 0;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000034 	.word	0x20000034
 8003c58:	20000ab4 	.word	0x20000ab4
 8003c5c:	20000aa0 	.word	0x20000aa0
 8003c60:	20000038 	.word	0x20000038

08003c64 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	71bb      	strb	r3, [r7, #6]
 8003c72:	4613      	mov	r3, r2
 8003c74:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < NBApple; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	e019      	b.n	8003cb0 <isApplePosition+0x4c>
	{
		if (i == appleIndex)
 8003c7c:	797b      	ldrb	r3, [r7, #5]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d011      	beq.n	8003ca8 <isApplePosition+0x44>
			continue;

		if (x == applePosition[i][0] && y == applePosition[i][1])
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	4910      	ldr	r1, [pc, #64]	@ (8003cc8 <isApplePosition+0x64>)
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10b      	bne.n	8003caa <isApplePosition+0x46>
 8003c92:	79ba      	ldrb	r2, [r7, #6]
 8003c94:	490c      	ldr	r1, [pc, #48]	@ (8003cc8 <isApplePosition+0x64>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d102      	bne.n	8003caa <isApplePosition+0x46>
			return 1;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e009      	b.n	8003cbc <isApplePosition+0x58>
			continue;
 8003ca8:	bf00      	nop
	for (int i = 0; i < NBApple; i++)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	dbe0      	blt.n	8003c7c <isApplePosition+0x18>
	}

	return 0;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	20000ba8 	.word	0x20000ba8

08003ccc <updateJoystickDirection>:

void updateJoystickDirection()
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
	//config de la récupération des valeurs du joystick
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003cd2:	463b      	mov	r3, r7
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
	//recuperation valeur joystick
	sConfig.Channel = ADC_CHANNEL_8;
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	603b      	str	r3, [r7, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8003cea:	463b      	mov	r3, r7
 8003cec:	4619      	mov	r1, r3
 8003cee:	482f      	ldr	r0, [pc, #188]	@ (8003dac <updateJoystickDirection+0xe0>)
 8003cf0:	f006 ff3c 	bl	800ab6c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8003cf4:	482d      	ldr	r0, [pc, #180]	@ (8003dac <updateJoystickDirection+0xe0>)
 8003cf6:	f006 fdd3 	bl	800a8a0 <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8003cfa:	bf00      	nop
 8003cfc:	2164      	movs	r1, #100	@ 0x64
 8003cfe:	482b      	ldr	r0, [pc, #172]	@ (8003dac <updateJoystickDirection+0xe0>)
 8003d00:	f006 fe9c 	bl	800aa3c <HAL_ADC_PollForConversion>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f8      	bne.n	8003cfc <updateJoystickDirection+0x30>
		;
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8003d0a:	4828      	ldr	r0, [pc, #160]	@ (8003dac <updateJoystickDirection+0xe0>)
 8003d0c:	f006 ff21 	bl	800ab52 <HAL_ADC_GetValue>
 8003d10:	4603      	mov	r3, r0
 8003d12:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <updateJoystickDirection+0xe4>)
 8003d14:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8003d16:	4827      	ldr	r0, [pc, #156]	@ (8003db4 <updateJoystickDirection+0xe8>)
 8003d18:	f006 fdc2 	bl	800a8a0 <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8003d1c:	bf00      	nop
 8003d1e:	2164      	movs	r1, #100	@ 0x64
 8003d20:	4824      	ldr	r0, [pc, #144]	@ (8003db4 <updateJoystickDirection+0xe8>)
 8003d22:	f006 fe8b 	bl	800aa3c <HAL_ADC_PollForConversion>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f8      	bne.n	8003d1e <updateJoystickDirection+0x52>
		;
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8003d2c:	4821      	ldr	r0, [pc, #132]	@ (8003db4 <updateJoystickDirection+0xe8>)
 8003d2e:	f006 ff10 	bl	800ab52 <HAL_ADC_GetValue>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <updateJoystickDirection+0xec>)
 8003d36:	6013      	str	r3, [r2, #0]

    if (joystick_v < 1000 && headPart != HeadTop) {
 8003d38:	4b1d      	ldr	r3, [pc, #116]	@ (8003db0 <updateJoystickDirection+0xe4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d40:	d207      	bcs.n	8003d52 <updateJoystickDirection+0x86>
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <updateJoystickDirection+0xf0>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <updateJoystickDirection+0x86>
      direction = Down;
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc0 <updateJoystickDirection+0xf4>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e028      	b.n	8003da4 <updateJoystickDirection+0xd8>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8003d52:	4b17      	ldr	r3, [pc, #92]	@ (8003db0 <updateJoystickDirection+0xe4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d907      	bls.n	8003d6e <updateJoystickDirection+0xa2>
 8003d5e:	4b17      	ldr	r3, [pc, #92]	@ (8003dbc <updateJoystickDirection+0xf0>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d003      	beq.n	8003d6e <updateJoystickDirection+0xa2>
      direction = Up;
 8003d66:	4b16      	ldr	r3, [pc, #88]	@ (8003dc0 <updateJoystickDirection+0xf4>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e01a      	b.n	8003da4 <updateJoystickDirection+0xd8>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <updateJoystickDirection+0xec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d76:	d207      	bcs.n	8003d88 <updateJoystickDirection+0xbc>
 8003d78:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <updateJoystickDirection+0xf0>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d003      	beq.n	8003d88 <updateJoystickDirection+0xbc>
      direction = Right;
 8003d80:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc0 <updateJoystickDirection+0xf4>)
 8003d82:	2203      	movs	r2, #3
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e00d      	b.n	8003da4 <updateJoystickDirection+0xd8>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <updateJoystickDirection+0xec>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d907      	bls.n	8003da4 <updateJoystickDirection+0xd8>
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <updateJoystickDirection+0xf0>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d003      	beq.n	8003da4 <updateJoystickDirection+0xd8>
      direction = Left;
 8003d9c:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <updateJoystickDirection+0xf4>)
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
    }

}
 8003da2:	e7ff      	b.n	8003da4 <updateJoystickDirection+0xd8>
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	2000042c 	.word	0x2000042c
 8003db0:	20000a1c 	.word	0x20000a1c
 8003db4:	200003e4 	.word	0x200003e4
 8003db8:	20000a20 	.word	0x20000a20
 8003dbc:	20000a25 	.word	0x20000a25
 8003dc0:	20000a24 	.word	0x20000a24

08003dc4 <restartGame>:

void restartGame()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
	gameOver = 0;
 8003dca:	4b3c      	ldr	r3, [pc, #240]	@ (8003ebc <restartGame+0xf8>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
	lastMove = 1;
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <restartGame+0xfc>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
	snakeSize = 0;
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <restartGame+0x100>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
	speed = initSpeed;
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec8 <restartGame+0x104>)
 8003de0:	701a      	strb	r2, [r3, #0]
	snakeHeadPosition[0] = 7;
 8003de2:	4b3a      	ldr	r3, [pc, #232]	@ (8003ecc <restartGame+0x108>)
 8003de4:	2207      	movs	r2, #7
 8003de6:	701a      	strb	r2, [r3, #0]
	snakeHeadPosition[1] = 6;
 8003de8:	4b38      	ldr	r3, [pc, #224]	@ (8003ecc <restartGame+0x108>)
 8003dea:	2206      	movs	r2, #6
 8003dec:	705a      	strb	r2, [r3, #1]
	snakeTailPosition[0] = 7;
 8003dee:	4b38      	ldr	r3, [pc, #224]	@ (8003ed0 <restartGame+0x10c>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	701a      	strb	r2, [r3, #0]
	snakeTailPosition[1] = 7;
 8003df4:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <restartGame+0x10c>)
 8003df6:	2207      	movs	r2, #7
 8003df8:	705a      	strb	r2, [r3, #1]
	direction = Up;
 8003dfa:	4b36      	ldr	r3, [pc, #216]	@ (8003ed4 <restartGame+0x110>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
	headPart = HeadTop;
 8003e00:	4b35      	ldr	r3, [pc, #212]	@ (8003ed8 <restartGame+0x114>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
	tailPart = TailTop;
 8003e06:	4b35      	ldr	r3, [pc, #212]	@ (8003edc <restartGame+0x118>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < NBApple; i++)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	e047      	b.n	8003ea2 <restartGame+0xde>
	{
		do
		{
			applePosition[i][0] = rand() % gridSizeX;
 8003e12:	f012 f84d 	bl	8015eb0 <rand>
 8003e16:	4603      	mov	r3, r0
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e1e:	fb01 f202 	mul.w	r2, r1, r2
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	b259      	sxtb	r1, r3
 8003e26:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee0 <restartGame+0x11c>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			applePosition[i][1] = rand() % gridSizeY;
 8003e2e:	f012 f83f 	bl	8015eb0 <rand>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2208      	movs	r2, #8
 8003e36:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e3a:	fb01 f202 	mul.w	r2, r1, r2
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	b259      	sxtb	r1, r3
 8003e42:	4a27      	ldr	r2, [pc, #156]	@ (8003ee0 <restartGame+0x11c>)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	705a      	strb	r2, [r3, #1]
		} while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8003e4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ee0 <restartGame+0x11c>)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	4921      	ldr	r1, [pc, #132]	@ (8003ee0 <restartGame+0x11c>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	440b      	add	r3, r1
 8003e60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f7ff feaf 	bl	8003bcc <isSnakePosition>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ce      	bne.n	8003e12 <restartGame+0x4e>
 8003e74:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee0 <restartGame+0x11c>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8003e7c:	b2d8      	uxtb	r0, r3
 8003e7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <restartGame+0x11c>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	f7ff fee7 	bl	8003c64 <isApplePosition>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ba      	bne.n	8003e12 <restartGame+0x4e>
	for (int i = 0; i < NBApple; i++)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	dbb2      	blt.n	8003e12 <restartGame+0x4e>
	}

	BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8003eac:	480d      	ldr	r0, [pc, #52]	@ (8003ee4 <restartGame+0x120>)
 8003eae:	f002 ff85 	bl	8006dbc <BSP_LCD_Clear>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000ab0 	.word	0x20000ab0
 8003ec0:	20000030 	.word	0x20000030
 8003ec4:	20000aa0 	.word	0x20000aa0
 8003ec8:	2000002c 	.word	0x2000002c
 8003ecc:	20000034 	.word	0x20000034
 8003ed0:	20000038 	.word	0x20000038
 8003ed4:	20000a24 	.word	0x20000a24
 8003ed8:	20000a25 	.word	0x20000a25
 8003edc:	2000002d 	.word	0x2000002d
 8003ee0:	20000ba8 	.word	0x20000ba8
 8003ee4:	ff81cd4b 	.word	0xff81cd4b

08003ee8 <displayGameStatus>:

void displayGameStatus()
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	if (gameOver)
 8003eec:	4b27      	ldr	r3, [pc, #156]	@ (8003f8c <displayGameStatus+0xa4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <displayGameStatus+0x38>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003ef4:	4826      	ldr	r0, [pc, #152]	@ (8003f90 <displayGameStatus+0xa8>)
 8003ef6:	f002 feff 	bl	8006cf8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003efa:	4826      	ldr	r0, [pc, #152]	@ (8003f94 <displayGameStatus+0xac>)
 8003efc:	f002 ff2e 	bl	8006d5c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8003f00:	2301      	movs	r3, #1
 8003f02:	4a25      	ldr	r2, [pc, #148]	@ (8003f98 <displayGameStatus+0xb0>)
 8003f04:	2164      	movs	r1, #100	@ 0x64
 8003f06:	2000      	movs	r0, #0
 8003f08:	f002 ffc4 	bl	8006e94 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f0c:	4823      	ldr	r0, [pc, #140]	@ (8003f9c <displayGameStatus+0xb4>)
 8003f0e:	f002 ff25 	bl	8006d5c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8003f12:	2301      	movs	r3, #1
 8003f14:	4a22      	ldr	r2, [pc, #136]	@ (8003fa0 <displayGameStatus+0xb8>)
 8003f16:	2182      	movs	r1, #130	@ 0x82
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f002 ffbb 	bl	8006e94 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
		BSP_LCD_SetFont(&Font16);
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
	}
}
 8003f1e:	e032      	b.n	8003f86 <displayGameStatus+0x9e>
	else if (gamePaused)
 8003f20:	4b20      	ldr	r3, [pc, #128]	@ (8003fa4 <displayGameStatus+0xbc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <displayGameStatus+0x6c>
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003f28:	4819      	ldr	r0, [pc, #100]	@ (8003f90 <displayGameStatus+0xa8>)
 8003f2a:	f002 fee5 	bl	8006cf8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f2e:	4819      	ldr	r0, [pc, #100]	@ (8003f94 <displayGameStatus+0xac>)
 8003f30:	f002 ff14 	bl	8006d5c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8003f34:	2301      	movs	r3, #1
 8003f36:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa8 <displayGameStatus+0xc0>)
 8003f38:	2164      	movs	r1, #100	@ 0x64
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f002 ffaa 	bl	8006e94 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f40:	4816      	ldr	r0, [pc, #88]	@ (8003f9c <displayGameStatus+0xb4>)
 8003f42:	f002 ff0b 	bl	8006d5c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 8003f46:	2301      	movs	r3, #1
 8003f48:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <displayGameStatus+0xc4>)
 8003f4a:	2182      	movs	r1, #130	@ 0x82
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f002 ffa1 	bl	8006e94 <BSP_LCD_DisplayStringAt>
}
 8003f52:	e018      	b.n	8003f86 <displayGameStatus+0x9e>
	else if (!gameStarted)
 8003f54:	4b16      	ldr	r3, [pc, #88]	@ (8003fb0 <displayGameStatus+0xc8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d114      	bne.n	8003f86 <displayGameStatus+0x9e>
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003f5c:	480c      	ldr	r0, [pc, #48]	@ (8003f90 <displayGameStatus+0xa8>)
 8003f5e:	f002 fecb 	bl	8006cf8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8003f62:	480c      	ldr	r0, [pc, #48]	@ (8003f94 <displayGameStatus+0xac>)
 8003f64:	f002 fefa 	bl	8006d5c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 8003f68:	2301      	movs	r3, #1
 8003f6a:	4a12      	ldr	r2, [pc, #72]	@ (8003fb4 <displayGameStatus+0xcc>)
 8003f6c:	2164      	movs	r1, #100	@ 0x64
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f002 ff90 	bl	8006e94 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8003f74:	4809      	ldr	r0, [pc, #36]	@ (8003f9c <displayGameStatus+0xb4>)
 8003f76:	f002 fef1 	bl	8006d5c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb8 <displayGameStatus+0xd0>)
 8003f7e:	2182      	movs	r1, #130	@ 0x82
 8003f80:	2000      	movs	r0, #0
 8003f82:	f002 ff87 	bl	8006e94 <BSP_LCD_DisplayStringAt>
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000ab0 	.word	0x20000ab0
 8003f90:	ffa52a2a 	.word	0xffa52a2a
 8003f94:	2000003c 	.word	0x2000003c
 8003f98:	080171b4 	.word	0x080171b4
 8003f9c:	20000044 	.word	0x20000044
 8003fa0:	080171c0 	.word	0x080171c0
 8003fa4:	20000aac 	.word	0x20000aac
 8003fa8:	080171dc 	.word	0x080171dc
 8003fac:	080171e8 	.word	0x080171e8
 8003fb0:	20000aa8 	.word	0x20000aa8
 8003fb4:	08017204 	.word	0x08017204
 8003fb8:	08017210 	.word	0x08017210

08003fbc <SD_Init>:

void SD_Init()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4909      	ldr	r1, [pc, #36]	@ (8003fe8 <SD_Init+0x2c>)
 8003fc4:	4809      	ldr	r0, [pc, #36]	@ (8003fec <SD_Init+0x30>)
 8003fc6:	f7fe fbc1 	bl	800274c <f_mount>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <SD_Init+0x1a>
	{
		Error_Handler();
 8003fd0:	f001 ff94 	bl	8005efc <Error_Handler>
	}
	else
	{
		BSP_LCD_DisplayStringAt(0, 40, (uint8_t *)"SD - Mount Ok", CENTER_MODE);
	}
}
 8003fd4:	e005      	b.n	8003fe2 <SD_Init+0x26>
		BSP_LCD_DisplayStringAt(0, 40, (uint8_t *)"SD - Mount Ok", CENTER_MODE);
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4a05      	ldr	r2, [pc, #20]	@ (8003ff0 <SD_Init+0x34>)
 8003fda:	2128      	movs	r1, #40	@ 0x28
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f002 ff59 	bl	8006e94 <BSP_LCD_DisplayStringAt>
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200010b8 	.word	0x200010b8
 8003fec:	200010bc 	.word	0x200010bc
 8003ff0:	0801722c 	.word	0x0801722c

08003ff4 <Audio_Init>:

void Audio_Init(uint32_t freq)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	6078      	str	r0, [r7, #4]
	static int init = 0;
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1,
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2310      	movs	r3, #16
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	2102      	movs	r1, #2
 8004006:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800400a:	f002 fb69 	bl	80066e0 <BSP_AUDIO_IN_OUT_Init>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
		}
	}

	/* Initialize SDRAM buffers */
	//	memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
	memset((uint16_t *)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8004012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004016:	2100      	movs	r1, #0
 8004018:	480d      	ldr	r0, [pc, #52]	@ (8004050 <Audio_Init+0x5c>)
 800401a:	f012 f8ac 	bl	8016176 <memset>
	//	memset((uint16_t*) AUDIO_BUFFER_READ, 0, AUDIO_BLOCK_SIZE * 2);

	/* Start Recording */
	BSP_AUDIO_OUT_SetVolume(40);
 800401e:	2028      	movs	r0, #40	@ 0x28
 8004020:	f002 f9b4 	bl	800638c <BSP_AUDIO_OUT_SetVolume>
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8004024:	2005      	movs	r0, #5
 8004026:	f002 f9c9 	bl	80063bc <BSP_AUDIO_OUT_SetAudioFrameSlot>
	if (BSP_AUDIO_OUT_Play((uint16_t *)AUDIO_BUFFER_OUT,
 800402a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800402e:	4808      	ldr	r0, [pc, #32]	@ (8004050 <Audio_Init+0x5c>)
 8004030:	f002 f982 	bl	8006338 <BSP_AUDIO_OUT_Play>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <Audio_Init+0x54>
						   AUDIO_BLOCK_SIZE * 2) == AUDIO_OK)
	{

		if (init == 0)
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <Audio_Init+0x60>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <Audio_Init+0x54>
		{
			// sprintf(text,"Aud_freq= %u",(int)freq);
			init = 1;
 8004042:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <Audio_Init+0x60>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	c007fc00 	.word	0xc007fc00
 8004054:	20000bb0 	.word	0x20000bb0

08004058 <read_header>:
								CENTER_MODE);
	}
}

void read_header()
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
	uint32_t nb_bl;
	uint32_t bytesread;
	uint32_t taille_octet;

	// Lecture du nombre d'octets
	f_lseek(&SDFile, 04);
 8004062:	2104      	movs	r1, #4
 8004064:	4818      	ldr	r0, [pc, #96]	@ (80040c8 <read_header+0x70>)
 8004066:	f7fe ffbc 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 800406a:	463b      	mov	r3, r7
 800406c:	1d39      	adds	r1, r7, #4
 800406e:	2204      	movs	r2, #4
 8004070:	4815      	ldr	r0, [pc, #84]	@ (80040c8 <read_header+0x70>)
 8004072:	f7fe fd90 	bl	8002b96 <f_read>
	//	taille_fichier=((data|MASK_32_TO_8_0)<<24)|((data|MASK_32_TO_8_1)<<8)|((data|MASK_32_TO_8_2)>>8)|((data|MASK_32_TO_8_3)>>24);
	taille_octet = data;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60fb      	str	r3, [r7, #12]
	nb_bl = data / 512;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	0a5b      	lsrs	r3, r3, #9
 800407e:	60bb      	str	r3, [r7, #8]
	NB_Bloc = (uint32_t)nb_bl;
 8004080:	4a12      	ldr	r2, [pc, #72]	@ (80040cc <read_header+0x74>)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6013      	str	r3, [r2, #0]
	data = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]

	// Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile, 24);
 800408a:	2118      	movs	r1, #24
 800408c:	480e      	ldr	r0, [pc, #56]	@ (80040c8 <read_header+0x70>)
 800408e:	f7fe ffa8 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 8004092:	463b      	mov	r3, r7
 8004094:	1d39      	adds	r1, r7, #4
 8004096:	2204      	movs	r2, #4
 8004098:	480b      	ldr	r0, [pc, #44]	@ (80040c8 <read_header+0x70>)
 800409a:	f7fe fd7c 	bl	8002b96 <f_read>
	//	freq=((data2|MASK_32_TO_8_0)<<24)|((data2|MASK_32_TO_8_1)<<8)|((data2|MASK_32_TO_8_2)>>8)|((data2|MASK_32_TO_8_3)>>24);
	freq_audio = data;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a0b      	ldr	r2, [pc, #44]	@ (80040d0 <read_header+0x78>)
 80040a2:	6013      	str	r3, [r2, #0]

	// Nombre d'octets par secondes
	f_lseek(&SDFile, 28);
 80040a4:	211c      	movs	r1, #28
 80040a6:	4808      	ldr	r0, [pc, #32]	@ (80040c8 <read_header+0x70>)
 80040a8:	f7fe ff9b 	bl	8002fe2 <f_lseek>
	f_read(&SDFile, (uint8_t *)&data, 4, (void *)&bytesread);
 80040ac:	463b      	mov	r3, r7
 80040ae:	1d39      	adds	r1, r7, #4
 80040b0:	2204      	movs	r2, #4
 80040b2:	4805      	ldr	r0, [pc, #20]	@ (80040c8 <read_header+0x70>)
 80040b4:	f7fe fd6f 	bl	8002b96 <f_read>
	Nb_octets_seconde = data;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a06      	ldr	r2, [pc, #24]	@ (80040d4 <read_header+0x7c>)
 80040bc:	6013      	str	r3, [r2, #0]
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200012f0 	.word	0x200012f0
 80040cc:	20000974 	.word	0x20000974
 80040d0:	2000097c 	.word	0x2000097c
 80040d4:	20000028 	.word	0x20000028

080040d8 <Charge_Wave>:

void Charge_Wave()
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 80040dc:	480b      	ldr	r0, [pc, #44]	@ (800410c <Charge_Wave+0x34>)
 80040de:	f7fe ff51 	bl	8002f84 <f_close>
	f_open(&SDFile, Song_Name, FA_READ);
 80040e2:	2201      	movs	r2, #1
 80040e4:	490a      	ldr	r1, [pc, #40]	@ (8004110 <Charge_Wave+0x38>)
 80040e6:	4809      	ldr	r0, [pc, #36]	@ (800410c <Charge_Wave+0x34>)
 80040e8:	f7fe fb94 	bl	8002814 <f_open>
	read_header();
 80040ec:	f7ff ffb4 	bl	8004058 <read_header>
	Audio_Init(freq_audio);
 80040f0:	4b08      	ldr	r3, [pc, #32]	@ (8004114 <Charge_Wave+0x3c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ff7d 	bl	8003ff4 <Audio_Init>
	f_lseek(&SDFile, 44);
 80040fa:	212c      	movs	r1, #44	@ 0x2c
 80040fc:	4803      	ldr	r0, [pc, #12]	@ (800410c <Charge_Wave+0x34>)
 80040fe:	f7fe ff70 	bl	8002fe2 <f_lseek>
	Bloc_Cursor = 0;
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <Charge_Wave+0x40>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
}
 8004108:	bf00      	nop
 800410a:	bd80      	pop	{r7, pc}
 800410c:	200012f0 	.word	0x200012f0
 8004110:	08017278 	.word	0x08017278
 8004114:	2000097c 	.word	0x2000097c
 8004118:	20000978 	.word	0x20000978

0800411c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800411c:	b5b0      	push	{r4, r5, r7, lr}
 800411e:	b0aa      	sub	sp, #168	@ 0xa8
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8004122:	f7ff fc87 	bl	8003a34 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8004126:	f7ff fcab 	bl	8003a80 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800412a:	f006 fb24 	bl	800a776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800412e:	f000 f8f3 	bl	8004318 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004132:	f000 f961 	bl	80043f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004136:	f000 fc9f 	bl	8004a78 <MX_GPIO_Init>
  MX_DMA_Init();
 800413a:	f000 fbdf 	bl	80048fc <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800413e:	f000 fb8d 	bl	800485c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8004142:	f00e f8a9 	bl	8012298 <MX_FATFS_Init>
  MX_FMC_Init();
 8004146:	f000 fc0f 	bl	8004968 <MX_FMC_Init>
  MX_LTDC_Init();
 800414a:	f000 fa5d 	bl	8004608 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 800414e:	f000 fba5 	bl	800489c <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8004152:	f000 fa27 	bl	80045a4 <MX_DMA2D_Init>
  MX_SAI2_Init();
 8004156:	f000 fad9 	bl	800470c <MX_SAI2_Init>
  MX_ADC1_Init();
 800415a:	f000 f97f 	bl	800445c <MX_ADC1_Init>
  MX_ADC3_Init();
 800415e:	f000 f9cf 	bl	8004500 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

	// Initialisation de l'écran LCD
	BSP_LCD_Init();
 8004162:	f002 fcc1 	bl	8006ae8 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8004166:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800416a:	2000      	movs	r0, #0
 800416c:	f002 fd54 	bl	8006c18 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8004170:	f002 fd2a 	bl	8006bc8 <BSP_LCD_GetXSize>
 8004174:	4604      	mov	r4, r0
 8004176:	f002 fd3b 	bl	8006bf0 <BSP_LCD_GetYSize>
 800417a:	4603      	mov	r3, r0
 800417c:	fb04 f303 	mul.w	r3, r4, r3
 8004180:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4619      	mov	r1, r3
 8004188:	2001      	movs	r0, #1
 800418a:	f002 fd45 	bl	8006c18 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 800418e:	f003 f933 	bl	80073f8 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 8004192:	2000      	movs	r0, #0
 8004194:	f002 fda0 	bl	8006cd8 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8004198:	484f      	ldr	r0, [pc, #316]	@ (80042d8 <main+0x1bc>)
 800419a:	f002 fe0f 	bl	8006dbc <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 800419e:	2001      	movs	r0, #1
 80041a0:	f002 fd9a 	bl	8006cd8 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80041a4:	2000      	movs	r0, #0
 80041a6:	f002 fe09 	bl	8006dbc <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 80041aa:	484c      	ldr	r0, [pc, #304]	@ (80042dc <main+0x1c0>)
 80041ac:	f002 fdd6 	bl	8006d5c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80041b0:	484b      	ldr	r0, [pc, #300]	@ (80042e0 <main+0x1c4>)
 80041b2:	f002 fda1 	bl	8006cf8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f002 fdb6 	bl	8006d28 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80041bc:	f002 fd04 	bl	8006bc8 <BSP_LCD_GetXSize>
 80041c0:	4603      	mov	r3, r0
 80041c2:	b29c      	uxth	r4, r3
 80041c4:	f002 fd14 	bl	8006bf0 <BSP_LCD_GetYSize>
 80041c8:	4603      	mov	r3, r0
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	4620      	mov	r0, r4
 80041d0:	f003 fd24 	bl	8007c1c <BSP_TS_Init>

	Audio_Init(Audio_freq);
 80041d4:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 80041d8:	f7ff ff0c 	bl	8003ff4 <Audio_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 80041e8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f00e fcb9 	bl	8012b64 <osMutexCreate>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4a3b      	ldr	r2, [pc, #236]	@ (80042e4 <main+0x1c8>)
 80041f6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of WakeUp */
  osMessageQDef(WakeUp, 1, uint8_t);
 80041f8:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <main+0x1cc>)
 80041fa:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80041fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 8004204:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f00e fd8b 	bl	8012d26 <osMessageCreate>
 8004210:	4603      	mov	r3, r0
 8004212:	4a36      	ldr	r2, [pc, #216]	@ (80042ec <main+0x1d0>)
 8004214:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8004216:	4b36      	ldr	r3, [pc, #216]	@ (80042f0 <main+0x1d4>)
 8004218:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800421c:	461d      	mov	r5, r3
 800421e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004222:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800422a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f00e fc37 	bl	8012aa4 <osThreadCreate>
 8004236:	4603      	mov	r3, r0
 8004238:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <main+0x1d8>)
 800423a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityLow, 0, 1024);
 800423c:	4b2e      	ldr	r3, [pc, #184]	@ (80042f8 <main+0x1dc>)
 800423e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8004242:	461d      	mov	r5, r3
 8004244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800424c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8004250:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f00e fc24 	bl	8012aa4 <osThreadCreate>
 800425c:	4603      	mov	r3, r0
 800425e:	4a27      	ldr	r2, [pc, #156]	@ (80042fc <main+0x1e0>)
 8004260:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityHigh, 0, 256);
 8004262:	4b27      	ldr	r3, [pc, #156]	@ (8004300 <main+0x1e4>)
 8004264:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004268:	461d      	mov	r5, r3
 800426a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800426c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800426e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 8004276:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f00e fc11 	bl	8012aa4 <osThreadCreate>
 8004282:	4603      	mov	r3, r0
 8004284:	4a1f      	ldr	r2, [pc, #124]	@ (8004304 <main+0x1e8>)
 8004286:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandler, osPriorityHigh, 0, 256);
 8004288:	4b1f      	ldr	r3, [pc, #124]	@ (8004308 <main+0x1ec>)
 800428a:	f107 0420 	add.w	r4, r7, #32
 800428e:	461d      	mov	r5, r3
 8004290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004294:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 800429c:	f107 0320 	add.w	r3, r7, #32
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f00e fbfe 	bl	8012aa4 <osThreadCreate>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4a18      	ldr	r2, [pc, #96]	@ (800430c <main+0x1f0>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of playSongTask */
  osThreadDef(playSongTask, StartPlaySongTask, osPriorityHigh, 0, 256);
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <main+0x1f4>)
 80042b0:	1d3c      	adds	r4, r7, #4
 80042b2:	461d      	mov	r5, r3
 80042b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  playSongTaskHandle = osThreadCreate(osThread(playSongTask), NULL);
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f00e fbed 	bl	8012aa4 <osThreadCreate>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <main+0x1f8>)
 80042ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80042d0:	f00e fbc5 	bl	8012a5e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <main+0x1b8>
 80042d8:	ff81cd4b 	.word	0xff81cd4b
 80042dc:	20000044 	.word	0x20000044
 80042e0:	ffa52a2a 	.word	0xffa52a2a
 80042e4:	20000970 	.word	0x20000970
 80042e8:	08017284 	.word	0x08017284
 80042ec:	2000096c 	.word	0x2000096c
 80042f0:	080172a0 	.word	0x080172a0
 80042f4:	20000958 	.word	0x20000958
 80042f8:	080172c8 	.word	0x080172c8
 80042fc:	2000095c 	.word	0x2000095c
 8004300:	080172f4 	.word	0x080172f4
 8004304:	20000960 	.word	0x20000960
 8004308:	08017320 	.word	0x08017320
 800430c:	20000964 	.word	0x20000964
 8004310:	0801734c 	.word	0x0801734c
 8004314:	20000968 	.word	0x20000968

08004318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b094      	sub	sp, #80	@ 0x50
 800431c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800431e:	f107 0320 	add.w	r3, r7, #32
 8004322:	2230      	movs	r2, #48	@ 0x30
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f011 ff25 	bl	8016176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800433c:	f009 f9e4 	bl	800d708 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004340:	4b2b      	ldr	r3, [pc, #172]	@ (80043f0 <SystemClock_Config+0xd8>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	4a2a      	ldr	r2, [pc, #168]	@ (80043f0 <SystemClock_Config+0xd8>)
 8004346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434a:	6413      	str	r3, [r2, #64]	@ 0x40
 800434c:	4b28      	ldr	r3, [pc, #160]	@ (80043f0 <SystemClock_Config+0xd8>)
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004358:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <SystemClock_Config+0xdc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a25      	ldr	r2, [pc, #148]	@ (80043f4 <SystemClock_Config+0xdc>)
 800435e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b23      	ldr	r3, [pc, #140]	@ (80043f4 <SystemClock_Config+0xdc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004370:	2301      	movs	r3, #1
 8004372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004374:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800437a:	2302      	movs	r3, #2
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800437e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004384:	2319      	movs	r3, #25
 8004386:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8004388:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800438c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800438e:	2302      	movs	r3, #2
 8004390:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004392:	2309      	movs	r3, #9
 8004394:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004396:	f107 0320 	add.w	r3, r7, #32
 800439a:	4618      	mov	r0, r3
 800439c:	f009 fa14 	bl	800d7c8 <HAL_RCC_OscConfig>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80043a6:	f001 fda9 	bl	8005efc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80043aa:	f009 f9bd 	bl	800d728 <HAL_PWREx_EnableOverDrive>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80043b4:	f001 fda2 	bl	8005efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043b8:	230f      	movs	r3, #15
 80043ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043bc:	2302      	movs	r3, #2
 80043be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80043c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80043c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80043ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80043d0:	f107 030c 	add.w	r3, r7, #12
 80043d4:	2106      	movs	r1, #6
 80043d6:	4618      	mov	r0, r3
 80043d8:	f009 fc9a 	bl	800dd10 <HAL_RCC_ClockConfig>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80043e2:	f001 fd8b 	bl	8005efc <Error_Handler>
  }
}
 80043e6:	bf00      	nop
 80043e8:	3750      	adds	r7, #80	@ 0x50
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40007000 	.word	0x40007000

080043f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b0a2      	sub	sp, #136	@ 0x88
 80043fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2284      	movs	r2, #132	@ 0x84
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f011 feb6 	bl	8016176 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800440a:	4b13      	ldr	r3, [pc, #76]	@ (8004458 <PeriphCommonClock_Config+0x60>)
 800440c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800440e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004412:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004414:	2305      	movs	r3, #5
 8004416:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004418:	2302      	movs	r3, #2
 800441a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800441c:	2303      	movs	r3, #3
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004420:	2301      	movs	r3, #1
 8004422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004424:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800442a:	2300      	movs	r3, #0
 800442c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800442e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800443c:	1d3b      	adds	r3, r7, #4
 800443e:	4618      	mov	r0, r3
 8004440:	f009 fe7e 	bl	800e140 <HAL_RCCEx_PeriphCLKConfig>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800444a:	f001 fd57 	bl	8005efc <Error_Handler>
  }
}
 800444e:	bf00      	nop
 8004450:	3788      	adds	r7, #136	@ 0x88
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	00b00008 	.word	0x00b00008

0800445c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004462:	463b      	mov	r3, r7
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800446e:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <MX_ADC1_Init+0x98>)
 8004470:	4a21      	ldr	r2, [pc, #132]	@ (80044f8 <MX_ADC1_Init+0x9c>)
 8004472:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004474:	4b1f      	ldr	r3, [pc, #124]	@ (80044f4 <MX_ADC1_Init+0x98>)
 8004476:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800447a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <MX_ADC1_Init+0x98>)
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004482:	4b1c      	ldr	r3, [pc, #112]	@ (80044f4 <MX_ADC1_Init+0x98>)
 8004484:	2200      	movs	r2, #0
 8004486:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004488:	4b1a      	ldr	r3, [pc, #104]	@ (80044f4 <MX_ADC1_Init+0x98>)
 800448a:	2200      	movs	r2, #0
 800448c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800448e:	4b19      	ldr	r3, [pc, #100]	@ (80044f4 <MX_ADC1_Init+0x98>)
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004496:	4b17      	ldr	r3, [pc, #92]	@ (80044f4 <MX_ADC1_Init+0x98>)
 8004498:	2200      	movs	r2, #0
 800449a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800449c:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <MX_ADC1_Init+0x98>)
 800449e:	4a17      	ldr	r2, [pc, #92]	@ (80044fc <MX_ADC1_Init+0xa0>)
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044a2:	4b14      	ldr	r3, [pc, #80]	@ (80044f4 <MX_ADC1_Init+0x98>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <MX_ADC1_Init+0x98>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80044ae:	4b11      	ldr	r3, [pc, #68]	@ (80044f4 <MX_ADC1_Init+0x98>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <MX_ADC1_Init+0x98>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044bc:	480d      	ldr	r0, [pc, #52]	@ (80044f4 <MX_ADC1_Init+0x98>)
 80044be:	f006 f9ab 	bl	800a818 <HAL_ADC_Init>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80044c8:	f001 fd18 	bl	8005efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044d0:	2301      	movs	r3, #1
 80044d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044d8:	463b      	mov	r3, r7
 80044da:	4619      	mov	r1, r3
 80044dc:	4805      	ldr	r0, [pc, #20]	@ (80044f4 <MX_ADC1_Init+0x98>)
 80044de:	f006 fb45 	bl	800ab6c <HAL_ADC_ConfigChannel>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80044e8:	f001 fd08 	bl	8005efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	200003e4 	.word	0x200003e4
 80044f8:	40012000 	.word	0x40012000
 80044fc:	0f000001 	.word	0x0f000001

08004500 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004506:	463b      	mov	r3, r7
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8004512:	4b21      	ldr	r3, [pc, #132]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004514:	4a21      	ldr	r2, [pc, #132]	@ (800459c <MX_ADC3_Init+0x9c>)
 8004516:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004518:	4b1f      	ldr	r3, [pc, #124]	@ (8004598 <MX_ADC3_Init+0x98>)
 800451a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800451e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004520:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004526:	4b1c      	ldr	r3, [pc, #112]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800452c:	4b1a      	ldr	r3, [pc, #104]	@ (8004598 <MX_ADC3_Init+0x98>)
 800452e:	2200      	movs	r2, #0
 8004530:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004532:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800453a:	4b17      	ldr	r3, [pc, #92]	@ (8004598 <MX_ADC3_Init+0x98>)
 800453c:	2200      	movs	r2, #0
 800453e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004540:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004542:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <MX_ADC3_Init+0xa0>)
 8004544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004548:	2200      	movs	r2, #0
 800454a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800454c:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <MX_ADC3_Init+0x98>)
 800454e:	2201      	movs	r2, #1
 8004550:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8004552:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800455a:	4b0f      	ldr	r3, [pc, #60]	@ (8004598 <MX_ADC3_Init+0x98>)
 800455c:	2201      	movs	r2, #1
 800455e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004560:	480d      	ldr	r0, [pc, #52]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004562:	f006 f959 	bl	800a818 <HAL_ADC_Init>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800456c:	f001 fcc6 	bl	8005efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004570:	2306      	movs	r3, #6
 8004572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004574:	2301      	movs	r3, #1
 8004576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004578:	2300      	movs	r3, #0
 800457a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800457c:	463b      	mov	r3, r7
 800457e:	4619      	mov	r1, r3
 8004580:	4805      	ldr	r0, [pc, #20]	@ (8004598 <MX_ADC3_Init+0x98>)
 8004582:	f006 faf3 	bl	800ab6c <HAL_ADC_ConfigChannel>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800458c:	f001 fcb6 	bl	8005efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	2000042c 	.word	0x2000042c
 800459c:	40012200 	.word	0x40012200
 80045a0:	0f000001 	.word	0x0f000001

080045a4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80045a8:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045aa:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <MX_DMA2D_Init+0x60>)
 80045ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80045ae:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80045b4:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80045ba:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80045c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80045c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80045cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80045d8:	4809      	ldr	r0, [pc, #36]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045da:	f007 f9fd 	bl	800b9d8 <HAL_DMA2D_Init>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80045e4:	f001 fc8a 	bl	8005efc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80045e8:	2101      	movs	r1, #1
 80045ea:	4805      	ldr	r0, [pc, #20]	@ (8004600 <MX_DMA2D_Init+0x5c>)
 80045ec:	f007 fb52 	bl	800bc94 <HAL_DMA2D_ConfigLayer>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80045f6:	f001 fc81 	bl	8005efc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000474 	.word	0x20000474
 8004604:	4002b000 	.word	0x4002b000

08004608 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08e      	sub	sp, #56	@ 0x38
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800460e:	1d3b      	adds	r3, r7, #4
 8004610:	2234      	movs	r2, #52	@ 0x34
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f011 fdae 	bl	8016176 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800461a:	4b3a      	ldr	r3, [pc, #232]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800461c:	4a3a      	ldr	r2, [pc, #232]	@ (8004708 <MX_LTDC_Init+0x100>)
 800461e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004620:	4b38      	ldr	r3, [pc, #224]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004622:	2200      	movs	r2, #0
 8004624:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004626:	4b37      	ldr	r3, [pc, #220]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004628:	2200      	movs	r2, #0
 800462a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800462c:	4b35      	ldr	r3, [pc, #212]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800462e:	2200      	movs	r2, #0
 8004630:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004632:	4b34      	ldr	r3, [pc, #208]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004634:	2200      	movs	r2, #0
 8004636:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8004638:	4b32      	ldr	r3, [pc, #200]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800463a:	2228      	movs	r2, #40	@ 0x28
 800463c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800463e:	4b31      	ldr	r3, [pc, #196]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004640:	2209      	movs	r2, #9
 8004642:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8004644:	4b2f      	ldr	r3, [pc, #188]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004646:	2235      	movs	r2, #53	@ 0x35
 8004648:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800464a:	4b2e      	ldr	r3, [pc, #184]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800464c:	220b      	movs	r2, #11
 800464e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8004650:	4b2c      	ldr	r3, [pc, #176]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004652:	f240 2215 	movw	r2, #533	@ 0x215
 8004656:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8004658:	4b2a      	ldr	r3, [pc, #168]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800465a:	f240 121b 	movw	r2, #283	@ 0x11b
 800465e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8004660:	4b28      	ldr	r3, [pc, #160]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004662:	f240 2235 	movw	r2, #565	@ 0x235
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8004668:	4b26      	ldr	r3, [pc, #152]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800466a:	f240 121d 	movw	r2, #285	@ 0x11d
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8004670:	4b24      	ldr	r3, [pc, #144]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8004678:	4b22      	ldr	r3, [pc, #136]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8004680:	4b20      	ldr	r3, [pc, #128]	@ (8004704 <MX_LTDC_Init+0xfc>)
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004688:	481e      	ldr	r0, [pc, #120]	@ (8004704 <MX_LTDC_Init+0xfc>)
 800468a:	f008 fcc5 	bl	800d018 <HAL_LTDC_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8004694:	f001 fc32 	bl	8005efc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800469c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80046a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80046a6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80046aa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80046ac:	2302      	movs	r3, #2
 80046ae:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80046b0:	23ff      	movs	r3, #255	@ 0xff
 80046b2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80046b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80046bc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80046be:	2307      	movs	r3, #7
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80046c2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80046c8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80046ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	2200      	movs	r2, #0
 80046ea:	4619      	mov	r1, r3
 80046ec:	4805      	ldr	r0, [pc, #20]	@ (8004704 <MX_LTDC_Init+0xfc>)
 80046ee:	f008 fe25 	bl	800d33c <HAL_LTDC_ConfigLayer>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80046f8:	f001 fc00 	bl	8005efc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80046fc:	bf00      	nop
 80046fe:	3738      	adds	r7, #56	@ 0x38
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	200004b4 	.word	0x200004b4
 8004708:	40016800 	.word	0x40016800

0800470c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8004710:	4b4e      	ldr	r3, [pc, #312]	@ (800484c <MX_SAI2_Init+0x140>)
 8004712:	4a4f      	ldr	r2, [pc, #316]	@ (8004850 <MX_SAI2_Init+0x144>)
 8004714:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8004716:	4b4d      	ldr	r3, [pc, #308]	@ (800484c <MX_SAI2_Init+0x140>)
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800471c:	4b4b      	ldr	r3, [pc, #300]	@ (800484c <MX_SAI2_Init+0x140>)
 800471e:	2200      	movs	r2, #0
 8004720:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8004722:	4b4a      	ldr	r3, [pc, #296]	@ (800484c <MX_SAI2_Init+0x140>)
 8004724:	2240      	movs	r2, #64	@ 0x40
 8004726:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004728:	4b48      	ldr	r3, [pc, #288]	@ (800484c <MX_SAI2_Init+0x140>)
 800472a:	2200      	movs	r2, #0
 800472c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800472e:	4b47      	ldr	r3, [pc, #284]	@ (800484c <MX_SAI2_Init+0x140>)
 8004730:	2200      	movs	r2, #0
 8004732:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8004734:	4b45      	ldr	r3, [pc, #276]	@ (800484c <MX_SAI2_Init+0x140>)
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800473a:	4b44      	ldr	r3, [pc, #272]	@ (800484c <MX_SAI2_Init+0x140>)
 800473c:	2200      	movs	r2, #0
 800473e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8004740:	4b42      	ldr	r3, [pc, #264]	@ (800484c <MX_SAI2_Init+0x140>)
 8004742:	2200      	movs	r2, #0
 8004744:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8004746:	4b41      	ldr	r3, [pc, #260]	@ (800484c <MX_SAI2_Init+0x140>)
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800474c:	4b3f      	ldr	r3, [pc, #252]	@ (800484c <MX_SAI2_Init+0x140>)
 800474e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8004752:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004754:	4b3d      	ldr	r3, [pc, #244]	@ (800484c <MX_SAI2_Init+0x140>)
 8004756:	2200      	movs	r2, #0
 8004758:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800475a:	4b3c      	ldr	r3, [pc, #240]	@ (800484c <MX_SAI2_Init+0x140>)
 800475c:	2200      	movs	r2, #0
 800475e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8004760:	4b3a      	ldr	r3, [pc, #232]	@ (800484c <MX_SAI2_Init+0x140>)
 8004762:	2200      	movs	r2, #0
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8004766:	4b39      	ldr	r3, [pc, #228]	@ (800484c <MX_SAI2_Init+0x140>)
 8004768:	2200      	movs	r2, #0
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800476c:	4b37      	ldr	r3, [pc, #220]	@ (800484c <MX_SAI2_Init+0x140>)
 800476e:	2208      	movs	r2, #8
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8004772:	4b36      	ldr	r3, [pc, #216]	@ (800484c <MX_SAI2_Init+0x140>)
 8004774:	2201      	movs	r2, #1
 8004776:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8004778:	4b34      	ldr	r3, [pc, #208]	@ (800484c <MX_SAI2_Init+0x140>)
 800477a:	2200      	movs	r2, #0
 800477c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800477e:	4b33      	ldr	r3, [pc, #204]	@ (800484c <MX_SAI2_Init+0x140>)
 8004780:	2200      	movs	r2, #0
 8004782:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8004784:	4b31      	ldr	r3, [pc, #196]	@ (800484c <MX_SAI2_Init+0x140>)
 8004786:	2200      	movs	r2, #0
 8004788:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800478a:	4b30      	ldr	r3, [pc, #192]	@ (800484c <MX_SAI2_Init+0x140>)
 800478c:	2200      	movs	r2, #0
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004790:	4b2e      	ldr	r3, [pc, #184]	@ (800484c <MX_SAI2_Init+0x140>)
 8004792:	2200      	movs	r2, #0
 8004794:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8004796:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <MX_SAI2_Init+0x140>)
 8004798:	2201      	movs	r2, #1
 800479a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800479c:	4b2b      	ldr	r3, [pc, #172]	@ (800484c <MX_SAI2_Init+0x140>)
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80047a2:	482a      	ldr	r0, [pc, #168]	@ (800484c <MX_SAI2_Init+0x140>)
 80047a4:	f00a fb08 	bl	800edb8 <HAL_SAI_Init>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 80047ae:	f001 fba5 	bl	8005efc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80047b2:	4b28      	ldr	r3, [pc, #160]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047b4:	4a28      	ldr	r2, [pc, #160]	@ (8004858 <MX_SAI2_Init+0x14c>)
 80047b6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80047b8:	4b26      	ldr	r3, [pc, #152]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80047be:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047c0:	2203      	movs	r2, #3
 80047c2:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80047c4:	4b23      	ldr	r3, [pc, #140]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047c6:	2240      	movs	r2, #64	@ 0x40
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80047ca:	4b22      	ldr	r3, [pc, #136]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80047d0:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80047d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047d8:	2201      	movs	r2, #1
 80047da:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80047dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047de:	2200      	movs	r2, #0
 80047e0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80047e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80047e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80047ee:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80047f4:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80047fa:	4b16      	ldr	r3, [pc, #88]	@ (8004854 <MX_SAI2_Init+0x148>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8004800:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <MX_SAI2_Init+0x148>)
 8004802:	2208      	movs	r2, #8
 8004804:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8004806:	4b13      	ldr	r3, [pc, #76]	@ (8004854 <MX_SAI2_Init+0x148>)
 8004808:	2201      	movs	r2, #1
 800480a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800480c:	4b11      	ldr	r3, [pc, #68]	@ (8004854 <MX_SAI2_Init+0x148>)
 800480e:	2200      	movs	r2, #0
 8004810:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <MX_SAI2_Init+0x148>)
 8004814:	2200      	movs	r2, #0
 8004816:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8004818:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <MX_SAI2_Init+0x148>)
 800481a:	2200      	movs	r2, #0
 800481c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <MX_SAI2_Init+0x148>)
 8004820:	2200      	movs	r2, #0
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <MX_SAI2_Init+0x148>)
 8004826:	2200      	movs	r2, #0
 8004828:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800482a:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <MX_SAI2_Init+0x148>)
 800482c:	2201      	movs	r2, #1
 800482e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8004830:	4b08      	ldr	r3, [pc, #32]	@ (8004854 <MX_SAI2_Init+0x148>)
 8004832:	2200      	movs	r2, #0
 8004834:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8004836:	4807      	ldr	r0, [pc, #28]	@ (8004854 <MX_SAI2_Init+0x148>)
 8004838:	f00a fabe 	bl	800edb8 <HAL_SAI_Init>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 8004842:	f001 fb5b 	bl	8005efc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000055c 	.word	0x2000055c
 8004850:	40015c04 	.word	0x40015c04
 8004854:	200005e0 	.word	0x200005e0
 8004858:	40015c24 	.word	0x40015c24

0800485c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004860:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <MX_SDMMC1_SD_Init+0x38>)
 8004862:	4a0d      	ldr	r2, [pc, #52]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 8004864:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <MX_SDMMC1_SD_Init+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800486c:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <MX_SDMMC1_SD_Init+0x38>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004872:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <MX_SDMMC1_SD_Init+0x38>)
 8004874:	2200      	movs	r2, #0
 8004876:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004878:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <MX_SDMMC1_SD_Init+0x38>)
 800487a:	2200      	movs	r2, #0
 800487c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <MX_SDMMC1_SD_Init+0x38>)
 8004880:	2200      	movs	r2, #0
 8004882:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004884:	4b03      	ldr	r3, [pc, #12]	@ (8004894 <MX_SDMMC1_SD_Init+0x38>)
 8004886:	2200      	movs	r2, #0
 8004888:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	20000724 	.word	0x20000724
 8004898:	40012c00 	.word	0x40012c00

0800489c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048a0:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048a2:	4a15      	ldr	r2, [pc, #84]	@ (80048f8 <MX_USART1_UART_Init+0x5c>)
 80048a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048a6:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ae:	4b11      	ldr	r3, [pc, #68]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048b4:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048ba:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048c0:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048c2:	220c      	movs	r2, #12
 80048c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048cc:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048d8:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048da:	2200      	movs	r2, #0
 80048dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048de:	4805      	ldr	r0, [pc, #20]	@ (80048f4 <MX_USART1_UART_Init+0x58>)
 80048e0:	f00c fa54 	bl	8010d8c <HAL_UART_Init>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80048ea:	f001 fb07 	bl	8005efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000868 	.word	0x20000868
 80048f8:	40011000 	.word	0x40011000

080048fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004902:	4b18      	ldr	r3, [pc, #96]	@ (8004964 <MX_DMA_Init+0x68>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	4a17      	ldr	r2, [pc, #92]	@ (8004964 <MX_DMA_Init+0x68>)
 8004908:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800490c:	6313      	str	r3, [r2, #48]	@ 0x30
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <MX_DMA_Init+0x68>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	2105      	movs	r1, #5
 800491e:	203b      	movs	r0, #59	@ 0x3b
 8004920:	f006 fc2c 	bl	800b17c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004924:	203b      	movs	r0, #59	@ 0x3b
 8004926:	f006 fc45 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2105      	movs	r1, #5
 800492e:	203c      	movs	r0, #60	@ 0x3c
 8004930:	f006 fc24 	bl	800b17c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004934:	203c      	movs	r0, #60	@ 0x3c
 8004936:	f006 fc3d 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800493a:	2200      	movs	r2, #0
 800493c:	2105      	movs	r1, #5
 800493e:	2045      	movs	r0, #69	@ 0x45
 8004940:	f006 fc1c 	bl	800b17c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004944:	2045      	movs	r0, #69	@ 0x45
 8004946:	f006 fc35 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	2105      	movs	r1, #5
 800494e:	2046      	movs	r0, #70	@ 0x46
 8004950:	f006 fc14 	bl	800b17c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004954:	2046      	movs	r0, #70	@ 0x46
 8004956:	f006 fc2d 	bl	800b1b4 <HAL_NVIC_EnableIRQ>

}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800

08004968 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	611a      	str	r2, [r3, #16]
 800497c:	615a      	str	r2, [r3, #20]
 800497e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004980:	4b3a      	ldr	r3, [pc, #232]	@ (8004a6c <MX_FMC_Init+0x104>)
 8004982:	4a3b      	ldr	r2, [pc, #236]	@ (8004a70 <MX_FMC_Init+0x108>)
 8004984:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8004986:	4b39      	ldr	r3, [pc, #228]	@ (8004a6c <MX_FMC_Init+0x104>)
 8004988:	2200      	movs	r2, #0
 800498a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800498c:	4b37      	ldr	r3, [pc, #220]	@ (8004a6c <MX_FMC_Init+0x104>)
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004992:	4b36      	ldr	r3, [pc, #216]	@ (8004a6c <MX_FMC_Init+0x104>)
 8004994:	2204      	movs	r2, #4
 8004996:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004998:	4b34      	ldr	r3, [pc, #208]	@ (8004a6c <MX_FMC_Init+0x104>)
 800499a:	2210      	movs	r2, #16
 800499c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800499e:	4b33      	ldr	r3, [pc, #204]	@ (8004a6c <MX_FMC_Init+0x104>)
 80049a0:	2240      	movs	r2, #64	@ 0x40
 80049a2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80049a4:	4b31      	ldr	r3, [pc, #196]	@ (8004a6c <MX_FMC_Init+0x104>)
 80049a6:	2280      	movs	r2, #128	@ 0x80
 80049a8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80049aa:	4b30      	ldr	r3, [pc, #192]	@ (8004a6c <MX_FMC_Init+0x104>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80049b0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a6c <MX_FMC_Init+0x104>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80049b6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a6c <MX_FMC_Init+0x104>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80049bc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a6c <MX_FMC_Init+0x104>)
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80049c2:	2310      	movs	r3, #16
 80049c4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80049c6:	2310      	movs	r3, #16
 80049c8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80049ca:	2310      	movs	r3, #16
 80049cc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80049ce:	2310      	movs	r3, #16
 80049d0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80049d2:	2310      	movs	r3, #16
 80049d4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80049d6:	2310      	movs	r3, #16
 80049d8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80049da:	2310      	movs	r3, #16
 80049dc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4822      	ldr	r0, [pc, #136]	@ (8004a6c <MX_FMC_Init+0x104>)
 80049e4:	f00b fe62 	bl	80106ac <HAL_SDRAM_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80049ee:	f001 fa85 	bl	8005efc <Error_Handler>
  }

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <MX_FMC_Init+0x10c>)
 80049f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a70 <MX_FMC_Init+0x108>)
 80049f6:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80049f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <MX_FMC_Init+0x10c>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80049fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a04:	4b1b      	ldr	r3, [pc, #108]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a06:	2204      	movs	r2, #4
 8004a08:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004a10:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a12:	2240      	movs	r2, #64	@ 0x40
 8004a14:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8004a16:	4b17      	ldr	r3, [pc, #92]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a18:	2280      	movs	r2, #128	@ 0x80
 8004a1a:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004a1c:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8004a28:	4b12      	ldr	r3, [pc, #72]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8004a2e:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8004a34:	2310      	movs	r3, #16
 8004a36:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8004a38:	2310      	movs	r3, #16
 8004a3a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8004a40:	2310      	movs	r3, #16
 8004a42:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8004a44:	2310      	movs	r3, #16
 8004a46:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8004a48:	2310      	movs	r3, #16
 8004a4a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	4619      	mov	r1, r3
 8004a54:	4807      	ldr	r0, [pc, #28]	@ (8004a74 <MX_FMC_Init+0x10c>)
 8004a56:	f00b fe29 	bl	80106ac <HAL_SDRAM_Init>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_FMC_Init+0xfc>
  {
    Error_Handler( );
 8004a60:	f001 fa4c 	bl	8005efc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8004a64:	bf00      	nop
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200008f0 	.word	0x200008f0
 8004a70:	a0000140 	.word	0xa0000140
 8004a74:	20000924 	.word	0x20000924

08004a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b090      	sub	sp, #64	@ 0x40
 8004a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a8e:	4bae      	ldr	r3, [pc, #696]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	4aad      	ldr	r2, [pc, #692]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004a94:	f043 0310 	orr.w	r3, r3, #16
 8004a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a9a:	4bab      	ldr	r3, [pc, #684]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004aa6:	4ba8      	ldr	r3, [pc, #672]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	4aa7      	ldr	r2, [pc, #668]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ab2:	4ba5      	ldr	r3, [pc, #660]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	4ba2      	ldr	r3, [pc, #648]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	4aa1      	ldr	r2, [pc, #644]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aca:	4b9f      	ldr	r3, [pc, #636]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ad6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	4a9b      	ldr	r2, [pc, #620]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ae2:	4b99      	ldr	r3, [pc, #612]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aee:	4b96      	ldr	r3, [pc, #600]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	4a95      	ldr	r2, [pc, #596]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004afa:	4b93      	ldr	r3, [pc, #588]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b06:	4b90      	ldr	r3, [pc, #576]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	4a8f      	ldr	r2, [pc, #572]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b12:	4b8d      	ldr	r3, [pc, #564]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004b1e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	4a89      	ldr	r2, [pc, #548]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b2a:	4b87      	ldr	r3, [pc, #540]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004b36:	4b84      	ldr	r3, [pc, #528]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	4a83      	ldr	r2, [pc, #524]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b42:	4b81      	ldr	r3, [pc, #516]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004b4e:	4b7e      	ldr	r3, [pc, #504]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	4a7d      	ldr	r2, [pc, #500]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b66:	4b78      	ldr	r3, [pc, #480]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	4a77      	ldr	r2, [pc, #476]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b6c:	f043 0320 	orr.w	r3, r3, #32
 8004b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b72:	4b75      	ldr	r3, [pc, #468]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b7e:	4b72      	ldr	r3, [pc, #456]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b82:	4a71      	ldr	r2, [pc, #452]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d48 <MX_GPIO_Init+0x2d0>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004b96:	2201      	movs	r2, #1
 8004b98:	2120      	movs	r1, #32
 8004b9a:	486c      	ldr	r0, [pc, #432]	@ (8004d4c <MX_GPIO_Init+0x2d4>)
 8004b9c:	f007 fc78 	bl	800c490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f241 010c 	movw	r1, #4108	@ 0x100c
 8004ba6:	486a      	ldr	r0, [pc, #424]	@ (8004d50 <MX_GPIO_Init+0x2d8>)
 8004ba8:	f007 fc72 	bl	800c490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8004bac:	2200      	movs	r2, #0
 8004bae:	2108      	movs	r1, #8
 8004bb0:	4868      	ldr	r0, [pc, #416]	@ (8004d54 <MX_GPIO_Init+0x2dc>)
 8004bb2:	f007 fc6d 	bl	800c490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8004bbc:	4866      	ldr	r0, [pc, #408]	@ (8004d58 <MX_GPIO_Init+0x2e0>)
 8004bbe:	f007 fc67 	bl	800c490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	21c8      	movs	r1, #200	@ 0xc8
 8004bc6:	4865      	ldr	r0, [pc, #404]	@ (8004d5c <MX_GPIO_Init+0x2e4>)
 8004bc8:	f007 fc62 	bl	800c490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8004bcc:	2308      	movs	r3, #8
 8004bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4860      	ldr	r0, [pc, #384]	@ (8004d60 <MX_GPIO_Init+0x2e8>)
 8004be0:	f007 f986 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004be4:	2304      	movs	r3, #4
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004bf4:	2309      	movs	r3, #9
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004bf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4858      	ldr	r0, [pc, #352]	@ (8004d60 <MX_GPIO_Init+0x2e8>)
 8004c00:	f007 f976 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004c04:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c12:	2303      	movs	r3, #3
 8004c14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c16:	230b      	movs	r3, #11
 8004c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c1e:	4619      	mov	r1, r3
 8004c20:	484e      	ldr	r0, [pc, #312]	@ (8004d5c <MX_GPIO_Init+0x2e4>)
 8004c22:	f007 f965 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004c26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c2c:	2312      	movs	r3, #18
 8004c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c34:	2300      	movs	r3, #0
 8004c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c38:	2304      	movs	r3, #4
 8004c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c40:	4619      	mov	r1, r3
 8004c42:	4848      	ldr	r0, [pc, #288]	@ (8004d64 <MX_GPIO_Init+0x2ec>)
 8004c44:	f007 f954 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004c48:	2310      	movs	r3, #16
 8004c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c60:	4619      	mov	r1, r3
 8004c62:	4840      	ldr	r0, [pc, #256]	@ (8004d64 <MX_GPIO_Init+0x2ec>)
 8004c64:	f007 f944 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c74:	2300      	movs	r3, #0
 8004c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004c78:	2308      	movs	r3, #8
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004c7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c80:	4619      	mov	r1, r3
 8004c82:	4832      	ldr	r0, [pc, #200]	@ (8004d4c <MX_GPIO_Init+0x2d4>)
 8004c84:	f007 f934 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c96:	2300      	movs	r3, #0
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4830      	ldr	r0, [pc, #192]	@ (8004d68 <MX_GPIO_Init+0x2f0>)
 8004ca6:	f007 f923 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8004caa:	2360      	movs	r3, #96	@ 0x60
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004cba:	230d      	movs	r3, #13
 8004cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4826      	ldr	r0, [pc, #152]	@ (8004d60 <MX_GPIO_Init+0x2e8>)
 8004cc6:	f007 f913 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8004cca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4823      	ldr	r0, [pc, #140]	@ (8004d6c <MX_GPIO_Init+0x2f4>)
 8004ce0:	f007 f906 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8004ce4:	2340      	movs	r3, #64	@ 0x40
 8004ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004ce8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8004cf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4814      	ldr	r0, [pc, #80]	@ (8004d4c <MX_GPIO_Init+0x2d4>)
 8004cfa:	f007 f8f9 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8004cfe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d10:	230a      	movs	r3, #10
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4813      	ldr	r0, [pc, #76]	@ (8004d68 <MX_GPIO_Init+0x2f0>)
 8004d1c:	f007 f8e8 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004d20:	2320      	movs	r3, #32
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d24:	2301      	movs	r3, #1
 8004d26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d34:	4619      	mov	r1, r3
 8004d36:	4805      	ldr	r0, [pc, #20]	@ (8004d4c <MX_GPIO_Init+0x2d4>)
 8004d38:	f007 f8da 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d40:	2302      	movs	r3, #2
 8004d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e013      	b.n	8004d70 <MX_GPIO_Init+0x2f8>
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40020c00 	.word	0x40020c00
 8004d50:	40022000 	.word	0x40022000
 8004d54:	40022800 	.word	0x40022800
 8004d58:	40021c00 	.word	0x40021c00
 8004d5c:	40021800 	.word	0x40021800
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40020400 	.word	0x40020400
 8004d68:	40020000 	.word	0x40020000
 8004d6c:	40022400 	.word	0x40022400
 8004d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d72:	2300      	movs	r3, #0
 8004d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004d76:	230d      	movs	r3, #13
 8004d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d7e:	4619      	mov	r1, r3
 8004d80:	48bb      	ldr	r0, [pc, #748]	@ (8005070 <MX_GPIO_Init+0x5f8>)
 8004d82:	f007 f8b5 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8004d86:	f241 030c 	movw	r3, #4108	@ 0x100c
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d94:	2300      	movs	r3, #0
 8004d96:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	48b5      	ldr	r0, [pc, #724]	@ (8005074 <MX_GPIO_Init+0x5fc>)
 8004da0:	f007 f8a6 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8004da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004daa:	2300      	movs	r3, #0
 8004dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8004db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004db6:	4619      	mov	r1, r3
 8004db8:	48af      	ldr	r0, [pc, #700]	@ (8005078 <MX_GPIO_Init+0x600>)
 8004dba:	f007 f899 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	48a9      	ldr	r0, [pc, #676]	@ (800507c <MX_GPIO_Init+0x604>)
 8004dd6:	f007 f88b 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8004dda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2302      	movs	r3, #2
 8004de2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004dec:	230d      	movs	r3, #13
 8004dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004df4:	4619      	mov	r1, r3
 8004df6:	48a2      	ldr	r0, [pc, #648]	@ (8005080 <MX_GPIO_Init+0x608>)
 8004df8:	f007 f87a 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e00:	2300      	movs	r3, #0
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4898      	ldr	r0, [pc, #608]	@ (8005070 <MX_GPIO_Init+0x5f8>)
 8004e10:	f007 f86e 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8004e14:	f248 0304 	movw	r3, #32772	@ 0x8004
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e26:	4619      	mov	r1, r3
 8004e28:	4896      	ldr	r0, [pc, #600]	@ (8005084 <MX_GPIO_Init+0x60c>)
 8004e2a:	f007 f861 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e32:	2302      	movs	r3, #2
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e3e:	2305      	movs	r3, #5
 8004e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004e42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e46:	4619      	mov	r1, r3
 8004e48:	488a      	ldr	r0, [pc, #552]	@ (8005074 <MX_GPIO_Init+0x5fc>)
 8004e4a:	f007 f851 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin;
 8004e4e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e54:	2301      	movs	r3, #1
 8004e56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e64:	4619      	mov	r1, r3
 8004e66:	4887      	ldr	r0, [pc, #540]	@ (8005084 <MX_GPIO_Init+0x60c>)
 8004e68:	f007 f842 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D0_Pin;
 8004e6c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e72:	2302      	movs	r3, #2
 8004e74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004e7e:	230d      	movs	r3, #13
 8004e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e86:	4619      	mov	r1, r3
 8004e88:	487e      	ldr	r0, [pc, #504]	@ (8005084 <MX_GPIO_Init+0x60c>)
 8004e8a:	f007 f831 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e92:	2302      	movs	r3, #2
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4872      	ldr	r0, [pc, #456]	@ (8005074 <MX_GPIO_Init+0x5fc>)
 8004eaa:	f007 f821 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004ec4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ec8:	4619      	mov	r1, r3
 8004eca:	486f      	ldr	r0, [pc, #444]	@ (8005088 <MX_GPIO_Init+0x610>)
 8004ecc:	f007 f810 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004ed0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004ed6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8004ee0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4863      	ldr	r0, [pc, #396]	@ (8005074 <MX_GPIO_Init+0x5fc>)
 8004ee8:	f007 f802 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004eec:	23c0      	movs	r3, #192	@ 0xc0
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004efc:	2308      	movs	r3, #8
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f04:	4619      	mov	r1, r3
 8004f06:	485c      	ldr	r0, [pc, #368]	@ (8005078 <MX_GPIO_Init+0x600>)
 8004f08:	f006 fff2 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f10:	2302      	movs	r3, #2
 8004f12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004f1c:	230a      	movs	r3, #10
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8004f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f24:	4619      	mov	r1, r3
 8004f26:	4857      	ldr	r0, [pc, #348]	@ (8005084 <MX_GPIO_Init+0x60c>)
 8004f28:	f006 ffe2 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8004f2c:	23c8      	movs	r3, #200	@ 0xc8
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f30:	2301      	movs	r3, #1
 8004f32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f40:	4619      	mov	r1, r3
 8004f42:	484f      	ldr	r0, [pc, #316]	@ (8005080 <MX_GPIO_Init+0x608>)
 8004f44:	f006 ffd4 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin|ULPI_D2_Pin
 8004f48:	f643 4303 	movw	r3, #15363	@ 0x3c03
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f56:	2303      	movs	r3, #3
 8004f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004f5a:	230a      	movs	r3, #10
 8004f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f62:	4619      	mov	r1, r3
 8004f64:	4849      	ldr	r0, [pc, #292]	@ (800508c <MX_GPIO_Init+0x614>)
 8004f66:	f006 ffc3 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8004f6a:	2305      	movs	r3, #5
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f76:	2303      	movs	r3, #3
 8004f78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f82:	4619      	mov	r1, r3
 8004f84:	483c      	ldr	r0, [pc, #240]	@ (8005078 <MX_GPIO_Init+0x600>)
 8004f86:	f006 ffb3 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004f8a:	2332      	movs	r3, #50	@ 0x32
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f96:	2303      	movs	r3, #3
 8004f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f9a:	230b      	movs	r3, #11
 8004f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4834      	ldr	r0, [pc, #208]	@ (8005078 <MX_GPIO_Init+0x600>)
 8004fa6:	f006 ffa3 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004faa:	2304      	movs	r3, #4
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fba:	2309      	movs	r3, #9
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4831      	ldr	r0, [pc, #196]	@ (800508c <MX_GPIO_Init+0x614>)
 8004fc6:	f006 ff93 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8004fca:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fdc:	2309      	movs	r3, #9
 8004fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4822      	ldr	r0, [pc, #136]	@ (8005070 <MX_GPIO_Init+0x5f8>)
 8004fe8:	f006 ff82 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8004fec:	2304      	movs	r3, #4
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8004ff8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4820      	ldr	r0, [pc, #128]	@ (8005080 <MX_GPIO_Init+0x608>)
 8005000:	f006 ff76 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005004:	2386      	movs	r3, #134	@ 0x86
 8005006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005010:	2303      	movs	r3, #3
 8005012:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005014:	230b      	movs	r3, #11
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800501c:	4619      	mov	r1, r3
 800501e:	481a      	ldr	r0, [pc, #104]	@ (8005088 <MX_GPIO_Init+0x610>)
 8005020:	f006 ff66 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8005024:	2350      	movs	r3, #80	@ 0x50
 8005026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005028:	2302      	movs	r3, #2
 800502a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005030:	2300      	movs	r3, #0
 8005032:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005034:	230d      	movs	r3, #13
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005038:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800503c:	4619      	mov	r1, r3
 800503e:	4812      	ldr	r0, [pc, #72]	@ (8005088 <MX_GPIO_Init+0x610>)
 8005040:	f006 ff56 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8005044:	2328      	movs	r3, #40	@ 0x28
 8005046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005048:	2302      	movs	r3, #2
 800504a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	2300      	movs	r3, #0
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005050:	2303      	movs	r3, #3
 8005052:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8005054:	230a      	movs	r3, #10
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005058:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800505c:	4619      	mov	r1, r3
 800505e:	480a      	ldr	r0, [pc, #40]	@ (8005088 <MX_GPIO_Init+0x610>)
 8005060:	f006 ff46 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8005064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800506a:	2312      	movs	r3, #18
 800506c:	633b      	str	r3, [r7, #48]	@ 0x30
 800506e:	e00f      	b.n	8005090 <MX_GPIO_Init+0x618>
 8005070:	40020c00 	.word	0x40020c00
 8005074:	40022000 	.word	0x40022000
 8005078:	40020800 	.word	0x40020800
 800507c:	40022800 	.word	0x40022800
 8005080:	40021800 	.word	0x40021800
 8005084:	40021c00 	.word	0x40021c00
 8005088:	40020000 	.word	0x40020000
 800508c:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005094:	2303      	movs	r3, #3
 8005096:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005098:	2304      	movs	r3, #4
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 800509c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050a0:	4619      	mov	r1, r3
 80050a2:	480c      	ldr	r0, [pc, #48]	@ (80050d4 <MX_GPIO_Init+0x65c>)
 80050a4:	f006 ff24 	bl	800bef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80050a8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80050ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ae:	2302      	movs	r3, #2
 80050b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b6:	2300      	movs	r3, #0
 80050b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050ba:	2305      	movs	r3, #5
 80050bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050c2:	4619      	mov	r1, r3
 80050c4:	4804      	ldr	r0, [pc, #16]	@ (80050d8 <MX_GPIO_Init+0x660>)
 80050c6:	f006 ff13 	bl	800bef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050ca:	bf00      	nop
 80050cc:	3740      	adds	r7, #64	@ 0x40
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40021c00 	.word	0x40021c00
 80050d8:	40020400 	.word	0x40020400

080050dc <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
	char a = 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 80050e6:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	1df9      	adds	r1, r7, #7
 80050ec:	2300      	movs	r3, #0
 80050ee:	2200      	movs	r2, #0
 80050f0:	f00e fa56 	bl	80135a0 <xQueueGenericSendFromISR>
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	2000096c 	.word	0x2000096c

08005100 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
	char a = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 800510a:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	1df9      	adds	r1, r7, #7
 8005110:	2300      	movs	r3, #0
 8005112:	2200      	movs	r2, #0
 8005114:	f00e fa44 	bl	80135a0 <xQueueGenericSendFromISR>
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	2000096c 	.word	0x2000096c

08005124 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		updateJoystickDirection();
 800512c:	f7fe fdce 	bl	8003ccc <updateJoystickDirection>
		osDelay(10);
 8005130:	200a      	movs	r0, #10
 8005132:	f00d fd03 	bl	8012b3c <osDelay>
		updateJoystickDirection();
 8005136:	bf00      	nop
 8005138:	e7f8      	b.n	800512c <StartDefaultTask+0x8>
	...

0800513c <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b0d1      	sub	sp, #324	@ 0x144
 8005140:	af00      	add	r7, sp, #0
 8005142:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005146:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800514a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
	vTaskSuspend(manageBodyPartsHandle);
 800514c:	4bb8      	ldr	r3, [pc, #736]	@ (8005430 <StartDisplayTask+0x2f4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f00f f9df 	bl	8014514 <vTaskSuspend>
	vTaskSuspend(tsHandlerTaskHandle);
 8005156:	4bb7      	ldr	r3, [pc, #732]	@ (8005434 <StartDisplayTask+0x2f8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f00f f9da 	bl	8014514 <vTaskSuspend>
	vTaskSuspend(playSongTaskHandle);
 8005160:	4bb5      	ldr	r3, [pc, #724]	@ (8005438 <StartDisplayTask+0x2fc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f00f f9d5 	bl	8014514 <vTaskSuspend>
	vTaskDelay(100);
 800516a:	2064      	movs	r0, #100	@ 0x64
 800516c:	f00f f99a 	bl	80144a4 <vTaskDelay>

	uwInternelBuffer = (uint8_t *)0xC0260000;
 8005170:	4bb2      	ldr	r3, [pc, #712]	@ (800543c <StartDisplayTask+0x300>)
 8005172:	4ab3      	ldr	r2, [pc, #716]	@ (8005440 <StartDisplayTask+0x304>)
 8005174:	601a      	str	r2, [r3, #0]
	uwInternelBuffer2 = (uint8_t *)0xC0360000;
 8005176:	4bb3      	ldr	r3, [pc, #716]	@ (8005444 <StartDisplayTask+0x308>)
 8005178:	4ab3      	ldr	r2, [pc, #716]	@ (8005448 <StartDisplayTask+0x30c>)
 800517a:	601a      	str	r2, [r3, #0]

	uint8_t counter;

	/*##- Initialize the Directory Files pointers (heap) ###################*/
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 800517c:	2300      	movs	r3, #0
 800517e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005182:	e01e      	b.n	80051c2 <StartDisplayTask+0x86>
	{
		pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 8005184:	f897 413f 	ldrb.w	r4, [r7, #319]	@ 0x13f
 8005188:	200b      	movs	r0, #11
 800518a:	f010 fddb 	bl	8015d44 <malloc>
 800518e:	4603      	mov	r3, r0
 8005190:	461a      	mov	r2, r3
 8005192:	4bae      	ldr	r3, [pc, #696]	@ (800544c <StartDisplayTask+0x310>)
 8005194:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if (pDirectoryFiles[counter] == NULL)
 8005198:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800519c:	4aab      	ldr	r2, [pc, #684]	@ (800544c <StartDisplayTask+0x310>)
 800519e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d108      	bne.n	80051b8 <StartDisplayTask+0x7c>
		{
			/* Set the Text Color */
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80051a6:	48aa      	ldr	r0, [pc, #680]	@ (8005450 <StartDisplayTask+0x314>)
 80051a8:	f001 fda6 	bl	8006cf8 <BSP_LCD_SetTextColor>

			BSP_LCD_DisplayStringAtLine(8,
 80051ac:	49a9      	ldr	r1, [pc, #676]	@ (8005454 <StartDisplayTask+0x318>)
 80051ae:	2008      	movs	r0, #8
 80051b0:	f001 ff38 	bl	8007024 <BSP_LCD_DisplayStringAtLine>
										(uint8_t *)"  Cannot allocate memory ");

			while (1)
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <StartDisplayTask+0x78>
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80051b8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80051bc:	3301      	adds	r3, #1
 80051be:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80051c2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80051c6:	2b18      	cmp	r3, #24
 80051c8:	d9dc      	bls.n	8005184 <StartDisplayTask+0x48>
			}
		}
	}

	// Lancement de la musique
	SD_Init();
 80051ca:	f7fe fef7 	bl	8003fbc <SD_Init>
	Charge_Wave(0);
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fe ff82 	bl	80040d8 <Charge_Wave>

	vTaskResume(manageBodyPartsHandle);
 80051d4:	4b96      	ldr	r3, [pc, #600]	@ (8005430 <StartDisplayTask+0x2f4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f00f fa65 	bl	80146a8 <vTaskResume>
	vTaskResume(tsHandlerTaskHandle);
 80051de:	4b95      	ldr	r3, [pc, #596]	@ (8005434 <StartDisplayTask+0x2f8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f00f fa60 	bl	80146a8 <vTaskResume>
	vTaskResume(playSongTaskHandle);
 80051e8:	4b93      	ldr	r3, [pc, #588]	@ (8005438 <StartDisplayTask+0x2fc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f00f fa5b 	bl	80146a8 <vTaskResume>

	vTaskDelay(1000);
 80051f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051f6:	f00f f955 	bl	80144a4 <vTaskDelay>
	/* Infinite loop */
	for (;;)
	{
		if ((gameOver && !lastMove) || gamePaused || !gameStarted)
 80051fa:	4b97      	ldr	r3, [pc, #604]	@ (8005458 <StartDisplayTask+0x31c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <StartDisplayTask+0xce>
 8005202:	4b96      	ldr	r3, [pc, #600]	@ (800545c <StartDisplayTask+0x320>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <StartDisplayTask+0xde>
 800520a:	4b95      	ldr	r3, [pc, #596]	@ (8005460 <StartDisplayTask+0x324>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <StartDisplayTask+0xde>
 8005212:	4b94      	ldr	r3, [pc, #592]	@ (8005464 <StartDisplayTask+0x328>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d110      	bne.n	800523c <StartDisplayTask+0x100>
		{ // revoir la condition
			xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 800521a:	4b93      	ldr	r3, [pc, #588]	@ (8005468 <StartDisplayTask+0x32c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f04f 31ff 	mov.w	r1, #4294967295
 8005222:	4618      	mov	r0, r3
 8005224:	f00e fbe0 	bl	80139e8 <xQueueSemaphoreTake>
			displayGameStatus();
 8005228:	f7fe fe5e 	bl	8003ee8 <displayGameStatus>
			xSemaphoreGive(displayMutexHandle);
 800522c:	4b8e      	ldr	r3, [pc, #568]	@ (8005468 <StartDisplayTask+0x32c>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	2200      	movs	r2, #0
 8005234:	2100      	movs	r1, #0
 8005236:	f00e f8a9 	bl	801338c <xQueueGenericSend>
 800523a:	e22e      	b.n	800569a <StartDisplayTask+0x55e>
		}
		else
		{
			// On convertit la direction en texte
			char directionText[100];
			switch (direction)
 800523c:	4b8b      	ldr	r3, [pc, #556]	@ (800546c <StartDisplayTask+0x330>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d827      	bhi.n	8005294 <StartDisplayTask+0x158>
 8005244:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <StartDisplayTask+0x110>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	0800525d 	.word	0x0800525d
 8005250:	0800526b 	.word	0x0800526b
 8005254:	08005279 	.word	0x08005279
 8005258:	08005287 	.word	0x08005287
			{
			case Up:
				sprintf(directionText, (char *)"Direction: Up   ");
 800525c:	f107 0308 	add.w	r3, r7, #8
 8005260:	4983      	ldr	r1, [pc, #524]	@ (8005470 <StartDisplayTask+0x334>)
 8005262:	4618      	mov	r0, r3
 8005264:	f010 ff24 	bl	80160b0 <siprintf>
				break;
 8005268:	e014      	b.n	8005294 <StartDisplayTask+0x158>
			case Down:
				sprintf(directionText, (char *)"Direction: Down ");
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4981      	ldr	r1, [pc, #516]	@ (8005474 <StartDisplayTask+0x338>)
 8005270:	4618      	mov	r0, r3
 8005272:	f010 ff1d 	bl	80160b0 <siprintf>
				break;
 8005276:	e00d      	b.n	8005294 <StartDisplayTask+0x158>
			case Left:
				sprintf(directionText, (char *)"Direction: Left ");
 8005278:	f107 0308 	add.w	r3, r7, #8
 800527c:	497e      	ldr	r1, [pc, #504]	@ (8005478 <StartDisplayTask+0x33c>)
 800527e:	4618      	mov	r0, r3
 8005280:	f010 ff16 	bl	80160b0 <siprintf>
				break;
 8005284:	e006      	b.n	8005294 <StartDisplayTask+0x158>
			case Right:
				sprintf(directionText, (char *)"Direction: Right");
 8005286:	f107 0308 	add.w	r3, r7, #8
 800528a:	497c      	ldr	r1, [pc, #496]	@ (800547c <StartDisplayTask+0x340>)
 800528c:	4618      	mov	r0, r3
 800528e:	f010 ff0f 	bl	80160b0 <siprintf>
				break;
 8005292:	bf00      	nop
			}
			// On convertit le score en texte
			char scoreText[100];
			sprintf(scoreText, (char *)"Score: %d", snakeSize);
 8005294:	4b7a      	ldr	r3, [pc, #488]	@ (8005480 <StartDisplayTask+0x344>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800529e:	4979      	ldr	r1, [pc, #484]	@ (8005484 <StartDisplayTask+0x348>)
 80052a0:	4618      	mov	r0, r3
 80052a2:	f010 ff05 	bl	80160b0 <siprintf>

			// On convertit la vitesse en texte
			char speedText[100];
			sprintf(speedText, (char *)"Speed: %d Hz", speed);
 80052a6:	4b78      	ldr	r3, [pc, #480]	@ (8005488 <StartDisplayTask+0x34c>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80052b0:	4976      	ldr	r1, [pc, #472]	@ (800548c <StartDisplayTask+0x350>)
 80052b2:	4618      	mov	r0, r3
 80052b4:	f010 fefc 	bl	80160b0 <siprintf>

			xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 80052b8:	4b6b      	ldr	r3, [pc, #428]	@ (8005468 <StartDisplayTask+0x32c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f04f 31ff 	mov.w	r1, #4294967295
 80052c0:	4618      	mov	r0, r3
 80052c2:	f00e fb91 	bl	80139e8 <xQueueSemaphoreTake>
			BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80052c6:	4872      	ldr	r0, [pc, #456]	@ (8005490 <StartDisplayTask+0x354>)
 80052c8:	f001 fd16 	bl	8006cf8 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawHLine(0, 8 * 32, BSP_LCD_GetXSize());
 80052cc:	f001 fc7c 	bl	8006bc8 <BSP_LCD_GetXSize>
 80052d0:	4603      	mov	r3, r0
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052da:	2000      	movs	r0, #0
 80052dc:	f001 feba 	bl	8007054 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(0, 8 * 32 + 1, BSP_LCD_GetXSize());
 80052e0:	f001 fc72 	bl	8006bc8 <BSP_LCD_GetXSize>
 80052e4:	4603      	mov	r3, r0
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	f240 1101 	movw	r1, #257	@ 0x101
 80052ee:	2000      	movs	r0, #0
 80052f0:	f001 feb0 	bl	8007054 <BSP_LCD_DrawHLine>

			// On affiche la direction, le score et la vitesse
			BSP_LCD_DisplayStringAt(0, 8 * 32 + 2, (uint8_t *)directionText, LEFT_MODE);
 80052f4:	f107 0208 	add.w	r2, r7, #8
 80052f8:	2303      	movs	r3, #3
 80052fa:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80052fe:	2000      	movs	r0, #0
 8005300:	f001 fdc8 	bl	8006e94 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(200, 8 * 32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8005304:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005308:	2303      	movs	r3, #3
 800530a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800530e:	20c8      	movs	r0, #200	@ 0xc8
 8005310:	f001 fdc0 	bl	8006e94 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(350, 8 * 32 + 2, (uint8_t *)speedText, LEFT_MODE);
 8005314:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8005318:	2303      	movs	r3, #3
 800531a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800531e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8005322:	f001 fdb7 	bl	8006e94 <BSP_LCD_DisplayStringAt>

			// On affiche la tête du snake
			if (!gameOver)
 8005326:	4b4c      	ldr	r3, [pc, #304]	@ (8005458 <StartDisplayTask+0x31c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d13e      	bne.n	80053ac <StartDisplayTask+0x270>
				switch (headPart)
 800532e:	4b59      	ldr	r3, [pc, #356]	@ (8005494 <StartDisplayTask+0x358>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d83a      	bhi.n	80053ac <StartDisplayTask+0x270>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <StartDisplayTask+0x200>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005365 	.word	0x08005365
 8005340:	0800534d 	.word	0x0800534d
 8005344:	0800537d 	.word	0x0800537d
 8005348:	08005395 	.word	0x08005395
				{
				case HeadBottom:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_bottom_81CD4B_bmp);
 800534c:	4b52      	ldr	r3, [pc, #328]	@ (8005498 <StartDisplayTask+0x35c>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	015b      	lsls	r3, r3, #5
 8005352:	4618      	mov	r0, r3
 8005354:	4b50      	ldr	r3, [pc, #320]	@ (8005498 <StartDisplayTask+0x35c>)
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	015b      	lsls	r3, r3, #5
 800535a:	4a50      	ldr	r2, [pc, #320]	@ (800549c <StartDisplayTask+0x360>)
 800535c:	4619      	mov	r1, r3
 800535e:	f001 ff1f 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 8005362:	e023      	b.n	80053ac <StartDisplayTask+0x270>
				case HeadTop:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_top_81CD4B_bmp);
 8005364:	4b4c      	ldr	r3, [pc, #304]	@ (8005498 <StartDisplayTask+0x35c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	015b      	lsls	r3, r3, #5
 800536a:	4618      	mov	r0, r3
 800536c:	4b4a      	ldr	r3, [pc, #296]	@ (8005498 <StartDisplayTask+0x35c>)
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	015b      	lsls	r3, r3, #5
 8005372:	4a4b      	ldr	r2, [pc, #300]	@ (80054a0 <StartDisplayTask+0x364>)
 8005374:	4619      	mov	r1, r3
 8005376:	f001 ff13 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 800537a:	e017      	b.n	80053ac <StartDisplayTask+0x270>
				case HeadLeft:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_left_81CD4B_bmp);
 800537c:	4b46      	ldr	r3, [pc, #280]	@ (8005498 <StartDisplayTask+0x35c>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	015b      	lsls	r3, r3, #5
 8005382:	4618      	mov	r0, r3
 8005384:	4b44      	ldr	r3, [pc, #272]	@ (8005498 <StartDisplayTask+0x35c>)
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	015b      	lsls	r3, r3, #5
 800538a:	4a46      	ldr	r2, [pc, #280]	@ (80054a4 <StartDisplayTask+0x368>)
 800538c:	4619      	mov	r1, r3
 800538e:	f001 ff07 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 8005392:	e00b      	b.n	80053ac <StartDisplayTask+0x270>
				case HeadRight:
					BSP_LCD_DrawBitmap(snakeHeadPosition[0] * 32, snakeHeadPosition[1] * 32, (uint8_t *)images_bmp_color_head_right_81CD4B_bmp);
 8005394:	4b40      	ldr	r3, [pc, #256]	@ (8005498 <StartDisplayTask+0x35c>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	015b      	lsls	r3, r3, #5
 800539a:	4618      	mov	r0, r3
 800539c:	4b3e      	ldr	r3, [pc, #248]	@ (8005498 <StartDisplayTask+0x35c>)
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	015b      	lsls	r3, r3, #5
 80053a2:	4a41      	ldr	r2, [pc, #260]	@ (80054a8 <StartDisplayTask+0x36c>)
 80053a4:	4619      	mov	r1, r3
 80053a6:	f001 fefb 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 80053aa:	bf00      	nop
				}

			// On affiche le corps du snake
			for (int i = 0; i < snakeSize; i++)
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80053b2:	e0d4      	b.n	800555e <StartDisplayTask+0x422>
			{
				switch (snakeBodyParts[i])
 80053b4:	4a3d      	ldr	r2, [pc, #244]	@ (80054ac <StartDisplayTask+0x370>)
 80053b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053ba:	4413      	add	r3, r2
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b05      	cmp	r3, #5
 80053c0:	f200 80c8 	bhi.w	8005554 <StartDisplayTask+0x418>
 80053c4:	a201      	add	r2, pc, #4	@ (adr r2, 80053cc <StartDisplayTask+0x290>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	080053e5 	.word	0x080053e5
 80053d0:	0800540b 	.word	0x0800540b
 80053d4:	080054bd 	.word	0x080054bd
 80053d8:	080054e3 	.word	0x080054e3
 80053dc:	08005509 	.word	0x08005509
 80053e0:	0800552f 	.word	0x0800552f
				{
				case BottomLeft:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_left_81CD4B_bmp);
 80053e4:	4a32      	ldr	r2, [pc, #200]	@ (80054b0 <StartDisplayTask+0x374>)
 80053e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80053ee:	015b      	lsls	r3, r3, #5
 80053f0:	4618      	mov	r0, r3
 80053f2:	4a2f      	ldr	r2, [pc, #188]	@ (80054b0 <StartDisplayTask+0x374>)
 80053f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	015b      	lsls	r3, r3, #5
 8005400:	4a2c      	ldr	r2, [pc, #176]	@ (80054b4 <StartDisplayTask+0x378>)
 8005402:	4619      	mov	r1, r3
 8005404:	f001 fecc 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 8005408:	e0a4      	b.n	8005554 <StartDisplayTask+0x418>
				case BottomRight:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_right_81CD4B_bmp);
 800540a:	4a29      	ldr	r2, [pc, #164]	@ (80054b0 <StartDisplayTask+0x374>)
 800540c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005410:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005414:	015b      	lsls	r3, r3, #5
 8005416:	4618      	mov	r0, r3
 8005418:	4a25      	ldr	r2, [pc, #148]	@ (80054b0 <StartDisplayTask+0x374>)
 800541a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	4413      	add	r3, r2
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	015b      	lsls	r3, r3, #5
 8005426:	4a24      	ldr	r2, [pc, #144]	@ (80054b8 <StartDisplayTask+0x37c>)
 8005428:	4619      	mov	r1, r3
 800542a:	f001 feb9 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 800542e:	e091      	b.n	8005554 <StartDisplayTask+0x418>
 8005430:	20000960 	.word	0x20000960
 8005434:	20000964 	.word	0x20000964
 8005438:	20000968 	.word	0x20000968
 800543c:	200009e4 	.word	0x200009e4
 8005440:	c0260000 	.word	0xc0260000
 8005444:	200009e8 	.word	0x200009e8
 8005448:	c0360000 	.word	0xc0360000
 800544c:	20000980 	.word	0x20000980
 8005450:	ffff0000 	.word	0xffff0000
 8005454:	08017368 	.word	0x08017368
 8005458:	20000ab0 	.word	0x20000ab0
 800545c:	20000030 	.word	0x20000030
 8005460:	20000aac 	.word	0x20000aac
 8005464:	20000aa8 	.word	0x20000aa8
 8005468:	20000970 	.word	0x20000970
 800546c:	20000a24 	.word	0x20000a24
 8005470:	08017384 	.word	0x08017384
 8005474:	08017398 	.word	0x08017398
 8005478:	080173ac 	.word	0x080173ac
 800547c:	080173c0 	.word	0x080173c0
 8005480:	20000aa0 	.word	0x20000aa0
 8005484:	080173d4 	.word	0x080173d4
 8005488:	2000002c 	.word	0x2000002c
 800548c:	080173e0 	.word	0x080173e0
 8005490:	ffa52a2a 	.word	0xffa52a2a
 8005494:	20000a25 	.word	0x20000a25
 8005498:	20000034 	.word	0x20000034
 800549c:	0801a6b8 	.word	0x0801a6b8
 80054a0:	0801b344 	.word	0x0801b344
 80054a4:	0801bfd0 	.word	0x0801bfd0
 80054a8:	0801cc5c 	.word	0x0801cc5c
 80054ac:	20000a28 	.word	0x20000a28
 80054b0:	20000ab4 	.word	0x20000ab4
 80054b4:	08018114 	.word	0x08018114
 80054b8:	08018da0 	.word	0x08018da0
				case BottomTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_bottom_top_81CD4B_bmp);
 80054bc:	4a79      	ldr	r2, [pc, #484]	@ (80056a4 <StartDisplayTask+0x568>)
 80054be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80054c6:	015b      	lsls	r3, r3, #5
 80054c8:	4618      	mov	r0, r3
 80054ca:	4a76      	ldr	r2, [pc, #472]	@ (80056a4 <StartDisplayTask+0x568>)
 80054cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	4413      	add	r3, r2
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	015b      	lsls	r3, r3, #5
 80054d8:	4a73      	ldr	r2, [pc, #460]	@ (80056a8 <StartDisplayTask+0x56c>)
 80054da:	4619      	mov	r1, r3
 80054dc:	f001 fe60 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 80054e0:	e038      	b.n	8005554 <StartDisplayTask+0x418>
				case LeftRight:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_left_right_81CD4B_bmp);
 80054e2:	4a70      	ldr	r2, [pc, #448]	@ (80056a4 <StartDisplayTask+0x568>)
 80054e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054e8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80054ec:	015b      	lsls	r3, r3, #5
 80054ee:	4618      	mov	r0, r3
 80054f0:	4a6c      	ldr	r2, [pc, #432]	@ (80056a4 <StartDisplayTask+0x568>)
 80054f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	015b      	lsls	r3, r3, #5
 80054fe:	4a6b      	ldr	r2, [pc, #428]	@ (80056ac <StartDisplayTask+0x570>)
 8005500:	4619      	mov	r1, r3
 8005502:	f001 fe4d 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 8005506:	e025      	b.n	8005554 <StartDisplayTask+0x418>
				case LeftTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_left_top_81CD4B_bmp);
 8005508:	4a66      	ldr	r2, [pc, #408]	@ (80056a4 <StartDisplayTask+0x568>)
 800550a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800550e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005512:	015b      	lsls	r3, r3, #5
 8005514:	4618      	mov	r0, r3
 8005516:	4a63      	ldr	r2, [pc, #396]	@ (80056a4 <StartDisplayTask+0x568>)
 8005518:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	015b      	lsls	r3, r3, #5
 8005524:	4a62      	ldr	r2, [pc, #392]	@ (80056b0 <StartDisplayTask+0x574>)
 8005526:	4619      	mov	r1, r3
 8005528:	f001 fe3a 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 800552c:	e012      	b.n	8005554 <StartDisplayTask+0x418>
				case RightTop:
					BSP_LCD_DrawBitmap(snakeBodyPosition[i][0] * 32, snakeBodyPosition[i][1] * 32, (uint8_t *)images_bmp_color_right_top_81CD4B_bmp);
 800552e:	4a5d      	ldr	r2, [pc, #372]	@ (80056a4 <StartDisplayTask+0x568>)
 8005530:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005534:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005538:	015b      	lsls	r3, r3, #5
 800553a:	4618      	mov	r0, r3
 800553c:	4a59      	ldr	r2, [pc, #356]	@ (80056a4 <StartDisplayTask+0x568>)
 800553e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	4413      	add	r3, r2
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	015b      	lsls	r3, r3, #5
 800554a:	4a5a      	ldr	r2, [pc, #360]	@ (80056b4 <StartDisplayTask+0x578>)
 800554c:	4619      	mov	r1, r3
 800554e:	f001 fe27 	bl	80071a0 <BSP_LCD_DrawBitmap>
					break;
 8005552:	bf00      	nop
			for (int i = 0; i < snakeSize; i++)
 8005554:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005558:	3301      	adds	r3, #1
 800555a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800555e:	4b56      	ldr	r3, [pc, #344]	@ (80056b8 <StartDisplayTask+0x57c>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005568:	4293      	cmp	r3, r2
 800556a:	f6ff af23 	blt.w	80053b4 <StartDisplayTask+0x278>
				}
			}

			// On affiche la queue du snake
			switch (tailPart)
 800556e:	4b53      	ldr	r3, [pc, #332]	@ (80056bc <StartDisplayTask+0x580>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d83a      	bhi.n	80055ec <StartDisplayTask+0x4b0>
 8005576:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <StartDisplayTask+0x440>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	0800558d 	.word	0x0800558d
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055bd 	.word	0x080055bd
 8005588:	080055d5 	.word	0x080055d5
			{
			case TailBottom:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_bottom_81CD4B_bmp);
 800558c:	4b4c      	ldr	r3, [pc, #304]	@ (80056c0 <StartDisplayTask+0x584>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	015b      	lsls	r3, r3, #5
 8005592:	4618      	mov	r0, r3
 8005594:	4b4a      	ldr	r3, [pc, #296]	@ (80056c0 <StartDisplayTask+0x584>)
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	015b      	lsls	r3, r3, #5
 800559a:	4a4a      	ldr	r2, [pc, #296]	@ (80056c4 <StartDisplayTask+0x588>)
 800559c:	4619      	mov	r1, r3
 800559e:	f001 fdff 	bl	80071a0 <BSP_LCD_DrawBitmap>
				break;
 80055a2:	e023      	b.n	80055ec <StartDisplayTask+0x4b0>
			case TailTop:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_top_81CD4B_bmp);
 80055a4:	4b46      	ldr	r3, [pc, #280]	@ (80056c0 <StartDisplayTask+0x584>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	015b      	lsls	r3, r3, #5
 80055aa:	4618      	mov	r0, r3
 80055ac:	4b44      	ldr	r3, [pc, #272]	@ (80056c0 <StartDisplayTask+0x584>)
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	015b      	lsls	r3, r3, #5
 80055b2:	4a45      	ldr	r2, [pc, #276]	@ (80056c8 <StartDisplayTask+0x58c>)
 80055b4:	4619      	mov	r1, r3
 80055b6:	f001 fdf3 	bl	80071a0 <BSP_LCD_DrawBitmap>
				break;
 80055ba:	e017      	b.n	80055ec <StartDisplayTask+0x4b0>
			case TailLeft:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_left_81CD4B_bmp);
 80055bc:	4b40      	ldr	r3, [pc, #256]	@ (80056c0 <StartDisplayTask+0x584>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	015b      	lsls	r3, r3, #5
 80055c2:	4618      	mov	r0, r3
 80055c4:	4b3e      	ldr	r3, [pc, #248]	@ (80056c0 <StartDisplayTask+0x584>)
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	015b      	lsls	r3, r3, #5
 80055ca:	4a40      	ldr	r2, [pc, #256]	@ (80056cc <StartDisplayTask+0x590>)
 80055cc:	4619      	mov	r1, r3
 80055ce:	f001 fde7 	bl	80071a0 <BSP_LCD_DrawBitmap>
				break;
 80055d2:	e00b      	b.n	80055ec <StartDisplayTask+0x4b0>
			case TailRight:
				BSP_LCD_DrawBitmap(snakeTailPosition[0] * 32, snakeTailPosition[1] * 32, (uint8_t *)images_bmp_color_tail_right_81CD4B_bmp);
 80055d4:	4b3a      	ldr	r3, [pc, #232]	@ (80056c0 <StartDisplayTask+0x584>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	015b      	lsls	r3, r3, #5
 80055da:	4618      	mov	r0, r3
 80055dc:	4b38      	ldr	r3, [pc, #224]	@ (80056c0 <StartDisplayTask+0x584>)
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	015b      	lsls	r3, r3, #5
 80055e2:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <StartDisplayTask+0x594>)
 80055e4:	4619      	mov	r1, r3
 80055e6:	f001 fddb 	bl	80071a0 <BSP_LCD_DrawBitmap>
				break;
 80055ea:	bf00      	nop
			}

			// On efface l'ancienne queue avec un carré vert
			if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1]))
 80055ec:	4b39      	ldr	r3, [pc, #228]	@ (80056d4 <StartDisplayTask+0x598>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11a      	bne.n	800562a <StartDisplayTask+0x4ee>
 80055f4:	4b38      	ldr	r3, [pc, #224]	@ (80056d8 <StartDisplayTask+0x59c>)
 80055f6:	781a      	ldrb	r2, [r3, #0]
 80055f8:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <StartDisplayTask+0x5a0>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d105      	bne.n	800560c <StartDisplayTask+0x4d0>
 8005600:	4b35      	ldr	r3, [pc, #212]	@ (80056d8 <StartDisplayTask+0x59c>)
 8005602:	785a      	ldrb	r2, [r3, #1]
 8005604:	4b35      	ldr	r3, [pc, #212]	@ (80056dc <StartDisplayTask+0x5a0>)
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	429a      	cmp	r2, r3
 800560a:	d00e      	beq.n	800562a <StartDisplayTask+0x4ee>
			{
				// On efface l'ancienne queue si:
				//    - le snake a avancé (la queue n'est pas restée à la même position)
				// ou
				//    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
				BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 800560c:	4834      	ldr	r0, [pc, #208]	@ (80056e0 <StartDisplayTask+0x5a4>)
 800560e:	f001 fb73 	bl	8006cf8 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(oldTailPosition[0] * 32, oldTailPosition[1] * 32, 32, 32);
 8005612:	4b32      	ldr	r3, [pc, #200]	@ (80056dc <StartDisplayTask+0x5a0>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	015b      	lsls	r3, r3, #5
 8005618:	b298      	uxth	r0, r3
 800561a:	4b30      	ldr	r3, [pc, #192]	@ (80056dc <StartDisplayTask+0x5a0>)
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	015b      	lsls	r3, r3, #5
 8005620:	b299      	uxth	r1, r3
 8005622:	2320      	movs	r3, #32
 8005624:	2220      	movs	r2, #32
 8005626:	f001 fe6d 	bl	8007304 <BSP_LCD_FillRect>
			}

			// On affiche les pommes
			for (int i = 0; i < NBApple; i++)
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005630:	e01f      	b.n	8005672 <StartDisplayTask+0x536>
				if (applePosition[i][0] != -1)
 8005632:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <StartDisplayTask+0x5a8>)
 8005634:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005638:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d012      	beq.n	8005668 <StartDisplayTask+0x52c>
					BSP_LCD_DrawBitmap(applePosition[i][0] * 32, applePosition[i][1] * 32, (uint8_t *)images_bmp_color_apple_81CD4B_bmp);
 8005642:	4a28      	ldr	r2, [pc, #160]	@ (80056e4 <StartDisplayTask+0x5a8>)
 8005644:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005648:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 800564c:	015b      	lsls	r3, r3, #5
 800564e:	4618      	mov	r0, r3
 8005650:	4a24      	ldr	r2, [pc, #144]	@ (80056e4 <StartDisplayTask+0x5a8>)
 8005652:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800565e:	015b      	lsls	r3, r3, #5
 8005660:	4a21      	ldr	r2, [pc, #132]	@ (80056e8 <StartDisplayTask+0x5ac>)
 8005662:	4619      	mov	r1, r3
 8005664:	f001 fd9c 	bl	80071a0 <BSP_LCD_DrawBitmap>
			for (int i = 0; i < NBApple; i++)
 8005668:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800566c:	3301      	adds	r3, #1
 800566e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005672:	2304      	movs	r3, #4
 8005674:	461a      	mov	r2, r3
 8005676:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800567a:	4293      	cmp	r3, r2
 800567c:	dbd9      	blt.n	8005632 <StartDisplayTask+0x4f6>
			xSemaphoreGive(displayMutexHandle);
 800567e:	4b1b      	ldr	r3, [pc, #108]	@ (80056ec <StartDisplayTask+0x5b0>)
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	2300      	movs	r3, #0
 8005684:	2200      	movs	r2, #0
 8005686:	2100      	movs	r1, #0
 8005688:	f00d fe80 	bl	801338c <xQueueGenericSend>

			if (gameOver)
 800568c:	4b18      	ldr	r3, [pc, #96]	@ (80056f0 <StartDisplayTask+0x5b4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <StartDisplayTask+0x55e>
				lastMove = 0;
 8005694:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <StartDisplayTask+0x5b8>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
		}

		osDelay(90);
 800569a:	205a      	movs	r0, #90	@ 0x5a
 800569c:	f00d fa4e 	bl	8012b3c <osDelay>
		if ((gameOver && !lastMove) || gamePaused || !gameStarted)
 80056a0:	e5ab      	b.n	80051fa <StartDisplayTask+0xbe>
 80056a2:	bf00      	nop
 80056a4:	20000ab4 	.word	0x20000ab4
 80056a8:	08019a2c 	.word	0x08019a2c
 80056ac:	0801d8e8 	.word	0x0801d8e8
 80056b0:	0801e574 	.word	0x0801e574
 80056b4:	0801f200 	.word	0x0801f200
 80056b8:	20000aa0 	.word	0x20000aa0
 80056bc:	2000002d 	.word	0x2000002d
 80056c0:	20000038 	.word	0x20000038
 80056c4:	0801fe8c 	.word	0x0801fe8c
 80056c8:	08020b18 	.word	0x08020b18
 80056cc:	080217a4 	.word	0x080217a4
 80056d0:	08022430 	.word	0x08022430
 80056d4:	20000aa4 	.word	0x20000aa4
 80056d8:	20000034 	.word	0x20000034
 80056dc:	20000ba4 	.word	0x20000ba4
 80056e0:	ff81cd4b 	.word	0xff81cd4b
 80056e4:	20000ba8 	.word	0x20000ba8
 80056e8:	08017488 	.word	0x08017488
 80056ec:	20000970 	.word	0x20000970
 80056f0:	20000ab0 	.word	0x20000ab0
 80056f4:	20000030 	.word	0x20000030

080056f8 <StartManageBodyParts>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80056f8:	b5b0      	push	{r4, r5, r7, lr}
 80056fa:	b08e      	sub	sp, #56	@ 0x38
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8005700:	f00f f94e 	bl	80149a0 <xTaskGetTickCount>
 8005704:	4603      	mov	r3, r0
 8005706:	60fb      	str	r3, [r7, #12]
	TickType_t delay = pdMS_TO_TICKS(1000. / initSpeed);
 8005708:	2303      	movs	r3, #3
 800570a:	4618      	mov	r0, r3
 800570c:	f7fa ff22 	bl	8000554 <__aeabi_i2d>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	f04f 0000 	mov.w	r0, #0
 8005718:	4991      	ldr	r1, [pc, #580]	@ (8005960 <StartManageBodyParts+0x268>)
 800571a:	f7fb f8af 	bl	800087c <__aeabi_ddiv>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4610      	mov	r0, r2
 8005724:	4619      	mov	r1, r3
 8005726:	f7fb f991 	bl	8000a4c <__aeabi_d2uiz>
 800572a:	4603      	mov	r3, r0
 800572c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	4a8b      	ldr	r2, [pc, #556]	@ (8005964 <StartManageBodyParts+0x26c>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	099b      	lsrs	r3, r3, #6
 800573c:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;)
	{
		delay = pdMS_TO_TICKS(1000. / speed);
 800573e:	4b8a      	ldr	r3, [pc, #552]	@ (8005968 <StartManageBodyParts+0x270>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa ff06 	bl	8000554 <__aeabi_i2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	f04f 0000 	mov.w	r0, #0
 8005750:	4983      	ldr	r1, [pc, #524]	@ (8005960 <StartManageBodyParts+0x268>)
 8005752:	f7fb f893 	bl	800087c <__aeabi_ddiv>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4610      	mov	r0, r2
 800575c:	4619      	mov	r1, r3
 800575e:	f7fb f975 	bl	8000a4c <__aeabi_d2uiz>
 8005762:	4603      	mov	r3, r0
 8005764:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	4a7d      	ldr	r2, [pc, #500]	@ (8005964 <StartManageBodyParts+0x26c>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	617b      	str	r3, [r7, #20]

		if (!gameOver && !gamePaused && gameStarted)
 8005776:	4b7d      	ldr	r3, [pc, #500]	@ (800596c <StartManageBodyParts+0x274>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 82ba 	bne.w	8005cf4 <StartManageBodyParts+0x5fc>
 8005780:	4b7b      	ldr	r3, [pc, #492]	@ (8005970 <StartManageBodyParts+0x278>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 82b5 	bne.w	8005cf4 <StartManageBodyParts+0x5fc>
 800578a:	4b7a      	ldr	r3, [pc, #488]	@ (8005974 <StartManageBodyParts+0x27c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 82b0 	beq.w	8005cf4 <StartManageBodyParts+0x5fc>
		{
			// Le jeu est en cours

			// On sauvegarde la position de la queue et de la tête
			oldTailPosition[0] = snakeTailPosition[0];
 8005794:	4b78      	ldr	r3, [pc, #480]	@ (8005978 <StartManageBodyParts+0x280>)
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	4b78      	ldr	r3, [pc, #480]	@ (800597c <StartManageBodyParts+0x284>)
 800579a:	701a      	strb	r2, [r3, #0]
			oldTailPosition[1] = snakeTailPosition[1];
 800579c:	4b76      	ldr	r3, [pc, #472]	@ (8005978 <StartManageBodyParts+0x280>)
 800579e:	785a      	ldrb	r2, [r3, #1]
 80057a0:	4b76      	ldr	r3, [pc, #472]	@ (800597c <StartManageBodyParts+0x284>)
 80057a2:	705a      	strb	r2, [r3, #1]

			uint8_t oldHeadPosition[2];
			oldHeadPosition[0] = snakeHeadPosition[0];
 80057a4:	4b76      	ldr	r3, [pc, #472]	@ (8005980 <StartManageBodyParts+0x288>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	723b      	strb	r3, [r7, #8]
			oldHeadPosition[1] = snakeHeadPosition[1];
 80057aa:	4b75      	ldr	r3, [pc, #468]	@ (8005980 <StartManageBodyParts+0x288>)
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	727b      	strb	r3, [r7, #9]

			// On met a jour la position de la tête en fonction de la direction
			switch (direction)
 80057b0:	4b74      	ldr	r3, [pc, #464]	@ (8005984 <StartManageBodyParts+0x28c>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d833      	bhi.n	8005820 <StartManageBodyParts+0x128>
 80057b8:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <StartManageBodyParts+0xc8>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e5 	.word	0x080057e5
 80057c8:	080057f9 	.word	0x080057f9
 80057cc:	0800580d 	.word	0x0800580d
			{
			case Up:
				headPart = HeadTop;
 80057d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005988 <StartManageBodyParts+0x290>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[1]--;
 80057d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005980 <StartManageBodyParts+0x288>)
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	3b01      	subs	r3, #1
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4b68      	ldr	r3, [pc, #416]	@ (8005980 <StartManageBodyParts+0x288>)
 80057e0:	705a      	strb	r2, [r3, #1]
				break;
 80057e2:	e01d      	b.n	8005820 <StartManageBodyParts+0x128>
			case Down:
				headPart = HeadBottom;
 80057e4:	4b68      	ldr	r3, [pc, #416]	@ (8005988 <StartManageBodyParts+0x290>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[1]++;
 80057ea:	4b65      	ldr	r3, [pc, #404]	@ (8005980 <StartManageBodyParts+0x288>)
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	3301      	adds	r3, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	4b63      	ldr	r3, [pc, #396]	@ (8005980 <StartManageBodyParts+0x288>)
 80057f4:	705a      	strb	r2, [r3, #1]
				break;
 80057f6:	e013      	b.n	8005820 <StartManageBodyParts+0x128>
			case Left:
				headPart = HeadLeft;
 80057f8:	4b63      	ldr	r3, [pc, #396]	@ (8005988 <StartManageBodyParts+0x290>)
 80057fa:	2202      	movs	r2, #2
 80057fc:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[0]--;
 80057fe:	4b60      	ldr	r3, [pc, #384]	@ (8005980 <StartManageBodyParts+0x288>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	3b01      	subs	r3, #1
 8005804:	b2da      	uxtb	r2, r3
 8005806:	4b5e      	ldr	r3, [pc, #376]	@ (8005980 <StartManageBodyParts+0x288>)
 8005808:	701a      	strb	r2, [r3, #0]
				break;
 800580a:	e009      	b.n	8005820 <StartManageBodyParts+0x128>
			case Right:
				headPart = HeadRight;
 800580c:	4b5e      	ldr	r3, [pc, #376]	@ (8005988 <StartManageBodyParts+0x290>)
 800580e:	2203      	movs	r2, #3
 8005810:	701a      	strb	r2, [r3, #0]
				snakeHeadPosition[0]++;
 8005812:	4b5b      	ldr	r3, [pc, #364]	@ (8005980 <StartManageBodyParts+0x288>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	4b59      	ldr	r3, [pc, #356]	@ (8005980 <StartManageBodyParts+0x288>)
 800581c:	701a      	strb	r2, [r3, #0]
				break;
 800581e:	bf00      	nop
			}

			// on vérifie si on est mort
			if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0)
 8005820:	4b57      	ldr	r3, [pc, #348]	@ (8005980 <StartManageBodyParts+0x288>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	220f      	movs	r2, #15
 8005826:	4293      	cmp	r3, r2
 8005828:	d204      	bcs.n	8005834 <StartManageBodyParts+0x13c>
 800582a:	4b55      	ldr	r3, [pc, #340]	@ (8005980 <StartManageBodyParts+0x288>)
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2208      	movs	r2, #8
 8005830:	4293      	cmp	r3, r2
 8005832:	d303      	bcc.n	800583c <StartManageBodyParts+0x144>
			{
				// On a touché un mur
				gameOver = 1;
 8005834:	4b4d      	ldr	r3, [pc, #308]	@ (800596c <StartManageBodyParts+0x274>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e01f      	b.n	800587c <StartManageBodyParts+0x184>
			}
			else
			{
				for (int i = 0; i < snakeSize; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005840:	e016      	b.n	8005870 <StartManageBodyParts+0x178>
				{
					if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1])
 8005842:	4b4f      	ldr	r3, [pc, #316]	@ (8005980 <StartManageBodyParts+0x288>)
 8005844:	781a      	ldrb	r2, [r3, #0]
 8005846:	4951      	ldr	r1, [pc, #324]	@ (800598c <StartManageBodyParts+0x294>)
 8005848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800584e:	429a      	cmp	r2, r3
 8005850:	d10b      	bne.n	800586a <StartManageBodyParts+0x172>
 8005852:	4b4b      	ldr	r3, [pc, #300]	@ (8005980 <StartManageBodyParts+0x288>)
 8005854:	785a      	ldrb	r2, [r3, #1]
 8005856:	494d      	ldr	r1, [pc, #308]	@ (800598c <StartManageBodyParts+0x294>)
 8005858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	440b      	add	r3, r1
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	429a      	cmp	r2, r3
 8005862:	d102      	bne.n	800586a <StartManageBodyParts+0x172>
					{
						// On a touché notre corps
						gameOver = 1;
 8005864:	4b41      	ldr	r3, [pc, #260]	@ (800596c <StartManageBodyParts+0x274>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < snakeSize; i++)
 800586a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586c:	3301      	adds	r3, #1
 800586e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005870:	4b47      	ldr	r3, [pc, #284]	@ (8005990 <StartManageBodyParts+0x298>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005878:	4293      	cmp	r3, r2
 800587a:	dbe2      	blt.n	8005842 <StartManageBodyParts+0x14a>
				}
			}
			// Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

			// On vérifie si on a mangé la pomme avant de bouger le corps et la queue
			appleEaten = 0;
 800587c:	4b45      	ldr	r3, [pc, #276]	@ (8005994 <StartManageBodyParts+0x29c>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < NBApple; i++)
 8005882:	2300      	movs	r3, #0
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005886:	e10e      	b.n	8005aa6 <StartManageBodyParts+0x3ae>
			{
				if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1])
 8005888:	4b3d      	ldr	r3, [pc, #244]	@ (8005980 <StartManageBodyParts+0x288>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	4619      	mov	r1, r3
 800588e:	4a42      	ldr	r2, [pc, #264]	@ (8005998 <StartManageBodyParts+0x2a0>)
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005896:	4299      	cmp	r1, r3
 8005898:	f040 8102 	bne.w	8005aa0 <StartManageBodyParts+0x3a8>
 800589c:	4b38      	ldr	r3, [pc, #224]	@ (8005980 <StartManageBodyParts+0x288>)
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	4619      	mov	r1, r3
 80058a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005998 <StartManageBodyParts+0x2a0>)
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80058ae:	4299      	cmp	r1, r3
 80058b0:	f040 80f6 	bne.w	8005aa0 <StartManageBodyParts+0x3a8>
				{
					snakeSize++;
 80058b4:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <StartManageBodyParts+0x298>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4b34      	ldr	r3, [pc, #208]	@ (8005990 <StartManageBodyParts+0x298>)
 80058be:	701a      	strb	r2, [r3, #0]
					appleEaten = 1;
 80058c0:	4b34      	ldr	r3, [pc, #208]	@ (8005994 <StartManageBodyParts+0x29c>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

					// On augmente la vitesse de 1Hz a chaque palier
					for (int i = 0; i < 5; i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ca:	e011      	b.n	80058f0 <StartManageBodyParts+0x1f8>
					{
						if (snakeSize == palierIncreaseSpeed[i])
 80058cc:	4a33      	ldr	r2, [pc, #204]	@ (800599c <StartManageBodyParts+0x2a4>)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	4413      	add	r3, r2
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005990 <StartManageBodyParts+0x298>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d106      	bne.n	80058ea <StartManageBodyParts+0x1f2>
						{
							speed++;
 80058dc:	4b22      	ldr	r3, [pc, #136]	@ (8005968 <StartManageBodyParts+0x270>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	4b20      	ldr	r3, [pc, #128]	@ (8005968 <StartManageBodyParts+0x270>)
 80058e6:	701a      	strb	r2, [r3, #0]
							break;
 80058e8:	e005      	b.n	80058f6 <StartManageBodyParts+0x1fe>
					for (int i = 0; i < 5; i++)
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	3301      	adds	r3, #1
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	ddea      	ble.n	80058cc <StartManageBodyParts+0x1d4>
						}
					}

					// On ajoute un bodyPart à la queue
					for (int i = snakeSize - 1; i > 0; i--)
 80058f6:	4b26      	ldr	r3, [pc, #152]	@ (8005990 <StartManageBodyParts+0x298>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	e020      	b.n	8005942 <StartManageBodyParts+0x24a>
					{
						snakeBodyParts[i] = snakeBodyParts[i - 1];
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	3b01      	subs	r3, #1
 8005904:	4a26      	ldr	r2, [pc, #152]	@ (80059a0 <StartManageBodyParts+0x2a8>)
 8005906:	5cd1      	ldrb	r1, [r2, r3]
 8005908:	4a25      	ldr	r2, [pc, #148]	@ (80059a0 <StartManageBodyParts+0x2a8>)
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	4413      	add	r3, r2
 800590e:	460a      	mov	r2, r1
 8005910:	701a      	strb	r2, [r3, #0]
						snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	3b01      	subs	r3, #1
 8005916:	4a1d      	ldr	r2, [pc, #116]	@ (800598c <StartManageBodyParts+0x294>)
 8005918:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800591c:	4a1b      	ldr	r2, [pc, #108]	@ (800598c <StartManageBodyParts+0x294>)
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	3b01      	subs	r3, #1
 8005928:	4a18      	ldr	r2, [pc, #96]	@ (800598c <StartManageBodyParts+0x294>)
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4413      	add	r3, r2
 800592e:	7859      	ldrb	r1, [r3, #1]
 8005930:	4a16      	ldr	r2, [pc, #88]	@ (800598c <StartManageBodyParts+0x294>)
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4413      	add	r3, r2
 8005938:	460a      	mov	r2, r1
 800593a:	705a      	strb	r2, [r3, #1]
					for (int i = snakeSize - 1; i > 0; i--)
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	3b01      	subs	r3, #1
 8005940:	623b      	str	r3, [r7, #32]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	2b00      	cmp	r3, #0
 8005946:	dcdb      	bgt.n	8005900 <StartManageBodyParts+0x208>

					// On met a jour le premier bodyPart
					uint8_t backX;
					uint8_t backY;

					if (snakeSize > 1)
 8005948:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <StartManageBodyParts+0x298>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d929      	bls.n	80059a4 <StartManageBodyParts+0x2ac>
					{
						backX = snakeBodyPosition[0][0];
 8005950:	4b0e      	ldr	r3, [pc, #56]	@ (800598c <StartManageBodyParts+0x294>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	77fb      	strb	r3, [r7, #31]
						backY = snakeBodyPosition[0][1];
 8005956:	4b0d      	ldr	r3, [pc, #52]	@ (800598c <StartManageBodyParts+0x294>)
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	77bb      	strb	r3, [r7, #30]
 800595c:	e028      	b.n	80059b0 <StartManageBodyParts+0x2b8>
 800595e:	bf00      	nop
 8005960:	408f4000 	.word	0x408f4000
 8005964:	10624dd3 	.word	0x10624dd3
 8005968:	2000002c 	.word	0x2000002c
 800596c:	20000ab0 	.word	0x20000ab0
 8005970:	20000aac 	.word	0x20000aac
 8005974:	20000aa8 	.word	0x20000aa8
 8005978:	20000038 	.word	0x20000038
 800597c:	20000ba4 	.word	0x20000ba4
 8005980:	20000034 	.word	0x20000034
 8005984:	20000a24 	.word	0x20000a24
 8005988:	20000a25 	.word	0x20000a25
 800598c:	20000ab4 	.word	0x20000ab4
 8005990:	20000aa0 	.word	0x20000aa0
 8005994:	20000aa4 	.word	0x20000aa4
 8005998:	20000ba8 	.word	0x20000ba8
 800599c:	080230bc 	.word	0x080230bc
 80059a0:	20000a28 	.word	0x20000a28
					}
					else
					{
						backX = snakeTailPosition[0];
 80059a4:	4ba6      	ldr	r3, [pc, #664]	@ (8005c40 <StartManageBodyParts+0x548>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	77fb      	strb	r3, [r7, #31]
						backY = snakeTailPosition[1];
 80059aa:	4ba5      	ldr	r3, [pc, #660]	@ (8005c40 <StartManageBodyParts+0x548>)
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	77bb      	strb	r3, [r7, #30]
					}

					// Trouve le type de bodyPart à mettre
					snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 80059b0:	4ba4      	ldr	r3, [pc, #656]	@ (8005c44 <StartManageBodyParts+0x54c>)
 80059b2:	7818      	ldrb	r0, [r3, #0]
 80059b4:	4ba3      	ldr	r3, [pc, #652]	@ (8005c44 <StartManageBodyParts+0x54c>)
 80059b6:	7859      	ldrb	r1, [r3, #1]
 80059b8:	7a3b      	ldrb	r3, [r7, #8]
 80059ba:	7a7a      	ldrb	r2, [r7, #9]
 80059bc:	7fbd      	ldrb	r5, [r7, #30]
 80059be:	7ffc      	ldrb	r4, [r7, #31]
 80059c0:	9201      	str	r2, [sp, #4]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	462b      	mov	r3, r5
 80059c6:	4622      	mov	r2, r4
 80059c8:	f7fe f89e 	bl	8003b08 <whatBodyPart>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	4b9d      	ldr	r3, [pc, #628]	@ (8005c48 <StartManageBodyParts+0x550>)
 80059d2:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][0] = oldHeadPosition[0];
 80059d4:	7a3a      	ldrb	r2, [r7, #8]
 80059d6:	4b9d      	ldr	r3, [pc, #628]	@ (8005c4c <StartManageBodyParts+0x554>)
 80059d8:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][1] = oldHeadPosition[1];
 80059da:	7a7a      	ldrb	r2, [r7, #9]
 80059dc:	4b9b      	ldr	r3, [pc, #620]	@ (8005c4c <StartManageBodyParts+0x554>)
 80059de:	705a      	strb	r2, [r3, #1]

					// Si on a de la place pour une nouvelle pomme
					uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 80059e0:	220f      	movs	r2, #15
 80059e2:	2308      	movs	r3, #8
 80059e4:	fb12 f303 	smulbb	r3, r2, r3
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4b99      	ldr	r3, [pc, #612]	@ (8005c50 <StartManageBodyParts+0x558>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	74fb      	strb	r3, [r7, #19]
					if (NBFreeCells > NBApple)
 80059f6:	2204      	movs	r2, #4
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d945      	bls.n	8005a8a <StartManageBodyParts+0x392>
					{
						// On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
						do
						{
							applePosition[i][0] = rand() % gridSizeX;
 80059fe:	f010 fa57 	bl	8015eb0 <rand>
 8005a02:	4603      	mov	r3, r0
 8005a04:	220f      	movs	r2, #15
 8005a06:	fb93 f1f2 	sdiv	r1, r3, r2
 8005a0a:	fb01 f202 	mul.w	r2, r1, r2
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	b259      	sxtb	r1, r3
 8005a12:	4a90      	ldr	r2, [pc, #576]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
							applePosition[i][1] = rand() % gridSizeY;
 8005a1a:	f010 fa49 	bl	8015eb0 <rand>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2208      	movs	r2, #8
 8005a22:	fb93 f1f2 	sdiv	r1, r3, r2
 8005a26:	fb01 f202 	mul.w	r2, r1, r2
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	b259      	sxtb	r1, r3
 8005a2e:	4a89      	ldr	r2, [pc, #548]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	460a      	mov	r2, r1
 8005a38:	705a      	strb	r2, [r3, #1]
						} while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8005a3a:	4a86      	ldr	r2, [pc, #536]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	4983      	ldr	r1, [pc, #524]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fe f8b9 	bl	8003bcc <isSnakePosition>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ce      	bne.n	80059fe <StartManageBodyParts+0x306>
 8005a60:	4a7c      	ldr	r2, [pc, #496]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8005a68:	b2d8      	uxtb	r0, r3
 8005a6a:	4a7a      	ldr	r2, [pc, #488]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	f7fe f8f1 	bl	8003c64 <isApplePosition>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ba      	bne.n	80059fe <StartManageBodyParts+0x306>
 8005a88:	e00a      	b.n	8005aa0 <StartManageBodyParts+0x3a8>
					}
					else
					{
						applePosition[i][0] = -1;
 8005a8a:	4a72      	ldr	r2, [pc, #456]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	21ff      	movs	r1, #255	@ 0xff
 8005a90:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						applePosition[i][1] = -1;
 8005a94:	4a6f      	ldr	r2, [pc, #444]	@ (8005c54 <StartManageBodyParts+0x55c>)
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	22ff      	movs	r2, #255	@ 0xff
 8005a9e:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i < NBApple; i++)
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aa6:	2304      	movs	r3, #4
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	4293      	cmp	r3, r2
 8005aae:	f6ff aeeb 	blt.w	8005888 <StartManageBodyParts+0x190>
					}
				}
			}

			// On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
			if (!appleEaten)
 8005ab2:	4b69      	ldr	r3, [pc, #420]	@ (8005c58 <StartManageBodyParts+0x560>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 811c 	bne.w	8005cf4 <StartManageBodyParts+0x5fc>
			{
				// on met a jour la position de la queue
				if (snakeSize > 0)
 8005abc:	4b64      	ldr	r3, [pc, #400]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d011      	beq.n	8005ae8 <StartManageBodyParts+0x3f0>
				{
					snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8005ac4:	4b62      	ldr	r3, [pc, #392]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	4a60      	ldr	r2, [pc, #384]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005acc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005ad2:	701a      	strb	r2, [r3, #0]
					snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8005ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	4a5c      	ldr	r2, [pc, #368]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	785a      	ldrb	r2, [r3, #1]
 8005ae2:	4b57      	ldr	r3, [pc, #348]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005ae4:	705a      	strb	r2, [r3, #1]
 8005ae6:	e005      	b.n	8005af4 <StartManageBodyParts+0x3fc>
				}
				else
				{
					snakeTailPosition[0] = oldHeadPosition[0];
 8005ae8:	7a3a      	ldrb	r2, [r7, #8]
 8005aea:	4b55      	ldr	r3, [pc, #340]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005aec:	701a      	strb	r2, [r3, #0]
					snakeTailPosition[1] = oldHeadPosition[1];
 8005aee:	7a7a      	ldrb	r2, [r7, #9]
 8005af0:	4b53      	ldr	r3, [pc, #332]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005af2:	705a      	strb	r2, [r3, #1]
				}

				// On avance le corps
				for (int i = snakeSize - 1; i > 0; i--)
 8005af4:	4b56      	ldr	r3, [pc, #344]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e020      	b.n	8005b40 <StartManageBodyParts+0x448>
				{
					snakeBodyParts[i] = snakeBodyParts[i - 1];
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	4a51      	ldr	r2, [pc, #324]	@ (8005c48 <StartManageBodyParts+0x550>)
 8005b04:	5cd1      	ldrb	r1, [r2, r3]
 8005b06:	4a50      	ldr	r2, [pc, #320]	@ (8005c48 <StartManageBodyParts+0x550>)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	460a      	mov	r2, r1
 8005b0e:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	4a4d      	ldr	r2, [pc, #308]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b16:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8005b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	4a49      	ldr	r2, [pc, #292]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	7859      	ldrb	r1, [r3, #1]
 8005b2e:	4a47      	ldr	r2, [pc, #284]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4413      	add	r3, r2
 8005b36:	460a      	mov	r2, r1
 8005b38:	705a      	strb	r2, [r3, #1]
				for (int i = snakeSize - 1; i > 0; i--)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dcdb      	bgt.n	8005afe <StartManageBodyParts+0x406>
				}

				// On met a jour le corps
				if (snakeSize > 0)
 8005b46:	4b42      	ldr	r3, [pc, #264]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80b2 	beq.w	8005cb4 <StartManageBodyParts+0x5bc>
				{
					// On trouve le type de bodyPart à mettre juste derrière la tête
					snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8005b50:	4b3c      	ldr	r3, [pc, #240]	@ (8005c44 <StartManageBodyParts+0x54c>)
 8005b52:	7818      	ldrb	r0, [r3, #0]
 8005b54:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <StartManageBodyParts+0x54c>)
 8005b56:	7859      	ldrb	r1, [r3, #1]
 8005b58:	4b3c      	ldr	r3, [pc, #240]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b5a:	781c      	ldrb	r4, [r3, #0]
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b5e:	785d      	ldrb	r5, [r3, #1]
 8005b60:	7a3b      	ldrb	r3, [r7, #8]
 8005b62:	7a7a      	ldrb	r2, [r7, #9]
 8005b64:	9201      	str	r2, [sp, #4]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	462b      	mov	r3, r5
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	f7fd ffcc 	bl	8003b08 <whatBodyPart>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	4b34      	ldr	r3, [pc, #208]	@ (8005c48 <StartManageBodyParts+0x550>)
 8005b76:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][0] = oldHeadPosition[0];
 8005b78:	7a3a      	ldrb	r2, [r7, #8]
 8005b7a:	4b34      	ldr	r3, [pc, #208]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b7c:	701a      	strb	r2, [r3, #0]
					snakeBodyPosition[0][1] = oldHeadPosition[1];
 8005b7e:	7a7a      	ldrb	r2, [r7, #9]
 8005b80:	4b32      	ldr	r3, [pc, #200]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005b82:	705a      	strb	r2, [r3, #1]

					// On met a jour le l'orientation de la queue
					switch (snakeBodyParts[snakeSize - 1])
 8005b84:	4b32      	ldr	r3, [pc, #200]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c48 <StartManageBodyParts+0x550>)
 8005b8c:	5cd3      	ldrb	r3, [r2, r3]
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	f200 80b0 	bhi.w	8005cf4 <StartManageBodyParts+0x5fc>
 8005b94:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <StartManageBodyParts+0x4a4>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bb5 	.word	0x08005bb5
 8005ba0:	08005bd9 	.word	0x08005bd9
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005c23 	.word	0x08005c23
 8005bac:	08005c69 	.word	0x08005c69
 8005bb0:	08005c8f 	.word	0x08005c8f
					{
					case BottomLeft:
						// TailTop ou TailRight
						if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0])
 8005bb4:	4b26      	ldr	r3, [pc, #152]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4a24      	ldr	r2, [pc, #144]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005bbc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d103      	bne.n	8005bd0 <StartManageBodyParts+0x4d8>
						{
							tailPart = TailTop;
 8005bc8:	4b24      	ldr	r3, [pc, #144]	@ (8005c5c <StartManageBodyParts+0x564>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailRight;
						}
						break;
 8005bce:	e091      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
							tailPart = TailRight;
 8005bd0:	4b22      	ldr	r3, [pc, #136]	@ (8005c5c <StartManageBodyParts+0x564>)
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	701a      	strb	r2, [r3, #0]
						break;
 8005bd6:	e08d      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case BottomRight:
						// TailBottom ou TailLeft
						if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0])
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	4a1b      	ldr	r2, [pc, #108]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005be0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005be4:	4b16      	ldr	r3, [pc, #88]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d103      	bne.n	8005bf4 <StartManageBodyParts+0x4fc>
						{
							tailPart = TailTop;
 8005bec:	4b1b      	ldr	r3, [pc, #108]	@ (8005c5c <StartManageBodyParts+0x564>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailLeft;
						}
						break;
 8005bf2:	e07f      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
							tailPart = TailLeft;
 8005bf4:	4b19      	ldr	r3, [pc, #100]	@ (8005c5c <StartManageBodyParts+0x564>)
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
						break;
 8005bfa:	e07b      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case BottomTop:
						// TailTop ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1])
 8005bfc:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	4a12      	ldr	r2, [pc, #72]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	785a      	ldrb	r2, [r3, #1]
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d203      	bcs.n	8005c1a <StartManageBodyParts+0x522>
						{
							tailPart = TailTop;
 8005c12:	4b12      	ldr	r3, [pc, #72]	@ (8005c5c <StartManageBodyParts+0x564>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005c18:	e06c      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
							tailPart = TailBottom;
 8005c1a:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <StartManageBodyParts+0x564>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
						break;
 8005c20:	e068      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case LeftRight:
						// TailRight ou TailLeft
						if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0])
 8005c22:	4b0b      	ldr	r3, [pc, #44]	@ (8005c50 <StartManageBodyParts+0x558>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	4a08      	ldr	r2, [pc, #32]	@ (8005c4c <StartManageBodyParts+0x554>)
 8005c2a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8005c2e:	4b04      	ldr	r3, [pc, #16]	@ (8005c40 <StartManageBodyParts+0x548>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d214      	bcs.n	8005c60 <StartManageBodyParts+0x568>
						{
							tailPart = TailLeft;
 8005c36:	4b09      	ldr	r3, [pc, #36]	@ (8005c5c <StartManageBodyParts+0x564>)
 8005c38:	2202      	movs	r2, #2
 8005c3a:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailRight;
						}
						break;
 8005c3c:	e05a      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
 8005c3e:	bf00      	nop
 8005c40:	20000038 	.word	0x20000038
 8005c44:	20000034 	.word	0x20000034
 8005c48:	20000a28 	.word	0x20000a28
 8005c4c:	20000ab4 	.word	0x20000ab4
 8005c50:	20000aa0 	.word	0x20000aa0
 8005c54:	20000ba8 	.word	0x20000ba8
 8005c58:	20000aa4 	.word	0x20000aa4
 8005c5c:	2000002d 	.word	0x2000002d
							tailPart = TailRight;
 8005c60:	4b28      	ldr	r3, [pc, #160]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005c62:	2203      	movs	r2, #3
 8005c64:	701a      	strb	r2, [r3, #0]
						break;
 8005c66:	e045      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case LeftTop:
						// TailRight ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1])
 8005c68:	4b27      	ldr	r3, [pc, #156]	@ (8005d08 <StartManageBodyParts+0x610>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	4a27      	ldr	r2, [pc, #156]	@ (8005d0c <StartManageBodyParts+0x614>)
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	785a      	ldrb	r2, [r3, #1]
 8005c76:	4b26      	ldr	r3, [pc, #152]	@ (8005d10 <StartManageBodyParts+0x618>)
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d103      	bne.n	8005c86 <StartManageBodyParts+0x58e>
						{
							tailPart = TailRight;
 8005c7e:	4b21      	ldr	r3, [pc, #132]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005c80:	2203      	movs	r2, #3
 8005c82:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005c84:	e036      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
							tailPart = TailBottom;
 8005c86:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
						break;
 8005c8c:	e032      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case RightTop:
						// TailLeft ou TailBottom
						if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1])
 8005c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d08 <StartManageBodyParts+0x610>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	4a1d      	ldr	r2, [pc, #116]	@ (8005d0c <StartManageBodyParts+0x614>)
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	4413      	add	r3, r2
 8005c9a:	785a      	ldrb	r2, [r3, #1]
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005d10 <StartManageBodyParts+0x618>)
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d103      	bne.n	8005cac <StartManageBodyParts+0x5b4>
						{
							tailPart = TailLeft;
 8005ca4:	4b17      	ldr	r3, [pc, #92]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
						}
						else
						{
							tailPart = TailBottom;
						}
						break;
 8005caa:	e023      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
							tailPart = TailBottom;
 8005cac:	4b15      	ldr	r3, [pc, #84]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
						break;
 8005cb2:	e01f      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					}
				}
				else
				{
					switch (headPart)
 8005cb4:	4b17      	ldr	r3, [pc, #92]	@ (8005d14 <StartManageBodyParts+0x61c>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d81b      	bhi.n	8005cf4 <StartManageBodyParts+0x5fc>
 8005cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <StartManageBodyParts+0x5cc>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005cdd 	.word	0x08005cdd
 8005ccc:	08005ce5 	.word	0x08005ce5
 8005cd0:	08005ced 	.word	0x08005ced
					{
					case HeadTop:
						tailPart = TailTop;
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
						break;
 8005cda:	e00b      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case HeadBottom:
						tailPart = TailBottom;
 8005cdc:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
						break;
 8005ce2:	e007      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case HeadLeft:
						tailPart = TailLeft;
 8005ce4:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	701a      	strb	r2, [r3, #0]
						break;
 8005cea:	e003      	b.n	8005cf4 <StartManageBodyParts+0x5fc>
					case HeadRight:
						tailPart = TailRight;
 8005cec:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <StartManageBodyParts+0x60c>)
 8005cee:	2203      	movs	r2, #3
 8005cf0:	701a      	strb	r2, [r3, #0]
						break;
 8005cf2:	bf00      	nop
					}
				}
			}
		}

		vTaskDelayUntil(&xLastWakeTime, delay);
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	6979      	ldr	r1, [r7, #20]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f00e fb4c 	bl	8014398 <vTaskDelayUntil>
		delay = pdMS_TO_TICKS(1000. / speed);
 8005d00:	e51d      	b.n	800573e <StartManageBodyParts+0x46>
 8005d02:	bf00      	nop
 8005d04:	2000002d 	.word	0x2000002d
 8005d08:	20000aa0 	.word	0x20000aa0
 8005d0c:	20000ab4 	.word	0x20000ab4
 8005d10:	20000038 	.word	0x20000038
 8005d14:	20000a25 	.word	0x20000a25

08005d18 <StartTsHandler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTsHandler */
void StartTsHandler(void const * argument)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandler */
	/* Infinite loop */
	for (;;)
	{
		if (!gameStarted)
 8005d20:	4b29      	ldr	r3, [pc, #164]	@ (8005dc8 <StartTsHandler+0xb0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <StartTsHandler+0x14>
			rand();
 8005d28:	f010 f8c2 	bl	8015eb0 <rand>

		BSP_TS_GetState(&TS_State);
 8005d2c:	4827      	ldr	r0, [pc, #156]	@ (8005dcc <StartTsHandler+0xb4>)
 8005d2e:	f001 ffb5 	bl	8007c9c <BSP_TS_GetState>

		if (!TS_State.touchDetected && screenPressed)
 8005d32:	4b26      	ldr	r3, [pc, #152]	@ (8005dcc <StartTsHandler+0xb4>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d136      	bne.n	8005da8 <StartTsHandler+0x90>
 8005d3a:	4b25      	ldr	r3, [pc, #148]	@ (8005dd0 <StartTsHandler+0xb8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d032      	beq.n	8005da8 <StartTsHandler+0x90>
		{
			if (gameOver)
 8005d42:	4b24      	ldr	r3, [pc, #144]	@ (8005dd4 <StartTsHandler+0xbc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <StartTsHandler+0x3e>
			{
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d4a:	4823      	ldr	r0, [pc, #140]	@ (8005dd8 <StartTsHandler+0xc0>)
 8005d4c:	f001 f836 	bl	8006dbc <BSP_LCD_Clear>
				restartGame();
 8005d50:	f7fe f838 	bl	8003dc4 <restartGame>
 8005d54:	e028      	b.n	8005da8 <StartTsHandler+0x90>
			}
			else if (gamePaused)
 8005d56:	4b21      	ldr	r3, [pc, #132]	@ (8005ddc <StartTsHandler+0xc4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d014      	beq.n	8005d88 <StartTsHandler+0x70>
			{
				xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8005d5e:	4b20      	ldr	r3, [pc, #128]	@ (8005de0 <StartTsHandler+0xc8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f04f 31ff 	mov.w	r1, #4294967295
 8005d66:	4618      	mov	r0, r3
 8005d68:	f00d fe3e 	bl	80139e8 <xQueueSemaphoreTake>
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d6c:	481a      	ldr	r0, [pc, #104]	@ (8005dd8 <StartTsHandler+0xc0>)
 8005d6e:	f001 f825 	bl	8006dbc <BSP_LCD_Clear>
				xSemaphoreGive(displayMutexHandle);
 8005d72:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <StartTsHandler+0xc8>)
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	2300      	movs	r3, #0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	f00d fb06 	bl	801338c <xQueueGenericSend>
				gamePaused = 0;
 8005d80:	4b16      	ldr	r3, [pc, #88]	@ (8005ddc <StartTsHandler+0xc4>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	e00f      	b.n	8005da8 <StartTsHandler+0x90>
			}
			else if (!gameStarted)
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <StartTsHandler+0xb0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d108      	bne.n	8005da2 <StartTsHandler+0x8a>
			{
				BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8005d90:	4811      	ldr	r0, [pc, #68]	@ (8005dd8 <StartTsHandler+0xc0>)
 8005d92:	f001 f813 	bl	8006dbc <BSP_LCD_Clear>
				restartGame();
 8005d96:	f7fe f815 	bl	8003dc4 <restartGame>
				gameStarted = 1;
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <StartTsHandler+0xb0>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e002      	b.n	8005da8 <StartTsHandler+0x90>
			}
			else
			{
				gamePaused = 1;
 8005da2:	4b0e      	ldr	r3, [pc, #56]	@ (8005ddc <StartTsHandler+0xc4>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
			}
		}

		if (TS_State.touchDetected)
 8005da8:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <StartTsHandler+0xb4>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <StartTsHandler+0xa0>
		{
			screenPressed = 1;
 8005db0:	4b07      	ldr	r3, [pc, #28]	@ (8005dd0 <StartTsHandler+0xb8>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e002      	b.n	8005dbe <StartTsHandler+0xa6>
		}
		else
		{
			screenPressed = 0;
 8005db8:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <StartTsHandler+0xb8>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
		}

		osDelay(10);
 8005dbe:	200a      	movs	r0, #10
 8005dc0:	f00c febc 	bl	8012b3c <osDelay>
		if (!gameStarted)
 8005dc4:	e7ac      	b.n	8005d20 <StartTsHandler+0x8>
 8005dc6:	bf00      	nop
 8005dc8:	20000aa8 	.word	0x20000aa8
 8005dcc:	200009ec 	.word	0x200009ec
 8005dd0:	20000a18 	.word	0x20000a18
 8005dd4:	20000ab0 	.word	0x20000ab0
 8005dd8:	ff81cd4b 	.word	0xff81cd4b
 8005ddc:	20000aac 	.word	0x20000aac
 8005de0:	20000970 	.word	0x20000970

08005de4 <StartPlaySongTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPlaySongTask */
void StartPlaySongTask(void const * argument)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	uint32_t bytesread;
	uint32_t taille_octet;
	/* Infinite loop */
	for (;;)
	{
		xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8005dec:	4b32      	ldr	r3, [pc, #200]	@ (8005eb8 <StartPlaySongTask+0xd4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f107 0113 	add.w	r1, r7, #19
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f00d fd0d 	bl	8013818 <xQueueReceive>
		if (i == 0)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d12c      	bne.n	8005e5e <StartPlaySongTask+0x7a>
		{
			if (Bloc_Cursor++ == NB_Bloc - 1)
 8005e04:	4b2d      	ldr	r3, [pc, #180]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	492c      	ldr	r1, [pc, #176]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005e0c:	600a      	str	r2, [r1, #0]
 8005e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec0 <StartPlaySongTask+0xdc>)
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	3a01      	subs	r2, #1
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d115      	bne.n	8005e44 <StartPlaySongTask+0x60>
			{ // fin de musique
				f_close(&SDFile);
 8005e18:	482a      	ldr	r0, [pc, #168]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005e1a:	f7fd f8b3 	bl	8002f84 <f_close>
				f_open(&SDFile, Song_Name, FA_READ);
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4929      	ldr	r1, [pc, #164]	@ (8005ec8 <StartPlaySongTask+0xe4>)
 8005e22:	4828      	ldr	r0, [pc, #160]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005e24:	f7fc fcf6 	bl	8002814 <f_open>
				read_header();
 8005e28:	f7fe f916 	bl	8004058 <read_header>
				Audio_Init(freq_audio);
 8005e2c:	4b27      	ldr	r3, [pc, #156]	@ (8005ecc <StartPlaySongTask+0xe8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe f8df 	bl	8003ff4 <Audio_Init>
				f_lseek(&SDFile, 44);
 8005e36:	212c      	movs	r1, #44	@ 0x2c
 8005e38:	4822      	ldr	r0, [pc, #136]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005e3a:	f7fd f8d2 	bl	8002fe2 <f_lseek>
				Bloc_Cursor = 0;
 8005e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
			}
			f_read(&SDFile, ((uint8_t *)AUDIO_BUFFER_OUT), AUDIO_BLOCK_SIZE, (void *)&bytesread);
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e4c:	4920      	ldr	r1, [pc, #128]	@ (8005ed0 <StartPlaySongTask+0xec>)
 8005e4e:	481d      	ldr	r0, [pc, #116]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005e50:	f7fc fea1 	bl	8002b96 <f_read>

			taille_octet = 512 * Bloc_Cursor;
 8005e54:	4b19      	ldr	r3, [pc, #100]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	025b      	lsls	r3, r3, #9
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e7c6      	b.n	8005dec <StartPlaySongTask+0x8>
		}
		else
		{
			if (Bloc_Cursor++ == NB_Bloc - 1)
 8005e5e:	4b17      	ldr	r3, [pc, #92]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	4915      	ldr	r1, [pc, #84]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005e66:	600a      	str	r2, [r1, #0]
 8005e68:	4a15      	ldr	r2, [pc, #84]	@ (8005ec0 <StartPlaySongTask+0xdc>)
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d115      	bne.n	8005e9e <StartPlaySongTask+0xba>
			{
				f_close(&SDFile);
 8005e72:	4814      	ldr	r0, [pc, #80]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005e74:	f7fd f886 	bl	8002f84 <f_close>
				f_open(&SDFile, Song_Name, FA_READ);
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4913      	ldr	r1, [pc, #76]	@ (8005ec8 <StartPlaySongTask+0xe4>)
 8005e7c:	4811      	ldr	r0, [pc, #68]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005e7e:	f7fc fcc9 	bl	8002814 <f_open>
				read_header();
 8005e82:	f7fe f8e9 	bl	8004058 <read_header>
				Audio_Init(freq_audio);
 8005e86:	4b11      	ldr	r3, [pc, #68]	@ (8005ecc <StartPlaySongTask+0xe8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe f8b2 	bl	8003ff4 <Audio_Init>
				f_lseek(&SDFile, 44);
 8005e90:	212c      	movs	r1, #44	@ 0x2c
 8005e92:	480c      	ldr	r0, [pc, #48]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005e94:	f7fd f8a5 	bl	8002fe2 <f_lseek>
				Bloc_Cursor = 0;
 8005e98:	4b08      	ldr	r3, [pc, #32]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
			}
			f_read(&SDFile, ((uint8_t *)AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE), AUDIO_BLOCK_SIZE, (void *)&bytesread);
 8005e9e:	f107 030c 	add.w	r3, r7, #12
 8005ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea6:	490b      	ldr	r1, [pc, #44]	@ (8005ed4 <StartPlaySongTask+0xf0>)
 8005ea8:	4806      	ldr	r0, [pc, #24]	@ (8005ec4 <StartPlaySongTask+0xe0>)
 8005eaa:	f7fc fe74 	bl	8002b96 <f_read>

			taille_octet = 512 * Bloc_Cursor;
 8005eae:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <StartPlaySongTask+0xd8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	025b      	lsls	r3, r3, #9
 8005eb4:	617b      	str	r3, [r7, #20]
		xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8005eb6:	e799      	b.n	8005dec <StartPlaySongTask+0x8>
 8005eb8:	2000096c 	.word	0x2000096c
 8005ebc:	20000978 	.word	0x20000978
 8005ec0:	20000974 	.word	0x20000974
 8005ec4:	200012f0 	.word	0x200012f0
 8005ec8:	08017278 	.word	0x08017278
 8005ecc:	2000097c 	.word	0x2000097c
 8005ed0:	c007fc00 	.word	0xc007fc00
 8005ed4:	c007fe00 	.word	0xc007fe00

08005ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a04      	ldr	r2, [pc, #16]	@ (8005ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005eea:	f004 fc51 	bl	800a790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40001000 	.word	0x40001000

08005efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005f00:	b672      	cpsid	i
}
 8005f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8005f04:	bf00      	nop
 8005f06:	e7fd      	b.n	8005f04 <Error_Handler+0x8>

08005f08 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	@ 0x30
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a51      	ldr	r2, [pc, #324]	@ (8006058 <I2Cx_MspInit+0x150>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d14d      	bne.n	8005fb4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005f18:	4b50      	ldr	r3, [pc, #320]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f22:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f24:	4b4d      	ldr	r3, [pc, #308]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8005f30:	2380      	movs	r3, #128	@ 0x80
 8005f32:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005f34:	2312      	movs	r3, #18
 8005f36:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8005f40:	2304      	movs	r3, #4
 8005f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005f44:	f107 031c 	add.w	r3, r7, #28
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4845      	ldr	r0, [pc, #276]	@ (8006060 <I2Cx_MspInit+0x158>)
 8005f4c:	f005 ffd0 	bl	800bef0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005f56:	f107 031c 	add.w	r3, r7, #28
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4840      	ldr	r0, [pc, #256]	@ (8006060 <I2Cx_MspInit+0x158>)
 8005f5e:	f005 ffc7 	bl	800bef0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8005f62:	4b3e      	ldr	r3, [pc, #248]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	4a3d      	ldr	r2, [pc, #244]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005f7a:	4b38      	ldr	r3, [pc, #224]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	4a37      	ldr	r2, [pc, #220]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f84:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8005f86:	4b35      	ldr	r3, [pc, #212]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	4a34      	ldr	r2, [pc, #208]	@ (800605c <I2Cx_MspInit+0x154>)
 8005f8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f90:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8005f92:	2200      	movs	r2, #0
 8005f94:	210f      	movs	r1, #15
 8005f96:	2048      	movs	r0, #72	@ 0x48
 8005f98:	f005 f8f0 	bl	800b17c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005f9c:	2048      	movs	r0, #72	@ 0x48
 8005f9e:	f005 f909 	bl	800b1b4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	210f      	movs	r1, #15
 8005fa6:	2049      	movs	r0, #73	@ 0x49
 8005fa8:	f005 f8e8 	bl	800b17c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005fac:	2049      	movs	r0, #73	@ 0x49
 8005fae:	f005 f901 	bl	800b1b4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8005fb2:	e04d      	b.n	8006050 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005fb4:	4b29      	ldr	r3, [pc, #164]	@ (800605c <I2Cx_MspInit+0x154>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb8:	4a28      	ldr	r2, [pc, #160]	@ (800605c <I2Cx_MspInit+0x154>)
 8005fba:	f043 0302 	orr.w	r3, r3, #2
 8005fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fc0:	4b26      	ldr	r3, [pc, #152]	@ (800605c <I2Cx_MspInit+0x154>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fd0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005fd2:	2312      	movs	r3, #18
 8005fd4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005fde:	2304      	movs	r3, #4
 8005fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005fe2:	f107 031c 	add.w	r3, r7, #28
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	481e      	ldr	r0, [pc, #120]	@ (8006064 <I2Cx_MspInit+0x15c>)
 8005fea:	f005 ff81 	bl	800bef0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005fee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005ff4:	f107 031c 	add.w	r3, r7, #28
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	481a      	ldr	r0, [pc, #104]	@ (8006064 <I2Cx_MspInit+0x15c>)
 8005ffc:	f005 ff78 	bl	800bef0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8006000:	4b16      	ldr	r3, [pc, #88]	@ (800605c <I2Cx_MspInit+0x154>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006004:	4a15      	ldr	r2, [pc, #84]	@ (800605c <I2Cx_MspInit+0x154>)
 8006006:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800600a:	6413      	str	r3, [r2, #64]	@ 0x40
 800600c:	4b13      	ldr	r3, [pc, #76]	@ (800605c <I2Cx_MspInit+0x154>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8006018:	4b10      	ldr	r3, [pc, #64]	@ (800605c <I2Cx_MspInit+0x154>)
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	4a0f      	ldr	r2, [pc, #60]	@ (800605c <I2Cx_MspInit+0x154>)
 800601e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006022:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8006024:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <I2Cx_MspInit+0x154>)
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	4a0c      	ldr	r2, [pc, #48]	@ (800605c <I2Cx_MspInit+0x154>)
 800602a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800602e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8006030:	2200      	movs	r2, #0
 8006032:	210f      	movs	r1, #15
 8006034:	201f      	movs	r0, #31
 8006036:	f005 f8a1 	bl	800b17c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800603a:	201f      	movs	r0, #31
 800603c:	f005 f8ba 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8006040:	2200      	movs	r2, #0
 8006042:	210f      	movs	r1, #15
 8006044:	2020      	movs	r0, #32
 8006046:	f005 f899 	bl	800b17c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800604a:	2020      	movs	r0, #32
 800604c:	f005 f8b2 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
}
 8006050:	bf00      	nop
 8006052:	3730      	adds	r7, #48	@ 0x30
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000bb4 	.word	0x20000bb4
 800605c:	40023800 	.word	0x40023800
 8006060:	40021c00 	.word	0x40021c00
 8006064:	40020400 	.word	0x40020400

08006068 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f006 fd29 	bl	800cac8 <HAL_I2C_GetState>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d125      	bne.n	80060c8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a14      	ldr	r2, [pc, #80]	@ (80060d0 <I2Cx_Init+0x68>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d103      	bne.n	800608c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a13      	ldr	r2, [pc, #76]	@ (80060d4 <I2Cx_Init+0x6c>)
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e002      	b.n	8006092 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a12      	ldr	r2, [pc, #72]	@ (80060d8 <I2Cx_Init+0x70>)
 8006090:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a11      	ldr	r2, [pc, #68]	@ (80060dc <I2Cx_Init+0x74>)
 8006096:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff23 	bl	8005f08 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f006 f9fe 	bl	800c4c4 <HAL_I2C_Init>
  }
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000bb4 	.word	0x20000bb4
 80060d4:	40005c00 	.word	0x40005c00
 80060d8:	40005400 	.word	0x40005400
 80060dc:	40912732 	.word	0x40912732

080060e0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	@ 0x28
 80060e4:	af04      	add	r7, sp, #16
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	4608      	mov	r0, r1
 80060ea:	4611      	mov	r1, r2
 80060ec:	461a      	mov	r2, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	72fb      	strb	r3, [r7, #11]
 80060f2:	460b      	mov	r3, r1
 80060f4:	813b      	strh	r3, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	b299      	uxth	r1, r3
 8006102:	88f8      	ldrh	r0, [r7, #6]
 8006104:	893a      	ldrh	r2, [r7, #8]
 8006106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800610a:	9302      	str	r3, [sp, #8]
 800610c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4603      	mov	r3, r0
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f006 fbbc 	bl	800c894 <HAL_I2C_Mem_Read>
 800611c:	4603      	mov	r3, r0
 800611e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	4619      	mov	r1, r3
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f832 	bl	8006194 <I2Cx_Error>
  }
  return status;    
 8006130:	7dfb      	ldrb	r3, [r7, #23]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b08a      	sub	sp, #40	@ 0x28
 800613e:	af04      	add	r7, sp, #16
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	4608      	mov	r0, r1
 8006144:	4611      	mov	r1, r2
 8006146:	461a      	mov	r2, r3
 8006148:	4603      	mov	r3, r0
 800614a:	72fb      	strb	r3, [r7, #11]
 800614c:	460b      	mov	r3, r1
 800614e:	813b      	strh	r3, [r7, #8]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006158:	7afb      	ldrb	r3, [r7, #11]
 800615a:	b299      	uxth	r1, r3
 800615c:	88f8      	ldrh	r0, [r7, #6]
 800615e:	893a      	ldrh	r2, [r7, #8]
 8006160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006164:	9302      	str	r3, [sp, #8]
 8006166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	4603      	mov	r3, r0
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f006 fa7b 	bl	800c66c <HAL_I2C_Mem_Write>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006180:	7afb      	ldrb	r3, [r7, #11]
 8006182:	4619      	mov	r1, r3
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f805 	bl	8006194 <I2Cx_Error>
  }
  return status;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f006 fa1f 	bl	800c5e4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff ff5e 	bl	8006068 <I2Cx_Init>
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80061b8:	4802      	ldr	r0, [pc, #8]	@ (80061c4 <AUDIO_IO_Init+0x10>)
 80061ba:	f7ff ff55 	bl	8006068 <I2Cx_Init>
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000bb4 	.word	0x20000bb4

080061c8 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af02      	add	r7, sp, #8
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
 80061e2:	460b      	mov	r3, r1
 80061e4:	80bb      	strh	r3, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80061ee:	89fb      	ldrh	r3, [r7, #14]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80061f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	b21a      	sxth	r2, r3
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	b21b      	sxth	r3, r3
 8006202:	4313      	orrs	r3, r2
 8006204:	b21b      	sxth	r3, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800620a:	88ba      	ldrh	r2, [r7, #4]
 800620c:	79f9      	ldrb	r1, [r7, #7]
 800620e:	2302      	movs	r3, #2
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	1cbb      	adds	r3, r7, #2
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2302      	movs	r3, #2
 8006218:	4803      	ldr	r0, [pc, #12]	@ (8006228 <AUDIO_IO_Write+0x50>)
 800621a:	f7ff ff8e 	bl	800613a <I2Cx_WriteMultiple>
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000bb4 	.word	0x20000bb4

0800622c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af02      	add	r7, sp, #8
 8006232:	4603      	mov	r3, r0
 8006234:	460a      	mov	r2, r1
 8006236:	71fb      	strb	r3, [r7, #7]
 8006238:	4613      	mov	r3, r2
 800623a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	81bb      	strh	r3, [r7, #12]
 8006240:	2300      	movs	r3, #0
 8006242:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8006244:	88ba      	ldrh	r2, [r7, #4]
 8006246:	79f9      	ldrb	r1, [r7, #7]
 8006248:	2302      	movs	r3, #2
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	f107 030c 	add.w	r3, r7, #12
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	2302      	movs	r3, #2
 8006254:	480a      	ldr	r0, [pc, #40]	@ (8006280 <AUDIO_IO_Read+0x54>)
 8006256:	f7ff ff43 	bl	80060e0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800625a:	89bb      	ldrh	r3, [r7, #12]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8006260:	89bb      	ldrh	r3, [r7, #12]
 8006262:	b21b      	sxth	r3, r3
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	b21a      	sxth	r2, r3
 8006268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800626c:	4313      	orrs	r3, r2
 800626e:	b21b      	sxth	r3, r3
 8006270:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8006272:	89fb      	ldrh	r3, [r7, #14]
 8006274:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8006276:	89bb      	ldrh	r3, [r7, #12]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000bb4 	.word	0x20000bb4

08006284 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f004 fa9f 	bl	800a7d0 <HAL_Delay>
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80062a0:	4802      	ldr	r0, [pc, #8]	@ (80062ac <TS_IO_Init+0x10>)
 80062a2:	f7ff fee1 	bl	8006068 <I2Cx_Init>
}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000bb4 	.word	0x20000bb4

080062b0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
 80062ba:	460b      	mov	r3, r1
 80062bc:	71bb      	strb	r3, [r7, #6]
 80062be:	4613      	mov	r3, r2
 80062c0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80062c2:	79bb      	ldrb	r3, [r7, #6]
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	79f9      	ldrb	r1, [r7, #7]
 80062c8:	2301      	movs	r3, #1
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	1d7b      	adds	r3, r7, #5
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2301      	movs	r3, #1
 80062d2:	4803      	ldr	r0, [pc, #12]	@ (80062e0 <TS_IO_Write+0x30>)
 80062d4:	f7ff ff31 	bl	800613a <I2Cx_WriteMultiple>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000bb4 	.word	0x20000bb4

080062e4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	4603      	mov	r3, r0
 80062ec:	460a      	mov	r2, r1
 80062ee:	71fb      	strb	r3, [r7, #7]
 80062f0:	4613      	mov	r3, r2
 80062f2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80062f8:	79bb      	ldrb	r3, [r7, #6]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	79f9      	ldrb	r1, [r7, #7]
 80062fe:	2301      	movs	r3, #1
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	f107 030f 	add.w	r3, r7, #15
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	2301      	movs	r3, #1
 800630a:	4804      	ldr	r0, [pc, #16]	@ (800631c <TS_IO_Read+0x38>)
 800630c:	f7ff fee8 	bl	80060e0 <I2Cx_ReadMultiple>

  return read_value;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000bb4 	.word	0x20000bb4

08006320 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f004 fa51 	bl	800a7d0 <HAL_Delay>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8006342:	4b10      	ldr	r3, [pc, #64]	@ (8006384 <BSP_AUDIO_OUT_Play+0x4c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	b292      	uxth	r2, r2
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	2034      	movs	r0, #52	@ 0x34
 8006350:	4798      	blx	r3
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e00f      	b.n	800637c <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006362:	d203      	bcs.n	800636c <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8006368:	b29b      	uxth	r3, r3
 800636a:	e001      	b.n	8006370 <BSP_AUDIO_OUT_Play+0x38>
 800636c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006370:	461a      	mov	r2, r3
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4804      	ldr	r0, [pc, #16]	@ (8006388 <BSP_AUDIO_OUT_Play+0x50>)
 8006376:	f008 fed3 	bl	800f120 <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 800637a:	2300      	movs	r3, #0
	}
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000c08 	.word	0x20000c08
 8006388:	20000c0c 	.word	0x20000c0c

0800638c <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 8006396:	4b08      	ldr	r3, [pc, #32]	@ (80063b8 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	79fa      	ldrb	r2, [r7, #7]
 800639e:	4611      	mov	r1, r2
 80063a0:	2034      	movs	r0, #52	@ 0x34
 80063a2:	4798      	blx	r3
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80063ae:	2300      	movs	r3, #0
	}
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000c08 	.word	0x20000c08

080063bc <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 80063c4:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80063d2:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 80063d4:	4a08      	ldr	r2, [pc, #32]	@ (80063f8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_SAI_Init(&haudio_out_sai);
 80063da:	4807      	ldr	r0, [pc, #28]	@ (80063f8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80063dc:	f008 fcec 	bl	800edb8 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 80063e0:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80063ee:	601a      	str	r2, [r3, #0]
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000c0c 	.word	0x20000c0c

080063fc <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 8006404:	f7fe fe6a 	bl	80050dc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8006418:	f7fe fe72 	bl	8005100 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800642c:	480e      	ldr	r0, [pc, #56]	@ (8006468 <HAL_SAI_ErrorCallback+0x44>)
 800642e:	f008 ff27 	bl	800f280 <HAL_SAI_GetState>
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8006436:	480d      	ldr	r0, [pc, #52]	@ (800646c <HAL_SAI_ErrorCallback+0x48>)
 8006438:	f008 ff22 	bl	800f280 <HAL_SAI_GetState>
 800643c:	4603      	mov	r3, r0
 800643e:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d002      	beq.n	800644c <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b12      	cmp	r3, #18
 800644a:	d101      	bne.n	8006450 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 800644c:	f000 f810 	bl	8006470 <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d002      	beq.n	800645c <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b22      	cmp	r3, #34	@ 0x22
 800645a:	d101      	bne.n	8006460 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 800645c:	f000 f9be 	bl	80067dc <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20000c0c 	.word	0x20000c0c
 800646c:	20000c90 	.word	0x20000c90

08006470 <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
}
 8006474:	bf00      	nop
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b08c      	sub	sp, #48	@ 0x30
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 800648a:	4b63      	ldr	r3, [pc, #396]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 800648c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648e:	4a62      	ldr	r2, [pc, #392]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006490:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006494:	6453      	str	r3, [r2, #68]	@ 0x44
 8006496:	4b60      	ldr	r3, [pc, #384]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 80064a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80064ae:	4b5a      	ldr	r3, [pc, #360]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80064ba:	4b57      	ldr	r3, [pc, #348]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064be:	4a56      	ldr	r2, [pc, #344]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80064c6:	4b54      	ldr	r3, [pc, #336]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 80064d2:	4b51      	ldr	r3, [pc, #324]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d6:	4a50      	ldr	r2, [pc, #320]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80064de:	4b4e      	ldr	r3, [pc, #312]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80064ea:	2380      	movs	r3, #128	@ 0x80
 80064ec:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80064ee:	2302      	movs	r3, #2
 80064f0:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80064f6:	2303      	movs	r3, #3
 80064f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80064fa:	230a      	movs	r3, #10
 80064fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80064fe:	f107 031c 	add.w	r3, r7, #28
 8006502:	4619      	mov	r1, r3
 8006504:	4845      	ldr	r0, [pc, #276]	@ (800661c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8006506:	f005 fcf3 	bl	800bef0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800650a:	2320      	movs	r3, #32
 800650c:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800650e:	2302      	movs	r3, #2
 8006510:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006516:	2303      	movs	r3, #3
 8006518:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800651a:	230a      	movs	r3, #10
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800651e:	f107 031c 	add.w	r3, r7, #28
 8006522:	4619      	mov	r1, r3
 8006524:	483d      	ldr	r0, [pc, #244]	@ (800661c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8006526:	f005 fce3 	bl	800bef0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 800652a:	2340      	movs	r3, #64	@ 0x40
 800652c:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800652e:	2302      	movs	r3, #2
 8006530:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8006532:	2300      	movs	r3, #0
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006536:	2303      	movs	r3, #3
 8006538:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800653a:	230a      	movs	r3, #10
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800653e:	f107 031c 	add.w	r3, r7, #28
 8006542:	4619      	mov	r1, r3
 8006544:	4835      	ldr	r0, [pc, #212]	@ (800661c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8006546:	f005 fcd3 	bl	800bef0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800654a:	2310      	movs	r3, #16
 800654c:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800654e:	2302      	movs	r3, #2
 8006550:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8006552:	2300      	movs	r3, #0
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006556:	2303      	movs	r3, #3
 8006558:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800655a:	230a      	movs	r3, #10
 800655c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800655e:	f107 031c 	add.w	r3, r7, #28
 8006562:	4619      	mov	r1, r3
 8006564:	482d      	ldr	r0, [pc, #180]	@ (800661c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8006566:	f005 fcc3 	bl	800bef0 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800656a:	4b2b      	ldr	r3, [pc, #172]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	4a2a      	ldr	r2, [pc, #168]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006574:	6313      	str	r3, [r2, #48]	@ 0x30
 8006576:	4b28      	ldr	r3, [pc, #160]	@ (8006618 <BSP_AUDIO_OUT_MspInit+0x198>)
 8006578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800657e:	60bb      	str	r3, [r7, #8]
 8006580:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a26      	ldr	r2, [pc, #152]	@ (8006620 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d138      	bne.n	80065fe <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800658c:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800658e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8006592:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006594:	4b23      	ldr	r3, [pc, #140]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8006596:	2240      	movs	r2, #64	@ 0x40
 8006598:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800659a:	4b22      	ldr	r3, [pc, #136]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800659c:	2200      	movs	r2, #0
 800659e:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065a0:	4b20      	ldr	r3, [pc, #128]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065a6:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 80065a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ae:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80065b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80065b6:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 80065b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065be:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80065c0:	4b18      	ldr	r3, [pc, #96]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80065c6:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065c8:	4b16      	ldr	r3, [pc, #88]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065ca:	2204      	movs	r2, #4
 80065cc:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80065ce:	4b15      	ldr	r3, [pc, #84]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065d0:	2203      	movs	r2, #3
 80065d2:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80065d4:	4b13      	ldr	r3, [pc, #76]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065dc:	2200      	movs	r2, #0
 80065de:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80065e0:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065e2:	4a11      	ldr	r2, [pc, #68]	@ (8006628 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80065e4:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 80065ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 80065f2:	480c      	ldr	r0, [pc, #48]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065f4:	f004 fe9a 	bl	800b32c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 80065f8:	480a      	ldr	r0, [pc, #40]	@ (8006624 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80065fa:	f004 fde9 	bl	800b1d0 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80065fe:	2200      	movs	r2, #0
 8006600:	210e      	movs	r1, #14
 8006602:	203c      	movs	r0, #60	@ 0x3c
 8006604:	f004 fdba 	bl	800b17c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8006608:	203c      	movs	r0, #60	@ 0x3c
 800660a:	f004 fdd3 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
}
 800660e:	bf00      	nop
 8006610:	3730      	adds	r7, #48	@ 0x30
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023800 	.word	0x40023800
 800661c:	40022000 	.word	0x40022000
 8006620:	40015c04 	.word	0x40015c04
 8006624:	20000d14 	.word	0x20000d14
 8006628:	40026470 	.word	0x40026470

0800662c <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b0a6      	sub	sp, #152	@ 0x98
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006638:	f107 0314 	add.w	r3, r7, #20
 800663c:	4618      	mov	r0, r3
 800663e:	f008 f96f 	bl	800e920 <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800665c:	4293      	cmp	r3, r2
 800665e:	d112      	bne.n	8006686 <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8006660:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006664:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8006666:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800666a:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800666c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8006670:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8006672:	2302      	movs	r3, #2
 8006674:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8006676:	2313      	movs	r3, #19
 8006678:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	4618      	mov	r0, r3
 8006680:	f007 fd5e 	bl	800e140 <HAL_RCCEx_PeriphCLKConfig>
 8006684:	e012      	b.n	80066ac <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8006686:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800668a:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800668c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006690:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8006692:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8006696:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8006698:	2307      	movs	r3, #7
 800669a:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800669c:	2301      	movs	r3, #1
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	4618      	mov	r0, r3
 80066a6:	f007 fd4b 	bl	800e140 <HAL_RCCEx_PeriphCLKConfig>
	}
}
 80066aa:	bf00      	nop
 80066ac:	bf00      	nop
 80066ae:	3798      	adds	r7, #152	@ 0x98
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80066b8:	4b07      	ldr	r3, [pc, #28]	@ (80066d8 <SAIx_Out_DeInit+0x24>)
 80066ba:	4a08      	ldr	r2, [pc, #32]	@ (80066dc <SAIx_Out_DeInit+0x28>)
 80066bc:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 80066be:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <SAIx_Out_DeInit+0x24>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b04      	ldr	r3, [pc, #16]	@ (80066d8 <SAIx_Out_DeInit+0x24>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80066cc:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 80066ce:	4802      	ldr	r0, [pc, #8]	@ (80066d8 <SAIx_Out_DeInit+0x24>)
 80066d0:	f008 fcf0 	bl	800f0b4 <HAL_SAI_DeInit>
}
 80066d4:	bf00      	nop
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000c0c 	.word	0x20000c0c
 80066dc:	40015c04 	.word	0x40015c04

080066e0 <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b089      	sub	sp, #36	@ 0x24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60ba      	str	r2, [r7, #8]
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	4603      	mov	r3, r0
 80066ec:	81fb      	strh	r3, [r7, #14]
 80066ee:	460b      	mov	r3, r1
 80066f0:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 80066fa:	89fb      	ldrh	r3, [r7, #14]
 80066fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006700:	d006      	beq.n	8006710 <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 8006702:	89fb      	ldrh	r3, [r7, #14]
 8006704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006708:	d002      	beq.n	8006710 <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e054      	b.n	80067ba <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 8006710:	f000 f9d4 	bl	8006abc <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 8006714:	f7ff ffce 	bl	80066b4 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8006718:	2200      	movs	r2, #0
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	4829      	ldr	r0, [pc, #164]	@ (80067c4 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800671e:	f7ff ff85 	bl	800662c <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006722:	4b28      	ldr	r3, [pc, #160]	@ (80067c4 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8006724:	4a28      	ldr	r2, [pc, #160]	@ (80067c8 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8006726:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 8006728:	4826      	ldr	r0, [pc, #152]	@ (80067c4 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800672a:	f008 fda9 	bl	800f280 <HAL_SAI_GetState>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8006734:	2100      	movs	r1, #0
 8006736:	4823      	ldr	r0, [pc, #140]	@ (80067c4 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8006738:	f000 f858 	bl	80067ec <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800673c:	4b23      	ldr	r3, [pc, #140]	@ (80067cc <BSP_AUDIO_IN_OUT_Init+0xec>)
 800673e:	4a24      	ldr	r2, [pc, #144]	@ (80067d0 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8006740:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 8006742:	4822      	ldr	r0, [pc, #136]	@ (80067cc <BSP_AUDIO_IN_OUT_Init+0xec>)
 8006744:	f008 fd9c 	bl	800f280 <HAL_SAI_GetState>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d103      	bne.n	8006756 <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800674e:	2100      	movs	r1, #0
 8006750:	481e      	ldr	r0, [pc, #120]	@ (80067cc <BSP_AUDIO_IN_OUT_Init+0xec>)
 8006752:	f7ff fe95 	bl	8006480 <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 8006756:	89fb      	ldrh	r3, [r7, #14]
 8006758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800675c:	d102      	bne.n	8006764 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800675e:	230a      	movs	r3, #10
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	e001      	b.n	8006768 <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8006764:	2305      	movs	r3, #5
 8006766:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	2000      	movs	r0, #0
 800676e:	f000 f8ef 	bl	8006950 <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8006772:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2034      	movs	r0, #52	@ 0x34
 8006778:	4798      	blx	r3
 800677a:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f648 1294 	movw	r2, #35220	@ 0x8994
 8006782:	4293      	cmp	r3, r2
 8006784:	d109      	bne.n	800679a <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8006786:	4b13      	ldr	r3, [pc, #76]	@ (80067d4 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8006788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678a:	2034      	movs	r0, #52	@ 0x34
 800678c:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 800678e:	4b12      	ldr	r3, [pc, #72]	@ (80067d8 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8006790:	4a10      	ldr	r2, [pc, #64]	@ (80067d4 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8006792:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e001      	b.n	800679e <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 800679e:	7ffb      	ldrb	r3, [r7, #31]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681c      	ldr	r4, [r3, #0]
 80067aa:	89fa      	ldrh	r2, [r7, #14]
 80067ac:	89bb      	ldrh	r3, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	b299      	uxth	r1, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2264      	movs	r2, #100	@ 0x64
 80067b6:	2034      	movs	r0, #52	@ 0x34
 80067b8:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 80067ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3724      	adds	r7, #36	@ 0x24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd90      	pop	{r4, r7, pc}
 80067c4:	20000c90 	.word	0x20000c90
 80067c8:	40015c24 	.word	0x40015c24
 80067cc:	20000c0c 	.word	0x20000c0c
 80067d0:	40015c04 	.word	0x40015c04
 80067d4:	20000054 	.word	0x20000054
 80067d8:	20000c08 	.word	0x20000c08

080067dc <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 80067e0:	bf00      	nop
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	@ 0x30
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 80067f6:	4b50      	ldr	r3, [pc, #320]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	4a4f      	ldr	r2, [pc, #316]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 80067fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006800:	6453      	str	r3, [r2, #68]	@ 0x44
 8006802:	4b4d      	ldr	r3, [pc, #308]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 800680e:	4b4a      	ldr	r3, [pc, #296]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	4a49      	ldr	r2, [pc, #292]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006818:	6313      	str	r3, [r2, #48]	@ 0x30
 800681a:	4b47      	ldr	r3, [pc, #284]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800682a:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800682c:	2302      	movs	r3, #2
 800682e:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8006830:	2300      	movs	r3, #0
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006834:	2302      	movs	r3, #2
 8006836:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8006838:	230a      	movs	r3, #10
 800683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800683c:	f107 031c 	add.w	r3, r7, #28
 8006840:	4619      	mov	r1, r3
 8006842:	483e      	ldr	r0, [pc, #248]	@ (800693c <BSP_AUDIO_IN_MspInit+0x150>)
 8006844:	f005 fb54 	bl	800bef0 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8006848:	4b3b      	ldr	r3, [pc, #236]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	4a3a      	ldr	r2, [pc, #232]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 800684e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006852:	6313      	str	r3, [r2, #48]	@ 0x30
 8006854:	4b38      	ldr	r3, [pc, #224]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8006860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006864:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8006866:	2300      	movs	r3, #0
 8006868:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800686a:	2300      	movs	r3, #0
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800686e:	2302      	movs	r3, #2
 8006870:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8006872:	f107 031c 	add.w	r3, r7, #28
 8006876:	4619      	mov	r1, r3
 8006878:	4831      	ldr	r0, [pc, #196]	@ (8006940 <BSP_AUDIO_IN_MspInit+0x154>)
 800687a:	f005 fb39 	bl	800bef0 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800687e:	4b2e      	ldr	r3, [pc, #184]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006882:	4a2d      	ldr	r2, [pc, #180]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 8006884:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006888:	6313      	str	r3, [r2, #48]	@ 0x30
 800688a:	4b2b      	ldr	r3, [pc, #172]	@ (8006938 <BSP_AUDIO_IN_MspInit+0x14c>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2a      	ldr	r2, [pc, #168]	@ (8006944 <BSP_AUDIO_IN_MspInit+0x158>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d137      	bne.n	8006910 <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80068a0:	4b29      	ldr	r3, [pc, #164]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068a6:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068ac:	4b26      	ldr	r3, [pc, #152]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068b2:	4b25      	ldr	r3, [pc, #148]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068b8:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 80068ba:	4b23      	ldr	r3, [pc, #140]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068c0:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80068c2:	4b21      	ldr	r3, [pc, #132]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068c8:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 80068ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068d0:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80068d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80068d8:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068da:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80068e0:	4b19      	ldr	r3, [pc, #100]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068e2:	2203      	movs	r2, #3
 80068e4:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80068e6:	4b18      	ldr	r3, [pc, #96]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 80068ec:	4b16      	ldr	r3, [pc, #88]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80068f2:	4b15      	ldr	r3, [pc, #84]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068f4:	4a15      	ldr	r2, [pc, #84]	@ (800694c <BSP_AUDIO_IN_MspInit+0x160>)
 80068f6:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a13      	ldr	r2, [pc, #76]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 80068fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80068fe:	4a12      	ldr	r2, [pc, #72]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8006904:	4810      	ldr	r0, [pc, #64]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006906:	f004 fd11 	bl	800b32c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 800690a:	480f      	ldr	r0, [pc, #60]	@ (8006948 <BSP_AUDIO_IN_MspInit+0x15c>)
 800690c:	f004 fc60 	bl	800b1d0 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8006910:	2200      	movs	r2, #0
 8006912:	210f      	movs	r1, #15
 8006914:	2046      	movs	r0, #70	@ 0x46
 8006916:	f004 fc31 	bl	800b17c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800691a:	2046      	movs	r0, #70	@ 0x46
 800691c:	f004 fc4a 	bl	800b1b4 <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8006920:	2200      	movs	r2, #0
 8006922:	210f      	movs	r1, #15
 8006924:	2028      	movs	r0, #40	@ 0x28
 8006926:	f004 fc29 	bl	800b17c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800692a:	2028      	movs	r0, #40	@ 0x28
 800692c:	f004 fc42 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
}
 8006930:	bf00      	nop
 8006932:	3730      	adds	r7, #48	@ 0x30
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40023800 	.word	0x40023800
 800693c:	40021800 	.word	0x40021800
 8006940:	40021c00 	.word	0x40021c00
 8006944:	40015c24 	.word	0x40015c24
 8006948:	20000d74 	.word	0x20000d74
 800694c:	400264b8 	.word	0x400264b8

08006950 <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800695c:	4b53      	ldr	r3, [pc, #332]	@ (8006aac <SAIx_In_Init+0x15c>)
 800695e:	4a54      	ldr	r2, [pc, #336]	@ (8006ab0 <SAIx_In_Init+0x160>)
 8006960:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8006962:	4b52      	ldr	r3, [pc, #328]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b50      	ldr	r3, [pc, #320]	@ (8006aac <SAIx_In_Init+0x15c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006970:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8006972:	4a4e      	ldr	r2, [pc, #312]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 8006978:	4a4c      	ldr	r2, [pc, #304]	@ (8006aac <SAIx_In_Init+0x15c>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800697e:	4b4b      	ldr	r3, [pc, #300]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006980:	2200      	movs	r2, #0
 8006982:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8006984:	4b49      	ldr	r3, [pc, #292]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006986:	2200      	movs	r2, #0
 8006988:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800698a:	4b48      	ldr	r3, [pc, #288]	@ (8006aac <SAIx_In_Init+0x15c>)
 800698c:	2280      	movs	r2, #128	@ 0x80
 800698e:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006990:	4b46      	ldr	r3, [pc, #280]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006992:	2200      	movs	r2, #0
 8006994:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8006996:	4b45      	ldr	r3, [pc, #276]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006998:	2201      	movs	r2, #1
 800699a:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800699c:	4b43      	ldr	r3, [pc, #268]	@ (8006aac <SAIx_In_Init+0x15c>)
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80069a2:	4b42      	ldr	r3, [pc, #264]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80069a8:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80069aa:	4b40      	ldr	r3, [pc, #256]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 80069b0:	4b3e      	ldr	r3, [pc, #248]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069b2:	2240      	movs	r2, #64	@ 0x40
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80069b6:	4b3d      	ldr	r3, [pc, #244]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069b8:	2220      	movs	r2, #32
 80069ba:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80069bc:	4b3b      	ldr	r3, [pc, #236]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80069c2:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80069c4:	4b39      	ldr	r3, [pc, #228]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80069ca:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80069d0:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80069d2:	4b36      	ldr	r3, [pc, #216]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80069d8:	4b34      	ldr	r3, [pc, #208]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069da:	2200      	movs	r2, #0
 80069dc:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 80069de:	4b33      	ldr	r3, [pc, #204]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069e0:	2204      	movs	r2, #4
 80069e2:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80069e4:	4a31      	ldr	r2, [pc, #196]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_out_sai);
 80069ea:	4830      	ldr	r0, [pc, #192]	@ (8006aac <SAIx_In_Init+0x15c>)
 80069ec:	f008 f9e4 	bl	800edb8 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80069f0:	4b30      	ldr	r3, [pc, #192]	@ (8006ab4 <SAIx_In_Init+0x164>)
 80069f2:	4a31      	ldr	r2, [pc, #196]	@ (8006ab8 <SAIx_In_Init+0x168>)
 80069f4:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 80069f6:	4b2f      	ldr	r3, [pc, #188]	@ (8006ab4 <SAIx_In_Init+0x164>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab4 <SAIx_In_Init+0x164>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a04:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8006a06:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8006a0c:	4b29      	ldr	r3, [pc, #164]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a0e:	2203      	movs	r2, #3
 8006a10:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8006a12:	4b28      	ldr	r3, [pc, #160]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8006a18:	4b26      	ldr	r3, [pc, #152]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8006a1e:	4b25      	ldr	r3, [pc, #148]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a20:	2280      	movs	r2, #128	@ 0x80
 8006a22:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006a24:	4b23      	ldr	r3, [pc, #140]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8006a2a:	4b22      	ldr	r3, [pc, #136]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8006a30:	4b20      	ldr	r3, [pc, #128]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8006a36:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 8006a42:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a44:	2240      	movs	r2, #64	@ 0x40
 8006a46:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8006a48:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8006a4e:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a50:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006a54:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006a56:	4b17      	ldr	r3, [pc, #92]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006a5c:	4b15      	ldr	r3, [pc, #84]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006a62:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8006a64:	4b13      	ldr	r3, [pc, #76]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006a6a:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 8006a70:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a72:	2204      	movs	r2, #4
 8006a74:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8006a76:	4a0f      	ldr	r2, [pc, #60]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_in_sai);
 8006a7c:	480d      	ldr	r0, [pc, #52]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a7e:	f008 f99b 	bl	800edb8 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8006a82:	4b0a      	ldr	r3, [pc, #40]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4b08      	ldr	r3, [pc, #32]	@ (8006aac <SAIx_In_Init+0x15c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006a90:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 8006a92:	4b08      	ldr	r3, [pc, #32]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <SAIx_In_Init+0x164>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000c0c 	.word	0x20000c0c
 8006ab0:	40015c04 	.word	0x40015c04
 8006ab4:	20000c90 	.word	0x20000c90
 8006ab8:	40015c24 	.word	0x40015c24

08006abc <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006ac0:	4b07      	ldr	r3, [pc, #28]	@ (8006ae0 <SAIx_In_DeInit+0x24>)
 8006ac2:	4a08      	ldr	r2, [pc, #32]	@ (8006ae4 <SAIx_In_DeInit+0x28>)
 8006ac4:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8006ac6:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <SAIx_In_DeInit+0x24>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	4b04      	ldr	r3, [pc, #16]	@ (8006ae0 <SAIx_In_DeInit+0x24>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006ad4:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 8006ad6:	4802      	ldr	r0, [pc, #8]	@ (8006ae0 <SAIx_In_DeInit+0x24>)
 8006ad8:	f008 faec 	bl	800f0b4 <HAL_SAI_DeInit>
}
 8006adc:	bf00      	nop
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000c90 	.word	0x20000c90
 8006ae4:	40015c24 	.word	0x40015c24

08006ae8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006aec:	4b31      	ldr	r3, [pc, #196]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006aee:	2228      	movs	r2, #40	@ 0x28
 8006af0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006af2:	4b30      	ldr	r3, [pc, #192]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006af4:	2209      	movs	r2, #9
 8006af6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006af8:	4b2e      	ldr	r3, [pc, #184]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006afa:	2235      	movs	r2, #53	@ 0x35
 8006afc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006afe:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b00:	220b      	movs	r2, #11
 8006b02:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006b04:	4b2b      	ldr	r3, [pc, #172]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b06:	f240 121b 	movw	r2, #283	@ 0x11b
 8006b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006b0c:	4b29      	ldr	r3, [pc, #164]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b0e:	f240 2215 	movw	r2, #533	@ 0x215
 8006b12:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006b14:	4b27      	ldr	r3, [pc, #156]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b16:	f240 121d 	movw	r2, #285	@ 0x11d
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006b1c:	4b25      	ldr	r3, [pc, #148]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b1e:	f240 2235 	movw	r2, #565	@ 0x235
 8006b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006b24:	2100      	movs	r1, #0
 8006b26:	4823      	ldr	r0, [pc, #140]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b28:	f000 fd5e 	bl	80075e8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006b2c:	4b21      	ldr	r3, [pc, #132]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b2e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006b32:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006b34:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b36:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8006b3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006b44:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006b4c:	4b19      	ldr	r3, [pc, #100]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006b54:	4b17      	ldr	r3, [pc, #92]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006b5a:	4b16      	ldr	r3, [pc, #88]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006b66:	4b13      	ldr	r3, [pc, #76]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006b6c:	4b11      	ldr	r3, [pc, #68]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b6e:	4a12      	ldr	r2, [pc, #72]	@ (8006bb8 <BSP_LCD_Init+0xd0>)
 8006b70:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006b72:	4810      	ldr	r0, [pc, #64]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b74:	f006 fc20 	bl	800d3b8 <HAL_LTDC_GetState>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006b7e:	2100      	movs	r1, #0
 8006b80:	480c      	ldr	r0, [pc, #48]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b82:	f000 fc57 	bl	8007434 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8006b86:	480b      	ldr	r0, [pc, #44]	@ (8006bb4 <BSP_LCD_Init+0xcc>)
 8006b88:	f006 fa46 	bl	800d018 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006b92:	480a      	ldr	r0, [pc, #40]	@ (8006bbc <BSP_LCD_Init+0xd4>)
 8006b94:	f005 fc7c 	bl	800c490 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006b98:	2201      	movs	r2, #1
 8006b9a:	2108      	movs	r1, #8
 8006b9c:	4808      	ldr	r0, [pc, #32]	@ (8006bc0 <BSP_LCD_Init+0xd8>)
 8006b9e:	f005 fc77 	bl	800c490 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006ba2:	f000 fe85 	bl	80078b0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006ba6:	4807      	ldr	r0, [pc, #28]	@ (8006bc4 <BSP_LCD_Init+0xdc>)
 8006ba8:	f000 f8d8 	bl	8006d5c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000dd4 	.word	0x20000dd4
 8006bb8:	40016800 	.word	0x40016800
 8006bbc:	40022000 	.word	0x40022000
 8006bc0:	40022800 	.word	0x40022800
 8006bc4:	2000003c 	.word	0x2000003c

08006bc8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <BSP_LCD_GetXSize+0x20>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a06      	ldr	r2, [pc, #24]	@ (8006bec <BSP_LCD_GetXSize+0x24>)
 8006bd2:	2134      	movs	r1, #52	@ 0x34
 8006bd4:	fb01 f303 	mul.w	r3, r1, r3
 8006bd8:	4413      	add	r3, r2
 8006bda:	3360      	adds	r3, #96	@ 0x60
 8006bdc:	681b      	ldr	r3, [r3, #0]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000ebc 	.word	0x20000ebc
 8006bec:	20000dd4 	.word	0x20000dd4

08006bf0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006bf4:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <BSP_LCD_GetYSize+0x20>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a06      	ldr	r2, [pc, #24]	@ (8006c14 <BSP_LCD_GetYSize+0x24>)
 8006bfa:	2134      	movs	r1, #52	@ 0x34
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	3364      	adds	r3, #100	@ 0x64
 8006c04:	681b      	ldr	r3, [r3, #0]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20000ebc 	.word	0x20000ebc
 8006c14:	20000dd4 	.word	0x20000dd4

08006c18 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b090      	sub	sp, #64	@ 0x40
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006c28:	f7ff ffce 	bl	8006bc8 <BSP_LCD_GetXSize>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006c34:	f7ff ffdc 	bl	8006bf0 <BSP_LCD_GetYSize>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8006c44:	23ff      	movs	r3, #255	@ 0xff
 8006c46:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006c5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006c64:	2307      	movs	r3, #7
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006c68:	f7ff ffae 	bl	8006bc8 <BSP_LCD_GetXSize>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8006c70:	f7ff ffbe 	bl	8006bf0 <BSP_LCD_GetYSize>
 8006c74:	4603      	mov	r3, r0
 8006c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006c78:	88fa      	ldrh	r2, [r7, #6]
 8006c7a:	f107 030c 	add.w	r3, r7, #12
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4812      	ldr	r0, [pc, #72]	@ (8006ccc <BSP_LCD_LayerDefaultInit+0xb4>)
 8006c82:	f006 fb5b 	bl	800d33c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	4911      	ldr	r1, [pc, #68]	@ (8006cd0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	3304      	adds	r3, #4
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	490c      	ldr	r1, [pc, #48]	@ (8006cd0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	3308      	adds	r3, #8
 8006cac:	4a09      	ldr	r2, [pc, #36]	@ (8006cd4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006cae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	4907      	ldr	r1, [pc, #28]	@ (8006cd0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	3740      	adds	r7, #64	@ 0x40
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000dd4 	.word	0x20000dd4
 8006cd0:	20000ec0 	.word	0x20000ec0
 8006cd4:	2000003c 	.word	0x2000003c

08006cd8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006ce0:	4a04      	ldr	r2, [pc, #16]	@ (8006cf4 <BSP_LCD_SelectLayer+0x1c>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6013      	str	r3, [r2, #0]
} 
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20000ebc 	.word	0x20000ebc

08006cf8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8006d00:	4b07      	ldr	r3, [pc, #28]	@ (8006d20 <BSP_LCD_SetTextColor+0x28>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	4907      	ldr	r1, [pc, #28]	@ (8006d24 <BSP_LCD_SetTextColor+0x2c>)
 8006d06:	4613      	mov	r3, r2
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20000ebc 	.word	0x20000ebc
 8006d24:	20000ec0 	.word	0x20000ec0

08006d28 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006d30:	4b08      	ldr	r3, [pc, #32]	@ (8006d54 <BSP_LCD_SetBackColor+0x2c>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4908      	ldr	r1, [pc, #32]	@ (8006d58 <BSP_LCD_SetBackColor+0x30>)
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3304      	adds	r3, #4
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20000ebc 	.word	0x20000ebc
 8006d58:	20000ec0 	.word	0x20000ec0

08006d5c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006d64:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <BSP_LCD_SetFont+0x2c>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4908      	ldr	r1, [pc, #32]	@ (8006d8c <BSP_LCD_SetFont+0x30>)
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3308      	adds	r3, #8
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	601a      	str	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000ebc 	.word	0x20000ebc
 8006d8c:	20000ec0 	.word	0x20000ec0

08006d90 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8006d94:	4b07      	ldr	r3, [pc, #28]	@ (8006db4 <BSP_LCD_GetFont+0x24>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4907      	ldr	r1, [pc, #28]	@ (8006db8 <BSP_LCD_GetFont+0x28>)
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	3308      	adds	r3, #8
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000ebc 	.word	0x20000ebc
 8006db8:	20000ec0 	.word	0x20000ec0

08006dbc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8006dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e04 <BSP_LCD_Clear+0x48>)
 8006dc6:	681c      	ldr	r4, [r3, #0]
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <BSP_LCD_Clear+0x48>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8006e08 <BSP_LCD_Clear+0x4c>)
 8006dce:	2134      	movs	r1, #52	@ 0x34
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	335c      	adds	r3, #92	@ 0x5c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461e      	mov	r6, r3
 8006ddc:	f7ff fef4 	bl	8006bc8 <BSP_LCD_GetXSize>
 8006de0:	4605      	mov	r5, r0
 8006de2:	f7ff ff05 	bl	8006bf0 <BSP_LCD_GetYSize>
 8006de6:	4602      	mov	r2, r0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	2300      	movs	r3, #0
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	462a      	mov	r2, r5
 8006df4:	4631      	mov	r1, r6
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fcca 	bl	8007790 <LL_FillBuffer>
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e04:	20000ebc 	.word	0x20000ebc
 8006e08:	20000dd4 	.word	0x20000dd4

08006e0c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006e0c:	b590      	push	{r4, r7, lr}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	80fb      	strh	r3, [r7, #6]
 8006e16:	460b      	mov	r3, r1
 8006e18:	80bb      	strh	r3, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006e8c <BSP_LCD_DisplayChar+0x80>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	491b      	ldr	r1, [pc, #108]	@ (8006e90 <BSP_LCD_DisplayChar+0x84>)
 8006e24:	4613      	mov	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3308      	adds	r3, #8
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006e3a:	4b14      	ldr	r3, [pc, #80]	@ (8006e8c <BSP_LCD_DisplayChar+0x80>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4c14      	ldr	r4, [pc, #80]	@ (8006e90 <BSP_LCD_DisplayChar+0x84>)
 8006e40:	4613      	mov	r3, r2
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4423      	add	r3, r4
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006e50:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006e54:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <BSP_LCD_DisplayChar+0x80>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4c0d      	ldr	r4, [pc, #52]	@ (8006e90 <BSP_LCD_DisplayChar+0x84>)
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4423      	add	r3, r4
 8006e64:	3308      	adds	r3, #8
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	889b      	ldrh	r3, [r3, #4]
 8006e6a:	3307      	adds	r3, #7
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da00      	bge.n	8006e72 <BSP_LCD_DisplayChar+0x66>
 8006e70:	3307      	adds	r3, #7
 8006e72:	10db      	asrs	r3, r3, #3
 8006e74:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006e78:	18ca      	adds	r2, r1, r3
 8006e7a:	88b9      	ldrh	r1, [r7, #4]
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fbce 	bl	8007620 <DrawChar>
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd90      	pop	{r4, r7, pc}
 8006e8c:	20000ebc 	.word	0x20000ebc
 8006e90:	20000ec0 	.word	0x20000ec0

08006e94 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006e94:	b5b0      	push	{r4, r5, r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60ba      	str	r2, [r7, #8]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	81fb      	strh	r3, [r7, #14]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	81bb      	strh	r3, [r7, #12]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	83fb      	strh	r3, [r7, #30]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006ebe:	e002      	b.n	8006ec6 <BSP_LCD_DisplayStringAt+0x32>
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	617a      	str	r2, [r7, #20]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f6      	bne.n	8006ec0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006ed2:	f7ff fe79 	bl	8006bc8 <BSP_LCD_GetXSize>
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4b50      	ldr	r3, [pc, #320]	@ (800701c <BSP_LCD_DisplayStringAt+0x188>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	4850      	ldr	r0, [pc, #320]	@ (8007020 <BSP_LCD_DisplayStringAt+0x18c>)
 8006ede:	4613      	mov	r3, r2
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4403      	add	r3, r0
 8006ee8:	3308      	adds	r3, #8
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	889b      	ldrh	r3, [r3, #4]
 8006eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ef2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d01c      	beq.n	8006f34 <BSP_LCD_DisplayStringAt+0xa0>
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	dc33      	bgt.n	8006f66 <BSP_LCD_DisplayStringAt+0xd2>
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d002      	beq.n	8006f08 <BSP_LCD_DisplayStringAt+0x74>
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d019      	beq.n	8006f3a <BSP_LCD_DisplayStringAt+0xa6>
 8006f06:	e02e      	b.n	8006f66 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	1ad1      	subs	r1, r2, r3
 8006f0e:	4b43      	ldr	r3, [pc, #268]	@ (800701c <BSP_LCD_DisplayStringAt+0x188>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4843      	ldr	r0, [pc, #268]	@ (8007020 <BSP_LCD_DisplayStringAt+0x18c>)
 8006f14:	4613      	mov	r3, r2
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4403      	add	r3, r0
 8006f1e:	3308      	adds	r3, #8
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	889b      	ldrh	r3, [r3, #4]
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	89fb      	ldrh	r3, [r7, #14]
 8006f2e:	4413      	add	r3, r2
 8006f30:	83fb      	strh	r3, [r7, #30]
      break;
 8006f32:	e01b      	b.n	8006f6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	83fb      	strh	r3, [r7, #30]
      break;
 8006f38:	e018      	b.n	8006f6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	b299      	uxth	r1, r3
 8006f42:	4b36      	ldr	r3, [pc, #216]	@ (800701c <BSP_LCD_DisplayStringAt+0x188>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4836      	ldr	r0, [pc, #216]	@ (8007020 <BSP_LCD_DisplayStringAt+0x18c>)
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4403      	add	r3, r0
 8006f52:	3308      	adds	r3, #8
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	889b      	ldrh	r3, [r3, #4]
 8006f58:	fb11 f303 	smulbb	r3, r1, r3
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	89fb      	ldrh	r3, [r7, #14]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	83fb      	strh	r3, [r7, #30]
      break;
 8006f64:	e002      	b.n	8006f6c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8006f66:	89fb      	ldrh	r3, [r7, #14]
 8006f68:	83fb      	strh	r3, [r7, #30]
      break;
 8006f6a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006f6c:	8bfb      	ldrh	r3, [r7, #30]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <BSP_LCD_DisplayStringAt+0xe6>
 8006f72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da1d      	bge.n	8006fb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006f7e:	e01a      	b.n	8006fb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	781a      	ldrb	r2, [r3, #0]
 8006f84:	89b9      	ldrh	r1, [r7, #12]
 8006f86:	8bfb      	ldrh	r3, [r7, #30]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ff3f 	bl	8006e0c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006f8e:	4b23      	ldr	r3, [pc, #140]	@ (800701c <BSP_LCD_DisplayStringAt+0x188>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4923      	ldr	r1, [pc, #140]	@ (8007020 <BSP_LCD_DisplayStringAt+0x18c>)
 8006f94:	4613      	mov	r3, r2
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	889a      	ldrh	r2, [r3, #4]
 8006fa4:	8bfb      	ldrh	r3, [r7, #30]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	3301      	adds	r3, #1
 8006fae:	60bb      	str	r3, [r7, #8]
    i++;
 8006fb0:	8bbb      	ldrh	r3, [r7, #28]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf14      	ite	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	2300      	moveq	r3, #0
 8006fc2:	b2dc      	uxtb	r4, r3
 8006fc4:	f7ff fe00 	bl	8006bc8 <BSP_LCD_GetXSize>
 8006fc8:	8bb9      	ldrh	r1, [r7, #28]
 8006fca:	4b14      	ldr	r3, [pc, #80]	@ (800701c <BSP_LCD_DisplayStringAt+0x188>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4d14      	ldr	r5, [pc, #80]	@ (8007020 <BSP_LCD_DisplayStringAt+0x18c>)
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	442b      	add	r3, r5
 8006fda:	3308      	adds	r3, #8
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	889b      	ldrh	r3, [r3, #4]
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	1ac3      	subs	r3, r0, r3
 8006fe6:	b299      	uxth	r1, r3
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800701c <BSP_LCD_DisplayStringAt+0x188>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	480c      	ldr	r0, [pc, #48]	@ (8007020 <BSP_LCD_DisplayStringAt+0x18c>)
 8006fee:	4613      	mov	r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4403      	add	r3, r0
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	4299      	cmp	r1, r3
 8007000:	bf2c      	ite	cs
 8007002:	2301      	movcs	r3, #1
 8007004:	2300      	movcc	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	4023      	ands	r3, r4
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1b7      	bne.n	8006f80 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bdb0      	pop	{r4, r5, r7, pc}
 800701a:	bf00      	nop
 800701c:	20000ebc 	.word	0x20000ebc
 8007020:	20000ec0 	.word	0x20000ec0

08007024 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8007030:	f7ff feae 	bl	8006d90 <BSP_LCD_GetFont>
 8007034:	4603      	mov	r3, r0
 8007036:	88db      	ldrh	r3, [r3, #6]
 8007038:	88fa      	ldrh	r2, [r7, #6]
 800703a:	fb12 f303 	smulbb	r3, r2, r3
 800703e:	b299      	uxth	r1, r3
 8007040:	2303      	movs	r3, #3
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	2000      	movs	r0, #0
 8007046:	f7ff ff25 	bl	8006e94 <BSP_LCD_DisplayStringAt>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007054:	b5b0      	push	{r4, r5, r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af02      	add	r7, sp, #8
 800705a:	4603      	mov	r3, r0
 800705c:	80fb      	strh	r3, [r7, #6]
 800705e:	460b      	mov	r3, r1
 8007060:	80bb      	strh	r3, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800706a:	4b26      	ldr	r3, [pc, #152]	@ (8007104 <BSP_LCD_DrawHLine+0xb0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a26      	ldr	r2, [pc, #152]	@ (8007108 <BSP_LCD_DrawHLine+0xb4>)
 8007070:	2134      	movs	r1, #52	@ 0x34
 8007072:	fb01 f303 	mul.w	r3, r1, r3
 8007076:	4413      	add	r3, r2
 8007078:	3348      	adds	r3, #72	@ 0x48
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d114      	bne.n	80070aa <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007080:	4b20      	ldr	r3, [pc, #128]	@ (8007104 <BSP_LCD_DrawHLine+0xb0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a20      	ldr	r2, [pc, #128]	@ (8007108 <BSP_LCD_DrawHLine+0xb4>)
 8007086:	2134      	movs	r1, #52	@ 0x34
 8007088:	fb01 f303 	mul.w	r3, r1, r3
 800708c:	4413      	add	r3, r2
 800708e:	335c      	adds	r3, #92	@ 0x5c
 8007090:	681c      	ldr	r4, [r3, #0]
 8007092:	f7ff fd99 	bl	8006bc8 <BSP_LCD_GetXSize>
 8007096:	4602      	mov	r2, r0
 8007098:	88bb      	ldrh	r3, [r7, #4]
 800709a:	fb03 f202 	mul.w	r2, r3, r2
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	4413      	add	r3, r2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4423      	add	r3, r4
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e013      	b.n	80070d2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80070aa:	4b16      	ldr	r3, [pc, #88]	@ (8007104 <BSP_LCD_DrawHLine+0xb0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a16      	ldr	r2, [pc, #88]	@ (8007108 <BSP_LCD_DrawHLine+0xb4>)
 80070b0:	2134      	movs	r1, #52	@ 0x34
 80070b2:	fb01 f303 	mul.w	r3, r1, r3
 80070b6:	4413      	add	r3, r2
 80070b8:	335c      	adds	r3, #92	@ 0x5c
 80070ba:	681c      	ldr	r4, [r3, #0]
 80070bc:	f7ff fd84 	bl	8006bc8 <BSP_LCD_GetXSize>
 80070c0:	4602      	mov	r2, r0
 80070c2:	88bb      	ldrh	r3, [r7, #4]
 80070c4:	fb03 f202 	mul.w	r2, r3, r2
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4423      	add	r3, r4
 80070d0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80070d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <BSP_LCD_DrawHLine+0xb0>)
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	887c      	ldrh	r4, [r7, #2]
 80070da:	4b0a      	ldr	r3, [pc, #40]	@ (8007104 <BSP_LCD_DrawHLine+0xb0>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4d0b      	ldr	r5, [pc, #44]	@ (800710c <BSP_LCD_DrawHLine+0xb8>)
 80070e0:	4613      	mov	r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	442b      	add	r3, r5
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	2301      	movs	r3, #1
 80070f4:	4622      	mov	r2, r4
 80070f6:	f000 fb4b 	bl	8007790 <LL_FillBuffer>
}
 80070fa:	bf00      	nop
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bdb0      	pop	{r4, r5, r7, pc}
 8007102:	bf00      	nop
 8007104:	20000ebc 	.word	0x20000ebc
 8007108:	20000dd4 	.word	0x20000dd4
 800710c:	20000ec0 	.word	0x20000ec0

08007110 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8007110:	b5b0      	push	{r4, r5, r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	603a      	str	r2, [r7, #0]
 800711a:	80fb      	strh	r3, [r7, #6]
 800711c:	460b      	mov	r3, r1
 800711e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007120:	4b1d      	ldr	r3, [pc, #116]	@ (8007198 <BSP_LCD_DrawPixel+0x88>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1d      	ldr	r2, [pc, #116]	@ (800719c <BSP_LCD_DrawPixel+0x8c>)
 8007126:	2134      	movs	r1, #52	@ 0x34
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	3348      	adds	r3, #72	@ 0x48
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d116      	bne.n	8007164 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8007136:	4b18      	ldr	r3, [pc, #96]	@ (8007198 <BSP_LCD_DrawPixel+0x88>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a18      	ldr	r2, [pc, #96]	@ (800719c <BSP_LCD_DrawPixel+0x8c>)
 800713c:	2134      	movs	r1, #52	@ 0x34
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	4413      	add	r3, r2
 8007144:	335c      	adds	r3, #92	@ 0x5c
 8007146:	681c      	ldr	r4, [r3, #0]
 8007148:	88bd      	ldrh	r5, [r7, #4]
 800714a:	f7ff fd3d 	bl	8006bc8 <BSP_LCD_GetXSize>
 800714e:	4603      	mov	r3, r0
 8007150:	fb03 f205 	mul.w	r2, r3, r5
 8007154:	88fb      	ldrh	r3, [r7, #6]
 8007156:	4413      	add	r3, r2
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	4423      	add	r3, r4
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	b292      	uxth	r2, r2
 8007160:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8007162:	e015      	b.n	8007190 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8007164:	4b0c      	ldr	r3, [pc, #48]	@ (8007198 <BSP_LCD_DrawPixel+0x88>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a0c      	ldr	r2, [pc, #48]	@ (800719c <BSP_LCD_DrawPixel+0x8c>)
 800716a:	2134      	movs	r1, #52	@ 0x34
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	4413      	add	r3, r2
 8007172:	335c      	adds	r3, #92	@ 0x5c
 8007174:	681c      	ldr	r4, [r3, #0]
 8007176:	88bd      	ldrh	r5, [r7, #4]
 8007178:	f7ff fd26 	bl	8006bc8 <BSP_LCD_GetXSize>
 800717c:	4603      	mov	r3, r0
 800717e:	fb03 f205 	mul.w	r2, r3, r5
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4423      	add	r3, r4
 800718a:	461a      	mov	r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bdb0      	pop	{r4, r5, r7, pc}
 8007198:	20000ebc 	.word	0x20000ebc
 800719c:	20000dd4 	.word	0x20000dd4

080071a0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b08b      	sub	sp, #44	@ 0x2c
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b0:	2300      	movs	r3, #0
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	2300      	movs	r3, #0
 80071ba:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	330a      	adds	r3, #10
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	330b      	adds	r3, #11
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	441a      	add	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	330c      	adds	r3, #12
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	441a      	add	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	330d      	adds	r3, #13
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	061b      	lsls	r3, r3, #24
 80071e4:	4413      	add	r3, r2
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3312      	adds	r3, #18
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3313      	adds	r3, #19
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	441a      	add	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3314      	adds	r3, #20
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	441a      	add	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3315      	adds	r3, #21
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	4413      	add	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3316      	adds	r3, #22
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3317      	adds	r3, #23
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	441a      	add	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3318      	adds	r3, #24
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	441a      	add	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3319      	adds	r3, #25
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	061b      	lsls	r3, r3, #24
 8007234:	4413      	add	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	331c      	adds	r3, #28
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	331d      	adds	r3, #29
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	4413      	add	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800724c:	4b2b      	ldr	r3, [pc, #172]	@ (80072fc <BSP_LCD_DrawBitmap+0x15c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a2b      	ldr	r2, [pc, #172]	@ (8007300 <BSP_LCD_DrawBitmap+0x160>)
 8007252:	2134      	movs	r1, #52	@ 0x34
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	335c      	adds	r3, #92	@ 0x5c
 800725c:	681c      	ldr	r4, [r3, #0]
 800725e:	f7ff fcb3 	bl	8006bc8 <BSP_LCD_GetXSize>
 8007262:	4602      	mov	r2, r0
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	fb03 f202 	mul.w	r2, r3, r2
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4423      	add	r3, r4
 8007272:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	3b20      	subs	r3, #32
 8007278:	2b07      	cmp	r3, #7
 800727a:	d802      	bhi.n	8007282 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	e008      	b.n	8007294 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	3b10      	subs	r3, #16
 8007286:	2b07      	cmp	r3, #7
 8007288:	d802      	bhi.n	8007290 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800728a:	2302      	movs	r3, #2
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	e001      	b.n	8007294 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8007290:	2301      	movs	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	3b01      	subs	r3, #1
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	08d2      	lsrs	r2, r2, #3
 80072a2:	fb03 f202 	mul.w	r2, r3, r2
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	4413      	add	r3, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80072b0:	2300      	movs	r3, #0
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b4:	e018      	b.n	80072e8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80072b6:	6a39      	ldr	r1, [r7, #32]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fab3 	bl	8007828 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80072c2:	f7ff fc81 	bl	8006bc8 <BSP_LCD_GetXSize>
 80072c6:	4603      	mov	r3, r0
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	6a3a      	ldr	r2, [r7, #32]
 80072cc:	4413      	add	r3, r2
 80072ce:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	08db      	lsrs	r3, r3, #3
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	425b      	negs	r3, r3
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	3301      	adds	r3, #1
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d3e2      	bcc.n	80072b6 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	372c      	adds	r7, #44	@ 0x2c
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd90      	pop	{r4, r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000ebc 	.word	0x20000ebc
 8007300:	20000dd4 	.word	0x20000dd4

08007304 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	b086      	sub	sp, #24
 800730a:	af02      	add	r7, sp, #8
 800730c:	4604      	mov	r4, r0
 800730e:	4608      	mov	r0, r1
 8007310:	4611      	mov	r1, r2
 8007312:	461a      	mov	r2, r3
 8007314:	4623      	mov	r3, r4
 8007316:	80fb      	strh	r3, [r7, #6]
 8007318:	4603      	mov	r3, r0
 800731a:	80bb      	strh	r3, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
 8007320:	4613      	mov	r3, r2
 8007322:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007328:	4b30      	ldr	r3, [pc, #192]	@ (80073ec <BSP_LCD_FillRect+0xe8>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4930      	ldr	r1, [pc, #192]	@ (80073f0 <BSP_LCD_FillRect+0xec>)
 800732e:	4613      	mov	r3, r2
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fcdc 	bl	8006cf8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007340:	4b2a      	ldr	r3, [pc, #168]	@ (80073ec <BSP_LCD_FillRect+0xe8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a2b      	ldr	r2, [pc, #172]	@ (80073f4 <BSP_LCD_FillRect+0xf0>)
 8007346:	2134      	movs	r1, #52	@ 0x34
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	3348      	adds	r3, #72	@ 0x48
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d114      	bne.n	8007380 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007356:	4b25      	ldr	r3, [pc, #148]	@ (80073ec <BSP_LCD_FillRect+0xe8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a26      	ldr	r2, [pc, #152]	@ (80073f4 <BSP_LCD_FillRect+0xf0>)
 800735c:	2134      	movs	r1, #52	@ 0x34
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	335c      	adds	r3, #92	@ 0x5c
 8007366:	681c      	ldr	r4, [r3, #0]
 8007368:	f7ff fc2e 	bl	8006bc8 <BSP_LCD_GetXSize>
 800736c:	4602      	mov	r2, r0
 800736e:	88bb      	ldrh	r3, [r7, #4]
 8007370:	fb03 f202 	mul.w	r2, r3, r2
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	4413      	add	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4423      	add	r3, r4
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e013      	b.n	80073a8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007380:	4b1a      	ldr	r3, [pc, #104]	@ (80073ec <BSP_LCD_FillRect+0xe8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1b      	ldr	r2, [pc, #108]	@ (80073f4 <BSP_LCD_FillRect+0xf0>)
 8007386:	2134      	movs	r1, #52	@ 0x34
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	4413      	add	r3, r2
 800738e:	335c      	adds	r3, #92	@ 0x5c
 8007390:	681c      	ldr	r4, [r3, #0]
 8007392:	f7ff fc19 	bl	8006bc8 <BSP_LCD_GetXSize>
 8007396:	4602      	mov	r2, r0
 8007398:	88bb      	ldrh	r3, [r7, #4]
 800739a:	fb03 f202 	mul.w	r2, r3, r2
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4423      	add	r3, r4
 80073a6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80073a8:	4b10      	ldr	r3, [pc, #64]	@ (80073ec <BSP_LCD_FillRect+0xe8>)
 80073aa:	681c      	ldr	r4, [r3, #0]
 80073ac:	68fd      	ldr	r5, [r7, #12]
 80073ae:	887e      	ldrh	r6, [r7, #2]
 80073b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80073b4:	f7ff fc08 	bl	8006bc8 <BSP_LCD_GetXSize>
 80073b8:	4602      	mov	r2, r0
 80073ba:	887b      	ldrh	r3, [r7, #2]
 80073bc:	1ad1      	subs	r1, r2, r3
 80073be:	4b0b      	ldr	r3, [pc, #44]	@ (80073ec <BSP_LCD_FillRect+0xe8>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	480b      	ldr	r0, [pc, #44]	@ (80073f0 <BSP_LCD_FillRect+0xec>)
 80073c4:	4613      	mov	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4403      	add	r3, r0
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	9100      	str	r1, [sp, #0]
 80073d4:	4643      	mov	r3, r8
 80073d6:	4632      	mov	r2, r6
 80073d8:	4629      	mov	r1, r5
 80073da:	4620      	mov	r0, r4
 80073dc:	f000 f9d8 	bl	8007790 <LL_FillBuffer>
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ea:	bf00      	nop
 80073ec:	20000ebc 	.word	0x20000ebc
 80073f0:	20000ec0 	.word	0x20000ec0
 80073f4:	20000dd4 	.word	0x20000dd4

080073f8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80073fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <BSP_LCD_DisplayOn+0x30>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <BSP_LCD_DisplayOn+0x30>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800740c:	2201      	movs	r2, #1
 800740e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007412:	4806      	ldr	r0, [pc, #24]	@ (800742c <BSP_LCD_DisplayOn+0x34>)
 8007414:	f005 f83c 	bl	800c490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8007418:	2201      	movs	r2, #1
 800741a:	2108      	movs	r1, #8
 800741c:	4804      	ldr	r0, [pc, #16]	@ (8007430 <BSP_LCD_DisplayOn+0x38>)
 800741e:	f005 f837 	bl	800c490 <HAL_GPIO_WritePin>
}
 8007422:	bf00      	nop
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000dd4 	.word	0x20000dd4
 800742c:	40022000 	.word	0x40022000
 8007430:	40022800 	.word	0x40022800

08007434 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b090      	sub	sp, #64	@ 0x40
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800743e:	4b64      	ldr	r3, [pc, #400]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007442:	4a63      	ldr	r2, [pc, #396]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007444:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007448:	6453      	str	r3, [r2, #68]	@ 0x44
 800744a:	4b61      	ldr	r3, [pc, #388]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 800744c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8007456:	4b5e      	ldr	r3, [pc, #376]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745a:	4a5d      	ldr	r2, [pc, #372]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 800745c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007460:	6313      	str	r3, [r2, #48]	@ 0x30
 8007462:	4b5b      	ldr	r3, [pc, #364]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800746e:	4b58      	ldr	r3, [pc, #352]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007472:	4a57      	ldr	r2, [pc, #348]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007474:	f043 0310 	orr.w	r3, r3, #16
 8007478:	6313      	str	r3, [r2, #48]	@ 0x30
 800747a:	4b55      	ldr	r3, [pc, #340]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007486:	4b52      	ldr	r3, [pc, #328]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748a:	4a51      	ldr	r2, [pc, #324]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 800748c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007490:	6313      	str	r3, [r2, #48]	@ 0x30
 8007492:	4b4f      	ldr	r3, [pc, #316]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749a:	61fb      	str	r3, [r7, #28]
 800749c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800749e:	4b4c      	ldr	r3, [pc, #304]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a2:	4a4b      	ldr	r2, [pc, #300]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80074aa:	4b49      	ldr	r3, [pc, #292]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b2:	61bb      	str	r3, [r7, #24]
 80074b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80074b6:	4b46      	ldr	r3, [pc, #280]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ba:	4a45      	ldr	r2, [pc, #276]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80074c2:	4b43      	ldr	r3, [pc, #268]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80074ce:	4b40      	ldr	r3, [pc, #256]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	4a3f      	ldr	r2, [pc, #252]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80074da:	4b3d      	ldr	r3, [pc, #244]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80074e6:	4b3a      	ldr	r3, [pc, #232]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ea:	4a39      	ldr	r2, [pc, #228]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80074f2:	4b37      	ldr	r3, [pc, #220]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80074fe:	4b34      	ldr	r3, [pc, #208]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007502:	4a33      	ldr	r2, [pc, #204]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 8007504:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007508:	6313      	str	r3, [r2, #48]	@ 0x30
 800750a:	4b31      	ldr	r3, [pc, #196]	@ (80075d0 <BSP_LCD_MspInit+0x19c>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007512:	60bb      	str	r3, [r7, #8]
 8007514:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8007516:	2310      	movs	r3, #16
 8007518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800751a:	2302      	movs	r3, #2
 800751c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800751e:	2300      	movs	r3, #0
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007522:	2302      	movs	r3, #2
 8007524:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8007526:	230e      	movs	r3, #14
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800752a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800752e:	4619      	mov	r1, r3
 8007530:	4828      	ldr	r0, [pc, #160]	@ (80075d4 <BSP_LCD_MspInit+0x1a0>)
 8007532:	f004 fcdd 	bl	800bef0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8007536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800753a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800753c:	2302      	movs	r3, #2
 800753e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8007540:	2309      	movs	r3, #9
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007548:	4619      	mov	r1, r3
 800754a:	4823      	ldr	r0, [pc, #140]	@ (80075d8 <BSP_LCD_MspInit+0x1a4>)
 800754c:	f004 fcd0 	bl	800bef0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8007550:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007556:	2302      	movs	r3, #2
 8007558:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800755a:	230e      	movs	r3, #14
 800755c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800755e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007562:	4619      	mov	r1, r3
 8007564:	481d      	ldr	r0, [pc, #116]	@ (80075dc <BSP_LCD_MspInit+0x1a8>)
 8007566:	f004 fcc3 	bl	800bef0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800756a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800756e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007570:	2302      	movs	r3, #2
 8007572:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007574:	230e      	movs	r3, #14
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8007578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800757c:	4619      	mov	r1, r3
 800757e:	4818      	ldr	r0, [pc, #96]	@ (80075e0 <BSP_LCD_MspInit+0x1ac>)
 8007580:	f004 fcb6 	bl	800bef0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8007584:	23f7      	movs	r3, #247	@ 0xf7
 8007586:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007588:	2302      	movs	r3, #2
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800758c:	230e      	movs	r3, #14
 800758e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007590:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007594:	4619      	mov	r1, r3
 8007596:	4813      	ldr	r0, [pc, #76]	@ (80075e4 <BSP_LCD_MspInit+0x1b0>)
 8007598:	f004 fcaa 	bl	800bef0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800759c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80075a2:	2301      	movs	r3, #1
 80075a4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80075a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80075aa:	4619      	mov	r1, r3
 80075ac:	480b      	ldr	r0, [pc, #44]	@ (80075dc <BSP_LCD_MspInit+0x1a8>)
 80075ae:	f004 fc9f 	bl	800bef0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80075b2:	2308      	movs	r3, #8
 80075b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80075b6:	2301      	movs	r3, #1
 80075b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80075ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80075be:	4619      	mov	r1, r3
 80075c0:	4808      	ldr	r0, [pc, #32]	@ (80075e4 <BSP_LCD_MspInit+0x1b0>)
 80075c2:	f004 fc95 	bl	800bef0 <HAL_GPIO_Init>
}
 80075c6:	bf00      	nop
 80075c8:	3740      	adds	r7, #64	@ 0x40
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	40023800 	.word	0x40023800
 80075d4:	40021000 	.word	0x40021000
 80075d8:	40021800 	.word	0x40021800
 80075dc:	40022000 	.word	0x40022000
 80075e0:	40022400 	.word	0x40022400
 80075e4:	40022800 	.word	0x40022800

080075e8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80075f2:	4b0a      	ldr	r3, [pc, #40]	@ (800761c <BSP_LCD_ClockConfig+0x34>)
 80075f4:	2208      	movs	r2, #8
 80075f6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80075f8:	4b08      	ldr	r3, [pc, #32]	@ (800761c <BSP_LCD_ClockConfig+0x34>)
 80075fa:	22c0      	movs	r2, #192	@ 0xc0
 80075fc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80075fe:	4b07      	ldr	r3, [pc, #28]	@ (800761c <BSP_LCD_ClockConfig+0x34>)
 8007600:	2205      	movs	r2, #5
 8007602:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8007604:	4b05      	ldr	r3, [pc, #20]	@ (800761c <BSP_LCD_ClockConfig+0x34>)
 8007606:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800760a:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800760c:	4803      	ldr	r0, [pc, #12]	@ (800761c <BSP_LCD_ClockConfig+0x34>)
 800760e:	f006 fd97 	bl	800e140 <HAL_RCCEx_PeriphCLKConfig>
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000ed8 	.word	0x20000ed8

08007620 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	603a      	str	r2, [r7, #0]
 800762a:	80fb      	strh	r3, [r7, #6]
 800762c:	460b      	mov	r3, r1
 800762e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	2300      	movs	r3, #0
 8007636:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8007638:	4b53      	ldr	r3, [pc, #332]	@ (8007788 <DrawChar+0x168>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	4953      	ldr	r1, [pc, #332]	@ (800778c <DrawChar+0x16c>)
 800763e:	4613      	mov	r3, r2
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	3308      	adds	r3, #8
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	88db      	ldrh	r3, [r3, #6]
 800764e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8007650:	4b4d      	ldr	r3, [pc, #308]	@ (8007788 <DrawChar+0x168>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	494d      	ldr	r1, [pc, #308]	@ (800778c <DrawChar+0x16c>)
 8007656:	4613      	mov	r3, r2
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	3308      	adds	r3, #8
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	889b      	ldrh	r3, [r3, #4]
 8007666:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8007668:	8a3b      	ldrh	r3, [r7, #16]
 800766a:	3307      	adds	r3, #7
 800766c:	2b00      	cmp	r3, #0
 800766e:	da00      	bge.n	8007672 <DrawChar+0x52>
 8007670:	3307      	adds	r3, #7
 8007672:	10db      	asrs	r3, r3, #3
 8007674:	b2db      	uxtb	r3, r3
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	b2da      	uxtb	r2, r3
 800767a:	8a3b      	ldrh	r3, [r7, #16]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	e076      	b.n	8007776 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8007688:	8a3b      	ldrh	r3, [r7, #16]
 800768a:	3307      	adds	r3, #7
 800768c:	2b00      	cmp	r3, #0
 800768e:	da00      	bge.n	8007692 <DrawChar+0x72>
 8007690:	3307      	adds	r3, #7
 8007692:	10db      	asrs	r3, r3, #3
 8007694:	461a      	mov	r2, r3
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	4413      	add	r3, r2
 80076a0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80076a2:	8a3b      	ldrh	r3, [r7, #16]
 80076a4:	3307      	adds	r3, #7
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da00      	bge.n	80076ac <DrawChar+0x8c>
 80076aa:	3307      	adds	r3, #7
 80076ac:	10db      	asrs	r3, r3, #3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d002      	beq.n	80076b8 <DrawChar+0x98>
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d004      	beq.n	80076c0 <DrawChar+0xa0>
 80076b6:	e00c      	b.n	80076d2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	617b      	str	r3, [r7, #20]
      break;
 80076be:	e016      	b.n	80076ee <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	3201      	adds	r2, #1
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
      break;
 80076d0:	e00d      	b.n	80076ee <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	041a      	lsls	r2, r3, #16
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	3301      	adds	r3, #1
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	4313      	orrs	r3, r2
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	3202      	adds	r2, #2
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
      break;
 80076ec:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	e036      	b.n	8007762 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80076f4:	8a3a      	ldrh	r2, [r7, #16]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	4413      	add	r3, r2
 80076fe:	3b01      	subs	r3, #1
 8007700:	2201      	movs	r2, #1
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	461a      	mov	r2, r3
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d012      	beq.n	8007736 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	b29a      	uxth	r2, r3
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	4413      	add	r3, r2
 8007718:	b298      	uxth	r0, r3
 800771a:	4b1b      	ldr	r3, [pc, #108]	@ (8007788 <DrawChar+0x168>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	491b      	ldr	r1, [pc, #108]	@ (800778c <DrawChar+0x16c>)
 8007720:	4613      	mov	r3, r2
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	88bb      	ldrh	r3, [r7, #4]
 800772e:	4619      	mov	r1, r3
 8007730:	f7ff fcee 	bl	8007110 <BSP_LCD_DrawPixel>
 8007734:	e012      	b.n	800775c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	b29a      	uxth	r2, r3
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	4413      	add	r3, r2
 800773e:	b298      	uxth	r0, r3
 8007740:	4b11      	ldr	r3, [pc, #68]	@ (8007788 <DrawChar+0x168>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	4911      	ldr	r1, [pc, #68]	@ (800778c <DrawChar+0x16c>)
 8007746:	4613      	mov	r3, r2
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	3304      	adds	r3, #4
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	88bb      	ldrh	r3, [r7, #4]
 8007756:	4619      	mov	r1, r3
 8007758:	f7ff fcda 	bl	8007110 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	3301      	adds	r3, #1
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	8a3b      	ldrh	r3, [r7, #16]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	429a      	cmp	r2, r3
 8007768:	d3c4      	bcc.n	80076f4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800776a:	88bb      	ldrh	r3, [r7, #4]
 800776c:	3301      	adds	r3, #1
 800776e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	8a7b      	ldrh	r3, [r7, #18]
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	429a      	cmp	r2, r3
 800777c:	d384      	bcc.n	8007688 <DrawChar+0x68>
  }
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000ebc 	.word	0x20000ebc
 800778c:	20000ec0 	.word	0x20000ec0

08007790 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800779e:	4b1e      	ldr	r3, [pc, #120]	@ (8007818 <LL_FillBuffer+0x88>)
 80077a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80077a4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80077a6:	4b1d      	ldr	r3, [pc, #116]	@ (800781c <LL_FillBuffer+0x8c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007820 <LL_FillBuffer+0x90>)
 80077ac:	2134      	movs	r1, #52	@ 0x34
 80077ae:	fb01 f303 	mul.w	r3, r1, r3
 80077b2:	4413      	add	r3, r2
 80077b4:	3348      	adds	r3, #72	@ 0x48
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d103      	bne.n	80077c4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80077bc:	4b16      	ldr	r3, [pc, #88]	@ (8007818 <LL_FillBuffer+0x88>)
 80077be:	2202      	movs	r2, #2
 80077c0:	609a      	str	r2, [r3, #8]
 80077c2:	e002      	b.n	80077ca <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80077c4:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <LL_FillBuffer+0x88>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80077ca:	4a13      	ldr	r2, [pc, #76]	@ (8007818 <LL_FillBuffer+0x88>)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80077d0:	4b11      	ldr	r3, [pc, #68]	@ (8007818 <LL_FillBuffer+0x88>)
 80077d2:	4a14      	ldr	r2, [pc, #80]	@ (8007824 <LL_FillBuffer+0x94>)
 80077d4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80077d6:	4810      	ldr	r0, [pc, #64]	@ (8007818 <LL_FillBuffer+0x88>)
 80077d8:	f004 f8fe 	bl	800b9d8 <HAL_DMA2D_Init>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d115      	bne.n	800780e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80077e2:	68f9      	ldr	r1, [r7, #12]
 80077e4:	480c      	ldr	r0, [pc, #48]	@ (8007818 <LL_FillBuffer+0x88>)
 80077e6:	f004 fa55 	bl	800bc94 <HAL_DMA2D_ConfigLayer>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10e      	bne.n	800780e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69f9      	ldr	r1, [r7, #28]
 80077fa:	4807      	ldr	r0, [pc, #28]	@ (8007818 <LL_FillBuffer+0x88>)
 80077fc:	f004 f936 	bl	800ba6c <HAL_DMA2D_Start>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007806:	210a      	movs	r1, #10
 8007808:	4803      	ldr	r0, [pc, #12]	@ (8007818 <LL_FillBuffer+0x88>)
 800780a:	f004 f95a 	bl	800bac2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000e7c 	.word	0x20000e7c
 800781c:	20000ebc 	.word	0x20000ebc
 8007820:	20000dd4 	.word	0x20000dd4
 8007824:	4002b000 	.word	0x4002b000

08007828 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af02      	add	r7, sp, #8
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8007836:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 8007838:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800783c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800783e:	4b1a      	ldr	r3, [pc, #104]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 8007840:	2200      	movs	r2, #0
 8007842:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8007844:	4b18      	ldr	r3, [pc, #96]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 8007846:	2200      	movs	r2, #0
 8007848:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800784a:	4b17      	ldr	r3, [pc, #92]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8007850:	4b15      	ldr	r3, [pc, #84]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 8007852:	22ff      	movs	r2, #255	@ 0xff
 8007854:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8007856:	4a14      	ldr	r2, [pc, #80]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 800785e:	2200      	movs	r2, #0
 8007860:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8007862:	4b11      	ldr	r3, [pc, #68]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 8007864:	4a11      	ldr	r2, [pc, #68]	@ (80078ac <LL_ConvertLineToARGB8888+0x84>)
 8007866:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8007868:	480f      	ldr	r0, [pc, #60]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 800786a:	f004 f8b5 	bl	800b9d8 <HAL_DMA2D_Init>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d115      	bne.n	80078a0 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8007874:	2101      	movs	r1, #1
 8007876:	480c      	ldr	r0, [pc, #48]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 8007878:	f004 fa0c 	bl	800bc94 <HAL_DMA2D_ConfigLayer>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10e      	bne.n	80078a0 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	2301      	movs	r3, #1
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4806      	ldr	r0, [pc, #24]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 800788e:	f004 f8ed 	bl	800ba6c <HAL_DMA2D_Start>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007898:	210a      	movs	r1, #10
 800789a:	4803      	ldr	r0, [pc, #12]	@ (80078a8 <LL_ConvertLineToARGB8888+0x80>)
 800789c:	f004 f911 	bl	800bac2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000e7c 	.word	0x20000e7c
 80078ac:	4002b000 	.word	0x4002b000

080078b0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80078b4:	4b29      	ldr	r3, [pc, #164]	@ (800795c <BSP_SDRAM_Init+0xac>)
 80078b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007960 <BSP_SDRAM_Init+0xb0>)
 80078b8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80078ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 80078bc:	2202      	movs	r2, #2
 80078be:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80078c0:	4b28      	ldr	r3, [pc, #160]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 80078c2:	2207      	movs	r2, #7
 80078c4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80078c6:	4b27      	ldr	r3, [pc, #156]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 80078c8:	2204      	movs	r2, #4
 80078ca:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80078cc:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 80078ce:	2207      	movs	r2, #7
 80078d0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80078d2:	4b24      	ldr	r3, [pc, #144]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 80078d4:	2202      	movs	r2, #2
 80078d6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80078d8:	4b22      	ldr	r3, [pc, #136]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 80078da:	2202      	movs	r2, #2
 80078dc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80078de:	4b21      	ldr	r3, [pc, #132]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 80078e0:	2202      	movs	r2, #2
 80078e2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80078e4:	4b1d      	ldr	r3, [pc, #116]	@ (800795c <BSP_SDRAM_Init+0xac>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80078ea:	4b1c      	ldr	r3, [pc, #112]	@ (800795c <BSP_SDRAM_Init+0xac>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80078f0:	4b1a      	ldr	r3, [pc, #104]	@ (800795c <BSP_SDRAM_Init+0xac>)
 80078f2:	2204      	movs	r2, #4
 80078f4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80078f6:	4b19      	ldr	r3, [pc, #100]	@ (800795c <BSP_SDRAM_Init+0xac>)
 80078f8:	2210      	movs	r2, #16
 80078fa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80078fc:	4b17      	ldr	r3, [pc, #92]	@ (800795c <BSP_SDRAM_Init+0xac>)
 80078fe:	2240      	movs	r2, #64	@ 0x40
 8007900:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8007902:	4b16      	ldr	r3, [pc, #88]	@ (800795c <BSP_SDRAM_Init+0xac>)
 8007904:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007908:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800790a:	4b14      	ldr	r3, [pc, #80]	@ (800795c <BSP_SDRAM_Init+0xac>)
 800790c:	2200      	movs	r2, #0
 800790e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007910:	4b12      	ldr	r3, [pc, #72]	@ (800795c <BSP_SDRAM_Init+0xac>)
 8007912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007916:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007918:	4b10      	ldr	r3, [pc, #64]	@ (800795c <BSP_SDRAM_Init+0xac>)
 800791a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800791e:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8007920:	4b0e      	ldr	r3, [pc, #56]	@ (800795c <BSP_SDRAM_Init+0xac>)
 8007922:	2200      	movs	r2, #0
 8007924:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007926:	2100      	movs	r1, #0
 8007928:	480c      	ldr	r0, [pc, #48]	@ (800795c <BSP_SDRAM_Init+0xac>)
 800792a:	f000 f87f 	bl	8007a2c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800792e:	490d      	ldr	r1, [pc, #52]	@ (8007964 <BSP_SDRAM_Init+0xb4>)
 8007930:	480a      	ldr	r0, [pc, #40]	@ (800795c <BSP_SDRAM_Init+0xac>)
 8007932:	f008 febb 	bl	80106ac <HAL_SDRAM_Init>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800793c:	4b0a      	ldr	r3, [pc, #40]	@ (8007968 <BSP_SDRAM_Init+0xb8>)
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e002      	b.n	800794a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007944:	4b08      	ldr	r3, [pc, #32]	@ (8007968 <BSP_SDRAM_Init+0xb8>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800794a:	f240 6003 	movw	r0, #1539	@ 0x603
 800794e:	f000 f80d 	bl	800796c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8007952:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <BSP_SDRAM_Init+0xb8>)
 8007954:	781b      	ldrb	r3, [r3, #0]
}
 8007956:	4618      	mov	r0, r3
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000f5c 	.word	0x20000f5c
 8007960:	a0000140 	.word	0xa0000140
 8007964:	20000f90 	.word	0x20000f90
 8007968:	2000004c 	.word	0x2000004c

0800796c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8007978:	4b2a      	ldr	r3, [pc, #168]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800797e:	4b29      	ldr	r3, [pc, #164]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007980:	2210      	movs	r2, #16
 8007982:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007984:	4b27      	ldr	r3, [pc, #156]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007986:	2201      	movs	r2, #1
 8007988:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800798a:	4b26      	ldr	r3, [pc, #152]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800798c:	2200      	movs	r2, #0
 800798e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007994:	4923      	ldr	r1, [pc, #140]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007996:	4824      	ldr	r0, [pc, #144]	@ (8007a28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007998:	f008 febc 	bl	8010714 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800799c:	2001      	movs	r0, #1
 800799e:	f002 ff17 	bl	800a7d0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80079a2:	4b20      	ldr	r3, [pc, #128]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079a4:	2202      	movs	r2, #2
 80079a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80079a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079aa:	2210      	movs	r2, #16
 80079ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80079ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80079b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80079ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079be:	4919      	ldr	r1, [pc, #100]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079c0:	4819      	ldr	r0, [pc, #100]	@ (8007a28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80079c2:	f008 fea7 	bl	8010714 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80079c6:	4b17      	ldr	r3, [pc, #92]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079c8:	2203      	movs	r2, #3
 80079ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80079cc:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079ce:	2210      	movs	r2, #16
 80079d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80079d2:	4b14      	ldr	r3, [pc, #80]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079d4:	2208      	movs	r2, #8
 80079d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80079d8:	4b12      	ldr	r3, [pc, #72]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079da:	2200      	movs	r2, #0
 80079dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80079de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079e2:	4910      	ldr	r1, [pc, #64]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079e4:	4810      	ldr	r0, [pc, #64]	@ (8007a28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80079e6:	f008 fe95 	bl	8010714 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80079ea:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80079ee:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80079f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079f2:	2204      	movs	r2, #4
 80079f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079f8:	2210      	movs	r2, #16
 80079fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80079fc:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4a07      	ldr	r2, [pc, #28]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a06:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a0c:	4905      	ldr	r1, [pc, #20]	@ (8007a24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a0e:	4806      	ldr	r0, [pc, #24]	@ (8007a28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007a10:	f008 fe80 	bl	8010714 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	4804      	ldr	r0, [pc, #16]	@ (8007a28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007a18:	f008 feb1 	bl	801077e <HAL_SDRAM_ProgramRefreshRate>
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000fac 	.word	0x20000fac
 8007a28:	20000f5c 	.word	0x20000f5c

08007a2c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b090      	sub	sp, #64	@ 0x40
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007a36:	4b70      	ldr	r3, [pc, #448]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3a:	4a6f      	ldr	r2, [pc, #444]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	6393      	str	r3, [r2, #56]	@ 0x38
 8007a42:	4b6d      	ldr	r3, [pc, #436]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8007a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a52:	4a69      	ldr	r2, [pc, #420]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a5a:	4b67      	ldr	r3, [pc, #412]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a66:	4b64      	ldr	r3, [pc, #400]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6a:	4a63      	ldr	r2, [pc, #396]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a6c:	f043 0304 	orr.w	r3, r3, #4
 8007a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a72:	4b61      	ldr	r3, [pc, #388]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a82:	4a5d      	ldr	r2, [pc, #372]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a84:	f043 0308 	orr.w	r3, r3, #8
 8007a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	61fb      	str	r3, [r7, #28]
 8007a94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a96:	4b58      	ldr	r3, [pc, #352]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	4a57      	ldr	r2, [pc, #348]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007a9c:	f043 0310 	orr.w	r3, r3, #16
 8007aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aa2:	4b55      	ldr	r3, [pc, #340]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	61bb      	str	r3, [r7, #24]
 8007aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007aae:	4b52      	ldr	r3, [pc, #328]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab2:	4a51      	ldr	r2, [pc, #324]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aba:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	4a4b      	ldr	r2, [pc, #300]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ad2:	4b49      	ldr	r3, [pc, #292]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007ade:	4b46      	ldr	r3, [pc, #280]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae2:	4a45      	ldr	r2, [pc, #276]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aea:	4b43      	ldr	r3, [pc, #268]	@ (8007bf8 <BSP_SDRAM_MspInit+0x1cc>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007af6:	2302      	movs	r3, #2
 8007af8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007afa:	2301      	movs	r3, #1
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007afe:	2302      	movs	r3, #2
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007b02:	230c      	movs	r3, #12
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007b06:	2308      	movs	r3, #8
 8007b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b0e:	4619      	mov	r1, r3
 8007b10:	483a      	ldr	r0, [pc, #232]	@ (8007bfc <BSP_SDRAM_MspInit+0x1d0>)
 8007b12:	f004 f9ed 	bl	800bef0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007b16:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b20:	4619      	mov	r1, r3
 8007b22:	4837      	ldr	r0, [pc, #220]	@ (8007c00 <BSP_SDRAM_MspInit+0x1d4>)
 8007b24:	f004 f9e4 	bl	800bef0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007b28:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b32:	4619      	mov	r1, r3
 8007b34:	4833      	ldr	r0, [pc, #204]	@ (8007c04 <BSP_SDRAM_MspInit+0x1d8>)
 8007b36:	f004 f9db 	bl	800bef0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007b3a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007b40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b44:	4619      	mov	r1, r3
 8007b46:	4830      	ldr	r0, [pc, #192]	@ (8007c08 <BSP_SDRAM_MspInit+0x1dc>)
 8007b48:	f004 f9d2 	bl	800bef0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007b4c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8007b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b56:	4619      	mov	r1, r3
 8007b58:	482c      	ldr	r0, [pc, #176]	@ (8007c0c <BSP_SDRAM_MspInit+0x1e0>)
 8007b5a:	f004 f9c9 	bl	800bef0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007b5e:	2328      	movs	r3, #40	@ 0x28
 8007b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b66:	4619      	mov	r1, r3
 8007b68:	4829      	ldr	r0, [pc, #164]	@ (8007c10 <BSP_SDRAM_MspInit+0x1e4>)
 8007b6a:	f004 f9c1 	bl	800bef0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007b6e:	4b29      	ldr	r3, [pc, #164]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007b74:	4b27      	ldr	r3, [pc, #156]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007b76:	2280      	movs	r2, #128	@ 0x80
 8007b78:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007b7a:	4b26      	ldr	r3, [pc, #152]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b80:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007b82:	4b24      	ldr	r3, [pc, #144]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007b84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b88:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007b8a:	4b22      	ldr	r3, [pc, #136]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007b8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007b90:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007b92:	4b20      	ldr	r3, [pc, #128]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007b94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007b98:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007ba2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007ba6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007bae:	4b19      	ldr	r3, [pc, #100]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007bb4:	4b17      	ldr	r3, [pc, #92]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007bba:	4b16      	ldr	r3, [pc, #88]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007bc0:	4b14      	ldr	r3, [pc, #80]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bc2:	4a15      	ldr	r2, [pc, #84]	@ (8007c18 <BSP_SDRAM_MspInit+0x1ec>)
 8007bc4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a12      	ldr	r2, [pc, #72]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bcc:	4a11      	ldr	r2, [pc, #68]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007bd2:	4810      	ldr	r0, [pc, #64]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bd4:	f003 fbaa 	bl	800b32c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007bd8:	480e      	ldr	r0, [pc, #56]	@ (8007c14 <BSP_SDRAM_MspInit+0x1e8>)
 8007bda:	f003 faf9 	bl	800b1d0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007bde:	2200      	movs	r2, #0
 8007be0:	210f      	movs	r1, #15
 8007be2:	2038      	movs	r0, #56	@ 0x38
 8007be4:	f003 faca 	bl	800b17c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007be8:	2038      	movs	r0, #56	@ 0x38
 8007bea:	f003 fae3 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
}
 8007bee:	bf00      	nop
 8007bf0:	3740      	adds	r7, #64	@ 0x40
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	40020800 	.word	0x40020800
 8007c00:	40020c00 	.word	0x40020c00
 8007c04:	40021000 	.word	0x40021000
 8007c08:	40021400 	.word	0x40021400
 8007c0c:	40021800 	.word	0x40021800
 8007c10:	40021c00 	.word	0x40021c00
 8007c14:	20000fbc 	.word	0x20000fbc
 8007c18:	40026410 	.word	0x40026410

08007c1c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	460a      	mov	r2, r1
 8007c26:	80fb      	strh	r3, [r7, #6]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007c30:	4a14      	ldr	r2, [pc, #80]	@ (8007c84 <BSP_TS_Init+0x68>)
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007c36:	4a14      	ldr	r2, [pc, #80]	@ (8007c88 <BSP_TS_Init+0x6c>)
 8007c38:	88bb      	ldrh	r3, [r7, #4]
 8007c3a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007c3c:	4b13      	ldr	r3, [pc, #76]	@ (8007c8c <BSP_TS_Init+0x70>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2070      	movs	r0, #112	@ 0x70
 8007c42:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007c44:	4b11      	ldr	r3, [pc, #68]	@ (8007c8c <BSP_TS_Init+0x70>)
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2070      	movs	r0, #112	@ 0x70
 8007c4a:	4798      	blx	r3
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b51      	cmp	r3, #81	@ 0x51
 8007c50:	d110      	bne.n	8007c74 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007c52:	4b0f      	ldr	r3, [pc, #60]	@ (8007c90 <BSP_TS_Init+0x74>)
 8007c54:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <BSP_TS_Init+0x70>)
 8007c56:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007c58:	4b0e      	ldr	r3, [pc, #56]	@ (8007c94 <BSP_TS_Init+0x78>)
 8007c5a:	2270      	movs	r2, #112	@ 0x70
 8007c5c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c98 <BSP_TS_Init+0x7c>)
 8007c60:	2208      	movs	r2, #8
 8007c62:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007c64:	4b0a      	ldr	r3, [pc, #40]	@ (8007c90 <BSP_TS_Init+0x74>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c94 <BSP_TS_Init+0x78>)
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4798      	blx	r3
 8007c72:	e001      	b.n	8007c78 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007c74:	2303      	movs	r3, #3
 8007c76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20001020 	.word	0x20001020
 8007c88:	20001022 	.word	0x20001022
 8007c8c:	20000000 	.word	0x20000000
 8007c90:	2000101c 	.word	0x2000101c
 8007c94:	20001025 	.word	0x20001025
 8007c98:	20001024 	.word	0x20001024

08007c9c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007c9c:	b590      	push	{r4, r7, lr}
 8007c9e:	b097      	sub	sp, #92	@ 0x5c
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007cb6:	4bb8      	ldr	r3, [pc, #736]	@ (8007f98 <BSP_TS_GetState+0x2fc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	4ab7      	ldr	r2, [pc, #732]	@ (8007f9c <BSP_TS_GetState+0x300>)
 8007cbe:	7812      	ldrb	r2, [r2, #0]
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8198 	beq.w	8008006 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cda:	e187      	b.n	8007fec <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8007cdc:	4bae      	ldr	r3, [pc, #696]	@ (8007f98 <BSP_TS_GetState+0x2fc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	4aae      	ldr	r2, [pc, #696]	@ (8007f9c <BSP_TS_GetState+0x300>)
 8007ce4:	7812      	ldrb	r2, [r2, #0]
 8007ce6:	4614      	mov	r4, r2
 8007ce8:	f107 0120 	add.w	r1, r7, #32
 8007cec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cee:	0052      	lsls	r2, r2, #1
 8007cf0:	1888      	adds	r0, r1, r2
 8007cf2:	f107 0114 	add.w	r1, r7, #20
 8007cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cf8:	0052      	lsls	r2, r2, #1
 8007cfa:	440a      	add	r2, r1
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007d02:	4ba7      	ldr	r3, [pc, #668]	@ (8007fa0 <BSP_TS_GetState+0x304>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d117      	bne.n	8007d3a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8007d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	3350      	adds	r3, #80	@ 0x50
 8007d10:	443b      	add	r3, r7
 8007d12:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	3350      	adds	r3, #80	@ 0x50
 8007d1c:	443b      	add	r3, r7
 8007d1e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	3350      	adds	r3, #80	@ 0x50
 8007d28:	443b      	add	r3, r7
 8007d2a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	3350      	adds	r3, #80	@ 0x50
 8007d34:	443b      	add	r3, r7
 8007d36:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007d3a:	4b99      	ldr	r3, [pc, #612]	@ (8007fa0 <BSP_TS_GetState+0x304>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8007d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	3350      	adds	r3, #80	@ 0x50
 8007d4c:	443b      	add	r3, r7
 8007d4e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007d52:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	3350      	adds	r3, #80	@ 0x50
 8007d5e:	443b      	add	r3, r7
 8007d60:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007d64:	4b8e      	ldr	r3, [pc, #568]	@ (8007fa0 <BSP_TS_GetState+0x304>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8007d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	3350      	adds	r3, #80	@ 0x50
 8007d76:	443b      	add	r3, r7
 8007d78:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007d7c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	3350      	adds	r3, #80	@ 0x50
 8007d88:	443b      	add	r3, r7
 8007d8a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8007d8e:	4b84      	ldr	r3, [pc, #528]	@ (8007fa0 <BSP_TS_GetState+0x304>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d017      	beq.n	8007dca <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8007d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	3350      	adds	r3, #80	@ 0x50
 8007da0:	443b      	add	r3, r7
 8007da2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	3350      	adds	r3, #80	@ 0x50
 8007dac:	443b      	add	r3, r7
 8007dae:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8007db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	3350      	adds	r3, #80	@ 0x50
 8007db8:	443b      	add	r3, r7
 8007dba:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	3350      	adds	r3, #80	@ 0x50
 8007dc4:	443b      	add	r3, r7
 8007dc6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	3350      	adds	r3, #80	@ 0x50
 8007dd0:	443b      	add	r3, r7
 8007dd2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4a72      	ldr	r2, [pc, #456]	@ (8007fa4 <BSP_TS_GetState+0x308>)
 8007dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d90d      	bls.n	8007e00 <BSP_TS_GetState+0x164>
 8007de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	3350      	adds	r3, #80	@ 0x50
 8007dea:	443b      	add	r3, r7
 8007dec:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8007df0:	496c      	ldr	r1, [pc, #432]	@ (8007fa4 <BSP_TS_GetState+0x308>)
 8007df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	e00c      	b.n	8007e1a <BSP_TS_GetState+0x17e>
 8007e00:	4a68      	ldr	r2, [pc, #416]	@ (8007fa4 <BSP_TS_GetState+0x308>)
 8007e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	3350      	adds	r3, #80	@ 0x50
 8007e10:	443b      	add	r3, r7
 8007e12:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	3350      	adds	r3, #80	@ 0x50
 8007e24:	443b      	add	r3, r7
 8007e26:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8007fa8 <BSP_TS_GetState+0x30c>)
 8007e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d90d      	bls.n	8007e54 <BSP_TS_GetState+0x1b8>
 8007e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	3350      	adds	r3, #80	@ 0x50
 8007e3e:	443b      	add	r3, r7
 8007e40:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007e44:	4958      	ldr	r1, [pc, #352]	@ (8007fa8 <BSP_TS_GetState+0x30c>)
 8007e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	e00c      	b.n	8007e6e <BSP_TS_GetState+0x1d2>
 8007e54:	4a54      	ldr	r2, [pc, #336]	@ (8007fa8 <BSP_TS_GetState+0x30c>)
 8007e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	3350      	adds	r3, #80	@ 0x50
 8007e64:	443b      	add	r3, r7
 8007e66:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8007e72:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007e76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007e7a:	4413      	add	r3, r2
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	dd15      	ble.n	8007eac <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8007e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	3350      	adds	r3, #80	@ 0x50
 8007e86:	443b      	add	r3, r7
 8007e88:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4a45      	ldr	r2, [pc, #276]	@ (8007fa4 <BSP_TS_GetState+0x308>)
 8007e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8007e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	3350      	adds	r3, #80	@ 0x50
 8007e9c:	443b      	add	r3, r7
 8007e9e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4a40      	ldr	r2, [pc, #256]	@ (8007fa8 <BSP_TS_GetState+0x30c>)
 8007ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ea8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007eac:	4b3b      	ldr	r3, [pc, #236]	@ (8007f9c <BSP_TS_GetState+0x300>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b70      	cmp	r3, #112	@ 0x70
 8007eb2:	d119      	bne.n	8007ee8 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8007eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	3350      	adds	r3, #80	@ 0x50
 8007eba:	443b      	add	r3, r7
 8007ebc:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	4413      	add	r3, r2
 8007ec8:	460a      	mov	r2, r1
 8007eca:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8007ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	3350      	adds	r3, #80	@ 0x50
 8007ed2:	443b      	add	r3, r7
 8007ed4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007edc:	3304      	adds	r3, #4
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	460a      	mov	r2, r1
 8007ee4:	809a      	strh	r2, [r3, #4]
 8007ee6:	e022      	b.n	8007f2e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007ee8:	4b30      	ldr	r3, [pc, #192]	@ (8007fac <BSP_TS_GetState+0x310>)
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	4619      	mov	r1, r3
 8007eee:	4a2d      	ldr	r2, [pc, #180]	@ (8007fa4 <BSP_TS_GetState+0x308>)
 8007ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	0b1b      	lsrs	r3, r3, #12
 8007efc:	b299      	uxth	r1, r3
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	4413      	add	r3, r2
 8007f06:	460a      	mov	r2, r1
 8007f08:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007f0a:	4b29      	ldr	r3, [pc, #164]	@ (8007fb0 <BSP_TS_GetState+0x314>)
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4a25      	ldr	r2, [pc, #148]	@ (8007fa8 <BSP_TS_GetState+0x30c>)
 8007f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	0b1b      	lsrs	r3, r3, #12
 8007f1e:	b299      	uxth	r1, r3
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f24:	3304      	adds	r3, #4
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	4413      	add	r3, r2
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007f9c <BSP_TS_GetState+0x300>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f107 010c 	add.w	r1, r7, #12
 8007f38:	f107 0210 	add.w	r2, r7, #16
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	460b      	mov	r3, r1
 8007f44:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007f46:	f7fb fc9d 	bl	8003884 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	b2d9      	uxtb	r1, r3
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f52:	4413      	add	r3, r2
 8007f54:	3316      	adds	r3, #22
 8007f56:	460a      	mov	r2, r1
 8007f58:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	b2d9      	uxtb	r1, r3
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f62:	4413      	add	r3, r2
 8007f64:	3320      	adds	r3, #32
 8007f66:	460a      	mov	r2, r1
 8007f68:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d836      	bhi.n	8007fde <BSP_TS_GetState+0x342>
 8007f70:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <BSP_TS_GetState+0x2dc>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f89 	.word	0x08007f89
 8007f7c:	08007fb5 	.word	0x08007fb5
 8007f80:	08007fc3 	.word	0x08007fc3
 8007f84:	08007fd1 	.word	0x08007fd1
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f8c:	4413      	add	r3, r2
 8007f8e:	331b      	adds	r3, #27
 8007f90:	2201      	movs	r2, #1
 8007f92:	701a      	strb	r2, [r3, #0]
          break;
 8007f94:	e027      	b.n	8007fe6 <BSP_TS_GetState+0x34a>
 8007f96:	bf00      	nop
 8007f98:	2000101c 	.word	0x2000101c
 8007f9c:	20001025 	.word	0x20001025
 8007fa0:	20001024 	.word	0x20001024
 8007fa4:	20001028 	.word	0x20001028
 8007fa8:	2000103c 	.word	0x2000103c
 8007fac:	20001020 	.word	0x20001020
 8007fb0:	20001022 	.word	0x20001022
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fb8:	4413      	add	r3, r2
 8007fba:	331b      	adds	r3, #27
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	701a      	strb	r2, [r3, #0]
          break;
 8007fc0:	e011      	b.n	8007fe6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fc6:	4413      	add	r3, r2
 8007fc8:	331b      	adds	r3, #27
 8007fca:	2203      	movs	r2, #3
 8007fcc:	701a      	strb	r2, [r3, #0]
          break;
 8007fce:	e00a      	b.n	8007fe6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fd4:	4413      	add	r3, r2
 8007fd6:	331b      	adds	r3, #27
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]
          break;
 8007fdc:	e003      	b.n	8007fe6 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8007fe4:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8007fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fe8:	3301      	adds	r3, #1
 8007fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	f4ff ae71 	bcc.w	8007cdc <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f80a 	bl	8008014 <BSP_TS_Get_GestureId>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8008006:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800800a:	4618      	mov	r0, r3
 800800c:	3754      	adds	r7, #84	@ 0x54
 800800e:	46bd      	mov	sp, r7
 8008010:	bd90      	pop	{r4, r7, pc}
 8008012:	bf00      	nop

08008014 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8008024:	4b3b      	ldr	r3, [pc, #236]	@ (8008114 <BSP_TS_Get_GestureId+0x100>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f7fb fc0e 	bl	8003852 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b49      	cmp	r3, #73	@ 0x49
 800803a:	d05e      	beq.n	80080fa <BSP_TS_Get_GestureId+0xe6>
 800803c:	2b49      	cmp	r3, #73	@ 0x49
 800803e:	d860      	bhi.n	8008102 <BSP_TS_Get_GestureId+0xee>
 8008040:	2b1c      	cmp	r3, #28
 8008042:	d83f      	bhi.n	80080c4 <BSP_TS_Get_GestureId+0xb0>
 8008044:	2b1c      	cmp	r3, #28
 8008046:	d85c      	bhi.n	8008102 <BSP_TS_Get_GestureId+0xee>
 8008048:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <BSP_TS_Get_GestureId+0x3c>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	080080cb 	.word	0x080080cb
 8008054:	08008103 	.word	0x08008103
 8008058:	08008103 	.word	0x08008103
 800805c:	08008103 	.word	0x08008103
 8008060:	08008103 	.word	0x08008103
 8008064:	08008103 	.word	0x08008103
 8008068:	08008103 	.word	0x08008103
 800806c:	08008103 	.word	0x08008103
 8008070:	08008103 	.word	0x08008103
 8008074:	08008103 	.word	0x08008103
 8008078:	08008103 	.word	0x08008103
 800807c:	08008103 	.word	0x08008103
 8008080:	08008103 	.word	0x08008103
 8008084:	08008103 	.word	0x08008103
 8008088:	08008103 	.word	0x08008103
 800808c:	08008103 	.word	0x08008103
 8008090:	080080d3 	.word	0x080080d3
 8008094:	08008103 	.word	0x08008103
 8008098:	08008103 	.word	0x08008103
 800809c:	08008103 	.word	0x08008103
 80080a0:	080080db 	.word	0x080080db
 80080a4:	08008103 	.word	0x08008103
 80080a8:	08008103 	.word	0x08008103
 80080ac:	08008103 	.word	0x08008103
 80080b0:	080080e3 	.word	0x080080e3
 80080b4:	08008103 	.word	0x08008103
 80080b8:	08008103 	.word	0x08008103
 80080bc:	08008103 	.word	0x08008103
 80080c0:	080080eb 	.word	0x080080eb
 80080c4:	2b40      	cmp	r3, #64	@ 0x40
 80080c6:	d014      	beq.n	80080f2 <BSP_TS_Get_GestureId+0xde>
 80080c8:	e01b      	b.n	8008102 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080d0:	e01a      	b.n	8008108 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080d8:	e016      	b.n	8008108 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080e0:	e012      	b.n	8008108 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2203      	movs	r2, #3
 80080e6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080e8:	e00e      	b.n	8008108 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2204      	movs	r2, #4
 80080ee:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080f0:	e00a      	b.n	8008108 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2205      	movs	r2, #5
 80080f6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80080f8:	e006      	b.n	8008108 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2206      	movs	r2, #6
 80080fe:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008100:	e002      	b.n	8008108 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	73fb      	strb	r3, [r7, #15]
      break;
 8008106:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20001025 	.word	0x20001025

08008118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800811e:	4b11      	ldr	r3, [pc, #68]	@ (8008164 <HAL_MspInit+0x4c>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	4a10      	ldr	r2, [pc, #64]	@ (8008164 <HAL_MspInit+0x4c>)
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008128:	6413      	str	r3, [r2, #64]	@ 0x40
 800812a:	4b0e      	ldr	r3, [pc, #56]	@ (8008164 <HAL_MspInit+0x4c>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008136:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <HAL_MspInit+0x4c>)
 8008138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800813a:	4a0a      	ldr	r2, [pc, #40]	@ (8008164 <HAL_MspInit+0x4c>)
 800813c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008140:	6453      	str	r3, [r2, #68]	@ 0x44
 8008142:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <HAL_MspInit+0x4c>)
 8008144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800814e:	2200      	movs	r2, #0
 8008150:	210f      	movs	r1, #15
 8008152:	f06f 0001 	mvn.w	r0, #1
 8008156:	f003 f811 	bl	800b17c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800

08008168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08c      	sub	sp, #48	@ 0x30
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008170:	f107 031c 	add.w	r3, r7, #28
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	609a      	str	r2, [r3, #8]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a36      	ldr	r2, [pc, #216]	@ (8008260 <HAL_ADC_MspInit+0xf8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d124      	bne.n	80081d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800818a:	4b36      	ldr	r3, [pc, #216]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 800818c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818e:	4a35      	ldr	r2, [pc, #212]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 8008190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008194:	6453      	str	r3, [r2, #68]	@ 0x44
 8008196:	4b33      	ldr	r3, [pc, #204]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 8008198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800819a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a2:	4b30      	ldr	r3, [pc, #192]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081a8:	f043 0301 	orr.w	r3, r3, #1
 80081ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80081ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80081ba:	2301      	movs	r3, #1
 80081bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081be:	2303      	movs	r3, #3
 80081c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c6:	f107 031c 	add.w	r3, r7, #28
 80081ca:	4619      	mov	r1, r3
 80081cc:	4826      	ldr	r0, [pc, #152]	@ (8008268 <HAL_ADC_MspInit+0x100>)
 80081ce:	f003 fe8f 	bl	800bef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80081d2:	e041      	b.n	8008258 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a24      	ldr	r2, [pc, #144]	@ (800826c <HAL_ADC_MspInit+0x104>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d13c      	bne.n	8008258 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80081de:	4b21      	ldr	r3, [pc, #132]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e2:	4a20      	ldr	r2, [pc, #128]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80081e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80081ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80081f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 80081fc:	f043 0320 	orr.w	r3, r3, #32
 8008200:	6313      	str	r3, [r2, #48]	@ 0x30
 8008202:	4b18      	ldr	r3, [pc, #96]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 8008204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800820e:	4b15      	ldr	r3, [pc, #84]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	4a14      	ldr	r2, [pc, #80]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	6313      	str	r3, [r2, #48]	@ 0x30
 800821a:	4b12      	ldr	r3, [pc, #72]	@ (8008264 <HAL_ADC_MspInit+0xfc>)
 800821c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8008226:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800822a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800822c:	2303      	movs	r3, #3
 800822e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008230:	2300      	movs	r3, #0
 8008232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008234:	f107 031c 	add.w	r3, r7, #28
 8008238:	4619      	mov	r1, r3
 800823a:	480d      	ldr	r0, [pc, #52]	@ (8008270 <HAL_ADC_MspInit+0x108>)
 800823c:	f003 fe58 	bl	800bef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008240:	2301      	movs	r3, #1
 8008242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008244:	2303      	movs	r3, #3
 8008246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008248:	2300      	movs	r3, #0
 800824a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800824c:	f107 031c 	add.w	r3, r7, #28
 8008250:	4619      	mov	r1, r3
 8008252:	4805      	ldr	r0, [pc, #20]	@ (8008268 <HAL_ADC_MspInit+0x100>)
 8008254:	f003 fe4c 	bl	800bef0 <HAL_GPIO_Init>
}
 8008258:	bf00      	nop
 800825a:	3730      	adds	r7, #48	@ 0x30
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40012000 	.word	0x40012000
 8008264:	40023800 	.word	0x40023800
 8008268:	40020000 	.word	0x40020000
 800826c:	40012200 	.word	0x40012200
 8008270:	40021400 	.word	0x40021400

08008274 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0a      	ldr	r2, [pc, #40]	@ (80082ac <HAL_DMA2D_MspInit+0x38>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d10b      	bne.n	800829e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008286:	4b0a      	ldr	r3, [pc, #40]	@ (80082b0 <HAL_DMA2D_MspInit+0x3c>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828a:	4a09      	ldr	r2, [pc, #36]	@ (80082b0 <HAL_DMA2D_MspInit+0x3c>)
 800828c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008290:	6313      	str	r3, [r2, #48]	@ 0x30
 8008292:	4b07      	ldr	r3, [pc, #28]	@ (80082b0 <HAL_DMA2D_MspInit+0x3c>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008296:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	4002b000 	.word	0x4002b000
 80082b0:	40023800 	.word	0x40023800

080082b4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08e      	sub	sp, #56	@ 0x38
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	605a      	str	r2, [r3, #4]
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a55      	ldr	r2, [pc, #340]	@ (8008428 <HAL_LTDC_MspInit+0x174>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	f040 80a3 	bne.w	800841e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80082d8:	4b54      	ldr	r3, [pc, #336]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 80082da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082dc:	4a53      	ldr	r2, [pc, #332]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 80082de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80082e4:	4b51      	ldr	r3, [pc, #324]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 80082e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80082ec:	623b      	str	r3, [r7, #32]
 80082ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80082f0:	4b4e      	ldr	r3, [pc, #312]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 80082f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f4:	4a4d      	ldr	r2, [pc, #308]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 80082f6:	f043 0310 	orr.w	r3, r3, #16
 80082fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80082fc:	4b4b      	ldr	r3, [pc, #300]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 80082fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008300:	f003 0310 	and.w	r3, r3, #16
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008308:	4b48      	ldr	r3, [pc, #288]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 800830a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830c:	4a47      	ldr	r2, [pc, #284]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 800830e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008312:	6313      	str	r3, [r2, #48]	@ 0x30
 8008314:	4b45      	ldr	r3, [pc, #276]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 8008316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8008320:	4b42      	ldr	r3, [pc, #264]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 8008322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008324:	4a41      	ldr	r2, [pc, #260]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 8008326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800832a:	6313      	str	r3, [r2, #48]	@ 0x30
 800832c:	4b3f      	ldr	r3, [pc, #252]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 800832e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008338:	4b3c      	ldr	r3, [pc, #240]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 800833a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833c:	4a3b      	ldr	r2, [pc, #236]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 800833e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008342:	6313      	str	r3, [r2, #48]	@ 0x30
 8008344:	4b39      	ldr	r3, [pc, #228]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 8008346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8008350:	4b36      	ldr	r3, [pc, #216]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 8008352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008354:	4a35      	ldr	r2, [pc, #212]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 8008356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800835a:	6313      	str	r3, [r2, #48]	@ 0x30
 800835c:	4b33      	ldr	r3, [pc, #204]	@ (800842c <HAL_LTDC_MspInit+0x178>)
 800835e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8008368:	2310      	movs	r3, #16
 800836a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836c:	2302      	movs	r3, #2
 800836e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008370:	2300      	movs	r3, #0
 8008372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008374:	2300      	movs	r3, #0
 8008376:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008378:	230e      	movs	r3, #14
 800837a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800837c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008380:	4619      	mov	r1, r3
 8008382:	482b      	ldr	r0, [pc, #172]	@ (8008430 <HAL_LTDC_MspInit+0x17c>)
 8008384:	f003 fdb4 	bl	800bef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8008388:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800838c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838e:	2302      	movs	r3, #2
 8008390:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008392:	2300      	movs	r3, #0
 8008394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008396:	2300      	movs	r3, #0
 8008398:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800839a:	230e      	movs	r3, #14
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800839e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083a2:	4619      	mov	r1, r3
 80083a4:	4823      	ldr	r0, [pc, #140]	@ (8008434 <HAL_LTDC_MspInit+0x180>)
 80083a6:	f003 fda3 	bl	800bef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80083aa:	23f7      	movs	r3, #247	@ 0xf7
 80083ac:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ae:	2302      	movs	r3, #2
 80083b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083b6:	2300      	movs	r3, #0
 80083b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80083ba:	230e      	movs	r3, #14
 80083bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80083be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083c2:	4619      	mov	r1, r3
 80083c4:	481c      	ldr	r0, [pc, #112]	@ (8008438 <HAL_LTDC_MspInit+0x184>)
 80083c6:	f003 fd93 	bl	800bef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80083ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d0:	2302      	movs	r3, #2
 80083d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d4:	2300      	movs	r3, #0
 80083d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083d8:	2300      	movs	r3, #0
 80083da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80083dc:	2309      	movs	r3, #9
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80083e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083e4:	4619      	mov	r1, r3
 80083e6:	4815      	ldr	r0, [pc, #84]	@ (800843c <HAL_LTDC_MspInit+0x188>)
 80083e8:	f003 fd82 	bl	800bef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80083ec:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80083f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083f2:	2302      	movs	r3, #2
 80083f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083fa:	2300      	movs	r3, #0
 80083fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80083fe:	230e      	movs	r3, #14
 8008400:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008406:	4619      	mov	r1, r3
 8008408:	480d      	ldr	r0, [pc, #52]	@ (8008440 <HAL_LTDC_MspInit+0x18c>)
 800840a:	f003 fd71 	bl	800bef0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800840e:	2200      	movs	r2, #0
 8008410:	2105      	movs	r1, #5
 8008412:	2058      	movs	r0, #88	@ 0x58
 8008414:	f002 feb2 	bl	800b17c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8008418:	2058      	movs	r0, #88	@ 0x58
 800841a:	f002 fecb 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800841e:	bf00      	nop
 8008420:	3738      	adds	r7, #56	@ 0x38
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40016800 	.word	0x40016800
 800842c:	40023800 	.word	0x40023800
 8008430:	40021000 	.word	0x40021000
 8008434:	40022400 	.word	0x40022400
 8008438:	40022800 	.word	0x40022800
 800843c:	40021800 	.word	0x40021800
 8008440:	40022000 	.word	0x40022000

08008444 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	@ 0x28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800844c:	f107 0314 	add.w	r3, r7, #20
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	605a      	str	r2, [r3, #4]
 8008456:	609a      	str	r2, [r3, #8]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a65      	ldr	r2, [pc, #404]	@ (80085f8 <HAL_SD_MspInit+0x1b4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	f040 80c3 	bne.w	80085ee <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008468:	4b64      	ldr	r3, [pc, #400]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 800846a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846c:	4a63      	ldr	r2, [pc, #396]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 800846e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008472:	6453      	str	r3, [r2, #68]	@ 0x44
 8008474:	4b61      	ldr	r3, [pc, #388]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 8008476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008480:	4b5e      	ldr	r3, [pc, #376]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 8008482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008484:	4a5d      	ldr	r2, [pc, #372]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 8008486:	f043 0304 	orr.w	r3, r3, #4
 800848a:	6313      	str	r3, [r2, #48]	@ 0x30
 800848c:	4b5b      	ldr	r3, [pc, #364]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 800848e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008498:	4b58      	ldr	r3, [pc, #352]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 800849a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849c:	4a57      	ldr	r2, [pc, #348]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 800849e:	f043 0308 	orr.w	r3, r3, #8
 80084a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80084a4:	4b55      	ldr	r3, [pc, #340]	@ (80085fc <HAL_SD_MspInit+0x1b8>)
 80084a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	60bb      	str	r3, [r7, #8]
 80084ae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80084b0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80084b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b6:	2302      	movs	r3, #2
 80084b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084be:	2303      	movs	r3, #3
 80084c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80084c2:	230c      	movs	r3, #12
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084c6:	f107 0314 	add.w	r3, r7, #20
 80084ca:	4619      	mov	r1, r3
 80084cc:	484c      	ldr	r0, [pc, #304]	@ (8008600 <HAL_SD_MspInit+0x1bc>)
 80084ce:	f003 fd0f 	bl	800bef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80084d2:	2304      	movs	r3, #4
 80084d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d6:	2302      	movs	r3, #2
 80084d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084de:	2303      	movs	r3, #3
 80084e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80084e2:	230c      	movs	r3, #12
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80084e6:	f107 0314 	add.w	r3, r7, #20
 80084ea:	4619      	mov	r1, r3
 80084ec:	4845      	ldr	r0, [pc, #276]	@ (8008604 <HAL_SD_MspInit+0x1c0>)
 80084ee:	f003 fcff 	bl	800bef0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80084f2:	4b45      	ldr	r3, [pc, #276]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 80084f4:	4a45      	ldr	r2, [pc, #276]	@ (800860c <HAL_SD_MspInit+0x1c8>)
 80084f6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80084f8:	4b43      	ldr	r3, [pc, #268]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 80084fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80084fe:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008500:	4b41      	ldr	r3, [pc, #260]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008506:	4b40      	ldr	r3, [pc, #256]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008508:	2200      	movs	r2, #0
 800850a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800850c:	4b3e      	ldr	r3, [pc, #248]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 800850e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008512:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008514:	4b3c      	ldr	r3, [pc, #240]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008516:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800851a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800851c:	4b3a      	ldr	r3, [pc, #232]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 800851e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008522:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8008524:	4b38      	ldr	r3, [pc, #224]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008526:	2220      	movs	r2, #32
 8008528:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800852a:	4b37      	ldr	r3, [pc, #220]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 800852c:	2200      	movs	r2, #0
 800852e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008530:	4b35      	ldr	r3, [pc, #212]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008532:	2204      	movs	r2, #4
 8008534:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008536:	4b34      	ldr	r3, [pc, #208]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008538:	2203      	movs	r2, #3
 800853a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800853c:	4b32      	ldr	r3, [pc, #200]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 800853e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008542:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008544:	4b30      	ldr	r3, [pc, #192]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008546:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800854a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800854c:	482e      	ldr	r0, [pc, #184]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 800854e:	f002 fe3f 	bl	800b1d0 <HAL_DMA_Init>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8008558:	f7fd fcd0 	bl	8005efc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a2a      	ldr	r2, [pc, #168]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008560:	641a      	str	r2, [r3, #64]	@ 0x40
 8008562:	4a29      	ldr	r2, [pc, #164]	@ (8008608 <HAL_SD_MspInit+0x1c4>)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8008568:	4b29      	ldr	r3, [pc, #164]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 800856a:	4a2a      	ldr	r2, [pc, #168]	@ (8008614 <HAL_SD_MspInit+0x1d0>)
 800856c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800856e:	4b28      	ldr	r3, [pc, #160]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 8008570:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008574:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008576:	4b26      	ldr	r3, [pc, #152]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 8008578:	2240      	movs	r2, #64	@ 0x40
 800857a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800857c:	4b24      	ldr	r3, [pc, #144]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 800857e:	2200      	movs	r2, #0
 8008580:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008582:	4b23      	ldr	r3, [pc, #140]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 8008584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008588:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800858a:	4b21      	ldr	r3, [pc, #132]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 800858c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008590:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008592:	4b1f      	ldr	r3, [pc, #124]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 8008594:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008598:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800859a:	4b1d      	ldr	r3, [pc, #116]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 800859c:	2220      	movs	r2, #32
 800859e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80085a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80085a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085a8:	2204      	movs	r2, #4
 80085aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80085ac:	4b18      	ldr	r3, [pc, #96]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085ae:	2203      	movs	r2, #3
 80085b0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80085b2:	4b17      	ldr	r3, [pc, #92]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80085b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80085ba:	4b15      	ldr	r3, [pc, #84]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085bc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80085c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80085c2:	4813      	ldr	r0, [pc, #76]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085c4:	f002 fe04 	bl	800b1d0 <HAL_DMA_Init>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80085ce:	f7fd fc95 	bl	8005efc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80085d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008610 <HAL_SD_MspInit+0x1cc>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80085de:	2200      	movs	r2, #0
 80085e0:	2105      	movs	r1, #5
 80085e2:	2031      	movs	r0, #49	@ 0x31
 80085e4:	f002 fdca 	bl	800b17c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80085e8:	2031      	movs	r0, #49	@ 0x31
 80085ea:	f002 fde3 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80085ee:	bf00      	nop
 80085f0:	3728      	adds	r7, #40	@ 0x28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40023800 	.word	0x40023800
 8008600:	40020800 	.word	0x40020800
 8008604:	40020c00 	.word	0x40020c00
 8008608:	200007a8 	.word	0x200007a8
 800860c:	40026458 	.word	0x40026458
 8008610:	20000808 	.word	0x20000808
 8008614:	400264a0 	.word	0x400264a0

08008618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b0ac      	sub	sp, #176	@ 0xb0
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008620:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	605a      	str	r2, [r3, #4]
 800862a:	609a      	str	r2, [r3, #8]
 800862c:	60da      	str	r2, [r3, #12]
 800862e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	2284      	movs	r2, #132	@ 0x84
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f00d fd9c 	bl	8016176 <memset>
  if(huart->Instance==USART1)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a32      	ldr	r2, [pc, #200]	@ (800870c <HAL_UART_MspInit+0xf4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d15c      	bne.n	8008702 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008648:	2340      	movs	r3, #64	@ 0x40
 800864a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800864c:	2300      	movs	r3, #0
 800864e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	4618      	mov	r0, r3
 8008656:	f005 fd73 	bl	800e140 <HAL_RCCEx_PeriphCLKConfig>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008660:	f7fd fc4c 	bl	8005efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008664:	4b2a      	ldr	r3, [pc, #168]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 8008666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008668:	4a29      	ldr	r2, [pc, #164]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 800866a:	f043 0310 	orr.w	r3, r3, #16
 800866e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008670:	4b27      	ldr	r3, [pc, #156]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 8008672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800867c:	4b24      	ldr	r3, [pc, #144]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 800867e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008680:	4a23      	ldr	r2, [pc, #140]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 8008682:	f043 0302 	orr.w	r3, r3, #2
 8008686:	6313      	str	r3, [r2, #48]	@ 0x30
 8008688:	4b21      	ldr	r3, [pc, #132]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008694:	4b1e      	ldr	r3, [pc, #120]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 8008696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008698:	4a1d      	ldr	r2, [pc, #116]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 800869a:	f043 0301 	orr.w	r3, r3, #1
 800869e:	6313      	str	r3, [r2, #48]	@ 0x30
 80086a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008710 <HAL_UART_MspInit+0xf8>)
 80086a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80086ac:	2380      	movs	r3, #128	@ 0x80
 80086ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b2:	2302      	movs	r3, #2
 80086b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80086c4:	2307      	movs	r3, #7
 80086c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80086ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80086ce:	4619      	mov	r1, r3
 80086d0:	4810      	ldr	r0, [pc, #64]	@ (8008714 <HAL_UART_MspInit+0xfc>)
 80086d2:	f003 fc0d 	bl	800bef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80086d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086de:	2302      	movs	r3, #2
 80086e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80086f0:	2307      	movs	r3, #7
 80086f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80086f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80086fa:	4619      	mov	r1, r3
 80086fc:	4806      	ldr	r0, [pc, #24]	@ (8008718 <HAL_UART_MspInit+0x100>)
 80086fe:	f003 fbf7 	bl	800bef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008702:	bf00      	nop
 8008704:	37b0      	adds	r7, #176	@ 0xb0
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	40011000 	.word	0x40011000
 8008710:	40023800 	.word	0x40023800
 8008714:	40020400 	.word	0x40020400
 8008718:	40020000 	.word	0x40020000

0800871c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008722:	1d3b      	adds	r3, r7, #4
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8008730:	4b42      	ldr	r3, [pc, #264]	@ (800883c <HAL_FMC_MspInit+0x120>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d17c      	bne.n	8008832 <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 8008738:	4b40      	ldr	r3, [pc, #256]	@ (800883c <HAL_FMC_MspInit+0x120>)
 800873a:	2201      	movs	r2, #1
 800873c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800873e:	4b40      	ldr	r3, [pc, #256]	@ (8008840 <HAL_FMC_MspInit+0x124>)
 8008740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008742:	4a3f      	ldr	r2, [pc, #252]	@ (8008840 <HAL_FMC_MspInit+0x124>)
 8008744:	f043 0301 	orr.w	r3, r3, #1
 8008748:	6393      	str	r3, [r2, #56]	@ 0x38
 800874a:	4b3d      	ldr	r3, [pc, #244]	@ (8008840 <HAL_FMC_MspInit+0x124>)
 800874c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8008756:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800875a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800875c:	2302      	movs	r3, #2
 800875e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008764:	2303      	movs	r3, #3
 8008766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008768:	230c      	movs	r3, #12
 800876a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	4619      	mov	r1, r3
 8008770:	4834      	ldr	r0, [pc, #208]	@ (8008844 <HAL_FMC_MspInit+0x128>)
 8008772:	f003 fbbd 	bl	800bef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008776:	2360      	movs	r3, #96	@ 0x60
 8008778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800877a:	2302      	movs	r3, #2
 800877c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008782:	2303      	movs	r3, #3
 8008784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008786:	230c      	movs	r3, #12
 8008788:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800878a:	1d3b      	adds	r3, r7, #4
 800878c:	4619      	mov	r1, r3
 800878e:	482e      	ldr	r0, [pc, #184]	@ (8008848 <HAL_FMC_MspInit+0x12c>)
 8008790:	f003 fbae 	bl	800bef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8008794:	f248 1333 	movw	r3, #33075	@ 0x8133
 8008798:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800879a:	2302      	movs	r3, #2
 800879c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087a2:	2303      	movs	r3, #3
 80087a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80087a6:	230c      	movs	r3, #12
 80087a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80087aa:	1d3b      	adds	r3, r7, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4827      	ldr	r0, [pc, #156]	@ (800884c <HAL_FMC_MspInit+0x130>)
 80087b0:	f003 fb9e 	bl	800bef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80087b4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80087b8:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ba:	2302      	movs	r3, #2
 80087bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c2:	2303      	movs	r3, #3
 80087c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80087c6:	230c      	movs	r3, #12
 80087c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	4619      	mov	r1, r3
 80087ce:	4820      	ldr	r0, [pc, #128]	@ (8008850 <HAL_FMC_MspInit+0x134>)
 80087d0:	f003 fb8e 	bl	800bef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80087d4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80087d8:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087da:	2302      	movs	r3, #2
 80087dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087e2:	2303      	movs	r3, #3
 80087e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80087e6:	230c      	movs	r3, #12
 80087e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087ea:	1d3b      	adds	r3, r7, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4819      	ldr	r0, [pc, #100]	@ (8008854 <HAL_FMC_MspInit+0x138>)
 80087f0:	f003 fb7e 	bl	800bef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80087f4:	2328      	movs	r3, #40	@ 0x28
 80087f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f8:	2302      	movs	r3, #2
 80087fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008800:	2303      	movs	r3, #3
 8008802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008804:	230c      	movs	r3, #12
 8008806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008808:	1d3b      	adds	r3, r7, #4
 800880a:	4619      	mov	r1, r3
 800880c:	4812      	ldr	r0, [pc, #72]	@ (8008858 <HAL_FMC_MspInit+0x13c>)
 800880e:	f003 fb6f 	bl	800bef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8008812:	2308      	movs	r3, #8
 8008814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008816:	2302      	movs	r3, #2
 8008818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800881e:	2303      	movs	r3, #3
 8008820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008822:	230c      	movs	r3, #12
 8008824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8008826:	1d3b      	adds	r3, r7, #4
 8008828:	4619      	mov	r1, r3
 800882a:	480c      	ldr	r0, [pc, #48]	@ (800885c <HAL_FMC_MspInit+0x140>)
 800882c:	f003 fb60 	bl	800bef0 <HAL_GPIO_Init>
 8008830:	e000      	b.n	8008834 <HAL_FMC_MspInit+0x118>
    return;
 8008832:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20001050 	.word	0x20001050
 8008840:	40023800 	.word	0x40023800
 8008844:	40021000 	.word	0x40021000
 8008848:	40020400 	.word	0x40020400
 800884c:	40021800 	.word	0x40021800
 8008850:	40020c00 	.word	0x40020c00
 8008854:	40021400 	.word	0x40021400
 8008858:	40021c00 	.word	0x40021c00
 800885c:	40020800 	.word	0x40020800

08008860 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008868:	f7ff ff58 	bl	800871c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08a      	sub	sp, #40	@ 0x28
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a61      	ldr	r2, [pc, #388]	@ (8008a08 <HAL_SAI_MspInit+0x194>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d15b      	bne.n	800893e <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8008886:	4b61      	ldr	r3, [pc, #388]	@ (8008a0c <HAL_SAI_MspInit+0x198>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800888e:	4b60      	ldr	r3, [pc, #384]	@ (8008a10 <HAL_SAI_MspInit+0x19c>)
 8008890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008892:	4a5f      	ldr	r2, [pc, #380]	@ (8008a10 <HAL_SAI_MspInit+0x19c>)
 8008894:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008898:	6453      	str	r3, [r2, #68]	@ 0x44
 800889a:	4b5d      	ldr	r3, [pc, #372]	@ (8008a10 <HAL_SAI_MspInit+0x19c>)
 800889c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80088a6:	4b59      	ldr	r3, [pc, #356]	@ (8008a0c <HAL_SAI_MspInit+0x198>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3301      	adds	r3, #1
 80088ac:	4a57      	ldr	r2, [pc, #348]	@ (8008a0c <HAL_SAI_MspInit+0x198>)
 80088ae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80088b0:	23f0      	movs	r3, #240	@ 0xf0
 80088b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b4:	2302      	movs	r3, #2
 80088b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088bc:	2300      	movs	r3, #0
 80088be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80088c0:	230a      	movs	r3, #10
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80088c4:	f107 0314 	add.w	r3, r7, #20
 80088c8:	4619      	mov	r1, r3
 80088ca:	4852      	ldr	r0, [pc, #328]	@ (8008a14 <HAL_SAI_MspInit+0x1a0>)
 80088cc:	f003 fb10 	bl	800bef0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80088d0:	4b51      	ldr	r3, [pc, #324]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 80088d2:	4a52      	ldr	r2, [pc, #328]	@ (8008a1c <HAL_SAI_MspInit+0x1a8>)
 80088d4:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80088d6:	4b50      	ldr	r3, [pc, #320]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 80088d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80088dc:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80088de:	4b4e      	ldr	r3, [pc, #312]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 80088e0:	2240      	movs	r2, #64	@ 0x40
 80088e2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80088e4:	4b4c      	ldr	r3, [pc, #304]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80088ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 80088ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80088f0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80088f2:	4b49      	ldr	r3, [pc, #292]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 80088f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088f8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80088fa:	4b47      	ldr	r3, [pc, #284]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 80088fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008900:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8008902:	4b45      	ldr	r3, [pc, #276]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 8008904:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008908:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 800890a:	4b43      	ldr	r3, [pc, #268]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 800890c:	2200      	movs	r2, #0
 800890e:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008910:	4b41      	ldr	r3, [pc, #260]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 8008912:	2200      	movs	r2, #0
 8008914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8008916:	4840      	ldr	r0, [pc, #256]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 8008918:	f002 fc5a 	bl	800b1d0 <HAL_DMA_Init>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8008922:	f7fd faeb 	bl	8005efc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a3b      	ldr	r2, [pc, #236]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 800892a:	671a      	str	r2, [r3, #112]	@ 0x70
 800892c:	4a3a      	ldr	r2, [pc, #232]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a38      	ldr	r2, [pc, #224]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 8008936:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008938:	4a37      	ldr	r2, [pc, #220]	@ (8008a18 <HAL_SAI_MspInit+0x1a4>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a37      	ldr	r2, [pc, #220]	@ (8008a20 <HAL_SAI_MspInit+0x1ac>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d15b      	bne.n	8008a00 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8008948:	4b30      	ldr	r3, [pc, #192]	@ (8008a0c <HAL_SAI_MspInit+0x198>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10b      	bne.n	8008968 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8008950:	4b2f      	ldr	r3, [pc, #188]	@ (8008a10 <HAL_SAI_MspInit+0x19c>)
 8008952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008954:	4a2e      	ldr	r2, [pc, #184]	@ (8008a10 <HAL_SAI_MspInit+0x19c>)
 8008956:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800895a:	6453      	str	r3, [r2, #68]	@ 0x44
 800895c:	4b2c      	ldr	r3, [pc, #176]	@ (8008a10 <HAL_SAI_MspInit+0x19c>)
 800895e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8008968:	4b28      	ldr	r3, [pc, #160]	@ (8008a0c <HAL_SAI_MspInit+0x198>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	4a27      	ldr	r2, [pc, #156]	@ (8008a0c <HAL_SAI_MspInit+0x198>)
 8008970:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8008972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008978:	2302      	movs	r3, #2
 800897a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897c:	2300      	movs	r3, #0
 800897e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008980:	2300      	movs	r3, #0
 8008982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8008984:	230a      	movs	r3, #10
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8008988:	f107 0314 	add.w	r3, r7, #20
 800898c:	4619      	mov	r1, r3
 800898e:	4825      	ldr	r0, [pc, #148]	@ (8008a24 <HAL_SAI_MspInit+0x1b0>)
 8008990:	f003 faae 	bl	800bef0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8008994:	4b24      	ldr	r3, [pc, #144]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 8008996:	4a25      	ldr	r2, [pc, #148]	@ (8008a2c <HAL_SAI_MspInit+0x1b8>)
 8008998:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800899a:	4b23      	ldr	r3, [pc, #140]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 800899c:	2200      	movs	r2, #0
 800899e:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80089a0:	4b21      	ldr	r3, [pc, #132]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80089a6:	4b20      	ldr	r3, [pc, #128]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80089ac:	4b1e      	ldr	r3, [pc, #120]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089b2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80089b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089ba:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80089bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80089c2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80089c4:	4b18      	ldr	r3, [pc, #96]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089ca:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80089cc:	4b16      	ldr	r3, [pc, #88]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089d2:	4b15      	ldr	r3, [pc, #84]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80089d8:	4813      	ldr	r0, [pc, #76]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089da:	f002 fbf9 	bl	800b1d0 <HAL_DMA_Init>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 80089e4:	f7fd fa8a 	bl	8005efc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a0f      	ldr	r2, [pc, #60]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80089ee:	4a0e      	ldr	r2, [pc, #56]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80089fa:	4a0b      	ldr	r2, [pc, #44]	@ (8008a28 <HAL_SAI_MspInit+0x1b4>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8008a00:	bf00      	nop
 8008a02:	3728      	adds	r7, #40	@ 0x28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	40015c04 	.word	0x40015c04
 8008a0c:	20001054 	.word	0x20001054
 8008a10:	40023800 	.word	0x40023800
 8008a14:	40022000 	.word	0x40022000
 8008a18:	20000664 	.word	0x20000664
 8008a1c:	40026470 	.word	0x40026470
 8008a20:	40015c24 	.word	0x40015c24
 8008a24:	40021800 	.word	0x40021800
 8008a28:	200006c4 	.word	0x200006c4
 8008a2c:	400264b8 	.word	0x400264b8

08008a30 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a23      	ldr	r2, [pc, #140]	@ (8008acc <HAL_SAI_MspDeInit+0x9c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d11c      	bne.n	8008a7c <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8008a42:	4b23      	ldr	r3, [pc, #140]	@ (8008ad0 <HAL_SAI_MspDeInit+0xa0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	4a21      	ldr	r2, [pc, #132]	@ (8008ad0 <HAL_SAI_MspDeInit+0xa0>)
 8008a4a:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8008a4c:	4b20      	ldr	r3, [pc, #128]	@ (8008ad0 <HAL_SAI_MspDeInit+0xa0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8008a54:	4b1f      	ldr	r3, [pc, #124]	@ (8008ad4 <HAL_SAI_MspDeInit+0xa4>)
 8008a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a58:	4a1e      	ldr	r2, [pc, #120]	@ (8008ad4 <HAL_SAI_MspDeInit+0xa4>)
 8008a5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a5e:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8008a60:	21f0      	movs	r1, #240	@ 0xf0
 8008a62:	481d      	ldr	r0, [pc, #116]	@ (8008ad8 <HAL_SAI_MspDeInit+0xa8>)
 8008a64:	f003 fbf0 	bl	800c248 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f002 fc5d 	bl	800b32c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a76:	4618      	mov	r0, r3
 8008a78:	f002 fc58 	bl	800b32c <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a16      	ldr	r2, [pc, #88]	@ (8008adc <HAL_SAI_MspDeInit+0xac>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d11d      	bne.n	8008ac2 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8008a86:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <HAL_SAI_MspDeInit+0xa0>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4a10      	ldr	r2, [pc, #64]	@ (8008ad0 <HAL_SAI_MspDeInit+0xa0>)
 8008a8e:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8008a90:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad0 <HAL_SAI_MspDeInit+0xa0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d105      	bne.n	8008aa4 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8008a98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad4 <HAL_SAI_MspDeInit+0xa4>)
 8008a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8008ad4 <HAL_SAI_MspDeInit+0xa4>)
 8008a9e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008aa2:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8008aa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008aa8:	480d      	ldr	r0, [pc, #52]	@ (8008ae0 <HAL_SAI_MspDeInit+0xb0>)
 8008aaa:	f003 fbcd 	bl	800c248 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 fc3a 	bl	800b32c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008abc:	4618      	mov	r0, r3
 8008abe:	f002 fc35 	bl	800b32c <HAL_DMA_DeInit>
    }
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	40015c04 	.word	0x40015c04
 8008ad0:	20001054 	.word	0x20001054
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	40022000 	.word	0x40022000
 8008adc:	40015c24 	.word	0x40015c24
 8008ae0:	40021800 	.word	0x40021800

08008ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08e      	sub	sp, #56	@ 0x38
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008af4:	4b33      	ldr	r3, [pc, #204]	@ (8008bc4 <HAL_InitTick+0xe0>)
 8008af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af8:	4a32      	ldr	r2, [pc, #200]	@ (8008bc4 <HAL_InitTick+0xe0>)
 8008afa:	f043 0310 	orr.w	r3, r3, #16
 8008afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b00:	4b30      	ldr	r3, [pc, #192]	@ (8008bc4 <HAL_InitTick+0xe0>)
 8008b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008b0c:	f107 0210 	add.w	r2, r7, #16
 8008b10:	f107 0314 	add.w	r3, r7, #20
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f005 fae0 	bl	800e0dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008b26:	f005 fab1 	bl	800e08c <HAL_RCC_GetPCLK1Freq>
 8008b2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b2c:	e004      	b.n	8008b38 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008b2e:	f005 faad 	bl	800e08c <HAL_RCC_GetPCLK1Freq>
 8008b32:	4603      	mov	r3, r0
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3a:	4a23      	ldr	r2, [pc, #140]	@ (8008bc8 <HAL_InitTick+0xe4>)
 8008b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b40:	0c9b      	lsrs	r3, r3, #18
 8008b42:	3b01      	subs	r3, #1
 8008b44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008b46:	4b21      	ldr	r3, [pc, #132]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b48:	4a21      	ldr	r2, [pc, #132]	@ (8008bd0 <HAL_InitTick+0xec>)
 8008b4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008b52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008b54:	4a1d      	ldr	r2, [pc, #116]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b60:	4b1a      	ldr	r3, [pc, #104]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b66:	4b19      	ldr	r3, [pc, #100]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008b6c:	4817      	ldr	r0, [pc, #92]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b6e:	f007 fe2e 	bl	80107ce <HAL_TIM_Base_Init>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8008b78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d11b      	bne.n	8008bb8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008b80:	4812      	ldr	r0, [pc, #72]	@ (8008bcc <HAL_InitTick+0xe8>)
 8008b82:	f007 fe85 	bl	8010890 <HAL_TIM_Base_Start_IT>
 8008b86:	4603      	mov	r3, r0
 8008b88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8008b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d111      	bne.n	8008bb8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008b94:	2036      	movs	r0, #54	@ 0x36
 8008b96:	f002 fb0d 	bl	800b1b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b0f      	cmp	r3, #15
 8008b9e:	d808      	bhi.n	8008bb2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	2036      	movs	r0, #54	@ 0x36
 8008ba6:	f002 fae9 	bl	800b17c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008baa:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd4 <HAL_InitTick+0xf0>)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e002      	b.n	8008bb8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3738      	adds	r7, #56	@ 0x38
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40023800 	.word	0x40023800
 8008bc8:	431bde83 	.word	0x431bde83
 8008bcc:	20001058 	.word	0x20001058
 8008bd0:	40001000 	.word	0x40001000
 8008bd4:	20000090 	.word	0x20000090

08008bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <NMI_Handler+0x4>

08008be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008be4:	bf00      	nop
 8008be6:	e7fd      	b.n	8008be4 <HardFault_Handler+0x4>

08008be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <MemManage_Handler+0x4>

08008bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <BusFault_Handler+0x4>

08008bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <UsageFault_Handler+0x4>

08008c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8008c14:	4802      	ldr	r0, [pc, #8]	@ (8008c20 <SDMMC1_IRQHandler+0x10>)
 8008c16:	f006 fea1 	bl	800f95c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8008c1a:	bf00      	nop
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000724 	.word	0x20000724

08008c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008c28:	4802      	ldr	r0, [pc, #8]	@ (8008c34 <TIM6_DAC_IRQHandler+0x10>)
 8008c2a:	f007 fea9 	bl	8010980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008c2e:	bf00      	nop
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20001058 	.word	0x20001058

08008c38 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8008c3c:	4802      	ldr	r0, [pc, #8]	@ (8008c48 <DMA2_Stream3_IRQHandler+0x10>)
 8008c3e:	f002 fc55 	bl	800b4ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008c42:	bf00      	nop
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	200007a8 	.word	0x200007a8

08008c4c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8008c50:	4802      	ldr	r0, [pc, #8]	@ (8008c5c <DMA2_Stream4_IRQHandler+0x10>)
 8008c52:	f002 fc4b 	bl	800b4ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000664 	.word	0x20000664

08008c60 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8008c64:	4802      	ldr	r0, [pc, #8]	@ (8008c70 <DMA2_Stream6_IRQHandler+0x10>)
 8008c66:	f002 fc41 	bl	800b4ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8008c6a:	bf00      	nop
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000808 	.word	0x20000808

08008c74 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8008c78:	4802      	ldr	r0, [pc, #8]	@ (8008c84 <DMA2_Stream7_IRQHandler+0x10>)
 8008c7a:	f002 fc37 	bl	800b4ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008c7e:	bf00      	nop
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	200006c4 	.word	0x200006c4

08008c88 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8008c8c:	4802      	ldr	r0, [pc, #8]	@ (8008c98 <LTDC_IRQHandler+0x10>)
 8008c8e:	f004 fa93 	bl	800d1b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8008c92:	bf00      	nop
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200004b4 	.word	0x200004b4

08008c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
	return 1;
 8008ca0:	2301      	movs	r3, #1
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <_kill>:

int _kill(int pid, int sig)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008cb6:	f00d fb13 	bl	80162e0 <__errno>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2216      	movs	r2, #22
 8008cbe:	601a      	str	r2, [r3, #0]
	return -1;
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <_exit>:

void _exit (int status)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ffe7 	bl	8008cac <_kill>
	while (1) {}		/* Make sure we hang here */
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <_exit+0x12>

08008ce2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b086      	sub	sp, #24
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cee:	2300      	movs	r3, #0
 8008cf0:	617b      	str	r3, [r7, #20]
 8008cf2:	e00a      	b.n	8008d0a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008cf4:	f3af 8000 	nop.w
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	60ba      	str	r2, [r7, #8]
 8008d00:	b2ca      	uxtb	r2, r1
 8008d02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	3301      	adds	r3, #1
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	dbf0      	blt.n	8008cf4 <_read+0x12>
	}

return len;
 8008d12:	687b      	ldr	r3, [r7, #4]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	e009      	b.n	8008d42 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	60ba      	str	r2, [r7, #8]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	dbf1      	blt.n	8008d2e <_write+0x12>
	}
	return len;
 8008d4a:	687b      	ldr	r3, [r7, #4]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <_close>:

int _close(int file)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	return -1;
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008d7c:	605a      	str	r2, [r3, #4]
	return 0;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <_isatty>:

int _isatty(int file)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	return 1;
 8008d94:	2301      	movs	r3, #1
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
	return 0;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008dc4:	4a14      	ldr	r2, [pc, #80]	@ (8008e18 <_sbrk+0x5c>)
 8008dc6:	4b15      	ldr	r3, [pc, #84]	@ (8008e1c <_sbrk+0x60>)
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008dd0:	4b13      	ldr	r3, [pc, #76]	@ (8008e20 <_sbrk+0x64>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008dd8:	4b11      	ldr	r3, [pc, #68]	@ (8008e20 <_sbrk+0x64>)
 8008dda:	4a12      	ldr	r2, [pc, #72]	@ (8008e24 <_sbrk+0x68>)
 8008ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008dde:	4b10      	ldr	r3, [pc, #64]	@ (8008e20 <_sbrk+0x64>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d207      	bcs.n	8008dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008dec:	f00d fa78 	bl	80162e0 <__errno>
 8008df0:	4603      	mov	r3, r0
 8008df2:	220c      	movs	r2, #12
 8008df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008df6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfa:	e009      	b.n	8008e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008dfc:	4b08      	ldr	r3, [pc, #32]	@ (8008e20 <_sbrk+0x64>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e02:	4b07      	ldr	r3, [pc, #28]	@ (8008e20 <_sbrk+0x64>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4413      	add	r3, r2
 8008e0a:	4a05      	ldr	r2, [pc, #20]	@ (8008e20 <_sbrk+0x64>)
 8008e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20050000 	.word	0x20050000
 8008e1c:	00000800 	.word	0x00000800
 8008e20:	200010a4 	.word	0x200010a4
 8008e24:	20009808 	.word	0x20009808

08008e28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008e2c:	4b06      	ldr	r3, [pc, #24]	@ (8008e48 <SystemInit+0x20>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e32:	4a05      	ldr	r2, [pc, #20]	@ (8008e48 <SystemInit+0x20>)
 8008e34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e3c:	bf00      	nop
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	e000ed00 	.word	0xe000ed00

08008e4c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	4603      	mov	r3, r0
 8008e56:	81fb      	strh	r3, [r7, #14]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	81bb      	strh	r3, [r7, #12]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8008e64:	89bb      	ldrh	r3, [r7, #12]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8008e6a:	89bb      	ldrh	r3, [r7, #12]
 8008e6c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008e70:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8008e76:	f7fd f99d 	bl	80061b4 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8008e7a:	89fb      	ldrh	r3, [r7, #14]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2203      	movs	r2, #3
 8008e80:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 fc35 	bl	800a6f4 <CODEC_IO_Write>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	4413      	add	r3, r2
 8008e92:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8008e94:	89fb      	ldrh	r3, [r7, #14]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f640 0117 	movw	r1, #2071	@ 0x817
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 fc28 	bl	800a6f4 <CODEC_IO_Write>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	4413      	add	r3, r2
 8008eac:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8008eae:	89fb      	ldrh	r3, [r7, #14]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 fc1b 	bl	800a6f4 <CODEC_IO_Write>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8008ec8:	89fb      	ldrh	r3, [r7, #14]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	226c      	movs	r2, #108	@ 0x6c
 8008ece:	2139      	movs	r1, #57	@ 0x39
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 fc0f 	bl	800a6f4 <CODEC_IO_Write>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	461a      	mov	r2, r3
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	4413      	add	r3, r2
 8008ede:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8008ee0:	8afb      	ldrh	r3, [r7, #22]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00c      	beq.n	8008f00 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8008ee6:	89fb      	ldrh	r3, [r7, #14]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2213      	movs	r2, #19
 8008eec:	2101      	movs	r1, #1
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 fc00 	bl	800a6f4 <CODEC_IO_Write>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	4413      	add	r3, r2
 8008efc:	61fb      	str	r3, [r7, #28]
 8008efe:	e00b      	b.n	8008f18 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8008f00:	89fb      	ldrh	r3, [r7, #14]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2203      	movs	r2, #3
 8008f06:	2101      	movs	r1, #1
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 fbf3 	bl	800a6f4 <CODEC_IO_Write>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	461a      	mov	r2, r3
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8008f18:	2032      	movs	r0, #50	@ 0x32
 8008f1a:	f7fd f9b3 	bl	8006284 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8008f1e:	8b3b      	ldrh	r3, [r7, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 815f 	beq.w	80091e4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8008f26:	4bae      	ldr	r3, [pc, #696]	@ (80091e0 <wm8994_Init+0x394>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8008f2c:	8b3b      	ldrh	r3, [r7, #24]
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	f000 808c 	beq.w	800904c <wm8994_Init+0x200>
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	f300 8111 	bgt.w	800915c <wm8994_Init+0x310>
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d002      	beq.n	8008f44 <wm8994_Init+0xf8>
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d042      	beq.n	8008fc8 <wm8994_Init+0x17c>
 8008f42:	e10b      	b.n	800915c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8008f44:	89fb      	ldrh	r3, [r7, #14]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8008f4c:	2105      	movs	r1, #5
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 fbd0 	bl	800a6f4 <CODEC_IO_Write>
 8008f54:	4603      	mov	r3, r0
 8008f56:	461a      	mov	r2, r3
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8008f5e:	89fb      	ldrh	r3, [r7, #14]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2200      	movs	r2, #0
 8008f64:	f240 6101 	movw	r1, #1537	@ 0x601
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 fbc3 	bl	800a6f4 <CODEC_IO_Write>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	461a      	mov	r2, r3
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8008f78:	89fb      	ldrh	r3, [r7, #14]
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f240 6102 	movw	r1, #1538	@ 0x602
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 fbb6 	bl	800a6f4 <CODEC_IO_Write>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	4413      	add	r3, r2
 8008f90:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8008f92:	89fb      	ldrh	r3, [r7, #14]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2202      	movs	r2, #2
 8008f98:	f240 6104 	movw	r1, #1540	@ 0x604
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 fba9 	bl	800a6f4 <CODEC_IO_Write>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4413      	add	r3, r2
 8008faa:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8008fac:	89fb      	ldrh	r3, [r7, #14]
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f240 6105 	movw	r1, #1541	@ 0x605
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fb9c 	bl	800a6f4 <CODEC_IO_Write>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	61fb      	str	r3, [r7, #28]
      break;
 8008fc6:	e110      	b.n	80091ea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008fc8:	89fb      	ldrh	r3, [r7, #14]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	f240 3203 	movw	r2, #771	@ 0x303
 8008fd0:	2105      	movs	r1, #5
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 fb8e 	bl	800a6f4 <CODEC_IO_Write>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	461a      	mov	r2, r3
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	4413      	add	r3, r2
 8008fe0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8008fe2:	89fb      	ldrh	r3, [r7, #14]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f240 6101 	movw	r1, #1537	@ 0x601
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 fb81 	bl	800a6f4 <CODEC_IO_Write>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008ffc:	89fb      	ldrh	r3, [r7, #14]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2201      	movs	r2, #1
 8009002:	f240 6102 	movw	r1, #1538	@ 0x602
 8009006:	4618      	mov	r0, r3
 8009008:	f001 fb74 	bl	800a6f4 <CODEC_IO_Write>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8009016:	89fb      	ldrh	r3, [r7, #14]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2200      	movs	r2, #0
 800901c:	f240 6104 	movw	r1, #1540	@ 0x604
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fb67 	bl	800a6f4 <CODEC_IO_Write>
 8009026:	4603      	mov	r3, r0
 8009028:	461a      	mov	r2, r3
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8009030:	89fb      	ldrh	r3, [r7, #14]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2200      	movs	r2, #0
 8009036:	f240 6105 	movw	r1, #1541	@ 0x605
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fb5a 	bl	800a6f4 <CODEC_IO_Write>
 8009040:	4603      	mov	r3, r0
 8009042:	461a      	mov	r2, r3
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	4413      	add	r3, r2
 8009048:	61fb      	str	r3, [r7, #28]
      break;
 800904a:	e0ce      	b.n	80091ea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800904c:	8afb      	ldrh	r3, [r7, #22]
 800904e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009052:	d141      	bne.n	80090d8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8009054:	89fb      	ldrh	r3, [r7, #14]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800905c:	2105      	movs	r1, #5
 800905e:	4618      	mov	r0, r3
 8009060:	f001 fb48 	bl	800a6f4 <CODEC_IO_Write>
 8009064:	4603      	mov	r3, r0
 8009066:	461a      	mov	r2, r3
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	4413      	add	r3, r2
 800906c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800906e:	89fb      	ldrh	r3, [r7, #14]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2203      	movs	r2, #3
 8009074:	f240 6101 	movw	r1, #1537	@ 0x601
 8009078:	4618      	mov	r0, r3
 800907a:	f001 fb3b 	bl	800a6f4 <CODEC_IO_Write>
 800907e:	4603      	mov	r3, r0
 8009080:	461a      	mov	r2, r3
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	4413      	add	r3, r2
 8009086:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8009088:	89fb      	ldrh	r3, [r7, #14]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2203      	movs	r2, #3
 800908e:	f240 6102 	movw	r1, #1538	@ 0x602
 8009092:	4618      	mov	r0, r3
 8009094:	f001 fb2e 	bl	800a6f4 <CODEC_IO_Write>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80090a2:	89fb      	ldrh	r3, [r7, #14]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2203      	movs	r2, #3
 80090a8:	f240 6104 	movw	r1, #1540	@ 0x604
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 fb21 	bl	800a6f4 <CODEC_IO_Write>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	4413      	add	r3, r2
 80090ba:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80090bc:	89fb      	ldrh	r3, [r7, #14]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2203      	movs	r2, #3
 80090c2:	f240 6105 	movw	r1, #1541	@ 0x605
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 fb14 	bl	800a6f4 <CODEC_IO_Write>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	4413      	add	r3, r2
 80090d4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80090d6:	e088      	b.n	80091ea <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80090d8:	89fb      	ldrh	r3, [r7, #14]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80090e0:	2105      	movs	r1, #5
 80090e2:	4618      	mov	r0, r3
 80090e4:	f001 fb06 	bl	800a6f4 <CODEC_IO_Write>
 80090e8:	4603      	mov	r3, r0
 80090ea:	461a      	mov	r2, r3
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	4413      	add	r3, r2
 80090f0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80090f2:	89fb      	ldrh	r3, [r7, #14]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2201      	movs	r2, #1
 80090f8:	f240 6101 	movw	r1, #1537	@ 0x601
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 faf9 	bl	800a6f4 <CODEC_IO_Write>
 8009102:	4603      	mov	r3, r0
 8009104:	461a      	mov	r2, r3
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800910c:	89fb      	ldrh	r3, [r7, #14]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2201      	movs	r2, #1
 8009112:	f240 6102 	movw	r1, #1538	@ 0x602
 8009116:	4618      	mov	r0, r3
 8009118:	f001 faec 	bl	800a6f4 <CODEC_IO_Write>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	4413      	add	r3, r2
 8009124:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8009126:	89fb      	ldrh	r3, [r7, #14]
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2202      	movs	r2, #2
 800912c:	f240 6104 	movw	r1, #1540	@ 0x604
 8009130:	4618      	mov	r0, r3
 8009132:	f001 fadf 	bl	800a6f4 <CODEC_IO_Write>
 8009136:	4603      	mov	r3, r0
 8009138:	461a      	mov	r2, r3
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8009140:	89fb      	ldrh	r3, [r7, #14]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2202      	movs	r2, #2
 8009146:	f240 6105 	movw	r1, #1541	@ 0x605
 800914a:	4618      	mov	r0, r3
 800914c:	f001 fad2 	bl	800a6f4 <CODEC_IO_Write>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	4413      	add	r3, r2
 8009158:	61fb      	str	r3, [r7, #28]
      break;
 800915a:	e046      	b.n	80091ea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800915c:	89fb      	ldrh	r3, [r7, #14]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f240 3203 	movw	r2, #771	@ 0x303
 8009164:	2105      	movs	r1, #5
 8009166:	4618      	mov	r0, r3
 8009168:	f001 fac4 	bl	800a6f4 <CODEC_IO_Write>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	4413      	add	r3, r2
 8009174:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8009176:	89fb      	ldrh	r3, [r7, #14]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2201      	movs	r2, #1
 800917c:	f240 6101 	movw	r1, #1537	@ 0x601
 8009180:	4618      	mov	r0, r3
 8009182:	f001 fab7 	bl	800a6f4 <CODEC_IO_Write>
 8009186:	4603      	mov	r3, r0
 8009188:	461a      	mov	r2, r3
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8009190:	89fb      	ldrh	r3, [r7, #14]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2201      	movs	r2, #1
 8009196:	f240 6102 	movw	r1, #1538	@ 0x602
 800919a:	4618      	mov	r0, r3
 800919c:	f001 faaa 	bl	800a6f4 <CODEC_IO_Write>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	4413      	add	r3, r2
 80091a8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80091aa:	89fb      	ldrh	r3, [r7, #14]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2200      	movs	r2, #0
 80091b0:	f240 6104 	movw	r1, #1540	@ 0x604
 80091b4:	4618      	mov	r0, r3
 80091b6:	f001 fa9d 	bl	800a6f4 <CODEC_IO_Write>
 80091ba:	4603      	mov	r3, r0
 80091bc:	461a      	mov	r2, r3
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80091c4:	89fb      	ldrh	r3, [r7, #14]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2200      	movs	r2, #0
 80091ca:	f240 6105 	movw	r1, #1541	@ 0x605
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 fa90 	bl	800a6f4 <CODEC_IO_Write>
 80091d4:	4603      	mov	r3, r0
 80091d6:	461a      	mov	r2, r3
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	4413      	add	r3, r2
 80091dc:	61fb      	str	r3, [r7, #28]
      break;
 80091de:	e004      	b.n	80091ea <wm8994_Init+0x39e>
 80091e0:	200010a8 	.word	0x200010a8
    }
  }
  else
  {
    outputEnabled = 0;
 80091e4:	4ba5      	ldr	r3, [pc, #660]	@ (800947c <wm8994_Init+0x630>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80091ea:	8afb      	ldrh	r3, [r7, #22]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 81c3 	beq.w	8009578 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 80091f2:	4ba3      	ldr	r3, [pc, #652]	@ (8009480 <wm8994_Init+0x634>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80091f8:	8afb      	ldrh	r3, [r7, #22]
 80091fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091fe:	f000 8141 	beq.w	8009484 <wm8994_Init+0x638>
 8009202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009206:	f300 81b3 	bgt.w	8009570 <wm8994_Init+0x724>
 800920a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800920e:	d05a      	beq.n	80092c6 <wm8994_Init+0x47a>
 8009210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009214:	f300 81ac 	bgt.w	8009570 <wm8994_Init+0x724>
 8009218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800921c:	f000 80de 	beq.w	80093dc <wm8994_Init+0x590>
 8009220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009224:	f040 81a4 	bne.w	8009570 <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8009228:	89fb      	ldrh	r3, [r7, #14]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8009230:	2104      	movs	r1, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f001 fa5e 	bl	800a6f4 <CODEC_IO_Write>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8009242:	89fb      	ldrh	r3, [r7, #14]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	22db      	movs	r2, #219	@ 0xdb
 8009248:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800924c:	4618      	mov	r0, r3
 800924e:	f001 fa51 	bl	800a6f4 <CODEC_IO_Write>
 8009252:	4603      	mov	r3, r0
 8009254:	461a      	mov	r2, r3
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800925c:	89fb      	ldrh	r3, [r7, #14]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8009264:	2102      	movs	r1, #2
 8009266:	4618      	mov	r0, r3
 8009268:	f001 fa44 	bl	800a6f4 <CODEC_IO_Write>
 800926c:	4603      	mov	r3, r0
 800926e:	461a      	mov	r2, r3
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8009276:	89fb      	ldrh	r3, [r7, #14]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2202      	movs	r2, #2
 800927c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8009280:	4618      	mov	r0, r3
 8009282:	f001 fa37 	bl	800a6f4 <CODEC_IO_Write>
 8009286:	4603      	mov	r3, r0
 8009288:	461a      	mov	r2, r3
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	4413      	add	r3, r2
 800928e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8009290:	89fb      	ldrh	r3, [r7, #14]
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2202      	movs	r2, #2
 8009296:	f240 6109 	movw	r1, #1545	@ 0x609
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fa2a 	bl	800a6f4 <CODEC_IO_Write>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461a      	mov	r2, r3
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80092aa:	89fb      	ldrh	r3, [r7, #14]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	220e      	movs	r2, #14
 80092b0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 fa1d 	bl	800a6f4 <CODEC_IO_Write>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	61fb      	str	r3, [r7, #28]
      break;
 80092c4:	e15b      	b.n	800957e <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80092c6:	89fb      	ldrh	r3, [r7, #14]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2211      	movs	r2, #17
 80092cc:	2128      	movs	r1, #40	@ 0x28
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 fa10 	bl	800a6f4 <CODEC_IO_Write>
 80092d4:	4603      	mov	r3, r0
 80092d6:	461a      	mov	r2, r3
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	4413      	add	r3, r2
 80092dc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80092de:	89fb      	ldrh	r3, [r7, #14]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2220      	movs	r2, #32
 80092e4:	2129      	movs	r1, #41	@ 0x29
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 fa04 	bl	800a6f4 <CODEC_IO_Write>
 80092ec:	4603      	mov	r3, r0
 80092ee:	461a      	mov	r2, r3
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	4413      	add	r3, r2
 80092f4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 80092f6:	89fb      	ldrh	r3, [r7, #14]
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2220      	movs	r2, #32
 80092fc:	212a      	movs	r1, #42	@ 0x2a
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 f9f8 	bl	800a6f4 <CODEC_IO_Write>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	4413      	add	r3, r2
 800930c:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 800930e:	89fb      	ldrh	r3, [r7, #14]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2200      	movs	r2, #0
 8009314:	212b      	movs	r1, #43	@ 0x2b
 8009316:	4618      	mov	r0, r3
 8009318:	f001 f9ec 	bl	800a6f4 <CODEC_IO_Write>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 8009326:	89fb      	ldrh	r3, [r7, #14]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2200      	movs	r2, #0
 800932c:	212c      	movs	r1, #44	@ 0x2c
 800932e:	4618      	mov	r0, r3
 8009330:	f001 f9e0 	bl	800a6f4 <CODEC_IO_Write>
 8009334:	4603      	mov	r3, r0
 8009336:	461a      	mov	r2, r3
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	4413      	add	r3, r2
 800933c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800933e:	89fb      	ldrh	r3, [r7, #14]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f240 3203 	movw	r2, #771	@ 0x303
 8009346:	2104      	movs	r1, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f001 f9d3 	bl	800a6f4 <CODEC_IO_Write>
 800934e:	4603      	mov	r3, r0
 8009350:	461a      	mov	r2, r3
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8009358:	89fb      	ldrh	r3, [r7, #14]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	22db      	movs	r2, #219	@ 0xdb
 800935e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8009362:	4618      	mov	r0, r3
 8009364:	f001 f9c6 	bl	800a6f4 <CODEC_IO_Write>
 8009368:	4603      	mov	r3, r0
 800936a:	461a      	mov	r2, r3
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	4413      	add	r3, r2
 8009370:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8009372:	89fb      	ldrh	r3, [r7, #14]
 8009374:	b2db      	uxtb	r3, r3
 8009376:	f246 3250 	movw	r2, #25424	@ 0x6350
 800937a:	2102      	movs	r1, #2
 800937c:	4618      	mov	r0, r3
 800937e:	f001 f9b9 	bl	800a6f4 <CODEC_IO_Write>
 8009382:	4603      	mov	r3, r0
 8009384:	461a      	mov	r2, r3
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800938c:	89fb      	ldrh	r3, [r7, #14]
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2202      	movs	r2, #2
 8009392:	f240 6106 	movw	r1, #1542	@ 0x606
 8009396:	4618      	mov	r0, r3
 8009398:	f001 f9ac 	bl	800a6f4 <CODEC_IO_Write>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	4413      	add	r3, r2
 80093a4:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80093a6:	89fb      	ldrh	r3, [r7, #14]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2202      	movs	r2, #2
 80093ac:	f240 6107 	movw	r1, #1543	@ 0x607
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 f99f 	bl	800a6f4 <CODEC_IO_Write>
 80093b6:	4603      	mov	r3, r0
 80093b8:	461a      	mov	r2, r3
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	4413      	add	r3, r2
 80093be:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80093c0:	89fb      	ldrh	r3, [r7, #14]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	220d      	movs	r2, #13
 80093c6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 f992 	bl	800a6f4 <CODEC_IO_Write>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	4413      	add	r3, r2
 80093d8:	61fb      	str	r3, [r7, #28]
      break;
 80093da:	e0d0      	b.n	800957e <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80093dc:	89fb      	ldrh	r3, [r7, #14]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80093e4:	2104      	movs	r1, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 f984 	bl	800a6f4 <CODEC_IO_Write>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461a      	mov	r2, r3
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	22db      	movs	r2, #219	@ 0xdb
 80093fc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8009400:	4618      	mov	r0, r3
 8009402:	f001 f977 	bl	800a6f4 <CODEC_IO_Write>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4413      	add	r3, r2
 800940e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f246 3250 	movw	r2, #25424	@ 0x6350
 8009418:	2102      	movs	r1, #2
 800941a:	4618      	mov	r0, r3
 800941c:	f001 f96a 	bl	800a6f4 <CODEC_IO_Write>
 8009420:	4603      	mov	r3, r0
 8009422:	461a      	mov	r2, r3
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	4413      	add	r3, r2
 8009428:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800942a:	89fb      	ldrh	r3, [r7, #14]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2202      	movs	r2, #2
 8009430:	f240 6106 	movw	r1, #1542	@ 0x606
 8009434:	4618      	mov	r0, r3
 8009436:	f001 f95d 	bl	800a6f4 <CODEC_IO_Write>
 800943a:	4603      	mov	r3, r0
 800943c:	461a      	mov	r2, r3
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8009444:	89fb      	ldrh	r3, [r7, #14]
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2202      	movs	r2, #2
 800944a:	f240 6107 	movw	r1, #1543	@ 0x607
 800944e:	4618      	mov	r0, r3
 8009450:	f001 f950 	bl	800a6f4 <CODEC_IO_Write>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800945e:	89fb      	ldrh	r3, [r7, #14]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	220d      	movs	r2, #13
 8009464:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8009468:	4618      	mov	r0, r3
 800946a:	f001 f943 	bl	800a6f4 <CODEC_IO_Write>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	61fb      	str	r3, [r7, #28]
      break; 
 8009478:	e081      	b.n	800957e <wm8994_Init+0x732>
 800947a:	bf00      	nop
 800947c:	200010a8 	.word	0x200010a8
 8009480:	200010ac 	.word	0x200010ac
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f640 723c 	movw	r2, #3900	@ 0xf3c
 800948c:	2104      	movs	r1, #4
 800948e:	4618      	mov	r0, r3
 8009490:	f001 f930 	bl	800a6f4 <CODEC_IO_Write>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800949e:	89fb      	ldrh	r3, [r7, #14]
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	22db      	movs	r2, #219	@ 0xdb
 80094a4:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 f923 	bl	800a6f4 <CODEC_IO_Write>
 80094ae:	4603      	mov	r3, r0
 80094b0:	461a      	mov	r2, r3
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	4413      	add	r3, r2
 80094b6:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80094b8:	89fb      	ldrh	r3, [r7, #14]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	22db      	movs	r2, #219	@ 0xdb
 80094be:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 f916 	bl	800a6f4 <CODEC_IO_Write>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80094d2:	89fb      	ldrh	r3, [r7, #14]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80094da:	2102      	movs	r1, #2
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 f909 	bl	800a6f4 <CODEC_IO_Write>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80094ec:	89fb      	ldrh	r3, [r7, #14]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2202      	movs	r2, #2
 80094f2:	f240 6106 	movw	r1, #1542	@ 0x606
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 f8fc 	bl	800a6f4 <CODEC_IO_Write>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	4413      	add	r3, r2
 8009504:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8009506:	89fb      	ldrh	r3, [r7, #14]
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2202      	movs	r2, #2
 800950c:	f240 6107 	movw	r1, #1543	@ 0x607
 8009510:	4618      	mov	r0, r3
 8009512:	f001 f8ef 	bl	800a6f4 <CODEC_IO_Write>
 8009516:	4603      	mov	r3, r0
 8009518:	461a      	mov	r2, r3
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8009520:	89fb      	ldrh	r3, [r7, #14]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2202      	movs	r2, #2
 8009526:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800952a:	4618      	mov	r0, r3
 800952c:	f001 f8e2 	bl	800a6f4 <CODEC_IO_Write>
 8009530:	4603      	mov	r3, r0
 8009532:	461a      	mov	r2, r3
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	4413      	add	r3, r2
 8009538:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800953a:	89fb      	ldrh	r3, [r7, #14]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2202      	movs	r2, #2
 8009540:	f240 6109 	movw	r1, #1545	@ 0x609
 8009544:	4618      	mov	r0, r3
 8009546:	f001 f8d5 	bl	800a6f4 <CODEC_IO_Write>
 800954a:	4603      	mov	r3, r0
 800954c:	461a      	mov	r2, r3
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	4413      	add	r3, r2
 8009552:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8009554:	89fb      	ldrh	r3, [r7, #14]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	220d      	movs	r2, #13
 800955a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800955e:	4618      	mov	r0, r3
 8009560:	f001 f8c8 	bl	800a6f4 <CODEC_IO_Write>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	4413      	add	r3, r2
 800956c:	61fb      	str	r3, [r7, #28]
      break;    
 800956e:	e006      	b.n	800957e <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	3301      	adds	r3, #1
 8009574:	61fb      	str	r3, [r7, #28]
      break;
 8009576:	e002      	b.n	800957e <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8009578:	4ba4      	ldr	r3, [pc, #656]	@ (800980c <wm8994_Init+0x9c0>)
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4aa3      	ldr	r2, [pc, #652]	@ (8009810 <wm8994_Init+0x9c4>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d079      	beq.n	800967a <wm8994_Init+0x82e>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4aa1      	ldr	r2, [pc, #644]	@ (8009810 <wm8994_Init+0x9c4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	f200 80ad 	bhi.w	80096ea <wm8994_Init+0x89e>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8009596:	4293      	cmp	r3, r2
 8009598:	d061      	beq.n	800965e <wm8994_Init+0x812>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80095a0:	4293      	cmp	r3, r2
 80095a2:	f200 80a2 	bhi.w	80096ea <wm8994_Init+0x89e>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80095ac:	4293      	cmp	r3, r2
 80095ae:	f000 808e 	beq.w	80096ce <wm8994_Init+0x882>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80095b8:	4293      	cmp	r3, r2
 80095ba:	f200 8096 	bhi.w	80096ea <wm8994_Init+0x89e>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80095c4:	d03d      	beq.n	8009642 <wm8994_Init+0x7f6>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80095cc:	f200 808d 	bhi.w	80096ea <wm8994_Init+0x89e>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f245 6222 	movw	r2, #22050	@ 0x5622
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d06b      	beq.n	80096b2 <wm8994_Init+0x866>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f245 6222 	movw	r2, #22050	@ 0x5622
 80095e0:	4293      	cmp	r3, r2
 80095e2:	f200 8082 	bhi.w	80096ea <wm8994_Init+0x89e>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80095ec:	d01b      	beq.n	8009626 <wm8994_Init+0x7da>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80095f4:	d879      	bhi.n	80096ea <wm8994_Init+0x89e>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80095fc:	d005      	beq.n	800960a <wm8994_Init+0x7be>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8009604:	4293      	cmp	r3, r2
 8009606:	d046      	beq.n	8009696 <wm8994_Init+0x84a>
 8009608:	e06f      	b.n	80096ea <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800960a:	89fb      	ldrh	r3, [r7, #14]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2203      	movs	r2, #3
 8009610:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009614:	4618      	mov	r0, r3
 8009616:	f001 f86d 	bl	800a6f4 <CODEC_IO_Write>
 800961a:	4603      	mov	r3, r0
 800961c:	461a      	mov	r2, r3
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4413      	add	r3, r2
 8009622:	61fb      	str	r3, [r7, #28]
    break;
 8009624:	e06f      	b.n	8009706 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8009626:	89fb      	ldrh	r3, [r7, #14]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2233      	movs	r2, #51	@ 0x33
 800962c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009630:	4618      	mov	r0, r3
 8009632:	f001 f85f 	bl	800a6f4 <CODEC_IO_Write>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	4413      	add	r3, r2
 800963e:	61fb      	str	r3, [r7, #28]
    break;
 8009640:	e061      	b.n	8009706 <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8009642:	89fb      	ldrh	r3, [r7, #14]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2263      	movs	r2, #99	@ 0x63
 8009648:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800964c:	4618      	mov	r0, r3
 800964e:	f001 f851 	bl	800a6f4 <CODEC_IO_Write>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	4413      	add	r3, r2
 800965a:	61fb      	str	r3, [r7, #28]
    break;
 800965c:	e053      	b.n	8009706 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800965e:	89fb      	ldrh	r3, [r7, #14]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2283      	movs	r2, #131	@ 0x83
 8009664:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009668:	4618      	mov	r0, r3
 800966a:	f001 f843 	bl	800a6f4 <CODEC_IO_Write>
 800966e:	4603      	mov	r3, r0
 8009670:	461a      	mov	r2, r3
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	61fb      	str	r3, [r7, #28]
    break;
 8009678:	e045      	b.n	8009706 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800967a:	89fb      	ldrh	r3, [r7, #14]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	22a3      	movs	r2, #163	@ 0xa3
 8009680:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009684:	4618      	mov	r0, r3
 8009686:	f001 f835 	bl	800a6f4 <CODEC_IO_Write>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	61fb      	str	r3, [r7, #28]
    break;
 8009694:	e037      	b.n	8009706 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8009696:	89fb      	ldrh	r3, [r7, #14]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2213      	movs	r2, #19
 800969c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 f827 	bl	800a6f4 <CODEC_IO_Write>
 80096a6:	4603      	mov	r3, r0
 80096a8:	461a      	mov	r2, r3
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	61fb      	str	r3, [r7, #28]
    break;
 80096b0:	e029      	b.n	8009706 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80096b2:	89fb      	ldrh	r3, [r7, #14]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2243      	movs	r2, #67	@ 0x43
 80096b8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 f819 	bl	800a6f4 <CODEC_IO_Write>
 80096c2:	4603      	mov	r3, r0
 80096c4:	461a      	mov	r2, r3
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	4413      	add	r3, r2
 80096ca:	61fb      	str	r3, [r7, #28]
    break;
 80096cc:	e01b      	b.n	8009706 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80096ce:	89fb      	ldrh	r3, [r7, #14]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2273      	movs	r2, #115	@ 0x73
 80096d4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 f80b 	bl	800a6f4 <CODEC_IO_Write>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	61fb      	str	r3, [r7, #28]
    break; 
 80096e8:	e00d      	b.n	8009706 <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80096ea:	89fb      	ldrh	r3, [r7, #14]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2283      	movs	r2, #131	@ 0x83
 80096f0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fffd 	bl	800a6f4 <CODEC_IO_Write>
 80096fa:	4603      	mov	r3, r0
 80096fc:	461a      	mov	r2, r3
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	61fb      	str	r3, [r7, #28]
    break; 
 8009704:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8009706:	8afb      	ldrh	r3, [r7, #22]
 8009708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800970c:	d10e      	bne.n	800972c <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800970e:	89fb      	ldrh	r3, [r7, #14]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f244 0218 	movw	r2, #16408	@ 0x4018
 8009716:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800971a:	4618      	mov	r0, r3
 800971c:	f000 ffea 	bl	800a6f4 <CODEC_IO_Write>
 8009720:	4603      	mov	r3, r0
 8009722:	461a      	mov	r2, r3
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4413      	add	r3, r2
 8009728:	61fb      	str	r3, [r7, #28]
 800972a:	e00d      	b.n	8009748 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800972c:	89fb      	ldrh	r3, [r7, #14]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f244 0210 	movw	r2, #16400	@ 0x4010
 8009734:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8009738:	4618      	mov	r0, r3
 800973a:	f000 ffdb 	bl	800a6f4 <CODEC_IO_Write>
 800973e:	4603      	mov	r3, r0
 8009740:	461a      	mov	r2, r3
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4413      	add	r3, r2
 8009746:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8009748:	89fb      	ldrh	r3, [r7, #14]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2200      	movs	r2, #0
 800974e:	f240 3102 	movw	r1, #770	@ 0x302
 8009752:	4618      	mov	r0, r3
 8009754:	f000 ffce 	bl	800a6f4 <CODEC_IO_Write>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4413      	add	r3, r2
 8009760:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8009762:	89fb      	ldrh	r3, [r7, #14]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	220a      	movs	r2, #10
 8009768:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800976c:	4618      	mov	r0, r3
 800976e:	f000 ffc1 	bl	800a6f4 <CODEC_IO_Write>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	4413      	add	r3, r2
 800977a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800977c:	89fb      	ldrh	r3, [r7, #14]
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2201      	movs	r2, #1
 8009782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009786:	4618      	mov	r0, r3
 8009788:	f000 ffb4 	bl	800a6f4 <CODEC_IO_Write>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8009796:	8b3b      	ldrh	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 817b 	beq.w	8009a94 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800979e:	8b3b      	ldrh	r3, [r7, #24]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d157      	bne.n	8009854 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097ac:	212d      	movs	r1, #45	@ 0x2d
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 ffa0 	bl	800a6f4 <CODEC_IO_Write>
 80097b4:	4603      	mov	r3, r0
 80097b6:	461a      	mov	r2, r3
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80097be:	89fb      	ldrh	r3, [r7, #14]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097c6:	212e      	movs	r1, #46	@ 0x2e
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 ff93 	bl	800a6f4 <CODEC_IO_Write>
 80097ce:	4603      	mov	r3, r0
 80097d0:	461a      	mov	r2, r3
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80097d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <wm8994_Init+0x9c8>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01b      	beq.n	8009818 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80097e0:	89fb      	ldrh	r3, [r7, #14]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80097e8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 ff81 	bl	800a6f4 <CODEC_IO_Write>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80097fc:	4b05      	ldr	r3, [pc, #20]	@ (8009814 <wm8994_Init+0x9c8>)
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8009802:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009806:	f7fc fd3d 	bl	8006284 <AUDIO_IO_Delay>
 800980a:	e016      	b.n	800983a <wm8994_Init+0x9ee>
 800980c:	200010ac 	.word	0x200010ac
 8009810:	00017700 	.word	0x00017700
 8009814:	2000008c 	.word	0x2000008c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8009818:	89fb      	ldrh	r3, [r7, #14]
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f248 1208 	movw	r2, #33032	@ 0x8108
 8009820:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8009824:	4618      	mov	r0, r3
 8009826:	f000 ff65 	bl	800a6f4 <CODEC_IO_Write>
 800982a:	4603      	mov	r3, r0
 800982c:	461a      	mov	r2, r3
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	4413      	add	r3, r2
 8009832:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8009834:	2032      	movs	r0, #50	@ 0x32
 8009836:	f7fc fd25 	bl	8006284 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800983a:	89fb      	ldrh	r3, [r7, #14]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2200      	movs	r2, #0
 8009840:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009844:	4618      	mov	r0, r3
 8009846:	f000 ff55 	bl	800a6f4 <CODEC_IO_Write>
 800984a:	4603      	mov	r3, r0
 800984c:	461a      	mov	r2, r3
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	4413      	add	r3, r2
 8009852:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8009854:	89fb      	ldrh	r3, [r7, #14]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800985c:	2103      	movs	r1, #3
 800985e:	4618      	mov	r0, r3
 8009860:	f000 ff48 	bl	800a6f4 <CODEC_IO_Write>
 8009864:	4603      	mov	r3, r0
 8009866:	461a      	mov	r2, r3
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800986e:	89fb      	ldrh	r3, [r7, #14]
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2200      	movs	r2, #0
 8009874:	2122      	movs	r1, #34	@ 0x22
 8009876:	4618      	mov	r0, r3
 8009878:	f000 ff3c 	bl	800a6f4 <CODEC_IO_Write>
 800987c:	4603      	mov	r3, r0
 800987e:	461a      	mov	r2, r3
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	4413      	add	r3, r2
 8009884:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8009886:	89fb      	ldrh	r3, [r7, #14]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2200      	movs	r2, #0
 800988c:	2123      	movs	r1, #35	@ 0x23
 800988e:	4618      	mov	r0, r3
 8009890:	f000 ff30 	bl	800a6f4 <CODEC_IO_Write>
 8009894:	4603      	mov	r3, r0
 8009896:	461a      	mov	r2, r3
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	4413      	add	r3, r2
 800989c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800989e:	89fb      	ldrh	r3, [r7, #14]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80098a6:	2136      	movs	r1, #54	@ 0x36
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 ff23 	bl	800a6f4 <CODEC_IO_Write>
 80098ae:	4603      	mov	r3, r0
 80098b0:	461a      	mov	r2, r3
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80098b8:	89fb      	ldrh	r3, [r7, #14]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f243 0203 	movw	r2, #12291	@ 0x3003
 80098c0:	2101      	movs	r1, #1
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 ff16 	bl	800a6f4 <CODEC_IO_Write>
 80098c8:	4603      	mov	r3, r0
 80098ca:	461a      	mov	r2, r3
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	4413      	add	r3, r2
 80098d0:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80098d2:	8afb      	ldrh	r3, [r7, #22]
 80098d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098d8:	d10d      	bne.n	80098f6 <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f240 2205 	movw	r2, #517	@ 0x205
 80098e2:	2151      	movs	r1, #81	@ 0x51
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 ff05 	bl	800a6f4 <CODEC_IO_Write>
 80098ea:	4603      	mov	r3, r0
 80098ec:	461a      	mov	r2, r3
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	e00b      	b.n	800990e <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80098f6:	89fb      	ldrh	r3, [r7, #14]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2205      	movs	r2, #5
 80098fc:	2151      	movs	r1, #81	@ 0x51
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fef8 	bl	800a6f4 <CODEC_IO_Write>
 8009904:	4603      	mov	r3, r0
 8009906:	461a      	mov	r2, r3
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	4413      	add	r3, r2
 800990c:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800990e:	8b7b      	ldrh	r3, [r7, #26]
 8009910:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8009914:	f043 0303 	orr.w	r3, r3, #3
 8009918:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800991a:	89fb      	ldrh	r3, [r7, #14]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	8b7a      	ldrh	r2, [r7, #26]
 8009920:	2101      	movs	r1, #1
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fee6 	bl	800a6f4 <CODEC_IO_Write>
 8009928:	4603      	mov	r3, r0
 800992a:	461a      	mov	r2, r3
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	4413      	add	r3, r2
 8009930:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8009932:	89fb      	ldrh	r3, [r7, #14]
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2222      	movs	r2, #34	@ 0x22
 8009938:	2160      	movs	r1, #96	@ 0x60
 800993a:	4618      	mov	r0, r3
 800993c:	f000 feda 	bl	800a6f4 <CODEC_IO_Write>
 8009940:	4603      	mov	r3, r0
 8009942:	461a      	mov	r2, r3
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	4413      	add	r3, r2
 8009948:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800994a:	89fb      	ldrh	r3, [r7, #14]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8009952:	214c      	movs	r1, #76	@ 0x4c
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fecd 	bl	800a6f4 <CODEC_IO_Write>
 800995a:	4603      	mov	r3, r0
 800995c:	461a      	mov	r2, r3
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4413      	add	r3, r2
 8009962:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8009964:	200f      	movs	r0, #15
 8009966:	f7fc fc8d 	bl	8006284 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800996a:	89fb      	ldrh	r3, [r7, #14]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2201      	movs	r2, #1
 8009970:	212d      	movs	r1, #45	@ 0x2d
 8009972:	4618      	mov	r0, r3
 8009974:	f000 febe 	bl	800a6f4 <CODEC_IO_Write>
 8009978:	4603      	mov	r3, r0
 800997a:	461a      	mov	r2, r3
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4413      	add	r3, r2
 8009980:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8009982:	89fb      	ldrh	r3, [r7, #14]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2201      	movs	r2, #1
 8009988:	212e      	movs	r1, #46	@ 0x2e
 800998a:	4618      	mov	r0, r3
 800998c:	f000 feb2 	bl	800a6f4 <CODEC_IO_Write>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	4413      	add	r3, r2
 8009998:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800999a:	89fb      	ldrh	r3, [r7, #14]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80099a2:	2103      	movs	r1, #3
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fea5 	bl	800a6f4 <CODEC_IO_Write>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80099b4:	89fb      	ldrh	r3, [r7, #14]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2233      	movs	r2, #51	@ 0x33
 80099ba:	2154      	movs	r1, #84	@ 0x54
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fe99 	bl	800a6f4 <CODEC_IO_Write>
 80099c2:	4603      	mov	r3, r0
 80099c4:	461a      	mov	r2, r3
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	4413      	add	r3, r2
 80099ca:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80099cc:	f240 1001 	movw	r0, #257	@ 0x101
 80099d0:	f7fc fc58 	bl	8006284 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80099d4:	89fb      	ldrh	r3, [r7, #14]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	22ee      	movs	r2, #238	@ 0xee
 80099da:	2160      	movs	r1, #96	@ 0x60
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 fe89 	bl	800a6f4 <CODEC_IO_Write>
 80099e2:	4603      	mov	r3, r0
 80099e4:	461a      	mov	r2, r3
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80099ec:	89fb      	ldrh	r3, [r7, #14]
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	22c0      	movs	r2, #192	@ 0xc0
 80099f2:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fe7c 	bl	800a6f4 <CODEC_IO_Write>
 80099fc:	4603      	mov	r3, r0
 80099fe:	461a      	mov	r2, r3
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	4413      	add	r3, r2
 8009a04:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8009a06:	89fb      	ldrh	r3, [r7, #14]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	22c0      	movs	r2, #192	@ 0xc0
 8009a0c:	f240 6111 	movw	r1, #1553	@ 0x611
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 fe6f 	bl	800a6f4 <CODEC_IO_Write>
 8009a16:	4603      	mov	r3, r0
 8009a18:	461a      	mov	r2, r3
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8009a20:	89fb      	ldrh	r3, [r7, #14]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2210      	movs	r2, #16
 8009a26:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fe62 	bl	800a6f4 <CODEC_IO_Write>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	4413      	add	r3, r2
 8009a38:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8009a3a:	89fb      	ldrh	r3, [r7, #14]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	22c0      	movs	r2, #192	@ 0xc0
 8009a40:	f240 6112 	movw	r1, #1554	@ 0x612
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fe55 	bl	800a6f4 <CODEC_IO_Write>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	4413      	add	r3, r2
 8009a52:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8009a54:	89fb      	ldrh	r3, [r7, #14]
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	22c0      	movs	r2, #192	@ 0xc0
 8009a5a:	f240 6113 	movw	r1, #1555	@ 0x613
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fe48 	bl	800a6f4 <CODEC_IO_Write>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8009a6e:	89fb      	ldrh	r3, [r7, #14]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2210      	movs	r2, #16
 8009a74:	f240 4122 	movw	r1, #1058	@ 0x422
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fe3b 	bl	800a6f4 <CODEC_IO_Write>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	4413      	add	r3, r2
 8009a86:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8009a88:	7afa      	ldrb	r2, [r7, #11]
 8009a8a:	89fb      	ldrh	r3, [r7, #14]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f984 	bl	8009d9c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8009a94:	8afb      	ldrh	r3, [r7, #22]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 80a6 	beq.w	8009be8 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8009a9c:	8afb      	ldrh	r3, [r7, #22]
 8009a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aa2:	d003      	beq.n	8009aac <wm8994_Init+0xc60>
 8009aa4:	8afb      	ldrh	r3, [r7, #22]
 8009aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aaa:	d12b      	bne.n	8009b04 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8009aac:	8b7b      	ldrh	r3, [r7, #26]
 8009aae:	f043 0313 	orr.w	r3, r3, #19
 8009ab2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8009ab4:	89fb      	ldrh	r3, [r7, #14]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	8b7a      	ldrh	r2, [r7, #26]
 8009aba:	2101      	movs	r1, #1
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fe19 	bl	800a6f4 <CODEC_IO_Write>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	4413      	add	r3, r2
 8009aca:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8009acc:	89fb      	ldrh	r3, [r7, #14]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fe0c 	bl	800a6f4 <CODEC_IO_Write>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8009ae6:	89fb      	ldrh	r3, [r7, #14]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8009aee:	f240 4111 	movw	r1, #1041	@ 0x411
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fdfe 	bl	800a6f4 <CODEC_IO_Write>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	4413      	add	r3, r2
 8009b00:	61fb      	str	r3, [r7, #28]
 8009b02:	e06b      	b.n	8009bdc <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8009b04:	8afb      	ldrh	r3, [r7, #22]
 8009b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b0a:	d139      	bne.n	8009b80 <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8009b0c:	8b7b      	ldrh	r3, [r7, #26]
 8009b0e:	f043 0313 	orr.w	r3, r3, #19
 8009b12:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8009b14:	89fb      	ldrh	r3, [r7, #14]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	8b7a      	ldrh	r2, [r7, #26]
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fde9 	bl	800a6f4 <CODEC_IO_Write>
 8009b22:	4603      	mov	r3, r0
 8009b24:	461a      	mov	r2, r3
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8009b2c:	89fb      	ldrh	r3, [r7, #14]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2202      	movs	r2, #2
 8009b32:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fddc 	bl	800a6f4 <CODEC_IO_Write>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	461a      	mov	r2, r3
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8009b46:	89fb      	ldrh	r3, [r7, #14]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009b4e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fdce 	bl	800a6f4 <CODEC_IO_Write>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	4413      	add	r3, r2
 8009b60:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8009b62:	89fb      	ldrh	r3, [r7, #14]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009b6a:	f240 4111 	movw	r1, #1041	@ 0x411
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fdc0 	bl	800a6f4 <CODEC_IO_Write>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	61fb      	str	r3, [r7, #28]
 8009b7e:	e02d      	b.n	8009bdc <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8009b80:	8afb      	ldrh	r3, [r7, #22]
 8009b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b86:	d003      	beq.n	8009b90 <wm8994_Init+0xd44>
 8009b88:	8afb      	ldrh	r3, [r7, #22]
 8009b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b8e:	d125      	bne.n	8009bdc <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8009b90:	89fb      	ldrh	r3, [r7, #14]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	228b      	movs	r2, #139	@ 0x8b
 8009b96:	2118      	movs	r1, #24
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fdab 	bl	800a6f4 <CODEC_IO_Write>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8009ba8:	89fb      	ldrh	r3, [r7, #14]
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	228b      	movs	r2, #139	@ 0x8b
 8009bae:	211a      	movs	r1, #26
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fd9f 	bl	800a6f4 <CODEC_IO_Write>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8009bc0:	89fb      	ldrh	r3, [r7, #14]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009bc8:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fd91 	bl	800a6f4 <CODEC_IO_Write>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	4413      	add	r3, r2
 8009bda:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8009bdc:	7afa      	ldrb	r2, [r7, #11]
 8009bde:	89fb      	ldrh	r3, [r7, #14]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 f8da 	bl	8009d9c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8009be8:	69fb      	ldr	r3, [r7, #28]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop

08009bf4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8009bf8:	f7fc fae6 	bl	80061c8 <AUDIO_IO_DeInit>
}
 8009bfc:	bf00      	nop
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8009c0a:	f7fc fad3 	bl	80061b4 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8009c0e:	88fb      	ldrh	r3, [r7, #6]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2100      	movs	r1, #0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fc fb09 	bl	800622c <AUDIO_IO_Read>
 8009c1a:	4603      	mov	r3, r0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	6039      	str	r1, [r7, #0]
 8009c2e:	80fb      	strh	r3, [r7, #6]
 8009c30:	4613      	mov	r3, r2
 8009c32:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 faf3 	bl	800a228 <wm8994_SetMute>
 8009c42:	4602      	mov	r2, r0
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009c62:	88fb      	ldrh	r3, [r7, #6]
 8009c64:	2101      	movs	r1, #1
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fade 	bl	800a228 <wm8994_SetMute>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2201      	movs	r2, #1
 8009c7a:	2102      	movs	r1, #2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fd39 	bl	800a6f4 <CODEC_IO_Write>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461a      	mov	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fabd 	bl	800a228 <wm8994_SetMute>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	6039      	str	r1, [r7, #0]
 8009cca:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8009cd0:	4b31      	ldr	r3, [pc, #196]	@ (8009d98 <wm8994_Stop+0xd8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d05a      	beq.n	8009d8e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	2101      	movs	r1, #1
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 faa3 	bl	800a228 <wm8994_SetMute>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d04e      	beq.n	8009d8e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cf8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fcf9 	bl	800a6f4 <CODEC_IO_Write>
 8009d02:	4603      	mov	r3, r0
 8009d04:	461a      	mov	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4413      	add	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d14:	f240 4122 	movw	r1, #1058	@ 0x422
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 fceb 	bl	800a6f4 <CODEC_IO_Write>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	461a      	mov	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4413      	add	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	212d      	movs	r1, #45	@ 0x2d
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fcdf 	bl	800a6f4 <CODEC_IO_Write>
 8009d36:	4603      	mov	r3, r0
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2200      	movs	r2, #0
 8009d46:	212e      	movs	r1, #46	@ 0x2e
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fcd3 	bl	800a6f4 <CODEC_IO_Write>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	461a      	mov	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2105      	movs	r1, #5
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fcc7 	bl	800a6f4 <CODEC_IO_Write>
 8009d66:	4603      	mov	r3, r0
 8009d68:	461a      	mov	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2200      	movs	r2, #0
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fcbb 	bl	800a6f4 <CODEC_IO_Write>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	461a      	mov	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8009d88:	4b03      	ldr	r3, [pc, #12]	@ (8009d98 <wm8994_Stop+0xd8>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	200010a8 	.word	0x200010a8

08009d9c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	460a      	mov	r2, r1
 8009da6:	80fb      	strh	r3, [r7, #6]
 8009da8:	4613      	mov	r3, r2
 8009daa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8009db0:	797b      	ldrb	r3, [r7, #5]
 8009db2:	2b64      	cmp	r3, #100	@ 0x64
 8009db4:	d80b      	bhi.n	8009dce <wm8994_SetVolume+0x32>
 8009db6:	797a      	ldrb	r2, [r7, #5]
 8009db8:	4613      	mov	r3, r2
 8009dba:	019b      	lsls	r3, r3, #6
 8009dbc:	1a9b      	subs	r3, r3, r2
 8009dbe:	4a86      	ldr	r2, [pc, #536]	@ (8009fd8 <wm8994_SetVolume+0x23c>)
 8009dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8009dc4:	1152      	asrs	r2, r2, #5
 8009dc6:	17db      	asrs	r3, r3, #31
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	e000      	b.n	8009dd0 <wm8994_SetVolume+0x34>
 8009dce:	2364      	movs	r3, #100	@ 0x64
 8009dd0:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8009dd2:	4b82      	ldr	r3, [pc, #520]	@ (8009fdc <wm8994_SetVolume+0x240>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 809b 	beq.w	8009f12 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8009ddc:	7afb      	ldrb	r3, [r7, #11]
 8009dde:	2b3e      	cmp	r3, #62	@ 0x3e
 8009de0:	d93d      	bls.n	8009e5e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	2100      	movs	r1, #0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fa1e 	bl	800a228 <wm8994_SetMute>
 8009dec:	4602      	mov	r2, r0
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	4413      	add	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8009df4:	88fb      	ldrh	r3, [r7, #6]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f240 127f 	movw	r2, #383	@ 0x17f
 8009dfc:	211c      	movs	r1, #28
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fc78 	bl	800a6f4 <CODEC_IO_Write>
 8009e04:	4603      	mov	r3, r0
 8009e06:	461a      	mov	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8009e0e:	88fb      	ldrh	r3, [r7, #6]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	f240 127f 	movw	r2, #383	@ 0x17f
 8009e16:	211d      	movs	r1, #29
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fc6b 	bl	800a6f4 <CODEC_IO_Write>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	461a      	mov	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8009e28:	88fb      	ldrh	r3, [r7, #6]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	f240 127f 	movw	r2, #383	@ 0x17f
 8009e30:	2126      	movs	r1, #38	@ 0x26
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fc5e 	bl	800a6f4 <CODEC_IO_Write>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8009e42:	88fb      	ldrh	r3, [r7, #6]
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	f240 127f 	movw	r2, #383	@ 0x17f
 8009e4a:	2127      	movs	r1, #39	@ 0x27
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fc51 	bl	800a6f4 <CODEC_IO_Write>
 8009e52:	4603      	mov	r3, r0
 8009e54:	461a      	mov	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4413      	add	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	e059      	b.n	8009f12 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8009e5e:	797b      	ldrb	r3, [r7, #5]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	2101      	movs	r1, #1
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f9dd 	bl	800a228 <wm8994_SetMute>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	e04c      	b.n	8009f12 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f9d3 	bl	800a228 <wm8994_SetMute>
 8009e82:	4602      	mov	r2, r0
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4413      	add	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	b2d8      	uxtb	r0, r3
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	b21b      	sxth	r3, r3
 8009e92:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	211c      	movs	r1, #28
 8009e9e:	f000 fc29 	bl	800a6f4 <CODEC_IO_Write>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8009eac:	88fb      	ldrh	r3, [r7, #6]
 8009eae:	b2d8      	uxtb	r0, r3
 8009eb0:	7afb      	ldrb	r3, [r7, #11]
 8009eb2:	b21b      	sxth	r3, r3
 8009eb4:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009eb8:	b21b      	sxth	r3, r3
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	211d      	movs	r1, #29
 8009ec0:	f000 fc18 	bl	800a6f4 <CODEC_IO_Write>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4413      	add	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	b2d8      	uxtb	r0, r3
 8009ed2:	7afb      	ldrb	r3, [r7, #11]
 8009ed4:	b21b      	sxth	r3, r3
 8009ed6:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009eda:	b21b      	sxth	r3, r3
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	2126      	movs	r1, #38	@ 0x26
 8009ee2:	f000 fc07 	bl	800a6f4 <CODEC_IO_Write>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4413      	add	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8009ef0:	88fb      	ldrh	r3, [r7, #6]
 8009ef2:	b2d8      	uxtb	r0, r3
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	b21b      	sxth	r3, r3
 8009ef8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009efc:	b21b      	sxth	r3, r3
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	461a      	mov	r2, r3
 8009f02:	2127      	movs	r1, #39	@ 0x27
 8009f04:	f000 fbf6 	bl	800a6f4 <CODEC_IO_Write>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8009f12:	4b33      	ldr	r3, [pc, #204]	@ (8009fe0 <wm8994_SetVolume+0x244>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d059      	beq.n	8009fce <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8009f1a:	797b      	ldrb	r3, [r7, #5]
 8009f1c:	2b63      	cmp	r3, #99	@ 0x63
 8009f1e:	d80c      	bhi.n	8009f3a <wm8994_SetVolume+0x19e>
 8009f20:	797a      	ldrb	r2, [r7, #5]
 8009f22:	4613      	mov	r3, r2
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009fd8 <wm8994_SetVolume+0x23c>)
 8009f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8009f30:	1152      	asrs	r2, r2, #5
 8009f32:	17db      	asrs	r3, r3, #31
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	e000      	b.n	8009f3c <wm8994_SetVolume+0x1a0>
 8009f3a:	23ef      	movs	r3, #239	@ 0xef
 8009f3c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	b2d8      	uxtb	r0, r3
 8009f42:	7afb      	ldrb	r3, [r7, #11]
 8009f44:	b21b      	sxth	r3, r3
 8009f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f4a:	b21b      	sxth	r3, r3
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009f54:	f000 fbce 	bl	800a6f4 <CODEC_IO_Write>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	b2d8      	uxtb	r0, r3
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	b21b      	sxth	r3, r3
 8009f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f6e:	b21b      	sxth	r3, r3
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	461a      	mov	r2, r3
 8009f74:	f240 4101 	movw	r1, #1025	@ 0x401
 8009f78:	f000 fbbc 	bl	800a6f4 <CODEC_IO_Write>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	b2d8      	uxtb	r0, r3
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	b21b      	sxth	r3, r3
 8009f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	461a      	mov	r2, r3
 8009f98:	f240 4104 	movw	r1, #1028	@ 0x404
 8009f9c:	f000 fbaa 	bl	800a6f4 <CODEC_IO_Write>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8009faa:	88fb      	ldrh	r3, [r7, #6]
 8009fac:	b2d8      	uxtb	r0, r3
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	b21b      	sxth	r3, r3
 8009fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fb6:	b21b      	sxth	r3, r3
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f240 4105 	movw	r1, #1029	@ 0x405
 8009fc0:	f000 fb98 	bl	800a6f4 <CODEC_IO_Write>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8009fce:	68fb      	ldr	r3, [r7, #12]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	51eb851f 	.word	0x51eb851f
 8009fdc:	200010a8 	.word	0x200010a8
 8009fe0:	200010ac 	.word	0x200010ac

08009fe4 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	460a      	mov	r2, r1
 8009fee:	80fb      	strh	r3, [r7, #6]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8009ff8:	797b      	ldrb	r3, [r7, #5]
 8009ffa:	2b64      	cmp	r3, #100	@ 0x64
 8009ffc:	d80b      	bhi.n	800a016 <wm8994_SetVolumeOut+0x32>
 8009ffe:	797a      	ldrb	r2, [r7, #5]
 800a000:	4613      	mov	r3, r2
 800a002:	019b      	lsls	r3, r3, #6
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	4a57      	ldr	r2, [pc, #348]	@ (800a164 <wm8994_SetVolumeOut+0x180>)
 800a008:	fb82 1203 	smull	r1, r2, r2, r3
 800a00c:	1152      	asrs	r2, r2, #5
 800a00e:	17db      	asrs	r3, r3, #31
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	b2db      	uxtb	r3, r3
 800a014:	e000      	b.n	800a018 <wm8994_SetVolumeOut+0x34>
 800a016:	2364      	movs	r3, #100	@ 0x64
 800a018:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 800a01a:	4b53      	ldr	r3, [pc, #332]	@ (800a168 <wm8994_SetVolumeOut+0x184>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 809b 	beq.w	800a15a <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 800a024:	7afb      	ldrb	r3, [r7, #11]
 800a026:	2b3e      	cmp	r3, #62	@ 0x3e
 800a028:	d93d      	bls.n	800a0a6 <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800a02a:	88fb      	ldrh	r3, [r7, #6]
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f8fa 	bl	800a228 <wm8994_SetMute>
 800a034:	4602      	mov	r2, r0
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	4413      	add	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f240 127f 	movw	r2, #383	@ 0x17f
 800a044:	211c      	movs	r1, #28
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fb54 	bl	800a6f4 <CODEC_IO_Write>
 800a04c:	4603      	mov	r3, r0
 800a04e:	461a      	mov	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800a056:	88fb      	ldrh	r3, [r7, #6]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	f240 127f 	movw	r2, #383	@ 0x17f
 800a05e:	211d      	movs	r1, #29
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fb47 	bl	800a6f4 <CODEC_IO_Write>
 800a066:	4603      	mov	r3, r0
 800a068:	461a      	mov	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4413      	add	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f240 127f 	movw	r2, #383	@ 0x17f
 800a078:	2126      	movs	r1, #38	@ 0x26
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fb3a 	bl	800a6f4 <CODEC_IO_Write>
 800a080:	4603      	mov	r3, r0
 800a082:	461a      	mov	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f240 127f 	movw	r2, #383	@ 0x17f
 800a092:	2127      	movs	r1, #39	@ 0x27
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fb2d 	bl	800a6f4 <CODEC_IO_Write>
 800a09a:	4603      	mov	r3, r0
 800a09c:	461a      	mov	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e059      	b.n	800a15a <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 800a0a6:	797b      	ldrb	r3, [r7, #5]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d109      	bne.n	800a0c0 <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f8b9 	bl	800a228 <wm8994_SetMute>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	e04c      	b.n	800a15a <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f8af 	bl	800a228 <wm8994_SetMute>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	b2d8      	uxtb	r0, r3
 800a0d6:	7afb      	ldrb	r3, [r7, #11]
 800a0d8:	b21b      	sxth	r3, r3
 800a0da:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a0de:	b21b      	sxth	r3, r3
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	211c      	movs	r1, #28
 800a0e6:	f000 fb05 	bl	800a6f4 <CODEC_IO_Write>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800a0f4:	88fb      	ldrh	r3, [r7, #6]
 800a0f6:	b2d8      	uxtb	r0, r3
 800a0f8:	7afb      	ldrb	r3, [r7, #11]
 800a0fa:	b21b      	sxth	r3, r3
 800a0fc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a100:	b21b      	sxth	r3, r3
 800a102:	b29b      	uxth	r3, r3
 800a104:	461a      	mov	r2, r3
 800a106:	211d      	movs	r1, #29
 800a108:	f000 faf4 	bl	800a6f4 <CODEC_IO_Write>
 800a10c:	4603      	mov	r3, r0
 800a10e:	461a      	mov	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	b2d8      	uxtb	r0, r3
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	b21b      	sxth	r3, r3
 800a11e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a122:	b21b      	sxth	r3, r3
 800a124:	b29b      	uxth	r3, r3
 800a126:	461a      	mov	r2, r3
 800a128:	2126      	movs	r1, #38	@ 0x26
 800a12a:	f000 fae3 	bl	800a6f4 <CODEC_IO_Write>
 800a12e:	4603      	mov	r3, r0
 800a130:	461a      	mov	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	b2d8      	uxtb	r0, r3
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	b21b      	sxth	r3, r3
 800a140:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800a144:	b21b      	sxth	r3, r3
 800a146:	b29b      	uxth	r3, r3
 800a148:	461a      	mov	r2, r3
 800a14a:	2127      	movs	r1, #39	@ 0x27
 800a14c:	f000 fad2 	bl	800a6f4 <CODEC_IO_Write>
 800a150:	4603      	mov	r3, r0
 800a152:	461a      	mov	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	4413      	add	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 800a15a:	68fb      	ldr	r3, [r7, #12]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	51eb851f 	.word	0x51eb851f
 800a168:	200010a8 	.word	0x200010a8

0800a16c <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	460a      	mov	r2, r1
 800a176:	80fb      	strh	r3, [r7, #6]
 800a178:	4613      	mov	r3, r2
 800a17a:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 800a180:	4b28      	ldr	r3, [pc, #160]	@ (800a224 <wm8994_SetVolumeIn+0xb8>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d047      	beq.n	800a218 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	b2d8      	uxtb	r0, r3
 800a18c:	797b      	ldrb	r3, [r7, #5]
 800a18e:	b21b      	sxth	r3, r3
 800a190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a194:	b21b      	sxth	r3, r3
 800a196:	b29b      	uxth	r3, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a19e:	f000 faa9 	bl	800a6f4 <CODEC_IO_Write>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 800a1ac:	88fb      	ldrh	r3, [r7, #6]
 800a1ae:	b2d8      	uxtb	r0, r3
 800a1b0:	797b      	ldrb	r3, [r7, #5]
 800a1b2:	b21b      	sxth	r3, r3
 800a1b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1b8:	b21b      	sxth	r3, r3
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	f240 4101 	movw	r1, #1025	@ 0x401
 800a1c2:	f000 fa97 	bl	800a6f4 <CODEC_IO_Write>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 800a1d0:	88fb      	ldrh	r3, [r7, #6]
 800a1d2:	b2d8      	uxtb	r0, r3
 800a1d4:	797b      	ldrb	r3, [r7, #5]
 800a1d6:	b21b      	sxth	r3, r3
 800a1d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1dc:	b21b      	sxth	r3, r3
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	f240 4104 	movw	r1, #1028	@ 0x404
 800a1e6:	f000 fa85 	bl	800a6f4 <CODEC_IO_Write>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 800a1f4:	88fb      	ldrh	r3, [r7, #6]
 800a1f6:	b2d8      	uxtb	r0, r3
 800a1f8:	797b      	ldrb	r3, [r7, #5]
 800a1fa:	b21b      	sxth	r3, r3
 800a1fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a200:	b21b      	sxth	r3, r3
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	f240 4105 	movw	r1, #1029	@ 0x405
 800a20a:	f000 fa73 	bl	800a6f4 <CODEC_IO_Write>
 800a20e:	4603      	mov	r3, r0
 800a210:	461a      	mov	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4413      	add	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	200010ac 	.word	0x200010ac

0800a228 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	6039      	str	r1, [r7, #0]
 800a232:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800a238:	4b21      	ldr	r3, [pc, #132]	@ (800a2c0 <wm8994_SetMute+0x98>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d039      	beq.n	800a2b4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d11c      	bne.n	800a280 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a24e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fa4e 	bl	800a6f4 <CODEC_IO_Write>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a26a:	f240 4122 	movw	r1, #1058	@ 0x422
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fa40 	bl	800a6f4 <CODEC_IO_Write>
 800a274:	4603      	mov	r3, r0
 800a276:	461a      	mov	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	e019      	b.n	800a2b4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2210      	movs	r2, #16
 800a286:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fa32 	bl	800a6f4 <CODEC_IO_Write>
 800a290:	4603      	mov	r3, r0
 800a292:	461a      	mov	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	4413      	add	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2210      	movs	r2, #16
 800a2a0:	f240 4122 	movw	r1, #1058	@ 0x422
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 fa25 	bl	800a6f4 <CODEC_IO_Write>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	200010a8 	.word	0x200010a8

0800a2c4 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	460a      	mov	r2, r1
 800a2ce:	80fb      	strh	r3, [r7, #6]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800a2d8:	797b      	ldrb	r3, [r7, #5]
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	f000 808c 	beq.w	800a3f8 <wm8994_SetOutputMode+0x134>
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	f300 80cb 	bgt.w	800a47c <wm8994_SetOutputMode+0x1b8>
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d002      	beq.n	800a2f0 <wm8994_SetOutputMode+0x2c>
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d042      	beq.n	800a374 <wm8994_SetOutputMode+0xb0>
 800a2ee:	e0c5      	b.n	800a47c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800a2f0:	88fb      	ldrh	r3, [r7, #6]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800a2f8:	2105      	movs	r1, #5
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f9fa 	bl	800a6f4 <CODEC_IO_Write>
 800a300:	4603      	mov	r3, r0
 800a302:	461a      	mov	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4413      	add	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800a30a:	88fb      	ldrh	r3, [r7, #6]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2200      	movs	r2, #0
 800a310:	f240 6101 	movw	r1, #1537	@ 0x601
 800a314:	4618      	mov	r0, r3
 800a316:	f000 f9ed 	bl	800a6f4 <CODEC_IO_Write>
 800a31a:	4603      	mov	r3, r0
 800a31c:	461a      	mov	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	4413      	add	r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2200      	movs	r2, #0
 800a32a:	f240 6102 	movw	r1, #1538	@ 0x602
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 f9e0 	bl	800a6f4 <CODEC_IO_Write>
 800a334:	4603      	mov	r3, r0
 800a336:	461a      	mov	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4413      	add	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2202      	movs	r2, #2
 800a344:	f240 6104 	movw	r1, #1540	@ 0x604
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 f9d3 	bl	800a6f4 <CODEC_IO_Write>
 800a34e:	4603      	mov	r3, r0
 800a350:	461a      	mov	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4413      	add	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800a358:	88fb      	ldrh	r3, [r7, #6]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2202      	movs	r2, #2
 800a35e:	f240 6105 	movw	r1, #1541	@ 0x605
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f9c6 	bl	800a6f4 <CODEC_IO_Write>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4413      	add	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]
    break;
 800a372:	e0c5      	b.n	800a500 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f240 3203 	movw	r2, #771	@ 0x303
 800a37c:	2105      	movs	r1, #5
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f9b8 	bl	800a6f4 <CODEC_IO_Write>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4413      	add	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2201      	movs	r2, #1
 800a394:	f240 6101 	movw	r1, #1537	@ 0x601
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 f9ab 	bl	800a6f4 <CODEC_IO_Write>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f240 6102 	movw	r1, #1538	@ 0x602
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f99e 	bl	800a6f4 <CODEC_IO_Write>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	4413      	add	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f240 6104 	movw	r1, #1540	@ 0x604
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f991 	bl	800a6f4 <CODEC_IO_Write>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	4413      	add	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f240 6105 	movw	r1, #1541	@ 0x605
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f984 	bl	800a6f4 <CODEC_IO_Write>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	60fb      	str	r3, [r7, #12]
    break;
 800a3f6:	e083      	b.n	800a500 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800a400:	2105      	movs	r1, #5
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f976 	bl	800a6f4 <CODEC_IO_Write>
 800a408:	4603      	mov	r3, r0
 800a40a:	461a      	mov	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4413      	add	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a412:	88fb      	ldrh	r3, [r7, #6]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2201      	movs	r2, #1
 800a418:	f240 6101 	movw	r1, #1537	@ 0x601
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f969 	bl	800a6f4 <CODEC_IO_Write>
 800a422:	4603      	mov	r3, r0
 800a424:	461a      	mov	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	4413      	add	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2201      	movs	r2, #1
 800a432:	f240 6102 	movw	r1, #1538	@ 0x602
 800a436:	4618      	mov	r0, r3
 800a438:	f000 f95c 	bl	800a6f4 <CODEC_IO_Write>
 800a43c:	4603      	mov	r3, r0
 800a43e:	461a      	mov	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4413      	add	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800a446:	88fb      	ldrh	r3, [r7, #6]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2202      	movs	r2, #2
 800a44c:	f240 6104 	movw	r1, #1540	@ 0x604
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f94f 	bl	800a6f4 <CODEC_IO_Write>
 800a456:	4603      	mov	r3, r0
 800a458:	461a      	mov	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	4413      	add	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800a460:	88fb      	ldrh	r3, [r7, #6]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2202      	movs	r2, #2
 800a466:	f240 6105 	movw	r1, #1541	@ 0x605
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f942 	bl	800a6f4 <CODEC_IO_Write>
 800a470:	4603      	mov	r3, r0
 800a472:	461a      	mov	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]
    break;
 800a47a:	e041      	b.n	800a500 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800a47c:	88fb      	ldrh	r3, [r7, #6]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f240 3203 	movw	r2, #771	@ 0x303
 800a484:	2105      	movs	r1, #5
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f934 	bl	800a6f4 <CODEC_IO_Write>
 800a48c:	4603      	mov	r3, r0
 800a48e:	461a      	mov	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4413      	add	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800a496:	88fb      	ldrh	r3, [r7, #6]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2201      	movs	r2, #1
 800a49c:	f240 6101 	movw	r1, #1537	@ 0x601
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 f927 	bl	800a6f4 <CODEC_IO_Write>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f240 6102 	movw	r1, #1538	@ 0x602
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 f91a 	bl	800a6f4 <CODEC_IO_Write>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f240 6104 	movw	r1, #1540	@ 0x604
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 f90d 	bl	800a6f4 <CODEC_IO_Write>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	461a      	mov	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800a4e4:	88fb      	ldrh	r3, [r7, #6]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f240 6105 	movw	r1, #1541	@ 0x605
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 f900 	bl	800a6f4 <CODEC_IO_Write>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
    break;    
 800a4fe:	bf00      	nop
  }  
  return counter;
 800a500:	68fb      	ldr	r3, [r7, #12]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	6039      	str	r1, [r7, #0]
 800a516:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	4a64      	ldr	r2, [pc, #400]	@ (800a6b0 <wm8994_SetFrequency+0x1a4>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d079      	beq.n	800a618 <wm8994_SetFrequency+0x10c>
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	4a62      	ldr	r2, [pc, #392]	@ (800a6b0 <wm8994_SetFrequency+0x1a4>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	f200 80ad 	bhi.w	800a688 <wm8994_SetFrequency+0x17c>
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800a534:	4293      	cmp	r3, r2
 800a536:	d061      	beq.n	800a5fc <wm8994_SetFrequency+0xf0>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800a53e:	4293      	cmp	r3, r2
 800a540:	f200 80a2 	bhi.w	800a688 <wm8994_SetFrequency+0x17c>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800a54a:	4293      	cmp	r3, r2
 800a54c:	f000 808e 	beq.w	800a66c <wm8994_SetFrequency+0x160>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800a556:	4293      	cmp	r3, r2
 800a558:	f200 8096 	bhi.w	800a688 <wm8994_SetFrequency+0x17c>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800a562:	d03d      	beq.n	800a5e0 <wm8994_SetFrequency+0xd4>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800a56a:	f200 808d 	bhi.w	800a688 <wm8994_SetFrequency+0x17c>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	f245 6222 	movw	r2, #22050	@ 0x5622
 800a574:	4293      	cmp	r3, r2
 800a576:	d06b      	beq.n	800a650 <wm8994_SetFrequency+0x144>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800a57e:	4293      	cmp	r3, r2
 800a580:	f200 8082 	bhi.w	800a688 <wm8994_SetFrequency+0x17c>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800a58a:	d01b      	beq.n	800a5c4 <wm8994_SetFrequency+0xb8>
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800a592:	d879      	bhi.n	800a688 <wm8994_SetFrequency+0x17c>
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800a59a:	d005      	beq.n	800a5a8 <wm8994_SetFrequency+0x9c>
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d046      	beq.n	800a634 <wm8994_SetFrequency+0x128>
 800a5a6:	e06f      	b.n	800a688 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f89e 	bl	800a6f4 <CODEC_IO_Write>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	60fb      	str	r3, [r7, #12]
    break;
 800a5c2:	e06f      	b.n	800a6a4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800a5c4:	88fb      	ldrh	r3, [r7, #6]
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2233      	movs	r2, #51	@ 0x33
 800a5ca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 f890 	bl	800a6f4 <CODEC_IO_Write>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4413      	add	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]
    break;
 800a5de:	e061      	b.n	800a6a4 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800a5e0:	88fb      	ldrh	r3, [r7, #6]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2263      	movs	r2, #99	@ 0x63
 800a5e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f882 	bl	800a6f4 <CODEC_IO_Write>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]
    break;
 800a5fa:	e053      	b.n	800a6a4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2283      	movs	r2, #131	@ 0x83
 800a602:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a606:	4618      	mov	r0, r3
 800a608:	f000 f874 	bl	800a6f4 <CODEC_IO_Write>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461a      	mov	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4413      	add	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]
    break;
 800a616:	e045      	b.n	800a6a4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800a618:	88fb      	ldrh	r3, [r7, #6]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	22a3      	movs	r2, #163	@ 0xa3
 800a61e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f866 	bl	800a6f4 <CODEC_IO_Write>
 800a628:	4603      	mov	r3, r0
 800a62a:	461a      	mov	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]
    break;
 800a632:	e037      	b.n	800a6a4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2213      	movs	r2, #19
 800a63a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f858 	bl	800a6f4 <CODEC_IO_Write>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4413      	add	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]
    break;
 800a64e:	e029      	b.n	800a6a4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800a650:	88fb      	ldrh	r3, [r7, #6]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2243      	movs	r2, #67	@ 0x43
 800a656:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 f84a 	bl	800a6f4 <CODEC_IO_Write>
 800a660:	4603      	mov	r3, r0
 800a662:	461a      	mov	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4413      	add	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
    break;
 800a66a:	e01b      	b.n	800a6a4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800a66c:	88fb      	ldrh	r3, [r7, #6]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2273      	movs	r2, #115	@ 0x73
 800a672:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f83c 	bl	800a6f4 <CODEC_IO_Write>
 800a67c:	4603      	mov	r3, r0
 800a67e:	461a      	mov	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4413      	add	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
    break; 
 800a686:	e00d      	b.n	800a6a4 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800a688:	88fb      	ldrh	r3, [r7, #6]
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2283      	movs	r2, #131	@ 0x83
 800a68e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800a692:	4618      	mov	r0, r3
 800a694:	f000 f82e 	bl	800a6f4 <CODEC_IO_Write>
 800a698:	4603      	mov	r3, r0
 800a69a:	461a      	mov	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
    break; 
 800a6a2:	bf00      	nop
  }
  return counter;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	00017700 	.word	0x00017700

0800a6b4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800a6c2:	88fb      	ldrh	r3, [r7, #6]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 f812 	bl	800a6f4 <CODEC_IO_Write>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800a6d4:	4b05      	ldr	r3, [pc, #20]	@ (800a6ec <wm8994_Reset+0x38>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800a6da:	4b05      	ldr	r3, [pc, #20]	@ (800a6f0 <wm8994_Reset+0x3c>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]

  return counter;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	200010a8 	.word	0x200010a8
 800a6f0:	200010ac 	.word	0x200010ac

0800a6f4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	71fb      	strb	r3, [r7, #7]
 800a6fe:	460b      	mov	r3, r1
 800a700:	80bb      	strh	r3, [r7, #4]
 800a702:	4613      	mov	r3, r2
 800a704:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800a70a:	887a      	ldrh	r2, [r7, #2]
 800a70c:	88b9      	ldrh	r1, [r7, #4]
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	4618      	mov	r0, r3
 800a712:	f7fb fd61 	bl	80061d8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	b2db      	uxtb	r3, r3
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a75c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a728:	480d      	ldr	r0, [pc, #52]	@ (800a760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a72a:	490e      	ldr	r1, [pc, #56]	@ (800a764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a72c:	4a0e      	ldr	r2, [pc, #56]	@ (800a768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a72e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a730:	e002      	b.n	800a738 <LoopCopyDataInit>

0800a732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a736:	3304      	adds	r3, #4

0800a738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a73a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a73c:	d3f9      	bcc.n	800a732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a73e:	4a0b      	ldr	r2, [pc, #44]	@ (800a76c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a740:	4c0b      	ldr	r4, [pc, #44]	@ (800a770 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a742:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a744:	e001      	b.n	800a74a <LoopFillZerobss>

0800a746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a748:	3204      	adds	r2, #4

0800a74a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a74a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a74c:	d3fb      	bcc.n	800a746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a74e:	f7fe fb6b 	bl	8008e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a752:	f00b fdcb 	bl	80162ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a756:	f7f9 fce1 	bl	800411c <main>
  bx  lr    
 800a75a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a75c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800a760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a764:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800a768:	08025880 	.word	0x08025880
  ldr r2, =_sbss
 800a76c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800a770:	20009808 	.word	0x20009808

0800a774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a774:	e7fe      	b.n	800a774 <ADC_IRQHandler>

0800a776 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a77a:	2003      	movs	r0, #3
 800a77c:	f000 fcf3 	bl	800b166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a780:	2000      	movs	r0, #0
 800a782:	f7fe f9af 	bl	8008ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a786:	f7fd fcc7 	bl	8008118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a790:	b480      	push	{r7}
 800a792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a794:	4b06      	ldr	r3, [pc, #24]	@ (800a7b0 <HAL_IncTick+0x20>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	4b06      	ldr	r3, [pc, #24]	@ (800a7b4 <HAL_IncTick+0x24>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4413      	add	r3, r2
 800a7a0:	4a04      	ldr	r2, [pc, #16]	@ (800a7b4 <HAL_IncTick+0x24>)
 800a7a2:	6013      	str	r3, [r2, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20000094 	.word	0x20000094
 800a7b4:	200010b0 	.word	0x200010b0

0800a7b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	af00      	add	r7, sp, #0
  return uwTick;
 800a7bc:	4b03      	ldr	r3, [pc, #12]	@ (800a7cc <HAL_GetTick+0x14>)
 800a7be:	681b      	ldr	r3, [r3, #0]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	200010b0 	.word	0x200010b0

0800a7d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a7d8:	f7ff ffee 	bl	800a7b8 <HAL_GetTick>
 800a7dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e8:	d005      	beq.n	800a7f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a7ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a814 <HAL_Delay+0x44>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a7f6:	bf00      	nop
 800a7f8:	f7ff ffde 	bl	800a7b8 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	429a      	cmp	r2, r3
 800a806:	d8f7      	bhi.n	800a7f8 <HAL_Delay+0x28>
  {
  }
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20000094 	.word	0x20000094

0800a818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d101      	bne.n	800a82e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e031      	b.n	800a892 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7fd fc96 	bl	8008168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a84e:	f003 0310 	and.w	r3, r3, #16
 800a852:	2b00      	cmp	r3, #0
 800a854:	d116      	bne.n	800a884 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a85a:	4b10      	ldr	r3, [pc, #64]	@ (800a89c <HAL_ADC_Init+0x84>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	f043 0202 	orr.w	r2, r3, #2
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fad6 	bl	800ae18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a876:	f023 0303 	bic.w	r3, r3, #3
 800a87a:	f043 0201 	orr.w	r2, r3, #1
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	641a      	str	r2, [r3, #64]	@ 0x40
 800a882:	e001      	b.n	800a888 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a890:	7bfb      	ldrb	r3, [r7, #15]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	ffffeefd 	.word	0xffffeefd

0800a8a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <HAL_ADC_Start+0x1a>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e0ad      	b.n	800aa16 <HAL_ADC_Start+0x176>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d018      	beq.n	800a902 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689a      	ldr	r2, [r3, #8]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0201 	orr.w	r2, r2, #1
 800a8de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a8e0:	4b50      	ldr	r3, [pc, #320]	@ (800aa24 <HAL_ADC_Start+0x184>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a50      	ldr	r2, [pc, #320]	@ (800aa28 <HAL_ADC_Start+0x188>)
 800a8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ea:	0c9a      	lsrs	r2, r3, #18
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	4413      	add	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a8f4:	e002      	b.n	800a8fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1f9      	bne.n	800a8f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d175      	bne.n	800a9fc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a914:	4b45      	ldr	r3, [pc, #276]	@ (800aa2c <HAL_ADC_Start+0x18c>)
 800a916:	4013      	ands	r3, r2
 800a918:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a932:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a936:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a94a:	d106      	bne.n	800a95a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a950:	f023 0206 	bic.w	r2, r3, #6
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	645a      	str	r2, [r3, #68]	@ 0x44
 800a958:	e002      	b.n	800a960 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a970:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a972:	4b2f      	ldr	r3, [pc, #188]	@ (800aa30 <HAL_ADC_Start+0x190>)
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f003 031f 	and.w	r3, r3, #31
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10f      	bne.n	800a99e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d143      	bne.n	800aa14 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	689a      	ldr	r2, [r3, #8]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a99a:	609a      	str	r2, [r3, #8]
 800a99c:	e03a      	b.n	800aa14 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a24      	ldr	r2, [pc, #144]	@ (800aa34 <HAL_ADC_Start+0x194>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d10e      	bne.n	800a9c6 <HAL_ADC_Start+0x126>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d107      	bne.n	800a9c6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a9c4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800a9c6:	4b1a      	ldr	r3, [pc, #104]	@ (800aa30 <HAL_ADC_Start+0x190>)
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f003 0310 	and.w	r3, r3, #16
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d120      	bne.n	800aa14 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a18      	ldr	r2, [pc, #96]	@ (800aa38 <HAL_ADC_Start+0x198>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d11b      	bne.n	800aa14 <HAL_ADC_Start+0x174>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d114      	bne.n	800aa14 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a9f8:	609a      	str	r2, [r3, #8]
 800a9fa:	e00b      	b.n	800aa14 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa00:	f043 0210 	orr.w	r2, r3, #16
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa0c:	f043 0201 	orr.w	r2, r3, #1
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20000050 	.word	0x20000050
 800aa28:	431bde83 	.word	0x431bde83
 800aa2c:	fffff8fe 	.word	0xfffff8fe
 800aa30:	40012300 	.word	0x40012300
 800aa34:	40012000 	.word	0x40012000
 800aa38:	40012200 	.word	0x40012200

0800aa3c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa58:	d113      	bne.n	800aa82 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800aa64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa68:	d10b      	bne.n	800aa82 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6e:	f043 0220 	orr.w	r2, r3, #32
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e063      	b.n	800ab4a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800aa82:	f7ff fe99 	bl	800a7b8 <HAL_GetTick>
 800aa86:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa88:	e021      	b.n	800aace <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa90:	d01d      	beq.n	800aace <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d007      	beq.n	800aaa8 <HAL_ADC_PollForConversion+0x6c>
 800aa98:	f7ff fe8e 	bl	800a7b8 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d212      	bcs.n	800aace <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d00b      	beq.n	800aace <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaba:	f043 0204 	orr.w	r2, r3, #4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e03d      	b.n	800ab4a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d1d6      	bne.n	800aa8a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0212 	mvn.w	r2, #18
 800aae4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d123      	bne.n	800ab48 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11f      	bne.n	800ab48 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d006      	beq.n	800ab24 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d111      	bne.n	800ab48 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d105      	bne.n	800ab48 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab40:	f043 0201 	orr.w	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d101      	bne.n	800ab88 <HAL_ADC_ConfigChannel+0x1c>
 800ab84:	2302      	movs	r3, #2
 800ab86:	e136      	b.n	800adf6 <HAL_ADC_ConfigChannel+0x28a>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d93a      	bls.n	800ac0e <HAL_ADC_ConfigChannel+0xa2>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aba0:	d035      	beq.n	800ac0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68d9      	ldr	r1, [r3, #12]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	461a      	mov	r2, r3
 800abb0:	4613      	mov	r3, r2
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	4413      	add	r3, r2
 800abb6:	3b1e      	subs	r3, #30
 800abb8:	2207      	movs	r2, #7
 800abba:	fa02 f303 	lsl.w	r3, r2, r3
 800abbe:	43da      	mvns	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	400a      	ands	r2, r1
 800abc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a8d      	ldr	r2, [pc, #564]	@ (800ae04 <HAL_ADC_ConfigChannel+0x298>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d10a      	bne.n	800abe8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68d9      	ldr	r1, [r3, #12]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	061a      	lsls	r2, r3, #24
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800abe6:	e035      	b.n	800ac54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68d9      	ldr	r1, [r3, #12]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	4618      	mov	r0, r3
 800abfa:	4603      	mov	r3, r0
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	4403      	add	r3, r0
 800ac00:	3b1e      	subs	r3, #30
 800ac02:	409a      	lsls	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ac0c:	e022      	b.n	800ac54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6919      	ldr	r1, [r3, #16]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	4413      	add	r3, r2
 800ac22:	2207      	movs	r2, #7
 800ac24:	fa02 f303 	lsl.w	r3, r2, r3
 800ac28:	43da      	mvns	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	400a      	ands	r2, r1
 800ac30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6919      	ldr	r1, [r3, #16]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	4618      	mov	r0, r3
 800ac44:	4603      	mov	r3, r0
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	4403      	add	r3, r0
 800ac4a:	409a      	lsls	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	2b06      	cmp	r3, #6
 800ac5a:	d824      	bhi.n	800aca6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	3b05      	subs	r3, #5
 800ac6e:	221f      	movs	r2, #31
 800ac70:	fa02 f303 	lsl.w	r3, r2, r3
 800ac74:	43da      	mvns	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	400a      	ands	r2, r1
 800ac7c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	3b05      	subs	r3, #5
 800ac98:	fa00 f203 	lsl.w	r2, r0, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	635a      	str	r2, [r3, #52]	@ 0x34
 800aca4:	e04c      	b.n	800ad40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	2b0c      	cmp	r3, #12
 800acac:	d824      	bhi.n	800acf8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	3b23      	subs	r3, #35	@ 0x23
 800acc0:	221f      	movs	r2, #31
 800acc2:	fa02 f303 	lsl.w	r3, r2, r3
 800acc6:	43da      	mvns	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	400a      	ands	r2, r1
 800acce:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	4618      	mov	r0, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	4613      	mov	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	3b23      	subs	r3, #35	@ 0x23
 800acea:	fa00 f203 	lsl.w	r2, r0, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	631a      	str	r2, [r3, #48]	@ 0x30
 800acf6:	e023      	b.n	800ad40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	3b41      	subs	r3, #65	@ 0x41
 800ad0a:	221f      	movs	r2, #31
 800ad0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad10:	43da      	mvns	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	400a      	ands	r2, r1
 800ad18:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	4618      	mov	r0, r3
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	3b41      	subs	r3, #65	@ 0x41
 800ad34:	fa00 f203 	lsl.w	r2, r0, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a30      	ldr	r2, [pc, #192]	@ (800ae08 <HAL_ADC_ConfigChannel+0x29c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d10a      	bne.n	800ad60 <HAL_ADC_ConfigChannel+0x1f4>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad52:	d105      	bne.n	800ad60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800ad54:	4b2d      	ldr	r3, [pc, #180]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	4a2c      	ldr	r2, [pc, #176]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800ad5a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ad5e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a28      	ldr	r2, [pc, #160]	@ (800ae08 <HAL_ADC_ConfigChannel+0x29c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d10f      	bne.n	800ad8a <HAL_ADC_ConfigChannel+0x21e>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b12      	cmp	r3, #18
 800ad70:	d10b      	bne.n	800ad8a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800ad72:	4b26      	ldr	r3, [pc, #152]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	4a25      	ldr	r2, [pc, #148]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800ad78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ad7c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800ad7e:	4b23      	ldr	r3, [pc, #140]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	4a22      	ldr	r2, [pc, #136]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800ad84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ad88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a1e      	ldr	r2, [pc, #120]	@ (800ae08 <HAL_ADC_ConfigChannel+0x29c>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d12b      	bne.n	800adec <HAL_ADC_ConfigChannel+0x280>
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a1a      	ldr	r2, [pc, #104]	@ (800ae04 <HAL_ADC_ConfigChannel+0x298>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d003      	beq.n	800ada6 <HAL_ADC_ConfigChannel+0x23a>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b11      	cmp	r3, #17
 800ada4:	d122      	bne.n	800adec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800ada6:	4b19      	ldr	r3, [pc, #100]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	4a18      	ldr	r2, [pc, #96]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800adac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800adb0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800adb2:	4b16      	ldr	r3, [pc, #88]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	4a15      	ldr	r2, [pc, #84]	@ (800ae0c <HAL_ADC_ConfigChannel+0x2a0>)
 800adb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800adbc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a10      	ldr	r2, [pc, #64]	@ (800ae04 <HAL_ADC_ConfigChannel+0x298>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d111      	bne.n	800adec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800adc8:	4b11      	ldr	r3, [pc, #68]	@ (800ae10 <HAL_ADC_ConfigChannel+0x2a4>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a11      	ldr	r2, [pc, #68]	@ (800ae14 <HAL_ADC_ConfigChannel+0x2a8>)
 800adce:	fba2 2303 	umull	r2, r3, r2, r3
 800add2:	0c9a      	lsrs	r2, r3, #18
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	005b      	lsls	r3, r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800adde:	e002      	b.n	800ade6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1f9      	bne.n	800ade0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	10000012 	.word	0x10000012
 800ae08:	40012000 	.word	0x40012000
 800ae0c:	40012300 	.word	0x40012300
 800ae10:	20000050 	.word	0x20000050
 800ae14:	431bde83 	.word	0x431bde83

0800ae18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800ae20:	4b78      	ldr	r3, [pc, #480]	@ (800b004 <ADC_Init+0x1ec>)
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	4a77      	ldr	r2, [pc, #476]	@ (800b004 <ADC_Init+0x1ec>)
 800ae26:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800ae2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800ae2c:	4b75      	ldr	r3, [pc, #468]	@ (800b004 <ADC_Init+0x1ec>)
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	4973      	ldr	r1, [pc, #460]	@ (800b004 <ADC_Init+0x1ec>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6859      	ldr	r1, [r3, #4]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	021a      	lsls	r2, r3, #8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800ae6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6859      	ldr	r1, [r3, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	689a      	ldr	r2, [r3, #8]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6899      	ldr	r1, [r3, #8]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68da      	ldr	r2, [r3, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea6:	4a58      	ldr	r2, [pc, #352]	@ (800b008 <ADC_Init+0x1f0>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d022      	beq.n	800aef2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	689a      	ldr	r2, [r3, #8]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800aeba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6899      	ldr	r1, [r3, #8]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800aedc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6899      	ldr	r1, [r3, #8]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	609a      	str	r2, [r3, #8]
 800aef0:	e00f      	b.n	800af12 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800af00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800af10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0202 	bic.w	r2, r2, #2
 800af20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6899      	ldr	r1, [r3, #8]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	005a      	lsls	r2, r3, #1
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01b      	beq.n	800af78 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800af5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6859      	ldr	r1, [r3, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6a:	3b01      	subs	r3, #1
 800af6c:	035a      	lsls	r2, r3, #13
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	605a      	str	r2, [r3, #4]
 800af76:	e007      	b.n	800af88 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800af96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	051a      	lsls	r2, r3, #20
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	430a      	orrs	r2, r1
 800afac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800afbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6899      	ldr	r1, [r3, #8]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800afca:	025a      	lsls	r2, r3, #9
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689a      	ldr	r2, [r3, #8]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6899      	ldr	r1, [r3, #8]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	029a      	lsls	r2, r3, #10
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	609a      	str	r2, [r3, #8]
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	40012300 	.word	0x40012300
 800b008:	0f000001 	.word	0x0f000001

0800b00c <__NVIC_SetPriorityGrouping>:
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b01c:	4b0b      	ldr	r3, [pc, #44]	@ (800b04c <__NVIC_SetPriorityGrouping+0x40>)
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b028:	4013      	ands	r3, r2
 800b02a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b034:	4b06      	ldr	r3, [pc, #24]	@ (800b050 <__NVIC_SetPriorityGrouping+0x44>)
 800b036:	4313      	orrs	r3, r2
 800b038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b03a:	4a04      	ldr	r2, [pc, #16]	@ (800b04c <__NVIC_SetPriorityGrouping+0x40>)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	60d3      	str	r3, [r2, #12]
}
 800b040:	bf00      	nop
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	e000ed00 	.word	0xe000ed00
 800b050:	05fa0000 	.word	0x05fa0000

0800b054 <__NVIC_GetPriorityGrouping>:
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b058:	4b04      	ldr	r3, [pc, #16]	@ (800b06c <__NVIC_GetPriorityGrouping+0x18>)
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	0a1b      	lsrs	r3, r3, #8
 800b05e:	f003 0307 	and.w	r3, r3, #7
}
 800b062:	4618      	mov	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	e000ed00 	.word	0xe000ed00

0800b070 <__NVIC_EnableIRQ>:
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b07a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	db0b      	blt.n	800b09a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	f003 021f 	and.w	r2, r3, #31
 800b088:	4907      	ldr	r1, [pc, #28]	@ (800b0a8 <__NVIC_EnableIRQ+0x38>)
 800b08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	2001      	movs	r0, #1
 800b092:	fa00 f202 	lsl.w	r2, r0, r2
 800b096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	e000e100 	.word	0xe000e100

0800b0ac <__NVIC_SetPriority>:
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	6039      	str	r1, [r7, #0]
 800b0b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	db0a      	blt.n	800b0d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	490c      	ldr	r1, [pc, #48]	@ (800b0f8 <__NVIC_SetPriority+0x4c>)
 800b0c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ca:	0112      	lsls	r2, r2, #4
 800b0cc:	b2d2      	uxtb	r2, r2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b0d4:	e00a      	b.n	800b0ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	4908      	ldr	r1, [pc, #32]	@ (800b0fc <__NVIC_SetPriority+0x50>)
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
 800b0de:	f003 030f 	and.w	r3, r3, #15
 800b0e2:	3b04      	subs	r3, #4
 800b0e4:	0112      	lsls	r2, r2, #4
 800b0e6:	b2d2      	uxtb	r2, r2
 800b0e8:	440b      	add	r3, r1
 800b0ea:	761a      	strb	r2, [r3, #24]
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	e000e100 	.word	0xe000e100
 800b0fc:	e000ed00 	.word	0xe000ed00

0800b100 <NVIC_EncodePriority>:
{
 800b100:	b480      	push	{r7}
 800b102:	b089      	sub	sp, #36	@ 0x24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f003 0307 	and.w	r3, r3, #7
 800b112:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f1c3 0307 	rsb	r3, r3, #7
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	bf28      	it	cs
 800b11e:	2304      	movcs	r3, #4
 800b120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	3304      	adds	r3, #4
 800b126:	2b06      	cmp	r3, #6
 800b128:	d902      	bls.n	800b130 <NVIC_EncodePriority+0x30>
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	3b03      	subs	r3, #3
 800b12e:	e000      	b.n	800b132 <NVIC_EncodePriority+0x32>
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b134:	f04f 32ff 	mov.w	r2, #4294967295
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	fa02 f303 	lsl.w	r3, r2, r3
 800b13e:	43da      	mvns	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	401a      	ands	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b148:	f04f 31ff 	mov.w	r1, #4294967295
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	fa01 f303 	lsl.w	r3, r1, r3
 800b152:	43d9      	mvns	r1, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b158:	4313      	orrs	r3, r2
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3724      	adds	r7, #36	@ 0x24
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7ff ff4c 	bl	800b00c <__NVIC_SetPriorityGrouping>
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	4603      	mov	r3, r0
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b18a:	2300      	movs	r3, #0
 800b18c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b18e:	f7ff ff61 	bl	800b054 <__NVIC_GetPriorityGrouping>
 800b192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	6978      	ldr	r0, [r7, #20]
 800b19a:	f7ff ffb1 	bl	800b100 <NVIC_EncodePriority>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff ff80 	bl	800b0ac <__NVIC_SetPriority>
}
 800b1ac:	bf00      	nop
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b1be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff ff54 	bl	800b070 <__NVIC_EnableIRQ>
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b1dc:	f7ff faec 	bl	800a7b8 <HAL_GetTick>
 800b1e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e099      	b.n	800b320 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f022 0201 	bic.w	r2, r2, #1
 800b20a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b20c:	e00f      	b.n	800b22e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b20e:	f7ff fad3 	bl	800a7b8 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	2b05      	cmp	r3, #5
 800b21a:	d908      	bls.n	800b22e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2203      	movs	r2, #3
 800b226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e078      	b.n	800b320 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e8      	bne.n	800b20e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	4b38      	ldr	r3, [pc, #224]	@ (800b328 <HAL_DMA_Init+0x158>)
 800b248:	4013      	ands	r3, r2
 800b24a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b25a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b284:	2b04      	cmp	r3, #4
 800b286:	d107      	bne.n	800b298 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b290:	4313      	orrs	r3, r2
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	4313      	orrs	r3, r2
 800b296:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f023 0307 	bic.w	r3, r3, #7
 800b2ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d117      	bne.n	800b2f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00e      	beq.n	800b2f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fb03 	bl	800b8e0 <DMA_CheckFifoParam>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d008      	beq.n	800b2f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2240      	movs	r2, #64	@ 0x40
 800b2e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e016      	b.n	800b320 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 faba 	bl	800b874 <DMA_CalcBaseAndBitshift>
 800b300:	4603      	mov	r3, r0
 800b302:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b308:	223f      	movs	r2, #63	@ 0x3f
 800b30a:	409a      	lsls	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	f010803f 	.word	0xf010803f

0800b32c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e050      	b.n	800b3e0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b02      	cmp	r3, #2
 800b348:	d101      	bne.n	800b34e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b34a:	2302      	movs	r3, #2
 800b34c:	e048      	b.n	800b3e0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 0201 	bic.w	r2, r2, #1
 800b35c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2200      	movs	r2, #0
 800b364:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2200      	movs	r2, #0
 800b36c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2200      	movs	r2, #0
 800b374:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2200      	movs	r2, #0
 800b37c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2200      	movs	r2, #0
 800b384:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2221      	movs	r2, #33	@ 0x21
 800b38c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fa70 	bl	800b874 <DMA_CalcBaseAndBitshift>
 800b394:	4603      	mov	r3, r0
 800b396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b39c:	223f      	movs	r2, #63	@ 0x3f
 800b39e:	409a      	lsls	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_DMA_Start_IT+0x26>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e048      	b.n	800b4a0 <HAL_DMA_Start_IT+0xb8>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d137      	bne.n	800b492 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2202      	movs	r2, #2
 800b426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 f9ee 	bl	800b818 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b440:	223f      	movs	r2, #63	@ 0x3f
 800b442:	409a      	lsls	r2, r3
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f042 0216 	orr.w	r2, r2, #22
 800b456:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	695a      	ldr	r2, [r3, #20]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b466:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d007      	beq.n	800b480 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f042 0208 	orr.w	r2, r2, #8
 800b47e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0201 	orr.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]
 800b490:	e005      	b.n	800b49e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b49a:	2302      	movs	r3, #2
 800b49c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d004      	beq.n	800b4c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2280      	movs	r2, #128	@ 0x80
 800b4c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e00c      	b.n	800b4e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2205      	movs	r2, #5
 800b4ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f022 0201 	bic.w	r2, r2, #1
 800b4dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b4f8:	4b8e      	ldr	r3, [pc, #568]	@ (800b734 <HAL_DMA_IRQHandler+0x248>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a8e      	ldr	r2, [pc, #568]	@ (800b738 <HAL_DMA_IRQHandler+0x24c>)
 800b4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b502:	0a9b      	lsrs	r3, r3, #10
 800b504:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b50a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b516:	2208      	movs	r2, #8
 800b518:	409a      	lsls	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	4013      	ands	r3, r2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d01a      	beq.n	800b558 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d013      	beq.n	800b558 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0204 	bic.w	r2, r2, #4
 800b53e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b544:	2208      	movs	r2, #8
 800b546:	409a      	lsls	r2, r3
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b550:	f043 0201 	orr.w	r2, r3, #1
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b55c:	2201      	movs	r2, #1
 800b55e:	409a      	lsls	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4013      	ands	r3, r2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d012      	beq.n	800b58e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00b      	beq.n	800b58e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b57a:	2201      	movs	r2, #1
 800b57c:	409a      	lsls	r2, r3
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b586:	f043 0202 	orr.w	r2, r3, #2
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b592:	2204      	movs	r2, #4
 800b594:	409a      	lsls	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	4013      	ands	r3, r2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d012      	beq.n	800b5c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0302 	and.w	r3, r3, #2
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5b0:	2204      	movs	r2, #4
 800b5b2:	409a      	lsls	r2, r3
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5bc:	f043 0204 	orr.w	r2, r3, #4
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5c8:	2210      	movs	r2, #16
 800b5ca:	409a      	lsls	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d043      	beq.n	800b65c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0308 	and.w	r3, r3, #8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d03c      	beq.n	800b65c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5e6:	2210      	movs	r2, #16
 800b5e8:	409a      	lsls	r2, r3
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d018      	beq.n	800b62e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d108      	bne.n	800b61c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d024      	beq.n	800b65c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	4798      	blx	r3
 800b61a:	e01f      	b.n	800b65c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b620:	2b00      	cmp	r3, #0
 800b622:	d01b      	beq.n	800b65c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
 800b62c:	e016      	b.n	800b65c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d107      	bne.n	800b64c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0208 	bic.w	r2, r2, #8
 800b64a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b650:	2b00      	cmp	r3, #0
 800b652:	d003      	beq.n	800b65c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b660:	2220      	movs	r2, #32
 800b662:	409a      	lsls	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4013      	ands	r3, r2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 808f 	beq.w	800b78c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 0310 	and.w	r3, r3, #16
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 8087 	beq.w	800b78c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b682:	2220      	movs	r2, #32
 800b684:	409a      	lsls	r2, r3
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b05      	cmp	r3, #5
 800b694:	d136      	bne.n	800b704 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f022 0216 	bic.w	r2, r2, #22
 800b6a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	695a      	ldr	r2, [r3, #20]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d103      	bne.n	800b6c6 <HAL_DMA_IRQHandler+0x1da>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d007      	beq.n	800b6d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f022 0208 	bic.w	r2, r2, #8
 800b6d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6da:	223f      	movs	r2, #63	@ 0x3f
 800b6dc:	409a      	lsls	r2, r3
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d07e      	beq.n	800b7f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	4798      	blx	r3
        }
        return;
 800b702:	e079      	b.n	800b7f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d01d      	beq.n	800b74e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10d      	bne.n	800b73c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b724:	2b00      	cmp	r3, #0
 800b726:	d031      	beq.n	800b78c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	4798      	blx	r3
 800b730:	e02c      	b.n	800b78c <HAL_DMA_IRQHandler+0x2a0>
 800b732:	bf00      	nop
 800b734:	20000050 	.word	0x20000050
 800b738:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b740:	2b00      	cmp	r3, #0
 800b742:	d023      	beq.n	800b78c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	4798      	blx	r3
 800b74c:	e01e      	b.n	800b78c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10f      	bne.n	800b77c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 0210 	bic.w	r2, r2, #16
 800b76a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b790:	2b00      	cmp	r3, #0
 800b792:	d032      	beq.n	800b7fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d022      	beq.n	800b7e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2205      	movs	r2, #5
 800b7a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 0201 	bic.w	r2, r2, #1
 800b7b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60bb      	str	r3, [r7, #8]
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d307      	bcc.n	800b7d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f2      	bne.n	800b7b8 <HAL_DMA_IRQHandler+0x2cc>
 800b7d2:	e000      	b.n	800b7d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b7d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	4798      	blx	r3
 800b7f6:	e000      	b.n	800b7fa <HAL_DMA_IRQHandler+0x30e>
        return;
 800b7f8:	bf00      	nop
    }
  }
}
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
 800b824:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b834:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	2b40      	cmp	r3, #64	@ 0x40
 800b844:	d108      	bne.n	800b858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b856:	e007      	b.n	800b868 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	60da      	str	r2, [r3, #12]
}
 800b868:	bf00      	nop
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	3b10      	subs	r3, #16
 800b884:	4a13      	ldr	r2, [pc, #76]	@ (800b8d4 <DMA_CalcBaseAndBitshift+0x60>)
 800b886:	fba2 2303 	umull	r2, r3, r2, r3
 800b88a:	091b      	lsrs	r3, r3, #4
 800b88c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b88e:	4a12      	ldr	r2, [pc, #72]	@ (800b8d8 <DMA_CalcBaseAndBitshift+0x64>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4413      	add	r3, r2
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d908      	bls.n	800b8b4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b8dc <DMA_CalcBaseAndBitshift+0x68>)
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	1d1a      	adds	r2, r3, #4
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	659a      	str	r2, [r3, #88]	@ 0x58
 800b8b2:	e006      	b.n	800b8c2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4b08      	ldr	r3, [pc, #32]	@ (800b8dc <DMA_CalcBaseAndBitshift+0x68>)
 800b8bc:	4013      	ands	r3, r2
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	aaaaaaab 	.word	0xaaaaaaab
 800b8d8:	08025774 	.word	0x08025774
 800b8dc:	fffffc00 	.word	0xfffffc00

0800b8e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d11f      	bne.n	800b93a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d856      	bhi.n	800b9ae <DMA_CheckFifoParam+0xce>
 800b900:	a201      	add	r2, pc, #4	@ (adr r2, 800b908 <DMA_CheckFifoParam+0x28>)
 800b902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b906:	bf00      	nop
 800b908:	0800b919 	.word	0x0800b919
 800b90c:	0800b92b 	.word	0x0800b92b
 800b910:	0800b919 	.word	0x0800b919
 800b914:	0800b9af 	.word	0x0800b9af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d046      	beq.n	800b9b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b928:	e043      	b.n	800b9b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b92e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b932:	d140      	bne.n	800b9b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b938:	e03d      	b.n	800b9b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b942:	d121      	bne.n	800b988 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b03      	cmp	r3, #3
 800b948:	d837      	bhi.n	800b9ba <DMA_CheckFifoParam+0xda>
 800b94a:	a201      	add	r2, pc, #4	@ (adr r2, 800b950 <DMA_CheckFifoParam+0x70>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b961 	.word	0x0800b961
 800b954:	0800b967 	.word	0x0800b967
 800b958:	0800b961 	.word	0x0800b961
 800b95c:	0800b979 	.word	0x0800b979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	73fb      	strb	r3, [r7, #15]
      break;
 800b964:	e030      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d025      	beq.n	800b9be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b976:	e022      	b.n	800b9be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b980:	d11f      	bne.n	800b9c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b986:	e01c      	b.n	800b9c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d903      	bls.n	800b996 <DMA_CheckFifoParam+0xb6>
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	2b03      	cmp	r3, #3
 800b992:	d003      	beq.n	800b99c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b994:	e018      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	73fb      	strb	r3, [r7, #15]
      break;
 800b99a:	e015      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00e      	beq.n	800b9c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ac:	e00b      	b.n	800b9c6 <DMA_CheckFifoParam+0xe6>
      break;
 800b9ae:	bf00      	nop
 800b9b0:	e00a      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      break;
 800b9b2:	bf00      	nop
 800b9b4:	e008      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      break;
 800b9b6:	bf00      	nop
 800b9b8:	e006      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      break;
 800b9ba:	bf00      	nop
 800b9bc:	e004      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      break;
 800b9be:	bf00      	nop
 800b9c0:	e002      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      break;   
 800b9c2:	bf00      	nop
 800b9c4:	e000      	b.n	800b9c8 <DMA_CheckFifoParam+0xe8>
      break;
 800b9c6:	bf00      	nop
    }
  } 
  
  return status; 
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop

0800b9d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e039      	b.n	800ba5e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d106      	bne.n	800ba04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7fc fc38 	bl	8008274 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2202      	movs	r2, #2
 800ba08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba28:	f023 0107 	bic.w	r1, r3, #7
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	430a      	orrs	r2, r1
 800ba36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <HAL_DMA2D_Init+0x90>)
 800ba40:	4013      	ands	r3, r2
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	68d1      	ldr	r1, [r2, #12]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	430b      	orrs	r3, r1
 800ba4c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	ffffc000 	.word	0xffffc000

0800ba6c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af02      	add	r7, sp, #8
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d101      	bne.n	800ba88 <HAL_DMA2D_Start+0x1c>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e018      	b.n	800baba <HAL_DMA2D_Start+0x4e>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2202      	movs	r2, #2
 800ba94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	68b9      	ldr	r1, [r7, #8]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 f988 	bl	800bdb8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f042 0201 	orr.w	r2, r2, #1
 800bab6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b086      	sub	sp, #24
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d056      	beq.n	800bb8c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800bade:	f7fe fe6b 	bl	800a7b8 <HAL_GetTick>
 800bae2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800bae4:	e04b      	b.n	800bb7e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d023      	beq.n	800bb40 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f003 0320 	and.w	r3, r3, #32
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d005      	beq.n	800bb0e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb06:	f043 0202 	orr.w	r2, r3, #2
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d005      	beq.n	800bb24 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb1c:	f043 0201 	orr.w	r2, r3, #1
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2221      	movs	r2, #33	@ 0x21
 800bb2a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2204      	movs	r2, #4
 800bb30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e0a5      	b.n	800bc8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb46:	d01a      	beq.n	800bb7e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb48:	f7fe fe36 	bl	800a7b8 <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d302      	bcc.n	800bb5e <HAL_DMA2D_PollForTransfer+0x9c>
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10f      	bne.n	800bb7e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb62:	f043 0220 	orr.w	r2, r3, #32
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2203      	movs	r2, #3
 800bb6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e086      	b.n	800bc8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0ac      	beq.n	800bae6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	69db      	ldr	r3, [r3, #28]
 800bb92:	f003 0320 	and.w	r3, r3, #32
 800bb96:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d061      	beq.n	800bc72 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbae:	f7fe fe03 	bl	800a7b8 <HAL_GetTick>
 800bbb2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bbb4:	e056      	b.n	800bc64 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d02e      	beq.n	800bc26 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d005      	beq.n	800bbde <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd6:	f043 0204 	orr.w	r2, r3, #4
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f003 0320 	and.w	r3, r3, #32
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d005      	beq.n	800bbf4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbec:	f043 0202 	orr.w	r2, r3, #2
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d005      	beq.n	800bc0a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc02:	f043 0201 	orr.w	r2, r3, #1
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2229      	movs	r2, #41	@ 0x29
 800bc10:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2204      	movs	r2, #4
 800bc16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e032      	b.n	800bc8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2c:	d01a      	beq.n	800bc64 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bc2e:	f7fe fdc3 	bl	800a7b8 <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d302      	bcc.n	800bc44 <HAL_DMA2D_PollForTransfer+0x182>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10f      	bne.n	800bc64 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc48:	f043 0220 	orr.w	r2, r3, #32
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2203      	movs	r2, #3
 800bc54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e013      	b.n	800bc8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	f003 0310 	and.w	r3, r3, #16
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0a1      	beq.n	800bbb6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2212      	movs	r2, #18
 800bc78:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d101      	bne.n	800bcb4 <HAL_DMA2D_ConfigLayer+0x20>
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	e079      	b.n	800bda8 <HAL_DMA2D_ConfigLayer+0x114>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	011b      	lsls	r3, r3, #4
 800bcc8:	3318      	adds	r3, #24
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	4413      	add	r3, r2
 800bcce:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	041b      	lsls	r3, r3, #16
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800bcde:	4b35      	ldr	r3, [pc, #212]	@ (800bdb4 <HAL_DMA2D_ConfigLayer+0x120>)
 800bce0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	2b0a      	cmp	r3, #10
 800bce8:	d003      	beq.n	800bcf2 <HAL_DMA2D_ConfigLayer+0x5e>
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	2b09      	cmp	r3, #9
 800bcf0:	d107      	bne.n	800bd02 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	e005      	b.n	800bd0e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	061b      	lsls	r3, r3, #24
 800bd08:	697a      	ldr	r2, [r7, #20]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d120      	bne.n	800bd56 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	43db      	mvns	r3, r3
 800bd1e:	ea02 0103 	and.w	r1, r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	6812      	ldr	r2, [r2, #0]
 800bd34:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	2b0a      	cmp	r3, #10
 800bd3c:	d003      	beq.n	800bd46 <HAL_DMA2D_ConfigLayer+0xb2>
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	2b09      	cmp	r3, #9
 800bd44:	d127      	bne.n	800bd96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	68da      	ldr	r2, [r3, #12]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800bd52:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd54:	e01f      	b.n	800bd96 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	69da      	ldr	r2, [r3, #28]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	43db      	mvns	r3, r3
 800bd60:	ea02 0103 	and.w	r1, r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	430a      	orrs	r2, r1
 800bd6c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	6812      	ldr	r2, [r2, #0]
 800bd76:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2b0a      	cmp	r3, #10
 800bd7e:	d003      	beq.n	800bd88 <HAL_DMA2D_ConfigLayer+0xf4>
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	2b09      	cmp	r3, #9
 800bd86:	d106      	bne.n	800bd96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	68da      	ldr	r2, [r3, #12]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800bd94:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	371c      	adds	r7, #28
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	ff03000f 	.word	0xff03000f

0800bdb8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b08b      	sub	sp, #44	@ 0x2c
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdcc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	041a      	lsls	r2, r3, #16
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bdf0:	d174      	bne.n	800bedc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bdf8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be00:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be08:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d108      	bne.n	800be2a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	431a      	orrs	r2, r3
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	4313      	orrs	r3, r2
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	4313      	orrs	r3, r2
 800be26:	627b      	str	r3, [r7, #36]	@ 0x24
 800be28:	e053      	b.n	800bed2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d106      	bne.n	800be40 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	4313      	orrs	r3, r2
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be3e:	e048      	b.n	800bed2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	2b02      	cmp	r3, #2
 800be46:	d111      	bne.n	800be6c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	0cdb      	lsrs	r3, r3, #19
 800be4c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	0a9b      	lsrs	r3, r3, #10
 800be52:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	08db      	lsrs	r3, r3, #3
 800be58:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	015a      	lsls	r2, r3, #5
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	02db      	lsls	r3, r3, #11
 800be62:	4313      	orrs	r3, r2
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	4313      	orrs	r3, r2
 800be68:	627b      	str	r3, [r7, #36]	@ 0x24
 800be6a:	e032      	b.n	800bed2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	2b03      	cmp	r3, #3
 800be72:	d117      	bne.n	800bea4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	0fdb      	lsrs	r3, r3, #31
 800be78:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	0cdb      	lsrs	r3, r3, #19
 800be7e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	0adb      	lsrs	r3, r3, #11
 800be84:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	08db      	lsrs	r3, r3, #3
 800be8a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	015a      	lsls	r2, r3, #5
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	029b      	lsls	r3, r3, #10
 800be94:	431a      	orrs	r2, r3
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	03db      	lsls	r3, r3, #15
 800be9a:	4313      	orrs	r3, r2
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bea2:	e016      	b.n	800bed2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	0f1b      	lsrs	r3, r3, #28
 800bea8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	0d1b      	lsrs	r3, r3, #20
 800beae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	0b1b      	lsrs	r3, r3, #12
 800beb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	091b      	lsrs	r3, r3, #4
 800beba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	011a      	lsls	r2, r3, #4
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	021b      	lsls	r3, r3, #8
 800bec4:	431a      	orrs	r2, r3
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	031b      	lsls	r3, r3, #12
 800beca:	4313      	orrs	r3, r2
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	4313      	orrs	r3, r2
 800bed0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bed8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800beda:	e003      	b.n	800bee4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	60da      	str	r2, [r3, #12]
}
 800bee4:	bf00      	nop
 800bee6:	372c      	adds	r7, #44	@ 0x2c
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b089      	sub	sp, #36	@ 0x24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800befa:	2300      	movs	r3, #0
 800befc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bf02:	2300      	movs	r3, #0
 800bf04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800bf06:	2300      	movs	r3, #0
 800bf08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61fb      	str	r3, [r7, #28]
 800bf0e:	e175      	b.n	800c1fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bf10:	2201      	movs	r2, #1
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	fa02 f303 	lsl.w	r3, r2, r3
 800bf18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	4013      	ands	r3, r2
 800bf22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	f040 8164 	bne.w	800c1f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f003 0303 	and.w	r3, r3, #3
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d005      	beq.n	800bf46 <HAL_GPIO_Init+0x56>
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f003 0303 	and.w	r3, r3, #3
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d130      	bne.n	800bfa8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	2203      	movs	r2, #3
 800bf52:	fa02 f303 	lsl.w	r3, r2, r3
 800bf56:	43db      	mvns	r3, r3
 800bf58:	69ba      	ldr	r2, [r7, #24]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68da      	ldr	r2, [r3, #12]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6a:	69ba      	ldr	r2, [r7, #24]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	fa02 f303 	lsl.w	r3, r2, r3
 800bf84:	43db      	mvns	r3, r3
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	091b      	lsrs	r3, r3, #4
 800bf92:	f003 0201 	and.w	r2, r3, #1
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	69ba      	ldr	r2, [r7, #24]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f003 0303 	and.w	r3, r3, #3
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d017      	beq.n	800bfe4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	2203      	movs	r2, #3
 800bfc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc4:	43db      	mvns	r3, r3
 800bfc6:	69ba      	ldr	r2, [r7, #24]
 800bfc8:	4013      	ands	r3, r2
 800bfca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	005b      	lsls	r3, r3, #1
 800bfd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	69ba      	ldr	r2, [r7, #24]
 800bfe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	f003 0303 	and.w	r3, r3, #3
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d123      	bne.n	800c038 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	08da      	lsrs	r2, r3, #3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3208      	adds	r2, #8
 800bff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	f003 0307 	and.w	r3, r3, #7
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	220f      	movs	r2, #15
 800c008:	fa02 f303 	lsl.w	r3, r2, r3
 800c00c:	43db      	mvns	r3, r3
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	4013      	ands	r3, r2
 800c012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	691a      	ldr	r2, [r3, #16]
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	f003 0307 	and.w	r3, r3, #7
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	fa02 f303 	lsl.w	r3, r2, r3
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	4313      	orrs	r3, r2
 800c028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	08da      	lsrs	r2, r3, #3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3208      	adds	r2, #8
 800c032:	69b9      	ldr	r1, [r7, #24]
 800c034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	2203      	movs	r2, #3
 800c044:	fa02 f303 	lsl.w	r3, r2, r3
 800c048:	43db      	mvns	r3, r3
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	4013      	ands	r3, r2
 800c04e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f003 0203 	and.w	r2, r3, #3
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	fa02 f303 	lsl.w	r3, r2, r3
 800c060:	69ba      	ldr	r2, [r7, #24]
 800c062:	4313      	orrs	r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 80be 	beq.w	800c1f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c07a:	4b66      	ldr	r3, [pc, #408]	@ (800c214 <HAL_GPIO_Init+0x324>)
 800c07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c07e:	4a65      	ldr	r2, [pc, #404]	@ (800c214 <HAL_GPIO_Init+0x324>)
 800c080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c084:	6453      	str	r3, [r2, #68]	@ 0x44
 800c086:	4b63      	ldr	r3, [pc, #396]	@ (800c214 <HAL_GPIO_Init+0x324>)
 800c088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c08a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c092:	4a61      	ldr	r2, [pc, #388]	@ (800c218 <HAL_GPIO_Init+0x328>)
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	089b      	lsrs	r3, r3, #2
 800c098:	3302      	adds	r3, #2
 800c09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c09e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	f003 0303 	and.w	r3, r3, #3
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	220f      	movs	r2, #15
 800c0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ae:	43db      	mvns	r3, r3
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a58      	ldr	r2, [pc, #352]	@ (800c21c <HAL_GPIO_Init+0x32c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d037      	beq.n	800c12e <HAL_GPIO_Init+0x23e>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a57      	ldr	r2, [pc, #348]	@ (800c220 <HAL_GPIO_Init+0x330>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d031      	beq.n	800c12a <HAL_GPIO_Init+0x23a>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a56      	ldr	r2, [pc, #344]	@ (800c224 <HAL_GPIO_Init+0x334>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d02b      	beq.n	800c126 <HAL_GPIO_Init+0x236>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a55      	ldr	r2, [pc, #340]	@ (800c228 <HAL_GPIO_Init+0x338>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d025      	beq.n	800c122 <HAL_GPIO_Init+0x232>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a54      	ldr	r2, [pc, #336]	@ (800c22c <HAL_GPIO_Init+0x33c>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d01f      	beq.n	800c11e <HAL_GPIO_Init+0x22e>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a53      	ldr	r2, [pc, #332]	@ (800c230 <HAL_GPIO_Init+0x340>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d019      	beq.n	800c11a <HAL_GPIO_Init+0x22a>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a52      	ldr	r2, [pc, #328]	@ (800c234 <HAL_GPIO_Init+0x344>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d013      	beq.n	800c116 <HAL_GPIO_Init+0x226>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a51      	ldr	r2, [pc, #324]	@ (800c238 <HAL_GPIO_Init+0x348>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d00d      	beq.n	800c112 <HAL_GPIO_Init+0x222>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a50      	ldr	r2, [pc, #320]	@ (800c23c <HAL_GPIO_Init+0x34c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d007      	beq.n	800c10e <HAL_GPIO_Init+0x21e>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a4f      	ldr	r2, [pc, #316]	@ (800c240 <HAL_GPIO_Init+0x350>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d101      	bne.n	800c10a <HAL_GPIO_Init+0x21a>
 800c106:	2309      	movs	r3, #9
 800c108:	e012      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c10a:	230a      	movs	r3, #10
 800c10c:	e010      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c10e:	2308      	movs	r3, #8
 800c110:	e00e      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c112:	2307      	movs	r3, #7
 800c114:	e00c      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c116:	2306      	movs	r3, #6
 800c118:	e00a      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c11a:	2305      	movs	r3, #5
 800c11c:	e008      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c11e:	2304      	movs	r3, #4
 800c120:	e006      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c122:	2303      	movs	r3, #3
 800c124:	e004      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c126:	2302      	movs	r3, #2
 800c128:	e002      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c12a:	2301      	movs	r3, #1
 800c12c:	e000      	b.n	800c130 <HAL_GPIO_Init+0x240>
 800c12e:	2300      	movs	r3, #0
 800c130:	69fa      	ldr	r2, [r7, #28]
 800c132:	f002 0203 	and.w	r2, r2, #3
 800c136:	0092      	lsls	r2, r2, #2
 800c138:	4093      	lsls	r3, r2
 800c13a:	69ba      	ldr	r2, [r7, #24]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c140:	4935      	ldr	r1, [pc, #212]	@ (800c218 <HAL_GPIO_Init+0x328>)
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	089b      	lsrs	r3, r3, #2
 800c146:	3302      	adds	r3, #2
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c14e:	4b3d      	ldr	r3, [pc, #244]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	43db      	mvns	r3, r3
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	4013      	ands	r3, r2
 800c15c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	4313      	orrs	r3, r2
 800c170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c172:	4a34      	ldr	r2, [pc, #208]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c178:	4b32      	ldr	r3, [pc, #200]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	43db      	mvns	r3, r3
 800c182:	69ba      	ldr	r2, [r7, #24]
 800c184:	4013      	ands	r3, r2
 800c186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d003      	beq.n	800c19c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c194:	69ba      	ldr	r2, [r7, #24]
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	4313      	orrs	r3, r2
 800c19a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c19c:	4a29      	ldr	r2, [pc, #164]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c1a2:	4b28      	ldr	r3, [pc, #160]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	43db      	mvns	r3, r3
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c1be:	69ba      	ldr	r2, [r7, #24]
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c1c6:	4a1f      	ldr	r2, [pc, #124]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	43db      	mvns	r3, r3
 800c1d6:	69ba      	ldr	r2, [r7, #24]
 800c1d8:	4013      	ands	r3, r2
 800c1da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d003      	beq.n	800c1f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c1f0:	4a14      	ldr	r2, [pc, #80]	@ (800c244 <HAL_GPIO_Init+0x354>)
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	61fb      	str	r3, [r7, #28]
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	2b0f      	cmp	r3, #15
 800c200:	f67f ae86 	bls.w	800bf10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop
 800c208:	3724      	adds	r7, #36	@ 0x24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	40023800 	.word	0x40023800
 800c218:	40013800 	.word	0x40013800
 800c21c:	40020000 	.word	0x40020000
 800c220:	40020400 	.word	0x40020400
 800c224:	40020800 	.word	0x40020800
 800c228:	40020c00 	.word	0x40020c00
 800c22c:	40021000 	.word	0x40021000
 800c230:	40021400 	.word	0x40021400
 800c234:	40021800 	.word	0x40021800
 800c238:	40021c00 	.word	0x40021c00
 800c23c:	40022000 	.word	0x40022000
 800c240:	40022400 	.word	0x40022400
 800c244:	40013c00 	.word	0x40013c00

0800c248 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c252:	2300      	movs	r3, #0
 800c254:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c25a:	2300      	movs	r3, #0
 800c25c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]
 800c262:	e0d9      	b.n	800c418 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c264:	2201      	movs	r2, #1
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	fa02 f303 	lsl.w	r3, r2, r3
 800c26c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	4013      	ands	r3, r2
 800c274:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	f040 80c9 	bne.w	800c412 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c280:	4a6b      	ldr	r2, [pc, #428]	@ (800c430 <HAL_GPIO_DeInit+0x1e8>)
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	089b      	lsrs	r3, r3, #2
 800c286:	3302      	adds	r3, #2
 800c288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c28c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f003 0303 	and.w	r3, r3, #3
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	220f      	movs	r2, #15
 800c298:	fa02 f303 	lsl.w	r3, r2, r3
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	4013      	ands	r3, r2
 800c2a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a63      	ldr	r2, [pc, #396]	@ (800c434 <HAL_GPIO_DeInit+0x1ec>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d037      	beq.n	800c31a <HAL_GPIO_DeInit+0xd2>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a62      	ldr	r2, [pc, #392]	@ (800c438 <HAL_GPIO_DeInit+0x1f0>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d031      	beq.n	800c316 <HAL_GPIO_DeInit+0xce>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a61      	ldr	r2, [pc, #388]	@ (800c43c <HAL_GPIO_DeInit+0x1f4>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d02b      	beq.n	800c312 <HAL_GPIO_DeInit+0xca>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a60      	ldr	r2, [pc, #384]	@ (800c440 <HAL_GPIO_DeInit+0x1f8>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d025      	beq.n	800c30e <HAL_GPIO_DeInit+0xc6>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a5f      	ldr	r2, [pc, #380]	@ (800c444 <HAL_GPIO_DeInit+0x1fc>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d01f      	beq.n	800c30a <HAL_GPIO_DeInit+0xc2>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a5e      	ldr	r2, [pc, #376]	@ (800c448 <HAL_GPIO_DeInit+0x200>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d019      	beq.n	800c306 <HAL_GPIO_DeInit+0xbe>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a5d      	ldr	r2, [pc, #372]	@ (800c44c <HAL_GPIO_DeInit+0x204>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d013      	beq.n	800c302 <HAL_GPIO_DeInit+0xba>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a5c      	ldr	r2, [pc, #368]	@ (800c450 <HAL_GPIO_DeInit+0x208>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d00d      	beq.n	800c2fe <HAL_GPIO_DeInit+0xb6>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a5b      	ldr	r2, [pc, #364]	@ (800c454 <HAL_GPIO_DeInit+0x20c>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d007      	beq.n	800c2fa <HAL_GPIO_DeInit+0xb2>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a5a      	ldr	r2, [pc, #360]	@ (800c458 <HAL_GPIO_DeInit+0x210>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d101      	bne.n	800c2f6 <HAL_GPIO_DeInit+0xae>
 800c2f2:	2309      	movs	r3, #9
 800c2f4:	e012      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c2f6:	230a      	movs	r3, #10
 800c2f8:	e010      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c2fa:	2308      	movs	r3, #8
 800c2fc:	e00e      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c2fe:	2307      	movs	r3, #7
 800c300:	e00c      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c302:	2306      	movs	r3, #6
 800c304:	e00a      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c306:	2305      	movs	r3, #5
 800c308:	e008      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c30a:	2304      	movs	r3, #4
 800c30c:	e006      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c30e:	2303      	movs	r3, #3
 800c310:	e004      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c312:	2302      	movs	r3, #2
 800c314:	e002      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c316:	2301      	movs	r3, #1
 800c318:	e000      	b.n	800c31c <HAL_GPIO_DeInit+0xd4>
 800c31a:	2300      	movs	r3, #0
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	f002 0203 	and.w	r2, r2, #3
 800c322:	0092      	lsls	r2, r2, #2
 800c324:	4093      	lsls	r3, r2
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d132      	bne.n	800c392 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c32c:	4b4b      	ldr	r3, [pc, #300]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	43db      	mvns	r3, r3
 800c334:	4949      	ldr	r1, [pc, #292]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c336:	4013      	ands	r3, r2
 800c338:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c33a:	4b48      	ldr	r3, [pc, #288]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	43db      	mvns	r3, r3
 800c342:	4946      	ldr	r1, [pc, #280]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c344:	4013      	ands	r3, r2
 800c346:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c348:	4b44      	ldr	r3, [pc, #272]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c34a:	68da      	ldr	r2, [r3, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	43db      	mvns	r3, r3
 800c350:	4942      	ldr	r1, [pc, #264]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c352:	4013      	ands	r3, r2
 800c354:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c356:	4b41      	ldr	r3, [pc, #260]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c358:	689a      	ldr	r2, [r3, #8]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	43db      	mvns	r3, r3
 800c35e:	493f      	ldr	r1, [pc, #252]	@ (800c45c <HAL_GPIO_DeInit+0x214>)
 800c360:	4013      	ands	r3, r2
 800c362:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f003 0303 	and.w	r3, r3, #3
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	220f      	movs	r2, #15
 800c36e:	fa02 f303 	lsl.w	r3, r2, r3
 800c372:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c374:	4a2e      	ldr	r2, [pc, #184]	@ (800c430 <HAL_GPIO_DeInit+0x1e8>)
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	089b      	lsrs	r3, r3, #2
 800c37a:	3302      	adds	r3, #2
 800c37c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	43da      	mvns	r2, r3
 800c384:	482a      	ldr	r0, [pc, #168]	@ (800c430 <HAL_GPIO_DeInit+0x1e8>)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	089b      	lsrs	r3, r3, #2
 800c38a:	400a      	ands	r2, r1
 800c38c:	3302      	adds	r3, #2
 800c38e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	2103      	movs	r1, #3
 800c39c:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a0:	43db      	mvns	r3, r3
 800c3a2:	401a      	ands	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	08da      	lsrs	r2, r3, #3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3208      	adds	r2, #8
 800c3b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	f003 0307 	and.w	r3, r3, #7
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	220f      	movs	r2, #15
 800c3be:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c2:	43db      	mvns	r3, r3
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	08d2      	lsrs	r2, r2, #3
 800c3c8:	4019      	ands	r1, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3208      	adds	r2, #8
 800c3ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	68da      	ldr	r2, [r3, #12]
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	2103      	movs	r1, #3
 800c3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c3e0:	43db      	mvns	r3, r3
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f4:	43db      	mvns	r3, r3
 800c3f6:	401a      	ands	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	689a      	ldr	r2, [r3, #8]
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	2103      	movs	r1, #3
 800c406:	fa01 f303 	lsl.w	r3, r1, r3
 800c40a:	43db      	mvns	r3, r3
 800c40c:	401a      	ands	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	3301      	adds	r3, #1
 800c416:	617b      	str	r3, [r7, #20]
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b0f      	cmp	r3, #15
 800c41c:	f67f af22 	bls.w	800c264 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c420:	bf00      	nop
 800c422:	bf00      	nop
 800c424:	371c      	adds	r7, #28
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	40013800 	.word	0x40013800
 800c434:	40020000 	.word	0x40020000
 800c438:	40020400 	.word	0x40020400
 800c43c:	40020800 	.word	0x40020800
 800c440:	40020c00 	.word	0x40020c00
 800c444:	40021000 	.word	0x40021000
 800c448:	40021400 	.word	0x40021400
 800c44c:	40021800 	.word	0x40021800
 800c450:	40021c00 	.word	0x40021c00
 800c454:	40022000 	.word	0x40022000
 800c458:	40022400 	.word	0x40022400
 800c45c:	40013c00 	.word	0x40013c00

0800c460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	691a      	ldr	r2, [r3, #16]
 800c470:	887b      	ldrh	r3, [r7, #2]
 800c472:	4013      	ands	r3, r2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c478:	2301      	movs	r3, #1
 800c47a:	73fb      	strb	r3, [r7, #15]
 800c47c:	e001      	b.n	800c482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c482:	7bfb      	ldrb	r3, [r7, #15]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	460b      	mov	r3, r1
 800c49a:	807b      	strh	r3, [r7, #2]
 800c49c:	4613      	mov	r3, r2
 800c49e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c4a0:	787b      	ldrb	r3, [r7, #1]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c4a6:	887a      	ldrh	r2, [r7, #2]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c4ac:	e003      	b.n	800c4b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c4ae:	887b      	ldrh	r3, [r7, #2]
 800c4b0:	041a      	lsls	r2, r3, #16
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	619a      	str	r2, [r3, #24]
}
 800c4b6:	bf00      	nop
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d101      	bne.n	800c4d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e07f      	b.n	800c5d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f8a9 	bl	800c642 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2224      	movs	r2, #36	@ 0x24
 800c4f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f022 0201 	bic.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689a      	ldr	r2, [r3, #8]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d107      	bne.n	800c53e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	689a      	ldr	r2, [r3, #8]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c53a:	609a      	str	r2, [r3, #8]
 800c53c:	e006      	b.n	800c54c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	689a      	ldr	r2, [r3, #8]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c54a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	2b02      	cmp	r3, #2
 800c552:	d104      	bne.n	800c55e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c55c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6859      	ldr	r1, [r3, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	4b1d      	ldr	r3, [pc, #116]	@ (800c5e0 <HAL_I2C_Init+0x11c>)
 800c56a:	430b      	orrs	r3, r1
 800c56c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c57c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	691a      	ldr	r2, [r3, #16]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	699b      	ldr	r3, [r3, #24]
 800c58e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	430a      	orrs	r2, r1
 800c596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	69d9      	ldr	r1, [r3, #28]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a1a      	ldr	r2, [r3, #32]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	430a      	orrs	r2, r1
 800c5a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f042 0201 	orr.w	r2, r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	02008000 	.word	0x02008000

0800c5e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e021      	b.n	800c63a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2224      	movs	r2, #36	@ 0x24
 800c5fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f022 0201 	bic.w	r2, r2, #1
 800c60c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f821 	bl	800c656 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c64a:	bf00      	nop
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c656:	b480      	push	{r7}
 800c658:	b083      	sub	sp, #12
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c65e:	bf00      	nop
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af02      	add	r7, sp, #8
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	4608      	mov	r0, r1
 800c676:	4611      	mov	r1, r2
 800c678:	461a      	mov	r2, r3
 800c67a:	4603      	mov	r3, r0
 800c67c:	817b      	strh	r3, [r7, #10]
 800c67e:	460b      	mov	r3, r1
 800c680:	813b      	strh	r3, [r7, #8]
 800c682:	4613      	mov	r3, r2
 800c684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b20      	cmp	r3, #32
 800c690:	f040 80f9 	bne.w	800c886 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c694:	6a3b      	ldr	r3, [r7, #32]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d002      	beq.n	800c6a0 <HAL_I2C_Mem_Write+0x34>
 800c69a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d105      	bne.n	800c6ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e0ed      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d101      	bne.n	800c6ba <HAL_I2C_Mem_Write+0x4e>
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e0e6      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c6c2:	f7fe f879 	bl	800a7b8 <HAL_GetTick>
 800c6c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	2319      	movs	r3, #25
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 fad1 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e0d1      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2221      	movs	r2, #33	@ 0x21
 800c6e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2240      	movs	r2, #64	@ 0x40
 800c6f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6a3a      	ldr	r2, [r7, #32]
 800c6fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c70c:	88f8      	ldrh	r0, [r7, #6]
 800c70e:	893a      	ldrh	r2, [r7, #8]
 800c710:	8979      	ldrh	r1, [r7, #10]
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	4603      	mov	r3, r0
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f000 f9e1 	bl	800cae4 <I2C_RequestMemoryWrite>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	e0a9      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c738:	b29b      	uxth	r3, r3
 800c73a:	2bff      	cmp	r3, #255	@ 0xff
 800c73c:	d90e      	bls.n	800c75c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	22ff      	movs	r2, #255	@ 0xff
 800c742:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	8979      	ldrh	r1, [r7, #10]
 800c74c:	2300      	movs	r3, #0
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f000 fc2d 	bl	800cfb4 <I2C_TransferConfig>
 800c75a:	e00f      	b.n	800c77c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c760:	b29a      	uxth	r2, r3
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	8979      	ldrh	r1, [r7, #10]
 800c76e:	2300      	movs	r3, #0
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f000 fc1c 	bl	800cfb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 fabb 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d001      	beq.n	800c790 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e07b      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c794:	781a      	ldrb	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d034      	beq.n	800c834 <HAL_I2C_Mem_Write+0x1c8>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d130      	bne.n	800c834 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d8:	2200      	movs	r2, #0
 800c7da:	2180      	movs	r1, #128	@ 0x80
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fa4d 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e04d      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	2bff      	cmp	r3, #255	@ 0xff
 800c7f4:	d90e      	bls.n	800c814 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	22ff      	movs	r2, #255	@ 0xff
 800c7fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c800:	b2da      	uxtb	r2, r3
 800c802:	8979      	ldrh	r1, [r7, #10]
 800c804:	2300      	movs	r3, #0
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 fbd1 	bl	800cfb4 <I2C_TransferConfig>
 800c812:	e00f      	b.n	800c834 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c818:	b29a      	uxth	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c822:	b2da      	uxtb	r2, r3
 800c824:	8979      	ldrh	r1, [r7, #10]
 800c826:	2300      	movs	r3, #0
 800c828:	9300      	str	r3, [sp, #0]
 800c82a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f000 fbc0 	bl	800cfb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c838:	b29b      	uxth	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d19e      	bne.n	800c77c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f000 fa9a 	bl	800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	e01a      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2220      	movs	r2, #32
 800c858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6859      	ldr	r1, [r3, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	4b0a      	ldr	r3, [pc, #40]	@ (800c890 <HAL_I2C_Mem_Write+0x224>)
 800c866:	400b      	ands	r3, r1
 800c868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2220      	movs	r2, #32
 800c86e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	e000      	b.n	800c888 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c886:	2302      	movs	r3, #2
  }
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	fe00e800 	.word	0xfe00e800

0800c894 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af02      	add	r7, sp, #8
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	4608      	mov	r0, r1
 800c89e:	4611      	mov	r1, r2
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	817b      	strh	r3, [r7, #10]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	813b      	strh	r3, [r7, #8]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	f040 80fd 	bne.w	800cab6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <HAL_I2C_Mem_Read+0x34>
 800c8c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d105      	bne.n	800c8d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e0f1      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d101      	bne.n	800c8e2 <HAL_I2C_Mem_Read+0x4e>
 800c8de:	2302      	movs	r3, #2
 800c8e0:	e0ea      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c8ea:	f7fd ff65 	bl	800a7b8 <HAL_GetTick>
 800c8ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	2319      	movs	r3, #25
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f000 f9bd 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c908:	2301      	movs	r3, #1
 800c90a:	e0d5      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2222      	movs	r2, #34	@ 0x22
 800c910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2240      	movs	r2, #64	@ 0x40
 800c918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6a3a      	ldr	r2, [r7, #32]
 800c926:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c92c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c934:	88f8      	ldrh	r0, [r7, #6]
 800c936:	893a      	ldrh	r2, [r7, #8]
 800c938:	8979      	ldrh	r1, [r7, #10]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	4603      	mov	r3, r0
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 f921 	bl	800cb8c <I2C_RequestMemoryRead>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d005      	beq.n	800c95c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	e0ad      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c960:	b29b      	uxth	r3, r3
 800c962:	2bff      	cmp	r3, #255	@ 0xff
 800c964:	d90e      	bls.n	800c984 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	22ff      	movs	r2, #255	@ 0xff
 800c96a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c970:	b2da      	uxtb	r2, r3
 800c972:	8979      	ldrh	r1, [r7, #10]
 800c974:	4b52      	ldr	r3, [pc, #328]	@ (800cac0 <HAL_I2C_Mem_Read+0x22c>)
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 fb19 	bl	800cfb4 <I2C_TransferConfig>
 800c982:	e00f      	b.n	800c9a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c988:	b29a      	uxth	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c992:	b2da      	uxtb	r2, r3
 800c994:	8979      	ldrh	r1, [r7, #10]
 800c996:	4b4a      	ldr	r3, [pc, #296]	@ (800cac0 <HAL_I2C_Mem_Read+0x22c>)
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f000 fb08 	bl	800cfb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2104      	movs	r1, #4
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f000 f964 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e07c      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c8:	b2d2      	uxtb	r2, r2
 800c9ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d0:	1c5a      	adds	r2, r3, #1
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d034      	beq.n	800ca64 <HAL_I2C_Mem_Read+0x1d0>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d130      	bne.n	800ca64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2180      	movs	r1, #128	@ 0x80
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f000 f935 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e04d      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2bff      	cmp	r3, #255	@ 0xff
 800ca24:	d90e      	bls.n	800ca44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	22ff      	movs	r2, #255	@ 0xff
 800ca2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	8979      	ldrh	r1, [r7, #10]
 800ca34:	2300      	movs	r3, #0
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 fab9 	bl	800cfb4 <I2C_TransferConfig>
 800ca42:	e00f      	b.n	800ca64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	8979      	ldrh	r1, [r7, #10]
 800ca56:	2300      	movs	r3, #0
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f000 faa8 	bl	800cfb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d19a      	bne.n	800c9a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 f982 	bl	800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e01a      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2220      	movs	r2, #32
 800ca88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6859      	ldr	r1, [r3, #4]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	4b0b      	ldr	r3, [pc, #44]	@ (800cac4 <HAL_I2C_Mem_Read+0x230>)
 800ca96:	400b      	ands	r3, r1
 800ca98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	e000      	b.n	800cab8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800cab6:	2302      	movs	r3, #2
  }
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3718      	adds	r7, #24
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	80002400 	.word	0x80002400
 800cac4:	fe00e800 	.word	0xfe00e800

0800cac8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cad6:	b2db      	uxtb	r3, r3
}
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af02      	add	r7, sp, #8
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	4608      	mov	r0, r1
 800caee:	4611      	mov	r1, r2
 800caf0:	461a      	mov	r2, r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	817b      	strh	r3, [r7, #10]
 800caf6:	460b      	mov	r3, r1
 800caf8:	813b      	strh	r3, [r7, #8]
 800cafa:	4613      	mov	r3, r2
 800cafc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800cafe:	88fb      	ldrh	r3, [r7, #6]
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	8979      	ldrh	r1, [r7, #10]
 800cb04:	4b20      	ldr	r3, [pc, #128]	@ (800cb88 <I2C_RequestMemoryWrite+0xa4>)
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f000 fa51 	bl	800cfb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb12:	69fa      	ldr	r2, [r7, #28]
 800cb14:	69b9      	ldr	r1, [r7, #24]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f8f0 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e02c      	b.n	800cb80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d105      	bne.n	800cb38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb2c:	893b      	ldrh	r3, [r7, #8]
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	629a      	str	r2, [r3, #40]	@ 0x28
 800cb36:	e015      	b.n	800cb64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cb38:	893b      	ldrh	r3, [r7, #8]
 800cb3a:	0a1b      	lsrs	r3, r3, #8
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb46:	69fa      	ldr	r2, [r7, #28]
 800cb48:	69b9      	ldr	r1, [r7, #24]
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 f8d6 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e012      	b.n	800cb80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb5a:	893b      	ldrh	r3, [r7, #8]
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2180      	movs	r1, #128	@ 0x80
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f000 f884 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e000      	b.n	800cb80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	80002000 	.word	0x80002000

0800cb8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	4608      	mov	r0, r1
 800cb96:	4611      	mov	r1, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	817b      	strh	r3, [r7, #10]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	813b      	strh	r3, [r7, #8]
 800cba2:	4613      	mov	r3, r2
 800cba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800cba6:	88fb      	ldrh	r3, [r7, #6]
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	8979      	ldrh	r1, [r7, #10]
 800cbac:	4b20      	ldr	r3, [pc, #128]	@ (800cc30 <I2C_RequestMemoryRead+0xa4>)
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 f9fe 	bl	800cfb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbb8:	69fa      	ldr	r2, [r7, #28]
 800cbba:	69b9      	ldr	r1, [r7, #24]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 f89d 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e02c      	b.n	800cc26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cbcc:	88fb      	ldrh	r3, [r7, #6]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d105      	bne.n	800cbde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cbd2:	893b      	ldrh	r3, [r7, #8]
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	629a      	str	r2, [r3, #40]	@ 0x28
 800cbdc:	e015      	b.n	800cc0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cbde:	893b      	ldrh	r3, [r7, #8]
 800cbe0:	0a1b      	lsrs	r3, r3, #8
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbec:	69fa      	ldr	r2, [r7, #28]
 800cbee:	69b9      	ldr	r1, [r7, #24]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f000 f883 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e012      	b.n	800cc26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cc00:	893b      	ldrh	r3, [r7, #8]
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2200      	movs	r2, #0
 800cc12:	2140      	movs	r1, #64	@ 0x40
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f831 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e000      	b.n	800cc26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	80002000 	.word	0x80002000

0800cc34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	f003 0302 	and.w	r3, r3, #2
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d103      	bne.n	800cc52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	f003 0301 	and.w	r3, r3, #1
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d007      	beq.n	800cc70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	699a      	ldr	r2, [r3, #24]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f042 0201 	orr.w	r2, r2, #1
 800cc6e:	619a      	str	r2, [r3, #24]
  }
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc8c:	e022      	b.n	800ccd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc94:	d01e      	beq.n	800ccd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc96:	f7fd fd8f 	bl	800a7b8 <HAL_GetTick>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d302      	bcc.n	800ccac <I2C_WaitOnFlagUntilTimeout+0x30>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d113      	bne.n	800ccd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccb0:	f043 0220 	orr.w	r2, r3, #32
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e00f      	b.n	800ccf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	699a      	ldr	r2, [r3, #24]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	4013      	ands	r3, r2
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	bf0c      	ite	eq
 800cce4:	2301      	moveq	r3, #1
 800cce6:	2300      	movne	r3, #0
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	461a      	mov	r2, r3
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d0cd      	beq.n	800cc8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cd08:	e02c      	b.n	800cd64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	68b9      	ldr	r1, [r7, #8]
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f000 f870 	bl	800cdf4 <I2C_IsErrorOccurred>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e02a      	b.n	800cd74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd24:	d01e      	beq.n	800cd64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd26:	f7fd fd47 	bl	800a7b8 <HAL_GetTick>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d302      	bcc.n	800cd3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d113      	bne.n	800cd64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd40:	f043 0220 	orr.w	r2, r3, #32
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2220      	movs	r2, #32
 800cd4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e007      	b.n	800cd74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	699b      	ldr	r3, [r3, #24]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d1cb      	bne.n	800cd0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd88:	e028      	b.n	800cddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	68b9      	ldr	r1, [r7, #8]
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f000 f830 	bl	800cdf4 <I2C_IsErrorOccurred>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e026      	b.n	800cdec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd9e:	f7fd fd0b 	bl	800a7b8 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d302      	bcc.n	800cdb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d113      	bne.n	800cddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb8:	f043 0220 	orr.w	r2, r3, #32
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2220      	movs	r2, #32
 800cdc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e007      	b.n	800cdec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b20      	cmp	r3, #32
 800cde8:	d1cf      	bne.n	800cd8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b08a      	sub	sp, #40	@ 0x28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	f003 0310 	and.w	r3, r3, #16
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d068      	beq.n	800cef2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2210      	movs	r2, #16
 800ce26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ce28:	e049      	b.n	800cebe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce30:	d045      	beq.n	800cebe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ce32:	f7fd fcc1 	bl	800a7b8 <HAL_GetTick>
 800ce36:	4602      	mov	r2, r0
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d302      	bcc.n	800ce48 <I2C_IsErrorOccurred+0x54>
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d13a      	bne.n	800cebe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	699b      	ldr	r3, [r3, #24]
 800ce62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce6a:	d121      	bne.n	800ceb0 <I2C_IsErrorOccurred+0xbc>
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce72:	d01d      	beq.n	800ceb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ce74:	7cfb      	ldrb	r3, [r7, #19]
 800ce76:	2b20      	cmp	r3, #32
 800ce78:	d01a      	beq.n	800ceb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ce8a:	f7fd fc95 	bl	800a7b8 <HAL_GetTick>
 800ce8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ce90:	e00e      	b.n	800ceb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ce92:	f7fd fc91 	bl	800a7b8 <HAL_GetTick>
 800ce96:	4602      	mov	r2, r0
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	2b19      	cmp	r3, #25
 800ce9e:	d907      	bls.n	800ceb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	f043 0320 	orr.w	r3, r3, #32
 800cea6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ceae:	e006      	b.n	800cebe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	f003 0320 	and.w	r3, r3, #32
 800ceba:	2b20      	cmp	r3, #32
 800cebc:	d1e9      	bne.n	800ce92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	699b      	ldr	r3, [r3, #24]
 800cec4:	f003 0320 	and.w	r3, r3, #32
 800cec8:	2b20      	cmp	r3, #32
 800ceca:	d003      	beq.n	800ced4 <I2C_IsErrorOccurred+0xe0>
 800cecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d0aa      	beq.n	800ce2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ced4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d103      	bne.n	800cee4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2220      	movs	r2, #32
 800cee2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	f043 0304 	orr.w	r3, r3, #4
 800ceea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ceec:	2301      	movs	r3, #1
 800ceee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00b      	beq.n	800cf1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	f043 0301 	orr.w	r3, r3, #1
 800cf0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00b      	beq.n	800cf3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	f043 0308 	orr.w	r3, r3, #8
 800cf2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cf36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	f043 0302 	orr.w	r3, r3, #2
 800cf4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800cf60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d01c      	beq.n	800cfa2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f7ff fe63 	bl	800cc34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	6859      	ldr	r1, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb0 <I2C_IsErrorOccurred+0x1bc>)
 800cf7a:	400b      	ands	r3, r1
 800cf7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf82:	6a3b      	ldr	r3, [r7, #32]
 800cf84:	431a      	orrs	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800cfa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3728      	adds	r7, #40	@ 0x28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	fe00e800 	.word	0xfe00e800

0800cfb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	607b      	str	r3, [r7, #4]
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	817b      	strh	r3, [r7, #10]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cfc6:	897b      	ldrh	r3, [r7, #10]
 800cfc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cfcc:	7a7b      	ldrb	r3, [r7, #9]
 800cfce:	041b      	lsls	r3, r3, #16
 800cfd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cfd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cfe2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	685a      	ldr	r2, [r3, #4]
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	0d5b      	lsrs	r3, r3, #21
 800cfee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800cff2:	4b08      	ldr	r3, [pc, #32]	@ (800d014 <I2C_TransferConfig+0x60>)
 800cff4:	430b      	orrs	r3, r1
 800cff6:	43db      	mvns	r3, r3
 800cff8:	ea02 0103 	and.w	r1, r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	430a      	orrs	r2, r1
 800d004:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d006:	bf00      	nop
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	03ff63ff 	.word	0x03ff63ff

0800d018 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	e0bf      	b.n	800d1aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b00      	cmp	r3, #0
 800d034:	d106      	bne.n	800d044 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7fb f938 	bl	80082b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2202      	movs	r2, #2
 800d048:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	699a      	ldr	r2, [r3, #24]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800d05a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6999      	ldr	r1, [r3, #24]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685a      	ldr	r2, [r3, #4]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d070:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	430a      	orrs	r2, r1
 800d07e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6899      	ldr	r1, [r3, #8]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	4b4a      	ldr	r3, [pc, #296]	@ (800d1b4 <HAL_LTDC_Init+0x19c>)
 800d08c:	400b      	ands	r3, r1
 800d08e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	695b      	ldr	r3, [r3, #20]
 800d094:	041b      	lsls	r3, r3, #16
 800d096:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6899      	ldr	r1, [r3, #8]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	699a      	ldr	r2, [r3, #24]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	431a      	orrs	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	430a      	orrs	r2, r1
 800d0ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68d9      	ldr	r1, [r3, #12]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	4b3e      	ldr	r3, [pc, #248]	@ (800d1b4 <HAL_LTDC_Init+0x19c>)
 800d0ba:	400b      	ands	r3, r1
 800d0bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	69db      	ldr	r3, [r3, #28]
 800d0c2:	041b      	lsls	r3, r3, #16
 800d0c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68d9      	ldr	r1, [r3, #12]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6a1a      	ldr	r2, [r3, #32]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	430a      	orrs	r2, r1
 800d0da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6919      	ldr	r1, [r3, #16]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	4b33      	ldr	r3, [pc, #204]	@ (800d1b4 <HAL_LTDC_Init+0x19c>)
 800d0e8:	400b      	ands	r3, r1
 800d0ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f0:	041b      	lsls	r3, r3, #16
 800d0f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6919      	ldr	r1, [r3, #16]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	431a      	orrs	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	430a      	orrs	r2, r1
 800d108:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6959      	ldr	r1, [r3, #20]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	4b27      	ldr	r3, [pc, #156]	@ (800d1b4 <HAL_LTDC_Init+0x19c>)
 800d116:	400b      	ands	r3, r1
 800d118:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11e:	041b      	lsls	r3, r3, #16
 800d120:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6959      	ldr	r1, [r3, #20]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	431a      	orrs	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	430a      	orrs	r2, r1
 800d136:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d13e:	021b      	lsls	r3, r3, #8
 800d140:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d148:	041b      	lsls	r3, r3, #16
 800d14a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800d15a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4313      	orrs	r3, r2
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800d16e:	431a      	orrs	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	430a      	orrs	r2, r1
 800d176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f042 0206 	orr.w	r2, r2, #6
 800d186:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	699a      	ldr	r2, [r3, #24]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f042 0201 	orr.w	r2, r2, #1
 800d196:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	f000f800 	.word	0xf000f800

0800d1b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f003 0304 	and.w	r3, r3, #4
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d023      	beq.n	800d222 <HAL_LTDC_IRQHandler+0x6a>
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	f003 0304 	and.w	r3, r3, #4
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01e      	beq.n	800d222 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f022 0204 	bic.w	r2, r2, #4
 800d1f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2204      	movs	r2, #4
 800d1fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d202:	f043 0201 	orr.w	r2, r3, #1
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2204      	movs	r2, #4
 800d210:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f86f 	bl	800d300 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f003 0302 	and.w	r3, r3, #2
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d023      	beq.n	800d274 <HAL_LTDC_IRQHandler+0xbc>
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	f003 0302 	and.w	r3, r3, #2
 800d232:	2b00      	cmp	r3, #0
 800d234:	d01e      	beq.n	800d274 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f022 0202 	bic.w	r2, r2, #2
 800d244:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2202      	movs	r2, #2
 800d24c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d254:	f043 0202 	orr.w	r2, r3, #2
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2204      	movs	r2, #4
 800d262:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f846 	bl	800d300 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d01b      	beq.n	800d2b6 <HAL_LTDC_IRQHandler+0xfe>
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	2b00      	cmp	r3, #0
 800d286:	d016      	beq.n	800d2b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f022 0201 	bic.w	r2, r2, #1
 800d296:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2201      	movs	r2, #1
 800d29e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 f82f 	bl	800d314 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f003 0308 	and.w	r3, r3, #8
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01b      	beq.n	800d2f8 <HAL_LTDC_IRQHandler+0x140>
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	f003 0308 	and.w	r3, r3, #8
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d016      	beq.n	800d2f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f022 0208 	bic.w	r2, r2, #8
 800d2d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2208      	movs	r2, #8
 800d2e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 f818 	bl	800d328 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d2f8:	bf00      	nop
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d33c:	b5b0      	push	{r4, r5, r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d101      	bne.n	800d356 <HAL_LTDC_ConfigLayer+0x1a>
 800d352:	2302      	movs	r3, #2
 800d354:	e02c      	b.n	800d3b0 <HAL_LTDC_ConfigLayer+0x74>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2202      	movs	r2, #2
 800d362:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2134      	movs	r1, #52	@ 0x34
 800d36c:	fb01 f303 	mul.w	r3, r1, r3
 800d370:	4413      	add	r3, r2
 800d372:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	4614      	mov	r4, r2
 800d37a:	461d      	mov	r5, r3
 800d37c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d37e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	68b9      	ldr	r1, [r7, #8]
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	f000 f81f 	bl	800d3d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2201      	movs	r2, #1
 800d39c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bdb0      	pop	{r4, r5, r7, pc}

0800d3b8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d3c6:	b2db      	uxtb	r3, r3
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b089      	sub	sp, #36	@ 0x24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	685a      	ldr	r2, [r3, #4]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	0c1b      	lsrs	r3, r3, #16
 800d3ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3f0:	4413      	add	r3, r2
 800d3f2:	041b      	lsls	r3, r3, #16
 800d3f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	01db      	lsls	r3, r3, #7
 800d400:	4413      	add	r3, r2
 800d402:	3384      	adds	r3, #132	@ 0x84
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	6812      	ldr	r2, [r2, #0]
 800d40a:	4611      	mov	r1, r2
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	01d2      	lsls	r2, r2, #7
 800d410:	440a      	add	r2, r1
 800d412:	3284      	adds	r2, #132	@ 0x84
 800d414:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800d418:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	0c1b      	lsrs	r3, r3, #16
 800d426:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d42a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d42c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4619      	mov	r1, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	01db      	lsls	r3, r3, #7
 800d438:	440b      	add	r3, r1
 800d43a:	3384      	adds	r3, #132	@ 0x84
 800d43c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d442:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	68da      	ldr	r2, [r3, #12]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d452:	4413      	add	r3, r2
 800d454:	041b      	lsls	r3, r3, #16
 800d456:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	01db      	lsls	r3, r3, #7
 800d462:	4413      	add	r3, r2
 800d464:	3384      	adds	r3, #132	@ 0x84
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	6812      	ldr	r2, [r2, #0]
 800d46c:	4611      	mov	r1, r2
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	01d2      	lsls	r2, r2, #7
 800d472:	440a      	add	r2, r1
 800d474:	3284      	adds	r2, #132	@ 0x84
 800d476:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800d47a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d48a:	4413      	add	r3, r2
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4619      	mov	r1, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	01db      	lsls	r3, r3, #7
 800d498:	440b      	add	r3, r1
 800d49a:	3384      	adds	r3, #132	@ 0x84
 800d49c:	4619      	mov	r1, r3
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	01db      	lsls	r3, r3, #7
 800d4ae:	4413      	add	r3, r2
 800d4b0:	3384      	adds	r3, #132	@ 0x84
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	6812      	ldr	r2, [r2, #0]
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	01d2      	lsls	r2, r2, #7
 800d4be:	440a      	add	r2, r1
 800d4c0:	3284      	adds	r2, #132	@ 0x84
 800d4c2:	f023 0307 	bic.w	r3, r3, #7
 800d4c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	01db      	lsls	r3, r3, #7
 800d4d2:	4413      	add	r3, r2
 800d4d4:	3384      	adds	r3, #132	@ 0x84
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d4e4:	021b      	lsls	r3, r3, #8
 800d4e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d4ee:	041b      	lsls	r3, r3, #16
 800d4f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	061b      	lsls	r3, r3, #24
 800d4f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	01db      	lsls	r3, r3, #7
 800d504:	4413      	add	r3, r2
 800d506:	3384      	adds	r3, #132	@ 0x84
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	461a      	mov	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	01db      	lsls	r3, r3, #7
 800d514:	4413      	add	r3, r2
 800d516:	3384      	adds	r3, #132	@ 0x84
 800d518:	461a      	mov	r2, r3
 800d51a:	2300      	movs	r3, #0
 800d51c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d524:	461a      	mov	r2, r3
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	431a      	orrs	r2, r3
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	431a      	orrs	r2, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4619      	mov	r1, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	01db      	lsls	r3, r3, #7
 800d538:	440b      	add	r3, r1
 800d53a:	3384      	adds	r3, #132	@ 0x84
 800d53c:	4619      	mov	r1, r3
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	4313      	orrs	r3, r2
 800d542:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	461a      	mov	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	01db      	lsls	r3, r3, #7
 800d54e:	4413      	add	r3, r2
 800d550:	3384      	adds	r3, #132	@ 0x84
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	6812      	ldr	r2, [r2, #0]
 800d558:	4611      	mov	r1, r2
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	01d2      	lsls	r2, r2, #7
 800d55e:	440a      	add	r2, r1
 800d560:	3284      	adds	r2, #132	@ 0x84
 800d562:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d566:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	01db      	lsls	r3, r3, #7
 800d572:	4413      	add	r3, r2
 800d574:	3384      	adds	r3, #132	@ 0x84
 800d576:	461a      	mov	r2, r3
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	461a      	mov	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	01db      	lsls	r3, r3, #7
 800d588:	4413      	add	r3, r2
 800d58a:	3384      	adds	r3, #132	@ 0x84
 800d58c:	69da      	ldr	r2, [r3, #28]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4619      	mov	r1, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	01db      	lsls	r3, r3, #7
 800d598:	440b      	add	r3, r1
 800d59a:	3384      	adds	r3, #132	@ 0x84
 800d59c:	4619      	mov	r1, r3
 800d59e:	4b58      	ldr	r3, [pc, #352]	@ (800d700 <LTDC_SetConfig+0x32c>)
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	69da      	ldr	r2, [r3, #28]
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	68f9      	ldr	r1, [r7, #12]
 800d5ae:	6809      	ldr	r1, [r1, #0]
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	01c9      	lsls	r1, r1, #7
 800d5b6:	4401      	add	r1, r0
 800d5b8:	3184      	adds	r1, #132	@ 0x84
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	01db      	lsls	r3, r3, #7
 800d5c8:	4413      	add	r3, r2
 800d5ca:	3384      	adds	r3, #132	@ 0x84
 800d5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	01db      	lsls	r3, r3, #7
 800d5d8:	4413      	add	r3, r2
 800d5da:	3384      	adds	r3, #132	@ 0x84
 800d5dc:	461a      	mov	r2, r3
 800d5de:	2300      	movs	r3, #0
 800d5e0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	01db      	lsls	r3, r3, #7
 800d5ec:	4413      	add	r3, r2
 800d5ee:	3384      	adds	r3, #132	@ 0x84
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d102      	bne.n	800d606 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800d600:	2304      	movs	r3, #4
 800d602:	61fb      	str	r3, [r7, #28]
 800d604:	e01b      	b.n	800d63e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d102      	bne.n	800d614 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800d60e:	2303      	movs	r3, #3
 800d610:	61fb      	str	r3, [r7, #28]
 800d612:	e014      	b.n	800d63e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	2b04      	cmp	r3, #4
 800d61a:	d00b      	beq.n	800d634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d620:	2b02      	cmp	r3, #2
 800d622:	d007      	beq.n	800d634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d628:	2b03      	cmp	r3, #3
 800d62a:	d003      	beq.n	800d634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d630:	2b07      	cmp	r3, #7
 800d632:	d102      	bne.n	800d63a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800d634:	2302      	movs	r3, #2
 800d636:	61fb      	str	r3, [r7, #28]
 800d638:	e001      	b.n	800d63e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800d63a:	2301      	movs	r3, #1
 800d63c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	01db      	lsls	r3, r3, #7
 800d648:	4413      	add	r3, r2
 800d64a:	3384      	adds	r3, #132	@ 0x84
 800d64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	6812      	ldr	r2, [r2, #0]
 800d652:	4611      	mov	r1, r2
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	01d2      	lsls	r2, r2, #7
 800d658:	440a      	add	r2, r1
 800d65a:	3284      	adds	r2, #132	@ 0x84
 800d65c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800d660:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d666:	69fa      	ldr	r2, [r7, #28]
 800d668:	fb02 f303 	mul.w	r3, r2, r3
 800d66c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6859      	ldr	r1, [r3, #4]
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	1acb      	subs	r3, r1, r3
 800d678:	69f9      	ldr	r1, [r7, #28]
 800d67a:	fb01 f303 	mul.w	r3, r1, r3
 800d67e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d680:	68f9      	ldr	r1, [r7, #12]
 800d682:	6809      	ldr	r1, [r1, #0]
 800d684:	4608      	mov	r0, r1
 800d686:	6879      	ldr	r1, [r7, #4]
 800d688:	01c9      	lsls	r1, r1, #7
 800d68a:	4401      	add	r1, r0
 800d68c:	3184      	adds	r1, #132	@ 0x84
 800d68e:	4313      	orrs	r3, r2
 800d690:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	01db      	lsls	r3, r3, #7
 800d69c:	4413      	add	r3, r2
 800d69e:	3384      	adds	r3, #132	@ 0x84
 800d6a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	01db      	lsls	r3, r3, #7
 800d6ac:	440b      	add	r3, r1
 800d6ae:	3384      	adds	r3, #132	@ 0x84
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4b14      	ldr	r3, [pc, #80]	@ (800d704 <LTDC_SetConfig+0x330>)
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	01db      	lsls	r3, r3, #7
 800d6c2:	4413      	add	r3, r2
 800d6c4:	3384      	adds	r3, #132	@ 0x84
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	01db      	lsls	r3, r3, #7
 800d6d8:	4413      	add	r3, r2
 800d6da:	3384      	adds	r3, #132	@ 0x84
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	6812      	ldr	r2, [r2, #0]
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	01d2      	lsls	r2, r2, #7
 800d6e8:	440a      	add	r2, r1
 800d6ea:	3284      	adds	r2, #132	@ 0x84
 800d6ec:	f043 0301 	orr.w	r3, r3, #1
 800d6f0:	6013      	str	r3, [r2, #0]
}
 800d6f2:	bf00      	nop
 800d6f4:	3724      	adds	r7, #36	@ 0x24
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	fffff8f8 	.word	0xfffff8f8
 800d704:	fffff800 	.word	0xfffff800

0800d708 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d708:	b480      	push	{r7}
 800d70a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d70c:	4b05      	ldr	r3, [pc, #20]	@ (800d724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a04      	ldr	r2, [pc, #16]	@ (800d724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d716:	6013      	str	r3, [r2, #0]
}
 800d718:	bf00      	nop
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	40007000 	.word	0x40007000

0800d728 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d732:	4b23      	ldr	r3, [pc, #140]	@ (800d7c0 <HAL_PWREx_EnableOverDrive+0x98>)
 800d734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d736:	4a22      	ldr	r2, [pc, #136]	@ (800d7c0 <HAL_PWREx_EnableOverDrive+0x98>)
 800d738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d73c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d73e:	4b20      	ldr	r3, [pc, #128]	@ (800d7c0 <HAL_PWREx_EnableOverDrive+0x98>)
 800d740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d746:	603b      	str	r3, [r7, #0]
 800d748:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d74a:	4b1e      	ldr	r3, [pc, #120]	@ (800d7c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a1d      	ldr	r2, [pc, #116]	@ (800d7c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d754:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d756:	f7fd f82f 	bl	800a7b8 <HAL_GetTick>
 800d75a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d75c:	e009      	b.n	800d772 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d75e:	f7fd f82b 	bl	800a7b8 <HAL_GetTick>
 800d762:	4602      	mov	r2, r0
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d76c:	d901      	bls.n	800d772 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d76e:	2303      	movs	r3, #3
 800d770:	e022      	b.n	800d7b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d772:	4b14      	ldr	r3, [pc, #80]	@ (800d7c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d77a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d77e:	d1ee      	bne.n	800d75e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d780:	4b10      	ldr	r3, [pc, #64]	@ (800d7c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a0f      	ldr	r2, [pc, #60]	@ (800d7c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d78a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d78c:	f7fd f814 	bl	800a7b8 <HAL_GetTick>
 800d790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d792:	e009      	b.n	800d7a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d794:	f7fd f810 	bl	800a7b8 <HAL_GetTick>
 800d798:	4602      	mov	r2, r0
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d7a2:	d901      	bls.n	800d7a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	e007      	b.n	800d7b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d7a8:	4b06      	ldr	r3, [pc, #24]	@ (800d7c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7b4:	d1ee      	bne.n	800d794 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	40023800 	.word	0x40023800
 800d7c4:	40007000 	.word	0x40007000

0800d7c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e291      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f000 8087 	beq.w	800d8fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d7ec:	4b96      	ldr	r3, [pc, #600]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f003 030c 	and.w	r3, r3, #12
 800d7f4:	2b04      	cmp	r3, #4
 800d7f6:	d00c      	beq.n	800d812 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d7f8:	4b93      	ldr	r3, [pc, #588]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	f003 030c 	and.w	r3, r3, #12
 800d800:	2b08      	cmp	r3, #8
 800d802:	d112      	bne.n	800d82a <HAL_RCC_OscConfig+0x62>
 800d804:	4b90      	ldr	r3, [pc, #576]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d80c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d810:	d10b      	bne.n	800d82a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d812:	4b8d      	ldr	r3, [pc, #564]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d06c      	beq.n	800d8f8 <HAL_RCC_OscConfig+0x130>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d168      	bne.n	800d8f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e26b      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d832:	d106      	bne.n	800d842 <HAL_RCC_OscConfig+0x7a>
 800d834:	4b84      	ldr	r3, [pc, #528]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a83      	ldr	r2, [pc, #524]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d83a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	e02e      	b.n	800d8a0 <HAL_RCC_OscConfig+0xd8>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10c      	bne.n	800d864 <HAL_RCC_OscConfig+0x9c>
 800d84a:	4b7f      	ldr	r3, [pc, #508]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a7e      	ldr	r2, [pc, #504]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	4b7c      	ldr	r3, [pc, #496]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a7b      	ldr	r2, [pc, #492]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d85c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d860:	6013      	str	r3, [r2, #0]
 800d862:	e01d      	b.n	800d8a0 <HAL_RCC_OscConfig+0xd8>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d86c:	d10c      	bne.n	800d888 <HAL_RCC_OscConfig+0xc0>
 800d86e:	4b76      	ldr	r3, [pc, #472]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a75      	ldr	r2, [pc, #468]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	4b73      	ldr	r3, [pc, #460]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a72      	ldr	r2, [pc, #456]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d884:	6013      	str	r3, [r2, #0]
 800d886:	e00b      	b.n	800d8a0 <HAL_RCC_OscConfig+0xd8>
 800d888:	4b6f      	ldr	r3, [pc, #444]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a6e      	ldr	r2, [pc, #440]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d88e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d892:	6013      	str	r3, [r2, #0]
 800d894:	4b6c      	ldr	r3, [pc, #432]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a6b      	ldr	r2, [pc, #428]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d89a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d89e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d013      	beq.n	800d8d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8a8:	f7fc ff86 	bl	800a7b8 <HAL_GetTick>
 800d8ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d8ae:	e008      	b.n	800d8c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d8b0:	f7fc ff82 	bl	800a7b8 <HAL_GetTick>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	2b64      	cmp	r3, #100	@ 0x64
 800d8bc:	d901      	bls.n	800d8c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d8be:	2303      	movs	r3, #3
 800d8c0:	e21f      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d8c2:	4b61      	ldr	r3, [pc, #388]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d0f0      	beq.n	800d8b0 <HAL_RCC_OscConfig+0xe8>
 800d8ce:	e014      	b.n	800d8fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8d0:	f7fc ff72 	bl	800a7b8 <HAL_GetTick>
 800d8d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8d6:	e008      	b.n	800d8ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d8d8:	f7fc ff6e 	bl	800a7b8 <HAL_GetTick>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	2b64      	cmp	r3, #100	@ 0x64
 800d8e4:	d901      	bls.n	800d8ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	e20b      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8ea:	4b57      	ldr	r3, [pc, #348]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1f0      	bne.n	800d8d8 <HAL_RCC_OscConfig+0x110>
 800d8f6:	e000      	b.n	800d8fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f003 0302 	and.w	r3, r3, #2
 800d902:	2b00      	cmp	r3, #0
 800d904:	d069      	beq.n	800d9da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d906:	4b50      	ldr	r3, [pc, #320]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f003 030c 	and.w	r3, r3, #12
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00b      	beq.n	800d92a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d912:	4b4d      	ldr	r3, [pc, #308]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	f003 030c 	and.w	r3, r3, #12
 800d91a:	2b08      	cmp	r3, #8
 800d91c:	d11c      	bne.n	800d958 <HAL_RCC_OscConfig+0x190>
 800d91e:	4b4a      	ldr	r3, [pc, #296]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d116      	bne.n	800d958 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d92a:	4b47      	ldr	r3, [pc, #284]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 0302 	and.w	r3, r3, #2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d005      	beq.n	800d942 <HAL_RCC_OscConfig+0x17a>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d001      	beq.n	800d942 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e1df      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d942:	4b41      	ldr	r3, [pc, #260]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	493d      	ldr	r1, [pc, #244]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d952:	4313      	orrs	r3, r2
 800d954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d956:	e040      	b.n	800d9da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d023      	beq.n	800d9a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d960:	4b39      	ldr	r3, [pc, #228]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a38      	ldr	r2, [pc, #224]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d966:	f043 0301 	orr.w	r3, r3, #1
 800d96a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d96c:	f7fc ff24 	bl	800a7b8 <HAL_GetTick>
 800d970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d972:	e008      	b.n	800d986 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d974:	f7fc ff20 	bl	800a7b8 <HAL_GetTick>
 800d978:	4602      	mov	r2, r0
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d901      	bls.n	800d986 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e1bd      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d986:	4b30      	ldr	r3, [pc, #192]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0302 	and.w	r3, r3, #2
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d0f0      	beq.n	800d974 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d992:	4b2d      	ldr	r3, [pc, #180]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	00db      	lsls	r3, r3, #3
 800d9a0:	4929      	ldr	r1, [pc, #164]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	600b      	str	r3, [r1, #0]
 800d9a6:	e018      	b.n	800d9da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d9a8:	4b27      	ldr	r3, [pc, #156]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a26      	ldr	r2, [pc, #152]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d9ae:	f023 0301 	bic.w	r3, r3, #1
 800d9b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9b4:	f7fc ff00 	bl	800a7b8 <HAL_GetTick>
 800d9b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d9ba:	e008      	b.n	800d9ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d9bc:	f7fc fefc 	bl	800a7b8 <HAL_GetTick>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d901      	bls.n	800d9ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d9ca:	2303      	movs	r3, #3
 800d9cc:	e199      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d9ce:	4b1e      	ldr	r3, [pc, #120]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f003 0302 	and.w	r3, r3, #2
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1f0      	bne.n	800d9bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f003 0308 	and.w	r3, r3, #8
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d038      	beq.n	800da58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	695b      	ldr	r3, [r3, #20]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d019      	beq.n	800da22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d9ee:	4b16      	ldr	r3, [pc, #88]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d9f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9f2:	4a15      	ldr	r2, [pc, #84]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800d9f4:	f043 0301 	orr.w	r3, r3, #1
 800d9f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9fa:	f7fc fedd 	bl	800a7b8 <HAL_GetTick>
 800d9fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da00:	e008      	b.n	800da14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800da02:	f7fc fed9 	bl	800a7b8 <HAL_GetTick>
 800da06:	4602      	mov	r2, r0
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d901      	bls.n	800da14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800da10:	2303      	movs	r3, #3
 800da12:	e176      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da14:	4b0c      	ldr	r3, [pc, #48]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800da16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da18:	f003 0302 	and.w	r3, r3, #2
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0f0      	beq.n	800da02 <HAL_RCC_OscConfig+0x23a>
 800da20:	e01a      	b.n	800da58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800da22:	4b09      	ldr	r3, [pc, #36]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800da24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da26:	4a08      	ldr	r2, [pc, #32]	@ (800da48 <HAL_RCC_OscConfig+0x280>)
 800da28:	f023 0301 	bic.w	r3, r3, #1
 800da2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da2e:	f7fc fec3 	bl	800a7b8 <HAL_GetTick>
 800da32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da34:	e00a      	b.n	800da4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800da36:	f7fc febf 	bl	800a7b8 <HAL_GetTick>
 800da3a:	4602      	mov	r2, r0
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	2b02      	cmp	r3, #2
 800da42:	d903      	bls.n	800da4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800da44:	2303      	movs	r3, #3
 800da46:	e15c      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
 800da48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da4c:	4b91      	ldr	r3, [pc, #580]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800da4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da50:	f003 0302 	and.w	r3, r3, #2
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1ee      	bne.n	800da36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f003 0304 	and.w	r3, r3, #4
 800da60:	2b00      	cmp	r3, #0
 800da62:	f000 80a4 	beq.w	800dbae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da66:	4b8b      	ldr	r3, [pc, #556]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800da68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10d      	bne.n	800da8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800da72:	4b88      	ldr	r3, [pc, #544]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800da74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da76:	4a87      	ldr	r2, [pc, #540]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800da78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da7c:	6413      	str	r3, [r2, #64]	@ 0x40
 800da7e:	4b85      	ldr	r3, [pc, #532]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800da80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da86:	60bb      	str	r3, [r7, #8]
 800da88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da8a:	2301      	movs	r3, #1
 800da8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da8e:	4b82      	ldr	r3, [pc, #520]	@ (800dc98 <HAL_RCC_OscConfig+0x4d0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da96:	2b00      	cmp	r3, #0
 800da98:	d118      	bne.n	800dacc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800da9a:	4b7f      	ldr	r3, [pc, #508]	@ (800dc98 <HAL_RCC_OscConfig+0x4d0>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a7e      	ldr	r2, [pc, #504]	@ (800dc98 <HAL_RCC_OscConfig+0x4d0>)
 800daa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800daa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800daa6:	f7fc fe87 	bl	800a7b8 <HAL_GetTick>
 800daaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800daac:	e008      	b.n	800dac0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800daae:	f7fc fe83 	bl	800a7b8 <HAL_GetTick>
 800dab2:	4602      	mov	r2, r0
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	2b64      	cmp	r3, #100	@ 0x64
 800daba:	d901      	bls.n	800dac0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800dabc:	2303      	movs	r3, #3
 800dabe:	e120      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dac0:	4b75      	ldr	r3, [pc, #468]	@ (800dc98 <HAL_RCC_OscConfig+0x4d0>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d0f0      	beq.n	800daae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d106      	bne.n	800dae2 <HAL_RCC_OscConfig+0x31a>
 800dad4:	4b6f      	ldr	r3, [pc, #444]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dad8:	4a6e      	ldr	r2, [pc, #440]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dada:	f043 0301 	orr.w	r3, r3, #1
 800dade:	6713      	str	r3, [r2, #112]	@ 0x70
 800dae0:	e02d      	b.n	800db3e <HAL_RCC_OscConfig+0x376>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10c      	bne.n	800db04 <HAL_RCC_OscConfig+0x33c>
 800daea:	4b6a      	ldr	r3, [pc, #424]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800daec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daee:	4a69      	ldr	r2, [pc, #420]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800daf0:	f023 0301 	bic.w	r3, r3, #1
 800daf4:	6713      	str	r3, [r2, #112]	@ 0x70
 800daf6:	4b67      	ldr	r3, [pc, #412]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800daf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dafa:	4a66      	ldr	r2, [pc, #408]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dafc:	f023 0304 	bic.w	r3, r3, #4
 800db00:	6713      	str	r3, [r2, #112]	@ 0x70
 800db02:	e01c      	b.n	800db3e <HAL_RCC_OscConfig+0x376>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	2b05      	cmp	r3, #5
 800db0a:	d10c      	bne.n	800db26 <HAL_RCC_OscConfig+0x35e>
 800db0c:	4b61      	ldr	r3, [pc, #388]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db10:	4a60      	ldr	r2, [pc, #384]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db12:	f043 0304 	orr.w	r3, r3, #4
 800db16:	6713      	str	r3, [r2, #112]	@ 0x70
 800db18:	4b5e      	ldr	r3, [pc, #376]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db1c:	4a5d      	ldr	r2, [pc, #372]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db1e:	f043 0301 	orr.w	r3, r3, #1
 800db22:	6713      	str	r3, [r2, #112]	@ 0x70
 800db24:	e00b      	b.n	800db3e <HAL_RCC_OscConfig+0x376>
 800db26:	4b5b      	ldr	r3, [pc, #364]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db2a:	4a5a      	ldr	r2, [pc, #360]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db2c:	f023 0301 	bic.w	r3, r3, #1
 800db30:	6713      	str	r3, [r2, #112]	@ 0x70
 800db32:	4b58      	ldr	r3, [pc, #352]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db36:	4a57      	ldr	r2, [pc, #348]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db38:	f023 0304 	bic.w	r3, r3, #4
 800db3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d015      	beq.n	800db72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db46:	f7fc fe37 	bl	800a7b8 <HAL_GetTick>
 800db4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db4c:	e00a      	b.n	800db64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db4e:	f7fc fe33 	bl	800a7b8 <HAL_GetTick>
 800db52:	4602      	mov	r2, r0
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	1ad3      	subs	r3, r2, r3
 800db58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d901      	bls.n	800db64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800db60:	2303      	movs	r3, #3
 800db62:	e0ce      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db64:	4b4b      	ldr	r3, [pc, #300]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db68:	f003 0302 	and.w	r3, r3, #2
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d0ee      	beq.n	800db4e <HAL_RCC_OscConfig+0x386>
 800db70:	e014      	b.n	800db9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db72:	f7fc fe21 	bl	800a7b8 <HAL_GetTick>
 800db76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db78:	e00a      	b.n	800db90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db7a:	f7fc fe1d 	bl	800a7b8 <HAL_GetTick>
 800db7e:	4602      	mov	r2, r0
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db88:	4293      	cmp	r3, r2
 800db8a:	d901      	bls.n	800db90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800db8c:	2303      	movs	r3, #3
 800db8e:	e0b8      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db90:	4b40      	ldr	r3, [pc, #256]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800db92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db94:	f003 0302 	and.w	r3, r3, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1ee      	bne.n	800db7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800db9c:	7dfb      	ldrb	r3, [r7, #23]
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d105      	bne.n	800dbae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dba2:	4b3c      	ldr	r3, [pc, #240]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba6:	4a3b      	ldr	r2, [pc, #236]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	f000 80a4 	beq.w	800dd00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dbb8:	4b36      	ldr	r3, [pc, #216]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	f003 030c 	and.w	r3, r3, #12
 800dbc0:	2b08      	cmp	r3, #8
 800dbc2:	d06b      	beq.n	800dc9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d149      	bne.n	800dc60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbcc:	4b31      	ldr	r3, [pc, #196]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a30      	ldr	r2, [pc, #192]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dbd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd8:	f7fc fdee 	bl	800a7b8 <HAL_GetTick>
 800dbdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbde:	e008      	b.n	800dbf2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbe0:	f7fc fdea 	bl	800a7b8 <HAL_GetTick>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d901      	bls.n	800dbf2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	e087      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbf2:	4b28      	ldr	r3, [pc, #160]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1f0      	bne.n	800dbe0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	69da      	ldr	r2, [r3, #28]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	431a      	orrs	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc0c:	019b      	lsls	r3, r3, #6
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc14:	085b      	lsrs	r3, r3, #1
 800dc16:	3b01      	subs	r3, #1
 800dc18:	041b      	lsls	r3, r3, #16
 800dc1a:	431a      	orrs	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc20:	061b      	lsls	r3, r3, #24
 800dc22:	4313      	orrs	r3, r2
 800dc24:	4a1b      	ldr	r2, [pc, #108]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dc26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dc2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dc2c:	4b19      	ldr	r3, [pc, #100]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a18      	ldr	r2, [pc, #96]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dc32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dc36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc38:	f7fc fdbe 	bl	800a7b8 <HAL_GetTick>
 800dc3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc3e:	e008      	b.n	800dc52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc40:	f7fc fdba 	bl	800a7b8 <HAL_GetTick>
 800dc44:	4602      	mov	r2, r0
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	d901      	bls.n	800dc52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	e057      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc52:	4b10      	ldr	r3, [pc, #64]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0f0      	beq.n	800dc40 <HAL_RCC_OscConfig+0x478>
 800dc5e:	e04f      	b.n	800dd00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc60:	4b0c      	ldr	r3, [pc, #48]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a0b      	ldr	r2, [pc, #44]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dc66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dc6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc6c:	f7fc fda4 	bl	800a7b8 <HAL_GetTick>
 800dc70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc72:	e008      	b.n	800dc86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc74:	f7fc fda0 	bl	800a7b8 <HAL_GetTick>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	d901      	bls.n	800dc86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e03d      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc86:	4b03      	ldr	r3, [pc, #12]	@ (800dc94 <HAL_RCC_OscConfig+0x4cc>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1f0      	bne.n	800dc74 <HAL_RCC_OscConfig+0x4ac>
 800dc92:	e035      	b.n	800dd00 <HAL_RCC_OscConfig+0x538>
 800dc94:	40023800 	.word	0x40023800
 800dc98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800dc9c:	4b1b      	ldr	r3, [pc, #108]	@ (800dd0c <HAL_RCC_OscConfig+0x544>)
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	699b      	ldr	r3, [r3, #24]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d028      	beq.n	800dcfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d121      	bne.n	800dcfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d11a      	bne.n	800dcfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800dccc:	4013      	ands	r3, r2
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800dcd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d111      	bne.n	800dcfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce2:	085b      	lsrs	r3, r3, #1
 800dce4:	3b01      	subs	r3, #1
 800dce6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d107      	bne.n	800dcfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d001      	beq.n	800dd00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e000      	b.n	800dd02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3718      	adds	r7, #24
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	40023800 	.word	0x40023800

0800dd10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e0d0      	b.n	800deca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dd28:	4b6a      	ldr	r3, [pc, #424]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 030f 	and.w	r3, r3, #15
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d910      	bls.n	800dd58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd36:	4b67      	ldr	r3, [pc, #412]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f023 020f 	bic.w	r2, r3, #15
 800dd3e:	4965      	ldr	r1, [pc, #404]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd46:	4b63      	ldr	r3, [pc, #396]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f003 030f 	and.w	r3, r3, #15
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d001      	beq.n	800dd58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	e0b8      	b.n	800deca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f003 0302 	and.w	r3, r3, #2
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d020      	beq.n	800dda6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f003 0304 	and.w	r3, r3, #4
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d005      	beq.n	800dd7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dd70:	4b59      	ldr	r3, [pc, #356]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	4a58      	ldr	r2, [pc, #352]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800dd76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800dd7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f003 0308 	and.w	r3, r3, #8
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d005      	beq.n	800dd94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dd88:	4b53      	ldr	r3, [pc, #332]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	4a52      	ldr	r2, [pc, #328]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800dd8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800dd92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd94:	4b50      	ldr	r3, [pc, #320]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	494d      	ldr	r1, [pc, #308]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800dda2:	4313      	orrs	r3, r2
 800dda4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f003 0301 	and.w	r3, r3, #1
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d040      	beq.n	800de34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d107      	bne.n	800ddca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddba:	4b47      	ldr	r3, [pc, #284]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d115      	bne.n	800ddf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e07f      	b.n	800deca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d107      	bne.n	800dde2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ddd2:	4b41      	ldr	r3, [pc, #260]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d109      	bne.n	800ddf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	e073      	b.n	800deca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dde2:	4b3d      	ldr	r3, [pc, #244]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f003 0302 	and.w	r3, r3, #2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d101      	bne.n	800ddf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e06b      	b.n	800deca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ddf2:	4b39      	ldr	r3, [pc, #228]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	f023 0203 	bic.w	r2, r3, #3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	4936      	ldr	r1, [pc, #216]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800de00:	4313      	orrs	r3, r2
 800de02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de04:	f7fc fcd8 	bl	800a7b8 <HAL_GetTick>
 800de08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de0a:	e00a      	b.n	800de22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de0c:	f7fc fcd4 	bl	800a7b8 <HAL_GetTick>
 800de10:	4602      	mov	r2, r0
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d901      	bls.n	800de22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e053      	b.n	800deca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de22:	4b2d      	ldr	r3, [pc, #180]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	f003 020c 	and.w	r2, r3, #12
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	429a      	cmp	r2, r3
 800de32:	d1eb      	bne.n	800de0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de34:	4b27      	ldr	r3, [pc, #156]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f003 030f 	and.w	r3, r3, #15
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d210      	bcs.n	800de64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de42:	4b24      	ldr	r3, [pc, #144]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f023 020f 	bic.w	r2, r3, #15
 800de4a:	4922      	ldr	r1, [pc, #136]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	4313      	orrs	r3, r2
 800de50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de52:	4b20      	ldr	r3, [pc, #128]	@ (800ded4 <HAL_RCC_ClockConfig+0x1c4>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f003 030f 	and.w	r3, r3, #15
 800de5a:	683a      	ldr	r2, [r7, #0]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d001      	beq.n	800de64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	e032      	b.n	800deca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f003 0304 	and.w	r3, r3, #4
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d008      	beq.n	800de82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de70:	4b19      	ldr	r3, [pc, #100]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	4916      	ldr	r1, [pc, #88]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800de7e:	4313      	orrs	r3, r2
 800de80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f003 0308 	and.w	r3, r3, #8
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d009      	beq.n	800dea2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800de8e:	4b12      	ldr	r3, [pc, #72]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	00db      	lsls	r3, r3, #3
 800de9c:	490e      	ldr	r1, [pc, #56]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800de9e:	4313      	orrs	r3, r2
 800dea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dea2:	f000 f821 	bl	800dee8 <HAL_RCC_GetSysClockFreq>
 800dea6:	4602      	mov	r2, r0
 800dea8:	4b0b      	ldr	r3, [pc, #44]	@ (800ded8 <HAL_RCC_ClockConfig+0x1c8>)
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	091b      	lsrs	r3, r3, #4
 800deae:	f003 030f 	and.w	r3, r3, #15
 800deb2:	490a      	ldr	r1, [pc, #40]	@ (800dedc <HAL_RCC_ClockConfig+0x1cc>)
 800deb4:	5ccb      	ldrb	r3, [r1, r3]
 800deb6:	fa22 f303 	lsr.w	r3, r2, r3
 800deba:	4a09      	ldr	r2, [pc, #36]	@ (800dee0 <HAL_RCC_ClockConfig+0x1d0>)
 800debc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800debe:	4b09      	ldr	r3, [pc, #36]	@ (800dee4 <HAL_RCC_ClockConfig+0x1d4>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fa fe0e 	bl	8008ae4 <HAL_InitTick>

  return HAL_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	40023c00 	.word	0x40023c00
 800ded8:	40023800 	.word	0x40023800
 800dedc:	0802575c 	.word	0x0802575c
 800dee0:	20000050 	.word	0x20000050
 800dee4:	20000090 	.word	0x20000090

0800dee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800deec:	b090      	sub	sp, #64	@ 0x40
 800deee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	637b      	str	r3, [r7, #52]	@ 0x34
 800def4:	2300      	movs	r3, #0
 800def6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800def8:	2300      	movs	r3, #0
 800defa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800df00:	4b59      	ldr	r3, [pc, #356]	@ (800e068 <HAL_RCC_GetSysClockFreq+0x180>)
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	f003 030c 	and.w	r3, r3, #12
 800df08:	2b08      	cmp	r3, #8
 800df0a:	d00d      	beq.n	800df28 <HAL_RCC_GetSysClockFreq+0x40>
 800df0c:	2b08      	cmp	r3, #8
 800df0e:	f200 80a1 	bhi.w	800e054 <HAL_RCC_GetSysClockFreq+0x16c>
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <HAL_RCC_GetSysClockFreq+0x34>
 800df16:	2b04      	cmp	r3, #4
 800df18:	d003      	beq.n	800df22 <HAL_RCC_GetSysClockFreq+0x3a>
 800df1a:	e09b      	b.n	800e054 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800df1c:	4b53      	ldr	r3, [pc, #332]	@ (800e06c <HAL_RCC_GetSysClockFreq+0x184>)
 800df1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800df20:	e09b      	b.n	800e05a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800df22:	4b53      	ldr	r3, [pc, #332]	@ (800e070 <HAL_RCC_GetSysClockFreq+0x188>)
 800df24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800df26:	e098      	b.n	800e05a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800df28:	4b4f      	ldr	r3, [pc, #316]	@ (800e068 <HAL_RCC_GetSysClockFreq+0x180>)
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800df32:	4b4d      	ldr	r3, [pc, #308]	@ (800e068 <HAL_RCC_GetSysClockFreq+0x180>)
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d028      	beq.n	800df90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df3e:	4b4a      	ldr	r3, [pc, #296]	@ (800e068 <HAL_RCC_GetSysClockFreq+0x180>)
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	099b      	lsrs	r3, r3, #6
 800df44:	2200      	movs	r2, #0
 800df46:	623b      	str	r3, [r7, #32]
 800df48:	627a      	str	r2, [r7, #36]	@ 0x24
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800df50:	2100      	movs	r1, #0
 800df52:	4b47      	ldr	r3, [pc, #284]	@ (800e070 <HAL_RCC_GetSysClockFreq+0x188>)
 800df54:	fb03 f201 	mul.w	r2, r3, r1
 800df58:	2300      	movs	r3, #0
 800df5a:	fb00 f303 	mul.w	r3, r0, r3
 800df5e:	4413      	add	r3, r2
 800df60:	4a43      	ldr	r2, [pc, #268]	@ (800e070 <HAL_RCC_GetSysClockFreq+0x188>)
 800df62:	fba0 1202 	umull	r1, r2, r0, r2
 800df66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df68:	460a      	mov	r2, r1
 800df6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800df6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df6e:	4413      	add	r3, r2
 800df70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df74:	2200      	movs	r2, #0
 800df76:	61bb      	str	r3, [r7, #24]
 800df78:	61fa      	str	r2, [r7, #28]
 800df7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800df82:	f7f2 fd83 	bl	8000a8c <__aeabi_uldivmod>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	4613      	mov	r3, r2
 800df8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df8e:	e053      	b.n	800e038 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df90:	4b35      	ldr	r3, [pc, #212]	@ (800e068 <HAL_RCC_GetSysClockFreq+0x180>)
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	099b      	lsrs	r3, r3, #6
 800df96:	2200      	movs	r2, #0
 800df98:	613b      	str	r3, [r7, #16]
 800df9a:	617a      	str	r2, [r7, #20]
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800dfa2:	f04f 0b00 	mov.w	fp, #0
 800dfa6:	4652      	mov	r2, sl
 800dfa8:	465b      	mov	r3, fp
 800dfaa:	f04f 0000 	mov.w	r0, #0
 800dfae:	f04f 0100 	mov.w	r1, #0
 800dfb2:	0159      	lsls	r1, r3, #5
 800dfb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dfb8:	0150      	lsls	r0, r2, #5
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	ebb2 080a 	subs.w	r8, r2, sl
 800dfc2:	eb63 090b 	sbc.w	r9, r3, fp
 800dfc6:	f04f 0200 	mov.w	r2, #0
 800dfca:	f04f 0300 	mov.w	r3, #0
 800dfce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800dfd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800dfd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800dfda:	ebb2 0408 	subs.w	r4, r2, r8
 800dfde:	eb63 0509 	sbc.w	r5, r3, r9
 800dfe2:	f04f 0200 	mov.w	r2, #0
 800dfe6:	f04f 0300 	mov.w	r3, #0
 800dfea:	00eb      	lsls	r3, r5, #3
 800dfec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dff0:	00e2      	lsls	r2, r4, #3
 800dff2:	4614      	mov	r4, r2
 800dff4:	461d      	mov	r5, r3
 800dff6:	eb14 030a 	adds.w	r3, r4, sl
 800dffa:	603b      	str	r3, [r7, #0]
 800dffc:	eb45 030b 	adc.w	r3, r5, fp
 800e000:	607b      	str	r3, [r7, #4]
 800e002:	f04f 0200 	mov.w	r2, #0
 800e006:	f04f 0300 	mov.w	r3, #0
 800e00a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e00e:	4629      	mov	r1, r5
 800e010:	028b      	lsls	r3, r1, #10
 800e012:	4621      	mov	r1, r4
 800e014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e018:	4621      	mov	r1, r4
 800e01a:	028a      	lsls	r2, r1, #10
 800e01c:	4610      	mov	r0, r2
 800e01e:	4619      	mov	r1, r3
 800e020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e022:	2200      	movs	r2, #0
 800e024:	60bb      	str	r3, [r7, #8]
 800e026:	60fa      	str	r2, [r7, #12]
 800e028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e02c:	f7f2 fd2e 	bl	8000a8c <__aeabi_uldivmod>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	4613      	mov	r3, r2
 800e036:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e038:	4b0b      	ldr	r3, [pc, #44]	@ (800e068 <HAL_RCC_GetSysClockFreq+0x180>)
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	0c1b      	lsrs	r3, r3, #16
 800e03e:	f003 0303 	and.w	r3, r3, #3
 800e042:	3301      	adds	r3, #1
 800e044:	005b      	lsls	r3, r3, #1
 800e046:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800e048:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e050:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800e052:	e002      	b.n	800e05a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e054:	4b05      	ldr	r3, [pc, #20]	@ (800e06c <HAL_RCC_GetSysClockFreq+0x184>)
 800e056:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800e058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3740      	adds	r7, #64	@ 0x40
 800e060:	46bd      	mov	sp, r7
 800e062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e066:	bf00      	nop
 800e068:	40023800 	.word	0x40023800
 800e06c:	00f42400 	.word	0x00f42400
 800e070:	017d7840 	.word	0x017d7840

0800e074 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e074:	b480      	push	{r7}
 800e076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e078:	4b03      	ldr	r3, [pc, #12]	@ (800e088 <HAL_RCC_GetHCLKFreq+0x14>)
 800e07a:	681b      	ldr	r3, [r3, #0]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	20000050 	.word	0x20000050

0800e08c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e090:	f7ff fff0 	bl	800e074 <HAL_RCC_GetHCLKFreq>
 800e094:	4602      	mov	r2, r0
 800e096:	4b05      	ldr	r3, [pc, #20]	@ (800e0ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	0a9b      	lsrs	r3, r3, #10
 800e09c:	f003 0307 	and.w	r3, r3, #7
 800e0a0:	4903      	ldr	r1, [pc, #12]	@ (800e0b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e0a2:	5ccb      	ldrb	r3, [r1, r3]
 800e0a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	40023800 	.word	0x40023800
 800e0b0:	0802576c 	.word	0x0802576c

0800e0b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e0b8:	f7ff ffdc 	bl	800e074 <HAL_RCC_GetHCLKFreq>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	4b05      	ldr	r3, [pc, #20]	@ (800e0d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	0b5b      	lsrs	r3, r3, #13
 800e0c4:	f003 0307 	and.w	r3, r3, #7
 800e0c8:	4903      	ldr	r1, [pc, #12]	@ (800e0d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0ca:	5ccb      	ldrb	r3, [r1, r3]
 800e0cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	40023800 	.word	0x40023800
 800e0d8:	0802576c 	.word	0x0802576c

0800e0dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	220f      	movs	r2, #15
 800e0ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e0ec:	4b12      	ldr	r3, [pc, #72]	@ (800e138 <HAL_RCC_GetClockConfig+0x5c>)
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	f003 0203 	and.w	r2, r3, #3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800e138 <HAL_RCC_GetClockConfig+0x5c>)
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e104:	4b0c      	ldr	r3, [pc, #48]	@ (800e138 <HAL_RCC_GetClockConfig+0x5c>)
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e110:	4b09      	ldr	r3, [pc, #36]	@ (800e138 <HAL_RCC_GetClockConfig+0x5c>)
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	08db      	lsrs	r3, r3, #3
 800e116:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e11e:	4b07      	ldr	r3, [pc, #28]	@ (800e13c <HAL_RCC_GetClockConfig+0x60>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f003 020f 	and.w	r2, r3, #15
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	601a      	str	r2, [r3, #0]
}
 800e12a:	bf00      	nop
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	40023800 	.word	0x40023800
 800e13c:	40023c00 	.word	0x40023c00

0800e140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b088      	sub	sp, #32
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e14c:	2300      	movs	r3, #0
 800e14e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e150:	2300      	movs	r3, #0
 800e152:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e158:	2300      	movs	r3, #0
 800e15a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f003 0301 	and.w	r3, r3, #1
 800e164:	2b00      	cmp	r3, #0
 800e166:	d012      	beq.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e168:	4b69      	ldr	r3, [pc, #420]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	4a68      	ldr	r2, [pc, #416]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e16e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e172:	6093      	str	r3, [r2, #8]
 800e174:	4b66      	ldr	r3, [pc, #408]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e176:	689a      	ldr	r2, [r3, #8]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e17c:	4964      	ldr	r1, [pc, #400]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e17e:	4313      	orrs	r3, r2
 800e180:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e186:	2b00      	cmp	r3, #0
 800e188:	d101      	bne.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e18a:	2301      	movs	r3, #1
 800e18c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e196:	2b00      	cmp	r3, #0
 800e198:	d017      	beq.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e19a:	4b5d      	ldr	r3, [pc, #372]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1a8:	4959      	ldr	r1, [pc, #356]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1b8:	d101      	bne.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d017      	beq.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e1d6:	4b4e      	ldr	r3, [pc, #312]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1e4:	494a      	ldr	r1, [pc, #296]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e1f4:	d101      	bne.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e202:	2301      	movs	r3, #1
 800e204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e212:	2301      	movs	r3, #1
 800e214:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f003 0320 	and.w	r3, r3, #32
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f000 808b 	beq.w	800e33a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e224:	4b3a      	ldr	r3, [pc, #232]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e228:	4a39      	ldr	r2, [pc, #228]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e22a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e22e:	6413      	str	r3, [r2, #64]	@ 0x40
 800e230:	4b37      	ldr	r3, [pc, #220]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e238:	60bb      	str	r3, [r7, #8]
 800e23a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e23c:	4b35      	ldr	r3, [pc, #212]	@ (800e314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a34      	ldr	r2, [pc, #208]	@ (800e314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e248:	f7fc fab6 	bl	800a7b8 <HAL_GetTick>
 800e24c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e24e:	e008      	b.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e250:	f7fc fab2 	bl	800a7b8 <HAL_GetTick>
 800e254:	4602      	mov	r2, r0
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	2b64      	cmp	r3, #100	@ 0x64
 800e25c:	d901      	bls.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e25e:	2303      	movs	r3, #3
 800e260:	e357      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e262:	4b2c      	ldr	r3, [pc, #176]	@ (800e314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d0f0      	beq.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e26e:	4b28      	ldr	r3, [pc, #160]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d035      	beq.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e286:	693a      	ldr	r2, [r7, #16]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d02e      	beq.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e28c:	4b20      	ldr	r3, [pc, #128]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e28e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e296:	4b1e      	ldr	r3, [pc, #120]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e29a:	4a1d      	ldr	r2, [pc, #116]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e29c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e2a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e2a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2a6:	4a1a      	ldr	r2, [pc, #104]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e2ae:	4a18      	ldr	r2, [pc, #96]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e2b4:	4b16      	ldr	r3, [pc, #88]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2b8:	f003 0301 	and.w	r3, r3, #1
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d114      	bne.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2c0:	f7fc fa7a 	bl	800a7b8 <HAL_GetTick>
 800e2c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2c6:	e00a      	b.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2c8:	f7fc fa76 	bl	800a7b8 <HAL_GetTick>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d901      	bls.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	e319      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2de:	4b0c      	ldr	r3, [pc, #48]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2e2:	f003 0302 	and.w	r3, r3, #2
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0ee      	beq.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e2f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2f6:	d111      	bne.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e2f8:	4b05      	ldr	r3, [pc, #20]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800e304:	4b04      	ldr	r3, [pc, #16]	@ (800e318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e306:	400b      	ands	r3, r1
 800e308:	4901      	ldr	r1, [pc, #4]	@ (800e310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e30a:	4313      	orrs	r3, r2
 800e30c:	608b      	str	r3, [r1, #8]
 800e30e:	e00b      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e310:	40023800 	.word	0x40023800
 800e314:	40007000 	.word	0x40007000
 800e318:	0ffffcff 	.word	0x0ffffcff
 800e31c:	4baa      	ldr	r3, [pc, #680]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	4aa9      	ldr	r2, [pc, #676]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e322:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800e326:	6093      	str	r3, [r2, #8]
 800e328:	4ba7      	ldr	r3, [pc, #668]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e32a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e334:	49a4      	ldr	r1, [pc, #656]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e336:	4313      	orrs	r3, r2
 800e338:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f003 0310 	and.w	r3, r3, #16
 800e342:	2b00      	cmp	r3, #0
 800e344:	d010      	beq.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e346:	4ba0      	ldr	r3, [pc, #640]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e34c:	4a9e      	ldr	r2, [pc, #632]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e34e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e352:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800e356:	4b9c      	ldr	r3, [pc, #624]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e358:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e360:	4999      	ldr	r1, [pc, #612]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e362:	4313      	orrs	r3, r2
 800e364:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00a      	beq.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e374:	4b94      	ldr	r3, [pc, #592]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e37a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e382:	4991      	ldr	r1, [pc, #580]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e384:	4313      	orrs	r3, r2
 800e386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00a      	beq.n	800e3ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e396:	4b8c      	ldr	r3, [pc, #560]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e39c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e3a4:	4988      	ldr	r1, [pc, #544]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00a      	beq.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e3b8:	4b83      	ldr	r3, [pc, #524]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3c6:	4980      	ldr	r1, [pc, #512]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00a      	beq.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e3da:	4b7b      	ldr	r3, [pc, #492]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3e8:	4977      	ldr	r1, [pc, #476]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00a      	beq.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e3fc:	4b72      	ldr	r3, [pc, #456]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e402:	f023 0203 	bic.w	r2, r3, #3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e40a:	496f      	ldr	r1, [pc, #444]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e40c:	4313      	orrs	r3, r2
 800e40e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00a      	beq.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e41e:	4b6a      	ldr	r3, [pc, #424]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e424:	f023 020c 	bic.w	r2, r3, #12
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e42c:	4966      	ldr	r1, [pc, #408]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e42e:	4313      	orrs	r3, r2
 800e430:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00a      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e440:	4b61      	ldr	r3, [pc, #388]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e446:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e44e:	495e      	ldr	r1, [pc, #376]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e450:	4313      	orrs	r3, r2
 800e452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00a      	beq.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e462:	4b59      	ldr	r3, [pc, #356]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e468:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e470:	4955      	ldr	r1, [pc, #340]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e472:	4313      	orrs	r3, r2
 800e474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00a      	beq.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e484:	4b50      	ldr	r3, [pc, #320]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e48a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e492:	494d      	ldr	r1, [pc, #308]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e494:	4313      	orrs	r3, r2
 800e496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00a      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e4a6:	4b48      	ldr	r3, [pc, #288]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4b4:	4944      	ldr	r1, [pc, #272]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00a      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e4c8:	4b3f      	ldr	r3, [pc, #252]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4d6:	493c      	ldr	r1, [pc, #240]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00a      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e4ea:	4b37      	ldr	r3, [pc, #220]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e4f8:	4933      	ldr	r1, [pc, #204]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00a      	beq.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e50c:	4b2e      	ldr	r3, [pc, #184]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e512:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e51a:	492b      	ldr	r1, [pc, #172]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e51c:	4313      	orrs	r3, r2
 800e51e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d011      	beq.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e52e:	4b26      	ldr	r3, [pc, #152]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e534:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e53c:	4922      	ldr	r1, [pc, #136]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e53e:	4313      	orrs	r3, r2
 800e540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e54c:	d101      	bne.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e54e:	2301      	movs	r3, #1
 800e550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 0308 	and.w	r3, r3, #8
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e55e:	2301      	movs	r3, #1
 800e560:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00a      	beq.n	800e584 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e56e:	4b16      	ldr	r3, [pc, #88]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e574:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e57c:	4912      	ldr	r1, [pc, #72]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e57e:	4313      	orrs	r3, r2
 800e580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00b      	beq.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e590:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e596:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a0:	4909      	ldr	r1, [pc, #36]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d006      	beq.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f000 80d9 	beq.w	800e76e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e5bc:	4b02      	ldr	r3, [pc, #8]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a01      	ldr	r2, [pc, #4]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e5c6:	e001      	b.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e5c8:	40023800 	.word	0x40023800
 800e5cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5ce:	f7fc f8f3 	bl	800a7b8 <HAL_GetTick>
 800e5d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e5d4:	e008      	b.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e5d6:	f7fc f8ef 	bl	800a7b8 <HAL_GetTick>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	2b64      	cmp	r3, #100	@ 0x64
 800e5e2:	d901      	bls.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	e194      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e5e8:	4b6c      	ldr	r3, [pc, #432]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1f0      	bne.n	800e5d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d021      	beq.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e604:	2b00      	cmp	r3, #0
 800e606:	d11d      	bne.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e608:	4b64      	ldr	r3, [pc, #400]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e60e:	0c1b      	lsrs	r3, r3, #16
 800e610:	f003 0303 	and.w	r3, r3, #3
 800e614:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e616:	4b61      	ldr	r3, [pc, #388]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e61c:	0e1b      	lsrs	r3, r3, #24
 800e61e:	f003 030f 	and.w	r3, r3, #15
 800e622:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	019a      	lsls	r2, r3, #6
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	041b      	lsls	r3, r3, #16
 800e62e:	431a      	orrs	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	061b      	lsls	r3, r3, #24
 800e634:	431a      	orrs	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	071b      	lsls	r3, r3, #28
 800e63c:	4957      	ldr	r1, [pc, #348]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e63e:	4313      	orrs	r3, r2
 800e640:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d004      	beq.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e658:	d00a      	beq.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e662:	2b00      	cmp	r3, #0
 800e664:	d02e      	beq.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e66a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e66e:	d129      	bne.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e670:	4b4a      	ldr	r3, [pc, #296]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e676:	0c1b      	lsrs	r3, r3, #16
 800e678:	f003 0303 	and.w	r3, r3, #3
 800e67c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e67e:	4b47      	ldr	r3, [pc, #284]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e684:	0f1b      	lsrs	r3, r3, #28
 800e686:	f003 0307 	and.w	r3, r3, #7
 800e68a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	019a      	lsls	r2, r3, #6
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	041b      	lsls	r3, r3, #16
 800e696:	431a      	orrs	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	061b      	lsls	r3, r3, #24
 800e69e:	431a      	orrs	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	071b      	lsls	r3, r3, #28
 800e6a4:	493d      	ldr	r1, [pc, #244]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e6ac:	4b3b      	ldr	r3, [pc, #236]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6b2:	f023 021f 	bic.w	r2, r3, #31
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	4937      	ldr	r1, [pc, #220]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d01d      	beq.n	800e70c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e6d0:	4b32      	ldr	r3, [pc, #200]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6d6:	0e1b      	lsrs	r3, r3, #24
 800e6d8:	f003 030f 	and.w	r3, r3, #15
 800e6dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e6de:	4b2f      	ldr	r3, [pc, #188]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6e4:	0f1b      	lsrs	r3, r3, #28
 800e6e6:	f003 0307 	and.w	r3, r3, #7
 800e6ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	019a      	lsls	r2, r3, #6
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	691b      	ldr	r3, [r3, #16]
 800e6f6:	041b      	lsls	r3, r3, #16
 800e6f8:	431a      	orrs	r2, r3
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	061b      	lsls	r3, r3, #24
 800e6fe:	431a      	orrs	r2, r3
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	071b      	lsls	r3, r3, #28
 800e704:	4925      	ldr	r1, [pc, #148]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e706:	4313      	orrs	r3, r2
 800e708:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e714:	2b00      	cmp	r3, #0
 800e716:	d011      	beq.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	019a      	lsls	r2, r3, #6
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	041b      	lsls	r3, r3, #16
 800e724:	431a      	orrs	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	061b      	lsls	r3, r3, #24
 800e72c:	431a      	orrs	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	071b      	lsls	r3, r3, #28
 800e734:	4919      	ldr	r1, [pc, #100]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e736:	4313      	orrs	r3, r2
 800e738:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e73c:	4b17      	ldr	r3, [pc, #92]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a16      	ldr	r2, [pc, #88]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e742:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e748:	f7fc f836 	bl	800a7b8 <HAL_GetTick>
 800e74c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e74e:	e008      	b.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e750:	f7fc f832 	bl	800a7b8 <HAL_GetTick>
 800e754:	4602      	mov	r2, r0
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	1ad3      	subs	r3, r2, r3
 800e75a:	2b64      	cmp	r3, #100	@ 0x64
 800e75c:	d901      	bls.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e75e:	2303      	movs	r3, #3
 800e760:	e0d7      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e762:	4b0e      	ldr	r3, [pc, #56]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d0f0      	beq.n	800e750 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	2b01      	cmp	r3, #1
 800e772:	f040 80cd 	bne.w	800e910 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e776:	4b09      	ldr	r3, [pc, #36]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a08      	ldr	r2, [pc, #32]	@ (800e79c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e77c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e782:	f7fc f819 	bl	800a7b8 <HAL_GetTick>
 800e786:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e788:	e00a      	b.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e78a:	f7fc f815 	bl	800a7b8 <HAL_GetTick>
 800e78e:	4602      	mov	r2, r0
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	2b64      	cmp	r3, #100	@ 0x64
 800e796:	d903      	bls.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e798:	2303      	movs	r3, #3
 800e79a:	e0ba      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e79c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e7a0:	4b5e      	ldr	r3, [pc, #376]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7ac:	d0ed      	beq.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d003      	beq.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d009      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d02e      	beq.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d12a      	bne.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e7d6:	4b51      	ldr	r3, [pc, #324]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7dc:	0c1b      	lsrs	r3, r3, #16
 800e7de:	f003 0303 	and.w	r3, r3, #3
 800e7e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e7e4:	4b4d      	ldr	r3, [pc, #308]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7ea:	0f1b      	lsrs	r3, r3, #28
 800e7ec:	f003 0307 	and.w	r3, r3, #7
 800e7f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	695b      	ldr	r3, [r3, #20]
 800e7f6:	019a      	lsls	r2, r3, #6
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	041b      	lsls	r3, r3, #16
 800e7fc:	431a      	orrs	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	699b      	ldr	r3, [r3, #24]
 800e802:	061b      	lsls	r3, r3, #24
 800e804:	431a      	orrs	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	071b      	lsls	r3, r3, #28
 800e80a:	4944      	ldr	r1, [pc, #272]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e80c:	4313      	orrs	r3, r2
 800e80e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e812:	4b42      	ldr	r3, [pc, #264]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e818:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e820:	3b01      	subs	r3, #1
 800e822:	021b      	lsls	r3, r3, #8
 800e824:	493d      	ldr	r1, [pc, #244]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e826:	4313      	orrs	r3, r2
 800e828:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e834:	2b00      	cmp	r3, #0
 800e836:	d022      	beq.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e83c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e840:	d11d      	bne.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e842:	4b36      	ldr	r3, [pc, #216]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e848:	0e1b      	lsrs	r3, r3, #24
 800e84a:	f003 030f 	and.w	r3, r3, #15
 800e84e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e850:	4b32      	ldr	r3, [pc, #200]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e856:	0f1b      	lsrs	r3, r3, #28
 800e858:	f003 0307 	and.w	r3, r3, #7
 800e85c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	695b      	ldr	r3, [r3, #20]
 800e862:	019a      	lsls	r2, r3, #6
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a1b      	ldr	r3, [r3, #32]
 800e868:	041b      	lsls	r3, r3, #16
 800e86a:	431a      	orrs	r2, r3
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	061b      	lsls	r3, r3, #24
 800e870:	431a      	orrs	r2, r3
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	071b      	lsls	r3, r3, #28
 800e876:	4929      	ldr	r1, [pc, #164]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e878:	4313      	orrs	r3, r2
 800e87a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f003 0308 	and.w	r3, r3, #8
 800e886:	2b00      	cmp	r3, #0
 800e888:	d028      	beq.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e88a:	4b24      	ldr	r3, [pc, #144]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e890:	0e1b      	lsrs	r3, r3, #24
 800e892:	f003 030f 	and.w	r3, r3, #15
 800e896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e898:	4b20      	ldr	r3, [pc, #128]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e89e:	0c1b      	lsrs	r3, r3, #16
 800e8a0:	f003 0303 	and.w	r3, r3, #3
 800e8a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	695b      	ldr	r3, [r3, #20]
 800e8aa:	019a      	lsls	r2, r3, #6
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	041b      	lsls	r3, r3, #16
 800e8b0:	431a      	orrs	r2, r3
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	061b      	lsls	r3, r3, #24
 800e8b6:	431a      	orrs	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	69db      	ldr	r3, [r3, #28]
 800e8bc:	071b      	lsls	r3, r3, #28
 800e8be:	4917      	ldr	r1, [pc, #92]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e8c6:	4b15      	ldr	r3, [pc, #84]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8d4:	4911      	ldr	r1, [pc, #68]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a0e      	ldr	r2, [pc, #56]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8e8:	f7fb ff66 	bl	800a7b8 <HAL_GetTick>
 800e8ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e8ee:	e008      	b.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e8f0:	f7fb ff62 	bl	800a7b8 <HAL_GetTick>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	2b64      	cmp	r3, #100	@ 0x64
 800e8fc:	d901      	bls.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e8fe:	2303      	movs	r3, #3
 800e900:	e007      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e902:	4b06      	ldr	r3, [pc, #24]	@ (800e91c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e90a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e90e:	d1ef      	bne.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3720      	adds	r7, #32
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	40023800 	.word	0x40023800

0800e920 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800e928:	2300      	movs	r3, #0
 800e92a:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a80      	ldr	r2, [pc, #512]	@ (800eb30 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800e930:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800e932:	4b80      	ldr	r3, [pc, #512]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e938:	099b      	lsrs	r3, r3, #6
 800e93a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e942:	4b7c      	ldr	r3, [pc, #496]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e948:	0c1b      	lsrs	r3, r3, #16
 800e94a:	f003 0203 	and.w	r2, r3, #3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e952:	4b78      	ldr	r3, [pc, #480]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e958:	0e1b      	lsrs	r3, r3, #24
 800e95a:	f003 020f 	and.w	r2, r3, #15
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e962:	4b74      	ldr	r3, [pc, #464]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e968:	0f1b      	lsrs	r3, r3, #28
 800e96a:	f003 0207 	and.w	r2, r3, #7
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800e972:	4b70      	ldr	r3, [pc, #448]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e978:	099b      	lsrs	r3, r3, #6
 800e97a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e982:	4b6c      	ldr	r3, [pc, #432]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e988:	0c1b      	lsrs	r3, r3, #16
 800e98a:	f003 0203 	and.w	r2, r3, #3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e992:	4b68      	ldr	r3, [pc, #416]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e998:	0e1b      	lsrs	r3, r3, #24
 800e99a:	f003 020f 	and.w	r2, r3, #15
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e9a2:	4b64      	ldr	r3, [pc, #400]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9a8:	0f1b      	lsrs	r3, r3, #28
 800e9aa:	f003 0207 	and.w	r2, r3, #7
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800e9b2:	4b60      	ldr	r3, [pc, #384]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9b8:	f003 021f 	and.w	r2, r3, #31
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800e9c0:	4b5c      	ldr	r3, [pc, #368]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9c6:	0a1b      	lsrs	r3, r3, #8
 800e9c8:	f003 021f 	and.w	r2, r3, #31
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800e9d0:	4b58      	ldr	r3, [pc, #352]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9d6:	0c1b      	lsrs	r3, r3, #16
 800e9d8:	f003 0203 	and.w	r2, r3, #3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800e9e0:	4b54      	ldr	r3, [pc, #336]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9e6:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800e9ee:	4b51      	ldr	r3, [pc, #324]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9f4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800e9fc:	4b4d      	ldr	r3, [pc, #308]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800ea08:	4b4a      	ldr	r3, [pc, #296]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800ea16:	4b47      	ldr	r3, [pc, #284]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea1c:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800ea24:	4b43      	ldr	r3, [pc, #268]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea2a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800ea32:	4b40      	ldr	r3, [pc, #256]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea38:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800ea40:	4b3c      	ldr	r3, [pc, #240]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea46:	f003 0203 	and.w	r2, r3, #3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800ea4e:	4b39      	ldr	r3, [pc, #228]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea54:	f003 020c 	and.w	r2, r3, #12
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800ea5c:	4b35      	ldr	r3, [pc, #212]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea62:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800ea6a:	4b32      	ldr	r3, [pc, #200]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea70:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800ea78:	4b2e      	ldr	r3, [pc, #184]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea7e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800ea86:	4b2b      	ldr	r3, [pc, #172]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea8c:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800ea94:	4b27      	ldr	r3, [pc, #156]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800ea96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea9a:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800eaa2:	4b24      	ldr	r3, [pc, #144]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eaa8:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800eab0:	4b20      	ldr	r3, [pc, #128]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eab6:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800eabe:	4b1d      	ldr	r3, [pc, #116]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eac4:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800eacc:	4b19      	ldr	r3, [pc, #100]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ead2:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800eada:	4b16      	ldr	r3, [pc, #88]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eae0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800eaea:	4b12      	ldr	r3, [pc, #72]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800eaf2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800eaf4:	4b0f      	ldr	r3, [pc, #60]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eaf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaf8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	431a      	orrs	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800eb04:	4b0b      	ldr	r3, [pc, #44]	@ (800eb34 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800eb06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d103      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800eb18:	e003      	b.n	800eb22 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eb20:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800eb22:	bf00      	nop
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	00fffff1 	.word	0x00fffff1
 800eb34:	40023800 	.word	0x40023800

0800eb38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800eb44:	2300      	movs	r3, #0
 800eb46:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800eb56:	f040 808d 	bne.w	800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800eb5a:	4b93      	ldr	r3, [pc, #588]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb60:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800eb68:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb70:	d07c      	beq.n	800ec6c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb78:	d87b      	bhi.n	800ec72 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d004      	beq.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb86:	d039      	beq.n	800ebfc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800eb88:	e073      	b.n	800ec72 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800eb8a:	4b87      	ldr	r3, [pc, #540]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d108      	bne.n	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800eb96:	4b84      	ldr	r3, [pc, #528]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb9e:	4a83      	ldr	r2, [pc, #524]	@ (800edac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800eba0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eba4:	613b      	str	r3, [r7, #16]
 800eba6:	e007      	b.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800eba8:	4b7f      	ldr	r3, [pc, #508]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ebb0:	4a7f      	ldr	r2, [pc, #508]	@ (800edb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ebb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebb6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ebb8:	4b7b      	ldr	r3, [pc, #492]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebbe:	0e1b      	lsrs	r3, r3, #24
 800ebc0:	f003 030f 	and.w	r3, r3, #15
 800ebc4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ebc6:	4b78      	ldr	r3, [pc, #480]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebcc:	099b      	lsrs	r3, r3, #6
 800ebce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	fb03 f202 	mul.w	r2, r3, r2
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebde:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ebe0:	4b71      	ldr	r3, [pc, #452]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ebe6:	0a1b      	lsrs	r3, r3, #8
 800ebe8:	f003 031f 	and.w	r3, r3, #31
 800ebec:	3301      	adds	r3, #1
 800ebee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ebf0:	697a      	ldr	r2, [r7, #20]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebf8:	617b      	str	r3, [r7, #20]
        break;
 800ebfa:	e03b      	b.n	800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ebfc:	4b6a      	ldr	r3, [pc, #424]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d108      	bne.n	800ec1a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ec08:	4b67      	ldr	r3, [pc, #412]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec10:	4a66      	ldr	r2, [pc, #408]	@ (800edac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ec12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec16:	613b      	str	r3, [r7, #16]
 800ec18:	e007      	b.n	800ec2a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ec1a:	4b63      	ldr	r3, [pc, #396]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec22:	4a63      	ldr	r2, [pc, #396]	@ (800edb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec28:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ec2a:	4b5f      	ldr	r3, [pc, #380]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec30:	0e1b      	lsrs	r3, r3, #24
 800ec32:	f003 030f 	and.w	r3, r3, #15
 800ec36:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ec38:	4b5b      	ldr	r3, [pc, #364]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec3e:	099b      	lsrs	r3, r3, #6
 800ec40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec44:	693a      	ldr	r2, [r7, #16]
 800ec46:	fb03 f202 	mul.w	r2, r3, r2
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec50:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ec52:	4b55      	ldr	r3, [pc, #340]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec58:	f003 031f 	and.w	r3, r3, #31
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ec60:	697a      	ldr	r2, [r7, #20]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec68:	617b      	str	r3, [r7, #20]
        break;
 800ec6a:	e003      	b.n	800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ec6c:	4b51      	ldr	r3, [pc, #324]	@ (800edb4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ec6e:	617b      	str	r3, [r7, #20]
        break;
 800ec70:	e000      	b.n	800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800ec72:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec7a:	f040 808d 	bne.w	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ec7e:	4b4a      	ldr	r3, [pc, #296]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ec80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec84:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ec8c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec94:	d07c      	beq.n	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec9c:	d87b      	bhi.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d004      	beq.n	800ecae <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ecaa:	d039      	beq.n	800ed20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ecac:	e073      	b.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ecae:	4b3e      	ldr	r3, [pc, #248]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d108      	bne.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ecba:	4b3b      	ldr	r3, [pc, #236]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ecc2:	4a3a      	ldr	r2, [pc, #232]	@ (800edac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ecc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc8:	613b      	str	r3, [r7, #16]
 800ecca:	e007      	b.n	800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800eccc:	4b36      	ldr	r3, [pc, #216]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ecd4:	4a36      	ldr	r2, [pc, #216]	@ (800edb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ecd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecda:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ecdc:	4b32      	ldr	r3, [pc, #200]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ece2:	0e1b      	lsrs	r3, r3, #24
 800ece4:	f003 030f 	and.w	r3, r3, #15
 800ece8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ecea:	4b2f      	ldr	r3, [pc, #188]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ecec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecf0:	099b      	lsrs	r3, r3, #6
 800ecf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecf6:	693a      	ldr	r2, [r7, #16]
 800ecf8:	fb03 f202 	mul.w	r2, r3, r2
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed02:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ed04:	4b28      	ldr	r3, [pc, #160]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed0a:	0a1b      	lsrs	r3, r3, #8
 800ed0c:	f003 031f 	and.w	r3, r3, #31
 800ed10:	3301      	adds	r3, #1
 800ed12:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ed14:	697a      	ldr	r2, [r7, #20]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed1c:	617b      	str	r3, [r7, #20]
        break;
 800ed1e:	e03b      	b.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ed20:	4b21      	ldr	r3, [pc, #132]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d108      	bne.n	800ed3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ed2c:	4b1e      	ldr	r3, [pc, #120]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed34:	4a1d      	ldr	r2, [pc, #116]	@ (800edac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ed36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed3a:	613b      	str	r3, [r7, #16]
 800ed3c:	e007      	b.n	800ed4e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ed3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed46:	4a1a      	ldr	r2, [pc, #104]	@ (800edb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed4c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ed4e:	4b16      	ldr	r3, [pc, #88]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed54:	0e1b      	lsrs	r3, r3, #24
 800ed56:	f003 030f 	and.w	r3, r3, #15
 800ed5a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ed5c:	4b12      	ldr	r3, [pc, #72]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed62:	099b      	lsrs	r3, r3, #6
 800ed64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	fb03 f202 	mul.w	r2, r3, r2
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed74:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ed76:	4b0c      	ldr	r3, [pc, #48]	@ (800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ed78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed7c:	f003 031f 	and.w	r3, r3, #31
 800ed80:	3301      	adds	r3, #1
 800ed82:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed8c:	617b      	str	r3, [r7, #20]
        break;
 800ed8e:	e003      	b.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ed90:	4b08      	ldr	r3, [pc, #32]	@ (800edb4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ed92:	617b      	str	r3, [r7, #20]
        break;
 800ed94:	e000      	b.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800ed96:	bf00      	nop
      }
    }
  }

  return frequency;
 800ed98:	697b      	ldr	r3, [r7, #20]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	371c      	adds	r7, #28
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	40023800 	.word	0x40023800
 800edac:	00f42400 	.word	0x00f42400
 800edb0:	017d7840 	.word	0x017d7840
 800edb4:	00bb8000 	.word	0x00bb8000

0800edb8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b088      	sub	sp, #32
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d101      	bne.n	800edd6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800edd2:	2301      	movs	r3, #1
 800edd4:	e156      	b.n	800f084 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d106      	bne.n	800edf0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7f9 fd42 	bl	8008874 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2202      	movs	r2, #2
 800edf4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 fa85 	bl	800f308 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d00c      	beq.n	800ee20 <HAL_SAI_Init+0x68>
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	d80d      	bhi.n	800ee26 <HAL_SAI_Init+0x6e>
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d002      	beq.n	800ee14 <HAL_SAI_Init+0x5c>
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d003      	beq.n	800ee1a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800ee12:	e008      	b.n	800ee26 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	61fb      	str	r3, [r7, #28]
      break;
 800ee18:	e006      	b.n	800ee28 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ee1a:	2310      	movs	r3, #16
 800ee1c:	61fb      	str	r3, [r7, #28]
      break;
 800ee1e:	e003      	b.n	800ee28 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ee20:	2320      	movs	r3, #32
 800ee22:	61fb      	str	r3, [r7, #28]
      break;
 800ee24:	e000      	b.n	800ee28 <HAL_SAI_Init+0x70>
      break;
 800ee26:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d81e      	bhi.n	800ee6e <HAL_SAI_Init+0xb6>
 800ee30:	a201      	add	r2, pc, #4	@ (adr r2, 800ee38 <HAL_SAI_Init+0x80>)
 800ee32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee36:	bf00      	nop
 800ee38:	0800ee49 	.word	0x0800ee49
 800ee3c:	0800ee4f 	.word	0x0800ee4f
 800ee40:	0800ee57 	.word	0x0800ee57
 800ee44:	0800ee5f 	.word	0x0800ee5f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	617b      	str	r3, [r7, #20]
    }
    break;
 800ee4c:	e010      	b.n	800ee70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ee4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee52:	617b      	str	r3, [r7, #20]
    }
    break;
 800ee54:	e00c      	b.n	800ee70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ee56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee5a:	617b      	str	r3, [r7, #20]
    }
    break;
 800ee5c:	e008      	b.n	800ee70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ee5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee62:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	f043 0301 	orr.w	r3, r3, #1
 800ee6a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ee6c:	e000      	b.n	800ee70 <HAL_SAI_Init+0xb8>
    default:
      break;
 800ee6e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a85      	ldr	r2, [pc, #532]	@ (800f08c <HAL_SAI_Init+0x2d4>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d004      	beq.n	800ee84 <HAL_SAI_Init+0xcc>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a84      	ldr	r2, [pc, #528]	@ (800f090 <HAL_SAI_Init+0x2d8>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d103      	bne.n	800ee8c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ee84:	4a83      	ldr	r2, [pc, #524]	@ (800f094 <HAL_SAI_Init+0x2dc>)
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	6013      	str	r3, [r2, #0]
 800ee8a:	e002      	b.n	800ee92 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ee8c:	4a82      	ldr	r2, [pc, #520]	@ (800f098 <HAL_SAI_Init+0x2e0>)
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	69db      	ldr	r3, [r3, #28]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d04c      	beq.n	800ef34 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a7a      	ldr	r2, [pc, #488]	@ (800f08c <HAL_SAI_Init+0x2d4>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d004      	beq.n	800eeb2 <HAL_SAI_Init+0xfa>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a78      	ldr	r2, [pc, #480]	@ (800f090 <HAL_SAI_Init+0x2d8>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d104      	bne.n	800eebc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800eeb2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800eeb6:	f7ff fe3f 	bl	800eb38 <HAL_RCCEx_GetPeriphCLKFreq>
 800eeba:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a76      	ldr	r2, [pc, #472]	@ (800f09c <HAL_SAI_Init+0x2e4>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d004      	beq.n	800eed0 <HAL_SAI_Init+0x118>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a75      	ldr	r2, [pc, #468]	@ (800f0a0 <HAL_SAI_Init+0x2e8>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d104      	bne.n	800eeda <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800eed0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800eed4:	f7ff fe30 	bl	800eb38 <HAL_RCCEx_GetPeriphCLKFreq>
 800eed8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	4613      	mov	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4413      	add	r3, r2
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	461a      	mov	r2, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	025b      	lsls	r3, r3, #9
 800eeec:	fbb2 f3f3 	udiv	r3, r2, r3
 800eef0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	4a6b      	ldr	r2, [pc, #428]	@ (800f0a4 <HAL_SAI_Init+0x2ec>)
 800eef6:	fba2 2303 	umull	r2, r3, r2, r3
 800eefa:	08da      	lsrs	r2, r3, #3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800ef00:	68f9      	ldr	r1, [r7, #12]
 800ef02:	4b68      	ldr	r3, [pc, #416]	@ (800f0a4 <HAL_SAI_Init+0x2ec>)
 800ef04:	fba3 2301 	umull	r2, r3, r3, r1
 800ef08:	08da      	lsrs	r2, r3, #3
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	4413      	add	r3, r2
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	1aca      	subs	r2, r1, r3
 800ef14:	2a08      	cmp	r2, #8
 800ef16:	d904      	bls.n	800ef22 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a1b      	ldr	r3, [r3, #32]
 800ef1c:	1c5a      	adds	r2, r3, #1
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef26:	2b04      	cmp	r3, #4
 800ef28:	d104      	bne.n	800ef34 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6a1b      	ldr	r3, [r3, #32]
 800ef2e:	085a      	lsrs	r2, r3, #1
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <HAL_SAI_Init+0x18c>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	2b02      	cmp	r3, #2
 800ef42:	d109      	bne.n	800ef58 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d101      	bne.n	800ef50 <HAL_SAI_Init+0x198>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	e001      	b.n	800ef54 <HAL_SAI_Init+0x19c>
 800ef50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef54:	61bb      	str	r3, [r7, #24]
 800ef56:	e008      	b.n	800ef6a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d102      	bne.n	800ef66 <HAL_SAI_Init+0x1ae>
 800ef60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef64:	e000      	b.n	800ef68 <HAL_SAI_Init+0x1b0>
 800ef66:	2300      	movs	r3, #0
 800ef68:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6819      	ldr	r1, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	4b4c      	ldr	r3, [pc, #304]	@ (800f0a8 <HAL_SAI_Init+0x2f0>)
 800ef76:	400b      	ands	r3, r1
 800ef78:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6819      	ldr	r1, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685a      	ldr	r2, [r3, #4]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef88:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef8e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef94:	431a      	orrs	r2, r3
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800efa2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800efae:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6a1b      	ldr	r3, [r3, #32]
 800efb4:	051b      	lsls	r3, r3, #20
 800efb6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	430a      	orrs	r2, r1
 800efbe:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6859      	ldr	r1, [r3, #4]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	4b38      	ldr	r3, [pc, #224]	@ (800f0ac <HAL_SAI_Init+0x2f4>)
 800efcc:	400b      	ands	r3, r1
 800efce:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6859      	ldr	r1, [r3, #4]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	699a      	ldr	r2, [r3, #24]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efde:	431a      	orrs	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe4:	431a      	orrs	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	430a      	orrs	r2, r1
 800efec:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	6899      	ldr	r1, [r3, #8]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	4b2d      	ldr	r3, [pc, #180]	@ (800f0b0 <HAL_SAI_Init+0x2f8>)
 800effa:	400b      	ands	r3, r1
 800effc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6899      	ldr	r1, [r3, #8]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f008:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f00e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800f014:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800f01a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f020:	3b01      	subs	r3, #1
 800f022:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f024:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	430a      	orrs	r2, r1
 800f02c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68d9      	ldr	r1, [r3, #12]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800f03c:	400b      	ands	r3, r1
 800f03e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	68d9      	ldr	r1, [r3, #12]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f04e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f054:	041b      	lsls	r3, r3, #16
 800f056:	431a      	orrs	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f05c:	3b01      	subs	r3, #1
 800f05e:	021b      	lsls	r3, r3, #8
 800f060:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	430a      	orrs	r2, r1
 800f068:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2201      	movs	r2, #1
 800f076:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800f082:	2300      	movs	r3, #0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3720      	adds	r7, #32
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	40015804 	.word	0x40015804
 800f090:	40015824 	.word	0x40015824
 800f094:	40015800 	.word	0x40015800
 800f098:	40015c00 	.word	0x40015c00
 800f09c:	40015c04 	.word	0x40015c04
 800f0a0:	40015c24 	.word	0x40015c24
 800f0a4:	cccccccd 	.word	0xcccccccd
 800f0a8:	ff05c010 	.word	0xff05c010
 800f0ac:	ffff1ff0 	.word	0xffff1ff0
 800f0b0:	fff88000 	.word	0xfff88000

0800f0b4 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e027      	b.n	800f116 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2202      	movs	r2, #2
 800f0ca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f04f 32ff 	mov.w	r2, #4294967295
 800f0de:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f911 	bl	800f308 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f042 0208 	orr.w	r2, r2, #8
 800f0f4:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7f9 fc9a 	bl	8008a30 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
	...

0800f120 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	4613      	mov	r3, r2
 800f12c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f12e:	f7fb fb43 	bl	800a7b8 <HAL_GetTick>
 800f132:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <HAL_SAI_Transmit_DMA+0x20>
 800f13a:	88fb      	ldrh	r3, [r7, #6]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	e093      	b.n	800f26c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	f040 808c 	bne.w	800f26a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d101      	bne.n	800f160 <HAL_SAI_Transmit_DMA+0x40>
 800f15c:	2302      	movs	r3, #2
 800f15e:	e085      	b.n	800f26c <HAL_SAI_Transmit_DMA+0x14c>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2201      	movs	r2, #1
 800f164:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	88fa      	ldrh	r2, [r7, #6]
 800f172:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	88fa      	ldrh	r2, [r7, #6]
 800f17a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2212      	movs	r2, #18
 800f18a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f192:	4a38      	ldr	r2, [pc, #224]	@ (800f274 <HAL_SAI_Transmit_DMA+0x154>)
 800f194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f19a:	4a37      	ldr	r2, [pc, #220]	@ (800f278 <HAL_SAI_Transmit_DMA+0x158>)
 800f19c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1a2:	4a36      	ldr	r2, [pc, #216]	@ (800f27c <HAL_SAI_Transmit_DMA+0x15c>)
 800f1a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	331c      	adds	r3, #28
 800f1be:	461a      	mov	r2, r3
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f1c6:	f7fc f90f 	bl	800b3e8 <HAL_DMA_Start_IT>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d005      	beq.n	800f1dc <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	e047      	b.n	800f26c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f1dc:	2100      	movs	r1, #0
 800f1de:	68f8      	ldr	r0, [r7, #12]
 800f1e0:	f000 f85c 	bl	800f29c <SAI_InterruptFlag>
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	691a      	ldr	r2, [r3, #16]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	430a      	orrs	r2, r1
 800f1f2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f202:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f204:	e015      	b.n	800f232 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f206:	f7fb fad7 	bl	800a7b8 <HAL_GetTick>
 800f20a:	4602      	mov	r2, r0
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f214:	d90d      	bls.n	800f232 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f21c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2200      	movs	r2, #0
 800f22a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f22e:	2303      	movs	r3, #3
 800f230:	e01c      	b.n	800f26c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	695b      	ldr	r3, [r3, #20]
 800f238:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d0e2      	beq.n	800f206 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d107      	bne.n	800f25e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f25c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2200      	movs	r2, #0
 800f262:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f266:	2300      	movs	r3, #0
 800f268:	e000      	b.n	800f26c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800f26a:	2302      	movs	r3, #2
  }
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3718      	adds	r7, #24
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	0800f3d9 	.word	0x0800f3d9
 800f278:	0800f379 	.word	0x0800f379
 800f27c:	0800f3f5 	.word	0x0800f3f5

0800f280 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f28e:	b2db      	uxtb	r3, r3
}
 800f290:	4618      	mov	r0, r3
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b085      	sub	sp, #20
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d103      	bne.n	800f2b8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f043 0308 	orr.w	r3, r3, #8
 800f2b6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2bc:	2b08      	cmp	r3, #8
 800f2be:	d10b      	bne.n	800f2d8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d003      	beq.n	800f2d0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d103      	bne.n	800f2d8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f043 0310 	orr.w	r3, r3, #16
 800f2d6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	2b03      	cmp	r3, #3
 800f2de:	d003      	beq.n	800f2e8 <SAI_InterruptFlag+0x4c>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d104      	bne.n	800f2f2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	e003      	b.n	800f2fa <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f043 0304 	orr.w	r3, r3, #4
 800f2f8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800f310:	4b17      	ldr	r3, [pc, #92]	@ (800f370 <SAI_Disable+0x68>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a17      	ldr	r2, [pc, #92]	@ (800f374 <SAI_Disable+0x6c>)
 800f316:	fba2 2303 	umull	r2, r3, r2, r3
 800f31a:	0b1b      	lsrs	r3, r3, #12
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f320:	2300      	movs	r3, #0
 800f322:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f332:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	1e5a      	subs	r2, r3, #1
 800f338:	60fa      	str	r2, [r7, #12]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d10a      	bne.n	800f354 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800f34e:	2303      	movs	r3, #3
 800f350:	72fb      	strb	r3, [r7, #11]
      break;
 800f352:	e006      	b.n	800f362 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1e8      	bne.n	800f334 <SAI_Disable+0x2c>

  return status;
 800f362:	7afb      	ldrb	r3, [r7, #11]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3714      	adds	r7, #20
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr
 800f370:	20000050 	.word	0x20000050
 800f374:	95cbec1b 	.word	0x95cbec1b

0800f378 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f384:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	69db      	ldr	r3, [r3, #28]
 800f38a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f38e:	d01c      	beq.n	800f3ca <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2200      	movs	r2, #0
 800f394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f3a6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f7ff ff76 	bl	800f29c <SAI_InterruptFlag>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	43d9      	mvns	r1, r3
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	691a      	ldr	r2, [r3, #16]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	400a      	ands	r2, r1
 800f3c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7f7 f816 	bl	80063fc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f3d0:	bf00      	nop
 800f3d2:	3710      	adds	r7, #16
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f7f7 f812 	bl	8006410 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f3ec:	bf00      	nop
 800f3ee:	3710      	adds	r7, #16
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f400:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f408:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d004      	beq.n	800f426 <SAI_DMAError+0x32>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f422:	2b01      	cmp	r3, #1
 800f424:	d112      	bne.n	800f44c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f434:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7ff ff66 	bl	800f308 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f7f6 ffe9 	bl	8006424 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f452:	bf00      	nop
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b082      	sub	sp, #8
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d101      	bne.n	800f46c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	e022      	b.n	800f4b2 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f472:	b2db      	uxtb	r3, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d105      	bne.n	800f484 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7f8 ffe0 	bl	8008444 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2203      	movs	r2, #3
 800f488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 f815 	bl	800f4bc <HAL_SD_InitCard>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f498:	2301      	movs	r3, #1
 800f49a:	e00a      	b.n	800f4b2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
	...

0800f4bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f4bc:	b5b0      	push	{r4, r5, r7, lr}
 800f4be:	b08e      	sub	sp, #56	@ 0x38
 800f4c0:	af04      	add	r7, sp, #16
 800f4c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f4d8:	2376      	movs	r3, #118	@ 0x76
 800f4da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681d      	ldr	r5, [r3, #0]
 800f4e0:	466c      	mov	r4, sp
 800f4e2:	f107 0314 	add.w	r3, r7, #20
 800f4e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f4ee:	f107 0308 	add.w	r3, r7, #8
 800f4f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f002 f99d 	bl	8011834 <SDMMC_Init>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800f500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f508:	2301      	movs	r3, #1
 800f50a:	e059      	b.n	800f5c0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f51a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4618      	mov	r0, r3
 800f522:	f002 f9d1 	bl	80118c8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	685a      	ldr	r2, [r3, #4]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f534:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800f536:	2002      	movs	r0, #2
 800f538:	f7fb f94a 	bl	800a7d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 ff59 	bl	80103f4 <SD_PowerON>
 800f542:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00b      	beq.n	800f562 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2201      	movs	r2, #1
 800f54e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	431a      	orrs	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f55e:	2301      	movs	r3, #1
 800f560:	e02e      	b.n	800f5c0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 fe78 	bl	8010258 <SD_InitCard>
 800f568:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f56a:	6a3b      	ldr	r3, [r7, #32]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00b      	beq.n	800f588 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	431a      	orrs	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f584:	2301      	movs	r3, #1
 800f586:	e01b      	b.n	800f5c0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f590:	4618      	mov	r0, r3
 800f592:	f002 fa2b 	bl	80119ec <SDMMC_CmdBlockLength>
 800f596:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00f      	beq.n	800f5be <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4a09      	ldr	r2, [pc, #36]	@ (800f5c8 <HAL_SD_InitCard+0x10c>)
 800f5a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5aa:	6a3b      	ldr	r3, [r7, #32]
 800f5ac:	431a      	orrs	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e000      	b.n	800f5c0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3728      	adds	r7, #40	@ 0x28
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bdb0      	pop	{r4, r5, r7, pc}
 800f5c8:	004005ff 	.word	0x004005ff

0800f5cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b08c      	sub	sp, #48	@ 0x30
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d107      	bne.n	800f5f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e0c3      	b.n	800f77c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	f040 80bc 	bne.w	800f77a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2200      	movs	r2, #0
 800f606:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	441a      	add	r2, r3
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f612:	429a      	cmp	r2, r3
 800f614:	d907      	bls.n	800f626 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f61a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	e0aa      	b.n	800f77c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2203      	movs	r2, #3
 800f62a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2200      	movs	r2, #0
 800f634:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800f644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f64a:	4a4e      	ldr	r2, [pc, #312]	@ (800f784 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800f64c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f652:	4a4d      	ldr	r2, [pc, #308]	@ (800f788 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800f654:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f65a:	2200      	movs	r2, #0
 800f65c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f662:	2200      	movs	r2, #0
 800f664:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f676:	689a      	ldr	r2, [r3, #8]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	430a      	orrs	r2, r1
 800f680:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	3380      	adds	r3, #128	@ 0x80
 800f68c:	4619      	mov	r1, r3
 800f68e:	68ba      	ldr	r2, [r7, #8]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	025b      	lsls	r3, r3, #9
 800f694:	089b      	lsrs	r3, r3, #2
 800f696:	f7fb fea7 	bl	800b3e8 <HAL_DMA_Start_IT>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d017      	beq.n	800f6d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800f6ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a35      	ldr	r2, [pc, #212]	@ (800f78c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f6b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e055      	b.n	800f77c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f042 0208 	orr.w	r2, r2, #8
 800f6de:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d002      	beq.n	800f6ee <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800f6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ea:	025b      	lsls	r3, r3, #9
 800f6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	025b      	lsls	r3, r3, #9
 800f6f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f6fa:	2390      	movs	r3, #144	@ 0x90
 800f6fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6fe:	2302      	movs	r3, #2
 800f700:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f702:	2300      	movs	r3, #0
 800f704:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f706:	2301      	movs	r3, #1
 800f708:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f107 0210 	add.w	r2, r7, #16
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f002 f93d 	bl	8011994 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d90a      	bls.n	800f736 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2282      	movs	r2, #130	@ 0x82
 800f724:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f72c:	4618      	mov	r0, r3
 800f72e:	f002 f9a1 	bl	8011a74 <SDMMC_CmdReadMultiBlock>
 800f732:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f734:	e009      	b.n	800f74a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2281      	movs	r2, #129	@ 0x81
 800f73a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f742:	4618      	mov	r0, r3
 800f744:	f002 f974 	bl	8011a30 <SDMMC_CmdReadSingleBlock>
 800f748:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d012      	beq.n	800f776 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a0d      	ldr	r2, [pc, #52]	@ (800f78c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f756:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f75e:	431a      	orrs	r2, r3
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2201      	movs	r2, #1
 800f768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2200      	movs	r2, #0
 800f770:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800f772:	2301      	movs	r3, #1
 800f774:	e002      	b.n	800f77c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f776:	2300      	movs	r3, #0
 800f778:	e000      	b.n	800f77c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f77a:	2302      	movs	r3, #2
  }
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3730      	adds	r7, #48	@ 0x30
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	08010067 	.word	0x08010067
 800f788:	080100d9 	.word	0x080100d9
 800f78c:	004005ff 	.word	0x004005ff

0800f790 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b08c      	sub	sp, #48	@ 0x30
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d107      	bne.n	800f7b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e0c6      	b.n	800f946 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	f040 80bf 	bne.w	800f944 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f7cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	441a      	add	r2, r3
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d907      	bls.n	800f7ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7de:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e0ad      	b.n	800f946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2203      	movs	r2, #3
 800f7ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f042 021a 	orr.w	r2, r2, #26
 800f808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f80e:	4a50      	ldr	r2, [pc, #320]	@ (800f950 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f810:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f816:	4a4f      	ldr	r2, [pc, #316]	@ (800f954 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f818:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f81e:	2200      	movs	r2, #0
 800f820:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f826:	2b01      	cmp	r3, #1
 800f828:	d002      	beq.n	800f830 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82c:	025b      	lsls	r3, r3, #9
 800f82e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d90a      	bls.n	800f84c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	22a0      	movs	r2, #160	@ 0xa0
 800f83a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f842:	4618      	mov	r0, r3
 800f844:	f002 f95a 	bl	8011afc <SDMMC_CmdWriteMultiBlock>
 800f848:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f84a:	e009      	b.n	800f860 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2290      	movs	r2, #144	@ 0x90
 800f850:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f858:	4618      	mov	r0, r3
 800f85a:	f002 f92d 	bl	8011ab8 <SDMMC_CmdWriteSingleBlock>
 800f85e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f862:	2b00      	cmp	r3, #0
 800f864:	d012      	beq.n	800f88c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a3b      	ldr	r2, [pc, #236]	@ (800f958 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f86c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f874:	431a      	orrs	r2, r3
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2201      	movs	r2, #1
 800f87e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2200      	movs	r2, #0
 800f886:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800f888:	2301      	movs	r3, #1
 800f88a:	e05c      	b.n	800f946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f042 0208 	orr.w	r2, r2, #8
 800f89a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8a0:	2240      	movs	r2, #64	@ 0x40
 800f8a2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8b4:	689a      	ldr	r2, [r3, #8]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	430a      	orrs	r2, r1
 800f8be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f8c4:	68b9      	ldr	r1, [r7, #8]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3380      	adds	r3, #128	@ 0x80
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	025b      	lsls	r3, r3, #9
 800f8d2:	089b      	lsrs	r3, r3, #2
 800f8d4:	f7fb fd88 	bl	800b3e8 <HAL_DMA_Start_IT>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d01a      	beq.n	800f914 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f022 021a 	bic.w	r2, r2, #26
 800f8ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4a19      	ldr	r2, [pc, #100]	@ (800f958 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f8f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2201      	movs	r2, #1
 800f906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2200      	movs	r2, #0
 800f90e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	e018      	b.n	800f946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f914:	f04f 33ff 	mov.w	r3, #4294967295
 800f918:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	025b      	lsls	r3, r3, #9
 800f91e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f920:	2390      	movs	r3, #144	@ 0x90
 800f922:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f924:	2300      	movs	r3, #0
 800f926:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f928:	2300      	movs	r3, #0
 800f92a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f92c:	2301      	movs	r3, #1
 800f92e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f107 0210 	add.w	r2, r7, #16
 800f938:	4611      	mov	r1, r2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f002 f82a 	bl	8011994 <SDMMC_ConfigData>

      return HAL_OK;
 800f940:	2300      	movs	r3, #0
 800f942:	e000      	b.n	800f946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f944:	2302      	movs	r3, #2
  }
}
 800f946:	4618      	mov	r0, r3
 800f948:	3730      	adds	r7, #48	@ 0x30
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	0801003d 	.word	0x0801003d
 800f954:	080100d9 	.word	0x080100d9
 800f958:	004005ff 	.word	0x004005ff

0800f95c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f968:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f974:	2b00      	cmp	r3, #0
 800f976:	d008      	beq.n	800f98a <HAL_SD_IRQHandler+0x2e>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f003 0308 	and.w	r3, r3, #8
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d003      	beq.n	800f98a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 fdec 	bl	8010560 <SD_Read_IT>
 800f988:	e15a      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 808d 	beq.w	800fab4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f9a2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	4b9a      	ldr	r3, [pc, #616]	@ (800fc18 <HAL_SD_IRQHandler+0x2bc>)
 800f9b0:	400b      	ands	r3, r1
 800f9b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f022 0201 	bic.w	r2, r2, #1
 800f9c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f003 0308 	and.w	r3, r3, #8
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d039      	beq.n	800fa42 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f003 0302 	and.w	r3, r3, #2
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d104      	bne.n	800f9e2 <HAL_SD_IRQHandler+0x86>
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f003 0320 	and.w	r3, r3, #32
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d011      	beq.n	800fa06 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f002 f8aa 	bl	8011b40 <SDMMC_CmdStopTransfer>
 800f9ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d008      	beq.n	800fa06 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	431a      	orrs	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f921 	bl	800fc48 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800fa0e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f003 0301 	and.w	r3, r3, #1
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d104      	bne.n	800fa32 <HAL_SD_IRQHandler+0xd6>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f003 0302 	and.w	r3, r3, #2
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d003      	beq.n	800fa3a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f002 fcc8 	bl	80123c8 <HAL_SD_RxCpltCallback>
 800fa38:	e102      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f002 fcba 	bl	80123b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fa40:	e0fe      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 80f9 	beq.w	800fc40 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f003 0320 	and.w	r3, r3, #32
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d011      	beq.n	800fa7c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f002 f86f 	bl	8011b40 <SDMMC_CmdStopTransfer>
 800fa62:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d008      	beq.n	800fa7c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	431a      	orrs	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 f8e6 	bl	800fc48 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f003 0301 	and.w	r3, r3, #1
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f040 80dc 	bne.w	800fc40 <HAL_SD_IRQHandler+0x2e4>
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f003 0302 	and.w	r3, r3, #2
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f040 80d6 	bne.w	800fc40 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f022 0208 	bic.w	r2, r2, #8
 800faa2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2201      	movs	r2, #1
 800faa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f002 fc81 	bl	80123b4 <HAL_SD_TxCpltCallback>
}
 800fab2:	e0c5      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d008      	beq.n	800fad4 <HAL_SD_IRQHandler+0x178>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f003 0308 	and.w	r3, r3, #8
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d003      	beq.n	800fad4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 fd98 	bl	8010602 <SD_Write_IT>
 800fad2:	e0b5      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fada:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f000 80ae 	beq.w	800fc40 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faea:	f003 0302 	and.w	r3, r3, #2
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d005      	beq.n	800fafe <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf6:	f043 0202 	orr.w	r2, r3, #2
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb04:	f003 0308 	and.w	r3, r3, #8
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d005      	beq.n	800fb18 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb10:	f043 0208 	orr.w	r2, r3, #8
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb1e:	f003 0320 	and.w	r3, r3, #32
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d005      	beq.n	800fb32 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb2a:	f043 0220 	orr.w	r2, r3, #32
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb38:	f003 0310 	and.w	r3, r3, #16
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d005      	beq.n	800fb4c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb44:	f043 0210 	orr.w	r2, r3, #16
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f240 523a 	movw	r2, #1338	@ 0x53a
 800fb54:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800fb64:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f001 ffe8 	bl	8011b40 <SDMMC_CmdStopTransfer>
 800fb70:	4602      	mov	r2, r0
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb76:	431a      	orrs	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f003 0308 	and.w	r3, r3, #8
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00a      	beq.n	800fb9c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2201      	movs	r2, #1
 800fb8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 f857 	bl	800fc48 <HAL_SD_ErrorCallback>
}
 800fb9a:	e051      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d04c      	beq.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f003 0310 	and.w	r3, r3, #16
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d104      	bne.n	800fbba <HAL_SD_IRQHandler+0x25e>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f003 0320 	and.w	r3, r3, #32
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d011      	beq.n	800fbde <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbbe:	4a17      	ldr	r2, [pc, #92]	@ (800fc1c <HAL_SD_IRQHandler+0x2c0>)
 800fbc0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fb fc6e 	bl	800b4a8 <HAL_DMA_Abort_IT>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d036      	beq.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f000 fad0 	bl	801017c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fbdc:	e030      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f003 0301 	and.w	r3, r3, #1
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d104      	bne.n	800fbf2 <HAL_SD_IRQHandler+0x296>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f003 0302 	and.w	r3, r3, #2
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d018      	beq.n	800fc24 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbf6:	4a0a      	ldr	r2, [pc, #40]	@ (800fc20 <HAL_SD_IRQHandler+0x2c4>)
 800fbf8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fb fc52 	bl	800b4a8 <HAL_DMA_Abort_IT>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d01a      	beq.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f000 faeb 	bl	80101ea <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fc14:	e014      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
 800fc16:	bf00      	nop
 800fc18:	ffff3ec5 	.word	0xffff3ec5
 800fc1c:	0801017d 	.word	0x0801017d
 800fc20:	080101eb 	.word	0x080101eb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2200      	movs	r2, #0
 800fc28:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f002 fbb1 	bl	80123a0 <HAL_SD_AbortCallback>
}
 800fc3e:	e7ff      	b.n	800fc40 <HAL_SD_IRQHandler+0x2e4>
 800fc40:	bf00      	nop
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc6a:	0f9b      	lsrs	r3, r3, #30
 800fc6c:	b2da      	uxtb	r2, r3
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc76:	0e9b      	lsrs	r3, r3, #26
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	f003 030f 	and.w	r3, r3, #15
 800fc7e:	b2da      	uxtb	r2, r3
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc88:	0e1b      	lsrs	r3, r3, #24
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	f003 0303 	and.w	r3, r3, #3
 800fc90:	b2da      	uxtb	r2, r3
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc9a:	0c1b      	lsrs	r3, r3, #16
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fca6:	0a1b      	lsrs	r3, r3, #8
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcbc:	0d1b      	lsrs	r3, r3, #20
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcc8:	0c1b      	lsrs	r3, r3, #16
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	f003 030f 	and.w	r3, r3, #15
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcda:	0bdb      	lsrs	r3, r3, #15
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	f003 0301 	and.w	r3, r3, #1
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcec:	0b9b      	lsrs	r3, r3, #14
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	f003 0301 	and.w	r3, r3, #1
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcfe:	0b5b      	lsrs	r3, r3, #13
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	b2da      	uxtb	r2, r3
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd10:	0b1b      	lsrs	r3, r3, #12
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	f003 0301 	and.w	r3, r3, #1
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	2200      	movs	r2, #0
 800fd22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d163      	bne.n	800fdf4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd30:	009a      	lsls	r2, r3, #2
 800fd32:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800fd36:	4013      	ands	r3, r2
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800fd3c:	0f92      	lsrs	r2, r2, #30
 800fd3e:	431a      	orrs	r2, r3
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd48:	0edb      	lsrs	r3, r3, #27
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	f003 0307 	and.w	r3, r3, #7
 800fd50:	b2da      	uxtb	r2, r3
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd5a:	0e1b      	lsrs	r3, r3, #24
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	f003 0307 	and.w	r3, r3, #7
 800fd62:	b2da      	uxtb	r2, r3
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd6c:	0d5b      	lsrs	r3, r3, #21
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	f003 0307 	and.w	r3, r3, #7
 800fd74:	b2da      	uxtb	r2, r3
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd7e:	0c9b      	lsrs	r3, r3, #18
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	f003 0307 	and.w	r3, r3, #7
 800fd86:	b2da      	uxtb	r2, r3
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd90:	0bdb      	lsrs	r3, r3, #15
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	f003 0307 	and.w	r3, r3, #7
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	1c5a      	adds	r2, r3, #1
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	7e1b      	ldrb	r3, [r3, #24]
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	f003 0307 	and.w	r3, r3, #7
 800fdb2:	3302      	adds	r3, #2
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800fdbe:	fb03 f202 	mul.w	r2, r3, r2
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	7a1b      	ldrb	r3, [r3, #8]
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	f003 030f 	and.w	r3, r3, #15
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	409a      	lsls	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800fde0:	0a52      	lsrs	r2, r2, #9
 800fde2:	fb03 f202 	mul.w	r2, r3, r2
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdf0:	661a      	str	r2, [r3, #96]	@ 0x60
 800fdf2:	e031      	b.n	800fe58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d11d      	bne.n	800fe38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe00:	041b      	lsls	r3, r3, #16
 800fe02:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe0a:	0c1b      	lsrs	r3, r3, #16
 800fe0c:	431a      	orrs	r2, r3
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	3301      	adds	r3, #1
 800fe18:	029a      	lsls	r2, r3, #10
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe2c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	661a      	str	r2, [r3, #96]	@ 0x60
 800fe36:	e00f      	b.n	800fe58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a58      	ldr	r2, [pc, #352]	@ (800ffa0 <HAL_SD_GetCardCSD+0x344>)
 800fe3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	e09d      	b.n	800ff94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe5c:	0b9b      	lsrs	r3, r3, #14
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	f003 0301 	and.w	r3, r3, #1
 800fe64:	b2da      	uxtb	r2, r3
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe6e:	09db      	lsrs	r3, r3, #7
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe76:	b2da      	uxtb	r2, r3
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe90:	0fdb      	lsrs	r3, r3, #31
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe9c:	0f5b      	lsrs	r3, r3, #29
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	f003 0303 	and.w	r3, r3, #3
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feae:	0e9b      	lsrs	r3, r3, #26
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	f003 0307 	and.w	r3, r3, #7
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fec0:	0d9b      	lsrs	r3, r3, #22
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	f003 030f 	and.w	r3, r3, #15
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fed2:	0d5b      	lsrs	r3, r3, #21
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	f003 0301 	and.w	r3, r3, #1
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	2200      	movs	r2, #0
 800fee6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feee:	0c1b      	lsrs	r3, r3, #16
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	f003 0301 	and.w	r3, r3, #1
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff02:	0bdb      	lsrs	r3, r3, #15
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	f003 0301 	and.w	r3, r3, #1
 800ff0a:	b2da      	uxtb	r2, r3
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff16:	0b9b      	lsrs	r3, r3, #14
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	f003 0301 	and.w	r3, r3, #1
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff2a:	0b5b      	lsrs	r3, r3, #13
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	f003 0301 	and.w	r3, r3, #1
 800ff32:	b2da      	uxtb	r2, r3
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff3e:	0b1b      	lsrs	r3, r3, #12
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff52:	0a9b      	lsrs	r3, r3, #10
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	f003 0303 	and.w	r3, r3, #3
 800ff5a:	b2da      	uxtb	r2, r3
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff66:	0a1b      	lsrs	r3, r3, #8
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	f003 0303 	and.w	r3, r3, #3
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff7a:	085b      	lsrs	r3, r3, #1
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ff92:	2300      	movs	r3, #0
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	370c      	adds	r7, #12
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	004005ff 	.word	0x004005ff

0800ffa4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010004:	2300      	movs	r3, #0
 8010006:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010008:	f107 030c 	add.w	r3, r7, #12
 801000c:	4619      	mov	r1, r3
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fa7e 	bl	8010510 <SD_SendStatus>
 8010014:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d005      	beq.n	8010028 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	431a      	orrs	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	0a5b      	lsrs	r3, r3, #9
 801002c:	f003 030f 	and.w	r3, r3, #15
 8010030:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8010032:	693b      	ldr	r3, [r7, #16]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3718      	adds	r7, #24
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010048:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010058:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 801005a:	bf00      	nop
 801005c:	3714      	adds	r7, #20
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr

08010066 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b084      	sub	sp, #16
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010072:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010078:	2b82      	cmp	r3, #130	@ 0x82
 801007a:	d111      	bne.n	80100a0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4618      	mov	r0, r3
 8010082:	f001 fd5d 	bl	8011b40 <SDMMC_CmdStopTransfer>
 8010086:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d008      	beq.n	80100a0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	431a      	orrs	r2, r3
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f7ff fdd4 	bl	800fc48 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f022 0208 	bic.w	r2, r2, #8
 80100ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80100b8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2201      	movs	r2, #1
 80100be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2200      	movs	r2, #0
 80100c6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f002 f97d 	bl	80123c8 <HAL_SD_RxCpltCallback>
#endif
}
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
	...

080100d8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7fb fb8a 	bl	800b800 <HAL_DMA_GetError>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d03e      	beq.n	8010170 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100f8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010100:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	2b01      	cmp	r3, #1
 8010106:	d002      	beq.n	801010e <SD_DMAError+0x36>
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2b01      	cmp	r3, #1
 801010c:	d12d      	bne.n	801016a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a19      	ldr	r2, [pc, #100]	@ (8010178 <SD_DMAError+0xa0>)
 8010114:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8010124:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801012a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8010132:	6978      	ldr	r0, [r7, #20]
 8010134:	f7ff ff62 	bl	800fffc <HAL_SD_GetCardState>
 8010138:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	2b06      	cmp	r3, #6
 801013e:	d002      	beq.n	8010146 <SD_DMAError+0x6e>
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2b05      	cmp	r3, #5
 8010144:	d10a      	bne.n	801015c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4618      	mov	r0, r3
 801014c:	f001 fcf8 	bl	8011b40 <SDMMC_CmdStopTransfer>
 8010150:	4602      	mov	r2, r0
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010156:	431a      	orrs	r2, r3
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	2201      	movs	r2, #1
 8010160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	2200      	movs	r2, #0
 8010168:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 801016a:	6978      	ldr	r0, [r7, #20]
 801016c:	f7ff fd6c 	bl	800fc48 <HAL_SD_ErrorCallback>
#endif
  }
}
 8010170:	bf00      	nop
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	004005ff 	.word	0x004005ff

0801017c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010188:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8010192:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f7ff ff31 	bl	800fffc <HAL_SD_GetCardState>
 801019a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	2201      	movs	r2, #1
 80101a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2200      	movs	r2, #0
 80101a8:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	2b06      	cmp	r3, #6
 80101ae:	d002      	beq.n	80101b6 <SD_DMATxAbort+0x3a>
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	2b05      	cmp	r3, #5
 80101b4:	d10a      	bne.n	80101cc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4618      	mov	r0, r3
 80101bc:	f001 fcc0 	bl	8011b40 <SDMMC_CmdStopTransfer>
 80101c0:	4602      	mov	r2, r0
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101c6:	431a      	orrs	r2, r3
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d103      	bne.n	80101dc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f002 f8e3 	bl	80123a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80101da:	e002      	b.n	80101e2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f7ff fd33 	bl	800fc48 <HAL_SD_ErrorCallback>
}
 80101e2:	bf00      	nop
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b084      	sub	sp, #16
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101f6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8010200:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f7ff fefa 	bl	800fffc <HAL_SD_GetCardState>
 8010208:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2201      	movs	r2, #1
 801020e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b06      	cmp	r3, #6
 801021c:	d002      	beq.n	8010224 <SD_DMARxAbort+0x3a>
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	2b05      	cmp	r3, #5
 8010222:	d10a      	bne.n	801023a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4618      	mov	r0, r3
 801022a:	f001 fc89 	bl	8011b40 <SDMMC_CmdStopTransfer>
 801022e:	4602      	mov	r2, r0
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010234:	431a      	orrs	r2, r3
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801023e:	2b00      	cmp	r3, #0
 8010240:	d103      	bne.n	801024a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f002 f8ac 	bl	80123a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8010248:	e002      	b.n	8010250 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f7ff fcfc 	bl	800fc48 <HAL_SD_ErrorCallback>
}
 8010250:	bf00      	nop
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010258:	b5b0      	push	{r4, r5, r7, lr}
 801025a:	b094      	sub	sp, #80	@ 0x50
 801025c:	af04      	add	r7, sp, #16
 801025e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8010260:	2301      	movs	r3, #1
 8010262:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4618      	mov	r0, r3
 801026a:	f001 fb3b 	bl	80118e4 <SDMMC_GetPowerState>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d102      	bne.n	801027a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010274:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8010278:	e0b8      	b.n	80103ec <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801027e:	2b03      	cmp	r3, #3
 8010280:	d02f      	beq.n	80102e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4618      	mov	r0, r3
 8010288:	f001 fd22 	bl	8011cd0 <SDMMC_CmdSendCID>
 801028c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801028e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <SD_InitCard+0x40>
    {
      return errorstate;
 8010294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010296:	e0a9      	b.n	80103ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2100      	movs	r1, #0
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 fb65 	bl	801196e <SDMMC_GetResponse>
 80102a4:	4602      	mov	r2, r0
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	2104      	movs	r1, #4
 80102b0:	4618      	mov	r0, r3
 80102b2:	f001 fb5c 	bl	801196e <SDMMC_GetResponse>
 80102b6:	4602      	mov	r2, r0
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2108      	movs	r1, #8
 80102c2:	4618      	mov	r0, r3
 80102c4:	f001 fb53 	bl	801196e <SDMMC_GetResponse>
 80102c8:	4602      	mov	r2, r0
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	210c      	movs	r1, #12
 80102d4:	4618      	mov	r0, r3
 80102d6:	f001 fb4a 	bl	801196e <SDMMC_GetResponse>
 80102da:	4602      	mov	r2, r0
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102e6:	2b03      	cmp	r3, #3
 80102e8:	d00d      	beq.n	8010306 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f107 020e 	add.w	r2, r7, #14
 80102f2:	4611      	mov	r1, r2
 80102f4:	4618      	mov	r0, r3
 80102f6:	f001 fd28 	bl	8011d4a <SDMMC_CmdSetRelAdd>
 80102fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80102fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d001      	beq.n	8010306 <SD_InitCard+0xae>
    {
      return errorstate;
 8010302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010304:	e072      	b.n	80103ec <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801030a:	2b03      	cmp	r3, #3
 801030c:	d036      	beq.n	801037c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801030e:	89fb      	ldrh	r3, [r7, #14]
 8010310:	461a      	mov	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801031e:	041b      	lsls	r3, r3, #16
 8010320:	4619      	mov	r1, r3
 8010322:	4610      	mov	r0, r2
 8010324:	f001 fcf2 	bl	8011d0c <SDMMC_CmdSendCSD>
 8010328:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801032a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801032c:	2b00      	cmp	r3, #0
 801032e:	d001      	beq.n	8010334 <SD_InitCard+0xdc>
    {
      return errorstate;
 8010330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010332:	e05b      	b.n	80103ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2100      	movs	r1, #0
 801033a:	4618      	mov	r0, r3
 801033c:	f001 fb17 	bl	801196e <SDMMC_GetResponse>
 8010340:	4602      	mov	r2, r0
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2104      	movs	r1, #4
 801034c:	4618      	mov	r0, r3
 801034e:	f001 fb0e 	bl	801196e <SDMMC_GetResponse>
 8010352:	4602      	mov	r2, r0
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2108      	movs	r1, #8
 801035e:	4618      	mov	r0, r3
 8010360:	f001 fb05 	bl	801196e <SDMMC_GetResponse>
 8010364:	4602      	mov	r2, r0
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	210c      	movs	r1, #12
 8010370:	4618      	mov	r0, r3
 8010372:	f001 fafc 	bl	801196e <SDMMC_GetResponse>
 8010376:	4602      	mov	r2, r0
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2104      	movs	r1, #4
 8010382:	4618      	mov	r0, r3
 8010384:	f001 faf3 	bl	801196e <SDMMC_GetResponse>
 8010388:	4603      	mov	r3, r0
 801038a:	0d1a      	lsrs	r2, r3, #20
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010390:	f107 0310 	add.w	r3, r7, #16
 8010394:	4619      	mov	r1, r3
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff fc60 	bl	800fc5c <HAL_SD_GetCardCSD>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d002      	beq.n	80103a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80103a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80103a6:	e021      	b.n	80103ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6819      	ldr	r1, [r3, #0]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103b0:	041b      	lsls	r3, r3, #16
 80103b2:	2200      	movs	r2, #0
 80103b4:	461c      	mov	r4, r3
 80103b6:	4615      	mov	r5, r2
 80103b8:	4622      	mov	r2, r4
 80103ba:	462b      	mov	r3, r5
 80103bc:	4608      	mov	r0, r1
 80103be:	f001 fbe1 	bl	8011b84 <SDMMC_CmdSelDesel>
 80103c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80103c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d001      	beq.n	80103ce <SD_InitCard+0x176>
  {
    return errorstate;
 80103ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103cc:	e00e      	b.n	80103ec <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681d      	ldr	r5, [r3, #0]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	466c      	mov	r4, sp
 80103d6:	f103 0210 	add.w	r2, r3, #16
 80103da:	ca07      	ldmia	r2, {r0, r1, r2}
 80103dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80103e0:	3304      	adds	r3, #4
 80103e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80103e4:	4628      	mov	r0, r5
 80103e6:	f001 fa25 	bl	8011834 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80103ea:	2300      	movs	r3, #0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3740      	adds	r7, #64	@ 0x40
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bdb0      	pop	{r4, r5, r7, pc}

080103f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80103fc:	2300      	movs	r3, #0
 80103fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8010400:	2300      	movs	r3, #0
 8010402:	617b      	str	r3, [r7, #20]
 8010404:	2300      	movs	r3, #0
 8010406:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4618      	mov	r0, r3
 801040e:	f001 fbdc 	bl	8011bca <SDMMC_CmdGoIdleState>
 8010412:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <SD_PowerON+0x2a>
  {
    return errorstate;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	e072      	b.n	8010504 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4618      	mov	r0, r3
 8010424:	f001 fbef 	bl	8011c06 <SDMMC_CmdOperCond>
 8010428:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00d      	beq.n	801044c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4618      	mov	r0, r3
 801043c:	f001 fbc5 	bl	8011bca <SDMMC_CmdGoIdleState>
 8010440:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d004      	beq.n	8010452 <SD_PowerON+0x5e>
    {
      return errorstate;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	e05b      	b.n	8010504 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2201      	movs	r2, #1
 8010450:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010456:	2b01      	cmp	r3, #1
 8010458:	d137      	bne.n	80104ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2100      	movs	r1, #0
 8010460:	4618      	mov	r0, r3
 8010462:	f001 fbef 	bl	8011c44 <SDMMC_CmdAppCommand>
 8010466:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d02d      	beq.n	80104ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801046e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8010472:	e047      	b.n	8010504 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2100      	movs	r1, #0
 801047a:	4618      	mov	r0, r3
 801047c:	f001 fbe2 	bl	8011c44 <SDMMC_CmdAppCommand>
 8010480:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <SD_PowerON+0x98>
    {
      return errorstate;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	e03b      	b.n	8010504 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	491e      	ldr	r1, [pc, #120]	@ (801050c <SD_PowerON+0x118>)
 8010492:	4618      	mov	r0, r3
 8010494:	f001 fbf8 	bl	8011c88 <SDMMC_CmdAppOperCommand>
 8010498:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80104a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80104a4:	e02e      	b.n	8010504 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2100      	movs	r1, #0
 80104ac:	4618      	mov	r0, r3
 80104ae:	f001 fa5e 	bl	801196e <SDMMC_GetResponse>
 80104b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	0fdb      	lsrs	r3, r3, #31
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d101      	bne.n	80104c0 <SD_PowerON+0xcc>
 80104bc:	2301      	movs	r3, #1
 80104be:	e000      	b.n	80104c2 <SD_PowerON+0xce>
 80104c0:	2300      	movs	r3, #0
 80104c2:	613b      	str	r3, [r7, #16]

    count++;
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	3301      	adds	r3, #1
 80104c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d802      	bhi.n	80104da <SD_PowerON+0xe6>
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d0cc      	beq.n	8010474 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d902      	bls.n	80104ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80104e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80104e8:	e00c      	b.n	8010504 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d003      	beq.n	80104fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2201      	movs	r2, #1
 80104f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80104fa:	e002      	b.n	8010502 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	c1100000 	.word	0xc1100000

08010510 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d102      	bne.n	8010526 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8010520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010524:	e018      	b.n	8010558 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801052e:	041b      	lsls	r3, r3, #16
 8010530:	4619      	mov	r1, r3
 8010532:	4610      	mov	r0, r2
 8010534:	f001 fc2a 	bl	8011d8c <SDMMC_CmdSendStatus>
 8010538:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d001      	beq.n	8010544 <SD_SendStatus+0x34>
  {
    return errorstate;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	e009      	b.n	8010558 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2100      	movs	r1, #0
 801054a:	4618      	mov	r0, r3
 801054c:	f001 fa0f 	bl	801196e <SDMMC_GetResponse>
 8010550:	4602      	mov	r2, r0
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3710      	adds	r7, #16
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b086      	sub	sp, #24
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801056c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010572:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d03f      	beq.n	80105fa <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801057a:	2300      	movs	r3, #0
 801057c:	617b      	str	r3, [r7, #20]
 801057e:	e033      	b.n	80105e8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4618      	mov	r0, r3
 8010586:	f001 f981 	bl	801188c <SDMMC_ReadFIFO>
 801058a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	b2da      	uxtb	r2, r3
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	3301      	adds	r3, #1
 8010598:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	3b01      	subs	r3, #1
 801059e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	0a1b      	lsrs	r3, r3, #8
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	3301      	adds	r3, #1
 80105ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	3b01      	subs	r3, #1
 80105b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	0c1b      	lsrs	r3, r3, #16
 80105ba:	b2da      	uxtb	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	3301      	adds	r3, #1
 80105c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	3b01      	subs	r3, #1
 80105ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	0e1b      	lsrs	r3, r3, #24
 80105d0:	b2da      	uxtb	r2, r3
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	3301      	adds	r3, #1
 80105da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	3b01      	subs	r3, #1
 80105e0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	3301      	adds	r3, #1
 80105e6:	617b      	str	r3, [r7, #20]
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	2b07      	cmp	r3, #7
 80105ec:	d9c8      	bls.n	8010580 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	693a      	ldr	r2, [r7, #16]
 80105f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80105fa:	bf00      	nop
 80105fc:	3718      	adds	r7, #24
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b086      	sub	sp, #24
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a1b      	ldr	r3, [r3, #32]
 801060e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010614:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d043      	beq.n	80106a4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801061c:	2300      	movs	r3, #0
 801061e:	617b      	str	r3, [r7, #20]
 8010620:	e037      	b.n	8010692 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	3301      	adds	r3, #1
 801062c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	3b01      	subs	r3, #1
 8010632:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	021a      	lsls	r2, r3, #8
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	4313      	orrs	r3, r2
 801063e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	3301      	adds	r3, #1
 8010644:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	3b01      	subs	r3, #1
 801064a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	041a      	lsls	r2, r3, #16
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	4313      	orrs	r3, r2
 8010656:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	3301      	adds	r3, #1
 801065c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	3b01      	subs	r3, #1
 8010662:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	061a      	lsls	r2, r3, #24
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	4313      	orrs	r3, r2
 801066e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	3301      	adds	r3, #1
 8010674:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	3b01      	subs	r3, #1
 801067a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f107 0208 	add.w	r2, r7, #8
 8010684:	4611      	mov	r1, r2
 8010686:	4618      	mov	r0, r3
 8010688:	f001 f90d 	bl	80118a6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	3301      	adds	r3, #1
 8010690:	617b      	str	r3, [r7, #20]
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	2b07      	cmp	r3, #7
 8010696:	d9c4      	bls.n	8010622 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	693a      	ldr	r2, [r7, #16]
 80106a2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80106a4:	bf00      	nop
 80106a6:	3718      	adds	r7, #24
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d101      	bne.n	80106c0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	e025      	b.n	801070c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d106      	bne.n	80106da <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7f8 f8c3 	bl	8008860 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2202      	movs	r2, #2
 80106de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	3304      	adds	r3, #4
 80106ea:	4619      	mov	r1, r3
 80106ec:	4610      	mov	r0, r2
 80106ee:	f000 ff9f 	bl	8011630 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6818      	ldr	r0, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	461a      	mov	r2, r3
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	f000 fff3 	bl	80116e8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2201      	movs	r2, #1
 8010706:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801070a:	2300      	movs	r3, #0
}
 801070c:	4618      	mov	r0, r3
 801070e:	3708      	adds	r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b086      	sub	sp, #24
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010726:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8010728:	7dfb      	ldrb	r3, [r7, #23]
 801072a:	2b02      	cmp	r3, #2
 801072c:	d101      	bne.n	8010732 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801072e:	2302      	movs	r3, #2
 8010730:	e021      	b.n	8010776 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8010732:	7dfb      	ldrb	r3, [r7, #23]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d002      	beq.n	801073e <HAL_SDRAM_SendCommand+0x2a>
 8010738:	7dfb      	ldrb	r3, [r7, #23]
 801073a:	2b05      	cmp	r3, #5
 801073c:	d118      	bne.n	8010770 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2202      	movs	r2, #2
 8010742:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	68b9      	ldr	r1, [r7, #8]
 801074e:	4618      	mov	r0, r3
 8010750:	f001 f834 	bl	80117bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2b02      	cmp	r3, #2
 801075a:	d104      	bne.n	8010766 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2205      	movs	r2, #5
 8010760:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010764:	e006      	b.n	8010774 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2201      	movs	r2, #1
 801076a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801076e:	e001      	b.n	8010774 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8010770:	2301      	movs	r3, #1
 8010772:	e000      	b.n	8010776 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8010774:	2300      	movs	r3, #0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3718      	adds	r7, #24
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b082      	sub	sp, #8
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801078e:	b2db      	uxtb	r3, r3
 8010790:	2b02      	cmp	r3, #2
 8010792:	d101      	bne.n	8010798 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8010794:	2302      	movs	r3, #2
 8010796:	e016      	b.n	80107c6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d10f      	bne.n	80107c4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2202      	movs	r2, #2
 80107a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	6839      	ldr	r1, [r7, #0]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f001 f826 	bl	8011804 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2201      	movs	r2, #1
 80107bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80107c0:	2300      	movs	r3, #0
 80107c2:	e000      	b.n	80107c6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80107c4:	2301      	movs	r3, #1
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3708      	adds	r7, #8
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b082      	sub	sp, #8
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d101      	bne.n	80107e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	e049      	b.n	8010874 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 f841 	bl	801087c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2202      	movs	r2, #2
 80107fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	3304      	adds	r3, #4
 801080a:	4619      	mov	r1, r3
 801080c:	4610      	mov	r0, r2
 801080e:	f000 f9ff 	bl	8010c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2201      	movs	r2, #1
 8010816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2201      	movs	r2, #1
 801081e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2201      	movs	r2, #1
 8010826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2201      	movs	r2, #1
 8010836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2201      	movs	r2, #1
 801083e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2201      	movs	r2, #1
 8010846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2201      	movs	r2, #1
 801084e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2201      	movs	r2, #1
 8010856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2201      	movs	r2, #1
 801085e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2201      	movs	r2, #1
 8010866:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2201      	movs	r2, #1
 801086e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010884:	bf00      	nop
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010890:	b480      	push	{r7}
 8010892:	b085      	sub	sp, #20
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d001      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80108a4:	2301      	movs	r3, #1
 80108a6:	e054      	b.n	8010952 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2202      	movs	r2, #2
 80108ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68da      	ldr	r2, [r3, #12]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f042 0201 	orr.w	r2, r2, #1
 80108be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a26      	ldr	r2, [pc, #152]	@ (8010960 <HAL_TIM_Base_Start_IT+0xd0>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d022      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x80>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108d2:	d01d      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x80>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a22      	ldr	r2, [pc, #136]	@ (8010964 <HAL_TIM_Base_Start_IT+0xd4>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d018      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x80>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a21      	ldr	r2, [pc, #132]	@ (8010968 <HAL_TIM_Base_Start_IT+0xd8>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d013      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x80>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a1f      	ldr	r2, [pc, #124]	@ (801096c <HAL_TIM_Base_Start_IT+0xdc>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d00e      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x80>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4a1e      	ldr	r2, [pc, #120]	@ (8010970 <HAL_TIM_Base_Start_IT+0xe0>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d009      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x80>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4a1c      	ldr	r2, [pc, #112]	@ (8010974 <HAL_TIM_Base_Start_IT+0xe4>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d004      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x80>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a1b      	ldr	r2, [pc, #108]	@ (8010978 <HAL_TIM_Base_Start_IT+0xe8>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d115      	bne.n	801093c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	689a      	ldr	r2, [r3, #8]
 8010916:	4b19      	ldr	r3, [pc, #100]	@ (801097c <HAL_TIM_Base_Start_IT+0xec>)
 8010918:	4013      	ands	r3, r2
 801091a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2b06      	cmp	r3, #6
 8010920:	d015      	beq.n	801094e <HAL_TIM_Base_Start_IT+0xbe>
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010928:	d011      	beq.n	801094e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f042 0201 	orr.w	r2, r2, #1
 8010938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801093a:	e008      	b.n	801094e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f042 0201 	orr.w	r2, r2, #1
 801094a:	601a      	str	r2, [r3, #0]
 801094c:	e000      	b.n	8010950 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801094e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	40010000 	.word	0x40010000
 8010964:	40000400 	.word	0x40000400
 8010968:	40000800 	.word	0x40000800
 801096c:	40000c00 	.word	0x40000c00
 8010970:	40010400 	.word	0x40010400
 8010974:	40014000 	.word	0x40014000
 8010978:	40001800 	.word	0x40001800
 801097c:	00010007 	.word	0x00010007

08010980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	691b      	ldr	r3, [r3, #16]
 801098e:	f003 0302 	and.w	r3, r3, #2
 8010992:	2b02      	cmp	r3, #2
 8010994:	d122      	bne.n	80109dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	f003 0302 	and.w	r3, r3, #2
 80109a0:	2b02      	cmp	r3, #2
 80109a2:	d11b      	bne.n	80109dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f06f 0202 	mvn.w	r2, #2
 80109ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	699b      	ldr	r3, [r3, #24]
 80109ba:	f003 0303 	and.w	r3, r3, #3
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d003      	beq.n	80109ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f905 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 80109c8:	e005      	b.n	80109d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 f8f7 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f000 f908 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2200      	movs	r2, #0
 80109da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	691b      	ldr	r3, [r3, #16]
 80109e2:	f003 0304 	and.w	r3, r3, #4
 80109e6:	2b04      	cmp	r3, #4
 80109e8:	d122      	bne.n	8010a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	f003 0304 	and.w	r3, r3, #4
 80109f4:	2b04      	cmp	r3, #4
 80109f6:	d11b      	bne.n	8010a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f06f 0204 	mvn.w	r2, #4
 8010a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2202      	movs	r2, #2
 8010a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d003      	beq.n	8010a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f000 f8db 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 8010a1c:	e005      	b.n	8010a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f8cd 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 f8de 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	691b      	ldr	r3, [r3, #16]
 8010a36:	f003 0308 	and.w	r3, r3, #8
 8010a3a:	2b08      	cmp	r3, #8
 8010a3c:	d122      	bne.n	8010a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	f003 0308 	and.w	r3, r3, #8
 8010a48:	2b08      	cmp	r3, #8
 8010a4a:	d11b      	bne.n	8010a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f06f 0208 	mvn.w	r2, #8
 8010a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2204      	movs	r2, #4
 8010a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	69db      	ldr	r3, [r3, #28]
 8010a62:	f003 0303 	and.w	r3, r3, #3
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d003      	beq.n	8010a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f000 f8b1 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 8010a70:	e005      	b.n	8010a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 f8a3 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f8b4 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	691b      	ldr	r3, [r3, #16]
 8010a8a:	f003 0310 	and.w	r3, r3, #16
 8010a8e:	2b10      	cmp	r3, #16
 8010a90:	d122      	bne.n	8010ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	f003 0310 	and.w	r3, r3, #16
 8010a9c:	2b10      	cmp	r3, #16
 8010a9e:	d11b      	bne.n	8010ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f06f 0210 	mvn.w	r2, #16
 8010aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2208      	movs	r2, #8
 8010aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	69db      	ldr	r3, [r3, #28]
 8010ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d003      	beq.n	8010ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 f887 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 8010ac4:	e005      	b.n	8010ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f879 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f000 f88a 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	691b      	ldr	r3, [r3, #16]
 8010ade:	f003 0301 	and.w	r3, r3, #1
 8010ae2:	2b01      	cmp	r3, #1
 8010ae4:	d10e      	bne.n	8010b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	f003 0301 	and.w	r3, r3, #1
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d107      	bne.n	8010b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f06f 0201 	mvn.w	r2, #1
 8010afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f7f5 f9ea 	bl	8005ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	691b      	ldr	r3, [r3, #16]
 8010b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b0e:	2b80      	cmp	r3, #128	@ 0x80
 8010b10:	d10e      	bne.n	8010b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b1c:	2b80      	cmp	r3, #128	@ 0x80
 8010b1e:	d107      	bne.n	8010b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 f91a 	bl	8010d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	691b      	ldr	r3, [r3, #16]
 8010b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b3e:	d10e      	bne.n	8010b5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b4a:	2b80      	cmp	r3, #128	@ 0x80
 8010b4c:	d107      	bne.n	8010b5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 f90d 	bl	8010d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	691b      	ldr	r3, [r3, #16]
 8010b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b68:	2b40      	cmp	r3, #64	@ 0x40
 8010b6a:	d10e      	bne.n	8010b8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b76:	2b40      	cmp	r3, #64	@ 0x40
 8010b78:	d107      	bne.n	8010b8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f000 f838 	bl	8010bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	691b      	ldr	r3, [r3, #16]
 8010b90:	f003 0320 	and.w	r3, r3, #32
 8010b94:	2b20      	cmp	r3, #32
 8010b96:	d10e      	bne.n	8010bb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	f003 0320 	and.w	r3, r3, #32
 8010ba2:	2b20      	cmp	r3, #32
 8010ba4:	d107      	bne.n	8010bb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f06f 0220 	mvn.w	r2, #32
 8010bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 f8cd 	bl	8010d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010bb6:	bf00      	nop
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010bbe:	b480      	push	{r7}
 8010bc0:	b083      	sub	sp, #12
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010bc6:	bf00      	nop
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010bd2:	b480      	push	{r7}
 8010bd4:	b083      	sub	sp, #12
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010bda:	bf00      	nop
 8010bdc:	370c      	adds	r7, #12
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b083      	sub	sp, #12
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010bee:	bf00      	nop
 8010bf0:	370c      	adds	r7, #12
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr

08010bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010bfa:	b480      	push	{r7}
 8010bfc:	b083      	sub	sp, #12
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr
	...

08010c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4a40      	ldr	r2, [pc, #256]	@ (8010d24 <TIM_Base_SetConfig+0x114>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d013      	beq.n	8010c50 <TIM_Base_SetConfig+0x40>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c2e:	d00f      	beq.n	8010c50 <TIM_Base_SetConfig+0x40>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	4a3d      	ldr	r2, [pc, #244]	@ (8010d28 <TIM_Base_SetConfig+0x118>)
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d00b      	beq.n	8010c50 <TIM_Base_SetConfig+0x40>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8010d2c <TIM_Base_SetConfig+0x11c>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d007      	beq.n	8010c50 <TIM_Base_SetConfig+0x40>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	4a3b      	ldr	r2, [pc, #236]	@ (8010d30 <TIM_Base_SetConfig+0x120>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d003      	beq.n	8010c50 <TIM_Base_SetConfig+0x40>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8010d34 <TIM_Base_SetConfig+0x124>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d108      	bne.n	8010c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	4313      	orrs	r3, r2
 8010c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4a2f      	ldr	r2, [pc, #188]	@ (8010d24 <TIM_Base_SetConfig+0x114>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d02b      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c70:	d027      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4a2c      	ldr	r2, [pc, #176]	@ (8010d28 <TIM_Base_SetConfig+0x118>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d023      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8010d2c <TIM_Base_SetConfig+0x11c>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d01f      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4a2a      	ldr	r2, [pc, #168]	@ (8010d30 <TIM_Base_SetConfig+0x120>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d01b      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a29      	ldr	r2, [pc, #164]	@ (8010d34 <TIM_Base_SetConfig+0x124>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d017      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4a28      	ldr	r2, [pc, #160]	@ (8010d38 <TIM_Base_SetConfig+0x128>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d013      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4a27      	ldr	r2, [pc, #156]	@ (8010d3c <TIM_Base_SetConfig+0x12c>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d00f      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a26      	ldr	r2, [pc, #152]	@ (8010d40 <TIM_Base_SetConfig+0x130>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d00b      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a25      	ldr	r2, [pc, #148]	@ (8010d44 <TIM_Base_SetConfig+0x134>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d007      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a24      	ldr	r2, [pc, #144]	@ (8010d48 <TIM_Base_SetConfig+0x138>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d003      	beq.n	8010cc2 <TIM_Base_SetConfig+0xb2>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a23      	ldr	r2, [pc, #140]	@ (8010d4c <TIM_Base_SetConfig+0x13c>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d108      	bne.n	8010cd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	695b      	ldr	r3, [r3, #20]
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	68fa      	ldr	r2, [r7, #12]
 8010ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	689a      	ldr	r2, [r3, #8]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8010d24 <TIM_Base_SetConfig+0x114>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d003      	beq.n	8010d08 <TIM_Base_SetConfig+0xf8>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	4a0c      	ldr	r2, [pc, #48]	@ (8010d34 <TIM_Base_SetConfig+0x124>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d103      	bne.n	8010d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	691a      	ldr	r2, [r3, #16]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2201      	movs	r2, #1
 8010d14:	615a      	str	r2, [r3, #20]
}
 8010d16:	bf00      	nop
 8010d18:	3714      	adds	r7, #20
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	40010000 	.word	0x40010000
 8010d28:	40000400 	.word	0x40000400
 8010d2c:	40000800 	.word	0x40000800
 8010d30:	40000c00 	.word	0x40000c00
 8010d34:	40010400 	.word	0x40010400
 8010d38:	40014000 	.word	0x40014000
 8010d3c:	40014400 	.word	0x40014400
 8010d40:	40014800 	.word	0x40014800
 8010d44:	40001800 	.word	0x40001800
 8010d48:	40001c00 	.word	0x40001c00
 8010d4c:	40002000 	.word	0x40002000

08010d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010d58:	bf00      	nop
 8010d5a:	370c      	adds	r7, #12
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr

08010d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010d6c:	bf00      	nop
 8010d6e:	370c      	adds	r7, #12
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr

08010d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010d80:	bf00      	nop
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr

08010d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d101      	bne.n	8010d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e040      	b.n	8010e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7f7 fc32 	bl	8008618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2224      	movs	r2, #36	@ 0x24
 8010db8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	f022 0201 	bic.w	r2, r2, #1
 8010dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f000 f82c 	bl	8010e28 <UART_SetConfig>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d101      	bne.n	8010dda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	e022      	b.n	8010e20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d002      	beq.n	8010de8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 fa84 	bl	80112f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	685a      	ldr	r2, [r3, #4]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	689a      	ldr	r2, [r3, #8]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f042 0201 	orr.w	r2, r2, #1
 8010e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 fb0b 	bl	8011434 <UART_CheckIdleState>
 8010e1e:	4603      	mov	r3, r0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b088      	sub	sp, #32
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	689a      	ldr	r2, [r3, #8]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	691b      	ldr	r3, [r3, #16]
 8010e3c:	431a      	orrs	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	695b      	ldr	r3, [r3, #20]
 8010e42:	431a      	orrs	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	69db      	ldr	r3, [r3, #28]
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	4ba6      	ldr	r3, [pc, #664]	@ (80110ec <UART_SetConfig+0x2c4>)
 8010e54:	4013      	ands	r3, r2
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	6812      	ldr	r2, [r2, #0]
 8010e5a:	6979      	ldr	r1, [r7, #20]
 8010e5c:	430b      	orrs	r3, r1
 8010e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	68da      	ldr	r2, [r3, #12]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	430a      	orrs	r2, r1
 8010e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	699b      	ldr	r3, [r3, #24]
 8010e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6a1b      	ldr	r3, [r3, #32]
 8010e80:	697a      	ldr	r2, [r7, #20]
 8010e82:	4313      	orrs	r3, r2
 8010e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	430a      	orrs	r2, r1
 8010e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4a94      	ldr	r2, [pc, #592]	@ (80110f0 <UART_SetConfig+0x2c8>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d120      	bne.n	8010ee6 <UART_SetConfig+0xbe>
 8010ea4:	4b93      	ldr	r3, [pc, #588]	@ (80110f4 <UART_SetConfig+0x2cc>)
 8010ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010eaa:	f003 0303 	and.w	r3, r3, #3
 8010eae:	2b03      	cmp	r3, #3
 8010eb0:	d816      	bhi.n	8010ee0 <UART_SetConfig+0xb8>
 8010eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8010eb8 <UART_SetConfig+0x90>)
 8010eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb8:	08010ec9 	.word	0x08010ec9
 8010ebc:	08010ed5 	.word	0x08010ed5
 8010ec0:	08010ecf 	.word	0x08010ecf
 8010ec4:	08010edb 	.word	0x08010edb
 8010ec8:	2301      	movs	r3, #1
 8010eca:	77fb      	strb	r3, [r7, #31]
 8010ecc:	e150      	b.n	8011170 <UART_SetConfig+0x348>
 8010ece:	2302      	movs	r3, #2
 8010ed0:	77fb      	strb	r3, [r7, #31]
 8010ed2:	e14d      	b.n	8011170 <UART_SetConfig+0x348>
 8010ed4:	2304      	movs	r3, #4
 8010ed6:	77fb      	strb	r3, [r7, #31]
 8010ed8:	e14a      	b.n	8011170 <UART_SetConfig+0x348>
 8010eda:	2308      	movs	r3, #8
 8010edc:	77fb      	strb	r3, [r7, #31]
 8010ede:	e147      	b.n	8011170 <UART_SetConfig+0x348>
 8010ee0:	2310      	movs	r3, #16
 8010ee2:	77fb      	strb	r3, [r7, #31]
 8010ee4:	e144      	b.n	8011170 <UART_SetConfig+0x348>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a83      	ldr	r2, [pc, #524]	@ (80110f8 <UART_SetConfig+0x2d0>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d132      	bne.n	8010f56 <UART_SetConfig+0x12e>
 8010ef0:	4b80      	ldr	r3, [pc, #512]	@ (80110f4 <UART_SetConfig+0x2cc>)
 8010ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ef6:	f003 030c 	and.w	r3, r3, #12
 8010efa:	2b0c      	cmp	r3, #12
 8010efc:	d828      	bhi.n	8010f50 <UART_SetConfig+0x128>
 8010efe:	a201      	add	r2, pc, #4	@ (adr r2, 8010f04 <UART_SetConfig+0xdc>)
 8010f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f04:	08010f39 	.word	0x08010f39
 8010f08:	08010f51 	.word	0x08010f51
 8010f0c:	08010f51 	.word	0x08010f51
 8010f10:	08010f51 	.word	0x08010f51
 8010f14:	08010f45 	.word	0x08010f45
 8010f18:	08010f51 	.word	0x08010f51
 8010f1c:	08010f51 	.word	0x08010f51
 8010f20:	08010f51 	.word	0x08010f51
 8010f24:	08010f3f 	.word	0x08010f3f
 8010f28:	08010f51 	.word	0x08010f51
 8010f2c:	08010f51 	.word	0x08010f51
 8010f30:	08010f51 	.word	0x08010f51
 8010f34:	08010f4b 	.word	0x08010f4b
 8010f38:	2300      	movs	r3, #0
 8010f3a:	77fb      	strb	r3, [r7, #31]
 8010f3c:	e118      	b.n	8011170 <UART_SetConfig+0x348>
 8010f3e:	2302      	movs	r3, #2
 8010f40:	77fb      	strb	r3, [r7, #31]
 8010f42:	e115      	b.n	8011170 <UART_SetConfig+0x348>
 8010f44:	2304      	movs	r3, #4
 8010f46:	77fb      	strb	r3, [r7, #31]
 8010f48:	e112      	b.n	8011170 <UART_SetConfig+0x348>
 8010f4a:	2308      	movs	r3, #8
 8010f4c:	77fb      	strb	r3, [r7, #31]
 8010f4e:	e10f      	b.n	8011170 <UART_SetConfig+0x348>
 8010f50:	2310      	movs	r3, #16
 8010f52:	77fb      	strb	r3, [r7, #31]
 8010f54:	e10c      	b.n	8011170 <UART_SetConfig+0x348>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	4a68      	ldr	r2, [pc, #416]	@ (80110fc <UART_SetConfig+0x2d4>)
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	d120      	bne.n	8010fa2 <UART_SetConfig+0x17a>
 8010f60:	4b64      	ldr	r3, [pc, #400]	@ (80110f4 <UART_SetConfig+0x2cc>)
 8010f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010f6a:	2b30      	cmp	r3, #48	@ 0x30
 8010f6c:	d013      	beq.n	8010f96 <UART_SetConfig+0x16e>
 8010f6e:	2b30      	cmp	r3, #48	@ 0x30
 8010f70:	d814      	bhi.n	8010f9c <UART_SetConfig+0x174>
 8010f72:	2b20      	cmp	r3, #32
 8010f74:	d009      	beq.n	8010f8a <UART_SetConfig+0x162>
 8010f76:	2b20      	cmp	r3, #32
 8010f78:	d810      	bhi.n	8010f9c <UART_SetConfig+0x174>
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <UART_SetConfig+0x15c>
 8010f7e:	2b10      	cmp	r3, #16
 8010f80:	d006      	beq.n	8010f90 <UART_SetConfig+0x168>
 8010f82:	e00b      	b.n	8010f9c <UART_SetConfig+0x174>
 8010f84:	2300      	movs	r3, #0
 8010f86:	77fb      	strb	r3, [r7, #31]
 8010f88:	e0f2      	b.n	8011170 <UART_SetConfig+0x348>
 8010f8a:	2302      	movs	r3, #2
 8010f8c:	77fb      	strb	r3, [r7, #31]
 8010f8e:	e0ef      	b.n	8011170 <UART_SetConfig+0x348>
 8010f90:	2304      	movs	r3, #4
 8010f92:	77fb      	strb	r3, [r7, #31]
 8010f94:	e0ec      	b.n	8011170 <UART_SetConfig+0x348>
 8010f96:	2308      	movs	r3, #8
 8010f98:	77fb      	strb	r3, [r7, #31]
 8010f9a:	e0e9      	b.n	8011170 <UART_SetConfig+0x348>
 8010f9c:	2310      	movs	r3, #16
 8010f9e:	77fb      	strb	r3, [r7, #31]
 8010fa0:	e0e6      	b.n	8011170 <UART_SetConfig+0x348>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a56      	ldr	r2, [pc, #344]	@ (8011100 <UART_SetConfig+0x2d8>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d120      	bne.n	8010fee <UART_SetConfig+0x1c6>
 8010fac:	4b51      	ldr	r3, [pc, #324]	@ (80110f4 <UART_SetConfig+0x2cc>)
 8010fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8010fb8:	d013      	beq.n	8010fe2 <UART_SetConfig+0x1ba>
 8010fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8010fbc:	d814      	bhi.n	8010fe8 <UART_SetConfig+0x1c0>
 8010fbe:	2b80      	cmp	r3, #128	@ 0x80
 8010fc0:	d009      	beq.n	8010fd6 <UART_SetConfig+0x1ae>
 8010fc2:	2b80      	cmp	r3, #128	@ 0x80
 8010fc4:	d810      	bhi.n	8010fe8 <UART_SetConfig+0x1c0>
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <UART_SetConfig+0x1a8>
 8010fca:	2b40      	cmp	r3, #64	@ 0x40
 8010fcc:	d006      	beq.n	8010fdc <UART_SetConfig+0x1b4>
 8010fce:	e00b      	b.n	8010fe8 <UART_SetConfig+0x1c0>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	77fb      	strb	r3, [r7, #31]
 8010fd4:	e0cc      	b.n	8011170 <UART_SetConfig+0x348>
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	77fb      	strb	r3, [r7, #31]
 8010fda:	e0c9      	b.n	8011170 <UART_SetConfig+0x348>
 8010fdc:	2304      	movs	r3, #4
 8010fde:	77fb      	strb	r3, [r7, #31]
 8010fe0:	e0c6      	b.n	8011170 <UART_SetConfig+0x348>
 8010fe2:	2308      	movs	r3, #8
 8010fe4:	77fb      	strb	r3, [r7, #31]
 8010fe6:	e0c3      	b.n	8011170 <UART_SetConfig+0x348>
 8010fe8:	2310      	movs	r3, #16
 8010fea:	77fb      	strb	r3, [r7, #31]
 8010fec:	e0c0      	b.n	8011170 <UART_SetConfig+0x348>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4a44      	ldr	r2, [pc, #272]	@ (8011104 <UART_SetConfig+0x2dc>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d125      	bne.n	8011044 <UART_SetConfig+0x21c>
 8010ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80110f4 <UART_SetConfig+0x2cc>)
 8010ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011006:	d017      	beq.n	8011038 <UART_SetConfig+0x210>
 8011008:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801100c:	d817      	bhi.n	801103e <UART_SetConfig+0x216>
 801100e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011012:	d00b      	beq.n	801102c <UART_SetConfig+0x204>
 8011014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011018:	d811      	bhi.n	801103e <UART_SetConfig+0x216>
 801101a:	2b00      	cmp	r3, #0
 801101c:	d003      	beq.n	8011026 <UART_SetConfig+0x1fe>
 801101e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011022:	d006      	beq.n	8011032 <UART_SetConfig+0x20a>
 8011024:	e00b      	b.n	801103e <UART_SetConfig+0x216>
 8011026:	2300      	movs	r3, #0
 8011028:	77fb      	strb	r3, [r7, #31]
 801102a:	e0a1      	b.n	8011170 <UART_SetConfig+0x348>
 801102c:	2302      	movs	r3, #2
 801102e:	77fb      	strb	r3, [r7, #31]
 8011030:	e09e      	b.n	8011170 <UART_SetConfig+0x348>
 8011032:	2304      	movs	r3, #4
 8011034:	77fb      	strb	r3, [r7, #31]
 8011036:	e09b      	b.n	8011170 <UART_SetConfig+0x348>
 8011038:	2308      	movs	r3, #8
 801103a:	77fb      	strb	r3, [r7, #31]
 801103c:	e098      	b.n	8011170 <UART_SetConfig+0x348>
 801103e:	2310      	movs	r3, #16
 8011040:	77fb      	strb	r3, [r7, #31]
 8011042:	e095      	b.n	8011170 <UART_SetConfig+0x348>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a2f      	ldr	r2, [pc, #188]	@ (8011108 <UART_SetConfig+0x2e0>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d125      	bne.n	801109a <UART_SetConfig+0x272>
 801104e:	4b29      	ldr	r3, [pc, #164]	@ (80110f4 <UART_SetConfig+0x2cc>)
 8011050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801105c:	d017      	beq.n	801108e <UART_SetConfig+0x266>
 801105e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011062:	d817      	bhi.n	8011094 <UART_SetConfig+0x26c>
 8011064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011068:	d00b      	beq.n	8011082 <UART_SetConfig+0x25a>
 801106a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801106e:	d811      	bhi.n	8011094 <UART_SetConfig+0x26c>
 8011070:	2b00      	cmp	r3, #0
 8011072:	d003      	beq.n	801107c <UART_SetConfig+0x254>
 8011074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011078:	d006      	beq.n	8011088 <UART_SetConfig+0x260>
 801107a:	e00b      	b.n	8011094 <UART_SetConfig+0x26c>
 801107c:	2301      	movs	r3, #1
 801107e:	77fb      	strb	r3, [r7, #31]
 8011080:	e076      	b.n	8011170 <UART_SetConfig+0x348>
 8011082:	2302      	movs	r3, #2
 8011084:	77fb      	strb	r3, [r7, #31]
 8011086:	e073      	b.n	8011170 <UART_SetConfig+0x348>
 8011088:	2304      	movs	r3, #4
 801108a:	77fb      	strb	r3, [r7, #31]
 801108c:	e070      	b.n	8011170 <UART_SetConfig+0x348>
 801108e:	2308      	movs	r3, #8
 8011090:	77fb      	strb	r3, [r7, #31]
 8011092:	e06d      	b.n	8011170 <UART_SetConfig+0x348>
 8011094:	2310      	movs	r3, #16
 8011096:	77fb      	strb	r3, [r7, #31]
 8011098:	e06a      	b.n	8011170 <UART_SetConfig+0x348>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4a1b      	ldr	r2, [pc, #108]	@ (801110c <UART_SetConfig+0x2e4>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d138      	bne.n	8011116 <UART_SetConfig+0x2ee>
 80110a4:	4b13      	ldr	r3, [pc, #76]	@ (80110f4 <UART_SetConfig+0x2cc>)
 80110a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80110ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80110b2:	d017      	beq.n	80110e4 <UART_SetConfig+0x2bc>
 80110b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80110b8:	d82a      	bhi.n	8011110 <UART_SetConfig+0x2e8>
 80110ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80110be:	d00b      	beq.n	80110d8 <UART_SetConfig+0x2b0>
 80110c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80110c4:	d824      	bhi.n	8011110 <UART_SetConfig+0x2e8>
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d003      	beq.n	80110d2 <UART_SetConfig+0x2aa>
 80110ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80110ce:	d006      	beq.n	80110de <UART_SetConfig+0x2b6>
 80110d0:	e01e      	b.n	8011110 <UART_SetConfig+0x2e8>
 80110d2:	2300      	movs	r3, #0
 80110d4:	77fb      	strb	r3, [r7, #31]
 80110d6:	e04b      	b.n	8011170 <UART_SetConfig+0x348>
 80110d8:	2302      	movs	r3, #2
 80110da:	77fb      	strb	r3, [r7, #31]
 80110dc:	e048      	b.n	8011170 <UART_SetConfig+0x348>
 80110de:	2304      	movs	r3, #4
 80110e0:	77fb      	strb	r3, [r7, #31]
 80110e2:	e045      	b.n	8011170 <UART_SetConfig+0x348>
 80110e4:	2308      	movs	r3, #8
 80110e6:	77fb      	strb	r3, [r7, #31]
 80110e8:	e042      	b.n	8011170 <UART_SetConfig+0x348>
 80110ea:	bf00      	nop
 80110ec:	efff69f3 	.word	0xefff69f3
 80110f0:	40011000 	.word	0x40011000
 80110f4:	40023800 	.word	0x40023800
 80110f8:	40004400 	.word	0x40004400
 80110fc:	40004800 	.word	0x40004800
 8011100:	40004c00 	.word	0x40004c00
 8011104:	40005000 	.word	0x40005000
 8011108:	40011400 	.word	0x40011400
 801110c:	40007800 	.word	0x40007800
 8011110:	2310      	movs	r3, #16
 8011112:	77fb      	strb	r3, [r7, #31]
 8011114:	e02c      	b.n	8011170 <UART_SetConfig+0x348>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4a72      	ldr	r2, [pc, #456]	@ (80112e4 <UART_SetConfig+0x4bc>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d125      	bne.n	801116c <UART_SetConfig+0x344>
 8011120:	4b71      	ldr	r3, [pc, #452]	@ (80112e8 <UART_SetConfig+0x4c0>)
 8011122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011126:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801112a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801112e:	d017      	beq.n	8011160 <UART_SetConfig+0x338>
 8011130:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011134:	d817      	bhi.n	8011166 <UART_SetConfig+0x33e>
 8011136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801113a:	d00b      	beq.n	8011154 <UART_SetConfig+0x32c>
 801113c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011140:	d811      	bhi.n	8011166 <UART_SetConfig+0x33e>
 8011142:	2b00      	cmp	r3, #0
 8011144:	d003      	beq.n	801114e <UART_SetConfig+0x326>
 8011146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801114a:	d006      	beq.n	801115a <UART_SetConfig+0x332>
 801114c:	e00b      	b.n	8011166 <UART_SetConfig+0x33e>
 801114e:	2300      	movs	r3, #0
 8011150:	77fb      	strb	r3, [r7, #31]
 8011152:	e00d      	b.n	8011170 <UART_SetConfig+0x348>
 8011154:	2302      	movs	r3, #2
 8011156:	77fb      	strb	r3, [r7, #31]
 8011158:	e00a      	b.n	8011170 <UART_SetConfig+0x348>
 801115a:	2304      	movs	r3, #4
 801115c:	77fb      	strb	r3, [r7, #31]
 801115e:	e007      	b.n	8011170 <UART_SetConfig+0x348>
 8011160:	2308      	movs	r3, #8
 8011162:	77fb      	strb	r3, [r7, #31]
 8011164:	e004      	b.n	8011170 <UART_SetConfig+0x348>
 8011166:	2310      	movs	r3, #16
 8011168:	77fb      	strb	r3, [r7, #31]
 801116a:	e001      	b.n	8011170 <UART_SetConfig+0x348>
 801116c:	2310      	movs	r3, #16
 801116e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	69db      	ldr	r3, [r3, #28]
 8011174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011178:	d15b      	bne.n	8011232 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801117a:	7ffb      	ldrb	r3, [r7, #31]
 801117c:	2b08      	cmp	r3, #8
 801117e:	d828      	bhi.n	80111d2 <UART_SetConfig+0x3aa>
 8011180:	a201      	add	r2, pc, #4	@ (adr r2, 8011188 <UART_SetConfig+0x360>)
 8011182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011186:	bf00      	nop
 8011188:	080111ad 	.word	0x080111ad
 801118c:	080111b5 	.word	0x080111b5
 8011190:	080111bd 	.word	0x080111bd
 8011194:	080111d3 	.word	0x080111d3
 8011198:	080111c3 	.word	0x080111c3
 801119c:	080111d3 	.word	0x080111d3
 80111a0:	080111d3 	.word	0x080111d3
 80111a4:	080111d3 	.word	0x080111d3
 80111a8:	080111cb 	.word	0x080111cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111ac:	f7fc ff6e 	bl	800e08c <HAL_RCC_GetPCLK1Freq>
 80111b0:	61b8      	str	r0, [r7, #24]
        break;
 80111b2:	e013      	b.n	80111dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111b4:	f7fc ff7e 	bl	800e0b4 <HAL_RCC_GetPCLK2Freq>
 80111b8:	61b8      	str	r0, [r7, #24]
        break;
 80111ba:	e00f      	b.n	80111dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80111bc:	4b4b      	ldr	r3, [pc, #300]	@ (80112ec <UART_SetConfig+0x4c4>)
 80111be:	61bb      	str	r3, [r7, #24]
        break;
 80111c0:	e00c      	b.n	80111dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80111c2:	f7fc fe91 	bl	800dee8 <HAL_RCC_GetSysClockFreq>
 80111c6:	61b8      	str	r0, [r7, #24]
        break;
 80111c8:	e008      	b.n	80111dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111ce:	61bb      	str	r3, [r7, #24]
        break;
 80111d0:	e004      	b.n	80111dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80111d2:	2300      	movs	r3, #0
 80111d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80111d6:	2301      	movs	r3, #1
 80111d8:	77bb      	strb	r3, [r7, #30]
        break;
 80111da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d074      	beq.n	80112cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	005a      	lsls	r2, r3, #1
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	085b      	lsrs	r3, r3, #1
 80111ec:	441a      	add	r2, r3
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80111f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	2b0f      	cmp	r3, #15
 80111fc:	d916      	bls.n	801122c <UART_SetConfig+0x404>
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011204:	d212      	bcs.n	801122c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	b29b      	uxth	r3, r3
 801120a:	f023 030f 	bic.w	r3, r3, #15
 801120e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	085b      	lsrs	r3, r3, #1
 8011214:	b29b      	uxth	r3, r3
 8011216:	f003 0307 	and.w	r3, r3, #7
 801121a:	b29a      	uxth	r2, r3
 801121c:	89fb      	ldrh	r3, [r7, #14]
 801121e:	4313      	orrs	r3, r2
 8011220:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	89fa      	ldrh	r2, [r7, #14]
 8011228:	60da      	str	r2, [r3, #12]
 801122a:	e04f      	b.n	80112cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801122c:	2301      	movs	r3, #1
 801122e:	77bb      	strb	r3, [r7, #30]
 8011230:	e04c      	b.n	80112cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011232:	7ffb      	ldrb	r3, [r7, #31]
 8011234:	2b08      	cmp	r3, #8
 8011236:	d828      	bhi.n	801128a <UART_SetConfig+0x462>
 8011238:	a201      	add	r2, pc, #4	@ (adr r2, 8011240 <UART_SetConfig+0x418>)
 801123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123e:	bf00      	nop
 8011240:	08011265 	.word	0x08011265
 8011244:	0801126d 	.word	0x0801126d
 8011248:	08011275 	.word	0x08011275
 801124c:	0801128b 	.word	0x0801128b
 8011250:	0801127b 	.word	0x0801127b
 8011254:	0801128b 	.word	0x0801128b
 8011258:	0801128b 	.word	0x0801128b
 801125c:	0801128b 	.word	0x0801128b
 8011260:	08011283 	.word	0x08011283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011264:	f7fc ff12 	bl	800e08c <HAL_RCC_GetPCLK1Freq>
 8011268:	61b8      	str	r0, [r7, #24]
        break;
 801126a:	e013      	b.n	8011294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801126c:	f7fc ff22 	bl	800e0b4 <HAL_RCC_GetPCLK2Freq>
 8011270:	61b8      	str	r0, [r7, #24]
        break;
 8011272:	e00f      	b.n	8011294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011274:	4b1d      	ldr	r3, [pc, #116]	@ (80112ec <UART_SetConfig+0x4c4>)
 8011276:	61bb      	str	r3, [r7, #24]
        break;
 8011278:	e00c      	b.n	8011294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801127a:	f7fc fe35 	bl	800dee8 <HAL_RCC_GetSysClockFreq>
 801127e:	61b8      	str	r0, [r7, #24]
        break;
 8011280:	e008      	b.n	8011294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011286:	61bb      	str	r3, [r7, #24]
        break;
 8011288:	e004      	b.n	8011294 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801128a:	2300      	movs	r3, #0
 801128c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801128e:	2301      	movs	r3, #1
 8011290:	77bb      	strb	r3, [r7, #30]
        break;
 8011292:	bf00      	nop
    }

    if (pclk != 0U)
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d018      	beq.n	80112cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	085a      	lsrs	r2, r3, #1
 80112a0:	69bb      	ldr	r3, [r7, #24]
 80112a2:	441a      	add	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	2b0f      	cmp	r3, #15
 80112b2:	d909      	bls.n	80112c8 <UART_SetConfig+0x4a0>
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112ba:	d205      	bcs.n	80112c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	b29a      	uxth	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	60da      	str	r2, [r3, #12]
 80112c6:	e001      	b.n	80112cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80112c8:	2301      	movs	r3, #1
 80112ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2200      	movs	r2, #0
 80112d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80112d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3720      	adds	r7, #32
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	40007c00 	.word	0x40007c00
 80112e8:	40023800 	.word	0x40023800
 80112ec:	00f42400 	.word	0x00f42400

080112f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112fc:	f003 0301 	and.w	r3, r3, #1
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00a      	beq.n	801131a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	430a      	orrs	r2, r1
 8011318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131e:	f003 0302 	and.w	r3, r3, #2
 8011322:	2b00      	cmp	r3, #0
 8011324:	d00a      	beq.n	801133c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	430a      	orrs	r2, r1
 801133a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011340:	f003 0304 	and.w	r3, r3, #4
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00a      	beq.n	801135e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	430a      	orrs	r2, r1
 801135c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011362:	f003 0308 	and.w	r3, r3, #8
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00a      	beq.n	8011380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	430a      	orrs	r2, r1
 801137e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011384:	f003 0310 	and.w	r3, r3, #16
 8011388:	2b00      	cmp	r3, #0
 801138a:	d00a      	beq.n	80113a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	430a      	orrs	r2, r1
 80113a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113a6:	f003 0320 	and.w	r3, r3, #32
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00a      	beq.n	80113c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	430a      	orrs	r2, r1
 80113c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d01a      	beq.n	8011406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	430a      	orrs	r2, r1
 80113e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80113ee:	d10a      	bne.n	8011406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	430a      	orrs	r2, r1
 8011404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00a      	beq.n	8011428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	430a      	orrs	r2, r1
 8011426:	605a      	str	r2, [r3, #4]
  }
}
 8011428:	bf00      	nop
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b086      	sub	sp, #24
 8011438:	af02      	add	r7, sp, #8
 801143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011444:	f7f9 f9b8 	bl	800a7b8 <HAL_GetTick>
 8011448:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f003 0308 	and.w	r3, r3, #8
 8011454:	2b08      	cmp	r3, #8
 8011456:	d10e      	bne.n	8011476 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2200      	movs	r2, #0
 8011462:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f81b 	bl	80114a2 <UART_WaitOnFlagUntilTimeout>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011472:	2303      	movs	r3, #3
 8011474:	e011      	b.n	801149a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2220      	movs	r2, #32
 801147a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2220      	movs	r2, #32
 8011480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2200      	movs	r2, #0
 8011488:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8011498:	2300      	movs	r3, #0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3710      	adds	r7, #16
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b09c      	sub	sp, #112	@ 0x70
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	60f8      	str	r0, [r7, #12]
 80114aa:	60b9      	str	r1, [r7, #8]
 80114ac:	603b      	str	r3, [r7, #0]
 80114ae:	4613      	mov	r3, r2
 80114b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114b2:	e0a7      	b.n	8011604 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ba:	f000 80a3 	beq.w	8011604 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114be:	f7f9 f97b 	bl	800a7b8 <HAL_GetTick>
 80114c2:	4602      	mov	r2, r0
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d302      	bcc.n	80114d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80114ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d13f      	bne.n	8011554 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114dc:	e853 3f00 	ldrex	r3, [r3]
 80114e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80114e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80114e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	461a      	mov	r2, r3
 80114f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80114f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80114f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80114fa:	e841 2300 	strex	r3, r2, [r1]
 80114fe:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8011500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011502:	2b00      	cmp	r3, #0
 8011504:	d1e6      	bne.n	80114d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	3308      	adds	r3, #8
 801150c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801150e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011510:	e853 3f00 	ldrex	r3, [r3]
 8011514:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011518:	f023 0301 	bic.w	r3, r3, #1
 801151c:	663b      	str	r3, [r7, #96]	@ 0x60
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	3308      	adds	r3, #8
 8011524:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011526:	64ba      	str	r2, [r7, #72]	@ 0x48
 8011528:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801152a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801152c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801152e:	e841 2300 	strex	r3, r2, [r1]
 8011532:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011536:	2b00      	cmp	r3, #0
 8011538:	d1e5      	bne.n	8011506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2220      	movs	r2, #32
 801153e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	2220      	movs	r2, #32
 8011544:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2200      	movs	r2, #0
 801154c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8011550:	2303      	movs	r3, #3
 8011552:	e068      	b.n	8011626 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f003 0304 	and.w	r3, r3, #4
 801155e:	2b00      	cmp	r3, #0
 8011560:	d050      	beq.n	8011604 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	69db      	ldr	r3, [r3, #28]
 8011568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801156c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011570:	d148      	bne.n	8011604 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801157a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011584:	e853 3f00 	ldrex	r3, [r3]
 8011588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011590:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	461a      	mov	r2, r3
 8011598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801159a:	637b      	str	r3, [r7, #52]	@ 0x34
 801159c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801159e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80115a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115a2:	e841 2300 	strex	r3, r2, [r1]
 80115a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80115a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1e6      	bne.n	801157c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	3308      	adds	r3, #8
 80115b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	e853 3f00 	ldrex	r3, [r3]
 80115bc:	613b      	str	r3, [r7, #16]
   return(result);
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	f023 0301 	bic.w	r3, r3, #1
 80115c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	3308      	adds	r3, #8
 80115cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80115ce:	623a      	str	r2, [r7, #32]
 80115d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115d2:	69f9      	ldr	r1, [r7, #28]
 80115d4:	6a3a      	ldr	r2, [r7, #32]
 80115d6:	e841 2300 	strex	r3, r2, [r1]
 80115da:	61bb      	str	r3, [r7, #24]
   return(result);
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d1e5      	bne.n	80115ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2220      	movs	r2, #32
 80115e6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2220      	movs	r2, #32
 80115ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2220      	movs	r2, #32
 80115f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2200      	movs	r2, #0
 80115fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8011600:	2303      	movs	r3, #3
 8011602:	e010      	b.n	8011626 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	69da      	ldr	r2, [r3, #28]
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	4013      	ands	r3, r2
 801160e:	68ba      	ldr	r2, [r7, #8]
 8011610:	429a      	cmp	r2, r3
 8011612:	bf0c      	ite	eq
 8011614:	2301      	moveq	r3, #1
 8011616:	2300      	movne	r3, #0
 8011618:	b2db      	uxtb	r3, r3
 801161a:	461a      	mov	r2, r3
 801161c:	79fb      	ldrb	r3, [r7, #7]
 801161e:	429a      	cmp	r2, r3
 8011620:	f43f af48 	beq.w	80114b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3770      	adds	r7, #112	@ 0x70
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
	...

08011630 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d121      	bne.n	8011686 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	4b27      	ldr	r3, [pc, #156]	@ (80116e4 <FMC_SDRAM_Init+0xb4>)
 8011648:	4013      	ands	r3, r2
 801164a:	683a      	ldr	r2, [r7, #0]
 801164c:	6851      	ldr	r1, [r2, #4]
 801164e:	683a      	ldr	r2, [r7, #0]
 8011650:	6892      	ldr	r2, [r2, #8]
 8011652:	4311      	orrs	r1, r2
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	68d2      	ldr	r2, [r2, #12]
 8011658:	4311      	orrs	r1, r2
 801165a:	683a      	ldr	r2, [r7, #0]
 801165c:	6912      	ldr	r2, [r2, #16]
 801165e:	4311      	orrs	r1, r2
 8011660:	683a      	ldr	r2, [r7, #0]
 8011662:	6952      	ldr	r2, [r2, #20]
 8011664:	4311      	orrs	r1, r2
 8011666:	683a      	ldr	r2, [r7, #0]
 8011668:	6992      	ldr	r2, [r2, #24]
 801166a:	4311      	orrs	r1, r2
 801166c:	683a      	ldr	r2, [r7, #0]
 801166e:	69d2      	ldr	r2, [r2, #28]
 8011670:	4311      	orrs	r1, r2
 8011672:	683a      	ldr	r2, [r7, #0]
 8011674:	6a12      	ldr	r2, [r2, #32]
 8011676:	4311      	orrs	r1, r2
 8011678:	683a      	ldr	r2, [r7, #0]
 801167a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801167c:	430a      	orrs	r2, r1
 801167e:	431a      	orrs	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	e026      	b.n	80116d4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	69d9      	ldr	r1, [r3, #28]
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	4319      	orrs	r1, r3
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801169c:	430b      	orrs	r3, r1
 801169e:	431a      	orrs	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	685a      	ldr	r2, [r3, #4]
 80116a8:	4b0e      	ldr	r3, [pc, #56]	@ (80116e4 <FMC_SDRAM_Init+0xb4>)
 80116aa:	4013      	ands	r3, r2
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	6851      	ldr	r1, [r2, #4]
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	6892      	ldr	r2, [r2, #8]
 80116b4:	4311      	orrs	r1, r2
 80116b6:	683a      	ldr	r2, [r7, #0]
 80116b8:	68d2      	ldr	r2, [r2, #12]
 80116ba:	4311      	orrs	r1, r2
 80116bc:	683a      	ldr	r2, [r7, #0]
 80116be:	6912      	ldr	r2, [r2, #16]
 80116c0:	4311      	orrs	r1, r2
 80116c2:	683a      	ldr	r2, [r7, #0]
 80116c4:	6952      	ldr	r2, [r2, #20]
 80116c6:	4311      	orrs	r1, r2
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	6992      	ldr	r2, [r2, #24]
 80116cc:	430a      	orrs	r2, r1
 80116ce:	431a      	orrs	r2, r3
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	370c      	adds	r7, #12
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	ffff8000 	.word	0xffff8000

080116e8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b085      	sub	sp, #20
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d128      	bne.n	801174c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	689b      	ldr	r3, [r3, #8]
 80116fe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	1e59      	subs	r1, r3, #1
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	3b01      	subs	r3, #1
 801170e:	011b      	lsls	r3, r3, #4
 8011710:	4319      	orrs	r1, r3
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	689b      	ldr	r3, [r3, #8]
 8011716:	3b01      	subs	r3, #1
 8011718:	021b      	lsls	r3, r3, #8
 801171a:	4319      	orrs	r1, r3
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	3b01      	subs	r3, #1
 8011722:	031b      	lsls	r3, r3, #12
 8011724:	4319      	orrs	r1, r3
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	691b      	ldr	r3, [r3, #16]
 801172a:	3b01      	subs	r3, #1
 801172c:	041b      	lsls	r3, r3, #16
 801172e:	4319      	orrs	r1, r3
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	695b      	ldr	r3, [r3, #20]
 8011734:	3b01      	subs	r3, #1
 8011736:	051b      	lsls	r3, r3, #20
 8011738:	4319      	orrs	r1, r3
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	699b      	ldr	r3, [r3, #24]
 801173e:	3b01      	subs	r3, #1
 8011740:	061b      	lsls	r3, r3, #24
 8011742:	430b      	orrs	r3, r1
 8011744:	431a      	orrs	r2, r3
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	609a      	str	r2, [r3, #8]
 801174a:	e02d      	b.n	80117a8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	689a      	ldr	r2, [r3, #8]
 8011750:	4b19      	ldr	r3, [pc, #100]	@ (80117b8 <FMC_SDRAM_Timing_Init+0xd0>)
 8011752:	4013      	ands	r3, r2
 8011754:	68ba      	ldr	r2, [r7, #8]
 8011756:	68d2      	ldr	r2, [r2, #12]
 8011758:	3a01      	subs	r2, #1
 801175a:	0311      	lsls	r1, r2, #12
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	6952      	ldr	r2, [r2, #20]
 8011760:	3a01      	subs	r2, #1
 8011762:	0512      	lsls	r2, r2, #20
 8011764:	430a      	orrs	r2, r1
 8011766:	431a      	orrs	r2, r3
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68db      	ldr	r3, [r3, #12]
 8011770:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	1e59      	subs	r1, r3, #1
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	3b01      	subs	r3, #1
 8011780:	011b      	lsls	r3, r3, #4
 8011782:	4319      	orrs	r1, r3
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	3b01      	subs	r3, #1
 801178a:	021b      	lsls	r3, r3, #8
 801178c:	4319      	orrs	r1, r3
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	691b      	ldr	r3, [r3, #16]
 8011792:	3b01      	subs	r3, #1
 8011794:	041b      	lsls	r3, r3, #16
 8011796:	4319      	orrs	r1, r3
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	699b      	ldr	r3, [r3, #24]
 801179c:	3b01      	subs	r3, #1
 801179e:	061b      	lsls	r3, r3, #24
 80117a0:	430b      	orrs	r3, r1
 80117a2:	431a      	orrs	r2, r3
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80117a8:	2300      	movs	r3, #0
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	ff0f0fff 	.word	0xff0f0fff

080117bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80117bc:	b480      	push	{r7}
 80117be:	b085      	sub	sp, #20
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	691a      	ldr	r2, [r3, #16]
 80117cc:	4b0c      	ldr	r3, [pc, #48]	@ (8011800 <FMC_SDRAM_SendCommand+0x44>)
 80117ce:	4013      	ands	r3, r2
 80117d0:	68ba      	ldr	r2, [r7, #8]
 80117d2:	6811      	ldr	r1, [r2, #0]
 80117d4:	68ba      	ldr	r2, [r7, #8]
 80117d6:	6852      	ldr	r2, [r2, #4]
 80117d8:	4311      	orrs	r1, r2
 80117da:	68ba      	ldr	r2, [r7, #8]
 80117dc:	6892      	ldr	r2, [r2, #8]
 80117de:	3a01      	subs	r2, #1
 80117e0:	0152      	lsls	r2, r2, #5
 80117e2:	4311      	orrs	r1, r2
 80117e4:	68ba      	ldr	r2, [r7, #8]
 80117e6:	68d2      	ldr	r2, [r2, #12]
 80117e8:	0252      	lsls	r2, r2, #9
 80117ea:	430a      	orrs	r2, r1
 80117ec:	431a      	orrs	r2, r3
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80117f2:	2300      	movs	r3, #0
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3714      	adds	r7, #20
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr
 8011800:	ffc00000 	.word	0xffc00000

08011804 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011804:	b480      	push	{r7}
 8011806:	b083      	sub	sp, #12
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	695a      	ldr	r2, [r3, #20]
 8011812:	4b07      	ldr	r3, [pc, #28]	@ (8011830 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011814:	4013      	ands	r3, r2
 8011816:	683a      	ldr	r2, [r7, #0]
 8011818:	0052      	lsls	r2, r2, #1
 801181a:	431a      	orrs	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011820:	2300      	movs	r3, #0
}
 8011822:	4618      	mov	r0, r3
 8011824:	370c      	adds	r7, #12
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	ffffc001 	.word	0xffffc001

08011834 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011834:	b084      	sub	sp, #16
 8011836:	b480      	push	{r7}
 8011838:	b085      	sub	sp, #20
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
 801183e:	f107 001c 	add.w	r0, r7, #28
 8011842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011846:	2300      	movs	r3, #0
 8011848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801184a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801184c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801184e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8011852:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8011856:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 801185a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 801185e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	4313      	orrs	r3, r2
 8011864:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	685a      	ldr	r2, [r3, #4]
 801186a:	4b07      	ldr	r3, [pc, #28]	@ (8011888 <SDMMC_Init+0x54>)
 801186c:	4013      	ands	r3, r2
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	431a      	orrs	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011876:	2300      	movs	r3, #0
}
 8011878:	4618      	mov	r0, r3
 801187a:	3714      	adds	r7, #20
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	b004      	add	sp, #16
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	ffff8100 	.word	0xffff8100

0801188c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 801189a:	4618      	mov	r0, r3
 801189c:	370c      	adds	r7, #12
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr

080118a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80118a6:	b480      	push	{r7}
 80118a8:	b083      	sub	sp, #12
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
 80118ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80118ba:	2300      	movs	r3, #0
}
 80118bc:	4618      	mov	r0, r3
 80118be:	370c      	adds	r7, #12
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr

080118c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80118c8:	b480      	push	{r7}
 80118ca:	b083      	sub	sp, #12
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2203      	movs	r2, #3
 80118d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80118d6:	2300      	movs	r3, #0
}
 80118d8:	4618      	mov	r0, r3
 80118da:	370c      	adds	r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr

080118e4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f003 0303 	and.w	r3, r3, #3
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	370c      	adds	r7, #12
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr

08011900 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801191e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011924:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801192a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	4313      	orrs	r3, r2
 8011930:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	68da      	ldr	r2, [r3, #12]
 8011936:	4b06      	ldr	r3, [pc, #24]	@ (8011950 <SDMMC_SendCommand+0x50>)
 8011938:	4013      	ands	r3, r2
 801193a:	68fa      	ldr	r2, [r7, #12]
 801193c:	431a      	orrs	r2, r3
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011942:	2300      	movs	r3, #0
}
 8011944:	4618      	mov	r0, r3
 8011946:	3714      	adds	r7, #20
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr
 8011950:	fffff000 	.word	0xfffff000

08011954 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	691b      	ldr	r3, [r3, #16]
 8011960:	b2db      	uxtb	r3, r3
}
 8011962:	4618      	mov	r0, r3
 8011964:	370c      	adds	r7, #12
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr

0801196e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801196e:	b480      	push	{r7}
 8011970:	b085      	sub	sp, #20
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
 8011976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	3314      	adds	r3, #20
 801197c:	461a      	mov	r2, r3
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	4413      	add	r3, r2
 8011982:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
}  
 8011988:	4618      	mov	r0, r3
 801198a:	3714      	adds	r7, #20
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801199e:	2300      	movs	r3, #0
 80119a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	685a      	ldr	r2, [r3, #4]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80119ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80119c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80119c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80119c8:	68fa      	ldr	r2, [r7, #12]
 80119ca:	4313      	orrs	r3, r2
 80119cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119d2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	431a      	orrs	r2, r3
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80119de:	2300      	movs	r3, #0

}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3714      	adds	r7, #20
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b088      	sub	sp, #32
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80119fa:	2310      	movs	r3, #16
 80119fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119fe:	2340      	movs	r3, #64	@ 0x40
 8011a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a02:	2300      	movs	r3, #0
 8011a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a0c:	f107 0308 	add.w	r3, r7, #8
 8011a10:	4619      	mov	r1, r3
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff ff74 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a1c:	2110      	movs	r1, #16
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 f9d6 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a26:	69fb      	ldr	r3, [r7, #28]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3720      	adds	r7, #32
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b088      	sub	sp, #32
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011a3e:	2311      	movs	r3, #17
 8011a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a42:	2340      	movs	r3, #64	@ 0x40
 8011a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a46:	2300      	movs	r3, #0
 8011a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a50:	f107 0308 	add.w	r3, r7, #8
 8011a54:	4619      	mov	r1, r3
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f7ff ff52 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a60:	2111      	movs	r1, #17
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f000 f9b4 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a6a:	69fb      	ldr	r3, [r7, #28]
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3720      	adds	r7, #32
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b088      	sub	sp, #32
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011a82:	2312      	movs	r3, #18
 8011a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a86:	2340      	movs	r3, #64	@ 0x40
 8011a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a94:	f107 0308 	add.w	r3, r7, #8
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7ff ff30 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011aa4:	2112      	movs	r1, #18
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 f992 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011aac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011aae:	69fb      	ldr	r3, [r7, #28]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3720      	adds	r7, #32
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b088      	sub	sp, #32
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011ac6:	2318      	movs	r3, #24
 8011ac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011aca:	2340      	movs	r3, #64	@ 0x40
 8011acc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ad6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ad8:	f107 0308 	add.w	r3, r7, #8
 8011adc:	4619      	mov	r1, r3
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f7ff ff0e 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011ae8:	2118      	movs	r1, #24
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f970 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011af2:	69fb      	ldr	r3, [r7, #28]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3720      	adds	r7, #32
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b088      	sub	sp, #32
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011b0a:	2319      	movs	r3, #25
 8011b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b0e:	2340      	movs	r3, #64	@ 0x40
 8011b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b12:	2300      	movs	r3, #0
 8011b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b1c:	f107 0308 	add.w	r3, r7, #8
 8011b20:	4619      	mov	r1, r3
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7ff feec 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011b2c:	2119      	movs	r1, #25
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f000 f94e 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011b34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b36:	69fb      	ldr	r3, [r7, #28]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3720      	adds	r7, #32
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b088      	sub	sp, #32
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011b4c:	230c      	movs	r3, #12
 8011b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b50:	2340      	movs	r3, #64	@ 0x40
 8011b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b54:	2300      	movs	r3, #0
 8011b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b5e:	f107 0308 	add.w	r3, r7, #8
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7ff fecb 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011b6a:	4a05      	ldr	r2, [pc, #20]	@ (8011b80 <SDMMC_CmdStopTransfer+0x40>)
 8011b6c:	210c      	movs	r1, #12
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 f92e 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b76:	69fb      	ldr	r3, [r7, #28]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3720      	adds	r7, #32
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	05f5e100 	.word	0x05f5e100

08011b84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b08a      	sub	sp, #40	@ 0x28
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011b94:	2307      	movs	r3, #7
 8011b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b98:	2340      	movs	r3, #64	@ 0x40
 8011b9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ba4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ba6:	f107 0310 	add.w	r3, r7, #16
 8011baa:	4619      	mov	r1, r3
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	f7ff fea7 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011bb6:	2107      	movs	r1, #7
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f000 f909 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011bbe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3728      	adds	r7, #40	@ 0x28
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}

08011bca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b088      	sub	sp, #32
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bde:	2300      	movs	r3, #0
 8011be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011be6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011be8:	f107 0308 	add.w	r3, r7, #8
 8011bec:	4619      	mov	r1, r3
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f7ff fe86 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f000 fb23 	bl	8012240 <SDMMC_GetCmdError>
 8011bfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011bfc:	69fb      	ldr	r3, [r7, #28]
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3720      	adds	r7, #32
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}

08011c06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011c06:	b580      	push	{r7, lr}
 8011c08:	b088      	sub	sp, #32
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011c0e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8011c12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011c14:	2308      	movs	r3, #8
 8011c16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c18:	2340      	movs	r3, #64	@ 0x40
 8011c1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c26:	f107 0308 	add.w	r3, r7, #8
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7ff fe67 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 fab6 	bl	80121a4 <SDMMC_GetCmdResp7>
 8011c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c3a:	69fb      	ldr	r3, [r7, #28]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3720      	adds	r7, #32
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b088      	sub	sp, #32
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011c52:	2337      	movs	r3, #55	@ 0x37
 8011c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c56:	2340      	movs	r3, #64	@ 0x40
 8011c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c64:	f107 0308 	add.w	r3, r7, #8
 8011c68:	4619      	mov	r1, r3
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7ff fe48 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011c74:	2137      	movs	r1, #55	@ 0x37
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 f8aa 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c7e:	69fb      	ldr	r3, [r7, #28]
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3720      	adds	r7, #32
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b088      	sub	sp, #32
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011c92:	683a      	ldr	r2, [r7, #0]
 8011c94:	4b0d      	ldr	r3, [pc, #52]	@ (8011ccc <SDMMC_CmdAppOperCommand+0x44>)
 8011c96:	4313      	orrs	r3, r2
 8011c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011c9a:	2329      	movs	r3, #41	@ 0x29
 8011c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c9e:	2340      	movs	r3, #64	@ 0x40
 8011ca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011caa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cac:	f107 0308 	add.w	r3, r7, #8
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7ff fe24 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f000 f9bf 	bl	801203c <SDMMC_GetCmdResp3>
 8011cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cc0:	69fb      	ldr	r3, [r7, #28]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3720      	adds	r7, #32
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	80100000 	.word	0x80100000

08011cd0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b088      	sub	sp, #32
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011cdc:	2302      	movs	r3, #2
 8011cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011ce0:	23c0      	movs	r3, #192	@ 0xc0
 8011ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cee:	f107 0308 	add.w	r3, r7, #8
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff fe03 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 f956 	bl	8011fac <SDMMC_GetCmdResp2>
 8011d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d02:	69fb      	ldr	r3, [r7, #28]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3720      	adds	r7, #32
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b088      	sub	sp, #32
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011d1a:	2309      	movs	r3, #9
 8011d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011d1e:	23c0      	movs	r3, #192	@ 0xc0
 8011d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d22:	2300      	movs	r3, #0
 8011d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d2c:	f107 0308 	add.w	r3, r7, #8
 8011d30:	4619      	mov	r1, r3
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f7ff fde4 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 f937 	bl	8011fac <SDMMC_GetCmdResp2>
 8011d3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d40:	69fb      	ldr	r3, [r7, #28]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3720      	adds	r7, #32
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}

08011d4a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011d4a:	b580      	push	{r7, lr}
 8011d4c:	b088      	sub	sp, #32
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
 8011d52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011d54:	2300      	movs	r3, #0
 8011d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011d58:	2303      	movs	r3, #3
 8011d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d5c:	2340      	movs	r3, #64	@ 0x40
 8011d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d60:	2300      	movs	r3, #0
 8011d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d6a:	f107 0308 	add.w	r3, r7, #8
 8011d6e:	4619      	mov	r1, r3
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7ff fdc5 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	2103      	movs	r1, #3
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 f99c 	bl	80120b8 <SDMMC_GetCmdResp6>
 8011d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d82:	69fb      	ldr	r3, [r7, #28]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3720      	adds	r7, #32
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b088      	sub	sp, #32
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011d9a:	230d      	movs	r3, #13
 8011d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d9e:	2340      	movs	r3, #64	@ 0x40
 8011da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011da2:	2300      	movs	r3, #0
 8011da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011daa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dac:	f107 0308 	add.w	r3, r7, #8
 8011db0:	4619      	mov	r1, r3
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff fda4 	bl	8011900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011dbc:	210d      	movs	r1, #13
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 f806 	bl	8011dd0 <SDMMC_GetCmdResp1>
 8011dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3720      	adds	r7, #32
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b088      	sub	sp, #32
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	460b      	mov	r3, r1
 8011dda:	607a      	str	r2, [r7, #4]
 8011ddc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011dde:	4b70      	ldr	r3, [pc, #448]	@ (8011fa0 <SDMMC_GetCmdResp1+0x1d0>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	4a70      	ldr	r2, [pc, #448]	@ (8011fa4 <SDMMC_GetCmdResp1+0x1d4>)
 8011de4:	fba2 2303 	umull	r2, r3, r2, r3
 8011de8:	0a5a      	lsrs	r2, r3, #9
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	fb02 f303 	mul.w	r3, r2, r3
 8011df0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	1e5a      	subs	r2, r3, #1
 8011df6:	61fa      	str	r2, [r7, #28]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d102      	bne.n	8011e02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011dfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011e00:	e0c9      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e06:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d0ef      	beq.n	8011df2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1ea      	bne.n	8011df2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e20:	f003 0304 	and.w	r3, r3, #4
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d004      	beq.n	8011e32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2204      	movs	r2, #4
 8011e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011e2e:	2304      	movs	r3, #4
 8011e30:	e0b1      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e36:	f003 0301 	and.w	r3, r3, #1
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d004      	beq.n	8011e48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2201      	movs	r2, #1
 8011e42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e44:	2301      	movs	r3, #1
 8011e46:	e0a6      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	22c5      	movs	r2, #197	@ 0xc5
 8011e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7ff fd80 	bl	8011954 <SDMMC_GetCommandResponse>
 8011e54:	4603      	mov	r3, r0
 8011e56:	461a      	mov	r2, r3
 8011e58:	7afb      	ldrb	r3, [r7, #11]
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	d001      	beq.n	8011e62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	e099      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011e62:	2100      	movs	r1, #0
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f7ff fd82 	bl	801196e <SDMMC_GetResponse>
 8011e6a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011e6c:	697a      	ldr	r2, [r7, #20]
 8011e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8011fa8 <SDMMC_GetCmdResp1+0x1d8>)
 8011e70:	4013      	ands	r3, r2
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d101      	bne.n	8011e7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011e76:	2300      	movs	r3, #0
 8011e78:	e08d      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	da02      	bge.n	8011e86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011e80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011e84:	e087      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d001      	beq.n	8011e94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011e90:	2340      	movs	r3, #64	@ 0x40
 8011e92:	e080      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011e9e:	2380      	movs	r3, #128	@ 0x80
 8011ea0:	e079      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d002      	beq.n	8011eb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011eb0:	e071      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d002      	beq.n	8011ec2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011ec0:	e069      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d002      	beq.n	8011ed2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ed0:	e061      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d002      	beq.n	8011ee2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011edc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011ee0:	e059      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d002      	beq.n	8011ef2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011ef0:	e051      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d002      	beq.n	8011f02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011f00:	e049      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d002      	beq.n	8011f12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011f0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011f10:	e041      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d002      	beq.n	8011f22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011f1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011f20:	e039      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d002      	beq.n	8011f32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011f30:	e031      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d002      	beq.n	8011f42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011f3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8011f40:	e029      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011f4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011f50:	e021      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011f5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011f60:	e019      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011f6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011f70:	e011      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d002      	beq.n	8011f82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011f7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011f80:	e009      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	f003 0308 	and.w	r3, r3, #8
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d002      	beq.n	8011f92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011f8c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011f90:	e001      	b.n	8011f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011f92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3720      	adds	r7, #32
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20000050 	.word	0x20000050
 8011fa4:	10624dd3 	.word	0x10624dd3
 8011fa8:	fdffe008 	.word	0xfdffe008

08011fac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b085      	sub	sp, #20
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8012034 <SDMMC_GetCmdResp2+0x88>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8012038 <SDMMC_GetCmdResp2+0x8c>)
 8011fba:	fba2 2303 	umull	r2, r3, r2, r3
 8011fbe:	0a5b      	lsrs	r3, r3, #9
 8011fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011fc4:	fb02 f303 	mul.w	r3, r2, r3
 8011fc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	1e5a      	subs	r2, r3, #1
 8011fce:	60fa      	str	r2, [r7, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d102      	bne.n	8011fda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011fd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011fd8:	e026      	b.n	8012028 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d0ef      	beq.n	8011fca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d1ea      	bne.n	8011fca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ff8:	f003 0304 	and.w	r3, r3, #4
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d004      	beq.n	801200a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2204      	movs	r2, #4
 8012004:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012006:	2304      	movs	r3, #4
 8012008:	e00e      	b.n	8012028 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801200e:	f003 0301 	and.w	r3, r3, #1
 8012012:	2b00      	cmp	r3, #0
 8012014:	d004      	beq.n	8012020 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2201      	movs	r2, #1
 801201a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801201c:	2301      	movs	r3, #1
 801201e:	e003      	b.n	8012028 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	22c5      	movs	r2, #197	@ 0xc5
 8012024:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	3714      	adds	r7, #20
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr
 8012034:	20000050 	.word	0x20000050
 8012038:	10624dd3 	.word	0x10624dd3

0801203c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801203c:	b480      	push	{r7}
 801203e:	b085      	sub	sp, #20
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012044:	4b1a      	ldr	r3, [pc, #104]	@ (80120b0 <SDMMC_GetCmdResp3+0x74>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4a1a      	ldr	r2, [pc, #104]	@ (80120b4 <SDMMC_GetCmdResp3+0x78>)
 801204a:	fba2 2303 	umull	r2, r3, r2, r3
 801204e:	0a5b      	lsrs	r3, r3, #9
 8012050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012054:	fb02 f303 	mul.w	r3, r2, r3
 8012058:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	1e5a      	subs	r2, r3, #1
 801205e:	60fa      	str	r2, [r7, #12]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d102      	bne.n	801206a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012064:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012068:	e01b      	b.n	80120a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801206e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012076:	2b00      	cmp	r3, #0
 8012078:	d0ef      	beq.n	801205a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012080:	2b00      	cmp	r3, #0
 8012082:	d1ea      	bne.n	801205a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012088:	f003 0304 	and.w	r3, r3, #4
 801208c:	2b00      	cmp	r3, #0
 801208e:	d004      	beq.n	801209a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2204      	movs	r2, #4
 8012094:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012096:	2304      	movs	r3, #4
 8012098:	e003      	b.n	80120a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	22c5      	movs	r2, #197	@ 0xc5
 801209e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3714      	adds	r7, #20
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr
 80120ae:	bf00      	nop
 80120b0:	20000050 	.word	0x20000050
 80120b4:	10624dd3 	.word	0x10624dd3

080120b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b088      	sub	sp, #32
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	460b      	mov	r3, r1
 80120c2:	607a      	str	r2, [r7, #4]
 80120c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80120c6:	4b35      	ldr	r3, [pc, #212]	@ (801219c <SDMMC_GetCmdResp6+0xe4>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4a35      	ldr	r2, [pc, #212]	@ (80121a0 <SDMMC_GetCmdResp6+0xe8>)
 80120cc:	fba2 2303 	umull	r2, r3, r2, r3
 80120d0:	0a5b      	lsrs	r3, r3, #9
 80120d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80120d6:	fb02 f303 	mul.w	r3, r2, r3
 80120da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80120dc:	69fb      	ldr	r3, [r7, #28]
 80120de:	1e5a      	subs	r2, r3, #1
 80120e0:	61fa      	str	r2, [r7, #28]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d102      	bne.n	80120ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80120e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80120ea:	e052      	b.n	8012192 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d0ef      	beq.n	80120dc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012102:	2b00      	cmp	r3, #0
 8012104:	d1ea      	bne.n	80120dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801210a:	f003 0304 	and.w	r3, r3, #4
 801210e:	2b00      	cmp	r3, #0
 8012110:	d004      	beq.n	801211c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	2204      	movs	r2, #4
 8012116:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012118:	2304      	movs	r3, #4
 801211a:	e03a      	b.n	8012192 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012120:	f003 0301 	and.w	r3, r3, #1
 8012124:	2b00      	cmp	r3, #0
 8012126:	d004      	beq.n	8012132 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	2201      	movs	r2, #1
 801212c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801212e:	2301      	movs	r3, #1
 8012130:	e02f      	b.n	8012192 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f7ff fc0e 	bl	8011954 <SDMMC_GetCommandResponse>
 8012138:	4603      	mov	r3, r0
 801213a:	461a      	mov	r2, r3
 801213c:	7afb      	ldrb	r3, [r7, #11]
 801213e:	4293      	cmp	r3, r2
 8012140:	d001      	beq.n	8012146 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012142:	2301      	movs	r3, #1
 8012144:	e025      	b.n	8012192 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	22c5      	movs	r2, #197	@ 0xc5
 801214a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801214c:	2100      	movs	r1, #0
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f7ff fc0d 	bl	801196e <SDMMC_GetResponse>
 8012154:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801215c:	2b00      	cmp	r3, #0
 801215e:	d106      	bne.n	801216e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	0c1b      	lsrs	r3, r3, #16
 8012164:	b29a      	uxth	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801216a:	2300      	movs	r3, #0
 801216c:	e011      	b.n	8012192 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801217c:	e009      	b.n	8012192 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012184:	2b00      	cmp	r3, #0
 8012186:	d002      	beq.n	801218e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801218c:	e001      	b.n	8012192 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801218e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8012192:	4618      	mov	r0, r3
 8012194:	3720      	adds	r7, #32
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop
 801219c:	20000050 	.word	0x20000050
 80121a0:	10624dd3 	.word	0x10624dd3

080121a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b085      	sub	sp, #20
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80121ac:	4b22      	ldr	r3, [pc, #136]	@ (8012238 <SDMMC_GetCmdResp7+0x94>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4a22      	ldr	r2, [pc, #136]	@ (801223c <SDMMC_GetCmdResp7+0x98>)
 80121b2:	fba2 2303 	umull	r2, r3, r2, r3
 80121b6:	0a5b      	lsrs	r3, r3, #9
 80121b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80121bc:	fb02 f303 	mul.w	r3, r2, r3
 80121c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	1e5a      	subs	r2, r3, #1
 80121c6:	60fa      	str	r2, [r7, #12]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d102      	bne.n	80121d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80121d0:	e02c      	b.n	801222c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d0ef      	beq.n	80121c2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d1ea      	bne.n	80121c2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121f0:	f003 0304 	and.w	r3, r3, #4
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d004      	beq.n	8012202 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2204      	movs	r2, #4
 80121fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80121fe:	2304      	movs	r3, #4
 8012200:	e014      	b.n	801222c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012206:	f003 0301 	and.w	r3, r3, #1
 801220a:	2b00      	cmp	r3, #0
 801220c:	d004      	beq.n	8012218 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2201      	movs	r2, #1
 8012212:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012214:	2301      	movs	r3, #1
 8012216:	e009      	b.n	801222c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801221c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012220:	2b00      	cmp	r3, #0
 8012222:	d002      	beq.n	801222a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2240      	movs	r2, #64	@ 0x40
 8012228:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801222a:	2300      	movs	r3, #0
  
}
 801222c:	4618      	mov	r0, r3
 801222e:	3714      	adds	r7, #20
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr
 8012238:	20000050 	.word	0x20000050
 801223c:	10624dd3 	.word	0x10624dd3

08012240 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012240:	b480      	push	{r7}
 8012242:	b085      	sub	sp, #20
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012248:	4b11      	ldr	r3, [pc, #68]	@ (8012290 <SDMMC_GetCmdError+0x50>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	4a11      	ldr	r2, [pc, #68]	@ (8012294 <SDMMC_GetCmdError+0x54>)
 801224e:	fba2 2303 	umull	r2, r3, r2, r3
 8012252:	0a5b      	lsrs	r3, r3, #9
 8012254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012258:	fb02 f303 	mul.w	r3, r2, r3
 801225c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	1e5a      	subs	r2, r3, #1
 8012262:	60fa      	str	r2, [r7, #12]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d102      	bne.n	801226e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012268:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801226c:	e009      	b.n	8012282 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012276:	2b00      	cmp	r3, #0
 8012278:	d0f1      	beq.n	801225e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	22c5      	movs	r2, #197	@ 0xc5
 801227e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8012280:	2300      	movs	r3, #0
}
 8012282:	4618      	mov	r0, r3
 8012284:	3714      	adds	r7, #20
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop
 8012290:	20000050 	.word	0x20000050
 8012294:	10624dd3 	.word	0x10624dd3

08012298 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801229c:	4904      	ldr	r1, [pc, #16]	@ (80122b0 <MX_FATFS_Init+0x18>)
 801229e:	4805      	ldr	r0, [pc, #20]	@ (80122b4 <MX_FATFS_Init+0x1c>)
 80122a0:	f000 fb58 	bl	8012954 <FATFS_LinkDriver>
 80122a4:	4603      	mov	r3, r0
 80122a6:	461a      	mov	r2, r3
 80122a8:	4b03      	ldr	r3, [pc, #12]	@ (80122b8 <MX_FATFS_Init+0x20>)
 80122aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80122ac:	bf00      	nop
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	200010b8 	.word	0x200010b8
 80122b4:	0802577c 	.word	0x0802577c
 80122b8:	200010b4 	.word	0x200010b4

080122bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80122bc:	b480      	push	{r7}
 80122be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80122c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80122d2:	2300      	movs	r3, #0
 80122d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80122d6:	f000 f888 	bl	80123ea <BSP_SD_IsDetected>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d001      	beq.n	80122e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80122e0:	2302      	movs	r3, #2
 80122e2:	e005      	b.n	80122f0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80122e4:	4804      	ldr	r0, [pc, #16]	@ (80122f8 <BSP_SD_Init+0x2c>)
 80122e6:	f7fd f8b8 	bl	800f45a <HAL_SD_Init>
 80122ea:	4603      	mov	r3, r0
 80122ec:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80122ee:	79fb      	ldrb	r3, [r7, #7]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	20000724 	.word	0x20000724

080122fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b086      	sub	sp, #24
 8012300:	af00      	add	r7, sp, #0
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012308:	2300      	movs	r3, #0
 801230a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	68f9      	ldr	r1, [r7, #12]
 8012312:	4806      	ldr	r0, [pc, #24]	@ (801232c <BSP_SD_ReadBlocks_DMA+0x30>)
 8012314:	f7fd f95a 	bl	800f5cc <HAL_SD_ReadBlocks_DMA>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d001      	beq.n	8012322 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801231e:	2301      	movs	r3, #1
 8012320:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012322:	7dfb      	ldrb	r3, [r7, #23]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3718      	adds	r7, #24
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	20000724 	.word	0x20000724

08012330 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b086      	sub	sp, #24
 8012334:	af00      	add	r7, sp, #0
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801233c:	2300      	movs	r3, #0
 801233e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	68ba      	ldr	r2, [r7, #8]
 8012344:	68f9      	ldr	r1, [r7, #12]
 8012346:	4806      	ldr	r0, [pc, #24]	@ (8012360 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012348:	f7fd fa22 	bl	800f790 <HAL_SD_WriteBlocks_DMA>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d001      	beq.n	8012356 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012352:	2301      	movs	r3, #1
 8012354:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012356:	7dfb      	ldrb	r3, [r7, #23]
}
 8012358:	4618      	mov	r0, r3
 801235a:	3718      	adds	r7, #24
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	20000724 	.word	0x20000724

08012364 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012368:	4805      	ldr	r0, [pc, #20]	@ (8012380 <BSP_SD_GetCardState+0x1c>)
 801236a:	f7fd fe47 	bl	800fffc <HAL_SD_GetCardState>
 801236e:	4603      	mov	r3, r0
 8012370:	2b04      	cmp	r3, #4
 8012372:	bf14      	ite	ne
 8012374:	2301      	movne	r3, #1
 8012376:	2300      	moveq	r3, #0
 8012378:	b2db      	uxtb	r3, r3
}
 801237a:	4618      	mov	r0, r3
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	20000724 	.word	0x20000724

08012384 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801238c:	6879      	ldr	r1, [r7, #4]
 801238e:	4803      	ldr	r0, [pc, #12]	@ (801239c <BSP_SD_GetCardInfo+0x18>)
 8012390:	f7fd fe08 	bl	800ffa4 <HAL_SD_GetCardInfo>
}
 8012394:	bf00      	nop
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	20000724 	.word	0x20000724

080123a0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80123a8:	f000 f818 	bl	80123dc <BSP_SD_AbortCallback>
}
 80123ac:	bf00      	nop
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80123bc:	f000 f9c4 	bl	8012748 <BSP_SD_WriteCpltCallback>
}
 80123c0:	bf00      	nop
 80123c2:	3708      	adds	r7, #8
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80123d0:	f000 f9c8 	bl	8012764 <BSP_SD_ReadCpltCallback>
}
 80123d4:	bf00      	nop
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80123dc:	b480      	push	{r7}
 80123de:	af00      	add	r7, sp, #0

}
 80123e0:	bf00      	nop
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr

080123ea <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80123ea:	b580      	push	{r7, lr}
 80123ec:	b082      	sub	sp, #8
 80123ee:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80123f0:	2301      	movs	r3, #1
 80123f2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80123f4:	f000 f80c 	bl	8012410 <BSP_PlatformIsDetected>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d101      	bne.n	8012402 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80123fe:	2300      	movs	r3, #0
 8012400:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012402:	79fb      	ldrb	r3, [r7, #7]
 8012404:	b2db      	uxtb	r3, r3
}
 8012406:	4618      	mov	r0, r3
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
	...

08012410 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012416:	2301      	movs	r3, #1
 8012418:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801241a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801241e:	4806      	ldr	r0, [pc, #24]	@ (8012438 <BSP_PlatformIsDetected+0x28>)
 8012420:	f7fa f81e 	bl	800c460 <HAL_GPIO_ReadPin>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d001      	beq.n	801242e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801242a:	2300      	movs	r3, #0
 801242c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801242e:	79fb      	ldrb	r3, [r7, #7]
}
 8012430:	4618      	mov	r0, r3
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	40020800 	.word	0x40020800

0801243c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012444:	f000 fb1e 	bl	8012a84 <osKernelSysTick>
 8012448:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 801244a:	e006      	b.n	801245a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801244c:	f7ff ff8a 	bl	8012364 <BSP_SD_GetCardState>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d101      	bne.n	801245a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012456:	2300      	movs	r3, #0
 8012458:	e009      	b.n	801246e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801245a:	f000 fb13 	bl	8012a84 <osKernelSysTick>
 801245e:	4602      	mov	r2, r0
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	429a      	cmp	r2, r3
 8012468:	d8f0      	bhi.n	801244c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801246a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801246e:	4618      	mov	r0, r3
 8012470:	3710      	adds	r7, #16
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
	...

08012478 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	4603      	mov	r3, r0
 8012480:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012482:	4b0b      	ldr	r3, [pc, #44]	@ (80124b0 <SD_CheckStatus+0x38>)
 8012484:	2201      	movs	r2, #1
 8012486:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012488:	f7ff ff6c 	bl	8012364 <BSP_SD_GetCardState>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d107      	bne.n	80124a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012492:	4b07      	ldr	r3, [pc, #28]	@ (80124b0 <SD_CheckStatus+0x38>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	b2db      	uxtb	r3, r3
 8012498:	f023 0301 	bic.w	r3, r3, #1
 801249c:	b2da      	uxtb	r2, r3
 801249e:	4b04      	ldr	r3, [pc, #16]	@ (80124b0 <SD_CheckStatus+0x38>)
 80124a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80124a2:	4b03      	ldr	r3, [pc, #12]	@ (80124b0 <SD_CheckStatus+0x38>)
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	b2db      	uxtb	r3, r3
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	20000095 	.word	0x20000095

080124b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80124b4:	b590      	push	{r4, r7, lr}
 80124b6:	b087      	sub	sp, #28
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	4603      	mov	r3, r0
 80124bc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80124be:	4b20      	ldr	r3, [pc, #128]	@ (8012540 <SD_initialize+0x8c>)
 80124c0:	2201      	movs	r2, #1
 80124c2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80124c4:	f000 fad2 	bl	8012a6c <osKernelRunning>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d030      	beq.n	8012530 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80124ce:	f7ff fefd 	bl	80122cc <BSP_SD_Init>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d107      	bne.n	80124e8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80124d8:	79fb      	ldrb	r3, [r7, #7]
 80124da:	4618      	mov	r0, r3
 80124dc:	f7ff ffcc 	bl	8012478 <SD_CheckStatus>
 80124e0:	4603      	mov	r3, r0
 80124e2:	461a      	mov	r2, r3
 80124e4:	4b16      	ldr	r3, [pc, #88]	@ (8012540 <SD_initialize+0x8c>)
 80124e6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80124e8:	4b15      	ldr	r3, [pc, #84]	@ (8012540 <SD_initialize+0x8c>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d01e      	beq.n	8012530 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80124f2:	4b14      	ldr	r3, [pc, #80]	@ (8012544 <SD_initialize+0x90>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d10e      	bne.n	8012518 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80124fa:	4b13      	ldr	r3, [pc, #76]	@ (8012548 <SD_initialize+0x94>)
 80124fc:	f107 0408 	add.w	r4, r7, #8
 8012500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012502:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012506:	f107 0308 	add.w	r3, r7, #8
 801250a:	2100      	movs	r1, #0
 801250c:	4618      	mov	r0, r3
 801250e:	f000 fc0a 	bl	8012d26 <osMessageCreate>
 8012512:	4603      	mov	r3, r0
 8012514:	4a0b      	ldr	r2, [pc, #44]	@ (8012544 <SD_initialize+0x90>)
 8012516:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012518:	4b0a      	ldr	r3, [pc, #40]	@ (8012544 <SD_initialize+0x90>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d107      	bne.n	8012530 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8012520:	4b07      	ldr	r3, [pc, #28]	@ (8012540 <SD_initialize+0x8c>)
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	b2db      	uxtb	r3, r3
 8012526:	f043 0301 	orr.w	r3, r3, #1
 801252a:	b2da      	uxtb	r2, r3
 801252c:	4b04      	ldr	r3, [pc, #16]	@ (8012540 <SD_initialize+0x8c>)
 801252e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012530:	4b03      	ldr	r3, [pc, #12]	@ (8012540 <SD_initialize+0x8c>)
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	b2db      	uxtb	r3, r3
}
 8012536:	4618      	mov	r0, r3
 8012538:	371c      	adds	r7, #28
 801253a:	46bd      	mov	sp, r7
 801253c:	bd90      	pop	{r4, r7, pc}
 801253e:	bf00      	nop
 8012540:	20000095 	.word	0x20000095
 8012544:	20001520 	.word	0x20001520
 8012548:	080173f0 	.word	0x080173f0

0801254c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	4603      	mov	r3, r0
 8012554:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012556:	79fb      	ldrb	r3, [r7, #7]
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff ff8d 	bl	8012478 <SD_CheckStatus>
 801255e:	4603      	mov	r3, r0
}
 8012560:	4618      	mov	r0, r3
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b08a      	sub	sp, #40	@ 0x28
 801256c:	af00      	add	r7, sp, #0
 801256e:	60b9      	str	r1, [r7, #8]
 8012570:	607a      	str	r2, [r7, #4]
 8012572:	603b      	str	r3, [r7, #0]
 8012574:	4603      	mov	r3, r0
 8012576:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012578:	2301      	movs	r3, #1
 801257a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801257e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8012582:	f7ff ff5b 	bl	801243c <SD_CheckStatusWithTimeout>
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	da02      	bge.n	8012592 <SD_read+0x2a>
  {
    return res;
 801258c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012590:	e032      	b.n	80125f8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012592:	683a      	ldr	r2, [r7, #0]
 8012594:	6879      	ldr	r1, [r7, #4]
 8012596:	68b8      	ldr	r0, [r7, #8]
 8012598:	f7ff feb0 	bl	80122fc <BSP_SD_ReadBlocks_DMA>
 801259c:	4603      	mov	r3, r0
 801259e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 80125a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d124      	bne.n	80125f4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80125aa:	4b15      	ldr	r3, [pc, #84]	@ (8012600 <SD_read+0x98>)
 80125ac:	6819      	ldr	r1, [r3, #0]
 80125ae:	f107 0314 	add.w	r3, r7, #20
 80125b2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80125b6:	4618      	mov	r0, r3
 80125b8:	f000 fc1e 	bl	8012df8 <osMessageGet>

    if (event.status == osEventMessage)
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	2b10      	cmp	r3, #16
 80125c0:	d118      	bne.n	80125f4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d115      	bne.n	80125f4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80125c8:	f000 fa5c 	bl	8012a84 <osKernelSysTick>
 80125cc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80125ce:	e008      	b.n	80125e2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80125d0:	f7ff fec8 	bl	8012364 <BSP_SD_GetCardState>
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d103      	bne.n	80125e2 <SD_read+0x7a>
              {
                res = RES_OK;
 80125da:	2300      	movs	r3, #0
 80125dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80125e0:	e008      	b.n	80125f4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80125e2:	f000 fa4f 	bl	8012a84 <osKernelSysTick>
 80125e6:	4602      	mov	r2, r0
 80125e8:	6a3b      	ldr	r3, [r7, #32]
 80125ea:	1ad3      	subs	r3, r2, r3
 80125ec:	f247 522f 	movw	r2, #29999	@ 0x752f
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d9ed      	bls.n	80125d0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80125f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3728      	adds	r7, #40	@ 0x28
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	20001520 	.word	0x20001520

08012604 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08a      	sub	sp, #40	@ 0x28
 8012608:	af00      	add	r7, sp, #0
 801260a:	60b9      	str	r1, [r7, #8]
 801260c:	607a      	str	r2, [r7, #4]
 801260e:	603b      	str	r3, [r7, #0]
 8012610:	4603      	mov	r3, r0
 8012612:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012614:	2301      	movs	r3, #1
 8012616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801261a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801261e:	f7ff ff0d 	bl	801243c <SD_CheckStatusWithTimeout>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	da02      	bge.n	801262e <SD_write+0x2a>
  {
    return res;
 8012628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801262c:	e02e      	b.n	801268c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801262e:	683a      	ldr	r2, [r7, #0]
 8012630:	6879      	ldr	r1, [r7, #4]
 8012632:	68b8      	ldr	r0, [r7, #8]
 8012634:	f7ff fe7c 	bl	8012330 <BSP_SD_WriteBlocks_DMA>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	d124      	bne.n	8012688 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801263e:	4b15      	ldr	r3, [pc, #84]	@ (8012694 <SD_write+0x90>)
 8012640:	6819      	ldr	r1, [r3, #0]
 8012642:	f107 0314 	add.w	r3, r7, #20
 8012646:	f247 5230 	movw	r2, #30000	@ 0x7530
 801264a:	4618      	mov	r0, r3
 801264c:	f000 fbd4 	bl	8012df8 <osMessageGet>

    if (event.status == osEventMessage)
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	2b10      	cmp	r3, #16
 8012654:	d118      	bne.n	8012688 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	2b02      	cmp	r3, #2
 801265a:	d115      	bne.n	8012688 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 801265c:	f000 fa12 	bl	8012a84 <osKernelSysTick>
 8012660:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012662:	e008      	b.n	8012676 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012664:	f7ff fe7e 	bl	8012364 <BSP_SD_GetCardState>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d103      	bne.n	8012676 <SD_write+0x72>
          {
            res = RES_OK;
 801266e:	2300      	movs	r3, #0
 8012670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012674:	e008      	b.n	8012688 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012676:	f000 fa05 	bl	8012a84 <osKernelSysTick>
 801267a:	4602      	mov	r2, r0
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	f247 522f 	movw	r2, #29999	@ 0x752f
 8012684:	4293      	cmp	r3, r2
 8012686:	d9ed      	bls.n	8012664 <SD_write+0x60>
    }

  }
#endif

  return res;
 8012688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801268c:	4618      	mov	r0, r3
 801268e:	3728      	adds	r7, #40	@ 0x28
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	20001520 	.word	0x20001520

08012698 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b08c      	sub	sp, #48	@ 0x30
 801269c:	af00      	add	r7, sp, #0
 801269e:	4603      	mov	r3, r0
 80126a0:	603a      	str	r2, [r7, #0]
 80126a2:	71fb      	strb	r3, [r7, #7]
 80126a4:	460b      	mov	r3, r1
 80126a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80126a8:	2301      	movs	r3, #1
 80126aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80126ae:	4b25      	ldr	r3, [pc, #148]	@ (8012744 <SD_ioctl+0xac>)
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	f003 0301 	and.w	r3, r3, #1
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d001      	beq.n	80126c0 <SD_ioctl+0x28>
 80126bc:	2303      	movs	r3, #3
 80126be:	e03c      	b.n	801273a <SD_ioctl+0xa2>

  switch (cmd)
 80126c0:	79bb      	ldrb	r3, [r7, #6]
 80126c2:	2b03      	cmp	r3, #3
 80126c4:	d834      	bhi.n	8012730 <SD_ioctl+0x98>
 80126c6:	a201      	add	r2, pc, #4	@ (adr r2, 80126cc <SD_ioctl+0x34>)
 80126c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126cc:	080126dd 	.word	0x080126dd
 80126d0:	080126e5 	.word	0x080126e5
 80126d4:	080126fd 	.word	0x080126fd
 80126d8:	08012717 	.word	0x08012717
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80126dc:	2300      	movs	r3, #0
 80126de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80126e2:	e028      	b.n	8012736 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80126e4:	f107 030c 	add.w	r3, r7, #12
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7ff fe4b 	bl	8012384 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80126ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80126f4:	2300      	movs	r3, #0
 80126f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80126fa:	e01c      	b.n	8012736 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80126fc:	f107 030c 	add.w	r3, r7, #12
 8012700:	4618      	mov	r0, r3
 8012702:	f7ff fe3f 	bl	8012384 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012708:	b29a      	uxth	r2, r3
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801270e:	2300      	movs	r3, #0
 8012710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012714:	e00f      	b.n	8012736 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012716:	f107 030c 	add.w	r3, r7, #12
 801271a:	4618      	mov	r0, r3
 801271c:	f7ff fe32 	bl	8012384 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012722:	0a5a      	lsrs	r2, r3, #9
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012728:	2300      	movs	r3, #0
 801272a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801272e:	e002      	b.n	8012736 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012730:	2304      	movs	r3, #4
 8012732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012736:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801273a:	4618      	mov	r0, r3
 801273c:	3730      	adds	r7, #48	@ 0x30
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	20000095 	.word	0x20000095

08012748 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 801274c:	4b04      	ldr	r3, [pc, #16]	@ (8012760 <BSP_SD_WriteCpltCallback+0x18>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2200      	movs	r2, #0
 8012752:	2102      	movs	r1, #2
 8012754:	4618      	mov	r0, r3
 8012756:	f000 fb0f 	bl	8012d78 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801275a:	bf00      	nop
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	20001520 	.word	0x20001520

08012764 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8012768:	4b04      	ldr	r3, [pc, #16]	@ (801277c <BSP_SD_ReadCpltCallback+0x18>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2200      	movs	r2, #0
 801276e:	2101      	movs	r1, #1
 8012770:	4618      	mov	r0, r3
 8012772:	f000 fb01 	bl	8012d78 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8012776:	bf00      	nop
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	20001520 	.word	0x20001520

08012780 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	4603      	mov	r3, r0
 8012788:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801278a:	79fb      	ldrb	r3, [r7, #7]
 801278c:	4a08      	ldr	r2, [pc, #32]	@ (80127b0 <disk_status+0x30>)
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	4413      	add	r3, r2
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	79fa      	ldrb	r2, [r7, #7]
 8012798:	4905      	ldr	r1, [pc, #20]	@ (80127b0 <disk_status+0x30>)
 801279a:	440a      	add	r2, r1
 801279c:	7a12      	ldrb	r2, [r2, #8]
 801279e:	4610      	mov	r0, r2
 80127a0:	4798      	blx	r3
 80127a2:	4603      	mov	r3, r0
 80127a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80127a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	20001524 	.word	0x20001524

080127b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	4603      	mov	r3, r0
 80127bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80127be:	2300      	movs	r3, #0
 80127c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80127c2:	79fb      	ldrb	r3, [r7, #7]
 80127c4:	4a0d      	ldr	r2, [pc, #52]	@ (80127fc <disk_initialize+0x48>)
 80127c6:	5cd3      	ldrb	r3, [r2, r3]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d111      	bne.n	80127f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80127cc:	79fb      	ldrb	r3, [r7, #7]
 80127ce:	4a0b      	ldr	r2, [pc, #44]	@ (80127fc <disk_initialize+0x48>)
 80127d0:	2101      	movs	r1, #1
 80127d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80127d4:	79fb      	ldrb	r3, [r7, #7]
 80127d6:	4a09      	ldr	r2, [pc, #36]	@ (80127fc <disk_initialize+0x48>)
 80127d8:	009b      	lsls	r3, r3, #2
 80127da:	4413      	add	r3, r2
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	79fa      	ldrb	r2, [r7, #7]
 80127e2:	4906      	ldr	r1, [pc, #24]	@ (80127fc <disk_initialize+0x48>)
 80127e4:	440a      	add	r2, r1
 80127e6:	7a12      	ldrb	r2, [r2, #8]
 80127e8:	4610      	mov	r0, r2
 80127ea:	4798      	blx	r3
 80127ec:	4603      	mov	r3, r0
 80127ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80127f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	20001524 	.word	0x20001524

08012800 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012800:	b590      	push	{r4, r7, lr}
 8012802:	b087      	sub	sp, #28
 8012804:	af00      	add	r7, sp, #0
 8012806:	60b9      	str	r1, [r7, #8]
 8012808:	607a      	str	r2, [r7, #4]
 801280a:	603b      	str	r3, [r7, #0]
 801280c:	4603      	mov	r3, r0
 801280e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012810:	7bfb      	ldrb	r3, [r7, #15]
 8012812:	4a0a      	ldr	r2, [pc, #40]	@ (801283c <disk_read+0x3c>)
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	4413      	add	r3, r2
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	689c      	ldr	r4, [r3, #8]
 801281c:	7bfb      	ldrb	r3, [r7, #15]
 801281e:	4a07      	ldr	r2, [pc, #28]	@ (801283c <disk_read+0x3c>)
 8012820:	4413      	add	r3, r2
 8012822:	7a18      	ldrb	r0, [r3, #8]
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	68b9      	ldr	r1, [r7, #8]
 801282a:	47a0      	blx	r4
 801282c:	4603      	mov	r3, r0
 801282e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012830:	7dfb      	ldrb	r3, [r7, #23]
}
 8012832:	4618      	mov	r0, r3
 8012834:	371c      	adds	r7, #28
 8012836:	46bd      	mov	sp, r7
 8012838:	bd90      	pop	{r4, r7, pc}
 801283a:	bf00      	nop
 801283c:	20001524 	.word	0x20001524

08012840 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012840:	b590      	push	{r4, r7, lr}
 8012842:	b087      	sub	sp, #28
 8012844:	af00      	add	r7, sp, #0
 8012846:	60b9      	str	r1, [r7, #8]
 8012848:	607a      	str	r2, [r7, #4]
 801284a:	603b      	str	r3, [r7, #0]
 801284c:	4603      	mov	r3, r0
 801284e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012850:	7bfb      	ldrb	r3, [r7, #15]
 8012852:	4a0a      	ldr	r2, [pc, #40]	@ (801287c <disk_write+0x3c>)
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	4413      	add	r3, r2
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	68dc      	ldr	r4, [r3, #12]
 801285c:	7bfb      	ldrb	r3, [r7, #15]
 801285e:	4a07      	ldr	r2, [pc, #28]	@ (801287c <disk_write+0x3c>)
 8012860:	4413      	add	r3, r2
 8012862:	7a18      	ldrb	r0, [r3, #8]
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	68b9      	ldr	r1, [r7, #8]
 801286a:	47a0      	blx	r4
 801286c:	4603      	mov	r3, r0
 801286e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012870:	7dfb      	ldrb	r3, [r7, #23]
}
 8012872:	4618      	mov	r0, r3
 8012874:	371c      	adds	r7, #28
 8012876:	46bd      	mov	sp, r7
 8012878:	bd90      	pop	{r4, r7, pc}
 801287a:	bf00      	nop
 801287c:	20001524 	.word	0x20001524

08012880 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	4603      	mov	r3, r0
 8012888:	603a      	str	r2, [r7, #0]
 801288a:	71fb      	strb	r3, [r7, #7]
 801288c:	460b      	mov	r3, r1
 801288e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012890:	79fb      	ldrb	r3, [r7, #7]
 8012892:	4a09      	ldr	r2, [pc, #36]	@ (80128b8 <disk_ioctl+0x38>)
 8012894:	009b      	lsls	r3, r3, #2
 8012896:	4413      	add	r3, r2
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	691b      	ldr	r3, [r3, #16]
 801289c:	79fa      	ldrb	r2, [r7, #7]
 801289e:	4906      	ldr	r1, [pc, #24]	@ (80128b8 <disk_ioctl+0x38>)
 80128a0:	440a      	add	r2, r1
 80128a2:	7a10      	ldrb	r0, [r2, #8]
 80128a4:	79b9      	ldrb	r1, [r7, #6]
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	4798      	blx	r3
 80128aa:	4603      	mov	r3, r0
 80128ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80128ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3710      	adds	r7, #16
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	20001524 	.word	0x20001524

080128bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80128bc:	b480      	push	{r7}
 80128be:	b087      	sub	sp, #28
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	4613      	mov	r3, r2
 80128c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80128ca:	2301      	movs	r3, #1
 80128cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80128ce:	2300      	movs	r3, #0
 80128d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80128d2:	4b1f      	ldr	r3, [pc, #124]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 80128d4:	7a5b      	ldrb	r3, [r3, #9]
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d131      	bne.n	8012940 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80128dc:	4b1c      	ldr	r3, [pc, #112]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 80128de:	7a5b      	ldrb	r3, [r3, #9]
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	461a      	mov	r2, r3
 80128e4:	4b1a      	ldr	r3, [pc, #104]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 80128e6:	2100      	movs	r1, #0
 80128e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80128ea:	4b19      	ldr	r3, [pc, #100]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 80128ec:	7a5b      	ldrb	r3, [r3, #9]
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	4a17      	ldr	r2, [pc, #92]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	4413      	add	r3, r2
 80128f6:	68fa      	ldr	r2, [r7, #12]
 80128f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80128fa:	4b15      	ldr	r3, [pc, #84]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 80128fc:	7a5b      	ldrb	r3, [r3, #9]
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	461a      	mov	r2, r3
 8012902:	4b13      	ldr	r3, [pc, #76]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 8012904:	4413      	add	r3, r2
 8012906:	79fa      	ldrb	r2, [r7, #7]
 8012908:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801290a:	4b11      	ldr	r3, [pc, #68]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 801290c:	7a5b      	ldrb	r3, [r3, #9]
 801290e:	b2db      	uxtb	r3, r3
 8012910:	1c5a      	adds	r2, r3, #1
 8012912:	b2d1      	uxtb	r1, r2
 8012914:	4a0e      	ldr	r2, [pc, #56]	@ (8012950 <FATFS_LinkDriverEx+0x94>)
 8012916:	7251      	strb	r1, [r2, #9]
 8012918:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801291a:	7dbb      	ldrb	r3, [r7, #22]
 801291c:	3330      	adds	r3, #48	@ 0x30
 801291e:	b2da      	uxtb	r2, r3
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	3301      	adds	r3, #1
 8012928:	223a      	movs	r2, #58	@ 0x3a
 801292a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	3302      	adds	r3, #2
 8012930:	222f      	movs	r2, #47	@ 0x2f
 8012932:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	3303      	adds	r3, #3
 8012938:	2200      	movs	r2, #0
 801293a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801293c:	2300      	movs	r3, #0
 801293e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012940:	7dfb      	ldrb	r3, [r7, #23]
}
 8012942:	4618      	mov	r0, r3
 8012944:	371c      	adds	r7, #28
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	20001524 	.word	0x20001524

08012954 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801295e:	2200      	movs	r2, #0
 8012960:	6839      	ldr	r1, [r7, #0]
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f7ff ffaa 	bl	80128bc <FATFS_LinkDriverEx>
 8012968:	4603      	mov	r3, r0
}
 801296a:	4618      	mov	r0, r3
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b086      	sub	sp, #24
 8012976:	af00      	add	r7, sp, #0
 8012978:	4603      	mov	r3, r0
 801297a:	6039      	str	r1, [r7, #0]
 801297c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 801297e:	2300      	movs	r3, #0
 8012980:	60fb      	str	r3, [r7, #12]
 8012982:	2300      	movs	r3, #0
 8012984:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8012986:	f107 030c 	add.w	r3, r7, #12
 801298a:	2101      	movs	r1, #1
 801298c:	4618      	mov	r0, r3
 801298e:	f000 f901 	bl	8012b94 <osSemaphoreCreate>
 8012992:	4602      	mov	r2, r0
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	bf14      	ite	ne
 80129a0:	2301      	movne	r3, #1
 80129a2:	2300      	moveq	r3, #0
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	617b      	str	r3, [r7, #20]

    return ret;
 80129a8:	697b      	ldr	r3, [r7, #20]
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3718      	adds	r7, #24
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b082      	sub	sp, #8
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 f9a0 	bl	8012d00 <osSemaphoreDelete>
#endif
    return 1;
 80129c0:	2301      	movs	r3, #1
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b084      	sub	sp, #16
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80129d2:	2300      	movs	r3, #0
 80129d4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80129d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 f90c 	bl	8012bf8 <osSemaphoreWait>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d101      	bne.n	80129ea <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80129e6:	2301      	movs	r3, #1
 80129e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80129ea:	68fb      	ldr	r3, [r7, #12]
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 f949 	bl	8012c94 <osSemaphoreRelease>
#endif
}
 8012a02:	bf00      	nop
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}

08012a0a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012a0a:	b480      	push	{r7}
 8012a0c:	b085      	sub	sp, #20
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	4603      	mov	r3, r0
 8012a12:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012a14:	2300      	movs	r3, #0
 8012a16:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a1c:	2b84      	cmp	r3, #132	@ 0x84
 8012a1e:	d005      	beq.n	8012a2c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012a20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	4413      	add	r3, r2
 8012a28:	3303      	adds	r3, #3
 8012a2a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3714      	adds	r7, #20
 8012a32:	46bd      	mov	sp, r7
 8012a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a38:	4770      	bx	lr

08012a3a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a40:	f3ef 8305 	mrs	r3, IPSR
 8012a44:	607b      	str	r3, [r7, #4]
  return(result);
 8012a46:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	bf14      	ite	ne
 8012a4c:	2301      	movne	r3, #1
 8012a4e:	2300      	moveq	r3, #0
 8012a50:	b2db      	uxtb	r3, r3
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	370c      	adds	r7, #12
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr

08012a5e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012a62:	f001 fe81 	bl	8014768 <vTaskStartScheduler>
  
  return osOK;
 8012a66:	2300      	movs	r3, #0
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012a70:	f002 faf6 	bl	8015060 <xTaskGetSchedulerState>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d101      	bne.n	8012a7e <osKernelRunning+0x12>
    return 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	e000      	b.n	8012a80 <osKernelRunning+0x14>
  else
    return 1;
 8012a7e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012a88:	f7ff ffd7 	bl	8012a3a <inHandlerMode>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d003      	beq.n	8012a9a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012a92:	f001 ff95 	bl	80149c0 <xTaskGetTickCountFromISR>
 8012a96:	4603      	mov	r3, r0
 8012a98:	e002      	b.n	8012aa0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012a9a:	f001 ff81 	bl	80149a0 <xTaskGetTickCount>
 8012a9e:	4603      	mov	r3, r0
  }
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aa6:	b089      	sub	sp, #36	@ 0x24
 8012aa8:	af04      	add	r7, sp, #16
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	695b      	ldr	r3, [r3, #20]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d020      	beq.n	8012af8 <osThreadCreate+0x54>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	699b      	ldr	r3, [r3, #24]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d01c      	beq.n	8012af8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685c      	ldr	r4, [r3, #4]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	691e      	ldr	r6, [r3, #16]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7ff ff9a 	bl	8012a0a <makeFreeRtosPriority>
 8012ad6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	695b      	ldr	r3, [r3, #20]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012ae0:	9202      	str	r2, [sp, #8]
 8012ae2:	9301      	str	r3, [sp, #4]
 8012ae4:	9100      	str	r1, [sp, #0]
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	4632      	mov	r2, r6
 8012aea:	4629      	mov	r1, r5
 8012aec:	4620      	mov	r0, r4
 8012aee:	f001 fa93 	bl	8014018 <xTaskCreateStatic>
 8012af2:	4603      	mov	r3, r0
 8012af4:	60fb      	str	r3, [r7, #12]
 8012af6:	e01c      	b.n	8012b32 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	685c      	ldr	r4, [r3, #4]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012b04:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7ff ff7c 	bl	8012a0a <makeFreeRtosPriority>
 8012b12:	4602      	mov	r2, r0
 8012b14:	f107 030c 	add.w	r3, r7, #12
 8012b18:	9301      	str	r3, [sp, #4]
 8012b1a:	9200      	str	r2, [sp, #0]
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	4632      	mov	r2, r6
 8012b20:	4629      	mov	r1, r5
 8012b22:	4620      	mov	r0, r4
 8012b24:	f001 fade 	bl	80140e4 <xTaskCreate>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d001      	beq.n	8012b32 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	e000      	b.n	8012b34 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012b32:	68fb      	ldr	r3, [r7, #12]
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3714      	adds	r7, #20
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d001      	beq.n	8012b52 <osDelay+0x16>
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	e000      	b.n	8012b54 <osDelay+0x18>
 8012b52:	2301      	movs	r3, #1
 8012b54:	4618      	mov	r0, r3
 8012b56:	f001 fca5 	bl	80144a4 <vTaskDelay>
  
  return osOK;
 8012b5a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3710      	adds	r7, #16
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}

08012b64 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d007      	beq.n	8012b84 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	4619      	mov	r1, r3
 8012b7a:	2001      	movs	r0, #1
 8012b7c:	f000 fbeb 	bl	8013356 <xQueueCreateMutexStatic>
 8012b80:	4603      	mov	r3, r0
 8012b82:	e003      	b.n	8012b8c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012b84:	2001      	movs	r0, #1
 8012b86:	f000 fbce 	bl	8013326 <xQueueCreateMutex>
 8012b8a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3708      	adds	r7, #8
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b086      	sub	sp, #24
 8012b98:	af02      	add	r7, sp, #8
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00f      	beq.n	8012bc6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d10a      	bne.n	8012bc2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	2203      	movs	r2, #3
 8012bb2:	9200      	str	r2, [sp, #0]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	2001      	movs	r0, #1
 8012bba:	f000 fab1 	bl	8013120 <xQueueGenericCreateStatic>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	e016      	b.n	8012bf0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	e014      	b.n	8012bf0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d110      	bne.n	8012bee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012bcc:	2203      	movs	r2, #3
 8012bce:	2100      	movs	r1, #0
 8012bd0:	2001      	movs	r0, #1
 8012bd2:	f000 fb2c 	bl	801322e <xQueueGenericCreate>
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d005      	beq.n	8012bea <osSemaphoreCreate+0x56>
 8012bde:	2300      	movs	r3, #0
 8012be0:	2200      	movs	r2, #0
 8012be2:	2100      	movs	r1, #0
 8012be4:	68f8      	ldr	r0, [r7, #12]
 8012be6:	f000 fbd1 	bl	801338c <xQueueGenericSend>
      return sema;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	e000      	b.n	8012bf0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012bee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3710      	adds	r7, #16
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012c02:	2300      	movs	r3, #0
 8012c04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d101      	bne.n	8012c10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012c0c:	2380      	movs	r3, #128	@ 0x80
 8012c0e:	e03a      	b.n	8012c86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012c10:	2300      	movs	r3, #0
 8012c12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c1a:	d103      	bne.n	8012c24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c20:	60fb      	str	r3, [r7, #12]
 8012c22:	e009      	b.n	8012c38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d006      	beq.n	8012c38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d101      	bne.n	8012c38 <osSemaphoreWait+0x40>
      ticks = 1;
 8012c34:	2301      	movs	r3, #1
 8012c36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012c38:	f7ff feff 	bl	8012a3a <inHandlerMode>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d017      	beq.n	8012c72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012c42:	f107 0308 	add.w	r3, r7, #8
 8012c46:	461a      	mov	r2, r3
 8012c48:	2100      	movs	r1, #0
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 ffe4 	bl	8013c18 <xQueueReceiveFromISR>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	d001      	beq.n	8012c5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8012c56:	23ff      	movs	r3, #255	@ 0xff
 8012c58:	e015      	b.n	8012c86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d011      	beq.n	8012c84 <osSemaphoreWait+0x8c>
 8012c60:	4b0b      	ldr	r3, [pc, #44]	@ (8012c90 <osSemaphoreWait+0x98>)
 8012c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c66:	601a      	str	r2, [r3, #0]
 8012c68:	f3bf 8f4f 	dsb	sy
 8012c6c:	f3bf 8f6f 	isb	sy
 8012c70:	e008      	b.n	8012c84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012c72:	68f9      	ldr	r1, [r7, #12]
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f000 feb7 	bl	80139e8 <xQueueSemaphoreTake>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d001      	beq.n	8012c84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012c80:	23ff      	movs	r3, #255	@ 0xff
 8012c82:	e000      	b.n	8012c86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3710      	adds	r7, #16
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	e000ed04 	.word	0xe000ed04

08012c94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012ca4:	f7ff fec9 	bl	8012a3a <inHandlerMode>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d016      	beq.n	8012cdc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012cae:	f107 0308 	add.w	r3, r7, #8
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 fd16 	bl	80136e6 <xQueueGiveFromISR>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d001      	beq.n	8012cc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012cc0:	23ff      	movs	r3, #255	@ 0xff
 8012cc2:	e017      	b.n	8012cf4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d013      	beq.n	8012cf2 <osSemaphoreRelease+0x5e>
 8012cca:	4b0c      	ldr	r3, [pc, #48]	@ (8012cfc <osSemaphoreRelease+0x68>)
 8012ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cd0:	601a      	str	r2, [r3, #0]
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	f3bf 8f6f 	isb	sy
 8012cda:	e00a      	b.n	8012cf2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012cdc:	2300      	movs	r3, #0
 8012cde:	2200      	movs	r2, #0
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 fb52 	bl	801338c <xQueueGenericSend>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d001      	beq.n	8012cf2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012cee:	23ff      	movs	r3, #255	@ 0xff
 8012cf0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3710      	adds	r7, #16
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	e000ed04 	.word	0xe000ed04

08012d00 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012d08:	f7ff fe97 	bl	8012a3a <inHandlerMode>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d001      	beq.n	8012d16 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012d12:	2382      	movs	r3, #130	@ 0x82
 8012d14:	e003      	b.n	8012d1e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f001 f806 	bl	8013d28 <vQueueDelete>

  return osOK; 
 8012d1c:	2300      	movs	r3, #0
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}

08012d26 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012d26:	b590      	push	{r4, r7, lr}
 8012d28:	b085      	sub	sp, #20
 8012d2a:	af02      	add	r7, sp, #8
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	689b      	ldr	r3, [r3, #8]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d011      	beq.n	8012d5c <osMessageCreate+0x36>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d00d      	beq.n	8012d5c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6818      	ldr	r0, [r3, #0]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6859      	ldr	r1, [r3, #4]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	689a      	ldr	r2, [r3, #8]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	2400      	movs	r4, #0
 8012d52:	9400      	str	r4, [sp, #0]
 8012d54:	f000 f9e4 	bl	8013120 <xQueueGenericCreateStatic>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	e008      	b.n	8012d6e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6818      	ldr	r0, [r3, #0]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	2200      	movs	r2, #0
 8012d66:	4619      	mov	r1, r3
 8012d68:	f000 fa61 	bl	801322e <xQueueGenericCreate>
 8012d6c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	370c      	adds	r7, #12
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd90      	pop	{r4, r7, pc}
	...

08012d78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012d84:	2300      	movs	r3, #0
 8012d86:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d101      	bne.n	8012d96 <osMessagePut+0x1e>
    ticks = 1;
 8012d92:	2301      	movs	r3, #1
 8012d94:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012d96:	f7ff fe50 	bl	8012a3a <inHandlerMode>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d018      	beq.n	8012dd2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012da0:	f107 0210 	add.w	r2, r7, #16
 8012da4:	f107 0108 	add.w	r1, r7, #8
 8012da8:	2300      	movs	r3, #0
 8012daa:	68f8      	ldr	r0, [r7, #12]
 8012dac:	f000 fbf8 	bl	80135a0 <xQueueGenericSendFromISR>
 8012db0:	4603      	mov	r3, r0
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	d001      	beq.n	8012dba <osMessagePut+0x42>
      return osErrorOS;
 8012db6:	23ff      	movs	r3, #255	@ 0xff
 8012db8:	e018      	b.n	8012dec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d014      	beq.n	8012dea <osMessagePut+0x72>
 8012dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8012df4 <osMessagePut+0x7c>)
 8012dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dc6:	601a      	str	r2, [r3, #0]
 8012dc8:	f3bf 8f4f 	dsb	sy
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	e00b      	b.n	8012dea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012dd2:	f107 0108 	add.w	r1, r7, #8
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	697a      	ldr	r2, [r7, #20]
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f000 fad6 	bl	801338c <xQueueGenericSend>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d001      	beq.n	8012dea <osMessagePut+0x72>
      return osErrorOS;
 8012de6:	23ff      	movs	r3, #255	@ 0xff
 8012de8:	e000      	b.n	8012dec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012dea:	2300      	movs	r3, #0
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3718      	adds	r7, #24
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	e000ed04 	.word	0xe000ed04

08012df8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012df8:	b590      	push	{r4, r7, lr}
 8012dfa:	b08b      	sub	sp, #44	@ 0x2c
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	60f8      	str	r0, [r7, #12]
 8012e00:	60b9      	str	r1, [r7, #8]
 8012e02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d10a      	bne.n	8012e28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012e12:	2380      	movs	r3, #128	@ 0x80
 8012e14:	617b      	str	r3, [r7, #20]
    return event;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	461c      	mov	r4, r3
 8012e1a:	f107 0314 	add.w	r3, r7, #20
 8012e1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012e26:	e054      	b.n	8012ed2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e36:	d103      	bne.n	8012e40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012e38:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e3e:	e009      	b.n	8012e54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d006      	beq.n	8012e54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d101      	bne.n	8012e54 <osMessageGet+0x5c>
      ticks = 1;
 8012e50:	2301      	movs	r3, #1
 8012e52:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012e54:	f7ff fdf1 	bl	8012a3a <inHandlerMode>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d01c      	beq.n	8012e98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012e5e:	f107 0220 	add.w	r2, r7, #32
 8012e62:	f107 0314 	add.w	r3, r7, #20
 8012e66:	3304      	adds	r3, #4
 8012e68:	4619      	mov	r1, r3
 8012e6a:	68b8      	ldr	r0, [r7, #8]
 8012e6c:	f000 fed4 	bl	8013c18 <xQueueReceiveFromISR>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d102      	bne.n	8012e7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012e76:	2310      	movs	r3, #16
 8012e78:	617b      	str	r3, [r7, #20]
 8012e7a:	e001      	b.n	8012e80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e80:	6a3b      	ldr	r3, [r7, #32]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d01d      	beq.n	8012ec2 <osMessageGet+0xca>
 8012e86:	4b15      	ldr	r3, [pc, #84]	@ (8012edc <osMessageGet+0xe4>)
 8012e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e8c:	601a      	str	r2, [r3, #0]
 8012e8e:	f3bf 8f4f 	dsb	sy
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	e014      	b.n	8012ec2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012e98:	f107 0314 	add.w	r3, r7, #20
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	68b8      	ldr	r0, [r7, #8]
 8012ea4:	f000 fcb8 	bl	8013818 <xQueueReceive>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d102      	bne.n	8012eb4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012eae:	2310      	movs	r3, #16
 8012eb0:	617b      	str	r3, [r7, #20]
 8012eb2:	e006      	b.n	8012ec2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d101      	bne.n	8012ebe <osMessageGet+0xc6>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	e000      	b.n	8012ec0 <osMessageGet+0xc8>
 8012ebe:	2340      	movs	r3, #64	@ 0x40
 8012ec0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	461c      	mov	r4, r3
 8012ec6:	f107 0314 	add.w	r3, r7, #20
 8012eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	372c      	adds	r7, #44	@ 0x2c
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd90      	pop	{r4, r7, pc}
 8012eda:	bf00      	nop
 8012edc:	e000ed04 	.word	0xe000ed04

08012ee0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b083      	sub	sp, #12
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f103 0208 	add.w	r2, r3, #8
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ef8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f103 0208 	add.w	r2, r3, #8
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f103 0208 	add.w	r2, r3, #8
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2200      	movs	r2, #0
 8012f12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012f14:	bf00      	nop
 8012f16:	370c      	adds	r7, #12
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012f20:	b480      	push	{r7}
 8012f22:	b083      	sub	sp, #12
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012f2e:	bf00      	nop
 8012f30:	370c      	adds	r7, #12
 8012f32:	46bd      	mov	sp, r7
 8012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f38:	4770      	bx	lr

08012f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f3a:	b480      	push	{r7}
 8012f3c:	b085      	sub	sp, #20
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	689a      	ldr	r2, [r3, #8]
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	689b      	ldr	r3, [r3, #8]
 8012f5c:	683a      	ldr	r2, [r7, #0]
 8012f5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	683a      	ldr	r2, [r7, #0]
 8012f64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	1c5a      	adds	r2, r3, #1
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	601a      	str	r2, [r3, #0]
}
 8012f76:	bf00      	nop
 8012f78:	3714      	adds	r7, #20
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr

08012f82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f82:	b480      	push	{r7}
 8012f84:	b085      	sub	sp, #20
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f98:	d103      	bne.n	8012fa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	691b      	ldr	r3, [r3, #16]
 8012f9e:	60fb      	str	r3, [r7, #12]
 8012fa0:	e00c      	b.n	8012fbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	3308      	adds	r3, #8
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	e002      	b.n	8012fb0 <vListInsert+0x2e>
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	60fb      	str	r3, [r7, #12]
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	68ba      	ldr	r2, [r7, #8]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d2f6      	bcs.n	8012faa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	685a      	ldr	r2, [r3, #4]
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	683a      	ldr	r2, [r7, #0]
 8012fca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	683a      	ldr	r2, [r7, #0]
 8012fd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	1c5a      	adds	r2, r3, #1
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	601a      	str	r2, [r3, #0]
}
 8012fe8:	bf00      	nop
 8012fea:	3714      	adds	r7, #20
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr

08012ff4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b085      	sub	sp, #20
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	6892      	ldr	r2, [r2, #8]
 801300a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	689b      	ldr	r3, [r3, #8]
 8013010:	687a      	ldr	r2, [r7, #4]
 8013012:	6852      	ldr	r2, [r2, #4]
 8013014:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	687a      	ldr	r2, [r7, #4]
 801301c:	429a      	cmp	r2, r3
 801301e:	d103      	bne.n	8013028 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	689a      	ldr	r2, [r3, #8]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2200      	movs	r2, #0
 801302c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	1e5a      	subs	r2, r3, #1
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3714      	adds	r7, #20
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr

08013048 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d10d      	bne.n	8013078 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013060:	b672      	cpsid	i
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	b662      	cpsie	i
 8013070:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013072:	bf00      	nop
 8013074:	bf00      	nop
 8013076:	e7fd      	b.n	8013074 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013078:	f002 fb48 	bl	801570c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	681a      	ldr	r2, [r3, #0]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013084:	68f9      	ldr	r1, [r7, #12]
 8013086:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013088:	fb01 f303 	mul.w	r3, r1, r3
 801308c:	441a      	add	r2, r3
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2200      	movs	r2, #0
 8013096:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130a8:	3b01      	subs	r3, #1
 80130aa:	68f9      	ldr	r1, [r7, #12]
 80130ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80130ae:	fb01 f303 	mul.w	r3, r1, r3
 80130b2:	441a      	add	r2, r3
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	22ff      	movs	r2, #255	@ 0xff
 80130bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	22ff      	movs	r2, #255	@ 0xff
 80130c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d114      	bne.n	80130f8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	691b      	ldr	r3, [r3, #16]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d01a      	beq.n	801310c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	3310      	adds	r3, #16
 80130da:	4618      	mov	r0, r3
 80130dc:	f001 fdf0 	bl	8014cc0 <xTaskRemoveFromEventList>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d012      	beq.n	801310c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80130e6:	4b0d      	ldr	r3, [pc, #52]	@ (801311c <xQueueGenericReset+0xd4>)
 80130e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130ec:	601a      	str	r2, [r3, #0]
 80130ee:	f3bf 8f4f 	dsb	sy
 80130f2:	f3bf 8f6f 	isb	sy
 80130f6:	e009      	b.n	801310c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	3310      	adds	r3, #16
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff feef 	bl	8012ee0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	3324      	adds	r3, #36	@ 0x24
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff feea 	bl	8012ee0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801310c:	f002 fb34 	bl	8015778 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013110:	2301      	movs	r3, #1
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	e000ed04 	.word	0xe000ed04

08013120 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013120:	b580      	push	{r7, lr}
 8013122:	b08e      	sub	sp, #56	@ 0x38
 8013124:	af02      	add	r7, sp, #8
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
 801312c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10d      	bne.n	8013150 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8013134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013138:	b672      	cpsid	i
 801313a:	f383 8811 	msr	BASEPRI, r3
 801313e:	f3bf 8f6f 	isb	sy
 8013142:	f3bf 8f4f 	dsb	sy
 8013146:	b662      	cpsie	i
 8013148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801314a:	bf00      	nop
 801314c:	bf00      	nop
 801314e:	e7fd      	b.n	801314c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d10d      	bne.n	8013172 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8013156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801315a:	b672      	cpsid	i
 801315c:	f383 8811 	msr	BASEPRI, r3
 8013160:	f3bf 8f6f 	isb	sy
 8013164:	f3bf 8f4f 	dsb	sy
 8013168:	b662      	cpsie	i
 801316a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801316c:	bf00      	nop
 801316e:	bf00      	nop
 8013170:	e7fd      	b.n	801316e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d002      	beq.n	801317e <xQueueGenericCreateStatic+0x5e>
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <xQueueGenericCreateStatic+0x62>
 801317e:	2301      	movs	r3, #1
 8013180:	e000      	b.n	8013184 <xQueueGenericCreateStatic+0x64>
 8013182:	2300      	movs	r3, #0
 8013184:	2b00      	cmp	r3, #0
 8013186:	d10d      	bne.n	80131a4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8013188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801318c:	b672      	cpsid	i
 801318e:	f383 8811 	msr	BASEPRI, r3
 8013192:	f3bf 8f6f 	isb	sy
 8013196:	f3bf 8f4f 	dsb	sy
 801319a:	b662      	cpsie	i
 801319c:	623b      	str	r3, [r7, #32]
}
 801319e:	bf00      	nop
 80131a0:	bf00      	nop
 80131a2:	e7fd      	b.n	80131a0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d102      	bne.n	80131b0 <xQueueGenericCreateStatic+0x90>
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d101      	bne.n	80131b4 <xQueueGenericCreateStatic+0x94>
 80131b0:	2301      	movs	r3, #1
 80131b2:	e000      	b.n	80131b6 <xQueueGenericCreateStatic+0x96>
 80131b4:	2300      	movs	r3, #0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d10d      	bne.n	80131d6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80131ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131be:	b672      	cpsid	i
 80131c0:	f383 8811 	msr	BASEPRI, r3
 80131c4:	f3bf 8f6f 	isb	sy
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	b662      	cpsie	i
 80131ce:	61fb      	str	r3, [r7, #28]
}
 80131d0:	bf00      	nop
 80131d2:	bf00      	nop
 80131d4:	e7fd      	b.n	80131d2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80131d6:	2348      	movs	r3, #72	@ 0x48
 80131d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	2b48      	cmp	r3, #72	@ 0x48
 80131de:	d00d      	beq.n	80131fc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80131e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131e4:	b672      	cpsid	i
 80131e6:	f383 8811 	msr	BASEPRI, r3
 80131ea:	f3bf 8f6f 	isb	sy
 80131ee:	f3bf 8f4f 	dsb	sy
 80131f2:	b662      	cpsie	i
 80131f4:	61bb      	str	r3, [r7, #24]
}
 80131f6:	bf00      	nop
 80131f8:	bf00      	nop
 80131fa:	e7fd      	b.n	80131f8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80131fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013204:	2b00      	cmp	r3, #0
 8013206:	d00d      	beq.n	8013224 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801320a:	2201      	movs	r2, #1
 801320c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013210:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	4613      	mov	r3, r2
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	68b9      	ldr	r1, [r7, #8]
 801321e:	68f8      	ldr	r0, [r7, #12]
 8013220:	f000 f848 	bl	80132b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013226:	4618      	mov	r0, r3
 8013228:	3730      	adds	r7, #48	@ 0x30
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801322e:	b580      	push	{r7, lr}
 8013230:	b08a      	sub	sp, #40	@ 0x28
 8013232:	af02      	add	r7, sp, #8
 8013234:	60f8      	str	r0, [r7, #12]
 8013236:	60b9      	str	r1, [r7, #8]
 8013238:	4613      	mov	r3, r2
 801323a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d10d      	bne.n	801325e <xQueueGenericCreate+0x30>
	__asm volatile
 8013242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013246:	b672      	cpsid	i
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	b662      	cpsie	i
 8013256:	613b      	str	r3, [r7, #16]
}
 8013258:	bf00      	nop
 801325a:	bf00      	nop
 801325c:	e7fd      	b.n	801325a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d102      	bne.n	801326a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013264:	2300      	movs	r3, #0
 8013266:	61fb      	str	r3, [r7, #28]
 8013268:	e004      	b.n	8013274 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	fb02 f303 	mul.w	r3, r2, r3
 8013272:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	3348      	adds	r3, #72	@ 0x48
 8013278:	4618      	mov	r0, r3
 801327a:	f002 fb75 	bl	8015968 <pvPortMalloc>
 801327e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d011      	beq.n	80132aa <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	3348      	adds	r3, #72	@ 0x48
 801328e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013290:	69bb      	ldr	r3, [r7, #24]
 8013292:	2200      	movs	r2, #0
 8013294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013298:	79fa      	ldrb	r2, [r7, #7]
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	4613      	mov	r3, r2
 80132a0:	697a      	ldr	r2, [r7, #20]
 80132a2:	68b9      	ldr	r1, [r7, #8]
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f000 f805 	bl	80132b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132aa:	69bb      	ldr	r3, [r7, #24]
	}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3720      	adds	r7, #32
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	607a      	str	r2, [r7, #4]
 80132c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d103      	bne.n	80132d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	69ba      	ldr	r2, [r7, #24]
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	e002      	b.n	80132d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	68ba      	ldr	r2, [r7, #8]
 80132e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80132e2:	2101      	movs	r1, #1
 80132e4:	69b8      	ldr	r0, [r7, #24]
 80132e6:	f7ff feaf 	bl	8013048 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80132ea:	bf00      	nop
 80132ec:	3710      	adds	r7, #16
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b082      	sub	sp, #8
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00e      	beq.n	801331e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2200      	movs	r2, #0
 8013304:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2200      	movs	r2, #0
 8013310:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013312:	2300      	movs	r3, #0
 8013314:	2200      	movs	r2, #0
 8013316:	2100      	movs	r1, #0
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 f837 	bl	801338c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801331e:	bf00      	nop
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}

08013326 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013326:	b580      	push	{r7, lr}
 8013328:	b086      	sub	sp, #24
 801332a:	af00      	add	r7, sp, #0
 801332c:	4603      	mov	r3, r0
 801332e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013330:	2301      	movs	r3, #1
 8013332:	617b      	str	r3, [r7, #20]
 8013334:	2300      	movs	r3, #0
 8013336:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013338:	79fb      	ldrb	r3, [r7, #7]
 801333a:	461a      	mov	r2, r3
 801333c:	6939      	ldr	r1, [r7, #16]
 801333e:	6978      	ldr	r0, [r7, #20]
 8013340:	f7ff ff75 	bl	801322e <xQueueGenericCreate>
 8013344:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013346:	68f8      	ldr	r0, [r7, #12]
 8013348:	f7ff ffd3 	bl	80132f2 <prvInitialiseMutex>

		return xNewQueue;
 801334c:	68fb      	ldr	r3, [r7, #12]
	}
 801334e:	4618      	mov	r0, r3
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013356:	b580      	push	{r7, lr}
 8013358:	b088      	sub	sp, #32
 801335a:	af02      	add	r7, sp, #8
 801335c:	4603      	mov	r3, r0
 801335e:	6039      	str	r1, [r7, #0]
 8013360:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013362:	2301      	movs	r3, #1
 8013364:	617b      	str	r3, [r7, #20]
 8013366:	2300      	movs	r3, #0
 8013368:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801336a:	79fb      	ldrb	r3, [r7, #7]
 801336c:	9300      	str	r3, [sp, #0]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	2200      	movs	r2, #0
 8013372:	6939      	ldr	r1, [r7, #16]
 8013374:	6978      	ldr	r0, [r7, #20]
 8013376:	f7ff fed3 	bl	8013120 <xQueueGenericCreateStatic>
 801337a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f7ff ffb8 	bl	80132f2 <prvInitialiseMutex>

		return xNewQueue;
 8013382:	68fb      	ldr	r3, [r7, #12]
	}
 8013384:	4618      	mov	r0, r3
 8013386:	3718      	adds	r7, #24
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b08e      	sub	sp, #56	@ 0x38
 8013390:	af00      	add	r7, sp, #0
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801339a:	2300      	movs	r3, #0
 801339c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80133a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d10d      	bne.n	80133c4 <xQueueGenericSend+0x38>
	__asm volatile
 80133a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ac:	b672      	cpsid	i
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	b662      	cpsie	i
 80133bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80133be:	bf00      	nop
 80133c0:	bf00      	nop
 80133c2:	e7fd      	b.n	80133c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d103      	bne.n	80133d2 <xQueueGenericSend+0x46>
 80133ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d101      	bne.n	80133d6 <xQueueGenericSend+0x4a>
 80133d2:	2301      	movs	r3, #1
 80133d4:	e000      	b.n	80133d8 <xQueueGenericSend+0x4c>
 80133d6:	2300      	movs	r3, #0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d10d      	bne.n	80133f8 <xQueueGenericSend+0x6c>
	__asm volatile
 80133dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133e0:	b672      	cpsid	i
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	b662      	cpsie	i
 80133f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80133f2:	bf00      	nop
 80133f4:	bf00      	nop
 80133f6:	e7fd      	b.n	80133f4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	2b02      	cmp	r3, #2
 80133fc:	d103      	bne.n	8013406 <xQueueGenericSend+0x7a>
 80133fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013402:	2b01      	cmp	r3, #1
 8013404:	d101      	bne.n	801340a <xQueueGenericSend+0x7e>
 8013406:	2301      	movs	r3, #1
 8013408:	e000      	b.n	801340c <xQueueGenericSend+0x80>
 801340a:	2300      	movs	r3, #0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d10d      	bne.n	801342c <xQueueGenericSend+0xa0>
	__asm volatile
 8013410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013414:	b672      	cpsid	i
 8013416:	f383 8811 	msr	BASEPRI, r3
 801341a:	f3bf 8f6f 	isb	sy
 801341e:	f3bf 8f4f 	dsb	sy
 8013422:	b662      	cpsie	i
 8013424:	623b      	str	r3, [r7, #32]
}
 8013426:	bf00      	nop
 8013428:	bf00      	nop
 801342a:	e7fd      	b.n	8013428 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801342c:	f001 fe18 	bl	8015060 <xTaskGetSchedulerState>
 8013430:	4603      	mov	r3, r0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d102      	bne.n	801343c <xQueueGenericSend+0xb0>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d101      	bne.n	8013440 <xQueueGenericSend+0xb4>
 801343c:	2301      	movs	r3, #1
 801343e:	e000      	b.n	8013442 <xQueueGenericSend+0xb6>
 8013440:	2300      	movs	r3, #0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d10d      	bne.n	8013462 <xQueueGenericSend+0xd6>
	__asm volatile
 8013446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801344a:	b672      	cpsid	i
 801344c:	f383 8811 	msr	BASEPRI, r3
 8013450:	f3bf 8f6f 	isb	sy
 8013454:	f3bf 8f4f 	dsb	sy
 8013458:	b662      	cpsie	i
 801345a:	61fb      	str	r3, [r7, #28]
}
 801345c:	bf00      	nop
 801345e:	bf00      	nop
 8013460:	e7fd      	b.n	801345e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013462:	f002 f953 	bl	801570c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801346e:	429a      	cmp	r2, r3
 8013470:	d302      	bcc.n	8013478 <xQueueGenericSend+0xec>
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	2b02      	cmp	r3, #2
 8013476:	d129      	bne.n	80134cc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013478:	683a      	ldr	r2, [r7, #0]
 801347a:	68b9      	ldr	r1, [r7, #8]
 801347c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801347e:	f000 fc91 	bl	8013da4 <prvCopyDataToQueue>
 8013482:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013488:	2b00      	cmp	r3, #0
 801348a:	d010      	beq.n	80134ae <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801348e:	3324      	adds	r3, #36	@ 0x24
 8013490:	4618      	mov	r0, r3
 8013492:	f001 fc15 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013496:	4603      	mov	r3, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	d013      	beq.n	80134c4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801349c:	4b3f      	ldr	r3, [pc, #252]	@ (801359c <xQueueGenericSend+0x210>)
 801349e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134a2:	601a      	str	r2, [r3, #0]
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	e00a      	b.n	80134c4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80134ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d007      	beq.n	80134c4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80134b4:	4b39      	ldr	r3, [pc, #228]	@ (801359c <xQueueGenericSend+0x210>)
 80134b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134ba:	601a      	str	r2, [r3, #0]
 80134bc:	f3bf 8f4f 	dsb	sy
 80134c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80134c4:	f002 f958 	bl	8015778 <vPortExitCritical>
				return pdPASS;
 80134c8:	2301      	movs	r3, #1
 80134ca:	e063      	b.n	8013594 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d103      	bne.n	80134da <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80134d2:	f002 f951 	bl	8015778 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80134d6:	2300      	movs	r3, #0
 80134d8:	e05c      	b.n	8013594 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80134da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d106      	bne.n	80134ee <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80134e0:	f107 0314 	add.w	r3, r7, #20
 80134e4:	4618      	mov	r0, r3
 80134e6:	f001 fc51 	bl	8014d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80134ea:	2301      	movs	r3, #1
 80134ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80134ee:	f002 f943 	bl	8015778 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80134f2:	f001 f9a7 	bl	8014844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80134f6:	f002 f909 	bl	801570c <vPortEnterCritical>
 80134fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013500:	b25b      	sxtb	r3, r3
 8013502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013506:	d103      	bne.n	8013510 <xQueueGenericSend+0x184>
 8013508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801350a:	2200      	movs	r2, #0
 801350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013516:	b25b      	sxtb	r3, r3
 8013518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801351c:	d103      	bne.n	8013526 <xQueueGenericSend+0x19a>
 801351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013520:	2200      	movs	r2, #0
 8013522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013526:	f002 f927 	bl	8015778 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801352a:	1d3a      	adds	r2, r7, #4
 801352c:	f107 0314 	add.w	r3, r7, #20
 8013530:	4611      	mov	r1, r2
 8013532:	4618      	mov	r0, r3
 8013534:	f001 fc40 	bl	8014db8 <xTaskCheckForTimeOut>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d124      	bne.n	8013588 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801353e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013540:	f000 fd28 	bl	8013f94 <prvIsQueueFull>
 8013544:	4603      	mov	r3, r0
 8013546:	2b00      	cmp	r3, #0
 8013548:	d018      	beq.n	801357c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354c:	3310      	adds	r3, #16
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	4611      	mov	r1, r2
 8013552:	4618      	mov	r0, r3
 8013554:	f001 fb8c 	bl	8014c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801355a:	f000 fcb3 	bl	8013ec4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801355e:	f001 f97f 	bl	8014860 <xTaskResumeAll>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	f47f af7c 	bne.w	8013462 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801356a:	4b0c      	ldr	r3, [pc, #48]	@ (801359c <xQueueGenericSend+0x210>)
 801356c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013570:	601a      	str	r2, [r3, #0]
 8013572:	f3bf 8f4f 	dsb	sy
 8013576:	f3bf 8f6f 	isb	sy
 801357a:	e772      	b.n	8013462 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801357c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801357e:	f000 fca1 	bl	8013ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013582:	f001 f96d 	bl	8014860 <xTaskResumeAll>
 8013586:	e76c      	b.n	8013462 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801358a:	f000 fc9b 	bl	8013ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801358e:	f001 f967 	bl	8014860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013592:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013594:	4618      	mov	r0, r3
 8013596:	3738      	adds	r7, #56	@ 0x38
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	e000ed04 	.word	0xe000ed04

080135a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b08e      	sub	sp, #56	@ 0x38
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
 80135ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80135b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d10d      	bne.n	80135d4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80135b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135bc:	b672      	cpsid	i
 80135be:	f383 8811 	msr	BASEPRI, r3
 80135c2:	f3bf 8f6f 	isb	sy
 80135c6:	f3bf 8f4f 	dsb	sy
 80135ca:	b662      	cpsie	i
 80135cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80135ce:	bf00      	nop
 80135d0:	bf00      	nop
 80135d2:	e7fd      	b.n	80135d0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d103      	bne.n	80135e2 <xQueueGenericSendFromISR+0x42>
 80135da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d101      	bne.n	80135e6 <xQueueGenericSendFromISR+0x46>
 80135e2:	2301      	movs	r3, #1
 80135e4:	e000      	b.n	80135e8 <xQueueGenericSendFromISR+0x48>
 80135e6:	2300      	movs	r3, #0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d10d      	bne.n	8013608 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80135ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f0:	b672      	cpsid	i
 80135f2:	f383 8811 	msr	BASEPRI, r3
 80135f6:	f3bf 8f6f 	isb	sy
 80135fa:	f3bf 8f4f 	dsb	sy
 80135fe:	b662      	cpsie	i
 8013600:	623b      	str	r3, [r7, #32]
}
 8013602:	bf00      	nop
 8013604:	bf00      	nop
 8013606:	e7fd      	b.n	8013604 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	2b02      	cmp	r3, #2
 801360c:	d103      	bne.n	8013616 <xQueueGenericSendFromISR+0x76>
 801360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013612:	2b01      	cmp	r3, #1
 8013614:	d101      	bne.n	801361a <xQueueGenericSendFromISR+0x7a>
 8013616:	2301      	movs	r3, #1
 8013618:	e000      	b.n	801361c <xQueueGenericSendFromISR+0x7c>
 801361a:	2300      	movs	r3, #0
 801361c:	2b00      	cmp	r3, #0
 801361e:	d10d      	bne.n	801363c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8013620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013624:	b672      	cpsid	i
 8013626:	f383 8811 	msr	BASEPRI, r3
 801362a:	f3bf 8f6f 	isb	sy
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	b662      	cpsie	i
 8013634:	61fb      	str	r3, [r7, #28]
}
 8013636:	bf00      	nop
 8013638:	bf00      	nop
 801363a:	e7fd      	b.n	8013638 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801363c:	f002 f94e 	bl	80158dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013640:	f3ef 8211 	mrs	r2, BASEPRI
 8013644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013648:	b672      	cpsid	i
 801364a:	f383 8811 	msr	BASEPRI, r3
 801364e:	f3bf 8f6f 	isb	sy
 8013652:	f3bf 8f4f 	dsb	sy
 8013656:	b662      	cpsie	i
 8013658:	61ba      	str	r2, [r7, #24]
 801365a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801365c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801365e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013668:	429a      	cmp	r2, r3
 801366a:	d302      	bcc.n	8013672 <xQueueGenericSendFromISR+0xd2>
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	2b02      	cmp	r3, #2
 8013670:	d12c      	bne.n	80136cc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013678:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801367c:	683a      	ldr	r2, [r7, #0]
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013682:	f000 fb8f 	bl	8013da4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013686:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801368e:	d112      	bne.n	80136b6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013694:	2b00      	cmp	r3, #0
 8013696:	d016      	beq.n	80136c6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801369a:	3324      	adds	r3, #36	@ 0x24
 801369c:	4618      	mov	r0, r3
 801369e:	f001 fb0f 	bl	8014cc0 <xTaskRemoveFromEventList>
 80136a2:	4603      	mov	r3, r0
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d00e      	beq.n	80136c6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d00b      	beq.n	80136c6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2201      	movs	r2, #1
 80136b2:	601a      	str	r2, [r3, #0]
 80136b4:	e007      	b.n	80136c6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80136b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80136ba:	3301      	adds	r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	b25a      	sxtb	r2, r3
 80136c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80136c6:	2301      	movs	r3, #1
 80136c8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80136ca:	e001      	b.n	80136d0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80136cc:	2300      	movs	r3, #0
 80136ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80136d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80136da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3738      	adds	r7, #56	@ 0x38
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b08e      	sub	sp, #56	@ 0x38
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
 80136ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80136f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d10d      	bne.n	8013716 <xQueueGiveFromISR+0x30>
	__asm volatile
 80136fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136fe:	b672      	cpsid	i
 8013700:	f383 8811 	msr	BASEPRI, r3
 8013704:	f3bf 8f6f 	isb	sy
 8013708:	f3bf 8f4f 	dsb	sy
 801370c:	b662      	cpsie	i
 801370e:	623b      	str	r3, [r7, #32]
}
 8013710:	bf00      	nop
 8013712:	bf00      	nop
 8013714:	e7fd      	b.n	8013712 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801371a:	2b00      	cmp	r3, #0
 801371c:	d00d      	beq.n	801373a <xQueueGiveFromISR+0x54>
	__asm volatile
 801371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013722:	b672      	cpsid	i
 8013724:	f383 8811 	msr	BASEPRI, r3
 8013728:	f3bf 8f6f 	isb	sy
 801372c:	f3bf 8f4f 	dsb	sy
 8013730:	b662      	cpsie	i
 8013732:	61fb      	str	r3, [r7, #28]
}
 8013734:	bf00      	nop
 8013736:	bf00      	nop
 8013738:	e7fd      	b.n	8013736 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d103      	bne.n	801374a <xQueueGiveFromISR+0x64>
 8013742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d101      	bne.n	801374e <xQueueGiveFromISR+0x68>
 801374a:	2301      	movs	r3, #1
 801374c:	e000      	b.n	8013750 <xQueueGiveFromISR+0x6a>
 801374e:	2300      	movs	r3, #0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d10d      	bne.n	8013770 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8013754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013758:	b672      	cpsid	i
 801375a:	f383 8811 	msr	BASEPRI, r3
 801375e:	f3bf 8f6f 	isb	sy
 8013762:	f3bf 8f4f 	dsb	sy
 8013766:	b662      	cpsie	i
 8013768:	61bb      	str	r3, [r7, #24]
}
 801376a:	bf00      	nop
 801376c:	bf00      	nop
 801376e:	e7fd      	b.n	801376c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013770:	f002 f8b4 	bl	80158dc <vPortValidateInterruptPriority>
	__asm volatile
 8013774:	f3ef 8211 	mrs	r2, BASEPRI
 8013778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801377c:	b672      	cpsid	i
 801377e:	f383 8811 	msr	BASEPRI, r3
 8013782:	f3bf 8f6f 	isb	sy
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	b662      	cpsie	i
 801378c:	617a      	str	r2, [r7, #20]
 801378e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013790:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013792:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013798:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801379e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d22b      	bcs.n	80137fc <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80137a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80137aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80137ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b0:	1c5a      	adds	r2, r3, #1
 80137b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137b4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80137b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80137ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137be:	d112      	bne.n	80137e6 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d016      	beq.n	80137f6 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ca:	3324      	adds	r3, #36	@ 0x24
 80137cc:	4618      	mov	r0, r3
 80137ce:	f001 fa77 	bl	8014cc0 <xTaskRemoveFromEventList>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d00e      	beq.n	80137f6 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00b      	beq.n	80137f6 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	2201      	movs	r2, #1
 80137e2:	601a      	str	r2, [r3, #0]
 80137e4:	e007      	b.n	80137f6 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80137e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137ea:	3301      	adds	r3, #1
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	b25a      	sxtb	r2, r3
 80137f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80137f6:	2301      	movs	r3, #1
 80137f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80137fa:	e001      	b.n	8013800 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80137fc:	2300      	movs	r3, #0
 80137fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8013800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013802:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	f383 8811 	msr	BASEPRI, r3
}
 801380a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801380c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801380e:	4618      	mov	r0, r3
 8013810:	3738      	adds	r7, #56	@ 0x38
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
	...

08013818 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b08c      	sub	sp, #48	@ 0x30
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013824:	2300      	movs	r3, #0
 8013826:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801382e:	2b00      	cmp	r3, #0
 8013830:	d10d      	bne.n	801384e <xQueueReceive+0x36>
	__asm volatile
 8013832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013836:	b672      	cpsid	i
 8013838:	f383 8811 	msr	BASEPRI, r3
 801383c:	f3bf 8f6f 	isb	sy
 8013840:	f3bf 8f4f 	dsb	sy
 8013844:	b662      	cpsie	i
 8013846:	623b      	str	r3, [r7, #32]
}
 8013848:	bf00      	nop
 801384a:	bf00      	nop
 801384c:	e7fd      	b.n	801384a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d103      	bne.n	801385c <xQueueReceive+0x44>
 8013854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013858:	2b00      	cmp	r3, #0
 801385a:	d101      	bne.n	8013860 <xQueueReceive+0x48>
 801385c:	2301      	movs	r3, #1
 801385e:	e000      	b.n	8013862 <xQueueReceive+0x4a>
 8013860:	2300      	movs	r3, #0
 8013862:	2b00      	cmp	r3, #0
 8013864:	d10d      	bne.n	8013882 <xQueueReceive+0x6a>
	__asm volatile
 8013866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801386a:	b672      	cpsid	i
 801386c:	f383 8811 	msr	BASEPRI, r3
 8013870:	f3bf 8f6f 	isb	sy
 8013874:	f3bf 8f4f 	dsb	sy
 8013878:	b662      	cpsie	i
 801387a:	61fb      	str	r3, [r7, #28]
}
 801387c:	bf00      	nop
 801387e:	bf00      	nop
 8013880:	e7fd      	b.n	801387e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013882:	f001 fbed 	bl	8015060 <xTaskGetSchedulerState>
 8013886:	4603      	mov	r3, r0
 8013888:	2b00      	cmp	r3, #0
 801388a:	d102      	bne.n	8013892 <xQueueReceive+0x7a>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d101      	bne.n	8013896 <xQueueReceive+0x7e>
 8013892:	2301      	movs	r3, #1
 8013894:	e000      	b.n	8013898 <xQueueReceive+0x80>
 8013896:	2300      	movs	r3, #0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d10d      	bne.n	80138b8 <xQueueReceive+0xa0>
	__asm volatile
 801389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138a0:	b672      	cpsid	i
 80138a2:	f383 8811 	msr	BASEPRI, r3
 80138a6:	f3bf 8f6f 	isb	sy
 80138aa:	f3bf 8f4f 	dsb	sy
 80138ae:	b662      	cpsie	i
 80138b0:	61bb      	str	r3, [r7, #24]
}
 80138b2:	bf00      	nop
 80138b4:	bf00      	nop
 80138b6:	e7fd      	b.n	80138b4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80138b8:	f001 ff28 	bl	801570c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80138c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d01f      	beq.n	8013908 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80138c8:	68b9      	ldr	r1, [r7, #8]
 80138ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138cc:	f000 fad4 	bl	8013e78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80138d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d2:	1e5a      	subs	r2, r3, #1
 80138d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138da:	691b      	ldr	r3, [r3, #16]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00f      	beq.n	8013900 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e2:	3310      	adds	r3, #16
 80138e4:	4618      	mov	r0, r3
 80138e6:	f001 f9eb 	bl	8014cc0 <xTaskRemoveFromEventList>
 80138ea:	4603      	mov	r3, r0
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d007      	beq.n	8013900 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80138f0:	4b3c      	ldr	r3, [pc, #240]	@ (80139e4 <xQueueReceive+0x1cc>)
 80138f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138f6:	601a      	str	r2, [r3, #0]
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013900:	f001 ff3a 	bl	8015778 <vPortExitCritical>
				return pdPASS;
 8013904:	2301      	movs	r3, #1
 8013906:	e069      	b.n	80139dc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d103      	bne.n	8013916 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801390e:	f001 ff33 	bl	8015778 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013912:	2300      	movs	r3, #0
 8013914:	e062      	b.n	80139dc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013918:	2b00      	cmp	r3, #0
 801391a:	d106      	bne.n	801392a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801391c:	f107 0310 	add.w	r3, r7, #16
 8013920:	4618      	mov	r0, r3
 8013922:	f001 fa33 	bl	8014d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013926:	2301      	movs	r3, #1
 8013928:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801392a:	f001 ff25 	bl	8015778 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801392e:	f000 ff89 	bl	8014844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013932:	f001 feeb 	bl	801570c <vPortEnterCritical>
 8013936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801393c:	b25b      	sxtb	r3, r3
 801393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013942:	d103      	bne.n	801394c <xQueueReceive+0x134>
 8013944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013946:	2200      	movs	r2, #0
 8013948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801394e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013952:	b25b      	sxtb	r3, r3
 8013954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013958:	d103      	bne.n	8013962 <xQueueReceive+0x14a>
 801395a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801395c:	2200      	movs	r2, #0
 801395e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013962:	f001 ff09 	bl	8015778 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013966:	1d3a      	adds	r2, r7, #4
 8013968:	f107 0310 	add.w	r3, r7, #16
 801396c:	4611      	mov	r1, r2
 801396e:	4618      	mov	r0, r3
 8013970:	f001 fa22 	bl	8014db8 <xTaskCheckForTimeOut>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d123      	bne.n	80139c2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801397a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801397c:	f000 faf4 	bl	8013f68 <prvIsQueueEmpty>
 8013980:	4603      	mov	r3, r0
 8013982:	2b00      	cmp	r3, #0
 8013984:	d017      	beq.n	80139b6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013988:	3324      	adds	r3, #36	@ 0x24
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	4611      	mov	r1, r2
 801398e:	4618      	mov	r0, r3
 8013990:	f001 f96e 	bl	8014c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013996:	f000 fa95 	bl	8013ec4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801399a:	f000 ff61 	bl	8014860 <xTaskResumeAll>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d189      	bne.n	80138b8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80139a4:	4b0f      	ldr	r3, [pc, #60]	@ (80139e4 <xQueueReceive+0x1cc>)
 80139a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139aa:	601a      	str	r2, [r3, #0]
 80139ac:	f3bf 8f4f 	dsb	sy
 80139b0:	f3bf 8f6f 	isb	sy
 80139b4:	e780      	b.n	80138b8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80139b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139b8:	f000 fa84 	bl	8013ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139bc:	f000 ff50 	bl	8014860 <xTaskResumeAll>
 80139c0:	e77a      	b.n	80138b8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80139c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139c4:	f000 fa7e 	bl	8013ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139c8:	f000 ff4a 	bl	8014860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80139cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139ce:	f000 facb 	bl	8013f68 <prvIsQueueEmpty>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	f43f af6f 	beq.w	80138b8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80139da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3730      	adds	r7, #48	@ 0x30
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	e000ed04 	.word	0xe000ed04

080139e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b08e      	sub	sp, #56	@ 0x38
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80139f2:	2300      	movs	r3, #0
 80139f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80139fa:	2300      	movs	r3, #0
 80139fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80139fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d10d      	bne.n	8013a20 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a08:	b672      	cpsid	i
 8013a0a:	f383 8811 	msr	BASEPRI, r3
 8013a0e:	f3bf 8f6f 	isb	sy
 8013a12:	f3bf 8f4f 	dsb	sy
 8013a16:	b662      	cpsie	i
 8013a18:	623b      	str	r3, [r7, #32]
}
 8013a1a:	bf00      	nop
 8013a1c:	bf00      	nop
 8013a1e:	e7fd      	b.n	8013a1c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d00d      	beq.n	8013a44 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8013a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a2c:	b672      	cpsid	i
 8013a2e:	f383 8811 	msr	BASEPRI, r3
 8013a32:	f3bf 8f6f 	isb	sy
 8013a36:	f3bf 8f4f 	dsb	sy
 8013a3a:	b662      	cpsie	i
 8013a3c:	61fb      	str	r3, [r7, #28]
}
 8013a3e:	bf00      	nop
 8013a40:	bf00      	nop
 8013a42:	e7fd      	b.n	8013a40 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a44:	f001 fb0c 	bl	8015060 <xTaskGetSchedulerState>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d102      	bne.n	8013a54 <xQueueSemaphoreTake+0x6c>
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d101      	bne.n	8013a58 <xQueueSemaphoreTake+0x70>
 8013a54:	2301      	movs	r3, #1
 8013a56:	e000      	b.n	8013a5a <xQueueSemaphoreTake+0x72>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d10d      	bne.n	8013a7a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a62:	b672      	cpsid	i
 8013a64:	f383 8811 	msr	BASEPRI, r3
 8013a68:	f3bf 8f6f 	isb	sy
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	b662      	cpsie	i
 8013a72:	61bb      	str	r3, [r7, #24]
}
 8013a74:	bf00      	nop
 8013a76:	bf00      	nop
 8013a78:	e7fd      	b.n	8013a76 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a7a:	f001 fe47 	bl	801570c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a82:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d024      	beq.n	8013ad4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a8c:	1e5a      	subs	r2, r3, #1
 8013a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a90:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d104      	bne.n	8013aa4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013a9a:	f001 fcab 	bl	80153f4 <pvTaskIncrementMutexHeldCount>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa6:	691b      	ldr	r3, [r3, #16]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00f      	beq.n	8013acc <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aae:	3310      	adds	r3, #16
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f001 f905 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d007      	beq.n	8013acc <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013abc:	4b55      	ldr	r3, [pc, #340]	@ (8013c14 <xQueueSemaphoreTake+0x22c>)
 8013abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ac2:	601a      	str	r2, [r3, #0]
 8013ac4:	f3bf 8f4f 	dsb	sy
 8013ac8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013acc:	f001 fe54 	bl	8015778 <vPortExitCritical>
				return pdPASS;
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	e09a      	b.n	8013c0a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d114      	bne.n	8013b04 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d00d      	beq.n	8013afc <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ae4:	b672      	cpsid	i
 8013ae6:	f383 8811 	msr	BASEPRI, r3
 8013aea:	f3bf 8f6f 	isb	sy
 8013aee:	f3bf 8f4f 	dsb	sy
 8013af2:	b662      	cpsie	i
 8013af4:	617b      	str	r3, [r7, #20]
}
 8013af6:	bf00      	nop
 8013af8:	bf00      	nop
 8013afa:	e7fd      	b.n	8013af8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013afc:	f001 fe3c 	bl	8015778 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013b00:	2300      	movs	r3, #0
 8013b02:	e082      	b.n	8013c0a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d106      	bne.n	8013b18 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013b0a:	f107 030c 	add.w	r3, r7, #12
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f001 f93c 	bl	8014d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b14:	2301      	movs	r3, #1
 8013b16:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013b18:	f001 fe2e 	bl	8015778 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013b1c:	f000 fe92 	bl	8014844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013b20:	f001 fdf4 	bl	801570c <vPortEnterCritical>
 8013b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013b2a:	b25b      	sxtb	r3, r3
 8013b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b30:	d103      	bne.n	8013b3a <xQueueSemaphoreTake+0x152>
 8013b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b34:	2200      	movs	r2, #0
 8013b36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b40:	b25b      	sxtb	r3, r3
 8013b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b46:	d103      	bne.n	8013b50 <xQueueSemaphoreTake+0x168>
 8013b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013b50:	f001 fe12 	bl	8015778 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013b54:	463a      	mov	r2, r7
 8013b56:	f107 030c 	add.w	r3, r7, #12
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f001 f92b 	bl	8014db8 <xTaskCheckForTimeOut>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d132      	bne.n	8013bce <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b6a:	f000 f9fd 	bl	8013f68 <prvIsQueueEmpty>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d026      	beq.n	8013bc2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d109      	bne.n	8013b90 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013b7c:	f001 fdc6 	bl	801570c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f001 fa89 	bl	801509c <xTaskPriorityInherit>
 8013b8a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013b8c:	f001 fdf4 	bl	8015778 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b92:	3324      	adds	r3, #36	@ 0x24
 8013b94:	683a      	ldr	r2, [r7, #0]
 8013b96:	4611      	mov	r1, r2
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f001 f869 	bl	8014c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ba0:	f000 f990 	bl	8013ec4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013ba4:	f000 fe5c 	bl	8014860 <xTaskResumeAll>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f47f af65 	bne.w	8013a7a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013bb0:	4b18      	ldr	r3, [pc, #96]	@ (8013c14 <xQueueSemaphoreTake+0x22c>)
 8013bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013bb6:	601a      	str	r2, [r3, #0]
 8013bb8:	f3bf 8f4f 	dsb	sy
 8013bbc:	f3bf 8f6f 	isb	sy
 8013bc0:	e75b      	b.n	8013a7a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013bc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013bc4:	f000 f97e 	bl	8013ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013bc8:	f000 fe4a 	bl	8014860 <xTaskResumeAll>
 8013bcc:	e755      	b.n	8013a7a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013bce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013bd0:	f000 f978 	bl	8013ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013bd4:	f000 fe44 	bl	8014860 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013bd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013bda:	f000 f9c5 	bl	8013f68 <prvIsQueueEmpty>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f43f af4a 	beq.w	8013a7a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d00d      	beq.n	8013c08 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8013bec:	f001 fd8e 	bl	801570c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013bf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013bf2:	f000 f8bf 	bl	8013d74 <prvGetDisinheritPriorityAfterTimeout>
 8013bf6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bfa:	689b      	ldr	r3, [r3, #8]
 8013bfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f001 fb58 	bl	80152b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013c04:	f001 fdb8 	bl	8015778 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013c08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3738      	adds	r7, #56	@ 0x38
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}
 8013c12:	bf00      	nop
 8013c14:	e000ed04 	.word	0xe000ed04

08013c18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b08e      	sub	sp, #56	@ 0x38
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d10d      	bne.n	8013c4a <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c32:	b672      	cpsid	i
 8013c34:	f383 8811 	msr	BASEPRI, r3
 8013c38:	f3bf 8f6f 	isb	sy
 8013c3c:	f3bf 8f4f 	dsb	sy
 8013c40:	b662      	cpsie	i
 8013c42:	623b      	str	r3, [r7, #32]
}
 8013c44:	bf00      	nop
 8013c46:	bf00      	nop
 8013c48:	e7fd      	b.n	8013c46 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d103      	bne.n	8013c58 <xQueueReceiveFromISR+0x40>
 8013c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d101      	bne.n	8013c5c <xQueueReceiveFromISR+0x44>
 8013c58:	2301      	movs	r3, #1
 8013c5a:	e000      	b.n	8013c5e <xQueueReceiveFromISR+0x46>
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d10d      	bne.n	8013c7e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c66:	b672      	cpsid	i
 8013c68:	f383 8811 	msr	BASEPRI, r3
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	b662      	cpsie	i
 8013c76:	61fb      	str	r3, [r7, #28]
}
 8013c78:	bf00      	nop
 8013c7a:	bf00      	nop
 8013c7c:	e7fd      	b.n	8013c7a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c7e:	f001 fe2d 	bl	80158dc <vPortValidateInterruptPriority>
	__asm volatile
 8013c82:	f3ef 8211 	mrs	r2, BASEPRI
 8013c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c8a:	b672      	cpsid	i
 8013c8c:	f383 8811 	msr	BASEPRI, r3
 8013c90:	f3bf 8f6f 	isb	sy
 8013c94:	f3bf 8f4f 	dsb	sy
 8013c98:	b662      	cpsie	i
 8013c9a:	61ba      	str	r2, [r7, #24]
 8013c9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013c9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d02f      	beq.n	8013d0e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cb8:	68b9      	ldr	r1, [r7, #8]
 8013cba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013cbc:	f000 f8dc 	bl	8013e78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc2:	1e5a      	subs	r2, r3, #1
 8013cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cc6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cd0:	d112      	bne.n	8013cf8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd4:	691b      	ldr	r3, [r3, #16]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d016      	beq.n	8013d08 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cdc:	3310      	adds	r3, #16
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 ffee 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d00e      	beq.n	8013d08 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d00b      	beq.n	8013d08 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2201      	movs	r2, #1
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	e007      	b.n	8013d08 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	b25a      	sxtb	r2, r3
 8013d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013d08:	2301      	movs	r3, #1
 8013d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d0c:	e001      	b.n	8013d12 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	f383 8811 	msr	BASEPRI, r3
}
 8013d1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3738      	adds	r7, #56	@ 0x38
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10d      	bne.n	8013d56 <vQueueDelete+0x2e>
	__asm volatile
 8013d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d3e:	b672      	cpsid	i
 8013d40:	f383 8811 	msr	BASEPRI, r3
 8013d44:	f3bf 8f6f 	isb	sy
 8013d48:	f3bf 8f4f 	dsb	sy
 8013d4c:	b662      	cpsie	i
 8013d4e:	60bb      	str	r3, [r7, #8]
}
 8013d50:	bf00      	nop
 8013d52:	bf00      	nop
 8013d54:	e7fd      	b.n	8013d52 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013d56:	68f8      	ldr	r0, [r7, #12]
 8013d58:	f000 f934 	bl	8013fc4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d102      	bne.n	8013d6c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8013d66:	68f8      	ldr	r0, [r7, #12]
 8013d68:	f001 fed0 	bl	8015b0c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013d6c:	bf00      	nop
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013d74:	b480      	push	{r7}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d006      	beq.n	8013d92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f1c3 0307 	rsb	r3, r3, #7
 8013d8e:	60fb      	str	r3, [r7, #12]
 8013d90:	e001      	b.n	8013d96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013d92:	2300      	movs	r3, #0
 8013d94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013d96:	68fb      	ldr	r3, [r7, #12]
	}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3714      	adds	r7, #20
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr

08013da4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b086      	sub	sp, #24
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013db0:	2300      	movs	r3, #0
 8013db2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013db8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d10d      	bne.n	8013dde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d14d      	bne.n	8013e66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	689b      	ldr	r3, [r3, #8]
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f001 f9e4 	bl	801519c <xTaskPriorityDisinherit>
 8013dd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	609a      	str	r2, [r3, #8]
 8013ddc:	e043      	b.n	8013e66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d119      	bne.n	8013e18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6858      	ldr	r0, [r3, #4]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dec:	461a      	mov	r2, r3
 8013dee:	68b9      	ldr	r1, [r7, #8]
 8013df0:	f002 faa3 	bl	801633a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	685a      	ldr	r2, [r3, #4]
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dfc:	441a      	add	r2, r3
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	685a      	ldr	r2, [r3, #4]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	689b      	ldr	r3, [r3, #8]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d32b      	bcc.n	8013e66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	681a      	ldr	r2, [r3, #0]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	605a      	str	r2, [r3, #4]
 8013e16:	e026      	b.n	8013e66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	68d8      	ldr	r0, [r3, #12]
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e20:	461a      	mov	r2, r3
 8013e22:	68b9      	ldr	r1, [r7, #8]
 8013e24:	f002 fa89 	bl	801633a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	68da      	ldr	r2, [r3, #12]
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e30:	425b      	negs	r3, r3
 8013e32:	441a      	add	r2, r3
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	68da      	ldr	r2, [r3, #12]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d207      	bcs.n	8013e54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	689a      	ldr	r2, [r3, #8]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e4c:	425b      	negs	r3, r3
 8013e4e:	441a      	add	r2, r3
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b02      	cmp	r3, #2
 8013e58:	d105      	bne.n	8013e66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d002      	beq.n	8013e66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	3b01      	subs	r3, #1
 8013e64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	1c5a      	adds	r2, r3, #1
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013e6e:	697b      	ldr	r3, [r7, #20]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3718      	adds	r7, #24
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d018      	beq.n	8013ebc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	68da      	ldr	r2, [r3, #12]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e92:	441a      	add	r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	68da      	ldr	r2, [r3, #12]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	689b      	ldr	r3, [r3, #8]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d303      	bcc.n	8013eac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	68d9      	ldr	r1, [r3, #12]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	6838      	ldr	r0, [r7, #0]
 8013eb8:	f002 fa3f 	bl	801633a <memcpy>
	}
}
 8013ebc:	bf00      	nop
 8013ebe:	3708      	adds	r7, #8
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013ecc:	f001 fc1e 	bl	801570c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013ed6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ed8:	e011      	b.n	8013efe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d012      	beq.n	8013f08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	3324      	adds	r3, #36	@ 0x24
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f000 feea 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013eec:	4603      	mov	r3, r0
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d001      	beq.n	8013ef6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013ef2:	f000 ffc9 	bl	8014e88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013ef6:	7bfb      	ldrb	r3, [r7, #15]
 8013ef8:	3b01      	subs	r3, #1
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	dce9      	bgt.n	8013eda <prvUnlockQueue+0x16>
 8013f06:	e000      	b.n	8013f0a <prvUnlockQueue+0x46>
					break;
 8013f08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	22ff      	movs	r2, #255	@ 0xff
 8013f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013f12:	f001 fc31 	bl	8015778 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013f16:	f001 fbf9 	bl	801570c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013f20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f22:	e011      	b.n	8013f48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	691b      	ldr	r3, [r3, #16]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d012      	beq.n	8013f52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	3310      	adds	r3, #16
 8013f30:	4618      	mov	r0, r3
 8013f32:	f000 fec5 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d001      	beq.n	8013f40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013f3c:	f000 ffa4 	bl	8014e88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013f40:	7bbb      	ldrb	r3, [r7, #14]
 8013f42:	3b01      	subs	r3, #1
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dce9      	bgt.n	8013f24 <prvUnlockQueue+0x60>
 8013f50:	e000      	b.n	8013f54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013f52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	22ff      	movs	r2, #255	@ 0xff
 8013f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013f5c:	f001 fc0c 	bl	8015778 <vPortExitCritical>
}
 8013f60:	bf00      	nop
 8013f62:	3710      	adds	r7, #16
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b084      	sub	sp, #16
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f70:	f001 fbcc 	bl	801570c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d102      	bne.n	8013f82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	60fb      	str	r3, [r7, #12]
 8013f80:	e001      	b.n	8013f86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013f82:	2300      	movs	r3, #0
 8013f84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f86:	f001 fbf7 	bl	8015778 <vPortExitCritical>

	return xReturn;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3710      	adds	r7, #16
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f9c:	f001 fbb6 	bl	801570c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d102      	bne.n	8013fb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013fac:	2301      	movs	r3, #1
 8013fae:	60fb      	str	r3, [r7, #12]
 8013fb0:	e001      	b.n	8013fb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013fb6:	f001 fbdf 	bl	8015778 <vPortExitCritical>

	return xReturn;
 8013fba:	68fb      	ldr	r3, [r7, #12]
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3710      	adds	r7, #16
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b085      	sub	sp, #20
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013fcc:	2300      	movs	r3, #0
 8013fce:	60fb      	str	r3, [r7, #12]
 8013fd0:	e016      	b.n	8014000 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013fd2:	4a10      	ldr	r2, [pc, #64]	@ (8014014 <vQueueUnregisterQueue+0x50>)
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	00db      	lsls	r3, r3, #3
 8013fd8:	4413      	add	r3, r2
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	d10b      	bne.n	8013ffa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8014014 <vQueueUnregisterQueue+0x50>)
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013fec:	4a09      	ldr	r2, [pc, #36]	@ (8014014 <vQueueUnregisterQueue+0x50>)
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	00db      	lsls	r3, r3, #3
 8013ff2:	4413      	add	r3, r2
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	605a      	str	r2, [r3, #4]
				break;
 8013ff8:	e006      	b.n	8014008 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	60fb      	str	r3, [r7, #12]
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2b07      	cmp	r3, #7
 8014004:	d9e5      	bls.n	8013fd2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014006:	bf00      	nop
 8014008:	bf00      	nop
 801400a:	3714      	adds	r7, #20
 801400c:	46bd      	mov	sp, r7
 801400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014012:	4770      	bx	lr
 8014014:	20001530 	.word	0x20001530

08014018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014018:	b580      	push	{r7, lr}
 801401a:	b08e      	sub	sp, #56	@ 0x38
 801401c:	af04      	add	r7, sp, #16
 801401e:	60f8      	str	r0, [r7, #12]
 8014020:	60b9      	str	r1, [r7, #8]
 8014022:	607a      	str	r2, [r7, #4]
 8014024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014028:	2b00      	cmp	r3, #0
 801402a:	d10d      	bne.n	8014048 <xTaskCreateStatic+0x30>
	__asm volatile
 801402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014030:	b672      	cpsid	i
 8014032:	f383 8811 	msr	BASEPRI, r3
 8014036:	f3bf 8f6f 	isb	sy
 801403a:	f3bf 8f4f 	dsb	sy
 801403e:	b662      	cpsie	i
 8014040:	623b      	str	r3, [r7, #32]
}
 8014042:	bf00      	nop
 8014044:	bf00      	nop
 8014046:	e7fd      	b.n	8014044 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8014048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801404a:	2b00      	cmp	r3, #0
 801404c:	d10d      	bne.n	801406a <xTaskCreateStatic+0x52>
	__asm volatile
 801404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014052:	b672      	cpsid	i
 8014054:	f383 8811 	msr	BASEPRI, r3
 8014058:	f3bf 8f6f 	isb	sy
 801405c:	f3bf 8f4f 	dsb	sy
 8014060:	b662      	cpsie	i
 8014062:	61fb      	str	r3, [r7, #28]
}
 8014064:	bf00      	nop
 8014066:	bf00      	nop
 8014068:	e7fd      	b.n	8014066 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801406a:	23a0      	movs	r3, #160	@ 0xa0
 801406c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	2ba0      	cmp	r3, #160	@ 0xa0
 8014072:	d00d      	beq.n	8014090 <xTaskCreateStatic+0x78>
	__asm volatile
 8014074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014078:	b672      	cpsid	i
 801407a:	f383 8811 	msr	BASEPRI, r3
 801407e:	f3bf 8f6f 	isb	sy
 8014082:	f3bf 8f4f 	dsb	sy
 8014086:	b662      	cpsie	i
 8014088:	61bb      	str	r3, [r7, #24]
}
 801408a:	bf00      	nop
 801408c:	bf00      	nop
 801408e:	e7fd      	b.n	801408c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014090:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014094:	2b00      	cmp	r3, #0
 8014096:	d01e      	beq.n	80140d6 <xTaskCreateStatic+0xbe>
 8014098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801409a:	2b00      	cmp	r3, #0
 801409c:	d01b      	beq.n	80140d6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80140a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80140a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140aa:	2202      	movs	r2, #2
 80140ac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80140b0:	2300      	movs	r3, #0
 80140b2:	9303      	str	r3, [sp, #12]
 80140b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140b6:	9302      	str	r3, [sp, #8]
 80140b8:	f107 0314 	add.w	r3, r7, #20
 80140bc:	9301      	str	r3, [sp, #4]
 80140be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140c0:	9300      	str	r3, [sp, #0]
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	68b9      	ldr	r1, [r7, #8]
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	f000 f851 	bl	8014170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140d0:	f000 f8f8 	bl	80142c4 <prvAddNewTaskToReadyList>
 80140d4:	e001      	b.n	80140da <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80140d6:	2300      	movs	r3, #0
 80140d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80140da:	697b      	ldr	r3, [r7, #20]
	}
 80140dc:	4618      	mov	r0, r3
 80140de:	3728      	adds	r7, #40	@ 0x28
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b08c      	sub	sp, #48	@ 0x30
 80140e8:	af04      	add	r7, sp, #16
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	603b      	str	r3, [r7, #0]
 80140f0:	4613      	mov	r3, r2
 80140f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80140f4:	88fb      	ldrh	r3, [r7, #6]
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4618      	mov	r0, r3
 80140fa:	f001 fc35 	bl	8015968 <pvPortMalloc>
 80140fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d00e      	beq.n	8014124 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014106:	20a0      	movs	r0, #160	@ 0xa0
 8014108:	f001 fc2e 	bl	8015968 <pvPortMalloc>
 801410c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d003      	beq.n	801411c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014114:	69fb      	ldr	r3, [r7, #28]
 8014116:	697a      	ldr	r2, [r7, #20]
 8014118:	631a      	str	r2, [r3, #48]	@ 0x30
 801411a:	e005      	b.n	8014128 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801411c:	6978      	ldr	r0, [r7, #20]
 801411e:	f001 fcf5 	bl	8015b0c <vPortFree>
 8014122:	e001      	b.n	8014128 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014124:	2300      	movs	r3, #0
 8014126:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d017      	beq.n	801415e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	2200      	movs	r2, #0
 8014132:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014136:	88fa      	ldrh	r2, [r7, #6]
 8014138:	2300      	movs	r3, #0
 801413a:	9303      	str	r3, [sp, #12]
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	9302      	str	r3, [sp, #8]
 8014140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014142:	9301      	str	r3, [sp, #4]
 8014144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014146:	9300      	str	r3, [sp, #0]
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	68b9      	ldr	r1, [r7, #8]
 801414c:	68f8      	ldr	r0, [r7, #12]
 801414e:	f000 f80f 	bl	8014170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014152:	69f8      	ldr	r0, [r7, #28]
 8014154:	f000 f8b6 	bl	80142c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014158:	2301      	movs	r3, #1
 801415a:	61bb      	str	r3, [r7, #24]
 801415c:	e002      	b.n	8014164 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801415e:	f04f 33ff 	mov.w	r3, #4294967295
 8014162:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014164:	69bb      	ldr	r3, [r7, #24]
	}
 8014166:	4618      	mov	r0, r3
 8014168:	3720      	adds	r7, #32
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
	...

08014170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b088      	sub	sp, #32
 8014174:	af00      	add	r7, sp, #0
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
 801417c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014180:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	461a      	mov	r2, r3
 8014188:	21a5      	movs	r1, #165	@ 0xa5
 801418a:	f001 fff4 	bl	8016176 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014192:	6879      	ldr	r1, [r7, #4]
 8014194:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014198:	440b      	add	r3, r1
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4413      	add	r3, r2
 801419e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	f023 0307 	bic.w	r3, r3, #7
 80141a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	f003 0307 	and.w	r3, r3, #7
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d00d      	beq.n	80141ce <prvInitialiseNewTask+0x5e>
	__asm volatile
 80141b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b6:	b672      	cpsid	i
 80141b8:	f383 8811 	msr	BASEPRI, r3
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	b662      	cpsie	i
 80141c6:	617b      	str	r3, [r7, #20]
}
 80141c8:	bf00      	nop
 80141ca:	bf00      	nop
 80141cc:	e7fd      	b.n	80141ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d01f      	beq.n	8014214 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80141d4:	2300      	movs	r3, #0
 80141d6:	61fb      	str	r3, [r7, #28]
 80141d8:	e012      	b.n	8014200 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80141da:	68ba      	ldr	r2, [r7, #8]
 80141dc:	69fb      	ldr	r3, [r7, #28]
 80141de:	4413      	add	r3, r2
 80141e0:	7819      	ldrb	r1, [r3, #0]
 80141e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141e4:	69fb      	ldr	r3, [r7, #28]
 80141e6:	4413      	add	r3, r2
 80141e8:	3334      	adds	r3, #52	@ 0x34
 80141ea:	460a      	mov	r2, r1
 80141ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80141ee:	68ba      	ldr	r2, [r7, #8]
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	4413      	add	r3, r2
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d006      	beq.n	8014208 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	3301      	adds	r3, #1
 80141fe:	61fb      	str	r3, [r7, #28]
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	2b0f      	cmp	r3, #15
 8014204:	d9e9      	bls.n	80141da <prvInitialiseNewTask+0x6a>
 8014206:	e000      	b.n	801420a <prvInitialiseNewTask+0x9a>
			{
				break;
 8014208:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801420c:	2200      	movs	r2, #0
 801420e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014212:	e003      	b.n	801421c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014216:	2200      	movs	r2, #0
 8014218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421e:	2b06      	cmp	r3, #6
 8014220:	d901      	bls.n	8014226 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014222:	2306      	movs	r3, #6
 8014224:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801422a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014230:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014234:	2200      	movs	r2, #0
 8014236:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801423a:	3304      	adds	r3, #4
 801423c:	4618      	mov	r0, r3
 801423e:	f7fe fe6f 	bl	8012f20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014244:	3318      	adds	r3, #24
 8014246:	4618      	mov	r0, r3
 8014248:	f7fe fe6a 	bl	8012f20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801424c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801424e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014250:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014254:	f1c3 0207 	rsb	r2, r3, #7
 8014258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801425a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801425e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014260:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014264:	2200      	movs	r2, #0
 8014266:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801426c:	2200      	movs	r2, #0
 801426e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014274:	334c      	adds	r3, #76	@ 0x4c
 8014276:	224c      	movs	r2, #76	@ 0x4c
 8014278:	2100      	movs	r1, #0
 801427a:	4618      	mov	r0, r3
 801427c:	f001 ff7b 	bl	8016176 <memset>
 8014280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014282:	4a0d      	ldr	r2, [pc, #52]	@ (80142b8 <prvInitialiseNewTask+0x148>)
 8014284:	651a      	str	r2, [r3, #80]	@ 0x50
 8014286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014288:	4a0c      	ldr	r2, [pc, #48]	@ (80142bc <prvInitialiseNewTask+0x14c>)
 801428a:	655a      	str	r2, [r3, #84]	@ 0x54
 801428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801428e:	4a0c      	ldr	r2, [pc, #48]	@ (80142c0 <prvInitialiseNewTask+0x150>)
 8014290:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014292:	683a      	ldr	r2, [r7, #0]
 8014294:	68f9      	ldr	r1, [r7, #12]
 8014296:	69b8      	ldr	r0, [r7, #24]
 8014298:	f001 f926 	bl	80154e8 <pxPortInitialiseStack>
 801429c:	4602      	mov	r2, r0
 801429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80142a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d002      	beq.n	80142ae <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80142a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142ae:	bf00      	nop
 80142b0:	3720      	adds	r7, #32
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	200096c4 	.word	0x200096c4
 80142bc:	2000972c 	.word	0x2000972c
 80142c0:	20009794 	.word	0x20009794

080142c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80142cc:	f001 fa1e 	bl	801570c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80142d0:	4b2a      	ldr	r3, [pc, #168]	@ (801437c <prvAddNewTaskToReadyList+0xb8>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	3301      	adds	r3, #1
 80142d6:	4a29      	ldr	r2, [pc, #164]	@ (801437c <prvAddNewTaskToReadyList+0xb8>)
 80142d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80142da:	4b29      	ldr	r3, [pc, #164]	@ (8014380 <prvAddNewTaskToReadyList+0xbc>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d109      	bne.n	80142f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80142e2:	4a27      	ldr	r2, [pc, #156]	@ (8014380 <prvAddNewTaskToReadyList+0xbc>)
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80142e8:	4b24      	ldr	r3, [pc, #144]	@ (801437c <prvAddNewTaskToReadyList+0xb8>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d110      	bne.n	8014312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80142f0:	f000 fdf0 	bl	8014ed4 <prvInitialiseTaskLists>
 80142f4:	e00d      	b.n	8014312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80142f6:	4b23      	ldr	r3, [pc, #140]	@ (8014384 <prvAddNewTaskToReadyList+0xc0>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d109      	bne.n	8014312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80142fe:	4b20      	ldr	r3, [pc, #128]	@ (8014380 <prvAddNewTaskToReadyList+0xbc>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014308:	429a      	cmp	r2, r3
 801430a:	d802      	bhi.n	8014312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801430c:	4a1c      	ldr	r2, [pc, #112]	@ (8014380 <prvAddNewTaskToReadyList+0xbc>)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014312:	4b1d      	ldr	r3, [pc, #116]	@ (8014388 <prvAddNewTaskToReadyList+0xc4>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	3301      	adds	r3, #1
 8014318:	4a1b      	ldr	r2, [pc, #108]	@ (8014388 <prvAddNewTaskToReadyList+0xc4>)
 801431a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014320:	2201      	movs	r2, #1
 8014322:	409a      	lsls	r2, r3
 8014324:	4b19      	ldr	r3, [pc, #100]	@ (801438c <prvAddNewTaskToReadyList+0xc8>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	4313      	orrs	r3, r2
 801432a:	4a18      	ldr	r2, [pc, #96]	@ (801438c <prvAddNewTaskToReadyList+0xc8>)
 801432c:	6013      	str	r3, [r2, #0]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014332:	4613      	mov	r3, r2
 8014334:	009b      	lsls	r3, r3, #2
 8014336:	4413      	add	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4a15      	ldr	r2, [pc, #84]	@ (8014390 <prvAddNewTaskToReadyList+0xcc>)
 801433c:	441a      	add	r2, r3
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	3304      	adds	r3, #4
 8014342:	4619      	mov	r1, r3
 8014344:	4610      	mov	r0, r2
 8014346:	f7fe fdf8 	bl	8012f3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801434a:	f001 fa15 	bl	8015778 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801434e:	4b0d      	ldr	r3, [pc, #52]	@ (8014384 <prvAddNewTaskToReadyList+0xc0>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d00e      	beq.n	8014374 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014356:	4b0a      	ldr	r3, [pc, #40]	@ (8014380 <prvAddNewTaskToReadyList+0xbc>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014360:	429a      	cmp	r2, r3
 8014362:	d207      	bcs.n	8014374 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014364:	4b0b      	ldr	r3, [pc, #44]	@ (8014394 <prvAddNewTaskToReadyList+0xd0>)
 8014366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801436a:	601a      	str	r2, [r3, #0]
 801436c:	f3bf 8f4f 	dsb	sy
 8014370:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014374:	bf00      	nop
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	20001670 	.word	0x20001670
 8014380:	20001570 	.word	0x20001570
 8014384:	2000167c 	.word	0x2000167c
 8014388:	2000168c 	.word	0x2000168c
 801438c:	20001678 	.word	0x20001678
 8014390:	20001574 	.word	0x20001574
 8014394:	e000ed04 	.word	0xe000ed04

08014398 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8014398:	b580      	push	{r7, lr}
 801439a:	b08a      	sub	sp, #40	@ 0x28
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80143a2:	2300      	movs	r3, #0
 80143a4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d10d      	bne.n	80143c8 <vTaskDelayUntil+0x30>
	__asm volatile
 80143ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143b0:	b672      	cpsid	i
 80143b2:	f383 8811 	msr	BASEPRI, r3
 80143b6:	f3bf 8f6f 	isb	sy
 80143ba:	f3bf 8f4f 	dsb	sy
 80143be:	b662      	cpsie	i
 80143c0:	617b      	str	r3, [r7, #20]
}
 80143c2:	bf00      	nop
 80143c4:	bf00      	nop
 80143c6:	e7fd      	b.n	80143c4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d10d      	bne.n	80143ea <vTaskDelayUntil+0x52>
	__asm volatile
 80143ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143d2:	b672      	cpsid	i
 80143d4:	f383 8811 	msr	BASEPRI, r3
 80143d8:	f3bf 8f6f 	isb	sy
 80143dc:	f3bf 8f4f 	dsb	sy
 80143e0:	b662      	cpsie	i
 80143e2:	613b      	str	r3, [r7, #16]
}
 80143e4:	bf00      	nop
 80143e6:	bf00      	nop
 80143e8:	e7fd      	b.n	80143e6 <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 80143ea:	4b2b      	ldr	r3, [pc, #172]	@ (8014498 <vTaskDelayUntil+0x100>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d00d      	beq.n	801440e <vTaskDelayUntil+0x76>
	__asm volatile
 80143f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143f6:	b672      	cpsid	i
 80143f8:	f383 8811 	msr	BASEPRI, r3
 80143fc:	f3bf 8f6f 	isb	sy
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	b662      	cpsie	i
 8014406:	60fb      	str	r3, [r7, #12]
}
 8014408:	bf00      	nop
 801440a:	bf00      	nop
 801440c:	e7fd      	b.n	801440a <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 801440e:	f000 fa19 	bl	8014844 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8014412:	4b22      	ldr	r3, [pc, #136]	@ (801449c <vTaskDelayUntil+0x104>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	683a      	ldr	r2, [r7, #0]
 801441e:	4413      	add	r3, r2
 8014420:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	6a3a      	ldr	r2, [r7, #32]
 8014428:	429a      	cmp	r2, r3
 801442a:	d20b      	bcs.n	8014444 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	69fa      	ldr	r2, [r7, #28]
 8014432:	429a      	cmp	r2, r3
 8014434:	d211      	bcs.n	801445a <vTaskDelayUntil+0xc2>
 8014436:	69fa      	ldr	r2, [r7, #28]
 8014438:	6a3b      	ldr	r3, [r7, #32]
 801443a:	429a      	cmp	r2, r3
 801443c:	d90d      	bls.n	801445a <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 801443e:	2301      	movs	r3, #1
 8014440:	627b      	str	r3, [r7, #36]	@ 0x24
 8014442:	e00a      	b.n	801445a <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	69fa      	ldr	r2, [r7, #28]
 801444a:	429a      	cmp	r2, r3
 801444c:	d303      	bcc.n	8014456 <vTaskDelayUntil+0xbe>
 801444e:	69fa      	ldr	r2, [r7, #28]
 8014450:	6a3b      	ldr	r3, [r7, #32]
 8014452:	429a      	cmp	r2, r3
 8014454:	d901      	bls.n	801445a <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8014456:	2301      	movs	r3, #1
 8014458:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	69fa      	ldr	r2, [r7, #28]
 801445e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014462:	2b00      	cmp	r3, #0
 8014464:	d006      	beq.n	8014474 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8014466:	69fa      	ldr	r2, [r7, #28]
 8014468:	6a3b      	ldr	r3, [r7, #32]
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	2100      	movs	r1, #0
 801446e:	4618      	mov	r0, r3
 8014470:	f000 ffd4 	bl	801541c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8014474:	f000 f9f4 	bl	8014860 <xTaskResumeAll>
 8014478:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801447a:	69bb      	ldr	r3, [r7, #24]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d107      	bne.n	8014490 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8014480:	4b07      	ldr	r3, [pc, #28]	@ (80144a0 <vTaskDelayUntil+0x108>)
 8014482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014486:	601a      	str	r2, [r3, #0]
 8014488:	f3bf 8f4f 	dsb	sy
 801448c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014490:	bf00      	nop
 8014492:	3728      	adds	r7, #40	@ 0x28
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}
 8014498:	20001698 	.word	0x20001698
 801449c:	20001674 	.word	0x20001674
 80144a0:	e000ed04 	.word	0xe000ed04

080144a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80144ac:	2300      	movs	r3, #0
 80144ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d01a      	beq.n	80144ec <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80144b6:	4b15      	ldr	r3, [pc, #84]	@ (801450c <vTaskDelay+0x68>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d00d      	beq.n	80144da <vTaskDelay+0x36>
	__asm volatile
 80144be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144c2:	b672      	cpsid	i
 80144c4:	f383 8811 	msr	BASEPRI, r3
 80144c8:	f3bf 8f6f 	isb	sy
 80144cc:	f3bf 8f4f 	dsb	sy
 80144d0:	b662      	cpsie	i
 80144d2:	60bb      	str	r3, [r7, #8]
}
 80144d4:	bf00      	nop
 80144d6:	bf00      	nop
 80144d8:	e7fd      	b.n	80144d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80144da:	f000 f9b3 	bl	8014844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80144de:	2100      	movs	r1, #0
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 ff9b 	bl	801541c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80144e6:	f000 f9bb 	bl	8014860 <xTaskResumeAll>
 80144ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d107      	bne.n	8014502 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80144f2:	4b07      	ldr	r3, [pc, #28]	@ (8014510 <vTaskDelay+0x6c>)
 80144f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144f8:	601a      	str	r2, [r3, #0]
 80144fa:	f3bf 8f4f 	dsb	sy
 80144fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014502:	bf00      	nop
 8014504:	3710      	adds	r7, #16
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
 801450a:	bf00      	nop
 801450c:	20001698 	.word	0x20001698
 8014510:	e000ed04 	.word	0xe000ed04

08014514 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801451c:	f001 f8f6 	bl	801570c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d102      	bne.n	801452c <vTaskSuspend+0x18>
 8014526:	4b3e      	ldr	r3, [pc, #248]	@ (8014620 <vTaskSuspend+0x10c>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	e000      	b.n	801452e <vTaskSuspend+0x1a>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	3304      	adds	r3, #4
 8014534:	4618      	mov	r0, r3
 8014536:	f7fe fd5d 	bl	8012ff4 <uxListRemove>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d115      	bne.n	801456c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014544:	4937      	ldr	r1, [pc, #220]	@ (8014624 <vTaskSuspend+0x110>)
 8014546:	4613      	mov	r3, r2
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	4413      	add	r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	440b      	add	r3, r1
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d10a      	bne.n	801456c <vTaskSuspend+0x58>
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801455a:	2201      	movs	r2, #1
 801455c:	fa02 f303 	lsl.w	r3, r2, r3
 8014560:	43da      	mvns	r2, r3
 8014562:	4b31      	ldr	r3, [pc, #196]	@ (8014628 <vTaskSuspend+0x114>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	4013      	ands	r3, r2
 8014568:	4a2f      	ldr	r2, [pc, #188]	@ (8014628 <vTaskSuspend+0x114>)
 801456a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014570:	2b00      	cmp	r3, #0
 8014572:	d004      	beq.n	801457e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	3318      	adds	r3, #24
 8014578:	4618      	mov	r0, r3
 801457a:	f7fe fd3b 	bl	8012ff4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	3304      	adds	r3, #4
 8014582:	4619      	mov	r1, r3
 8014584:	4829      	ldr	r0, [pc, #164]	@ (801462c <vTaskSuspend+0x118>)
 8014586:	f7fe fcd8 	bl	8012f3a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8014590:	b2db      	uxtb	r3, r3
 8014592:	2b01      	cmp	r3, #1
 8014594:	d103      	bne.n	801459e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2200      	movs	r2, #0
 801459a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801459e:	f001 f8eb 	bl	8015778 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80145a2:	4b23      	ldr	r3, [pc, #140]	@ (8014630 <vTaskSuspend+0x11c>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d005      	beq.n	80145b6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80145aa:	f001 f8af 	bl	801570c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80145ae:	f000 fd37 	bl	8015020 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80145b2:	f001 f8e1 	bl	8015778 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80145b6:	4b1a      	ldr	r3, [pc, #104]	@ (8014620 <vTaskSuspend+0x10c>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	68fa      	ldr	r2, [r7, #12]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d12a      	bne.n	8014616 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 80145c0:	4b1b      	ldr	r3, [pc, #108]	@ (8014630 <vTaskSuspend+0x11c>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d01a      	beq.n	80145fe <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80145c8:	4b1a      	ldr	r3, [pc, #104]	@ (8014634 <vTaskSuspend+0x120>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d00d      	beq.n	80145ec <vTaskSuspend+0xd8>
	__asm volatile
 80145d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145d4:	b672      	cpsid	i
 80145d6:	f383 8811 	msr	BASEPRI, r3
 80145da:	f3bf 8f6f 	isb	sy
 80145de:	f3bf 8f4f 	dsb	sy
 80145e2:	b662      	cpsie	i
 80145e4:	60bb      	str	r3, [r7, #8]
}
 80145e6:	bf00      	nop
 80145e8:	bf00      	nop
 80145ea:	e7fd      	b.n	80145e8 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 80145ec:	4b12      	ldr	r3, [pc, #72]	@ (8014638 <vTaskSuspend+0x124>)
 80145ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145f2:	601a      	str	r2, [r3, #0]
 80145f4:	f3bf 8f4f 	dsb	sy
 80145f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80145fc:	e00b      	b.n	8014616 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80145fe:	4b0b      	ldr	r3, [pc, #44]	@ (801462c <vTaskSuspend+0x118>)
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	4b0e      	ldr	r3, [pc, #56]	@ (801463c <vTaskSuspend+0x128>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	429a      	cmp	r2, r3
 8014608:	d103      	bne.n	8014612 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 801460a:	4b05      	ldr	r3, [pc, #20]	@ (8014620 <vTaskSuspend+0x10c>)
 801460c:	2200      	movs	r2, #0
 801460e:	601a      	str	r2, [r3, #0]
	}
 8014610:	e001      	b.n	8014616 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8014612:	f000 faa3 	bl	8014b5c <vTaskSwitchContext>
	}
 8014616:	bf00      	nop
 8014618:	3710      	adds	r7, #16
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	20001570 	.word	0x20001570
 8014624:	20001574 	.word	0x20001574
 8014628:	20001678 	.word	0x20001678
 801462c:	2000165c 	.word	0x2000165c
 8014630:	2000167c 	.word	0x2000167c
 8014634:	20001698 	.word	0x20001698
 8014638:	e000ed04 	.word	0xe000ed04
 801463c:	20001670 	.word	0x20001670

08014640 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014640:	b480      	push	{r7}
 8014642:	b087      	sub	sp, #28
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014648:	2300      	movs	r3, #0
 801464a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d10d      	bne.n	8014672 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8014656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801465a:	b672      	cpsid	i
 801465c:	f383 8811 	msr	BASEPRI, r3
 8014660:	f3bf 8f6f 	isb	sy
 8014664:	f3bf 8f4f 	dsb	sy
 8014668:	b662      	cpsie	i
 801466a:	60fb      	str	r3, [r7, #12]
}
 801466c:	bf00      	nop
 801466e:	bf00      	nop
 8014670:	e7fd      	b.n	801466e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	695b      	ldr	r3, [r3, #20]
 8014676:	4a0a      	ldr	r2, [pc, #40]	@ (80146a0 <prvTaskIsTaskSuspended+0x60>)
 8014678:	4293      	cmp	r3, r2
 801467a:	d10a      	bne.n	8014692 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014680:	4a08      	ldr	r2, [pc, #32]	@ (80146a4 <prvTaskIsTaskSuspended+0x64>)
 8014682:	4293      	cmp	r3, r2
 8014684:	d005      	beq.n	8014692 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801468a:	2b00      	cmp	r3, #0
 801468c:	d101      	bne.n	8014692 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 801468e:	2301      	movs	r3, #1
 8014690:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014692:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014694:	4618      	mov	r0, r3
 8014696:	371c      	adds	r7, #28
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr
 80146a0:	2000165c 	.word	0x2000165c
 80146a4:	20001630 	.word	0x20001630

080146a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d10d      	bne.n	80146d6 <vTaskResume+0x2e>
	__asm volatile
 80146ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146be:	b672      	cpsid	i
 80146c0:	f383 8811 	msr	BASEPRI, r3
 80146c4:	f3bf 8f6f 	isb	sy
 80146c8:	f3bf 8f4f 	dsb	sy
 80146cc:	b662      	cpsie	i
 80146ce:	60bb      	str	r3, [r7, #8]
}
 80146d0:	bf00      	nop
 80146d2:	bf00      	nop
 80146d4:	e7fd      	b.n	80146d2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80146d6:	4b20      	ldr	r3, [pc, #128]	@ (8014758 <vTaskResume+0xb0>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	68fa      	ldr	r2, [r7, #12]
 80146dc:	429a      	cmp	r2, r3
 80146de:	d037      	beq.n	8014750 <vTaskResume+0xa8>
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d034      	beq.n	8014750 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 80146e6:	f001 f811 	bl	801570c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80146ea:	68f8      	ldr	r0, [r7, #12]
 80146ec:	f7ff ffa8 	bl	8014640 <prvTaskIsTaskSuspended>
 80146f0:	4603      	mov	r3, r0
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d02a      	beq.n	801474c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	3304      	adds	r3, #4
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7fe fc7a 	bl	8012ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014704:	2201      	movs	r2, #1
 8014706:	409a      	lsls	r2, r3
 8014708:	4b14      	ldr	r3, [pc, #80]	@ (801475c <vTaskResume+0xb4>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4313      	orrs	r3, r2
 801470e:	4a13      	ldr	r2, [pc, #76]	@ (801475c <vTaskResume+0xb4>)
 8014710:	6013      	str	r3, [r2, #0]
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014716:	4613      	mov	r3, r2
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	4413      	add	r3, r2
 801471c:	009b      	lsls	r3, r3, #2
 801471e:	4a10      	ldr	r2, [pc, #64]	@ (8014760 <vTaskResume+0xb8>)
 8014720:	441a      	add	r2, r3
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	3304      	adds	r3, #4
 8014726:	4619      	mov	r1, r3
 8014728:	4610      	mov	r0, r2
 801472a:	f7fe fc06 	bl	8012f3a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014732:	4b09      	ldr	r3, [pc, #36]	@ (8014758 <vTaskResume+0xb0>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014738:	429a      	cmp	r2, r3
 801473a:	d307      	bcc.n	801474c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801473c:	4b09      	ldr	r3, [pc, #36]	@ (8014764 <vTaskResume+0xbc>)
 801473e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014742:	601a      	str	r2, [r3, #0]
 8014744:	f3bf 8f4f 	dsb	sy
 8014748:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801474c:	f001 f814 	bl	8015778 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014750:	bf00      	nop
 8014752:	3710      	adds	r7, #16
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	20001570 	.word	0x20001570
 801475c:	20001678 	.word	0x20001678
 8014760:	20001574 	.word	0x20001574
 8014764:	e000ed04 	.word	0xe000ed04

08014768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b08a      	sub	sp, #40	@ 0x28
 801476c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801476e:	2300      	movs	r3, #0
 8014770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014772:	2300      	movs	r3, #0
 8014774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014776:	463a      	mov	r2, r7
 8014778:	1d39      	adds	r1, r7, #4
 801477a:	f107 0308 	add.w	r3, r7, #8
 801477e:	4618      	mov	r0, r3
 8014780:	f7ee fe9c 	bl	80034bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014784:	6839      	ldr	r1, [r7, #0]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	68ba      	ldr	r2, [r7, #8]
 801478a:	9202      	str	r2, [sp, #8]
 801478c:	9301      	str	r3, [sp, #4]
 801478e:	2300      	movs	r3, #0
 8014790:	9300      	str	r3, [sp, #0]
 8014792:	2300      	movs	r3, #0
 8014794:	460a      	mov	r2, r1
 8014796:	4923      	ldr	r1, [pc, #140]	@ (8014824 <vTaskStartScheduler+0xbc>)
 8014798:	4823      	ldr	r0, [pc, #140]	@ (8014828 <vTaskStartScheduler+0xc0>)
 801479a:	f7ff fc3d 	bl	8014018 <xTaskCreateStatic>
 801479e:	4603      	mov	r3, r0
 80147a0:	4a22      	ldr	r2, [pc, #136]	@ (801482c <vTaskStartScheduler+0xc4>)
 80147a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80147a4:	4b21      	ldr	r3, [pc, #132]	@ (801482c <vTaskStartScheduler+0xc4>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d002      	beq.n	80147b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80147ac:	2301      	movs	r3, #1
 80147ae:	617b      	str	r3, [r7, #20]
 80147b0:	e001      	b.n	80147b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80147b2:	2300      	movs	r3, #0
 80147b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d11d      	bne.n	80147f8 <vTaskStartScheduler+0x90>
	__asm volatile
 80147bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147c0:	b672      	cpsid	i
 80147c2:	f383 8811 	msr	BASEPRI, r3
 80147c6:	f3bf 8f6f 	isb	sy
 80147ca:	f3bf 8f4f 	dsb	sy
 80147ce:	b662      	cpsie	i
 80147d0:	613b      	str	r3, [r7, #16]
}
 80147d2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80147d4:	4b16      	ldr	r3, [pc, #88]	@ (8014830 <vTaskStartScheduler+0xc8>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	334c      	adds	r3, #76	@ 0x4c
 80147da:	4a16      	ldr	r2, [pc, #88]	@ (8014834 <vTaskStartScheduler+0xcc>)
 80147dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80147de:	4b16      	ldr	r3, [pc, #88]	@ (8014838 <vTaskStartScheduler+0xd0>)
 80147e0:	f04f 32ff 	mov.w	r2, #4294967295
 80147e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80147e6:	4b15      	ldr	r3, [pc, #84]	@ (801483c <vTaskStartScheduler+0xd4>)
 80147e8:	2201      	movs	r2, #1
 80147ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80147ec:	4b14      	ldr	r3, [pc, #80]	@ (8014840 <vTaskStartScheduler+0xd8>)
 80147ee:	2200      	movs	r2, #0
 80147f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80147f2:	f000 ff0d 	bl	8015610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80147f6:	e011      	b.n	801481c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147fe:	d10d      	bne.n	801481c <vTaskStartScheduler+0xb4>
	__asm volatile
 8014800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014804:	b672      	cpsid	i
 8014806:	f383 8811 	msr	BASEPRI, r3
 801480a:	f3bf 8f6f 	isb	sy
 801480e:	f3bf 8f4f 	dsb	sy
 8014812:	b662      	cpsie	i
 8014814:	60fb      	str	r3, [r7, #12]
}
 8014816:	bf00      	nop
 8014818:	bf00      	nop
 801481a:	e7fd      	b.n	8014818 <vTaskStartScheduler+0xb0>
}
 801481c:	bf00      	nop
 801481e:	3718      	adds	r7, #24
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	08017400 	.word	0x08017400
 8014828:	08014ea1 	.word	0x08014ea1
 801482c:	20001694 	.word	0x20001694
 8014830:	20001570 	.word	0x20001570
 8014834:	200000a8 	.word	0x200000a8
 8014838:	20001690 	.word	0x20001690
 801483c:	2000167c 	.word	0x2000167c
 8014840:	20001674 	.word	0x20001674

08014844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014844:	b480      	push	{r7}
 8014846:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014848:	4b04      	ldr	r3, [pc, #16]	@ (801485c <vTaskSuspendAll+0x18>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	3301      	adds	r3, #1
 801484e:	4a03      	ldr	r2, [pc, #12]	@ (801485c <vTaskSuspendAll+0x18>)
 8014850:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014852:	bf00      	nop
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr
 801485c:	20001698 	.word	0x20001698

08014860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014866:	2300      	movs	r3, #0
 8014868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801486a:	2300      	movs	r3, #0
 801486c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801486e:	4b43      	ldr	r3, [pc, #268]	@ (801497c <xTaskResumeAll+0x11c>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d10d      	bne.n	8014892 <xTaskResumeAll+0x32>
	__asm volatile
 8014876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801487a:	b672      	cpsid	i
 801487c:	f383 8811 	msr	BASEPRI, r3
 8014880:	f3bf 8f6f 	isb	sy
 8014884:	f3bf 8f4f 	dsb	sy
 8014888:	b662      	cpsie	i
 801488a:	603b      	str	r3, [r7, #0]
}
 801488c:	bf00      	nop
 801488e:	bf00      	nop
 8014890:	e7fd      	b.n	801488e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014892:	f000 ff3b 	bl	801570c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014896:	4b39      	ldr	r3, [pc, #228]	@ (801497c <xTaskResumeAll+0x11c>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	3b01      	subs	r3, #1
 801489c:	4a37      	ldr	r2, [pc, #220]	@ (801497c <xTaskResumeAll+0x11c>)
 801489e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148a0:	4b36      	ldr	r3, [pc, #216]	@ (801497c <xTaskResumeAll+0x11c>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d161      	bne.n	801496c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80148a8:	4b35      	ldr	r3, [pc, #212]	@ (8014980 <xTaskResumeAll+0x120>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d05d      	beq.n	801496c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148b0:	e02e      	b.n	8014910 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148b2:	4b34      	ldr	r3, [pc, #208]	@ (8014984 <xTaskResumeAll+0x124>)
 80148b4:	68db      	ldr	r3, [r3, #12]
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	3318      	adds	r3, #24
 80148be:	4618      	mov	r0, r3
 80148c0:	f7fe fb98 	bl	8012ff4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	3304      	adds	r3, #4
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7fe fb93 	bl	8012ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148d2:	2201      	movs	r2, #1
 80148d4:	409a      	lsls	r2, r3
 80148d6:	4b2c      	ldr	r3, [pc, #176]	@ (8014988 <xTaskResumeAll+0x128>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	4313      	orrs	r3, r2
 80148dc:	4a2a      	ldr	r2, [pc, #168]	@ (8014988 <xTaskResumeAll+0x128>)
 80148de:	6013      	str	r3, [r2, #0]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148e4:	4613      	mov	r3, r2
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	4413      	add	r3, r2
 80148ea:	009b      	lsls	r3, r3, #2
 80148ec:	4a27      	ldr	r2, [pc, #156]	@ (801498c <xTaskResumeAll+0x12c>)
 80148ee:	441a      	add	r2, r3
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	3304      	adds	r3, #4
 80148f4:	4619      	mov	r1, r3
 80148f6:	4610      	mov	r0, r2
 80148f8:	f7fe fb1f 	bl	8012f3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014900:	4b23      	ldr	r3, [pc, #140]	@ (8014990 <xTaskResumeAll+0x130>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014906:	429a      	cmp	r2, r3
 8014908:	d302      	bcc.n	8014910 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801490a:	4b22      	ldr	r3, [pc, #136]	@ (8014994 <xTaskResumeAll+0x134>)
 801490c:	2201      	movs	r2, #1
 801490e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014910:	4b1c      	ldr	r3, [pc, #112]	@ (8014984 <xTaskResumeAll+0x124>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d1cc      	bne.n	80148b2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d001      	beq.n	8014922 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801491e:	f000 fb7f 	bl	8015020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014922:	4b1d      	ldr	r3, [pc, #116]	@ (8014998 <xTaskResumeAll+0x138>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d010      	beq.n	8014950 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801492e:	f000 f859 	bl	80149e4 <xTaskIncrementTick>
 8014932:	4603      	mov	r3, r0
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8014938:	4b16      	ldr	r3, [pc, #88]	@ (8014994 <xTaskResumeAll+0x134>)
 801493a:	2201      	movs	r2, #1
 801493c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	3b01      	subs	r3, #1
 8014942:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d1f1      	bne.n	801492e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801494a:	4b13      	ldr	r3, [pc, #76]	@ (8014998 <xTaskResumeAll+0x138>)
 801494c:	2200      	movs	r2, #0
 801494e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014950:	4b10      	ldr	r3, [pc, #64]	@ (8014994 <xTaskResumeAll+0x134>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d009      	beq.n	801496c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014958:	2301      	movs	r3, #1
 801495a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801495c:	4b0f      	ldr	r3, [pc, #60]	@ (801499c <xTaskResumeAll+0x13c>)
 801495e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014962:	601a      	str	r2, [r3, #0]
 8014964:	f3bf 8f4f 	dsb	sy
 8014968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801496c:	f000 ff04 	bl	8015778 <vPortExitCritical>

	return xAlreadyYielded;
 8014970:	68bb      	ldr	r3, [r7, #8]
}
 8014972:	4618      	mov	r0, r3
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	20001698 	.word	0x20001698
 8014980:	20001670 	.word	0x20001670
 8014984:	20001630 	.word	0x20001630
 8014988:	20001678 	.word	0x20001678
 801498c:	20001574 	.word	0x20001574
 8014990:	20001570 	.word	0x20001570
 8014994:	20001684 	.word	0x20001684
 8014998:	20001680 	.word	0x20001680
 801499c:	e000ed04 	.word	0xe000ed04

080149a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80149a0:	b480      	push	{r7}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80149a6:	4b05      	ldr	r3, [pc, #20]	@ (80149bc <xTaskGetTickCount+0x1c>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80149ac:	687b      	ldr	r3, [r7, #4]
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	370c      	adds	r7, #12
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr
 80149ba:	bf00      	nop
 80149bc:	20001674 	.word	0x20001674

080149c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149c6:	f000 ff89 	bl	80158dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80149ca:	2300      	movs	r3, #0
 80149cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80149ce:	4b04      	ldr	r3, [pc, #16]	@ (80149e0 <xTaskGetTickCountFromISR+0x20>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80149d4:	683b      	ldr	r3, [r7, #0]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3708      	adds	r7, #8
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	20001674 	.word	0x20001674

080149e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b086      	sub	sp, #24
 80149e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80149ea:	2300      	movs	r3, #0
 80149ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149ee:	4b50      	ldr	r3, [pc, #320]	@ (8014b30 <xTaskIncrementTick+0x14c>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	f040 808b 	bne.w	8014b0e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80149f8:	4b4e      	ldr	r3, [pc, #312]	@ (8014b34 <xTaskIncrementTick+0x150>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	3301      	adds	r3, #1
 80149fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014a00:	4a4c      	ldr	r2, [pc, #304]	@ (8014b34 <xTaskIncrementTick+0x150>)
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d123      	bne.n	8014a54 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8014a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8014b38 <xTaskIncrementTick+0x154>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d00d      	beq.n	8014a32 <xTaskIncrementTick+0x4e>
	__asm volatile
 8014a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a1a:	b672      	cpsid	i
 8014a1c:	f383 8811 	msr	BASEPRI, r3
 8014a20:	f3bf 8f6f 	isb	sy
 8014a24:	f3bf 8f4f 	dsb	sy
 8014a28:	b662      	cpsie	i
 8014a2a:	603b      	str	r3, [r7, #0]
}
 8014a2c:	bf00      	nop
 8014a2e:	bf00      	nop
 8014a30:	e7fd      	b.n	8014a2e <xTaskIncrementTick+0x4a>
 8014a32:	4b41      	ldr	r3, [pc, #260]	@ (8014b38 <xTaskIncrementTick+0x154>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	60fb      	str	r3, [r7, #12]
 8014a38:	4b40      	ldr	r3, [pc, #256]	@ (8014b3c <xTaskIncrementTick+0x158>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8014b38 <xTaskIncrementTick+0x154>)
 8014a3e:	6013      	str	r3, [r2, #0]
 8014a40:	4a3e      	ldr	r2, [pc, #248]	@ (8014b3c <xTaskIncrementTick+0x158>)
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	6013      	str	r3, [r2, #0]
 8014a46:	4b3e      	ldr	r3, [pc, #248]	@ (8014b40 <xTaskIncrementTick+0x15c>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8014b40 <xTaskIncrementTick+0x15c>)
 8014a4e:	6013      	str	r3, [r2, #0]
 8014a50:	f000 fae6 	bl	8015020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014a54:	4b3b      	ldr	r3, [pc, #236]	@ (8014b44 <xTaskIncrementTick+0x160>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	693a      	ldr	r2, [r7, #16]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d348      	bcc.n	8014af0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a5e:	4b36      	ldr	r3, [pc, #216]	@ (8014b38 <xTaskIncrementTick+0x154>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d104      	bne.n	8014a72 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a68:	4b36      	ldr	r3, [pc, #216]	@ (8014b44 <xTaskIncrementTick+0x160>)
 8014a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8014a6e:	601a      	str	r2, [r3, #0]
					break;
 8014a70:	e03e      	b.n	8014af0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a72:	4b31      	ldr	r3, [pc, #196]	@ (8014b38 <xTaskIncrementTick+0x154>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	68db      	ldr	r3, [r3, #12]
 8014a78:	68db      	ldr	r3, [r3, #12]
 8014a7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	685b      	ldr	r3, [r3, #4]
 8014a80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a82:	693a      	ldr	r2, [r7, #16]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d203      	bcs.n	8014a92 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8014b44 <xTaskIncrementTick+0x160>)
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a90:	e02e      	b.n	8014af0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	3304      	adds	r3, #4
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7fe faac 	bl	8012ff4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d004      	beq.n	8014aae <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	3318      	adds	r3, #24
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7fe faa3 	bl	8012ff4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	409a      	lsls	r2, r3
 8014ab6:	4b24      	ldr	r3, [pc, #144]	@ (8014b48 <xTaskIncrementTick+0x164>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	4313      	orrs	r3, r2
 8014abc:	4a22      	ldr	r2, [pc, #136]	@ (8014b48 <xTaskIncrementTick+0x164>)
 8014abe:	6013      	str	r3, [r2, #0]
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	4413      	add	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4a1f      	ldr	r2, [pc, #124]	@ (8014b4c <xTaskIncrementTick+0x168>)
 8014ace:	441a      	add	r2, r3
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	3304      	adds	r3, #4
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	4610      	mov	r0, r2
 8014ad8:	f7fe fa2f 	bl	8012f3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8014b50 <xTaskIncrementTick+0x16c>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d3b9      	bcc.n	8014a5e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8014aea:	2301      	movs	r3, #1
 8014aec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014aee:	e7b6      	b.n	8014a5e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014af0:	4b17      	ldr	r3, [pc, #92]	@ (8014b50 <xTaskIncrementTick+0x16c>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014af6:	4915      	ldr	r1, [pc, #84]	@ (8014b4c <xTaskIncrementTick+0x168>)
 8014af8:	4613      	mov	r3, r2
 8014afa:	009b      	lsls	r3, r3, #2
 8014afc:	4413      	add	r3, r2
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	440b      	add	r3, r1
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d907      	bls.n	8014b18 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	617b      	str	r3, [r7, #20]
 8014b0c:	e004      	b.n	8014b18 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014b0e:	4b11      	ldr	r3, [pc, #68]	@ (8014b54 <xTaskIncrementTick+0x170>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	3301      	adds	r3, #1
 8014b14:	4a0f      	ldr	r2, [pc, #60]	@ (8014b54 <xTaskIncrementTick+0x170>)
 8014b16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014b18:	4b0f      	ldr	r3, [pc, #60]	@ (8014b58 <xTaskIncrementTick+0x174>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d001      	beq.n	8014b24 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014b20:	2301      	movs	r3, #1
 8014b22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014b24:	697b      	ldr	r3, [r7, #20]
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	3718      	adds	r7, #24
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	20001698 	.word	0x20001698
 8014b34:	20001674 	.word	0x20001674
 8014b38:	20001628 	.word	0x20001628
 8014b3c:	2000162c 	.word	0x2000162c
 8014b40:	20001688 	.word	0x20001688
 8014b44:	20001690 	.word	0x20001690
 8014b48:	20001678 	.word	0x20001678
 8014b4c:	20001574 	.word	0x20001574
 8014b50:	20001570 	.word	0x20001570
 8014b54:	20001680 	.word	0x20001680
 8014b58:	20001684 	.word	0x20001684

08014b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b088      	sub	sp, #32
 8014b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b62:	4b3d      	ldr	r3, [pc, #244]	@ (8014c58 <vTaskSwitchContext+0xfc>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d003      	beq.n	8014b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8014c5c <vTaskSwitchContext+0x100>)
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b70:	e06e      	b.n	8014c50 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8014b72:	4b3a      	ldr	r3, [pc, #232]	@ (8014c5c <vTaskSwitchContext+0x100>)
 8014b74:	2200      	movs	r2, #0
 8014b76:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014b78:	4b39      	ldr	r3, [pc, #228]	@ (8014c60 <vTaskSwitchContext+0x104>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b7e:	61fb      	str	r3, [r7, #28]
 8014b80:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014b84:	61bb      	str	r3, [r7, #24]
 8014b86:	69fb      	ldr	r3, [r7, #28]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	69ba      	ldr	r2, [r7, #24]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d111      	bne.n	8014bb4 <vTaskSwitchContext+0x58>
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	3304      	adds	r3, #4
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	69ba      	ldr	r2, [r7, #24]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d10b      	bne.n	8014bb4 <vTaskSwitchContext+0x58>
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	3308      	adds	r3, #8
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	69ba      	ldr	r2, [r7, #24]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d105      	bne.n	8014bb4 <vTaskSwitchContext+0x58>
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	330c      	adds	r3, #12
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	69ba      	ldr	r2, [r7, #24]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d008      	beq.n	8014bc6 <vTaskSwitchContext+0x6a>
 8014bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8014c60 <vTaskSwitchContext+0x104>)
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	4b29      	ldr	r3, [pc, #164]	@ (8014c60 <vTaskSwitchContext+0x104>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	3334      	adds	r3, #52	@ 0x34
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	4610      	mov	r0, r2
 8014bc2:	f7ee fc68 	bl	8003496 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bc6:	4b27      	ldr	r3, [pc, #156]	@ (8014c64 <vTaskSwitchContext+0x108>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	fab3 f383 	clz	r3, r3
 8014bd2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014bd4:	7afb      	ldrb	r3, [r7, #11]
 8014bd6:	f1c3 031f 	rsb	r3, r3, #31
 8014bda:	617b      	str	r3, [r7, #20]
 8014bdc:	4922      	ldr	r1, [pc, #136]	@ (8014c68 <vTaskSwitchContext+0x10c>)
 8014bde:	697a      	ldr	r2, [r7, #20]
 8014be0:	4613      	mov	r3, r2
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	4413      	add	r3, r2
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	440b      	add	r3, r1
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d10d      	bne.n	8014c0c <vTaskSwitchContext+0xb0>
	__asm volatile
 8014bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bf4:	b672      	cpsid	i
 8014bf6:	f383 8811 	msr	BASEPRI, r3
 8014bfa:	f3bf 8f6f 	isb	sy
 8014bfe:	f3bf 8f4f 	dsb	sy
 8014c02:	b662      	cpsie	i
 8014c04:	607b      	str	r3, [r7, #4]
}
 8014c06:	bf00      	nop
 8014c08:	bf00      	nop
 8014c0a:	e7fd      	b.n	8014c08 <vTaskSwitchContext+0xac>
 8014c0c:	697a      	ldr	r2, [r7, #20]
 8014c0e:	4613      	mov	r3, r2
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	4413      	add	r3, r2
 8014c14:	009b      	lsls	r3, r3, #2
 8014c16:	4a14      	ldr	r2, [pc, #80]	@ (8014c68 <vTaskSwitchContext+0x10c>)
 8014c18:	4413      	add	r3, r2
 8014c1a:	613b      	str	r3, [r7, #16]
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	685a      	ldr	r2, [r3, #4]
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	605a      	str	r2, [r3, #4]
 8014c26:	693b      	ldr	r3, [r7, #16]
 8014c28:	685a      	ldr	r2, [r3, #4]
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	3308      	adds	r3, #8
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d104      	bne.n	8014c3c <vTaskSwitchContext+0xe0>
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	685a      	ldr	r2, [r3, #4]
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	605a      	str	r2, [r3, #4]
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	4a07      	ldr	r2, [pc, #28]	@ (8014c60 <vTaskSwitchContext+0x104>)
 8014c44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014c46:	4b06      	ldr	r3, [pc, #24]	@ (8014c60 <vTaskSwitchContext+0x104>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	334c      	adds	r3, #76	@ 0x4c
 8014c4c:	4a07      	ldr	r2, [pc, #28]	@ (8014c6c <vTaskSwitchContext+0x110>)
 8014c4e:	6013      	str	r3, [r2, #0]
}
 8014c50:	bf00      	nop
 8014c52:	3720      	adds	r7, #32
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}
 8014c58:	20001698 	.word	0x20001698
 8014c5c:	20001684 	.word	0x20001684
 8014c60:	20001570 	.word	0x20001570
 8014c64:	20001678 	.word	0x20001678
 8014c68:	20001574 	.word	0x20001574
 8014c6c:	200000a8 	.word	0x200000a8

08014c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
 8014c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d10d      	bne.n	8014c9c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c84:	b672      	cpsid	i
 8014c86:	f383 8811 	msr	BASEPRI, r3
 8014c8a:	f3bf 8f6f 	isb	sy
 8014c8e:	f3bf 8f4f 	dsb	sy
 8014c92:	b662      	cpsie	i
 8014c94:	60fb      	str	r3, [r7, #12]
}
 8014c96:	bf00      	nop
 8014c98:	bf00      	nop
 8014c9a:	e7fd      	b.n	8014c98 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c9c:	4b07      	ldr	r3, [pc, #28]	@ (8014cbc <vTaskPlaceOnEventList+0x4c>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	3318      	adds	r3, #24
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f7fe f96c 	bl	8012f82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014caa:	2101      	movs	r1, #1
 8014cac:	6838      	ldr	r0, [r7, #0]
 8014cae:	f000 fbb5 	bl	801541c <prvAddCurrentTaskToDelayedList>
}
 8014cb2:	bf00      	nop
 8014cb4:	3710      	adds	r7, #16
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	20001570 	.word	0x20001570

08014cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10d      	bne.n	8014cf2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cda:	b672      	cpsid	i
 8014cdc:	f383 8811 	msr	BASEPRI, r3
 8014ce0:	f3bf 8f6f 	isb	sy
 8014ce4:	f3bf 8f4f 	dsb	sy
 8014ce8:	b662      	cpsie	i
 8014cea:	60fb      	str	r3, [r7, #12]
}
 8014cec:	bf00      	nop
 8014cee:	bf00      	nop
 8014cf0:	e7fd      	b.n	8014cee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	3318      	adds	r3, #24
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7fe f97c 	bl	8012ff4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8014d74 <xTaskRemoveFromEventList+0xb4>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d11c      	bne.n	8014d3e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	3304      	adds	r3, #4
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7fe f973 	bl	8012ff4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d12:	2201      	movs	r2, #1
 8014d14:	409a      	lsls	r2, r3
 8014d16:	4b18      	ldr	r3, [pc, #96]	@ (8014d78 <xTaskRemoveFromEventList+0xb8>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	4313      	orrs	r3, r2
 8014d1c:	4a16      	ldr	r2, [pc, #88]	@ (8014d78 <xTaskRemoveFromEventList+0xb8>)
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d24:	4613      	mov	r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4413      	add	r3, r2
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	4a13      	ldr	r2, [pc, #76]	@ (8014d7c <xTaskRemoveFromEventList+0xbc>)
 8014d2e:	441a      	add	r2, r3
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	3304      	adds	r3, #4
 8014d34:	4619      	mov	r1, r3
 8014d36:	4610      	mov	r0, r2
 8014d38:	f7fe f8ff 	bl	8012f3a <vListInsertEnd>
 8014d3c:	e005      	b.n	8014d4a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	3318      	adds	r3, #24
 8014d42:	4619      	mov	r1, r3
 8014d44:	480e      	ldr	r0, [pc, #56]	@ (8014d80 <xTaskRemoveFromEventList+0xc0>)
 8014d46:	f7fe f8f8 	bl	8012f3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8014d84 <xTaskRemoveFromEventList+0xc4>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d905      	bls.n	8014d64 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d58:	2301      	movs	r3, #1
 8014d5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8014d88 <xTaskRemoveFromEventList+0xc8>)
 8014d5e:	2201      	movs	r2, #1
 8014d60:	601a      	str	r2, [r3, #0]
 8014d62:	e001      	b.n	8014d68 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014d64:	2300      	movs	r3, #0
 8014d66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d68:	697b      	ldr	r3, [r7, #20]
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3718      	adds	r7, #24
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	20001698 	.word	0x20001698
 8014d78:	20001678 	.word	0x20001678
 8014d7c:	20001574 	.word	0x20001574
 8014d80:	20001630 	.word	0x20001630
 8014d84:	20001570 	.word	0x20001570
 8014d88:	20001684 	.word	0x20001684

08014d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b083      	sub	sp, #12
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d94:	4b06      	ldr	r3, [pc, #24]	@ (8014db0 <vTaskInternalSetTimeOutState+0x24>)
 8014d96:	681a      	ldr	r2, [r3, #0]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d9c:	4b05      	ldr	r3, [pc, #20]	@ (8014db4 <vTaskInternalSetTimeOutState+0x28>)
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	605a      	str	r2, [r3, #4]
}
 8014da4:	bf00      	nop
 8014da6:	370c      	adds	r7, #12
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr
 8014db0:	20001688 	.word	0x20001688
 8014db4:	20001674 	.word	0x20001674

08014db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b088      	sub	sp, #32
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d10d      	bne.n	8014de4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dcc:	b672      	cpsid	i
 8014dce:	f383 8811 	msr	BASEPRI, r3
 8014dd2:	f3bf 8f6f 	isb	sy
 8014dd6:	f3bf 8f4f 	dsb	sy
 8014dda:	b662      	cpsie	i
 8014ddc:	613b      	str	r3, [r7, #16]
}
 8014dde:	bf00      	nop
 8014de0:	bf00      	nop
 8014de2:	e7fd      	b.n	8014de0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d10d      	bne.n	8014e06 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dee:	b672      	cpsid	i
 8014df0:	f383 8811 	msr	BASEPRI, r3
 8014df4:	f3bf 8f6f 	isb	sy
 8014df8:	f3bf 8f4f 	dsb	sy
 8014dfc:	b662      	cpsie	i
 8014dfe:	60fb      	str	r3, [r7, #12]
}
 8014e00:	bf00      	nop
 8014e02:	bf00      	nop
 8014e04:	e7fd      	b.n	8014e02 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014e06:	f000 fc81 	bl	801570c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8014e80 <xTaskCheckForTimeOut+0xc8>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	685b      	ldr	r3, [r3, #4]
 8014e14:	69ba      	ldr	r2, [r7, #24]
 8014e16:	1ad3      	subs	r3, r2, r3
 8014e18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e22:	d102      	bne.n	8014e2a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e24:	2300      	movs	r3, #0
 8014e26:	61fb      	str	r3, [r7, #28]
 8014e28:	e023      	b.n	8014e72 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681a      	ldr	r2, [r3, #0]
 8014e2e:	4b15      	ldr	r3, [pc, #84]	@ (8014e84 <xTaskCheckForTimeOut+0xcc>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	429a      	cmp	r2, r3
 8014e34:	d007      	beq.n	8014e46 <xTaskCheckForTimeOut+0x8e>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	69ba      	ldr	r2, [r7, #24]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d302      	bcc.n	8014e46 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e40:	2301      	movs	r3, #1
 8014e42:	61fb      	str	r3, [r7, #28]
 8014e44:	e015      	b.n	8014e72 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	697a      	ldr	r2, [r7, #20]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d20b      	bcs.n	8014e68 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	1ad2      	subs	r2, r2, r3
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7ff ff95 	bl	8014d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e62:	2300      	movs	r3, #0
 8014e64:	61fb      	str	r3, [r7, #28]
 8014e66:	e004      	b.n	8014e72 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e6e:	2301      	movs	r3, #1
 8014e70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e72:	f000 fc81 	bl	8015778 <vPortExitCritical>

	return xReturn;
 8014e76:	69fb      	ldr	r3, [r7, #28]
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3720      	adds	r7, #32
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	20001674 	.word	0x20001674
 8014e84:	20001688 	.word	0x20001688

08014e88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e88:	b480      	push	{r7}
 8014e8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e8c:	4b03      	ldr	r3, [pc, #12]	@ (8014e9c <vTaskMissedYield+0x14>)
 8014e8e:	2201      	movs	r2, #1
 8014e90:	601a      	str	r2, [r3, #0]
}
 8014e92:	bf00      	nop
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr
 8014e9c:	20001684 	.word	0x20001684

08014ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ea8:	f000 f854 	bl	8014f54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014eac:	4b07      	ldr	r3, [pc, #28]	@ (8014ecc <prvIdleTask+0x2c>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d907      	bls.n	8014ec4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8014eb4:	4b06      	ldr	r3, [pc, #24]	@ (8014ed0 <prvIdleTask+0x30>)
 8014eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014eba:	601a      	str	r2, [r3, #0]
 8014ebc:	f3bf 8f4f 	dsb	sy
 8014ec0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014ec4:	f7ee fae0 	bl	8003488 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014ec8:	e7ee      	b.n	8014ea8 <prvIdleTask+0x8>
 8014eca:	bf00      	nop
 8014ecc:	20001574 	.word	0x20001574
 8014ed0:	e000ed04 	.word	0xe000ed04

08014ed4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014eda:	2300      	movs	r3, #0
 8014edc:	607b      	str	r3, [r7, #4]
 8014ede:	e00c      	b.n	8014efa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ee0:	687a      	ldr	r2, [r7, #4]
 8014ee2:	4613      	mov	r3, r2
 8014ee4:	009b      	lsls	r3, r3, #2
 8014ee6:	4413      	add	r3, r2
 8014ee8:	009b      	lsls	r3, r3, #2
 8014eea:	4a12      	ldr	r2, [pc, #72]	@ (8014f34 <prvInitialiseTaskLists+0x60>)
 8014eec:	4413      	add	r3, r2
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fd fff6 	bl	8012ee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	607b      	str	r3, [r7, #4]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2b06      	cmp	r3, #6
 8014efe:	d9ef      	bls.n	8014ee0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f00:	480d      	ldr	r0, [pc, #52]	@ (8014f38 <prvInitialiseTaskLists+0x64>)
 8014f02:	f7fd ffed 	bl	8012ee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f06:	480d      	ldr	r0, [pc, #52]	@ (8014f3c <prvInitialiseTaskLists+0x68>)
 8014f08:	f7fd ffea 	bl	8012ee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014f0c:	480c      	ldr	r0, [pc, #48]	@ (8014f40 <prvInitialiseTaskLists+0x6c>)
 8014f0e:	f7fd ffe7 	bl	8012ee0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014f12:	480c      	ldr	r0, [pc, #48]	@ (8014f44 <prvInitialiseTaskLists+0x70>)
 8014f14:	f7fd ffe4 	bl	8012ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f18:	480b      	ldr	r0, [pc, #44]	@ (8014f48 <prvInitialiseTaskLists+0x74>)
 8014f1a:	f7fd ffe1 	bl	8012ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8014f4c <prvInitialiseTaskLists+0x78>)
 8014f20:	4a05      	ldr	r2, [pc, #20]	@ (8014f38 <prvInitialiseTaskLists+0x64>)
 8014f22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f24:	4b0a      	ldr	r3, [pc, #40]	@ (8014f50 <prvInitialiseTaskLists+0x7c>)
 8014f26:	4a05      	ldr	r2, [pc, #20]	@ (8014f3c <prvInitialiseTaskLists+0x68>)
 8014f28:	601a      	str	r2, [r3, #0]
}
 8014f2a:	bf00      	nop
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	20001574 	.word	0x20001574
 8014f38:	20001600 	.word	0x20001600
 8014f3c:	20001614 	.word	0x20001614
 8014f40:	20001630 	.word	0x20001630
 8014f44:	20001644 	.word	0x20001644
 8014f48:	2000165c 	.word	0x2000165c
 8014f4c:	20001628 	.word	0x20001628
 8014f50:	2000162c 	.word	0x2000162c

08014f54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b082      	sub	sp, #8
 8014f58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f5a:	e019      	b.n	8014f90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f5c:	f000 fbd6 	bl	801570c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f60:	4b10      	ldr	r3, [pc, #64]	@ (8014fa4 <prvCheckTasksWaitingTermination+0x50>)
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	3304      	adds	r3, #4
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7fe f841 	bl	8012ff4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f72:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa8 <prvCheckTasksWaitingTermination+0x54>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	3b01      	subs	r3, #1
 8014f78:	4a0b      	ldr	r2, [pc, #44]	@ (8014fa8 <prvCheckTasksWaitingTermination+0x54>)
 8014f7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8014fac <prvCheckTasksWaitingTermination+0x58>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	3b01      	subs	r3, #1
 8014f82:	4a0a      	ldr	r2, [pc, #40]	@ (8014fac <prvCheckTasksWaitingTermination+0x58>)
 8014f84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f86:	f000 fbf7 	bl	8015778 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f000 f810 	bl	8014fb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f90:	4b06      	ldr	r3, [pc, #24]	@ (8014fac <prvCheckTasksWaitingTermination+0x58>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d1e1      	bne.n	8014f5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f98:	bf00      	nop
 8014f9a:	bf00      	nop
 8014f9c:	3708      	adds	r7, #8
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	20001644 	.word	0x20001644
 8014fa8:	20001670 	.word	0x20001670
 8014fac:	20001658 	.word	0x20001658

08014fb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	334c      	adds	r3, #76	@ 0x4c
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f001 f8f3 	bl	80161a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d108      	bne.n	8014fde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f000 fd9b 	bl	8015b0c <vPortFree>
				vPortFree( pxTCB );
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 fd98 	bl	8015b0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014fdc:	e01b      	b.n	8015016 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014fe4:	2b01      	cmp	r3, #1
 8014fe6:	d103      	bne.n	8014ff0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 fd8f 	bl	8015b0c <vPortFree>
	}
 8014fee:	e012      	b.n	8015016 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014ff6:	2b02      	cmp	r3, #2
 8014ff8:	d00d      	beq.n	8015016 <prvDeleteTCB+0x66>
	__asm volatile
 8014ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ffe:	b672      	cpsid	i
 8015000:	f383 8811 	msr	BASEPRI, r3
 8015004:	f3bf 8f6f 	isb	sy
 8015008:	f3bf 8f4f 	dsb	sy
 801500c:	b662      	cpsie	i
 801500e:	60fb      	str	r3, [r7, #12]
}
 8015010:	bf00      	nop
 8015012:	bf00      	nop
 8015014:	e7fd      	b.n	8015012 <prvDeleteTCB+0x62>
	}
 8015016:	bf00      	nop
 8015018:	3710      	adds	r7, #16
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
	...

08015020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015020:	b480      	push	{r7}
 8015022:	b083      	sub	sp, #12
 8015024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015026:	4b0c      	ldr	r3, [pc, #48]	@ (8015058 <prvResetNextTaskUnblockTime+0x38>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d104      	bne.n	801503a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015030:	4b0a      	ldr	r3, [pc, #40]	@ (801505c <prvResetNextTaskUnblockTime+0x3c>)
 8015032:	f04f 32ff 	mov.w	r2, #4294967295
 8015036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015038:	e008      	b.n	801504c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801503a:	4b07      	ldr	r3, [pc, #28]	@ (8015058 <prvResetNextTaskUnblockTime+0x38>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	68db      	ldr	r3, [r3, #12]
 8015040:	68db      	ldr	r3, [r3, #12]
 8015042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	685b      	ldr	r3, [r3, #4]
 8015048:	4a04      	ldr	r2, [pc, #16]	@ (801505c <prvResetNextTaskUnblockTime+0x3c>)
 801504a:	6013      	str	r3, [r2, #0]
}
 801504c:	bf00      	nop
 801504e:	370c      	adds	r7, #12
 8015050:	46bd      	mov	sp, r7
 8015052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015056:	4770      	bx	lr
 8015058:	20001628 	.word	0x20001628
 801505c:	20001690 	.word	0x20001690

08015060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015060:	b480      	push	{r7}
 8015062:	b083      	sub	sp, #12
 8015064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015066:	4b0b      	ldr	r3, [pc, #44]	@ (8015094 <xTaskGetSchedulerState+0x34>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d102      	bne.n	8015074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801506e:	2301      	movs	r3, #1
 8015070:	607b      	str	r3, [r7, #4]
 8015072:	e008      	b.n	8015086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015074:	4b08      	ldr	r3, [pc, #32]	@ (8015098 <xTaskGetSchedulerState+0x38>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d102      	bne.n	8015082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801507c:	2302      	movs	r3, #2
 801507e:	607b      	str	r3, [r7, #4]
 8015080:	e001      	b.n	8015086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015082:	2300      	movs	r3, #0
 8015084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015086:	687b      	ldr	r3, [r7, #4]
	}
 8015088:	4618      	mov	r0, r3
 801508a:	370c      	adds	r7, #12
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr
 8015094:	2000167c 	.word	0x2000167c
 8015098:	20001698 	.word	0x20001698

0801509c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80150a8:	2300      	movs	r3, #0
 80150aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d069      	beq.n	8015186 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150b6:	4b36      	ldr	r3, [pc, #216]	@ (8015190 <xTaskPriorityInherit+0xf4>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150bc:	429a      	cmp	r2, r3
 80150be:	d259      	bcs.n	8015174 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	699b      	ldr	r3, [r3, #24]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	db06      	blt.n	80150d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150c8:	4b31      	ldr	r3, [pc, #196]	@ (8015190 <xTaskPriorityInherit+0xf4>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150ce:	f1c3 0207 	rsb	r2, r3, #7
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	6959      	ldr	r1, [r3, #20]
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150de:	4613      	mov	r3, r2
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	4413      	add	r3, r2
 80150e4:	009b      	lsls	r3, r3, #2
 80150e6:	4a2b      	ldr	r2, [pc, #172]	@ (8015194 <xTaskPriorityInherit+0xf8>)
 80150e8:	4413      	add	r3, r2
 80150ea:	4299      	cmp	r1, r3
 80150ec:	d13a      	bne.n	8015164 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	3304      	adds	r3, #4
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7fd ff7e 	bl	8012ff4 <uxListRemove>
 80150f8:	4603      	mov	r3, r0
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d115      	bne.n	801512a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015102:	4924      	ldr	r1, [pc, #144]	@ (8015194 <xTaskPriorityInherit+0xf8>)
 8015104:	4613      	mov	r3, r2
 8015106:	009b      	lsls	r3, r3, #2
 8015108:	4413      	add	r3, r2
 801510a:	009b      	lsls	r3, r3, #2
 801510c:	440b      	add	r3, r1
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d10a      	bne.n	801512a <xTaskPriorityInherit+0x8e>
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015118:	2201      	movs	r2, #1
 801511a:	fa02 f303 	lsl.w	r3, r2, r3
 801511e:	43da      	mvns	r2, r3
 8015120:	4b1d      	ldr	r3, [pc, #116]	@ (8015198 <xTaskPriorityInherit+0xfc>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	4013      	ands	r3, r2
 8015126:	4a1c      	ldr	r2, [pc, #112]	@ (8015198 <xTaskPriorityInherit+0xfc>)
 8015128:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801512a:	4b19      	ldr	r3, [pc, #100]	@ (8015190 <xTaskPriorityInherit+0xf4>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015138:	2201      	movs	r2, #1
 801513a:	409a      	lsls	r2, r3
 801513c:	4b16      	ldr	r3, [pc, #88]	@ (8015198 <xTaskPriorityInherit+0xfc>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	4313      	orrs	r3, r2
 8015142:	4a15      	ldr	r2, [pc, #84]	@ (8015198 <xTaskPriorityInherit+0xfc>)
 8015144:	6013      	str	r3, [r2, #0]
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801514a:	4613      	mov	r3, r2
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	4413      	add	r3, r2
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	4a10      	ldr	r2, [pc, #64]	@ (8015194 <xTaskPriorityInherit+0xf8>)
 8015154:	441a      	add	r2, r3
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	3304      	adds	r3, #4
 801515a:	4619      	mov	r1, r3
 801515c:	4610      	mov	r0, r2
 801515e:	f7fd feec 	bl	8012f3a <vListInsertEnd>
 8015162:	e004      	b.n	801516e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015164:	4b0a      	ldr	r3, [pc, #40]	@ (8015190 <xTaskPriorityInherit+0xf4>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801516e:	2301      	movs	r3, #1
 8015170:	60fb      	str	r3, [r7, #12]
 8015172:	e008      	b.n	8015186 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015178:	4b05      	ldr	r3, [pc, #20]	@ (8015190 <xTaskPriorityInherit+0xf4>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801517e:	429a      	cmp	r2, r3
 8015180:	d201      	bcs.n	8015186 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015182:	2301      	movs	r3, #1
 8015184:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015186:	68fb      	ldr	r3, [r7, #12]
	}
 8015188:	4618      	mov	r0, r3
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	20001570 	.word	0x20001570
 8015194:	20001574 	.word	0x20001574
 8015198:	20001678 	.word	0x20001678

0801519c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801519c:	b580      	push	{r7, lr}
 801519e:	b086      	sub	sp, #24
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80151a8:	2300      	movs	r3, #0
 80151aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d074      	beq.n	801529c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80151b2:	4b3d      	ldr	r3, [pc, #244]	@ (80152a8 <xTaskPriorityDisinherit+0x10c>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	693a      	ldr	r2, [r7, #16]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d00d      	beq.n	80151d8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80151bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151c0:	b672      	cpsid	i
 80151c2:	f383 8811 	msr	BASEPRI, r3
 80151c6:	f3bf 8f6f 	isb	sy
 80151ca:	f3bf 8f4f 	dsb	sy
 80151ce:	b662      	cpsie	i
 80151d0:	60fb      	str	r3, [r7, #12]
}
 80151d2:	bf00      	nop
 80151d4:	bf00      	nop
 80151d6:	e7fd      	b.n	80151d4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80151d8:	693b      	ldr	r3, [r7, #16]
 80151da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d10d      	bne.n	80151fc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80151e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151e4:	b672      	cpsid	i
 80151e6:	f383 8811 	msr	BASEPRI, r3
 80151ea:	f3bf 8f6f 	isb	sy
 80151ee:	f3bf 8f4f 	dsb	sy
 80151f2:	b662      	cpsie	i
 80151f4:	60bb      	str	r3, [r7, #8]
}
 80151f6:	bf00      	nop
 80151f8:	bf00      	nop
 80151fa:	e7fd      	b.n	80151f8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015200:	1e5a      	subs	r2, r3, #1
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801520a:	693b      	ldr	r3, [r7, #16]
 801520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801520e:	429a      	cmp	r2, r3
 8015210:	d044      	beq.n	801529c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015216:	2b00      	cmp	r3, #0
 8015218:	d140      	bne.n	801529c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801521a:	693b      	ldr	r3, [r7, #16]
 801521c:	3304      	adds	r3, #4
 801521e:	4618      	mov	r0, r3
 8015220:	f7fd fee8 	bl	8012ff4 <uxListRemove>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d115      	bne.n	8015256 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801522e:	491f      	ldr	r1, [pc, #124]	@ (80152ac <xTaskPriorityDisinherit+0x110>)
 8015230:	4613      	mov	r3, r2
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	4413      	add	r3, r2
 8015236:	009b      	lsls	r3, r3, #2
 8015238:	440b      	add	r3, r1
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d10a      	bne.n	8015256 <xTaskPriorityDisinherit+0xba>
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015244:	2201      	movs	r2, #1
 8015246:	fa02 f303 	lsl.w	r3, r2, r3
 801524a:	43da      	mvns	r2, r3
 801524c:	4b18      	ldr	r3, [pc, #96]	@ (80152b0 <xTaskPriorityDisinherit+0x114>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4013      	ands	r3, r2
 8015252:	4a17      	ldr	r2, [pc, #92]	@ (80152b0 <xTaskPriorityDisinherit+0x114>)
 8015254:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801525a:	693b      	ldr	r3, [r7, #16]
 801525c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015262:	f1c3 0207 	rsb	r2, r3, #7
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801526e:	2201      	movs	r2, #1
 8015270:	409a      	lsls	r2, r3
 8015272:	4b0f      	ldr	r3, [pc, #60]	@ (80152b0 <xTaskPriorityDisinherit+0x114>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	4313      	orrs	r3, r2
 8015278:	4a0d      	ldr	r2, [pc, #52]	@ (80152b0 <xTaskPriorityDisinherit+0x114>)
 801527a:	6013      	str	r3, [r2, #0]
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015280:	4613      	mov	r3, r2
 8015282:	009b      	lsls	r3, r3, #2
 8015284:	4413      	add	r3, r2
 8015286:	009b      	lsls	r3, r3, #2
 8015288:	4a08      	ldr	r2, [pc, #32]	@ (80152ac <xTaskPriorityDisinherit+0x110>)
 801528a:	441a      	add	r2, r3
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	3304      	adds	r3, #4
 8015290:	4619      	mov	r1, r3
 8015292:	4610      	mov	r0, r2
 8015294:	f7fd fe51 	bl	8012f3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015298:	2301      	movs	r3, #1
 801529a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801529c:	697b      	ldr	r3, [r7, #20]
	}
 801529e:	4618      	mov	r0, r3
 80152a0:	3718      	adds	r7, #24
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	20001570 	.word	0x20001570
 80152ac:	20001574 	.word	0x20001574
 80152b0:	20001678 	.word	0x20001678

080152b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b088      	sub	sp, #32
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
 80152bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80152c2:	2301      	movs	r3, #1
 80152c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f000 8089 	beq.w	80153e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80152ce:	69bb      	ldr	r3, [r7, #24]
 80152d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d10d      	bne.n	80152f2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80152d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152da:	b672      	cpsid	i
 80152dc:	f383 8811 	msr	BASEPRI, r3
 80152e0:	f3bf 8f6f 	isb	sy
 80152e4:	f3bf 8f4f 	dsb	sy
 80152e8:	b662      	cpsie	i
 80152ea:	60fb      	str	r3, [r7, #12]
}
 80152ec:	bf00      	nop
 80152ee:	bf00      	nop
 80152f0:	e7fd      	b.n	80152ee <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152f6:	683a      	ldr	r2, [r7, #0]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d902      	bls.n	8015302 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	61fb      	str	r3, [r7, #28]
 8015300:	e002      	b.n	8015308 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015302:	69bb      	ldr	r3, [r7, #24]
 8015304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015306:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801530c:	69fa      	ldr	r2, [r7, #28]
 801530e:	429a      	cmp	r2, r3
 8015310:	d066      	beq.n	80153e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015312:	69bb      	ldr	r3, [r7, #24]
 8015314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015316:	697a      	ldr	r2, [r7, #20]
 8015318:	429a      	cmp	r2, r3
 801531a:	d161      	bne.n	80153e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801531c:	4b32      	ldr	r3, [pc, #200]	@ (80153e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	69ba      	ldr	r2, [r7, #24]
 8015322:	429a      	cmp	r2, r3
 8015324:	d10d      	bne.n	8015342 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8015326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801532a:	b672      	cpsid	i
 801532c:	f383 8811 	msr	BASEPRI, r3
 8015330:	f3bf 8f6f 	isb	sy
 8015334:	f3bf 8f4f 	dsb	sy
 8015338:	b662      	cpsie	i
 801533a:	60bb      	str	r3, [r7, #8]
}
 801533c:	bf00      	nop
 801533e:	bf00      	nop
 8015340:	e7fd      	b.n	801533e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015346:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015348:	69bb      	ldr	r3, [r7, #24]
 801534a:	69fa      	ldr	r2, [r7, #28]
 801534c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	699b      	ldr	r3, [r3, #24]
 8015352:	2b00      	cmp	r3, #0
 8015354:	db04      	blt.n	8015360 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	f1c3 0207 	rsb	r2, r3, #7
 801535c:	69bb      	ldr	r3, [r7, #24]
 801535e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015360:	69bb      	ldr	r3, [r7, #24]
 8015362:	6959      	ldr	r1, [r3, #20]
 8015364:	693a      	ldr	r2, [r7, #16]
 8015366:	4613      	mov	r3, r2
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	4413      	add	r3, r2
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	4a1f      	ldr	r2, [pc, #124]	@ (80153ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015370:	4413      	add	r3, r2
 8015372:	4299      	cmp	r1, r3
 8015374:	d134      	bne.n	80153e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015376:	69bb      	ldr	r3, [r7, #24]
 8015378:	3304      	adds	r3, #4
 801537a:	4618      	mov	r0, r3
 801537c:	f7fd fe3a 	bl	8012ff4 <uxListRemove>
 8015380:	4603      	mov	r3, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	d115      	bne.n	80153b2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015386:	69bb      	ldr	r3, [r7, #24]
 8015388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801538a:	4918      	ldr	r1, [pc, #96]	@ (80153ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801538c:	4613      	mov	r3, r2
 801538e:	009b      	lsls	r3, r3, #2
 8015390:	4413      	add	r3, r2
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	440b      	add	r3, r1
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d10a      	bne.n	80153b2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801539c:	69bb      	ldr	r3, [r7, #24]
 801539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153a0:	2201      	movs	r2, #1
 80153a2:	fa02 f303 	lsl.w	r3, r2, r3
 80153a6:	43da      	mvns	r2, r3
 80153a8:	4b11      	ldr	r3, [pc, #68]	@ (80153f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4013      	ands	r3, r2
 80153ae:	4a10      	ldr	r2, [pc, #64]	@ (80153f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80153b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153b6:	2201      	movs	r2, #1
 80153b8:	409a      	lsls	r2, r3
 80153ba:	4b0d      	ldr	r3, [pc, #52]	@ (80153f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	4313      	orrs	r3, r2
 80153c0:	4a0b      	ldr	r2, [pc, #44]	@ (80153f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80153c2:	6013      	str	r3, [r2, #0]
 80153c4:	69bb      	ldr	r3, [r7, #24]
 80153c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153c8:	4613      	mov	r3, r2
 80153ca:	009b      	lsls	r3, r3, #2
 80153cc:	4413      	add	r3, r2
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	4a06      	ldr	r2, [pc, #24]	@ (80153ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80153d2:	441a      	add	r2, r3
 80153d4:	69bb      	ldr	r3, [r7, #24]
 80153d6:	3304      	adds	r3, #4
 80153d8:	4619      	mov	r1, r3
 80153da:	4610      	mov	r0, r2
 80153dc:	f7fd fdad 	bl	8012f3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80153e0:	bf00      	nop
 80153e2:	3720      	adds	r7, #32
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	20001570 	.word	0x20001570
 80153ec:	20001574 	.word	0x20001574
 80153f0:	20001678 	.word	0x20001678

080153f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80153f4:	b480      	push	{r7}
 80153f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80153f8:	4b07      	ldr	r3, [pc, #28]	@ (8015418 <pvTaskIncrementMutexHeldCount+0x24>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d004      	beq.n	801540a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015400:	4b05      	ldr	r3, [pc, #20]	@ (8015418 <pvTaskIncrementMutexHeldCount+0x24>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015406:	3201      	adds	r2, #1
 8015408:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801540a:	4b03      	ldr	r3, [pc, #12]	@ (8015418 <pvTaskIncrementMutexHeldCount+0x24>)
 801540c:	681b      	ldr	r3, [r3, #0]
	}
 801540e:	4618      	mov	r0, r3
 8015410:	46bd      	mov	sp, r7
 8015412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015416:	4770      	bx	lr
 8015418:	20001570 	.word	0x20001570

0801541c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
 8015424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015426:	4b29      	ldr	r3, [pc, #164]	@ (80154cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801542c:	4b28      	ldr	r3, [pc, #160]	@ (80154d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	3304      	adds	r3, #4
 8015432:	4618      	mov	r0, r3
 8015434:	f7fd fdde 	bl	8012ff4 <uxListRemove>
 8015438:	4603      	mov	r3, r0
 801543a:	2b00      	cmp	r3, #0
 801543c:	d10b      	bne.n	8015456 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801543e:	4b24      	ldr	r3, [pc, #144]	@ (80154d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015444:	2201      	movs	r2, #1
 8015446:	fa02 f303 	lsl.w	r3, r2, r3
 801544a:	43da      	mvns	r2, r3
 801544c:	4b21      	ldr	r3, [pc, #132]	@ (80154d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4013      	ands	r3, r2
 8015452:	4a20      	ldr	r2, [pc, #128]	@ (80154d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015454:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801545c:	d10a      	bne.n	8015474 <prvAddCurrentTaskToDelayedList+0x58>
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d007      	beq.n	8015474 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015464:	4b1a      	ldr	r3, [pc, #104]	@ (80154d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	3304      	adds	r3, #4
 801546a:	4619      	mov	r1, r3
 801546c:	481a      	ldr	r0, [pc, #104]	@ (80154d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801546e:	f7fd fd64 	bl	8012f3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015472:	e026      	b.n	80154c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	4413      	add	r3, r2
 801547a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801547c:	4b14      	ldr	r3, [pc, #80]	@ (80154d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	68ba      	ldr	r2, [r7, #8]
 8015482:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015484:	68ba      	ldr	r2, [r7, #8]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	429a      	cmp	r2, r3
 801548a:	d209      	bcs.n	80154a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801548c:	4b13      	ldr	r3, [pc, #76]	@ (80154dc <prvAddCurrentTaskToDelayedList+0xc0>)
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	4b0f      	ldr	r3, [pc, #60]	@ (80154d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	3304      	adds	r3, #4
 8015496:	4619      	mov	r1, r3
 8015498:	4610      	mov	r0, r2
 801549a:	f7fd fd72 	bl	8012f82 <vListInsert>
}
 801549e:	e010      	b.n	80154c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154a0:	4b0f      	ldr	r3, [pc, #60]	@ (80154e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	4b0a      	ldr	r3, [pc, #40]	@ (80154d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	3304      	adds	r3, #4
 80154aa:	4619      	mov	r1, r3
 80154ac:	4610      	mov	r0, r2
 80154ae:	f7fd fd68 	bl	8012f82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80154b2:	4b0c      	ldr	r3, [pc, #48]	@ (80154e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	68ba      	ldr	r2, [r7, #8]
 80154b8:	429a      	cmp	r2, r3
 80154ba:	d202      	bcs.n	80154c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80154bc:	4a09      	ldr	r2, [pc, #36]	@ (80154e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	6013      	str	r3, [r2, #0]
}
 80154c2:	bf00      	nop
 80154c4:	3710      	adds	r7, #16
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	20001674 	.word	0x20001674
 80154d0:	20001570 	.word	0x20001570
 80154d4:	20001678 	.word	0x20001678
 80154d8:	2000165c 	.word	0x2000165c
 80154dc:	2000162c 	.word	0x2000162c
 80154e0:	20001628 	.word	0x20001628
 80154e4:	20001690 	.word	0x20001690

080154e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80154e8:	b480      	push	{r7}
 80154ea:	b085      	sub	sp, #20
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	3b04      	subs	r3, #4
 80154f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	3b04      	subs	r3, #4
 8015506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	f023 0201 	bic.w	r2, r3, #1
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	3b04      	subs	r3, #4
 8015516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015518:	4a0c      	ldr	r2, [pc, #48]	@ (801554c <pxPortInitialiseStack+0x64>)
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	3b14      	subs	r3, #20
 8015522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	3b04      	subs	r3, #4
 801552e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	f06f 0202 	mvn.w	r2, #2
 8015536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	3b20      	subs	r3, #32
 801553c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801553e:	68fb      	ldr	r3, [r7, #12]
}
 8015540:	4618      	mov	r0, r3
 8015542:	3714      	adds	r7, #20
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr
 801554c:	08015551 	.word	0x08015551

08015550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015550:	b480      	push	{r7}
 8015552:	b085      	sub	sp, #20
 8015554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015556:	2300      	movs	r3, #0
 8015558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801555a:	4b15      	ldr	r3, [pc, #84]	@ (80155b0 <prvTaskExitError+0x60>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015562:	d00d      	beq.n	8015580 <prvTaskExitError+0x30>
	__asm volatile
 8015564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015568:	b672      	cpsid	i
 801556a:	f383 8811 	msr	BASEPRI, r3
 801556e:	f3bf 8f6f 	isb	sy
 8015572:	f3bf 8f4f 	dsb	sy
 8015576:	b662      	cpsie	i
 8015578:	60fb      	str	r3, [r7, #12]
}
 801557a:	bf00      	nop
 801557c:	bf00      	nop
 801557e:	e7fd      	b.n	801557c <prvTaskExitError+0x2c>
	__asm volatile
 8015580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015584:	b672      	cpsid	i
 8015586:	f383 8811 	msr	BASEPRI, r3
 801558a:	f3bf 8f6f 	isb	sy
 801558e:	f3bf 8f4f 	dsb	sy
 8015592:	b662      	cpsie	i
 8015594:	60bb      	str	r3, [r7, #8]
}
 8015596:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015598:	bf00      	nop
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d0fc      	beq.n	801559a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80155a0:	bf00      	nop
 80155a2:	bf00      	nop
 80155a4:	3714      	adds	r7, #20
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop
 80155b0:	20000098 	.word	0x20000098
	...

080155c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80155c0:	4b07      	ldr	r3, [pc, #28]	@ (80155e0 <pxCurrentTCBConst2>)
 80155c2:	6819      	ldr	r1, [r3, #0]
 80155c4:	6808      	ldr	r0, [r1, #0]
 80155c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ca:	f380 8809 	msr	PSP, r0
 80155ce:	f3bf 8f6f 	isb	sy
 80155d2:	f04f 0000 	mov.w	r0, #0
 80155d6:	f380 8811 	msr	BASEPRI, r0
 80155da:	4770      	bx	lr
 80155dc:	f3af 8000 	nop.w

080155e0 <pxCurrentTCBConst2>:
 80155e0:	20001570 	.word	0x20001570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80155e4:	bf00      	nop
 80155e6:	bf00      	nop

080155e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80155e8:	4808      	ldr	r0, [pc, #32]	@ (801560c <prvPortStartFirstTask+0x24>)
 80155ea:	6800      	ldr	r0, [r0, #0]
 80155ec:	6800      	ldr	r0, [r0, #0]
 80155ee:	f380 8808 	msr	MSP, r0
 80155f2:	f04f 0000 	mov.w	r0, #0
 80155f6:	f380 8814 	msr	CONTROL, r0
 80155fa:	b662      	cpsie	i
 80155fc:	b661      	cpsie	f
 80155fe:	f3bf 8f4f 	dsb	sy
 8015602:	f3bf 8f6f 	isb	sy
 8015606:	df00      	svc	0
 8015608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801560a:	bf00      	nop
 801560c:	e000ed08 	.word	0xe000ed08

08015610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b084      	sub	sp, #16
 8015614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015616:	4b37      	ldr	r3, [pc, #220]	@ (80156f4 <xPortStartScheduler+0xe4>)
 8015618:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	b2db      	uxtb	r3, r3
 8015620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	22ff      	movs	r2, #255	@ 0xff
 8015626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	b2db      	uxtb	r3, r3
 801562e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015630:	78fb      	ldrb	r3, [r7, #3]
 8015632:	b2db      	uxtb	r3, r3
 8015634:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015638:	b2da      	uxtb	r2, r3
 801563a:	4b2f      	ldr	r3, [pc, #188]	@ (80156f8 <xPortStartScheduler+0xe8>)
 801563c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801563e:	4b2f      	ldr	r3, [pc, #188]	@ (80156fc <xPortStartScheduler+0xec>)
 8015640:	2207      	movs	r2, #7
 8015642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015644:	e009      	b.n	801565a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015646:	4b2d      	ldr	r3, [pc, #180]	@ (80156fc <xPortStartScheduler+0xec>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	3b01      	subs	r3, #1
 801564c:	4a2b      	ldr	r2, [pc, #172]	@ (80156fc <xPortStartScheduler+0xec>)
 801564e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015650:	78fb      	ldrb	r3, [r7, #3]
 8015652:	b2db      	uxtb	r3, r3
 8015654:	005b      	lsls	r3, r3, #1
 8015656:	b2db      	uxtb	r3, r3
 8015658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801565a:	78fb      	ldrb	r3, [r7, #3]
 801565c:	b2db      	uxtb	r3, r3
 801565e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015662:	2b80      	cmp	r3, #128	@ 0x80
 8015664:	d0ef      	beq.n	8015646 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015666:	4b25      	ldr	r3, [pc, #148]	@ (80156fc <xPortStartScheduler+0xec>)
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	f1c3 0307 	rsb	r3, r3, #7
 801566e:	2b04      	cmp	r3, #4
 8015670:	d00d      	beq.n	801568e <xPortStartScheduler+0x7e>
	__asm volatile
 8015672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015676:	b672      	cpsid	i
 8015678:	f383 8811 	msr	BASEPRI, r3
 801567c:	f3bf 8f6f 	isb	sy
 8015680:	f3bf 8f4f 	dsb	sy
 8015684:	b662      	cpsie	i
 8015686:	60bb      	str	r3, [r7, #8]
}
 8015688:	bf00      	nop
 801568a:	bf00      	nop
 801568c:	e7fd      	b.n	801568a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801568e:	4b1b      	ldr	r3, [pc, #108]	@ (80156fc <xPortStartScheduler+0xec>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	021b      	lsls	r3, r3, #8
 8015694:	4a19      	ldr	r2, [pc, #100]	@ (80156fc <xPortStartScheduler+0xec>)
 8015696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015698:	4b18      	ldr	r3, [pc, #96]	@ (80156fc <xPortStartScheduler+0xec>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80156a0:	4a16      	ldr	r2, [pc, #88]	@ (80156fc <xPortStartScheduler+0xec>)
 80156a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	b2da      	uxtb	r2, r3
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80156ac:	4b14      	ldr	r3, [pc, #80]	@ (8015700 <xPortStartScheduler+0xf0>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	4a13      	ldr	r2, [pc, #76]	@ (8015700 <xPortStartScheduler+0xf0>)
 80156b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80156b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80156b8:	4b11      	ldr	r3, [pc, #68]	@ (8015700 <xPortStartScheduler+0xf0>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	4a10      	ldr	r2, [pc, #64]	@ (8015700 <xPortStartScheduler+0xf0>)
 80156be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80156c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80156c4:	f000 f8dc 	bl	8015880 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80156c8:	4b0e      	ldr	r3, [pc, #56]	@ (8015704 <xPortStartScheduler+0xf4>)
 80156ca:	2200      	movs	r2, #0
 80156cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80156ce:	f000 f8fb 	bl	80158c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80156d2:	4b0d      	ldr	r3, [pc, #52]	@ (8015708 <xPortStartScheduler+0xf8>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	4a0c      	ldr	r2, [pc, #48]	@ (8015708 <xPortStartScheduler+0xf8>)
 80156d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80156dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80156de:	f7ff ff83 	bl	80155e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80156e2:	f7ff fa3b 	bl	8014b5c <vTaskSwitchContext>
	prvTaskExitError();
 80156e6:	f7ff ff33 	bl	8015550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80156ea:	2300      	movs	r3, #0
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3710      	adds	r7, #16
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	e000e400 	.word	0xe000e400
 80156f8:	2000169c 	.word	0x2000169c
 80156fc:	200016a0 	.word	0x200016a0
 8015700:	e000ed20 	.word	0xe000ed20
 8015704:	20000098 	.word	0x20000098
 8015708:	e000ef34 	.word	0xe000ef34

0801570c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
	__asm volatile
 8015712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015716:	b672      	cpsid	i
 8015718:	f383 8811 	msr	BASEPRI, r3
 801571c:	f3bf 8f6f 	isb	sy
 8015720:	f3bf 8f4f 	dsb	sy
 8015724:	b662      	cpsie	i
 8015726:	607b      	str	r3, [r7, #4]
}
 8015728:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801572a:	4b11      	ldr	r3, [pc, #68]	@ (8015770 <vPortEnterCritical+0x64>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	3301      	adds	r3, #1
 8015730:	4a0f      	ldr	r2, [pc, #60]	@ (8015770 <vPortEnterCritical+0x64>)
 8015732:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015734:	4b0e      	ldr	r3, [pc, #56]	@ (8015770 <vPortEnterCritical+0x64>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b01      	cmp	r3, #1
 801573a:	d112      	bne.n	8015762 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801573c:	4b0d      	ldr	r3, [pc, #52]	@ (8015774 <vPortEnterCritical+0x68>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	b2db      	uxtb	r3, r3
 8015742:	2b00      	cmp	r3, #0
 8015744:	d00d      	beq.n	8015762 <vPortEnterCritical+0x56>
	__asm volatile
 8015746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801574a:	b672      	cpsid	i
 801574c:	f383 8811 	msr	BASEPRI, r3
 8015750:	f3bf 8f6f 	isb	sy
 8015754:	f3bf 8f4f 	dsb	sy
 8015758:	b662      	cpsie	i
 801575a:	603b      	str	r3, [r7, #0]
}
 801575c:	bf00      	nop
 801575e:	bf00      	nop
 8015760:	e7fd      	b.n	801575e <vPortEnterCritical+0x52>
	}
}
 8015762:	bf00      	nop
 8015764:	370c      	adds	r7, #12
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	20000098 	.word	0x20000098
 8015774:	e000ed04 	.word	0xe000ed04

08015778 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015778:	b480      	push	{r7}
 801577a:	b083      	sub	sp, #12
 801577c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801577e:	4b13      	ldr	r3, [pc, #76]	@ (80157cc <vPortExitCritical+0x54>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d10d      	bne.n	80157a2 <vPortExitCritical+0x2a>
	__asm volatile
 8015786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801578a:	b672      	cpsid	i
 801578c:	f383 8811 	msr	BASEPRI, r3
 8015790:	f3bf 8f6f 	isb	sy
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	b662      	cpsie	i
 801579a:	607b      	str	r3, [r7, #4]
}
 801579c:	bf00      	nop
 801579e:	bf00      	nop
 80157a0:	e7fd      	b.n	801579e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80157a2:	4b0a      	ldr	r3, [pc, #40]	@ (80157cc <vPortExitCritical+0x54>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	3b01      	subs	r3, #1
 80157a8:	4a08      	ldr	r2, [pc, #32]	@ (80157cc <vPortExitCritical+0x54>)
 80157aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80157ac:	4b07      	ldr	r3, [pc, #28]	@ (80157cc <vPortExitCritical+0x54>)
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d105      	bne.n	80157c0 <vPortExitCritical+0x48>
 80157b4:	2300      	movs	r3, #0
 80157b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	f383 8811 	msr	BASEPRI, r3
}
 80157be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80157c0:	bf00      	nop
 80157c2:	370c      	adds	r7, #12
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr
 80157cc:	20000098 	.word	0x20000098

080157d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80157d0:	f3ef 8009 	mrs	r0, PSP
 80157d4:	f3bf 8f6f 	isb	sy
 80157d8:	4b15      	ldr	r3, [pc, #84]	@ (8015830 <pxCurrentTCBConst>)
 80157da:	681a      	ldr	r2, [r3, #0]
 80157dc:	f01e 0f10 	tst.w	lr, #16
 80157e0:	bf08      	it	eq
 80157e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80157e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ea:	6010      	str	r0, [r2, #0]
 80157ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80157f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80157f4:	b672      	cpsid	i
 80157f6:	f380 8811 	msr	BASEPRI, r0
 80157fa:	f3bf 8f4f 	dsb	sy
 80157fe:	f3bf 8f6f 	isb	sy
 8015802:	b662      	cpsie	i
 8015804:	f7ff f9aa 	bl	8014b5c <vTaskSwitchContext>
 8015808:	f04f 0000 	mov.w	r0, #0
 801580c:	f380 8811 	msr	BASEPRI, r0
 8015810:	bc09      	pop	{r0, r3}
 8015812:	6819      	ldr	r1, [r3, #0]
 8015814:	6808      	ldr	r0, [r1, #0]
 8015816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801581a:	f01e 0f10 	tst.w	lr, #16
 801581e:	bf08      	it	eq
 8015820:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015824:	f380 8809 	msr	PSP, r0
 8015828:	f3bf 8f6f 	isb	sy
 801582c:	4770      	bx	lr
 801582e:	bf00      	nop

08015830 <pxCurrentTCBConst>:
 8015830:	20001570 	.word	0x20001570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015834:	bf00      	nop
 8015836:	bf00      	nop

08015838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
	__asm volatile
 801583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015842:	b672      	cpsid	i
 8015844:	f383 8811 	msr	BASEPRI, r3
 8015848:	f3bf 8f6f 	isb	sy
 801584c:	f3bf 8f4f 	dsb	sy
 8015850:	b662      	cpsie	i
 8015852:	607b      	str	r3, [r7, #4]
}
 8015854:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015856:	f7ff f8c5 	bl	80149e4 <xTaskIncrementTick>
 801585a:	4603      	mov	r3, r0
 801585c:	2b00      	cmp	r3, #0
 801585e:	d003      	beq.n	8015868 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015860:	4b06      	ldr	r3, [pc, #24]	@ (801587c <SysTick_Handler+0x44>)
 8015862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015866:	601a      	str	r2, [r3, #0]
 8015868:	2300      	movs	r3, #0
 801586a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	f383 8811 	msr	BASEPRI, r3
}
 8015872:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015874:	bf00      	nop
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	e000ed04 	.word	0xe000ed04

08015880 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015880:	b480      	push	{r7}
 8015882:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015884:	4b0b      	ldr	r3, [pc, #44]	@ (80158b4 <vPortSetupTimerInterrupt+0x34>)
 8015886:	2200      	movs	r2, #0
 8015888:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801588a:	4b0b      	ldr	r3, [pc, #44]	@ (80158b8 <vPortSetupTimerInterrupt+0x38>)
 801588c:	2200      	movs	r2, #0
 801588e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015890:	4b0a      	ldr	r3, [pc, #40]	@ (80158bc <vPortSetupTimerInterrupt+0x3c>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	4a0a      	ldr	r2, [pc, #40]	@ (80158c0 <vPortSetupTimerInterrupt+0x40>)
 8015896:	fba2 2303 	umull	r2, r3, r2, r3
 801589a:	099b      	lsrs	r3, r3, #6
 801589c:	4a09      	ldr	r2, [pc, #36]	@ (80158c4 <vPortSetupTimerInterrupt+0x44>)
 801589e:	3b01      	subs	r3, #1
 80158a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80158a2:	4b04      	ldr	r3, [pc, #16]	@ (80158b4 <vPortSetupTimerInterrupt+0x34>)
 80158a4:	2207      	movs	r2, #7
 80158a6:	601a      	str	r2, [r3, #0]
}
 80158a8:	bf00      	nop
 80158aa:	46bd      	mov	sp, r7
 80158ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop
 80158b4:	e000e010 	.word	0xe000e010
 80158b8:	e000e018 	.word	0xe000e018
 80158bc:	20000050 	.word	0x20000050
 80158c0:	10624dd3 	.word	0x10624dd3
 80158c4:	e000e014 	.word	0xe000e014

080158c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80158c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80158d8 <vPortEnableVFP+0x10>
 80158cc:	6801      	ldr	r1, [r0, #0]
 80158ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80158d2:	6001      	str	r1, [r0, #0]
 80158d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80158d6:	bf00      	nop
 80158d8:	e000ed88 	.word	0xe000ed88

080158dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80158dc:	b480      	push	{r7}
 80158de:	b085      	sub	sp, #20
 80158e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80158e2:	f3ef 8305 	mrs	r3, IPSR
 80158e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	2b0f      	cmp	r3, #15
 80158ec:	d917      	bls.n	801591e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80158ee:	4a1a      	ldr	r2, [pc, #104]	@ (8015958 <vPortValidateInterruptPriority+0x7c>)
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	4413      	add	r3, r2
 80158f4:	781b      	ldrb	r3, [r3, #0]
 80158f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80158f8:	4b18      	ldr	r3, [pc, #96]	@ (801595c <vPortValidateInterruptPriority+0x80>)
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	7afa      	ldrb	r2, [r7, #11]
 80158fe:	429a      	cmp	r2, r3
 8015900:	d20d      	bcs.n	801591e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8015902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015906:	b672      	cpsid	i
 8015908:	f383 8811 	msr	BASEPRI, r3
 801590c:	f3bf 8f6f 	isb	sy
 8015910:	f3bf 8f4f 	dsb	sy
 8015914:	b662      	cpsie	i
 8015916:	607b      	str	r3, [r7, #4]
}
 8015918:	bf00      	nop
 801591a:	bf00      	nop
 801591c:	e7fd      	b.n	801591a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801591e:	4b10      	ldr	r3, [pc, #64]	@ (8015960 <vPortValidateInterruptPriority+0x84>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015926:	4b0f      	ldr	r3, [pc, #60]	@ (8015964 <vPortValidateInterruptPriority+0x88>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	429a      	cmp	r2, r3
 801592c:	d90d      	bls.n	801594a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015932:	b672      	cpsid	i
 8015934:	f383 8811 	msr	BASEPRI, r3
 8015938:	f3bf 8f6f 	isb	sy
 801593c:	f3bf 8f4f 	dsb	sy
 8015940:	b662      	cpsie	i
 8015942:	603b      	str	r3, [r7, #0]
}
 8015944:	bf00      	nop
 8015946:	bf00      	nop
 8015948:	e7fd      	b.n	8015946 <vPortValidateInterruptPriority+0x6a>
	}
 801594a:	bf00      	nop
 801594c:	3714      	adds	r7, #20
 801594e:	46bd      	mov	sp, r7
 8015950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015954:	4770      	bx	lr
 8015956:	bf00      	nop
 8015958:	e000e3f0 	.word	0xe000e3f0
 801595c:	2000169c 	.word	0x2000169c
 8015960:	e000ed0c 	.word	0xe000ed0c
 8015964:	200016a0 	.word	0x200016a0

08015968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b08a      	sub	sp, #40	@ 0x28
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015970:	2300      	movs	r3, #0
 8015972:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015974:	f7fe ff66 	bl	8014844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015978:	4b5f      	ldr	r3, [pc, #380]	@ (8015af8 <pvPortMalloc+0x190>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d101      	bne.n	8015984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015980:	f000 f924 	bl	8015bcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015984:	4b5d      	ldr	r3, [pc, #372]	@ (8015afc <pvPortMalloc+0x194>)
 8015986:	681a      	ldr	r2, [r3, #0]
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	4013      	ands	r3, r2
 801598c:	2b00      	cmp	r3, #0
 801598e:	f040 8094 	bne.w	8015aba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d020      	beq.n	80159da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8015998:	2208      	movs	r2, #8
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	4413      	add	r3, r2
 801599e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f003 0307 	and.w	r3, r3, #7
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d017      	beq.n	80159da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f023 0307 	bic.w	r3, r3, #7
 80159b0:	3308      	adds	r3, #8
 80159b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f003 0307 	and.w	r3, r3, #7
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00d      	beq.n	80159da <pvPortMalloc+0x72>
	__asm volatile
 80159be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159c2:	b672      	cpsid	i
 80159c4:	f383 8811 	msr	BASEPRI, r3
 80159c8:	f3bf 8f6f 	isb	sy
 80159cc:	f3bf 8f4f 	dsb	sy
 80159d0:	b662      	cpsie	i
 80159d2:	617b      	str	r3, [r7, #20]
}
 80159d4:	bf00      	nop
 80159d6:	bf00      	nop
 80159d8:	e7fd      	b.n	80159d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d06c      	beq.n	8015aba <pvPortMalloc+0x152>
 80159e0:	4b47      	ldr	r3, [pc, #284]	@ (8015b00 <pvPortMalloc+0x198>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d867      	bhi.n	8015aba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80159ea:	4b46      	ldr	r3, [pc, #280]	@ (8015b04 <pvPortMalloc+0x19c>)
 80159ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80159ee:	4b45      	ldr	r3, [pc, #276]	@ (8015b04 <pvPortMalloc+0x19c>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80159f4:	e004      	b.n	8015a00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80159f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80159fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a02:	685b      	ldr	r3, [r3, #4]
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d903      	bls.n	8015a12 <pvPortMalloc+0xaa>
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d1f1      	bne.n	80159f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015a12:	4b39      	ldr	r3, [pc, #228]	@ (8015af8 <pvPortMalloc+0x190>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d04e      	beq.n	8015aba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015a1c:	6a3b      	ldr	r3, [r7, #32]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	2208      	movs	r2, #8
 8015a22:	4413      	add	r3, r2
 8015a24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	6a3b      	ldr	r3, [r7, #32]
 8015a2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a30:	685a      	ldr	r2, [r3, #4]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	1ad2      	subs	r2, r2, r3
 8015a36:	2308      	movs	r3, #8
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d922      	bls.n	8015a84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	4413      	add	r3, r2
 8015a44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	f003 0307 	and.w	r3, r3, #7
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d00d      	beq.n	8015a6c <pvPortMalloc+0x104>
	__asm volatile
 8015a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a54:	b672      	cpsid	i
 8015a56:	f383 8811 	msr	BASEPRI, r3
 8015a5a:	f3bf 8f6f 	isb	sy
 8015a5e:	f3bf 8f4f 	dsb	sy
 8015a62:	b662      	cpsie	i
 8015a64:	613b      	str	r3, [r7, #16]
}
 8015a66:	bf00      	nop
 8015a68:	bf00      	nop
 8015a6a:	e7fd      	b.n	8015a68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a6e:	685a      	ldr	r2, [r3, #4]
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	1ad2      	subs	r2, r2, r3
 8015a74:	69bb      	ldr	r3, [r7, #24]
 8015a76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015a7e:	69b8      	ldr	r0, [r7, #24]
 8015a80:	f000 f906 	bl	8015c90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015a84:	4b1e      	ldr	r3, [pc, #120]	@ (8015b00 <pvPortMalloc+0x198>)
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	1ad3      	subs	r3, r2, r3
 8015a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8015b00 <pvPortMalloc+0x198>)
 8015a90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015a92:	4b1b      	ldr	r3, [pc, #108]	@ (8015b00 <pvPortMalloc+0x198>)
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	4b1c      	ldr	r3, [pc, #112]	@ (8015b08 <pvPortMalloc+0x1a0>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d203      	bcs.n	8015aa6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015a9e:	4b18      	ldr	r3, [pc, #96]	@ (8015b00 <pvPortMalloc+0x198>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	4a19      	ldr	r2, [pc, #100]	@ (8015b08 <pvPortMalloc+0x1a0>)
 8015aa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa8:	685a      	ldr	r2, [r3, #4]
 8015aaa:	4b14      	ldr	r3, [pc, #80]	@ (8015afc <pvPortMalloc+0x194>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	431a      	orrs	r2, r3
 8015ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015aba:	f7fe fed1 	bl	8014860 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d101      	bne.n	8015ac8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015ac4:	f7ed fcf2 	bl	80034ac <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	f003 0307 	and.w	r3, r3, #7
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d00d      	beq.n	8015aee <pvPortMalloc+0x186>
	__asm volatile
 8015ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ad6:	b672      	cpsid	i
 8015ad8:	f383 8811 	msr	BASEPRI, r3
 8015adc:	f3bf 8f6f 	isb	sy
 8015ae0:	f3bf 8f4f 	dsb	sy
 8015ae4:	b662      	cpsie	i
 8015ae6:	60fb      	str	r3, [r7, #12]
}
 8015ae8:	bf00      	nop
 8015aea:	bf00      	nop
 8015aec:	e7fd      	b.n	8015aea <pvPortMalloc+0x182>
	return pvReturn;
 8015aee:	69fb      	ldr	r3, [r7, #28]
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3728      	adds	r7, #40	@ 0x28
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	200096ac 	.word	0x200096ac
 8015afc:	200096b8 	.word	0x200096b8
 8015b00:	200096b0 	.word	0x200096b0
 8015b04:	200096a4 	.word	0x200096a4
 8015b08:	200096b4 	.word	0x200096b4

08015b0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b086      	sub	sp, #24
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d04e      	beq.n	8015bbc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015b1e:	2308      	movs	r3, #8
 8015b20:	425b      	negs	r3, r3
 8015b22:	697a      	ldr	r2, [r7, #20]
 8015b24:	4413      	add	r3, r2
 8015b26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	685a      	ldr	r2, [r3, #4]
 8015b30:	4b24      	ldr	r3, [pc, #144]	@ (8015bc4 <vPortFree+0xb8>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	4013      	ands	r3, r2
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d10d      	bne.n	8015b56 <vPortFree+0x4a>
	__asm volatile
 8015b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b3e:	b672      	cpsid	i
 8015b40:	f383 8811 	msr	BASEPRI, r3
 8015b44:	f3bf 8f6f 	isb	sy
 8015b48:	f3bf 8f4f 	dsb	sy
 8015b4c:	b662      	cpsie	i
 8015b4e:	60fb      	str	r3, [r7, #12]
}
 8015b50:	bf00      	nop
 8015b52:	bf00      	nop
 8015b54:	e7fd      	b.n	8015b52 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d00d      	beq.n	8015b7a <vPortFree+0x6e>
	__asm volatile
 8015b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b62:	b672      	cpsid	i
 8015b64:	f383 8811 	msr	BASEPRI, r3
 8015b68:	f3bf 8f6f 	isb	sy
 8015b6c:	f3bf 8f4f 	dsb	sy
 8015b70:	b662      	cpsie	i
 8015b72:	60bb      	str	r3, [r7, #8]
}
 8015b74:	bf00      	nop
 8015b76:	bf00      	nop
 8015b78:	e7fd      	b.n	8015b76 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	685a      	ldr	r2, [r3, #4]
 8015b7e:	4b11      	ldr	r3, [pc, #68]	@ (8015bc4 <vPortFree+0xb8>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	4013      	ands	r3, r2
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d019      	beq.n	8015bbc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d115      	bne.n	8015bbc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	685a      	ldr	r2, [r3, #4]
 8015b94:	4b0b      	ldr	r3, [pc, #44]	@ (8015bc4 <vPortFree+0xb8>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	43db      	mvns	r3, r3
 8015b9a:	401a      	ands	r2, r3
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015ba0:	f7fe fe50 	bl	8014844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	685a      	ldr	r2, [r3, #4]
 8015ba8:	4b07      	ldr	r3, [pc, #28]	@ (8015bc8 <vPortFree+0xbc>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4413      	add	r3, r2
 8015bae:	4a06      	ldr	r2, [pc, #24]	@ (8015bc8 <vPortFree+0xbc>)
 8015bb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015bb2:	6938      	ldr	r0, [r7, #16]
 8015bb4:	f000 f86c 	bl	8015c90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015bb8:	f7fe fe52 	bl	8014860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015bbc:	bf00      	nop
 8015bbe:	3718      	adds	r7, #24
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}
 8015bc4:	200096b8 	.word	0x200096b8
 8015bc8:	200096b0 	.word	0x200096b0

08015bcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b085      	sub	sp, #20
 8015bd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015bd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015bd8:	4b27      	ldr	r3, [pc, #156]	@ (8015c78 <prvHeapInit+0xac>)
 8015bda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	f003 0307 	and.w	r3, r3, #7
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d00c      	beq.n	8015c00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	3307      	adds	r3, #7
 8015bea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	f023 0307 	bic.w	r3, r3, #7
 8015bf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015bf4:	68ba      	ldr	r2, [r7, #8]
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8015c78 <prvHeapInit+0xac>)
 8015bfc:	4413      	add	r3, r2
 8015bfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015c04:	4a1d      	ldr	r2, [pc, #116]	@ (8015c7c <prvHeapInit+0xb0>)
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8015c7c <prvHeapInit+0xb0>)
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	68ba      	ldr	r2, [r7, #8]
 8015c14:	4413      	add	r3, r2
 8015c16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015c18:	2208      	movs	r2, #8
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	1a9b      	subs	r3, r3, r2
 8015c1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	f023 0307 	bic.w	r3, r3, #7
 8015c26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	4a15      	ldr	r2, [pc, #84]	@ (8015c80 <prvHeapInit+0xb4>)
 8015c2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015c2e:	4b14      	ldr	r3, [pc, #80]	@ (8015c80 <prvHeapInit+0xb4>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	2200      	movs	r2, #0
 8015c34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015c36:	4b12      	ldr	r3, [pc, #72]	@ (8015c80 <prvHeapInit+0xb4>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	68fa      	ldr	r2, [r7, #12]
 8015c46:	1ad2      	subs	r2, r2, r3
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8015c80 <prvHeapInit+0xb4>)
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	4a0a      	ldr	r2, [pc, #40]	@ (8015c84 <prvHeapInit+0xb8>)
 8015c5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	4a09      	ldr	r2, [pc, #36]	@ (8015c88 <prvHeapInit+0xbc>)
 8015c62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015c64:	4b09      	ldr	r3, [pc, #36]	@ (8015c8c <prvHeapInit+0xc0>)
 8015c66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015c6a:	601a      	str	r2, [r3, #0]
}
 8015c6c:	bf00      	nop
 8015c6e:	3714      	adds	r7, #20
 8015c70:	46bd      	mov	sp, r7
 8015c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c76:	4770      	bx	lr
 8015c78:	200016a4 	.word	0x200016a4
 8015c7c:	200096a4 	.word	0x200096a4
 8015c80:	200096ac 	.word	0x200096ac
 8015c84:	200096b4 	.word	0x200096b4
 8015c88:	200096b0 	.word	0x200096b0
 8015c8c:	200096b8 	.word	0x200096b8

08015c90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015c90:	b480      	push	{r7}
 8015c92:	b085      	sub	sp, #20
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015c98:	4b28      	ldr	r3, [pc, #160]	@ (8015d3c <prvInsertBlockIntoFreeList+0xac>)
 8015c9a:	60fb      	str	r3, [r7, #12]
 8015c9c:	e002      	b.n	8015ca4 <prvInsertBlockIntoFreeList+0x14>
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	60fb      	str	r3, [r7, #12]
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d8f7      	bhi.n	8015c9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	68ba      	ldr	r2, [r7, #8]
 8015cb8:	4413      	add	r3, r2
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d108      	bne.n	8015cd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	685a      	ldr	r2, [r3, #4]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	441a      	add	r2, r3
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	68ba      	ldr	r2, [r7, #8]
 8015cdc:	441a      	add	r2, r3
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d118      	bne.n	8015d18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	681a      	ldr	r2, [r3, #0]
 8015cea:	4b15      	ldr	r3, [pc, #84]	@ (8015d40 <prvInsertBlockIntoFreeList+0xb0>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d00d      	beq.n	8015d0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	685a      	ldr	r2, [r3, #4]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	441a      	add	r2, r3
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	601a      	str	r2, [r3, #0]
 8015d0c:	e008      	b.n	8015d20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8015d40 <prvInsertBlockIntoFreeList+0xb0>)
 8015d10:	681a      	ldr	r2, [r3, #0]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	601a      	str	r2, [r3, #0]
 8015d16:	e003      	b.n	8015d20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	681a      	ldr	r2, [r3, #0]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015d20:	68fa      	ldr	r2, [r7, #12]
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d002      	beq.n	8015d2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	687a      	ldr	r2, [r7, #4]
 8015d2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015d2e:	bf00      	nop
 8015d30:	3714      	adds	r7, #20
 8015d32:	46bd      	mov	sp, r7
 8015d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d38:	4770      	bx	lr
 8015d3a:	bf00      	nop
 8015d3c:	200096a4 	.word	0x200096a4
 8015d40:	200096ac 	.word	0x200096ac

08015d44 <malloc>:
 8015d44:	4b02      	ldr	r3, [pc, #8]	@ (8015d50 <malloc+0xc>)
 8015d46:	4601      	mov	r1, r0
 8015d48:	6818      	ldr	r0, [r3, #0]
 8015d4a:	f000 b825 	b.w	8015d98 <_malloc_r>
 8015d4e:	bf00      	nop
 8015d50:	200000a8 	.word	0x200000a8

08015d54 <sbrk_aligned>:
 8015d54:	b570      	push	{r4, r5, r6, lr}
 8015d56:	4e0f      	ldr	r6, [pc, #60]	@ (8015d94 <sbrk_aligned+0x40>)
 8015d58:	460c      	mov	r4, r1
 8015d5a:	6831      	ldr	r1, [r6, #0]
 8015d5c:	4605      	mov	r5, r0
 8015d5e:	b911      	cbnz	r1, 8015d66 <sbrk_aligned+0x12>
 8015d60:	f000 fa9c 	bl	801629c <_sbrk_r>
 8015d64:	6030      	str	r0, [r6, #0]
 8015d66:	4621      	mov	r1, r4
 8015d68:	4628      	mov	r0, r5
 8015d6a:	f000 fa97 	bl	801629c <_sbrk_r>
 8015d6e:	1c43      	adds	r3, r0, #1
 8015d70:	d103      	bne.n	8015d7a <sbrk_aligned+0x26>
 8015d72:	f04f 34ff 	mov.w	r4, #4294967295
 8015d76:	4620      	mov	r0, r4
 8015d78:	bd70      	pop	{r4, r5, r6, pc}
 8015d7a:	1cc4      	adds	r4, r0, #3
 8015d7c:	f024 0403 	bic.w	r4, r4, #3
 8015d80:	42a0      	cmp	r0, r4
 8015d82:	d0f8      	beq.n	8015d76 <sbrk_aligned+0x22>
 8015d84:	1a21      	subs	r1, r4, r0
 8015d86:	4628      	mov	r0, r5
 8015d88:	f000 fa88 	bl	801629c <_sbrk_r>
 8015d8c:	3001      	adds	r0, #1
 8015d8e:	d1f2      	bne.n	8015d76 <sbrk_aligned+0x22>
 8015d90:	e7ef      	b.n	8015d72 <sbrk_aligned+0x1e>
 8015d92:	bf00      	nop
 8015d94:	200096bc 	.word	0x200096bc

08015d98 <_malloc_r>:
 8015d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d9c:	1ccd      	adds	r5, r1, #3
 8015d9e:	f025 0503 	bic.w	r5, r5, #3
 8015da2:	3508      	adds	r5, #8
 8015da4:	2d0c      	cmp	r5, #12
 8015da6:	bf38      	it	cc
 8015da8:	250c      	movcc	r5, #12
 8015daa:	2d00      	cmp	r5, #0
 8015dac:	4606      	mov	r6, r0
 8015dae:	db01      	blt.n	8015db4 <_malloc_r+0x1c>
 8015db0:	42a9      	cmp	r1, r5
 8015db2:	d904      	bls.n	8015dbe <_malloc_r+0x26>
 8015db4:	230c      	movs	r3, #12
 8015db6:	6033      	str	r3, [r6, #0]
 8015db8:	2000      	movs	r0, #0
 8015dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015e94 <_malloc_r+0xfc>
 8015dc2:	f000 f869 	bl	8015e98 <__malloc_lock>
 8015dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8015dca:	461c      	mov	r4, r3
 8015dcc:	bb44      	cbnz	r4, 8015e20 <_malloc_r+0x88>
 8015dce:	4629      	mov	r1, r5
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f7ff ffbf 	bl	8015d54 <sbrk_aligned>
 8015dd6:	1c43      	adds	r3, r0, #1
 8015dd8:	4604      	mov	r4, r0
 8015dda:	d158      	bne.n	8015e8e <_malloc_r+0xf6>
 8015ddc:	f8d8 4000 	ldr.w	r4, [r8]
 8015de0:	4627      	mov	r7, r4
 8015de2:	2f00      	cmp	r7, #0
 8015de4:	d143      	bne.n	8015e6e <_malloc_r+0xd6>
 8015de6:	2c00      	cmp	r4, #0
 8015de8:	d04b      	beq.n	8015e82 <_malloc_r+0xea>
 8015dea:	6823      	ldr	r3, [r4, #0]
 8015dec:	4639      	mov	r1, r7
 8015dee:	4630      	mov	r0, r6
 8015df0:	eb04 0903 	add.w	r9, r4, r3
 8015df4:	f000 fa52 	bl	801629c <_sbrk_r>
 8015df8:	4581      	cmp	r9, r0
 8015dfa:	d142      	bne.n	8015e82 <_malloc_r+0xea>
 8015dfc:	6821      	ldr	r1, [r4, #0]
 8015dfe:	1a6d      	subs	r5, r5, r1
 8015e00:	4629      	mov	r1, r5
 8015e02:	4630      	mov	r0, r6
 8015e04:	f7ff ffa6 	bl	8015d54 <sbrk_aligned>
 8015e08:	3001      	adds	r0, #1
 8015e0a:	d03a      	beq.n	8015e82 <_malloc_r+0xea>
 8015e0c:	6823      	ldr	r3, [r4, #0]
 8015e0e:	442b      	add	r3, r5
 8015e10:	6023      	str	r3, [r4, #0]
 8015e12:	f8d8 3000 	ldr.w	r3, [r8]
 8015e16:	685a      	ldr	r2, [r3, #4]
 8015e18:	bb62      	cbnz	r2, 8015e74 <_malloc_r+0xdc>
 8015e1a:	f8c8 7000 	str.w	r7, [r8]
 8015e1e:	e00f      	b.n	8015e40 <_malloc_r+0xa8>
 8015e20:	6822      	ldr	r2, [r4, #0]
 8015e22:	1b52      	subs	r2, r2, r5
 8015e24:	d420      	bmi.n	8015e68 <_malloc_r+0xd0>
 8015e26:	2a0b      	cmp	r2, #11
 8015e28:	d917      	bls.n	8015e5a <_malloc_r+0xc2>
 8015e2a:	1961      	adds	r1, r4, r5
 8015e2c:	42a3      	cmp	r3, r4
 8015e2e:	6025      	str	r5, [r4, #0]
 8015e30:	bf18      	it	ne
 8015e32:	6059      	strne	r1, [r3, #4]
 8015e34:	6863      	ldr	r3, [r4, #4]
 8015e36:	bf08      	it	eq
 8015e38:	f8c8 1000 	streq.w	r1, [r8]
 8015e3c:	5162      	str	r2, [r4, r5]
 8015e3e:	604b      	str	r3, [r1, #4]
 8015e40:	4630      	mov	r0, r6
 8015e42:	f000 f82f 	bl	8015ea4 <__malloc_unlock>
 8015e46:	f104 000b 	add.w	r0, r4, #11
 8015e4a:	1d23      	adds	r3, r4, #4
 8015e4c:	f020 0007 	bic.w	r0, r0, #7
 8015e50:	1ac2      	subs	r2, r0, r3
 8015e52:	bf1c      	itt	ne
 8015e54:	1a1b      	subne	r3, r3, r0
 8015e56:	50a3      	strne	r3, [r4, r2]
 8015e58:	e7af      	b.n	8015dba <_malloc_r+0x22>
 8015e5a:	6862      	ldr	r2, [r4, #4]
 8015e5c:	42a3      	cmp	r3, r4
 8015e5e:	bf0c      	ite	eq
 8015e60:	f8c8 2000 	streq.w	r2, [r8]
 8015e64:	605a      	strne	r2, [r3, #4]
 8015e66:	e7eb      	b.n	8015e40 <_malloc_r+0xa8>
 8015e68:	4623      	mov	r3, r4
 8015e6a:	6864      	ldr	r4, [r4, #4]
 8015e6c:	e7ae      	b.n	8015dcc <_malloc_r+0x34>
 8015e6e:	463c      	mov	r4, r7
 8015e70:	687f      	ldr	r7, [r7, #4]
 8015e72:	e7b6      	b.n	8015de2 <_malloc_r+0x4a>
 8015e74:	461a      	mov	r2, r3
 8015e76:	685b      	ldr	r3, [r3, #4]
 8015e78:	42a3      	cmp	r3, r4
 8015e7a:	d1fb      	bne.n	8015e74 <_malloc_r+0xdc>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	6053      	str	r3, [r2, #4]
 8015e80:	e7de      	b.n	8015e40 <_malloc_r+0xa8>
 8015e82:	230c      	movs	r3, #12
 8015e84:	6033      	str	r3, [r6, #0]
 8015e86:	4630      	mov	r0, r6
 8015e88:	f000 f80c 	bl	8015ea4 <__malloc_unlock>
 8015e8c:	e794      	b.n	8015db8 <_malloc_r+0x20>
 8015e8e:	6005      	str	r5, [r0, #0]
 8015e90:	e7d6      	b.n	8015e40 <_malloc_r+0xa8>
 8015e92:	bf00      	nop
 8015e94:	200096c0 	.word	0x200096c0

08015e98 <__malloc_lock>:
 8015e98:	4801      	ldr	r0, [pc, #4]	@ (8015ea0 <__malloc_lock+0x8>)
 8015e9a:	f000 ba4c 	b.w	8016336 <__retarget_lock_acquire_recursive>
 8015e9e:	bf00      	nop
 8015ea0:	20009804 	.word	0x20009804

08015ea4 <__malloc_unlock>:
 8015ea4:	4801      	ldr	r0, [pc, #4]	@ (8015eac <__malloc_unlock+0x8>)
 8015ea6:	f000 ba47 	b.w	8016338 <__retarget_lock_release_recursive>
 8015eaa:	bf00      	nop
 8015eac:	20009804 	.word	0x20009804

08015eb0 <rand>:
 8015eb0:	4b16      	ldr	r3, [pc, #88]	@ (8015f0c <rand+0x5c>)
 8015eb2:	b510      	push	{r4, lr}
 8015eb4:	681c      	ldr	r4, [r3, #0]
 8015eb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eb8:	b9b3      	cbnz	r3, 8015ee8 <rand+0x38>
 8015eba:	2018      	movs	r0, #24
 8015ebc:	f7ff ff42 	bl	8015d44 <malloc>
 8015ec0:	4602      	mov	r2, r0
 8015ec2:	6320      	str	r0, [r4, #48]	@ 0x30
 8015ec4:	b920      	cbnz	r0, 8015ed0 <rand+0x20>
 8015ec6:	4b12      	ldr	r3, [pc, #72]	@ (8015f10 <rand+0x60>)
 8015ec8:	4812      	ldr	r0, [pc, #72]	@ (8015f14 <rand+0x64>)
 8015eca:	2152      	movs	r1, #82	@ 0x52
 8015ecc:	f000 fa44 	bl	8016358 <__assert_func>
 8015ed0:	4911      	ldr	r1, [pc, #68]	@ (8015f18 <rand+0x68>)
 8015ed2:	4b12      	ldr	r3, [pc, #72]	@ (8015f1c <rand+0x6c>)
 8015ed4:	e9c0 1300 	strd	r1, r3, [r0]
 8015ed8:	4b11      	ldr	r3, [pc, #68]	@ (8015f20 <rand+0x70>)
 8015eda:	6083      	str	r3, [r0, #8]
 8015edc:	230b      	movs	r3, #11
 8015ede:	8183      	strh	r3, [r0, #12]
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	2001      	movs	r0, #1
 8015ee4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015ee8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015eea:	480e      	ldr	r0, [pc, #56]	@ (8015f24 <rand+0x74>)
 8015eec:	690b      	ldr	r3, [r1, #16]
 8015eee:	694c      	ldr	r4, [r1, #20]
 8015ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8015f28 <rand+0x78>)
 8015ef2:	4358      	muls	r0, r3
 8015ef4:	fb02 0004 	mla	r0, r2, r4, r0
 8015ef8:	fba3 3202 	umull	r3, r2, r3, r2
 8015efc:	3301      	adds	r3, #1
 8015efe:	eb40 0002 	adc.w	r0, r0, r2
 8015f02:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015f06:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015f0a:	bd10      	pop	{r4, pc}
 8015f0c:	200000a8 	.word	0x200000a8
 8015f10:	08025790 	.word	0x08025790
 8015f14:	080257a7 	.word	0x080257a7
 8015f18:	abcd330e 	.word	0xabcd330e
 8015f1c:	e66d1234 	.word	0xe66d1234
 8015f20:	0005deec 	.word	0x0005deec
 8015f24:	5851f42d 	.word	0x5851f42d
 8015f28:	4c957f2d 	.word	0x4c957f2d

08015f2c <std>:
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	b510      	push	{r4, lr}
 8015f30:	4604      	mov	r4, r0
 8015f32:	e9c0 3300 	strd	r3, r3, [r0]
 8015f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f3a:	6083      	str	r3, [r0, #8]
 8015f3c:	8181      	strh	r1, [r0, #12]
 8015f3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8015f40:	81c2      	strh	r2, [r0, #14]
 8015f42:	6183      	str	r3, [r0, #24]
 8015f44:	4619      	mov	r1, r3
 8015f46:	2208      	movs	r2, #8
 8015f48:	305c      	adds	r0, #92	@ 0x5c
 8015f4a:	f000 f914 	bl	8016176 <memset>
 8015f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8015f84 <std+0x58>)
 8015f50:	6263      	str	r3, [r4, #36]	@ 0x24
 8015f52:	4b0d      	ldr	r3, [pc, #52]	@ (8015f88 <std+0x5c>)
 8015f54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015f56:	4b0d      	ldr	r3, [pc, #52]	@ (8015f8c <std+0x60>)
 8015f58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8015f90 <std+0x64>)
 8015f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8015f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8015f94 <std+0x68>)
 8015f60:	6224      	str	r4, [r4, #32]
 8015f62:	429c      	cmp	r4, r3
 8015f64:	d006      	beq.n	8015f74 <std+0x48>
 8015f66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015f6a:	4294      	cmp	r4, r2
 8015f6c:	d002      	beq.n	8015f74 <std+0x48>
 8015f6e:	33d0      	adds	r3, #208	@ 0xd0
 8015f70:	429c      	cmp	r4, r3
 8015f72:	d105      	bne.n	8015f80 <std+0x54>
 8015f74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f7c:	f000 b9da 	b.w	8016334 <__retarget_lock_init_recursive>
 8015f80:	bd10      	pop	{r4, pc}
 8015f82:	bf00      	nop
 8015f84:	080160f1 	.word	0x080160f1
 8015f88:	08016113 	.word	0x08016113
 8015f8c:	0801614b 	.word	0x0801614b
 8015f90:	0801616f 	.word	0x0801616f
 8015f94:	200096c4 	.word	0x200096c4

08015f98 <stdio_exit_handler>:
 8015f98:	4a02      	ldr	r2, [pc, #8]	@ (8015fa4 <stdio_exit_handler+0xc>)
 8015f9a:	4903      	ldr	r1, [pc, #12]	@ (8015fa8 <stdio_exit_handler+0x10>)
 8015f9c:	4803      	ldr	r0, [pc, #12]	@ (8015fac <stdio_exit_handler+0x14>)
 8015f9e:	f000 b869 	b.w	8016074 <_fwalk_sglue>
 8015fa2:	bf00      	nop
 8015fa4:	2000009c 	.word	0x2000009c
 8015fa8:	08016afd 	.word	0x08016afd
 8015fac:	200000ac 	.word	0x200000ac

08015fb0 <cleanup_stdio>:
 8015fb0:	6841      	ldr	r1, [r0, #4]
 8015fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8015fe4 <cleanup_stdio+0x34>)
 8015fb4:	4299      	cmp	r1, r3
 8015fb6:	b510      	push	{r4, lr}
 8015fb8:	4604      	mov	r4, r0
 8015fba:	d001      	beq.n	8015fc0 <cleanup_stdio+0x10>
 8015fbc:	f000 fd9e 	bl	8016afc <_fflush_r>
 8015fc0:	68a1      	ldr	r1, [r4, #8]
 8015fc2:	4b09      	ldr	r3, [pc, #36]	@ (8015fe8 <cleanup_stdio+0x38>)
 8015fc4:	4299      	cmp	r1, r3
 8015fc6:	d002      	beq.n	8015fce <cleanup_stdio+0x1e>
 8015fc8:	4620      	mov	r0, r4
 8015fca:	f000 fd97 	bl	8016afc <_fflush_r>
 8015fce:	68e1      	ldr	r1, [r4, #12]
 8015fd0:	4b06      	ldr	r3, [pc, #24]	@ (8015fec <cleanup_stdio+0x3c>)
 8015fd2:	4299      	cmp	r1, r3
 8015fd4:	d004      	beq.n	8015fe0 <cleanup_stdio+0x30>
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fdc:	f000 bd8e 	b.w	8016afc <_fflush_r>
 8015fe0:	bd10      	pop	{r4, pc}
 8015fe2:	bf00      	nop
 8015fe4:	200096c4 	.word	0x200096c4
 8015fe8:	2000972c 	.word	0x2000972c
 8015fec:	20009794 	.word	0x20009794

08015ff0 <global_stdio_init.part.0>:
 8015ff0:	b510      	push	{r4, lr}
 8015ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8016020 <global_stdio_init.part.0+0x30>)
 8015ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8016024 <global_stdio_init.part.0+0x34>)
 8015ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8016028 <global_stdio_init.part.0+0x38>)
 8015ff8:	601a      	str	r2, [r3, #0]
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	2104      	movs	r1, #4
 8016000:	f7ff ff94 	bl	8015f2c <std>
 8016004:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016008:	2201      	movs	r2, #1
 801600a:	2109      	movs	r1, #9
 801600c:	f7ff ff8e 	bl	8015f2c <std>
 8016010:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016014:	2202      	movs	r2, #2
 8016016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801601a:	2112      	movs	r1, #18
 801601c:	f7ff bf86 	b.w	8015f2c <std>
 8016020:	200097fc 	.word	0x200097fc
 8016024:	200096c4 	.word	0x200096c4
 8016028:	08015f99 	.word	0x08015f99

0801602c <__sfp_lock_acquire>:
 801602c:	4801      	ldr	r0, [pc, #4]	@ (8016034 <__sfp_lock_acquire+0x8>)
 801602e:	f000 b982 	b.w	8016336 <__retarget_lock_acquire_recursive>
 8016032:	bf00      	nop
 8016034:	20009805 	.word	0x20009805

08016038 <__sfp_lock_release>:
 8016038:	4801      	ldr	r0, [pc, #4]	@ (8016040 <__sfp_lock_release+0x8>)
 801603a:	f000 b97d 	b.w	8016338 <__retarget_lock_release_recursive>
 801603e:	bf00      	nop
 8016040:	20009805 	.word	0x20009805

08016044 <__sinit>:
 8016044:	b510      	push	{r4, lr}
 8016046:	4604      	mov	r4, r0
 8016048:	f7ff fff0 	bl	801602c <__sfp_lock_acquire>
 801604c:	6a23      	ldr	r3, [r4, #32]
 801604e:	b11b      	cbz	r3, 8016058 <__sinit+0x14>
 8016050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016054:	f7ff bff0 	b.w	8016038 <__sfp_lock_release>
 8016058:	4b04      	ldr	r3, [pc, #16]	@ (801606c <__sinit+0x28>)
 801605a:	6223      	str	r3, [r4, #32]
 801605c:	4b04      	ldr	r3, [pc, #16]	@ (8016070 <__sinit+0x2c>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d1f5      	bne.n	8016050 <__sinit+0xc>
 8016064:	f7ff ffc4 	bl	8015ff0 <global_stdio_init.part.0>
 8016068:	e7f2      	b.n	8016050 <__sinit+0xc>
 801606a:	bf00      	nop
 801606c:	08015fb1 	.word	0x08015fb1
 8016070:	200097fc 	.word	0x200097fc

08016074 <_fwalk_sglue>:
 8016074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016078:	4607      	mov	r7, r0
 801607a:	4688      	mov	r8, r1
 801607c:	4614      	mov	r4, r2
 801607e:	2600      	movs	r6, #0
 8016080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016084:	f1b9 0901 	subs.w	r9, r9, #1
 8016088:	d505      	bpl.n	8016096 <_fwalk_sglue+0x22>
 801608a:	6824      	ldr	r4, [r4, #0]
 801608c:	2c00      	cmp	r4, #0
 801608e:	d1f7      	bne.n	8016080 <_fwalk_sglue+0xc>
 8016090:	4630      	mov	r0, r6
 8016092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016096:	89ab      	ldrh	r3, [r5, #12]
 8016098:	2b01      	cmp	r3, #1
 801609a:	d907      	bls.n	80160ac <_fwalk_sglue+0x38>
 801609c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160a0:	3301      	adds	r3, #1
 80160a2:	d003      	beq.n	80160ac <_fwalk_sglue+0x38>
 80160a4:	4629      	mov	r1, r5
 80160a6:	4638      	mov	r0, r7
 80160a8:	47c0      	blx	r8
 80160aa:	4306      	orrs	r6, r0
 80160ac:	3568      	adds	r5, #104	@ 0x68
 80160ae:	e7e9      	b.n	8016084 <_fwalk_sglue+0x10>

080160b0 <siprintf>:
 80160b0:	b40e      	push	{r1, r2, r3}
 80160b2:	b500      	push	{lr}
 80160b4:	b09c      	sub	sp, #112	@ 0x70
 80160b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80160b8:	9002      	str	r0, [sp, #8]
 80160ba:	9006      	str	r0, [sp, #24]
 80160bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80160c0:	4809      	ldr	r0, [pc, #36]	@ (80160e8 <siprintf+0x38>)
 80160c2:	9107      	str	r1, [sp, #28]
 80160c4:	9104      	str	r1, [sp, #16]
 80160c6:	4909      	ldr	r1, [pc, #36]	@ (80160ec <siprintf+0x3c>)
 80160c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80160cc:	9105      	str	r1, [sp, #20]
 80160ce:	6800      	ldr	r0, [r0, #0]
 80160d0:	9301      	str	r3, [sp, #4]
 80160d2:	a902      	add	r1, sp, #8
 80160d4:	f000 fa04 	bl	80164e0 <_svfiprintf_r>
 80160d8:	9b02      	ldr	r3, [sp, #8]
 80160da:	2200      	movs	r2, #0
 80160dc:	701a      	strb	r2, [r3, #0]
 80160de:	b01c      	add	sp, #112	@ 0x70
 80160e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80160e4:	b003      	add	sp, #12
 80160e6:	4770      	bx	lr
 80160e8:	200000a8 	.word	0x200000a8
 80160ec:	ffff0208 	.word	0xffff0208

080160f0 <__sread>:
 80160f0:	b510      	push	{r4, lr}
 80160f2:	460c      	mov	r4, r1
 80160f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160f8:	f000 f8be 	bl	8016278 <_read_r>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	bfab      	itete	ge
 8016100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016102:	89a3      	ldrhlt	r3, [r4, #12]
 8016104:	181b      	addge	r3, r3, r0
 8016106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801610a:	bfac      	ite	ge
 801610c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801610e:	81a3      	strhlt	r3, [r4, #12]
 8016110:	bd10      	pop	{r4, pc}

08016112 <__swrite>:
 8016112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016116:	461f      	mov	r7, r3
 8016118:	898b      	ldrh	r3, [r1, #12]
 801611a:	05db      	lsls	r3, r3, #23
 801611c:	4605      	mov	r5, r0
 801611e:	460c      	mov	r4, r1
 8016120:	4616      	mov	r6, r2
 8016122:	d505      	bpl.n	8016130 <__swrite+0x1e>
 8016124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016128:	2302      	movs	r3, #2
 801612a:	2200      	movs	r2, #0
 801612c:	f000 f892 	bl	8016254 <_lseek_r>
 8016130:	89a3      	ldrh	r3, [r4, #12]
 8016132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801613a:	81a3      	strh	r3, [r4, #12]
 801613c:	4632      	mov	r2, r6
 801613e:	463b      	mov	r3, r7
 8016140:	4628      	mov	r0, r5
 8016142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016146:	f000 b8b9 	b.w	80162bc <_write_r>

0801614a <__sseek>:
 801614a:	b510      	push	{r4, lr}
 801614c:	460c      	mov	r4, r1
 801614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016152:	f000 f87f 	bl	8016254 <_lseek_r>
 8016156:	1c43      	adds	r3, r0, #1
 8016158:	89a3      	ldrh	r3, [r4, #12]
 801615a:	bf15      	itete	ne
 801615c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801615e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016166:	81a3      	strheq	r3, [r4, #12]
 8016168:	bf18      	it	ne
 801616a:	81a3      	strhne	r3, [r4, #12]
 801616c:	bd10      	pop	{r4, pc}

0801616e <__sclose>:
 801616e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016172:	f000 b809 	b.w	8016188 <_close_r>

08016176 <memset>:
 8016176:	4402      	add	r2, r0
 8016178:	4603      	mov	r3, r0
 801617a:	4293      	cmp	r3, r2
 801617c:	d100      	bne.n	8016180 <memset+0xa>
 801617e:	4770      	bx	lr
 8016180:	f803 1b01 	strb.w	r1, [r3], #1
 8016184:	e7f9      	b.n	801617a <memset+0x4>
	...

08016188 <_close_r>:
 8016188:	b538      	push	{r3, r4, r5, lr}
 801618a:	4d06      	ldr	r5, [pc, #24]	@ (80161a4 <_close_r+0x1c>)
 801618c:	2300      	movs	r3, #0
 801618e:	4604      	mov	r4, r0
 8016190:	4608      	mov	r0, r1
 8016192:	602b      	str	r3, [r5, #0]
 8016194:	f7f2 fdde 	bl	8008d54 <_close>
 8016198:	1c43      	adds	r3, r0, #1
 801619a:	d102      	bne.n	80161a2 <_close_r+0x1a>
 801619c:	682b      	ldr	r3, [r5, #0]
 801619e:	b103      	cbz	r3, 80161a2 <_close_r+0x1a>
 80161a0:	6023      	str	r3, [r4, #0]
 80161a2:	bd38      	pop	{r3, r4, r5, pc}
 80161a4:	20009800 	.word	0x20009800

080161a8 <_reclaim_reent>:
 80161a8:	4b29      	ldr	r3, [pc, #164]	@ (8016250 <_reclaim_reent+0xa8>)
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	4283      	cmp	r3, r0
 80161ae:	b570      	push	{r4, r5, r6, lr}
 80161b0:	4604      	mov	r4, r0
 80161b2:	d04b      	beq.n	801624c <_reclaim_reent+0xa4>
 80161b4:	69c3      	ldr	r3, [r0, #28]
 80161b6:	b1ab      	cbz	r3, 80161e4 <_reclaim_reent+0x3c>
 80161b8:	68db      	ldr	r3, [r3, #12]
 80161ba:	b16b      	cbz	r3, 80161d8 <_reclaim_reent+0x30>
 80161bc:	2500      	movs	r5, #0
 80161be:	69e3      	ldr	r3, [r4, #28]
 80161c0:	68db      	ldr	r3, [r3, #12]
 80161c2:	5959      	ldr	r1, [r3, r5]
 80161c4:	2900      	cmp	r1, #0
 80161c6:	d13b      	bne.n	8016240 <_reclaim_reent+0x98>
 80161c8:	3504      	adds	r5, #4
 80161ca:	2d80      	cmp	r5, #128	@ 0x80
 80161cc:	d1f7      	bne.n	80161be <_reclaim_reent+0x16>
 80161ce:	69e3      	ldr	r3, [r4, #28]
 80161d0:	4620      	mov	r0, r4
 80161d2:	68d9      	ldr	r1, [r3, #12]
 80161d4:	f000 f8de 	bl	8016394 <_free_r>
 80161d8:	69e3      	ldr	r3, [r4, #28]
 80161da:	6819      	ldr	r1, [r3, #0]
 80161dc:	b111      	cbz	r1, 80161e4 <_reclaim_reent+0x3c>
 80161de:	4620      	mov	r0, r4
 80161e0:	f000 f8d8 	bl	8016394 <_free_r>
 80161e4:	6961      	ldr	r1, [r4, #20]
 80161e6:	b111      	cbz	r1, 80161ee <_reclaim_reent+0x46>
 80161e8:	4620      	mov	r0, r4
 80161ea:	f000 f8d3 	bl	8016394 <_free_r>
 80161ee:	69e1      	ldr	r1, [r4, #28]
 80161f0:	b111      	cbz	r1, 80161f8 <_reclaim_reent+0x50>
 80161f2:	4620      	mov	r0, r4
 80161f4:	f000 f8ce 	bl	8016394 <_free_r>
 80161f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80161fa:	b111      	cbz	r1, 8016202 <_reclaim_reent+0x5a>
 80161fc:	4620      	mov	r0, r4
 80161fe:	f000 f8c9 	bl	8016394 <_free_r>
 8016202:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016204:	b111      	cbz	r1, 801620c <_reclaim_reent+0x64>
 8016206:	4620      	mov	r0, r4
 8016208:	f000 f8c4 	bl	8016394 <_free_r>
 801620c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801620e:	b111      	cbz	r1, 8016216 <_reclaim_reent+0x6e>
 8016210:	4620      	mov	r0, r4
 8016212:	f000 f8bf 	bl	8016394 <_free_r>
 8016216:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016218:	b111      	cbz	r1, 8016220 <_reclaim_reent+0x78>
 801621a:	4620      	mov	r0, r4
 801621c:	f000 f8ba 	bl	8016394 <_free_r>
 8016220:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016222:	b111      	cbz	r1, 801622a <_reclaim_reent+0x82>
 8016224:	4620      	mov	r0, r4
 8016226:	f000 f8b5 	bl	8016394 <_free_r>
 801622a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801622c:	b111      	cbz	r1, 8016234 <_reclaim_reent+0x8c>
 801622e:	4620      	mov	r0, r4
 8016230:	f000 f8b0 	bl	8016394 <_free_r>
 8016234:	6a23      	ldr	r3, [r4, #32]
 8016236:	b14b      	cbz	r3, 801624c <_reclaim_reent+0xa4>
 8016238:	4620      	mov	r0, r4
 801623a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801623e:	4718      	bx	r3
 8016240:	680e      	ldr	r6, [r1, #0]
 8016242:	4620      	mov	r0, r4
 8016244:	f000 f8a6 	bl	8016394 <_free_r>
 8016248:	4631      	mov	r1, r6
 801624a:	e7bb      	b.n	80161c4 <_reclaim_reent+0x1c>
 801624c:	bd70      	pop	{r4, r5, r6, pc}
 801624e:	bf00      	nop
 8016250:	200000a8 	.word	0x200000a8

08016254 <_lseek_r>:
 8016254:	b538      	push	{r3, r4, r5, lr}
 8016256:	4d07      	ldr	r5, [pc, #28]	@ (8016274 <_lseek_r+0x20>)
 8016258:	4604      	mov	r4, r0
 801625a:	4608      	mov	r0, r1
 801625c:	4611      	mov	r1, r2
 801625e:	2200      	movs	r2, #0
 8016260:	602a      	str	r2, [r5, #0]
 8016262:	461a      	mov	r2, r3
 8016264:	f7f2 fd9d 	bl	8008da2 <_lseek>
 8016268:	1c43      	adds	r3, r0, #1
 801626a:	d102      	bne.n	8016272 <_lseek_r+0x1e>
 801626c:	682b      	ldr	r3, [r5, #0]
 801626e:	b103      	cbz	r3, 8016272 <_lseek_r+0x1e>
 8016270:	6023      	str	r3, [r4, #0]
 8016272:	bd38      	pop	{r3, r4, r5, pc}
 8016274:	20009800 	.word	0x20009800

08016278 <_read_r>:
 8016278:	b538      	push	{r3, r4, r5, lr}
 801627a:	4d07      	ldr	r5, [pc, #28]	@ (8016298 <_read_r+0x20>)
 801627c:	4604      	mov	r4, r0
 801627e:	4608      	mov	r0, r1
 8016280:	4611      	mov	r1, r2
 8016282:	2200      	movs	r2, #0
 8016284:	602a      	str	r2, [r5, #0]
 8016286:	461a      	mov	r2, r3
 8016288:	f7f2 fd2b 	bl	8008ce2 <_read>
 801628c:	1c43      	adds	r3, r0, #1
 801628e:	d102      	bne.n	8016296 <_read_r+0x1e>
 8016290:	682b      	ldr	r3, [r5, #0]
 8016292:	b103      	cbz	r3, 8016296 <_read_r+0x1e>
 8016294:	6023      	str	r3, [r4, #0]
 8016296:	bd38      	pop	{r3, r4, r5, pc}
 8016298:	20009800 	.word	0x20009800

0801629c <_sbrk_r>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	4d06      	ldr	r5, [pc, #24]	@ (80162b8 <_sbrk_r+0x1c>)
 80162a0:	2300      	movs	r3, #0
 80162a2:	4604      	mov	r4, r0
 80162a4:	4608      	mov	r0, r1
 80162a6:	602b      	str	r3, [r5, #0]
 80162a8:	f7f2 fd88 	bl	8008dbc <_sbrk>
 80162ac:	1c43      	adds	r3, r0, #1
 80162ae:	d102      	bne.n	80162b6 <_sbrk_r+0x1a>
 80162b0:	682b      	ldr	r3, [r5, #0]
 80162b2:	b103      	cbz	r3, 80162b6 <_sbrk_r+0x1a>
 80162b4:	6023      	str	r3, [r4, #0]
 80162b6:	bd38      	pop	{r3, r4, r5, pc}
 80162b8:	20009800 	.word	0x20009800

080162bc <_write_r>:
 80162bc:	b538      	push	{r3, r4, r5, lr}
 80162be:	4d07      	ldr	r5, [pc, #28]	@ (80162dc <_write_r+0x20>)
 80162c0:	4604      	mov	r4, r0
 80162c2:	4608      	mov	r0, r1
 80162c4:	4611      	mov	r1, r2
 80162c6:	2200      	movs	r2, #0
 80162c8:	602a      	str	r2, [r5, #0]
 80162ca:	461a      	mov	r2, r3
 80162cc:	f7f2 fd26 	bl	8008d1c <_write>
 80162d0:	1c43      	adds	r3, r0, #1
 80162d2:	d102      	bne.n	80162da <_write_r+0x1e>
 80162d4:	682b      	ldr	r3, [r5, #0]
 80162d6:	b103      	cbz	r3, 80162da <_write_r+0x1e>
 80162d8:	6023      	str	r3, [r4, #0]
 80162da:	bd38      	pop	{r3, r4, r5, pc}
 80162dc:	20009800 	.word	0x20009800

080162e0 <__errno>:
 80162e0:	4b01      	ldr	r3, [pc, #4]	@ (80162e8 <__errno+0x8>)
 80162e2:	6818      	ldr	r0, [r3, #0]
 80162e4:	4770      	bx	lr
 80162e6:	bf00      	nop
 80162e8:	200000a8 	.word	0x200000a8

080162ec <__libc_init_array>:
 80162ec:	b570      	push	{r4, r5, r6, lr}
 80162ee:	4d0d      	ldr	r5, [pc, #52]	@ (8016324 <__libc_init_array+0x38>)
 80162f0:	4c0d      	ldr	r4, [pc, #52]	@ (8016328 <__libc_init_array+0x3c>)
 80162f2:	1b64      	subs	r4, r4, r5
 80162f4:	10a4      	asrs	r4, r4, #2
 80162f6:	2600      	movs	r6, #0
 80162f8:	42a6      	cmp	r6, r4
 80162fa:	d109      	bne.n	8016310 <__libc_init_array+0x24>
 80162fc:	4d0b      	ldr	r5, [pc, #44]	@ (801632c <__libc_init_array+0x40>)
 80162fe:	4c0c      	ldr	r4, [pc, #48]	@ (8016330 <__libc_init_array+0x44>)
 8016300:	f000 ff2a 	bl	8017158 <_init>
 8016304:	1b64      	subs	r4, r4, r5
 8016306:	10a4      	asrs	r4, r4, #2
 8016308:	2600      	movs	r6, #0
 801630a:	42a6      	cmp	r6, r4
 801630c:	d105      	bne.n	801631a <__libc_init_array+0x2e>
 801630e:	bd70      	pop	{r4, r5, r6, pc}
 8016310:	f855 3b04 	ldr.w	r3, [r5], #4
 8016314:	4798      	blx	r3
 8016316:	3601      	adds	r6, #1
 8016318:	e7ee      	b.n	80162f8 <__libc_init_array+0xc>
 801631a:	f855 3b04 	ldr.w	r3, [r5], #4
 801631e:	4798      	blx	r3
 8016320:	3601      	adds	r6, #1
 8016322:	e7f2      	b.n	801630a <__libc_init_array+0x1e>
 8016324:	08025878 	.word	0x08025878
 8016328:	08025878 	.word	0x08025878
 801632c:	08025878 	.word	0x08025878
 8016330:	0802587c 	.word	0x0802587c

08016334 <__retarget_lock_init_recursive>:
 8016334:	4770      	bx	lr

08016336 <__retarget_lock_acquire_recursive>:
 8016336:	4770      	bx	lr

08016338 <__retarget_lock_release_recursive>:
 8016338:	4770      	bx	lr

0801633a <memcpy>:
 801633a:	440a      	add	r2, r1
 801633c:	4291      	cmp	r1, r2
 801633e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016342:	d100      	bne.n	8016346 <memcpy+0xc>
 8016344:	4770      	bx	lr
 8016346:	b510      	push	{r4, lr}
 8016348:	f811 4b01 	ldrb.w	r4, [r1], #1
 801634c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016350:	4291      	cmp	r1, r2
 8016352:	d1f9      	bne.n	8016348 <memcpy+0xe>
 8016354:	bd10      	pop	{r4, pc}
	...

08016358 <__assert_func>:
 8016358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801635a:	4614      	mov	r4, r2
 801635c:	461a      	mov	r2, r3
 801635e:	4b09      	ldr	r3, [pc, #36]	@ (8016384 <__assert_func+0x2c>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	4605      	mov	r5, r0
 8016364:	68d8      	ldr	r0, [r3, #12]
 8016366:	b954      	cbnz	r4, 801637e <__assert_func+0x26>
 8016368:	4b07      	ldr	r3, [pc, #28]	@ (8016388 <__assert_func+0x30>)
 801636a:	461c      	mov	r4, r3
 801636c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016370:	9100      	str	r1, [sp, #0]
 8016372:	462b      	mov	r3, r5
 8016374:	4905      	ldr	r1, [pc, #20]	@ (801638c <__assert_func+0x34>)
 8016376:	f000 fbe9 	bl	8016b4c <fiprintf>
 801637a:	f000 fc13 	bl	8016ba4 <abort>
 801637e:	4b04      	ldr	r3, [pc, #16]	@ (8016390 <__assert_func+0x38>)
 8016380:	e7f4      	b.n	801636c <__assert_func+0x14>
 8016382:	bf00      	nop
 8016384:	200000a8 	.word	0x200000a8
 8016388:	0802583a 	.word	0x0802583a
 801638c:	0802580c 	.word	0x0802580c
 8016390:	080257ff 	.word	0x080257ff

08016394 <_free_r>:
 8016394:	b538      	push	{r3, r4, r5, lr}
 8016396:	4605      	mov	r5, r0
 8016398:	2900      	cmp	r1, #0
 801639a:	d041      	beq.n	8016420 <_free_r+0x8c>
 801639c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163a0:	1f0c      	subs	r4, r1, #4
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	bfb8      	it	lt
 80163a6:	18e4      	addlt	r4, r4, r3
 80163a8:	f7ff fd76 	bl	8015e98 <__malloc_lock>
 80163ac:	4a1d      	ldr	r2, [pc, #116]	@ (8016424 <_free_r+0x90>)
 80163ae:	6813      	ldr	r3, [r2, #0]
 80163b0:	b933      	cbnz	r3, 80163c0 <_free_r+0x2c>
 80163b2:	6063      	str	r3, [r4, #4]
 80163b4:	6014      	str	r4, [r2, #0]
 80163b6:	4628      	mov	r0, r5
 80163b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163bc:	f7ff bd72 	b.w	8015ea4 <__malloc_unlock>
 80163c0:	42a3      	cmp	r3, r4
 80163c2:	d908      	bls.n	80163d6 <_free_r+0x42>
 80163c4:	6820      	ldr	r0, [r4, #0]
 80163c6:	1821      	adds	r1, r4, r0
 80163c8:	428b      	cmp	r3, r1
 80163ca:	bf01      	itttt	eq
 80163cc:	6819      	ldreq	r1, [r3, #0]
 80163ce:	685b      	ldreq	r3, [r3, #4]
 80163d0:	1809      	addeq	r1, r1, r0
 80163d2:	6021      	streq	r1, [r4, #0]
 80163d4:	e7ed      	b.n	80163b2 <_free_r+0x1e>
 80163d6:	461a      	mov	r2, r3
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	b10b      	cbz	r3, 80163e0 <_free_r+0x4c>
 80163dc:	42a3      	cmp	r3, r4
 80163de:	d9fa      	bls.n	80163d6 <_free_r+0x42>
 80163e0:	6811      	ldr	r1, [r2, #0]
 80163e2:	1850      	adds	r0, r2, r1
 80163e4:	42a0      	cmp	r0, r4
 80163e6:	d10b      	bne.n	8016400 <_free_r+0x6c>
 80163e8:	6820      	ldr	r0, [r4, #0]
 80163ea:	4401      	add	r1, r0
 80163ec:	1850      	adds	r0, r2, r1
 80163ee:	4283      	cmp	r3, r0
 80163f0:	6011      	str	r1, [r2, #0]
 80163f2:	d1e0      	bne.n	80163b6 <_free_r+0x22>
 80163f4:	6818      	ldr	r0, [r3, #0]
 80163f6:	685b      	ldr	r3, [r3, #4]
 80163f8:	6053      	str	r3, [r2, #4]
 80163fa:	4408      	add	r0, r1
 80163fc:	6010      	str	r0, [r2, #0]
 80163fe:	e7da      	b.n	80163b6 <_free_r+0x22>
 8016400:	d902      	bls.n	8016408 <_free_r+0x74>
 8016402:	230c      	movs	r3, #12
 8016404:	602b      	str	r3, [r5, #0]
 8016406:	e7d6      	b.n	80163b6 <_free_r+0x22>
 8016408:	6820      	ldr	r0, [r4, #0]
 801640a:	1821      	adds	r1, r4, r0
 801640c:	428b      	cmp	r3, r1
 801640e:	bf04      	itt	eq
 8016410:	6819      	ldreq	r1, [r3, #0]
 8016412:	685b      	ldreq	r3, [r3, #4]
 8016414:	6063      	str	r3, [r4, #4]
 8016416:	bf04      	itt	eq
 8016418:	1809      	addeq	r1, r1, r0
 801641a:	6021      	streq	r1, [r4, #0]
 801641c:	6054      	str	r4, [r2, #4]
 801641e:	e7ca      	b.n	80163b6 <_free_r+0x22>
 8016420:	bd38      	pop	{r3, r4, r5, pc}
 8016422:	bf00      	nop
 8016424:	200096c0 	.word	0x200096c0

08016428 <__ssputs_r>:
 8016428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801642c:	688e      	ldr	r6, [r1, #8]
 801642e:	461f      	mov	r7, r3
 8016430:	42be      	cmp	r6, r7
 8016432:	680b      	ldr	r3, [r1, #0]
 8016434:	4682      	mov	sl, r0
 8016436:	460c      	mov	r4, r1
 8016438:	4690      	mov	r8, r2
 801643a:	d82d      	bhi.n	8016498 <__ssputs_r+0x70>
 801643c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016444:	d026      	beq.n	8016494 <__ssputs_r+0x6c>
 8016446:	6965      	ldr	r5, [r4, #20]
 8016448:	6909      	ldr	r1, [r1, #16]
 801644a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801644e:	eba3 0901 	sub.w	r9, r3, r1
 8016452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016456:	1c7b      	adds	r3, r7, #1
 8016458:	444b      	add	r3, r9
 801645a:	106d      	asrs	r5, r5, #1
 801645c:	429d      	cmp	r5, r3
 801645e:	bf38      	it	cc
 8016460:	461d      	movcc	r5, r3
 8016462:	0553      	lsls	r3, r2, #21
 8016464:	d527      	bpl.n	80164b6 <__ssputs_r+0x8e>
 8016466:	4629      	mov	r1, r5
 8016468:	f7ff fc96 	bl	8015d98 <_malloc_r>
 801646c:	4606      	mov	r6, r0
 801646e:	b360      	cbz	r0, 80164ca <__ssputs_r+0xa2>
 8016470:	6921      	ldr	r1, [r4, #16]
 8016472:	464a      	mov	r2, r9
 8016474:	f7ff ff61 	bl	801633a <memcpy>
 8016478:	89a3      	ldrh	r3, [r4, #12]
 801647a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801647e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016482:	81a3      	strh	r3, [r4, #12]
 8016484:	6126      	str	r6, [r4, #16]
 8016486:	6165      	str	r5, [r4, #20]
 8016488:	444e      	add	r6, r9
 801648a:	eba5 0509 	sub.w	r5, r5, r9
 801648e:	6026      	str	r6, [r4, #0]
 8016490:	60a5      	str	r5, [r4, #8]
 8016492:	463e      	mov	r6, r7
 8016494:	42be      	cmp	r6, r7
 8016496:	d900      	bls.n	801649a <__ssputs_r+0x72>
 8016498:	463e      	mov	r6, r7
 801649a:	6820      	ldr	r0, [r4, #0]
 801649c:	4632      	mov	r2, r6
 801649e:	4641      	mov	r1, r8
 80164a0:	f000 fb66 	bl	8016b70 <memmove>
 80164a4:	68a3      	ldr	r3, [r4, #8]
 80164a6:	1b9b      	subs	r3, r3, r6
 80164a8:	60a3      	str	r3, [r4, #8]
 80164aa:	6823      	ldr	r3, [r4, #0]
 80164ac:	4433      	add	r3, r6
 80164ae:	6023      	str	r3, [r4, #0]
 80164b0:	2000      	movs	r0, #0
 80164b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164b6:	462a      	mov	r2, r5
 80164b8:	f000 fb7b 	bl	8016bb2 <_realloc_r>
 80164bc:	4606      	mov	r6, r0
 80164be:	2800      	cmp	r0, #0
 80164c0:	d1e0      	bne.n	8016484 <__ssputs_r+0x5c>
 80164c2:	6921      	ldr	r1, [r4, #16]
 80164c4:	4650      	mov	r0, sl
 80164c6:	f7ff ff65 	bl	8016394 <_free_r>
 80164ca:	230c      	movs	r3, #12
 80164cc:	f8ca 3000 	str.w	r3, [sl]
 80164d0:	89a3      	ldrh	r3, [r4, #12]
 80164d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164d6:	81a3      	strh	r3, [r4, #12]
 80164d8:	f04f 30ff 	mov.w	r0, #4294967295
 80164dc:	e7e9      	b.n	80164b2 <__ssputs_r+0x8a>
	...

080164e0 <_svfiprintf_r>:
 80164e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e4:	4698      	mov	r8, r3
 80164e6:	898b      	ldrh	r3, [r1, #12]
 80164e8:	061b      	lsls	r3, r3, #24
 80164ea:	b09d      	sub	sp, #116	@ 0x74
 80164ec:	4607      	mov	r7, r0
 80164ee:	460d      	mov	r5, r1
 80164f0:	4614      	mov	r4, r2
 80164f2:	d510      	bpl.n	8016516 <_svfiprintf_r+0x36>
 80164f4:	690b      	ldr	r3, [r1, #16]
 80164f6:	b973      	cbnz	r3, 8016516 <_svfiprintf_r+0x36>
 80164f8:	2140      	movs	r1, #64	@ 0x40
 80164fa:	f7ff fc4d 	bl	8015d98 <_malloc_r>
 80164fe:	6028      	str	r0, [r5, #0]
 8016500:	6128      	str	r0, [r5, #16]
 8016502:	b930      	cbnz	r0, 8016512 <_svfiprintf_r+0x32>
 8016504:	230c      	movs	r3, #12
 8016506:	603b      	str	r3, [r7, #0]
 8016508:	f04f 30ff 	mov.w	r0, #4294967295
 801650c:	b01d      	add	sp, #116	@ 0x74
 801650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016512:	2340      	movs	r3, #64	@ 0x40
 8016514:	616b      	str	r3, [r5, #20]
 8016516:	2300      	movs	r3, #0
 8016518:	9309      	str	r3, [sp, #36]	@ 0x24
 801651a:	2320      	movs	r3, #32
 801651c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016520:	f8cd 800c 	str.w	r8, [sp, #12]
 8016524:	2330      	movs	r3, #48	@ 0x30
 8016526:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80166c4 <_svfiprintf_r+0x1e4>
 801652a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801652e:	f04f 0901 	mov.w	r9, #1
 8016532:	4623      	mov	r3, r4
 8016534:	469a      	mov	sl, r3
 8016536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801653a:	b10a      	cbz	r2, 8016540 <_svfiprintf_r+0x60>
 801653c:	2a25      	cmp	r2, #37	@ 0x25
 801653e:	d1f9      	bne.n	8016534 <_svfiprintf_r+0x54>
 8016540:	ebba 0b04 	subs.w	fp, sl, r4
 8016544:	d00b      	beq.n	801655e <_svfiprintf_r+0x7e>
 8016546:	465b      	mov	r3, fp
 8016548:	4622      	mov	r2, r4
 801654a:	4629      	mov	r1, r5
 801654c:	4638      	mov	r0, r7
 801654e:	f7ff ff6b 	bl	8016428 <__ssputs_r>
 8016552:	3001      	adds	r0, #1
 8016554:	f000 80a7 	beq.w	80166a6 <_svfiprintf_r+0x1c6>
 8016558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801655a:	445a      	add	r2, fp
 801655c:	9209      	str	r2, [sp, #36]	@ 0x24
 801655e:	f89a 3000 	ldrb.w	r3, [sl]
 8016562:	2b00      	cmp	r3, #0
 8016564:	f000 809f 	beq.w	80166a6 <_svfiprintf_r+0x1c6>
 8016568:	2300      	movs	r3, #0
 801656a:	f04f 32ff 	mov.w	r2, #4294967295
 801656e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016572:	f10a 0a01 	add.w	sl, sl, #1
 8016576:	9304      	str	r3, [sp, #16]
 8016578:	9307      	str	r3, [sp, #28]
 801657a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801657e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016580:	4654      	mov	r4, sl
 8016582:	2205      	movs	r2, #5
 8016584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016588:	484e      	ldr	r0, [pc, #312]	@ (80166c4 <_svfiprintf_r+0x1e4>)
 801658a:	f7e9 fe41 	bl	8000210 <memchr>
 801658e:	9a04      	ldr	r2, [sp, #16]
 8016590:	b9d8      	cbnz	r0, 80165ca <_svfiprintf_r+0xea>
 8016592:	06d0      	lsls	r0, r2, #27
 8016594:	bf44      	itt	mi
 8016596:	2320      	movmi	r3, #32
 8016598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801659c:	0711      	lsls	r1, r2, #28
 801659e:	bf44      	itt	mi
 80165a0:	232b      	movmi	r3, #43	@ 0x2b
 80165a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165a6:	f89a 3000 	ldrb.w	r3, [sl]
 80165aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80165ac:	d015      	beq.n	80165da <_svfiprintf_r+0xfa>
 80165ae:	9a07      	ldr	r2, [sp, #28]
 80165b0:	4654      	mov	r4, sl
 80165b2:	2000      	movs	r0, #0
 80165b4:	f04f 0c0a 	mov.w	ip, #10
 80165b8:	4621      	mov	r1, r4
 80165ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165be:	3b30      	subs	r3, #48	@ 0x30
 80165c0:	2b09      	cmp	r3, #9
 80165c2:	d94b      	bls.n	801665c <_svfiprintf_r+0x17c>
 80165c4:	b1b0      	cbz	r0, 80165f4 <_svfiprintf_r+0x114>
 80165c6:	9207      	str	r2, [sp, #28]
 80165c8:	e014      	b.n	80165f4 <_svfiprintf_r+0x114>
 80165ca:	eba0 0308 	sub.w	r3, r0, r8
 80165ce:	fa09 f303 	lsl.w	r3, r9, r3
 80165d2:	4313      	orrs	r3, r2
 80165d4:	9304      	str	r3, [sp, #16]
 80165d6:	46a2      	mov	sl, r4
 80165d8:	e7d2      	b.n	8016580 <_svfiprintf_r+0xa0>
 80165da:	9b03      	ldr	r3, [sp, #12]
 80165dc:	1d19      	adds	r1, r3, #4
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	9103      	str	r1, [sp, #12]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	bfbb      	ittet	lt
 80165e6:	425b      	neglt	r3, r3
 80165e8:	f042 0202 	orrlt.w	r2, r2, #2
 80165ec:	9307      	strge	r3, [sp, #28]
 80165ee:	9307      	strlt	r3, [sp, #28]
 80165f0:	bfb8      	it	lt
 80165f2:	9204      	strlt	r2, [sp, #16]
 80165f4:	7823      	ldrb	r3, [r4, #0]
 80165f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80165f8:	d10a      	bne.n	8016610 <_svfiprintf_r+0x130>
 80165fa:	7863      	ldrb	r3, [r4, #1]
 80165fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80165fe:	d132      	bne.n	8016666 <_svfiprintf_r+0x186>
 8016600:	9b03      	ldr	r3, [sp, #12]
 8016602:	1d1a      	adds	r2, r3, #4
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	9203      	str	r2, [sp, #12]
 8016608:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801660c:	3402      	adds	r4, #2
 801660e:	9305      	str	r3, [sp, #20]
 8016610:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80166d4 <_svfiprintf_r+0x1f4>
 8016614:	7821      	ldrb	r1, [r4, #0]
 8016616:	2203      	movs	r2, #3
 8016618:	4650      	mov	r0, sl
 801661a:	f7e9 fdf9 	bl	8000210 <memchr>
 801661e:	b138      	cbz	r0, 8016630 <_svfiprintf_r+0x150>
 8016620:	9b04      	ldr	r3, [sp, #16]
 8016622:	eba0 000a 	sub.w	r0, r0, sl
 8016626:	2240      	movs	r2, #64	@ 0x40
 8016628:	4082      	lsls	r2, r0
 801662a:	4313      	orrs	r3, r2
 801662c:	3401      	adds	r4, #1
 801662e:	9304      	str	r3, [sp, #16]
 8016630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016634:	4824      	ldr	r0, [pc, #144]	@ (80166c8 <_svfiprintf_r+0x1e8>)
 8016636:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801663a:	2206      	movs	r2, #6
 801663c:	f7e9 fde8 	bl	8000210 <memchr>
 8016640:	2800      	cmp	r0, #0
 8016642:	d036      	beq.n	80166b2 <_svfiprintf_r+0x1d2>
 8016644:	4b21      	ldr	r3, [pc, #132]	@ (80166cc <_svfiprintf_r+0x1ec>)
 8016646:	bb1b      	cbnz	r3, 8016690 <_svfiprintf_r+0x1b0>
 8016648:	9b03      	ldr	r3, [sp, #12]
 801664a:	3307      	adds	r3, #7
 801664c:	f023 0307 	bic.w	r3, r3, #7
 8016650:	3308      	adds	r3, #8
 8016652:	9303      	str	r3, [sp, #12]
 8016654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016656:	4433      	add	r3, r6
 8016658:	9309      	str	r3, [sp, #36]	@ 0x24
 801665a:	e76a      	b.n	8016532 <_svfiprintf_r+0x52>
 801665c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016660:	460c      	mov	r4, r1
 8016662:	2001      	movs	r0, #1
 8016664:	e7a8      	b.n	80165b8 <_svfiprintf_r+0xd8>
 8016666:	2300      	movs	r3, #0
 8016668:	3401      	adds	r4, #1
 801666a:	9305      	str	r3, [sp, #20]
 801666c:	4619      	mov	r1, r3
 801666e:	f04f 0c0a 	mov.w	ip, #10
 8016672:	4620      	mov	r0, r4
 8016674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016678:	3a30      	subs	r2, #48	@ 0x30
 801667a:	2a09      	cmp	r2, #9
 801667c:	d903      	bls.n	8016686 <_svfiprintf_r+0x1a6>
 801667e:	2b00      	cmp	r3, #0
 8016680:	d0c6      	beq.n	8016610 <_svfiprintf_r+0x130>
 8016682:	9105      	str	r1, [sp, #20]
 8016684:	e7c4      	b.n	8016610 <_svfiprintf_r+0x130>
 8016686:	fb0c 2101 	mla	r1, ip, r1, r2
 801668a:	4604      	mov	r4, r0
 801668c:	2301      	movs	r3, #1
 801668e:	e7f0      	b.n	8016672 <_svfiprintf_r+0x192>
 8016690:	ab03      	add	r3, sp, #12
 8016692:	9300      	str	r3, [sp, #0]
 8016694:	462a      	mov	r2, r5
 8016696:	4b0e      	ldr	r3, [pc, #56]	@ (80166d0 <_svfiprintf_r+0x1f0>)
 8016698:	a904      	add	r1, sp, #16
 801669a:	4638      	mov	r0, r7
 801669c:	f3af 8000 	nop.w
 80166a0:	1c42      	adds	r2, r0, #1
 80166a2:	4606      	mov	r6, r0
 80166a4:	d1d6      	bne.n	8016654 <_svfiprintf_r+0x174>
 80166a6:	89ab      	ldrh	r3, [r5, #12]
 80166a8:	065b      	lsls	r3, r3, #25
 80166aa:	f53f af2d 	bmi.w	8016508 <_svfiprintf_r+0x28>
 80166ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80166b0:	e72c      	b.n	801650c <_svfiprintf_r+0x2c>
 80166b2:	ab03      	add	r3, sp, #12
 80166b4:	9300      	str	r3, [sp, #0]
 80166b6:	462a      	mov	r2, r5
 80166b8:	4b05      	ldr	r3, [pc, #20]	@ (80166d0 <_svfiprintf_r+0x1f0>)
 80166ba:	a904      	add	r1, sp, #16
 80166bc:	4638      	mov	r0, r7
 80166be:	f000 f879 	bl	80167b4 <_printf_i>
 80166c2:	e7ed      	b.n	80166a0 <_svfiprintf_r+0x1c0>
 80166c4:	0802583b 	.word	0x0802583b
 80166c8:	08025845 	.word	0x08025845
 80166cc:	00000000 	.word	0x00000000
 80166d0:	08016429 	.word	0x08016429
 80166d4:	08025841 	.word	0x08025841

080166d8 <_printf_common>:
 80166d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166dc:	4616      	mov	r6, r2
 80166de:	4698      	mov	r8, r3
 80166e0:	688a      	ldr	r2, [r1, #8]
 80166e2:	690b      	ldr	r3, [r1, #16]
 80166e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80166e8:	4293      	cmp	r3, r2
 80166ea:	bfb8      	it	lt
 80166ec:	4613      	movlt	r3, r2
 80166ee:	6033      	str	r3, [r6, #0]
 80166f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80166f4:	4607      	mov	r7, r0
 80166f6:	460c      	mov	r4, r1
 80166f8:	b10a      	cbz	r2, 80166fe <_printf_common+0x26>
 80166fa:	3301      	adds	r3, #1
 80166fc:	6033      	str	r3, [r6, #0]
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	0699      	lsls	r1, r3, #26
 8016702:	bf42      	ittt	mi
 8016704:	6833      	ldrmi	r3, [r6, #0]
 8016706:	3302      	addmi	r3, #2
 8016708:	6033      	strmi	r3, [r6, #0]
 801670a:	6825      	ldr	r5, [r4, #0]
 801670c:	f015 0506 	ands.w	r5, r5, #6
 8016710:	d106      	bne.n	8016720 <_printf_common+0x48>
 8016712:	f104 0a19 	add.w	sl, r4, #25
 8016716:	68e3      	ldr	r3, [r4, #12]
 8016718:	6832      	ldr	r2, [r6, #0]
 801671a:	1a9b      	subs	r3, r3, r2
 801671c:	42ab      	cmp	r3, r5
 801671e:	dc26      	bgt.n	801676e <_printf_common+0x96>
 8016720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016724:	6822      	ldr	r2, [r4, #0]
 8016726:	3b00      	subs	r3, #0
 8016728:	bf18      	it	ne
 801672a:	2301      	movne	r3, #1
 801672c:	0692      	lsls	r2, r2, #26
 801672e:	d42b      	bmi.n	8016788 <_printf_common+0xb0>
 8016730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016734:	4641      	mov	r1, r8
 8016736:	4638      	mov	r0, r7
 8016738:	47c8      	blx	r9
 801673a:	3001      	adds	r0, #1
 801673c:	d01e      	beq.n	801677c <_printf_common+0xa4>
 801673e:	6823      	ldr	r3, [r4, #0]
 8016740:	6922      	ldr	r2, [r4, #16]
 8016742:	f003 0306 	and.w	r3, r3, #6
 8016746:	2b04      	cmp	r3, #4
 8016748:	bf02      	ittt	eq
 801674a:	68e5      	ldreq	r5, [r4, #12]
 801674c:	6833      	ldreq	r3, [r6, #0]
 801674e:	1aed      	subeq	r5, r5, r3
 8016750:	68a3      	ldr	r3, [r4, #8]
 8016752:	bf0c      	ite	eq
 8016754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016758:	2500      	movne	r5, #0
 801675a:	4293      	cmp	r3, r2
 801675c:	bfc4      	itt	gt
 801675e:	1a9b      	subgt	r3, r3, r2
 8016760:	18ed      	addgt	r5, r5, r3
 8016762:	2600      	movs	r6, #0
 8016764:	341a      	adds	r4, #26
 8016766:	42b5      	cmp	r5, r6
 8016768:	d11a      	bne.n	80167a0 <_printf_common+0xc8>
 801676a:	2000      	movs	r0, #0
 801676c:	e008      	b.n	8016780 <_printf_common+0xa8>
 801676e:	2301      	movs	r3, #1
 8016770:	4652      	mov	r2, sl
 8016772:	4641      	mov	r1, r8
 8016774:	4638      	mov	r0, r7
 8016776:	47c8      	blx	r9
 8016778:	3001      	adds	r0, #1
 801677a:	d103      	bne.n	8016784 <_printf_common+0xac>
 801677c:	f04f 30ff 	mov.w	r0, #4294967295
 8016780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016784:	3501      	adds	r5, #1
 8016786:	e7c6      	b.n	8016716 <_printf_common+0x3e>
 8016788:	18e1      	adds	r1, r4, r3
 801678a:	1c5a      	adds	r2, r3, #1
 801678c:	2030      	movs	r0, #48	@ 0x30
 801678e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016792:	4422      	add	r2, r4
 8016794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801679c:	3302      	adds	r3, #2
 801679e:	e7c7      	b.n	8016730 <_printf_common+0x58>
 80167a0:	2301      	movs	r3, #1
 80167a2:	4622      	mov	r2, r4
 80167a4:	4641      	mov	r1, r8
 80167a6:	4638      	mov	r0, r7
 80167a8:	47c8      	blx	r9
 80167aa:	3001      	adds	r0, #1
 80167ac:	d0e6      	beq.n	801677c <_printf_common+0xa4>
 80167ae:	3601      	adds	r6, #1
 80167b0:	e7d9      	b.n	8016766 <_printf_common+0x8e>
	...

080167b4 <_printf_i>:
 80167b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167b8:	7e0f      	ldrb	r7, [r1, #24]
 80167ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80167bc:	2f78      	cmp	r7, #120	@ 0x78
 80167be:	4691      	mov	r9, r2
 80167c0:	4680      	mov	r8, r0
 80167c2:	460c      	mov	r4, r1
 80167c4:	469a      	mov	sl, r3
 80167c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80167ca:	d807      	bhi.n	80167dc <_printf_i+0x28>
 80167cc:	2f62      	cmp	r7, #98	@ 0x62
 80167ce:	d80a      	bhi.n	80167e6 <_printf_i+0x32>
 80167d0:	2f00      	cmp	r7, #0
 80167d2:	f000 80d2 	beq.w	801697a <_printf_i+0x1c6>
 80167d6:	2f58      	cmp	r7, #88	@ 0x58
 80167d8:	f000 80b9 	beq.w	801694e <_printf_i+0x19a>
 80167dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80167e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80167e4:	e03a      	b.n	801685c <_printf_i+0xa8>
 80167e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80167ea:	2b15      	cmp	r3, #21
 80167ec:	d8f6      	bhi.n	80167dc <_printf_i+0x28>
 80167ee:	a101      	add	r1, pc, #4	@ (adr r1, 80167f4 <_printf_i+0x40>)
 80167f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80167f4:	0801684d 	.word	0x0801684d
 80167f8:	08016861 	.word	0x08016861
 80167fc:	080167dd 	.word	0x080167dd
 8016800:	080167dd 	.word	0x080167dd
 8016804:	080167dd 	.word	0x080167dd
 8016808:	080167dd 	.word	0x080167dd
 801680c:	08016861 	.word	0x08016861
 8016810:	080167dd 	.word	0x080167dd
 8016814:	080167dd 	.word	0x080167dd
 8016818:	080167dd 	.word	0x080167dd
 801681c:	080167dd 	.word	0x080167dd
 8016820:	08016961 	.word	0x08016961
 8016824:	0801688b 	.word	0x0801688b
 8016828:	0801691b 	.word	0x0801691b
 801682c:	080167dd 	.word	0x080167dd
 8016830:	080167dd 	.word	0x080167dd
 8016834:	08016983 	.word	0x08016983
 8016838:	080167dd 	.word	0x080167dd
 801683c:	0801688b 	.word	0x0801688b
 8016840:	080167dd 	.word	0x080167dd
 8016844:	080167dd 	.word	0x080167dd
 8016848:	08016923 	.word	0x08016923
 801684c:	6833      	ldr	r3, [r6, #0]
 801684e:	1d1a      	adds	r2, r3, #4
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	6032      	str	r2, [r6, #0]
 8016854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801685c:	2301      	movs	r3, #1
 801685e:	e09d      	b.n	801699c <_printf_i+0x1e8>
 8016860:	6833      	ldr	r3, [r6, #0]
 8016862:	6820      	ldr	r0, [r4, #0]
 8016864:	1d19      	adds	r1, r3, #4
 8016866:	6031      	str	r1, [r6, #0]
 8016868:	0606      	lsls	r6, r0, #24
 801686a:	d501      	bpl.n	8016870 <_printf_i+0xbc>
 801686c:	681d      	ldr	r5, [r3, #0]
 801686e:	e003      	b.n	8016878 <_printf_i+0xc4>
 8016870:	0645      	lsls	r5, r0, #25
 8016872:	d5fb      	bpl.n	801686c <_printf_i+0xb8>
 8016874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016878:	2d00      	cmp	r5, #0
 801687a:	da03      	bge.n	8016884 <_printf_i+0xd0>
 801687c:	232d      	movs	r3, #45	@ 0x2d
 801687e:	426d      	negs	r5, r5
 8016880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016884:	4859      	ldr	r0, [pc, #356]	@ (80169ec <_printf_i+0x238>)
 8016886:	230a      	movs	r3, #10
 8016888:	e011      	b.n	80168ae <_printf_i+0xfa>
 801688a:	6821      	ldr	r1, [r4, #0]
 801688c:	6833      	ldr	r3, [r6, #0]
 801688e:	0608      	lsls	r0, r1, #24
 8016890:	f853 5b04 	ldr.w	r5, [r3], #4
 8016894:	d402      	bmi.n	801689c <_printf_i+0xe8>
 8016896:	0649      	lsls	r1, r1, #25
 8016898:	bf48      	it	mi
 801689a:	b2ad      	uxthmi	r5, r5
 801689c:	2f6f      	cmp	r7, #111	@ 0x6f
 801689e:	4853      	ldr	r0, [pc, #332]	@ (80169ec <_printf_i+0x238>)
 80168a0:	6033      	str	r3, [r6, #0]
 80168a2:	bf14      	ite	ne
 80168a4:	230a      	movne	r3, #10
 80168a6:	2308      	moveq	r3, #8
 80168a8:	2100      	movs	r1, #0
 80168aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80168ae:	6866      	ldr	r6, [r4, #4]
 80168b0:	60a6      	str	r6, [r4, #8]
 80168b2:	2e00      	cmp	r6, #0
 80168b4:	bfa2      	ittt	ge
 80168b6:	6821      	ldrge	r1, [r4, #0]
 80168b8:	f021 0104 	bicge.w	r1, r1, #4
 80168bc:	6021      	strge	r1, [r4, #0]
 80168be:	b90d      	cbnz	r5, 80168c4 <_printf_i+0x110>
 80168c0:	2e00      	cmp	r6, #0
 80168c2:	d04b      	beq.n	801695c <_printf_i+0x1a8>
 80168c4:	4616      	mov	r6, r2
 80168c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80168ca:	fb03 5711 	mls	r7, r3, r1, r5
 80168ce:	5dc7      	ldrb	r7, [r0, r7]
 80168d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80168d4:	462f      	mov	r7, r5
 80168d6:	42bb      	cmp	r3, r7
 80168d8:	460d      	mov	r5, r1
 80168da:	d9f4      	bls.n	80168c6 <_printf_i+0x112>
 80168dc:	2b08      	cmp	r3, #8
 80168de:	d10b      	bne.n	80168f8 <_printf_i+0x144>
 80168e0:	6823      	ldr	r3, [r4, #0]
 80168e2:	07df      	lsls	r7, r3, #31
 80168e4:	d508      	bpl.n	80168f8 <_printf_i+0x144>
 80168e6:	6923      	ldr	r3, [r4, #16]
 80168e8:	6861      	ldr	r1, [r4, #4]
 80168ea:	4299      	cmp	r1, r3
 80168ec:	bfde      	ittt	le
 80168ee:	2330      	movle	r3, #48	@ 0x30
 80168f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80168f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80168f8:	1b92      	subs	r2, r2, r6
 80168fa:	6122      	str	r2, [r4, #16]
 80168fc:	f8cd a000 	str.w	sl, [sp]
 8016900:	464b      	mov	r3, r9
 8016902:	aa03      	add	r2, sp, #12
 8016904:	4621      	mov	r1, r4
 8016906:	4640      	mov	r0, r8
 8016908:	f7ff fee6 	bl	80166d8 <_printf_common>
 801690c:	3001      	adds	r0, #1
 801690e:	d14a      	bne.n	80169a6 <_printf_i+0x1f2>
 8016910:	f04f 30ff 	mov.w	r0, #4294967295
 8016914:	b004      	add	sp, #16
 8016916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801691a:	6823      	ldr	r3, [r4, #0]
 801691c:	f043 0320 	orr.w	r3, r3, #32
 8016920:	6023      	str	r3, [r4, #0]
 8016922:	4833      	ldr	r0, [pc, #204]	@ (80169f0 <_printf_i+0x23c>)
 8016924:	2778      	movs	r7, #120	@ 0x78
 8016926:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801692a:	6823      	ldr	r3, [r4, #0]
 801692c:	6831      	ldr	r1, [r6, #0]
 801692e:	061f      	lsls	r7, r3, #24
 8016930:	f851 5b04 	ldr.w	r5, [r1], #4
 8016934:	d402      	bmi.n	801693c <_printf_i+0x188>
 8016936:	065f      	lsls	r7, r3, #25
 8016938:	bf48      	it	mi
 801693a:	b2ad      	uxthmi	r5, r5
 801693c:	6031      	str	r1, [r6, #0]
 801693e:	07d9      	lsls	r1, r3, #31
 8016940:	bf44      	itt	mi
 8016942:	f043 0320 	orrmi.w	r3, r3, #32
 8016946:	6023      	strmi	r3, [r4, #0]
 8016948:	b11d      	cbz	r5, 8016952 <_printf_i+0x19e>
 801694a:	2310      	movs	r3, #16
 801694c:	e7ac      	b.n	80168a8 <_printf_i+0xf4>
 801694e:	4827      	ldr	r0, [pc, #156]	@ (80169ec <_printf_i+0x238>)
 8016950:	e7e9      	b.n	8016926 <_printf_i+0x172>
 8016952:	6823      	ldr	r3, [r4, #0]
 8016954:	f023 0320 	bic.w	r3, r3, #32
 8016958:	6023      	str	r3, [r4, #0]
 801695a:	e7f6      	b.n	801694a <_printf_i+0x196>
 801695c:	4616      	mov	r6, r2
 801695e:	e7bd      	b.n	80168dc <_printf_i+0x128>
 8016960:	6833      	ldr	r3, [r6, #0]
 8016962:	6825      	ldr	r5, [r4, #0]
 8016964:	6961      	ldr	r1, [r4, #20]
 8016966:	1d18      	adds	r0, r3, #4
 8016968:	6030      	str	r0, [r6, #0]
 801696a:	062e      	lsls	r6, r5, #24
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	d501      	bpl.n	8016974 <_printf_i+0x1c0>
 8016970:	6019      	str	r1, [r3, #0]
 8016972:	e002      	b.n	801697a <_printf_i+0x1c6>
 8016974:	0668      	lsls	r0, r5, #25
 8016976:	d5fb      	bpl.n	8016970 <_printf_i+0x1bc>
 8016978:	8019      	strh	r1, [r3, #0]
 801697a:	2300      	movs	r3, #0
 801697c:	6123      	str	r3, [r4, #16]
 801697e:	4616      	mov	r6, r2
 8016980:	e7bc      	b.n	80168fc <_printf_i+0x148>
 8016982:	6833      	ldr	r3, [r6, #0]
 8016984:	1d1a      	adds	r2, r3, #4
 8016986:	6032      	str	r2, [r6, #0]
 8016988:	681e      	ldr	r6, [r3, #0]
 801698a:	6862      	ldr	r2, [r4, #4]
 801698c:	2100      	movs	r1, #0
 801698e:	4630      	mov	r0, r6
 8016990:	f7e9 fc3e 	bl	8000210 <memchr>
 8016994:	b108      	cbz	r0, 801699a <_printf_i+0x1e6>
 8016996:	1b80      	subs	r0, r0, r6
 8016998:	6060      	str	r0, [r4, #4]
 801699a:	6863      	ldr	r3, [r4, #4]
 801699c:	6123      	str	r3, [r4, #16]
 801699e:	2300      	movs	r3, #0
 80169a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80169a4:	e7aa      	b.n	80168fc <_printf_i+0x148>
 80169a6:	6923      	ldr	r3, [r4, #16]
 80169a8:	4632      	mov	r2, r6
 80169aa:	4649      	mov	r1, r9
 80169ac:	4640      	mov	r0, r8
 80169ae:	47d0      	blx	sl
 80169b0:	3001      	adds	r0, #1
 80169b2:	d0ad      	beq.n	8016910 <_printf_i+0x15c>
 80169b4:	6823      	ldr	r3, [r4, #0]
 80169b6:	079b      	lsls	r3, r3, #30
 80169b8:	d413      	bmi.n	80169e2 <_printf_i+0x22e>
 80169ba:	68e0      	ldr	r0, [r4, #12]
 80169bc:	9b03      	ldr	r3, [sp, #12]
 80169be:	4298      	cmp	r0, r3
 80169c0:	bfb8      	it	lt
 80169c2:	4618      	movlt	r0, r3
 80169c4:	e7a6      	b.n	8016914 <_printf_i+0x160>
 80169c6:	2301      	movs	r3, #1
 80169c8:	4632      	mov	r2, r6
 80169ca:	4649      	mov	r1, r9
 80169cc:	4640      	mov	r0, r8
 80169ce:	47d0      	blx	sl
 80169d0:	3001      	adds	r0, #1
 80169d2:	d09d      	beq.n	8016910 <_printf_i+0x15c>
 80169d4:	3501      	adds	r5, #1
 80169d6:	68e3      	ldr	r3, [r4, #12]
 80169d8:	9903      	ldr	r1, [sp, #12]
 80169da:	1a5b      	subs	r3, r3, r1
 80169dc:	42ab      	cmp	r3, r5
 80169de:	dcf2      	bgt.n	80169c6 <_printf_i+0x212>
 80169e0:	e7eb      	b.n	80169ba <_printf_i+0x206>
 80169e2:	2500      	movs	r5, #0
 80169e4:	f104 0619 	add.w	r6, r4, #25
 80169e8:	e7f5      	b.n	80169d6 <_printf_i+0x222>
 80169ea:	bf00      	nop
 80169ec:	0802584c 	.word	0x0802584c
 80169f0:	0802585d 	.word	0x0802585d

080169f4 <__sflush_r>:
 80169f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80169f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169fc:	0716      	lsls	r6, r2, #28
 80169fe:	4605      	mov	r5, r0
 8016a00:	460c      	mov	r4, r1
 8016a02:	d454      	bmi.n	8016aae <__sflush_r+0xba>
 8016a04:	684b      	ldr	r3, [r1, #4]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	dc02      	bgt.n	8016a10 <__sflush_r+0x1c>
 8016a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	dd48      	ble.n	8016aa2 <__sflush_r+0xae>
 8016a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a12:	2e00      	cmp	r6, #0
 8016a14:	d045      	beq.n	8016aa2 <__sflush_r+0xae>
 8016a16:	2300      	movs	r3, #0
 8016a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016a1c:	682f      	ldr	r7, [r5, #0]
 8016a1e:	6a21      	ldr	r1, [r4, #32]
 8016a20:	602b      	str	r3, [r5, #0]
 8016a22:	d030      	beq.n	8016a86 <__sflush_r+0x92>
 8016a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016a26:	89a3      	ldrh	r3, [r4, #12]
 8016a28:	0759      	lsls	r1, r3, #29
 8016a2a:	d505      	bpl.n	8016a38 <__sflush_r+0x44>
 8016a2c:	6863      	ldr	r3, [r4, #4]
 8016a2e:	1ad2      	subs	r2, r2, r3
 8016a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016a32:	b10b      	cbz	r3, 8016a38 <__sflush_r+0x44>
 8016a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016a36:	1ad2      	subs	r2, r2, r3
 8016a38:	2300      	movs	r3, #0
 8016a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a3c:	6a21      	ldr	r1, [r4, #32]
 8016a3e:	4628      	mov	r0, r5
 8016a40:	47b0      	blx	r6
 8016a42:	1c43      	adds	r3, r0, #1
 8016a44:	89a3      	ldrh	r3, [r4, #12]
 8016a46:	d106      	bne.n	8016a56 <__sflush_r+0x62>
 8016a48:	6829      	ldr	r1, [r5, #0]
 8016a4a:	291d      	cmp	r1, #29
 8016a4c:	d82b      	bhi.n	8016aa6 <__sflush_r+0xb2>
 8016a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8016af8 <__sflush_r+0x104>)
 8016a50:	410a      	asrs	r2, r1
 8016a52:	07d6      	lsls	r6, r2, #31
 8016a54:	d427      	bmi.n	8016aa6 <__sflush_r+0xb2>
 8016a56:	2200      	movs	r2, #0
 8016a58:	6062      	str	r2, [r4, #4]
 8016a5a:	04d9      	lsls	r1, r3, #19
 8016a5c:	6922      	ldr	r2, [r4, #16]
 8016a5e:	6022      	str	r2, [r4, #0]
 8016a60:	d504      	bpl.n	8016a6c <__sflush_r+0x78>
 8016a62:	1c42      	adds	r2, r0, #1
 8016a64:	d101      	bne.n	8016a6a <__sflush_r+0x76>
 8016a66:	682b      	ldr	r3, [r5, #0]
 8016a68:	b903      	cbnz	r3, 8016a6c <__sflush_r+0x78>
 8016a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8016a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a6e:	602f      	str	r7, [r5, #0]
 8016a70:	b1b9      	cbz	r1, 8016aa2 <__sflush_r+0xae>
 8016a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a76:	4299      	cmp	r1, r3
 8016a78:	d002      	beq.n	8016a80 <__sflush_r+0x8c>
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	f7ff fc8a 	bl	8016394 <_free_r>
 8016a80:	2300      	movs	r3, #0
 8016a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a84:	e00d      	b.n	8016aa2 <__sflush_r+0xae>
 8016a86:	2301      	movs	r3, #1
 8016a88:	4628      	mov	r0, r5
 8016a8a:	47b0      	blx	r6
 8016a8c:	4602      	mov	r2, r0
 8016a8e:	1c50      	adds	r0, r2, #1
 8016a90:	d1c9      	bne.n	8016a26 <__sflush_r+0x32>
 8016a92:	682b      	ldr	r3, [r5, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d0c6      	beq.n	8016a26 <__sflush_r+0x32>
 8016a98:	2b1d      	cmp	r3, #29
 8016a9a:	d001      	beq.n	8016aa0 <__sflush_r+0xac>
 8016a9c:	2b16      	cmp	r3, #22
 8016a9e:	d11e      	bne.n	8016ade <__sflush_r+0xea>
 8016aa0:	602f      	str	r7, [r5, #0]
 8016aa2:	2000      	movs	r0, #0
 8016aa4:	e022      	b.n	8016aec <__sflush_r+0xf8>
 8016aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aaa:	b21b      	sxth	r3, r3
 8016aac:	e01b      	b.n	8016ae6 <__sflush_r+0xf2>
 8016aae:	690f      	ldr	r7, [r1, #16]
 8016ab0:	2f00      	cmp	r7, #0
 8016ab2:	d0f6      	beq.n	8016aa2 <__sflush_r+0xae>
 8016ab4:	0793      	lsls	r3, r2, #30
 8016ab6:	680e      	ldr	r6, [r1, #0]
 8016ab8:	bf08      	it	eq
 8016aba:	694b      	ldreq	r3, [r1, #20]
 8016abc:	600f      	str	r7, [r1, #0]
 8016abe:	bf18      	it	ne
 8016ac0:	2300      	movne	r3, #0
 8016ac2:	eba6 0807 	sub.w	r8, r6, r7
 8016ac6:	608b      	str	r3, [r1, #8]
 8016ac8:	f1b8 0f00 	cmp.w	r8, #0
 8016acc:	dde9      	ble.n	8016aa2 <__sflush_r+0xae>
 8016ace:	6a21      	ldr	r1, [r4, #32]
 8016ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016ad2:	4643      	mov	r3, r8
 8016ad4:	463a      	mov	r2, r7
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	47b0      	blx	r6
 8016ada:	2800      	cmp	r0, #0
 8016adc:	dc08      	bgt.n	8016af0 <__sflush_r+0xfc>
 8016ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ae6:	81a3      	strh	r3, [r4, #12]
 8016ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8016aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016af0:	4407      	add	r7, r0
 8016af2:	eba8 0800 	sub.w	r8, r8, r0
 8016af6:	e7e7      	b.n	8016ac8 <__sflush_r+0xd4>
 8016af8:	dfbffffe 	.word	0xdfbffffe

08016afc <_fflush_r>:
 8016afc:	b538      	push	{r3, r4, r5, lr}
 8016afe:	690b      	ldr	r3, [r1, #16]
 8016b00:	4605      	mov	r5, r0
 8016b02:	460c      	mov	r4, r1
 8016b04:	b913      	cbnz	r3, 8016b0c <_fflush_r+0x10>
 8016b06:	2500      	movs	r5, #0
 8016b08:	4628      	mov	r0, r5
 8016b0a:	bd38      	pop	{r3, r4, r5, pc}
 8016b0c:	b118      	cbz	r0, 8016b16 <_fflush_r+0x1a>
 8016b0e:	6a03      	ldr	r3, [r0, #32]
 8016b10:	b90b      	cbnz	r3, 8016b16 <_fflush_r+0x1a>
 8016b12:	f7ff fa97 	bl	8016044 <__sinit>
 8016b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d0f3      	beq.n	8016b06 <_fflush_r+0xa>
 8016b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016b20:	07d0      	lsls	r0, r2, #31
 8016b22:	d404      	bmi.n	8016b2e <_fflush_r+0x32>
 8016b24:	0599      	lsls	r1, r3, #22
 8016b26:	d402      	bmi.n	8016b2e <_fflush_r+0x32>
 8016b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b2a:	f7ff fc04 	bl	8016336 <__retarget_lock_acquire_recursive>
 8016b2e:	4628      	mov	r0, r5
 8016b30:	4621      	mov	r1, r4
 8016b32:	f7ff ff5f 	bl	80169f4 <__sflush_r>
 8016b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b38:	07da      	lsls	r2, r3, #31
 8016b3a:	4605      	mov	r5, r0
 8016b3c:	d4e4      	bmi.n	8016b08 <_fflush_r+0xc>
 8016b3e:	89a3      	ldrh	r3, [r4, #12]
 8016b40:	059b      	lsls	r3, r3, #22
 8016b42:	d4e1      	bmi.n	8016b08 <_fflush_r+0xc>
 8016b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b46:	f7ff fbf7 	bl	8016338 <__retarget_lock_release_recursive>
 8016b4a:	e7dd      	b.n	8016b08 <_fflush_r+0xc>

08016b4c <fiprintf>:
 8016b4c:	b40e      	push	{r1, r2, r3}
 8016b4e:	b503      	push	{r0, r1, lr}
 8016b50:	4601      	mov	r1, r0
 8016b52:	ab03      	add	r3, sp, #12
 8016b54:	4805      	ldr	r0, [pc, #20]	@ (8016b6c <fiprintf+0x20>)
 8016b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b5a:	6800      	ldr	r0, [r0, #0]
 8016b5c:	9301      	str	r3, [sp, #4]
 8016b5e:	f000 f87f 	bl	8016c60 <_vfiprintf_r>
 8016b62:	b002      	add	sp, #8
 8016b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b68:	b003      	add	sp, #12
 8016b6a:	4770      	bx	lr
 8016b6c:	200000a8 	.word	0x200000a8

08016b70 <memmove>:
 8016b70:	4288      	cmp	r0, r1
 8016b72:	b510      	push	{r4, lr}
 8016b74:	eb01 0402 	add.w	r4, r1, r2
 8016b78:	d902      	bls.n	8016b80 <memmove+0x10>
 8016b7a:	4284      	cmp	r4, r0
 8016b7c:	4623      	mov	r3, r4
 8016b7e:	d807      	bhi.n	8016b90 <memmove+0x20>
 8016b80:	1e43      	subs	r3, r0, #1
 8016b82:	42a1      	cmp	r1, r4
 8016b84:	d008      	beq.n	8016b98 <memmove+0x28>
 8016b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b8e:	e7f8      	b.n	8016b82 <memmove+0x12>
 8016b90:	4402      	add	r2, r0
 8016b92:	4601      	mov	r1, r0
 8016b94:	428a      	cmp	r2, r1
 8016b96:	d100      	bne.n	8016b9a <memmove+0x2a>
 8016b98:	bd10      	pop	{r4, pc}
 8016b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ba2:	e7f7      	b.n	8016b94 <memmove+0x24>

08016ba4 <abort>:
 8016ba4:	b508      	push	{r3, lr}
 8016ba6:	2006      	movs	r0, #6
 8016ba8:	f000 fa2e 	bl	8017008 <raise>
 8016bac:	2001      	movs	r0, #1
 8016bae:	f7f2 f88d 	bl	8008ccc <_exit>

08016bb2 <_realloc_r>:
 8016bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb6:	4680      	mov	r8, r0
 8016bb8:	4615      	mov	r5, r2
 8016bba:	460c      	mov	r4, r1
 8016bbc:	b921      	cbnz	r1, 8016bc8 <_realloc_r+0x16>
 8016bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc2:	4611      	mov	r1, r2
 8016bc4:	f7ff b8e8 	b.w	8015d98 <_malloc_r>
 8016bc8:	b92a      	cbnz	r2, 8016bd6 <_realloc_r+0x24>
 8016bca:	f7ff fbe3 	bl	8016394 <_free_r>
 8016bce:	2400      	movs	r4, #0
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd6:	f000 fa33 	bl	8017040 <_malloc_usable_size_r>
 8016bda:	4285      	cmp	r5, r0
 8016bdc:	4606      	mov	r6, r0
 8016bde:	d802      	bhi.n	8016be6 <_realloc_r+0x34>
 8016be0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016be4:	d8f4      	bhi.n	8016bd0 <_realloc_r+0x1e>
 8016be6:	4629      	mov	r1, r5
 8016be8:	4640      	mov	r0, r8
 8016bea:	f7ff f8d5 	bl	8015d98 <_malloc_r>
 8016bee:	4607      	mov	r7, r0
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	d0ec      	beq.n	8016bce <_realloc_r+0x1c>
 8016bf4:	42b5      	cmp	r5, r6
 8016bf6:	462a      	mov	r2, r5
 8016bf8:	4621      	mov	r1, r4
 8016bfa:	bf28      	it	cs
 8016bfc:	4632      	movcs	r2, r6
 8016bfe:	f7ff fb9c 	bl	801633a <memcpy>
 8016c02:	4621      	mov	r1, r4
 8016c04:	4640      	mov	r0, r8
 8016c06:	f7ff fbc5 	bl	8016394 <_free_r>
 8016c0a:	463c      	mov	r4, r7
 8016c0c:	e7e0      	b.n	8016bd0 <_realloc_r+0x1e>

08016c0e <__sfputc_r>:
 8016c0e:	6893      	ldr	r3, [r2, #8]
 8016c10:	3b01      	subs	r3, #1
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	b410      	push	{r4}
 8016c16:	6093      	str	r3, [r2, #8]
 8016c18:	da08      	bge.n	8016c2c <__sfputc_r+0x1e>
 8016c1a:	6994      	ldr	r4, [r2, #24]
 8016c1c:	42a3      	cmp	r3, r4
 8016c1e:	db01      	blt.n	8016c24 <__sfputc_r+0x16>
 8016c20:	290a      	cmp	r1, #10
 8016c22:	d103      	bne.n	8016c2c <__sfputc_r+0x1e>
 8016c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c28:	f000 b932 	b.w	8016e90 <__swbuf_r>
 8016c2c:	6813      	ldr	r3, [r2, #0]
 8016c2e:	1c58      	adds	r0, r3, #1
 8016c30:	6010      	str	r0, [r2, #0]
 8016c32:	7019      	strb	r1, [r3, #0]
 8016c34:	4608      	mov	r0, r1
 8016c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c3a:	4770      	bx	lr

08016c3c <__sfputs_r>:
 8016c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c3e:	4606      	mov	r6, r0
 8016c40:	460f      	mov	r7, r1
 8016c42:	4614      	mov	r4, r2
 8016c44:	18d5      	adds	r5, r2, r3
 8016c46:	42ac      	cmp	r4, r5
 8016c48:	d101      	bne.n	8016c4e <__sfputs_r+0x12>
 8016c4a:	2000      	movs	r0, #0
 8016c4c:	e007      	b.n	8016c5e <__sfputs_r+0x22>
 8016c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c52:	463a      	mov	r2, r7
 8016c54:	4630      	mov	r0, r6
 8016c56:	f7ff ffda 	bl	8016c0e <__sfputc_r>
 8016c5a:	1c43      	adds	r3, r0, #1
 8016c5c:	d1f3      	bne.n	8016c46 <__sfputs_r+0xa>
 8016c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c60 <_vfiprintf_r>:
 8016c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c64:	460d      	mov	r5, r1
 8016c66:	b09d      	sub	sp, #116	@ 0x74
 8016c68:	4614      	mov	r4, r2
 8016c6a:	4698      	mov	r8, r3
 8016c6c:	4606      	mov	r6, r0
 8016c6e:	b118      	cbz	r0, 8016c78 <_vfiprintf_r+0x18>
 8016c70:	6a03      	ldr	r3, [r0, #32]
 8016c72:	b90b      	cbnz	r3, 8016c78 <_vfiprintf_r+0x18>
 8016c74:	f7ff f9e6 	bl	8016044 <__sinit>
 8016c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c7a:	07d9      	lsls	r1, r3, #31
 8016c7c:	d405      	bmi.n	8016c8a <_vfiprintf_r+0x2a>
 8016c7e:	89ab      	ldrh	r3, [r5, #12]
 8016c80:	059a      	lsls	r2, r3, #22
 8016c82:	d402      	bmi.n	8016c8a <_vfiprintf_r+0x2a>
 8016c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c86:	f7ff fb56 	bl	8016336 <__retarget_lock_acquire_recursive>
 8016c8a:	89ab      	ldrh	r3, [r5, #12]
 8016c8c:	071b      	lsls	r3, r3, #28
 8016c8e:	d501      	bpl.n	8016c94 <_vfiprintf_r+0x34>
 8016c90:	692b      	ldr	r3, [r5, #16]
 8016c92:	b99b      	cbnz	r3, 8016cbc <_vfiprintf_r+0x5c>
 8016c94:	4629      	mov	r1, r5
 8016c96:	4630      	mov	r0, r6
 8016c98:	f000 f938 	bl	8016f0c <__swsetup_r>
 8016c9c:	b170      	cbz	r0, 8016cbc <_vfiprintf_r+0x5c>
 8016c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016ca0:	07dc      	lsls	r4, r3, #31
 8016ca2:	d504      	bpl.n	8016cae <_vfiprintf_r+0x4e>
 8016ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ca8:	b01d      	add	sp, #116	@ 0x74
 8016caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cae:	89ab      	ldrh	r3, [r5, #12]
 8016cb0:	0598      	lsls	r0, r3, #22
 8016cb2:	d4f7      	bmi.n	8016ca4 <_vfiprintf_r+0x44>
 8016cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cb6:	f7ff fb3f 	bl	8016338 <__retarget_lock_release_recursive>
 8016cba:	e7f3      	b.n	8016ca4 <_vfiprintf_r+0x44>
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cc0:	2320      	movs	r3, #32
 8016cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016cca:	2330      	movs	r3, #48	@ 0x30
 8016ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016e7c <_vfiprintf_r+0x21c>
 8016cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016cd4:	f04f 0901 	mov.w	r9, #1
 8016cd8:	4623      	mov	r3, r4
 8016cda:	469a      	mov	sl, r3
 8016cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ce0:	b10a      	cbz	r2, 8016ce6 <_vfiprintf_r+0x86>
 8016ce2:	2a25      	cmp	r2, #37	@ 0x25
 8016ce4:	d1f9      	bne.n	8016cda <_vfiprintf_r+0x7a>
 8016ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8016cea:	d00b      	beq.n	8016d04 <_vfiprintf_r+0xa4>
 8016cec:	465b      	mov	r3, fp
 8016cee:	4622      	mov	r2, r4
 8016cf0:	4629      	mov	r1, r5
 8016cf2:	4630      	mov	r0, r6
 8016cf4:	f7ff ffa2 	bl	8016c3c <__sfputs_r>
 8016cf8:	3001      	adds	r0, #1
 8016cfa:	f000 80a7 	beq.w	8016e4c <_vfiprintf_r+0x1ec>
 8016cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d00:	445a      	add	r2, fp
 8016d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d04:	f89a 3000 	ldrb.w	r3, [sl]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	f000 809f 	beq.w	8016e4c <_vfiprintf_r+0x1ec>
 8016d0e:	2300      	movs	r3, #0
 8016d10:	f04f 32ff 	mov.w	r2, #4294967295
 8016d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d18:	f10a 0a01 	add.w	sl, sl, #1
 8016d1c:	9304      	str	r3, [sp, #16]
 8016d1e:	9307      	str	r3, [sp, #28]
 8016d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8016d26:	4654      	mov	r4, sl
 8016d28:	2205      	movs	r2, #5
 8016d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d2e:	4853      	ldr	r0, [pc, #332]	@ (8016e7c <_vfiprintf_r+0x21c>)
 8016d30:	f7e9 fa6e 	bl	8000210 <memchr>
 8016d34:	9a04      	ldr	r2, [sp, #16]
 8016d36:	b9d8      	cbnz	r0, 8016d70 <_vfiprintf_r+0x110>
 8016d38:	06d1      	lsls	r1, r2, #27
 8016d3a:	bf44      	itt	mi
 8016d3c:	2320      	movmi	r3, #32
 8016d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d42:	0713      	lsls	r3, r2, #28
 8016d44:	bf44      	itt	mi
 8016d46:	232b      	movmi	r3, #43	@ 0x2b
 8016d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d52:	d015      	beq.n	8016d80 <_vfiprintf_r+0x120>
 8016d54:	9a07      	ldr	r2, [sp, #28]
 8016d56:	4654      	mov	r4, sl
 8016d58:	2000      	movs	r0, #0
 8016d5a:	f04f 0c0a 	mov.w	ip, #10
 8016d5e:	4621      	mov	r1, r4
 8016d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d64:	3b30      	subs	r3, #48	@ 0x30
 8016d66:	2b09      	cmp	r3, #9
 8016d68:	d94b      	bls.n	8016e02 <_vfiprintf_r+0x1a2>
 8016d6a:	b1b0      	cbz	r0, 8016d9a <_vfiprintf_r+0x13a>
 8016d6c:	9207      	str	r2, [sp, #28]
 8016d6e:	e014      	b.n	8016d9a <_vfiprintf_r+0x13a>
 8016d70:	eba0 0308 	sub.w	r3, r0, r8
 8016d74:	fa09 f303 	lsl.w	r3, r9, r3
 8016d78:	4313      	orrs	r3, r2
 8016d7a:	9304      	str	r3, [sp, #16]
 8016d7c:	46a2      	mov	sl, r4
 8016d7e:	e7d2      	b.n	8016d26 <_vfiprintf_r+0xc6>
 8016d80:	9b03      	ldr	r3, [sp, #12]
 8016d82:	1d19      	adds	r1, r3, #4
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	9103      	str	r1, [sp, #12]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	bfbb      	ittet	lt
 8016d8c:	425b      	neglt	r3, r3
 8016d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8016d92:	9307      	strge	r3, [sp, #28]
 8016d94:	9307      	strlt	r3, [sp, #28]
 8016d96:	bfb8      	it	lt
 8016d98:	9204      	strlt	r2, [sp, #16]
 8016d9a:	7823      	ldrb	r3, [r4, #0]
 8016d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8016d9e:	d10a      	bne.n	8016db6 <_vfiprintf_r+0x156>
 8016da0:	7863      	ldrb	r3, [r4, #1]
 8016da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016da4:	d132      	bne.n	8016e0c <_vfiprintf_r+0x1ac>
 8016da6:	9b03      	ldr	r3, [sp, #12]
 8016da8:	1d1a      	adds	r2, r3, #4
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	9203      	str	r2, [sp, #12]
 8016dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016db2:	3402      	adds	r4, #2
 8016db4:	9305      	str	r3, [sp, #20]
 8016db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016e8c <_vfiprintf_r+0x22c>
 8016dba:	7821      	ldrb	r1, [r4, #0]
 8016dbc:	2203      	movs	r2, #3
 8016dbe:	4650      	mov	r0, sl
 8016dc0:	f7e9 fa26 	bl	8000210 <memchr>
 8016dc4:	b138      	cbz	r0, 8016dd6 <_vfiprintf_r+0x176>
 8016dc6:	9b04      	ldr	r3, [sp, #16]
 8016dc8:	eba0 000a 	sub.w	r0, r0, sl
 8016dcc:	2240      	movs	r2, #64	@ 0x40
 8016dce:	4082      	lsls	r2, r0
 8016dd0:	4313      	orrs	r3, r2
 8016dd2:	3401      	adds	r4, #1
 8016dd4:	9304      	str	r3, [sp, #16]
 8016dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dda:	4829      	ldr	r0, [pc, #164]	@ (8016e80 <_vfiprintf_r+0x220>)
 8016ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016de0:	2206      	movs	r2, #6
 8016de2:	f7e9 fa15 	bl	8000210 <memchr>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	d03f      	beq.n	8016e6a <_vfiprintf_r+0x20a>
 8016dea:	4b26      	ldr	r3, [pc, #152]	@ (8016e84 <_vfiprintf_r+0x224>)
 8016dec:	bb1b      	cbnz	r3, 8016e36 <_vfiprintf_r+0x1d6>
 8016dee:	9b03      	ldr	r3, [sp, #12]
 8016df0:	3307      	adds	r3, #7
 8016df2:	f023 0307 	bic.w	r3, r3, #7
 8016df6:	3308      	adds	r3, #8
 8016df8:	9303      	str	r3, [sp, #12]
 8016dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dfc:	443b      	add	r3, r7
 8016dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e00:	e76a      	b.n	8016cd8 <_vfiprintf_r+0x78>
 8016e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e06:	460c      	mov	r4, r1
 8016e08:	2001      	movs	r0, #1
 8016e0a:	e7a8      	b.n	8016d5e <_vfiprintf_r+0xfe>
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	3401      	adds	r4, #1
 8016e10:	9305      	str	r3, [sp, #20]
 8016e12:	4619      	mov	r1, r3
 8016e14:	f04f 0c0a 	mov.w	ip, #10
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e1e:	3a30      	subs	r2, #48	@ 0x30
 8016e20:	2a09      	cmp	r2, #9
 8016e22:	d903      	bls.n	8016e2c <_vfiprintf_r+0x1cc>
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d0c6      	beq.n	8016db6 <_vfiprintf_r+0x156>
 8016e28:	9105      	str	r1, [sp, #20]
 8016e2a:	e7c4      	b.n	8016db6 <_vfiprintf_r+0x156>
 8016e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e30:	4604      	mov	r4, r0
 8016e32:	2301      	movs	r3, #1
 8016e34:	e7f0      	b.n	8016e18 <_vfiprintf_r+0x1b8>
 8016e36:	ab03      	add	r3, sp, #12
 8016e38:	9300      	str	r3, [sp, #0]
 8016e3a:	462a      	mov	r2, r5
 8016e3c:	4b12      	ldr	r3, [pc, #72]	@ (8016e88 <_vfiprintf_r+0x228>)
 8016e3e:	a904      	add	r1, sp, #16
 8016e40:	4630      	mov	r0, r6
 8016e42:	f3af 8000 	nop.w
 8016e46:	4607      	mov	r7, r0
 8016e48:	1c78      	adds	r0, r7, #1
 8016e4a:	d1d6      	bne.n	8016dfa <_vfiprintf_r+0x19a>
 8016e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e4e:	07d9      	lsls	r1, r3, #31
 8016e50:	d405      	bmi.n	8016e5e <_vfiprintf_r+0x1fe>
 8016e52:	89ab      	ldrh	r3, [r5, #12]
 8016e54:	059a      	lsls	r2, r3, #22
 8016e56:	d402      	bmi.n	8016e5e <_vfiprintf_r+0x1fe>
 8016e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e5a:	f7ff fa6d 	bl	8016338 <__retarget_lock_release_recursive>
 8016e5e:	89ab      	ldrh	r3, [r5, #12]
 8016e60:	065b      	lsls	r3, r3, #25
 8016e62:	f53f af1f 	bmi.w	8016ca4 <_vfiprintf_r+0x44>
 8016e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016e68:	e71e      	b.n	8016ca8 <_vfiprintf_r+0x48>
 8016e6a:	ab03      	add	r3, sp, #12
 8016e6c:	9300      	str	r3, [sp, #0]
 8016e6e:	462a      	mov	r2, r5
 8016e70:	4b05      	ldr	r3, [pc, #20]	@ (8016e88 <_vfiprintf_r+0x228>)
 8016e72:	a904      	add	r1, sp, #16
 8016e74:	4630      	mov	r0, r6
 8016e76:	f7ff fc9d 	bl	80167b4 <_printf_i>
 8016e7a:	e7e4      	b.n	8016e46 <_vfiprintf_r+0x1e6>
 8016e7c:	0802583b 	.word	0x0802583b
 8016e80:	08025845 	.word	0x08025845
 8016e84:	00000000 	.word	0x00000000
 8016e88:	08016c3d 	.word	0x08016c3d
 8016e8c:	08025841 	.word	0x08025841

08016e90 <__swbuf_r>:
 8016e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e92:	460e      	mov	r6, r1
 8016e94:	4614      	mov	r4, r2
 8016e96:	4605      	mov	r5, r0
 8016e98:	b118      	cbz	r0, 8016ea2 <__swbuf_r+0x12>
 8016e9a:	6a03      	ldr	r3, [r0, #32]
 8016e9c:	b90b      	cbnz	r3, 8016ea2 <__swbuf_r+0x12>
 8016e9e:	f7ff f8d1 	bl	8016044 <__sinit>
 8016ea2:	69a3      	ldr	r3, [r4, #24]
 8016ea4:	60a3      	str	r3, [r4, #8]
 8016ea6:	89a3      	ldrh	r3, [r4, #12]
 8016ea8:	071a      	lsls	r2, r3, #28
 8016eaa:	d501      	bpl.n	8016eb0 <__swbuf_r+0x20>
 8016eac:	6923      	ldr	r3, [r4, #16]
 8016eae:	b943      	cbnz	r3, 8016ec2 <__swbuf_r+0x32>
 8016eb0:	4621      	mov	r1, r4
 8016eb2:	4628      	mov	r0, r5
 8016eb4:	f000 f82a 	bl	8016f0c <__swsetup_r>
 8016eb8:	b118      	cbz	r0, 8016ec2 <__swbuf_r+0x32>
 8016eba:	f04f 37ff 	mov.w	r7, #4294967295
 8016ebe:	4638      	mov	r0, r7
 8016ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ec2:	6823      	ldr	r3, [r4, #0]
 8016ec4:	6922      	ldr	r2, [r4, #16]
 8016ec6:	1a98      	subs	r0, r3, r2
 8016ec8:	6963      	ldr	r3, [r4, #20]
 8016eca:	b2f6      	uxtb	r6, r6
 8016ecc:	4283      	cmp	r3, r0
 8016ece:	4637      	mov	r7, r6
 8016ed0:	dc05      	bgt.n	8016ede <__swbuf_r+0x4e>
 8016ed2:	4621      	mov	r1, r4
 8016ed4:	4628      	mov	r0, r5
 8016ed6:	f7ff fe11 	bl	8016afc <_fflush_r>
 8016eda:	2800      	cmp	r0, #0
 8016edc:	d1ed      	bne.n	8016eba <__swbuf_r+0x2a>
 8016ede:	68a3      	ldr	r3, [r4, #8]
 8016ee0:	3b01      	subs	r3, #1
 8016ee2:	60a3      	str	r3, [r4, #8]
 8016ee4:	6823      	ldr	r3, [r4, #0]
 8016ee6:	1c5a      	adds	r2, r3, #1
 8016ee8:	6022      	str	r2, [r4, #0]
 8016eea:	701e      	strb	r6, [r3, #0]
 8016eec:	6962      	ldr	r2, [r4, #20]
 8016eee:	1c43      	adds	r3, r0, #1
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d004      	beq.n	8016efe <__swbuf_r+0x6e>
 8016ef4:	89a3      	ldrh	r3, [r4, #12]
 8016ef6:	07db      	lsls	r3, r3, #31
 8016ef8:	d5e1      	bpl.n	8016ebe <__swbuf_r+0x2e>
 8016efa:	2e0a      	cmp	r6, #10
 8016efc:	d1df      	bne.n	8016ebe <__swbuf_r+0x2e>
 8016efe:	4621      	mov	r1, r4
 8016f00:	4628      	mov	r0, r5
 8016f02:	f7ff fdfb 	bl	8016afc <_fflush_r>
 8016f06:	2800      	cmp	r0, #0
 8016f08:	d0d9      	beq.n	8016ebe <__swbuf_r+0x2e>
 8016f0a:	e7d6      	b.n	8016eba <__swbuf_r+0x2a>

08016f0c <__swsetup_r>:
 8016f0c:	b538      	push	{r3, r4, r5, lr}
 8016f0e:	4b29      	ldr	r3, [pc, #164]	@ (8016fb4 <__swsetup_r+0xa8>)
 8016f10:	4605      	mov	r5, r0
 8016f12:	6818      	ldr	r0, [r3, #0]
 8016f14:	460c      	mov	r4, r1
 8016f16:	b118      	cbz	r0, 8016f20 <__swsetup_r+0x14>
 8016f18:	6a03      	ldr	r3, [r0, #32]
 8016f1a:	b90b      	cbnz	r3, 8016f20 <__swsetup_r+0x14>
 8016f1c:	f7ff f892 	bl	8016044 <__sinit>
 8016f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f24:	0719      	lsls	r1, r3, #28
 8016f26:	d422      	bmi.n	8016f6e <__swsetup_r+0x62>
 8016f28:	06da      	lsls	r2, r3, #27
 8016f2a:	d407      	bmi.n	8016f3c <__swsetup_r+0x30>
 8016f2c:	2209      	movs	r2, #9
 8016f2e:	602a      	str	r2, [r5, #0]
 8016f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f34:	81a3      	strh	r3, [r4, #12]
 8016f36:	f04f 30ff 	mov.w	r0, #4294967295
 8016f3a:	e033      	b.n	8016fa4 <__swsetup_r+0x98>
 8016f3c:	0758      	lsls	r0, r3, #29
 8016f3e:	d512      	bpl.n	8016f66 <__swsetup_r+0x5a>
 8016f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016f42:	b141      	cbz	r1, 8016f56 <__swsetup_r+0x4a>
 8016f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016f48:	4299      	cmp	r1, r3
 8016f4a:	d002      	beq.n	8016f52 <__swsetup_r+0x46>
 8016f4c:	4628      	mov	r0, r5
 8016f4e:	f7ff fa21 	bl	8016394 <_free_r>
 8016f52:	2300      	movs	r3, #0
 8016f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8016f56:	89a3      	ldrh	r3, [r4, #12]
 8016f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016f5c:	81a3      	strh	r3, [r4, #12]
 8016f5e:	2300      	movs	r3, #0
 8016f60:	6063      	str	r3, [r4, #4]
 8016f62:	6923      	ldr	r3, [r4, #16]
 8016f64:	6023      	str	r3, [r4, #0]
 8016f66:	89a3      	ldrh	r3, [r4, #12]
 8016f68:	f043 0308 	orr.w	r3, r3, #8
 8016f6c:	81a3      	strh	r3, [r4, #12]
 8016f6e:	6923      	ldr	r3, [r4, #16]
 8016f70:	b94b      	cbnz	r3, 8016f86 <__swsetup_r+0x7a>
 8016f72:	89a3      	ldrh	r3, [r4, #12]
 8016f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f7c:	d003      	beq.n	8016f86 <__swsetup_r+0x7a>
 8016f7e:	4621      	mov	r1, r4
 8016f80:	4628      	mov	r0, r5
 8016f82:	f000 f88b 	bl	801709c <__smakebuf_r>
 8016f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f8a:	f013 0201 	ands.w	r2, r3, #1
 8016f8e:	d00a      	beq.n	8016fa6 <__swsetup_r+0x9a>
 8016f90:	2200      	movs	r2, #0
 8016f92:	60a2      	str	r2, [r4, #8]
 8016f94:	6962      	ldr	r2, [r4, #20]
 8016f96:	4252      	negs	r2, r2
 8016f98:	61a2      	str	r2, [r4, #24]
 8016f9a:	6922      	ldr	r2, [r4, #16]
 8016f9c:	b942      	cbnz	r2, 8016fb0 <__swsetup_r+0xa4>
 8016f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016fa2:	d1c5      	bne.n	8016f30 <__swsetup_r+0x24>
 8016fa4:	bd38      	pop	{r3, r4, r5, pc}
 8016fa6:	0799      	lsls	r1, r3, #30
 8016fa8:	bf58      	it	pl
 8016faa:	6962      	ldrpl	r2, [r4, #20]
 8016fac:	60a2      	str	r2, [r4, #8]
 8016fae:	e7f4      	b.n	8016f9a <__swsetup_r+0x8e>
 8016fb0:	2000      	movs	r0, #0
 8016fb2:	e7f7      	b.n	8016fa4 <__swsetup_r+0x98>
 8016fb4:	200000a8 	.word	0x200000a8

08016fb8 <_raise_r>:
 8016fb8:	291f      	cmp	r1, #31
 8016fba:	b538      	push	{r3, r4, r5, lr}
 8016fbc:	4605      	mov	r5, r0
 8016fbe:	460c      	mov	r4, r1
 8016fc0:	d904      	bls.n	8016fcc <_raise_r+0x14>
 8016fc2:	2316      	movs	r3, #22
 8016fc4:	6003      	str	r3, [r0, #0]
 8016fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8016fca:	bd38      	pop	{r3, r4, r5, pc}
 8016fcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016fce:	b112      	cbz	r2, 8016fd6 <_raise_r+0x1e>
 8016fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016fd4:	b94b      	cbnz	r3, 8016fea <_raise_r+0x32>
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	f000 f830 	bl	801703c <_getpid_r>
 8016fdc:	4622      	mov	r2, r4
 8016fde:	4601      	mov	r1, r0
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fe6:	f000 b817 	b.w	8017018 <_kill_r>
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d00a      	beq.n	8017004 <_raise_r+0x4c>
 8016fee:	1c59      	adds	r1, r3, #1
 8016ff0:	d103      	bne.n	8016ffa <_raise_r+0x42>
 8016ff2:	2316      	movs	r3, #22
 8016ff4:	6003      	str	r3, [r0, #0]
 8016ff6:	2001      	movs	r0, #1
 8016ff8:	e7e7      	b.n	8016fca <_raise_r+0x12>
 8016ffa:	2100      	movs	r1, #0
 8016ffc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017000:	4620      	mov	r0, r4
 8017002:	4798      	blx	r3
 8017004:	2000      	movs	r0, #0
 8017006:	e7e0      	b.n	8016fca <_raise_r+0x12>

08017008 <raise>:
 8017008:	4b02      	ldr	r3, [pc, #8]	@ (8017014 <raise+0xc>)
 801700a:	4601      	mov	r1, r0
 801700c:	6818      	ldr	r0, [r3, #0]
 801700e:	f7ff bfd3 	b.w	8016fb8 <_raise_r>
 8017012:	bf00      	nop
 8017014:	200000a8 	.word	0x200000a8

08017018 <_kill_r>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4d07      	ldr	r5, [pc, #28]	@ (8017038 <_kill_r+0x20>)
 801701c:	2300      	movs	r3, #0
 801701e:	4604      	mov	r4, r0
 8017020:	4608      	mov	r0, r1
 8017022:	4611      	mov	r1, r2
 8017024:	602b      	str	r3, [r5, #0]
 8017026:	f7f1 fe41 	bl	8008cac <_kill>
 801702a:	1c43      	adds	r3, r0, #1
 801702c:	d102      	bne.n	8017034 <_kill_r+0x1c>
 801702e:	682b      	ldr	r3, [r5, #0]
 8017030:	b103      	cbz	r3, 8017034 <_kill_r+0x1c>
 8017032:	6023      	str	r3, [r4, #0]
 8017034:	bd38      	pop	{r3, r4, r5, pc}
 8017036:	bf00      	nop
 8017038:	20009800 	.word	0x20009800

0801703c <_getpid_r>:
 801703c:	f7f1 be2e 	b.w	8008c9c <_getpid>

08017040 <_malloc_usable_size_r>:
 8017040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017044:	1f18      	subs	r0, r3, #4
 8017046:	2b00      	cmp	r3, #0
 8017048:	bfbc      	itt	lt
 801704a:	580b      	ldrlt	r3, [r1, r0]
 801704c:	18c0      	addlt	r0, r0, r3
 801704e:	4770      	bx	lr

08017050 <__swhatbuf_r>:
 8017050:	b570      	push	{r4, r5, r6, lr}
 8017052:	460c      	mov	r4, r1
 8017054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017058:	2900      	cmp	r1, #0
 801705a:	b096      	sub	sp, #88	@ 0x58
 801705c:	4615      	mov	r5, r2
 801705e:	461e      	mov	r6, r3
 8017060:	da0d      	bge.n	801707e <__swhatbuf_r+0x2e>
 8017062:	89a3      	ldrh	r3, [r4, #12]
 8017064:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017068:	f04f 0100 	mov.w	r1, #0
 801706c:	bf14      	ite	ne
 801706e:	2340      	movne	r3, #64	@ 0x40
 8017070:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017074:	2000      	movs	r0, #0
 8017076:	6031      	str	r1, [r6, #0]
 8017078:	602b      	str	r3, [r5, #0]
 801707a:	b016      	add	sp, #88	@ 0x58
 801707c:	bd70      	pop	{r4, r5, r6, pc}
 801707e:	466a      	mov	r2, sp
 8017080:	f000 f848 	bl	8017114 <_fstat_r>
 8017084:	2800      	cmp	r0, #0
 8017086:	dbec      	blt.n	8017062 <__swhatbuf_r+0x12>
 8017088:	9901      	ldr	r1, [sp, #4]
 801708a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801708e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017092:	4259      	negs	r1, r3
 8017094:	4159      	adcs	r1, r3
 8017096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801709a:	e7eb      	b.n	8017074 <__swhatbuf_r+0x24>

0801709c <__smakebuf_r>:
 801709c:	898b      	ldrh	r3, [r1, #12]
 801709e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170a0:	079d      	lsls	r5, r3, #30
 80170a2:	4606      	mov	r6, r0
 80170a4:	460c      	mov	r4, r1
 80170a6:	d507      	bpl.n	80170b8 <__smakebuf_r+0x1c>
 80170a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	6123      	str	r3, [r4, #16]
 80170b0:	2301      	movs	r3, #1
 80170b2:	6163      	str	r3, [r4, #20]
 80170b4:	b003      	add	sp, #12
 80170b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170b8:	ab01      	add	r3, sp, #4
 80170ba:	466a      	mov	r2, sp
 80170bc:	f7ff ffc8 	bl	8017050 <__swhatbuf_r>
 80170c0:	9f00      	ldr	r7, [sp, #0]
 80170c2:	4605      	mov	r5, r0
 80170c4:	4639      	mov	r1, r7
 80170c6:	4630      	mov	r0, r6
 80170c8:	f7fe fe66 	bl	8015d98 <_malloc_r>
 80170cc:	b948      	cbnz	r0, 80170e2 <__smakebuf_r+0x46>
 80170ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170d2:	059a      	lsls	r2, r3, #22
 80170d4:	d4ee      	bmi.n	80170b4 <__smakebuf_r+0x18>
 80170d6:	f023 0303 	bic.w	r3, r3, #3
 80170da:	f043 0302 	orr.w	r3, r3, #2
 80170de:	81a3      	strh	r3, [r4, #12]
 80170e0:	e7e2      	b.n	80170a8 <__smakebuf_r+0xc>
 80170e2:	89a3      	ldrh	r3, [r4, #12]
 80170e4:	6020      	str	r0, [r4, #0]
 80170e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170ea:	81a3      	strh	r3, [r4, #12]
 80170ec:	9b01      	ldr	r3, [sp, #4]
 80170ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80170f2:	b15b      	cbz	r3, 801710c <__smakebuf_r+0x70>
 80170f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170f8:	4630      	mov	r0, r6
 80170fa:	f000 f81d 	bl	8017138 <_isatty_r>
 80170fe:	b128      	cbz	r0, 801710c <__smakebuf_r+0x70>
 8017100:	89a3      	ldrh	r3, [r4, #12]
 8017102:	f023 0303 	bic.w	r3, r3, #3
 8017106:	f043 0301 	orr.w	r3, r3, #1
 801710a:	81a3      	strh	r3, [r4, #12]
 801710c:	89a3      	ldrh	r3, [r4, #12]
 801710e:	431d      	orrs	r5, r3
 8017110:	81a5      	strh	r5, [r4, #12]
 8017112:	e7cf      	b.n	80170b4 <__smakebuf_r+0x18>

08017114 <_fstat_r>:
 8017114:	b538      	push	{r3, r4, r5, lr}
 8017116:	4d07      	ldr	r5, [pc, #28]	@ (8017134 <_fstat_r+0x20>)
 8017118:	2300      	movs	r3, #0
 801711a:	4604      	mov	r4, r0
 801711c:	4608      	mov	r0, r1
 801711e:	4611      	mov	r1, r2
 8017120:	602b      	str	r3, [r5, #0]
 8017122:	f7f1 fe23 	bl	8008d6c <_fstat>
 8017126:	1c43      	adds	r3, r0, #1
 8017128:	d102      	bne.n	8017130 <_fstat_r+0x1c>
 801712a:	682b      	ldr	r3, [r5, #0]
 801712c:	b103      	cbz	r3, 8017130 <_fstat_r+0x1c>
 801712e:	6023      	str	r3, [r4, #0]
 8017130:	bd38      	pop	{r3, r4, r5, pc}
 8017132:	bf00      	nop
 8017134:	20009800 	.word	0x20009800

08017138 <_isatty_r>:
 8017138:	b538      	push	{r3, r4, r5, lr}
 801713a:	4d06      	ldr	r5, [pc, #24]	@ (8017154 <_isatty_r+0x1c>)
 801713c:	2300      	movs	r3, #0
 801713e:	4604      	mov	r4, r0
 8017140:	4608      	mov	r0, r1
 8017142:	602b      	str	r3, [r5, #0]
 8017144:	f7f1 fe22 	bl	8008d8c <_isatty>
 8017148:	1c43      	adds	r3, r0, #1
 801714a:	d102      	bne.n	8017152 <_isatty_r+0x1a>
 801714c:	682b      	ldr	r3, [r5, #0]
 801714e:	b103      	cbz	r3, 8017152 <_isatty_r+0x1a>
 8017150:	6023      	str	r3, [r4, #0]
 8017152:	bd38      	pop	{r3, r4, r5, pc}
 8017154:	20009800 	.word	0x20009800

08017158 <_init>:
 8017158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801715a:	bf00      	nop
 801715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801715e:	bc08      	pop	{r3}
 8017160:	469e      	mov	lr, r3
 8017162:	4770      	bx	lr

08017164 <_fini>:
 8017164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017166:	bf00      	nop
 8017168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801716a:	bc08      	pop	{r3}
 801716c:	469e      	mov	lr, r3
 801716e:	4770      	bx	lr
