
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f67c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e58c  0800f84c  0800f84c  0001084c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ddd8  0801ddd8  0001f0b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ddd8  0801ddd8  0001edd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dde0  0801dde0  0001f0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dde0  0801dde0  0001ede0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dde4  0801dde4  0001ede4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801dde8  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb8  200000b4  0801de9c  0001f0b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d6c  0801de9c  0001fd6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000313e3  00000000  00000000  0001f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074da  00000000  00000000  000504c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  000579a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f15  00000000  00000000  0005a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003139d  00000000  00000000  0005c10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036471  00000000  00000000  0008d4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119491  00000000  00000000  000c391b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dcdac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b364  00000000  00000000  001dcdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001e8154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f834 	.word	0x0800f834

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f834 	.word	0x0800f834

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f005 f869 	bl	8005eb4 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fc62 	bl	80036b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f005 fa03 	bl	8006208 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fc52 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f005 f817 	bl	8005eb4 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 fc10 	bl	80036b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f005 f9b1 	bl	8006208 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 fc00 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000118 	.word	0x20000118
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f006 fad9 	bl	80074e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f006 faae 	bl	80074e0 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MX_DAC_Init+0x50>)
 8000fb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fb6:	f005 fc59 	bl	800686c <HAL_DAC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fc0:	f002 fb76 	bl	80036b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fd4:	f005 fcd0 	bl	8006978 <HAL_DAC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fde:	f002 fb67 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000160 	.word	0x20000160
 8000ff0:	40007400 	.word	0x40007400

08000ff4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <HAL_DAC_MspInit+0x84>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12b      	bne.n	800106e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <HAL_DAC_MspInit+0x88>)
 800101c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_DAC_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001046:	2310      	movs	r3, #16
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4809      	ldr	r0, [pc, #36]	@ (8001080 <HAL_DAC_MspInit+0x8c>)
 800105a:	f006 fa41 	bl	80074e0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	210f      	movs	r1, #15
 8001062:	2036      	movs	r0, #54	@ 0x36
 8001064:	f005 fbd8 	bl	8006818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001068:	2036      	movs	r0, #54	@ 0x36
 800106a:	f005 fbf1 	bl	8006850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40007400 	.word	0x40007400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 800108a:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <MX_DMA2D_Init+0x60>)
 800108c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010ba:	f005 fe75 	bl	8006da8 <HAL_DMA2D_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80010c4:	f002 faf4 	bl	80036b0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010c8:	2101      	movs	r1, #1
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010cc:	f006 f8da 	bl	8007284 <HAL_DMA2D_ConfigLayer>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80010d6:	f002 faeb 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000174 	.word	0x20000174
 80010e4:	4002b000 	.word	0x4002b000

080010e8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_DMA2D_MspInit+0x44>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d113      	bne.n	8001122 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 8001100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	205a      	movs	r0, #90	@ 0x5a
 8001118:	f005 fb7e 	bl	8006818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800111c:	205a      	movs	r0, #90	@ 0x5a
 800111e:	f005 fb97 	bl	8006850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	4002b000 	.word	0x4002b000
 8001130:	40023800 	.word	0x40023800

08001134 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_FMC_Init+0x98>)
 800114e:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <MX_FMC_Init+0x9c>)
 8001150:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_FMC_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_FMC_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_FMC_Init+0x98>)
 8001160:	2204      	movs	r2, #4
 8001162:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_FMC_Init+0x98>)
 8001166:	2210      	movs	r2, #16
 8001168:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_FMC_Init+0x98>)
 800116c:	2240      	movs	r2, #64	@ 0x40
 800116e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_FMC_Init+0x98>)
 8001172:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001176:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_FMC_Init+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_FMC_Init+0x98>)
 8001180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001184:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_FMC_Init+0x98>)
 8001188:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_FMC_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001198:	2307      	movs	r3, #7
 800119a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80011a4:	2303      	movs	r3, #3
 80011a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_FMC_Init+0x98>)
 80011b6:	f009 faed 	bl	800a794 <HAL_SDRAM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80011c0:	f002 fa76 	bl	80036b0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001b4 	.word	0x200001b4
 80011d0:	a0000140 	.word	0xa0000140

080011d4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <HAL_FMC_MspInit+0x100>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d16d      	bne.n	80012cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80011f0:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <HAL_FMC_MspInit+0x100>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 80011f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fa:	4a37      	ldr	r2, [pc, #220]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6393      	str	r3, [r2, #56]	@ 0x38
 8001202:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 8001204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800120e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001212:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001220:	230c      	movs	r3, #12
 8001222:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	482c      	ldr	r0, [pc, #176]	@ (80012dc <HAL_FMC_MspInit+0x108>)
 800122a:	f006 f959 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800122e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001232:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001240:	230c      	movs	r3, #12
 8001242:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4825      	ldr	r0, [pc, #148]	@ (80012e0 <HAL_FMC_MspInit+0x10c>)
 800124a:	f006 f949 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800124e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001252:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001260:	230c      	movs	r3, #12
 8001262:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	481e      	ldr	r0, [pc, #120]	@ (80012e4 <HAL_FMC_MspInit+0x110>)
 800126a:	f006 f939 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800126e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001272:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <HAL_FMC_MspInit+0x114>)
 800128a:	f006 f929 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800128e:	2328      	movs	r3, #40	@ 0x28
 8001290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129e:	230c      	movs	r3, #12
 80012a0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4811      	ldr	r0, [pc, #68]	@ (80012ec <HAL_FMC_MspInit+0x118>)
 80012a8:	f006 f91a 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012ac:	2308      	movs	r3, #8
 80012ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012bc:	230c      	movs	r3, #12
 80012be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	480a      	ldr	r0, [pc, #40]	@ (80012f0 <HAL_FMC_MspInit+0x11c>)
 80012c6:	f006 f90b 	bl	80074e0 <HAL_GPIO_Init>
 80012ca:	e000      	b.n	80012ce <HAL_FMC_MspInit+0xfa>
    return;
 80012cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001e8 	.word	0x200001e8
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40020800 	.word	0x40020800

080012f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012fc:	f7ff ff6a 	bl	80011d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <vApplicationGetIdleTaskMemory+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <vApplicationGetIdleTaskMemory+0x30>)
 800131e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000410 	.word	0x20000410
 8001338:	200004b0 	.word	0x200004b0

0800133c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b0a6      	sub	sp, #152	@ 0x98
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 800134e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001352:	4618      	mov	r0, r3
 8001354:	f00a fdf5 	bl	800bf42 <osMutexCreate>
 8001358:	4603      	mov	r3, r0
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <MX_FREERTOS_Init+0xe4>)
 800135c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800135e:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <MX_FREERTOS_Init+0xe8>)
 8001360:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001364:	461d      	mov	r5, r3
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800136e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001372:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f00a fd82 	bl	800be82 <osThreadCreate>
 800137e:	4603      	mov	r3, r0
 8001380:	4a29      	ldr	r2, [pc, #164]	@ (8001428 <MX_FREERTOS_Init+0xec>)
 8001382:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <MX_FREERTOS_Init+0xf0>)
 8001386:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800138a:	461d      	mov	r5, r3
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001398:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00a fd6f 	bl	800be82 <osThreadCreate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <MX_FREERTOS_Init+0xf4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_FREERTOS_Init+0xf8>)
 80013ac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013b0:	461d      	mov	r5, r3
 80013b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 80013be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00a fd5c 	bl	800be82 <osThreadCreate>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <MX_FREERTOS_Init+0xfc>)
 80013ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_FREERTOS_Init+0x100>)
 80013d2:	f107 0420 	add.w	r4, r7, #32
 80013d6:	461d      	mov	r5, r3
 80013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a fd49 	bl	800be82 <osThreadCreate>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_FREERTOS_Init+0x104>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_FREERTOS_Init+0x108>)
 80013f8:	1d3c      	adds	r4, r7, #4
 80013fa:	461d      	mov	r5, r3
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f00a fd38 	bl	800be82 <osThreadCreate>
 8001412:	4603      	mov	r3, r0
 8001414:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <MX_FREERTOS_Init+0x10c>)
 8001416:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001418:	bf00      	nop
 800141a:	3798      	adds	r7, #152	@ 0x98
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	2000040c 	.word	0x2000040c
 8001424:	0800f858 	.word	0x0800f858
 8001428:	200003f8 	.word	0x200003f8
 800142c:	0800f880 	.word	0x0800f880
 8001430:	200003fc 	.word	0x200003fc
 8001434:	0800f8ac 	.word	0x0800f8ac
 8001438:	20000400 	.word	0x20000400
 800143c:	0800f8d8 	.word	0x0800f8d8
 8001440:	20000404 	.word	0x20000404
 8001444:	0800f904 	.word	0x0800f904
 8001448:	20000408 	.word	0x20000408

0800144c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f00a fd60 	bl	800bf1a <osDelay>
 800145a:	e7fb      	b.n	8001454 <StartDefaultTask+0x8>

0800145c <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0d0      	sub	sp, #320	@ 0x140
 8001460:	af00      	add	r7, sp, #0
 8001462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001466:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800146a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if (gameOver || gamePaused || !gameStarted) {
 800146c:	4bbc      	ldr	r3, [pc, #752]	@ (8001760 <StartDisplayTask+0x304>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <StartDisplayTask+0x28>
 8001474:	4bbb      	ldr	r3, [pc, #748]	@ (8001764 <StartDisplayTask+0x308>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <StartDisplayTask+0x28>
 800147c:	4bba      	ldr	r3, [pc, #744]	@ (8001768 <StartDisplayTask+0x30c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d110      	bne.n	80014a6 <StartDisplayTask+0x4a>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001484:	4bb9      	ldr	r3, [pc, #740]	@ (800176c <StartDisplayTask+0x310>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	4618      	mov	r0, r3
 800148e:	f00b f8d1 	bl	800c634 <xQueueSemaphoreTake>
      displayGameStatus();
 8001492:	f000 ff5b 	bl	800234c <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 8001496:	4bb5      	ldr	r3, [pc, #724]	@ (800176c <StartDisplayTask+0x310>)
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	f00a ffbe 	bl	800c420 <xQueueGenericSend>
 80014a4:	e216      	b.n	80018d4 <StartDisplayTask+0x478>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 80014a6:	4bb2      	ldr	r3, [pc, #712]	@ (8001770 <StartDisplayTask+0x314>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d826      	bhi.n	80014fc <StartDisplayTask+0xa0>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <StartDisplayTask+0x58>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014d3 	.word	0x080014d3
 80014bc:	080014e1 	.word	0x080014e1
 80014c0:	080014ef 	.word	0x080014ef
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	49aa      	ldr	r1, [pc, #680]	@ (8001774 <StartDisplayTask+0x318>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00d f8a8 	bl	800e620 <siprintf>
          break;
 80014d0:	e014      	b.n	80014fc <StartDisplayTask+0xa0>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	49a8      	ldr	r1, [pc, #672]	@ (8001778 <StartDisplayTask+0x31c>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f00d f8a1 	bl	800e620 <siprintf>
          break;
 80014de:	e00d      	b.n	80014fc <StartDisplayTask+0xa0>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	49a5      	ldr	r1, [pc, #660]	@ (800177c <StartDisplayTask+0x320>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00d f89a 	bl	800e620 <siprintf>
          break;
 80014ec:	e006      	b.n	80014fc <StartDisplayTask+0xa0>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	49a3      	ldr	r1, [pc, #652]	@ (8001780 <StartDisplayTask+0x324>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00d f893 	bl	800e620 <siprintf>
          break;
 80014fa:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 80014fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001784 <StartDisplayTask+0x328>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001506:	49a0      	ldr	r1, [pc, #640]	@ (8001788 <StartDisplayTask+0x32c>)
 8001508:	4618      	mov	r0, r3
 800150a:	f00d f889 	bl	800e620 <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 800150e:	4b9f      	ldr	r3, [pc, #636]	@ (800178c <StartDisplayTask+0x330>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001518:	499d      	ldr	r1, [pc, #628]	@ (8001790 <StartDisplayTask+0x334>)
 800151a:	4618      	mov	r0, r3
 800151c:	f00d f880 	bl	800e620 <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001520:	4b92      	ldr	r3, [pc, #584]	@ (800176c <StartDisplayTask+0x310>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	4618      	mov	r0, r3
 800152a:	f00b f883 	bl	800c634 <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800152e:	4899      	ldr	r0, [pc, #612]	@ (8001794 <StartDisplayTask+0x338>)
 8001530:	f002 fce2 	bl	8003ef8 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 8001534:	f002 fc48 	bl	8003dc8 <BSP_LCD_GetXSize>
 8001538:	4603      	mov	r3, r0
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001542:	2000      	movs	r0, #0
 8001544:	f002 fe58 	bl	80041f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 8001548:	f002 fc3e 	bl	8003dc8 <BSP_LCD_GetXSize>
 800154c:	4603      	mov	r3, r0
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	f240 1101 	movw	r1, #257	@ 0x101
 8001556:	2000      	movs	r0, #0
 8001558:	f002 fe4e 	bl	80041f8 <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 800155c:	f107 020c 	add.w	r2, r7, #12
 8001560:	2303      	movs	r3, #3
 8001562:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001566:	2000      	movs	r0, #0
 8001568:	f002 fd7e 	bl	8004068 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 800156c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001570:	2303      	movs	r3, #3
 8001572:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001576:	20c8      	movs	r0, #200	@ 0xc8
 8001578:	f002 fd76 	bl	8004068 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 800157c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001580:	2303      	movs	r3, #3
 8001582:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001586:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800158a:	f002 fd6d 	bl	8004068 <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      switch (headPart) {
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <StartDisplayTask+0x33c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d83a      	bhi.n	800160c <StartDisplayTask+0x1b0>
 8001596:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <StartDisplayTask+0x140>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	080015ad 	.word	0x080015ad
 80015a4:	080015dd 	.word	0x080015dd
 80015a8:	080015f5 	.word	0x080015f5
        case HeadBottom:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 80015ac:	4b7b      	ldr	r3, [pc, #492]	@ (800179c <StartDisplayTask+0x340>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	4618      	mov	r0, r3
 80015b4:	4b79      	ldr	r3, [pc, #484]	@ (800179c <StartDisplayTask+0x340>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	015b      	lsls	r3, r3, #5
 80015ba:	4a79      	ldr	r2, [pc, #484]	@ (80017a0 <StartDisplayTask+0x344>)
 80015bc:	4619      	mov	r1, r3
 80015be:	f002 fec1 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 80015c2:	e023      	b.n	800160c <StartDisplayTask+0x1b0>
        case HeadTop:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 80015c4:	4b75      	ldr	r3, [pc, #468]	@ (800179c <StartDisplayTask+0x340>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	4618      	mov	r0, r3
 80015cc:	4b73      	ldr	r3, [pc, #460]	@ (800179c <StartDisplayTask+0x340>)
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	4a74      	ldr	r2, [pc, #464]	@ (80017a4 <StartDisplayTask+0x348>)
 80015d4:	4619      	mov	r1, r3
 80015d6:	f002 feb5 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 80015da:	e017      	b.n	800160c <StartDisplayTask+0x1b0>
        case HeadLeft:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 80015dc:	4b6f      	ldr	r3, [pc, #444]	@ (800179c <StartDisplayTask+0x340>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	4618      	mov	r0, r3
 80015e4:	4b6d      	ldr	r3, [pc, #436]	@ (800179c <StartDisplayTask+0x340>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	015b      	lsls	r3, r3, #5
 80015ea:	4a6f      	ldr	r2, [pc, #444]	@ (80017a8 <StartDisplayTask+0x34c>)
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 fea9 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 80015f2:	e00b      	b.n	800160c <StartDisplayTask+0x1b0>
        case HeadRight:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 80015f4:	4b69      	ldr	r3, [pc, #420]	@ (800179c <StartDisplayTask+0x340>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	015b      	lsls	r3, r3, #5
 80015fa:	4618      	mov	r0, r3
 80015fc:	4b67      	ldr	r3, [pc, #412]	@ (800179c <StartDisplayTask+0x340>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	4a6a      	ldr	r2, [pc, #424]	@ (80017ac <StartDisplayTask+0x350>)
 8001604:	4619      	mov	r1, r3
 8001606:	f002 fe9d 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 800160a:	bf00      	nop
      }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001612:	e08e      	b.n	8001732 <StartDisplayTask+0x2d6>
        switch (snakeBodyParts[i]) {
 8001614:	4a66      	ldr	r2, [pc, #408]	@ (80017b0 <StartDisplayTask+0x354>)
 8001616:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b05      	cmp	r3, #5
 8001620:	f200 8082 	bhi.w	8001728 <StartDisplayTask+0x2cc>
 8001624:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <StartDisplayTask+0x1d0>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	08001645 	.word	0x08001645
 8001630:	0800166b 	.word	0x0800166b
 8001634:	08001691 	.word	0x08001691
 8001638:	080016b7 	.word	0x080016b7
 800163c:	080016dd 	.word	0x080016dd
 8001640:	08001703 	.word	0x08001703
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8001644:	4a5b      	ldr	r2, [pc, #364]	@ (80017b4 <StartDisplayTask+0x358>)
 8001646:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800164a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4618      	mov	r0, r3
 8001652:	4a58      	ldr	r2, [pc, #352]	@ (80017b4 <StartDisplayTask+0x358>)
 8001654:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	4a55      	ldr	r2, [pc, #340]	@ (80017b8 <StartDisplayTask+0x35c>)
 8001662:	4619      	mov	r1, r3
 8001664:	f002 fe6e 	bl	8004344 <BSP_LCD_DrawBitmap>
            break;
 8001668:	e05e      	b.n	8001728 <StartDisplayTask+0x2cc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 800166a:	4a52      	ldr	r2, [pc, #328]	@ (80017b4 <StartDisplayTask+0x358>)
 800166c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001670:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	4618      	mov	r0, r3
 8001678:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <StartDisplayTask+0x358>)
 800167a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	4a4d      	ldr	r2, [pc, #308]	@ (80017bc <StartDisplayTask+0x360>)
 8001688:	4619      	mov	r1, r3
 800168a:	f002 fe5b 	bl	8004344 <BSP_LCD_DrawBitmap>
            break;
 800168e:	e04b      	b.n	8001728 <StartDisplayTask+0x2cc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8001690:	4a48      	ldr	r2, [pc, #288]	@ (80017b4 <StartDisplayTask+0x358>)
 8001692:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001696:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800169a:	015b      	lsls	r3, r3, #5
 800169c:	4618      	mov	r0, r3
 800169e:	4a45      	ldr	r2, [pc, #276]	@ (80017b4 <StartDisplayTask+0x358>)
 80016a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4a44      	ldr	r2, [pc, #272]	@ (80017c0 <StartDisplayTask+0x364>)
 80016ae:	4619      	mov	r1, r3
 80016b0:	f002 fe48 	bl	8004344 <BSP_LCD_DrawBitmap>
            break;
 80016b4:	e038      	b.n	8001728 <StartDisplayTask+0x2cc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 80016b6:	4a3f      	ldr	r2, [pc, #252]	@ (80017b4 <StartDisplayTask+0x358>)
 80016b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016bc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	4618      	mov	r0, r3
 80016c4:	4a3b      	ldr	r2, [pc, #236]	@ (80017b4 <StartDisplayTask+0x358>)
 80016c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	015b      	lsls	r3, r3, #5
 80016d2:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <StartDisplayTask+0x368>)
 80016d4:	4619      	mov	r1, r3
 80016d6:	f002 fe35 	bl	8004344 <BSP_LCD_DrawBitmap>
            break;
 80016da:	e025      	b.n	8001728 <StartDisplayTask+0x2cc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 80016dc:	4a35      	ldr	r2, [pc, #212]	@ (80017b4 <StartDisplayTask+0x358>)
 80016de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016e6:	015b      	lsls	r3, r3, #5
 80016e8:	4618      	mov	r0, r3
 80016ea:	4a32      	ldr	r2, [pc, #200]	@ (80017b4 <StartDisplayTask+0x358>)
 80016ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	4a33      	ldr	r2, [pc, #204]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016fa:	4619      	mov	r1, r3
 80016fc:	f002 fe22 	bl	8004344 <BSP_LCD_DrawBitmap>
            break;
 8001700:	e012      	b.n	8001728 <StartDisplayTask+0x2cc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 8001702:	4a2c      	ldr	r2, [pc, #176]	@ (80017b4 <StartDisplayTask+0x358>)
 8001704:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001708:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	4618      	mov	r0, r3
 8001710:	4a28      	ldr	r2, [pc, #160]	@ (80017b4 <StartDisplayTask+0x358>)
 8001712:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	4a2b      	ldr	r2, [pc, #172]	@ (80017cc <StartDisplayTask+0x370>)
 8001720:	4619      	mov	r1, r3
 8001722:	f002 fe0f 	bl	8004344 <BSP_LCD_DrawBitmap>
            break;
 8001726:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 8001728:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800172c:	3301      	adds	r3, #1
 800172e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <StartDisplayTask+0x328>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800173c:	4293      	cmp	r3, r2
 800173e:	f6ff af69 	blt.w	8001614 <StartDisplayTask+0x1b8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 8001742:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <StartDisplayTask+0x374>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d874      	bhi.n	8001834 <StartDisplayTask+0x3d8>
 800174a:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <StartDisplayTask+0x2f4>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	080017d5 	.word	0x080017d5
 8001754:	080017ed 	.word	0x080017ed
 8001758:	08001805 	.word	0x08001805
 800175c:	0800181d 	.word	0x0800181d
 8001760:	200002a8 	.word	0x200002a8
 8001764:	200002ac 	.word	0x200002ac
 8001768:	200002b0 	.word	0x200002b0
 800176c:	2000040c 	.word	0x2000040c
 8001770:	20000224 	.word	0x20000224
 8001774:	0800f920 	.word	0x0800f920
 8001778:	0800f934 	.word	0x0800f934
 800177c:	0800f948 	.word	0x0800f948
 8001780:	0800f95c 	.word	0x0800f95c
 8001784:	200002a0 	.word	0x200002a0
 8001788:	0800f970 	.word	0x0800f970
 800178c:	20000000 	.word	0x20000000
 8001790:	0800f97c 	.word	0x0800f97c
 8001794:	ffa52a2a 	.word	0xffa52a2a
 8001798:	20000225 	.word	0x20000225
 800179c:	20000004 	.word	0x20000004
 80017a0:	08012c3c 	.word	0x08012c3c
 80017a4:	080138c8 	.word	0x080138c8
 80017a8:	08014554 	.word	0x08014554
 80017ac:	080151e0 	.word	0x080151e0
 80017b0:	20000228 	.word	0x20000228
 80017b4:	200002b4 	.word	0x200002b4
 80017b8:	08010698 	.word	0x08010698
 80017bc:	08011324 	.word	0x08011324
 80017c0:	08011fb0 	.word	0x08011fb0
 80017c4:	08015e6c 	.word	0x08015e6c
 80017c8:	08016af8 	.word	0x08016af8
 80017cc:	08017784 	.word	0x08017784
 80017d0:	20000001 	.word	0x20000001
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 80017d4:	4b41      	ldr	r3, [pc, #260]	@ (80018dc <StartDisplayTask+0x480>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	4618      	mov	r0, r3
 80017dc:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <StartDisplayTask+0x480>)
 80017de:	785b      	ldrb	r3, [r3, #1]
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	4a3f      	ldr	r2, [pc, #252]	@ (80018e0 <StartDisplayTask+0x484>)
 80017e4:	4619      	mov	r1, r3
 80017e6:	f002 fdad 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 80017ea:	e023      	b.n	8001834 <StartDisplayTask+0x3d8>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 80017ec:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <StartDisplayTask+0x480>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	015b      	lsls	r3, r3, #5
 80017f2:	4618      	mov	r0, r3
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <StartDisplayTask+0x480>)
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	4a3a      	ldr	r2, [pc, #232]	@ (80018e4 <StartDisplayTask+0x488>)
 80017fc:	4619      	mov	r1, r3
 80017fe:	f002 fda1 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 8001802:	e017      	b.n	8001834 <StartDisplayTask+0x3d8>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 8001804:	4b35      	ldr	r3, [pc, #212]	@ (80018dc <StartDisplayTask+0x480>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	4618      	mov	r0, r3
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <StartDisplayTask+0x480>)
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	015b      	lsls	r3, r3, #5
 8001812:	4a35      	ldr	r2, [pc, #212]	@ (80018e8 <StartDisplayTask+0x48c>)
 8001814:	4619      	mov	r1, r3
 8001816:	f002 fd95 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 800181a:	e00b      	b.n	8001834 <StartDisplayTask+0x3d8>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 800181c:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <StartDisplayTask+0x480>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	015b      	lsls	r3, r3, #5
 8001822:	4618      	mov	r0, r3
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <StartDisplayTask+0x480>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	4a30      	ldr	r2, [pc, #192]	@ (80018ec <StartDisplayTask+0x490>)
 800182c:	4619      	mov	r1, r3
 800182e:	f002 fd89 	bl	8004344 <BSP_LCD_DrawBitmap>
          break;
 8001832:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8001834:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <StartDisplayTask+0x494>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11a      	bne.n	8001872 <StartDisplayTask+0x416>
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <StartDisplayTask+0x498>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <StartDisplayTask+0x49c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d105      	bne.n	8001854 <StartDisplayTask+0x3f8>
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <StartDisplayTask+0x498>)
 800184a:	785a      	ldrb	r2, [r3, #1]
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <StartDisplayTask+0x49c>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	429a      	cmp	r2, r3
 8001852:	d00e      	beq.n	8001872 <StartDisplayTask+0x416>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8001854:	4829      	ldr	r0, [pc, #164]	@ (80018fc <StartDisplayTask+0x4a0>)
 8001856:	f002 fb4f 	bl	8003ef8 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <StartDisplayTask+0x49c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	015b      	lsls	r3, r3, #5
 8001860:	b298      	uxth	r0, r3
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <StartDisplayTask+0x49c>)
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	015b      	lsls	r3, r3, #5
 8001868:	b299      	uxth	r1, r3
 800186a:	2320      	movs	r3, #32
 800186c:	2220      	movs	r2, #32
 800186e:	f002 fe1b 	bl	80044a8 <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001878:	e01f      	b.n	80018ba <StartDisplayTask+0x45e>
        if (applePosition[i][0] != -1)
 800187a:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <StartDisplayTask+0x4a4>)
 800187c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001880:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d012      	beq.n	80018b0 <StartDisplayTask+0x454>
          BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 800188a:	4a1d      	ldr	r2, [pc, #116]	@ (8001900 <StartDisplayTask+0x4a4>)
 800188c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001890:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	4618      	mov	r0, r3
 8001898:	4a19      	ldr	r2, [pc, #100]	@ (8001900 <StartDisplayTask+0x4a4>)
 800189a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018a6:	015b      	lsls	r3, r3, #5
 80018a8:	4a16      	ldr	r2, [pc, #88]	@ (8001904 <StartDisplayTask+0x4a8>)
 80018aa:	4619      	mov	r1, r3
 80018ac:	f002 fd4a 	bl	8004344 <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++)
 80018b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018b4:	3301      	adds	r3, #1
 80018b6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80018ba:	2328      	movs	r3, #40	@ 0x28
 80018bc:	461a      	mov	r2, r3
 80018be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018c2:	4293      	cmp	r3, r2
 80018c4:	dbd9      	blt.n	800187a <StartDisplayTask+0x41e>
      xSemaphoreGive(displayMutexHandle);
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <StartDisplayTask+0x4ac>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	f00a fda6 	bl	800c420 <xQueueGenericSend>
    }

    osDelay(100);
 80018d4:	2064      	movs	r0, #100	@ 0x64
 80018d6:	f00a fb20 	bl	800bf1a <osDelay>
    if (gameOver || gamePaused || !gameStarted) {
 80018da:	e5c7      	b.n	800146c <StartDisplayTask+0x10>
 80018dc:	20000008 	.word	0x20000008
 80018e0:	08018410 	.word	0x08018410
 80018e4:	0801909c 	.word	0x0801909c
 80018e8:	08019d28 	.word	0x08019d28
 80018ec:	0801a9b4 	.word	0x0801a9b4
 80018f0:	200002a4 	.word	0x200002a4
 80018f4:	20000004 	.word	0x20000004
 80018f8:	200003a4 	.word	0x200003a4
 80018fc:	ff81cd4b 	.word	0xff81cd4b
 8001900:	200003a8 	.word	0x200003a8
 8001904:	0800fa0c 	.word	0x0800fa0c
 8001908:	2000040c 	.word	0x2000040c

0800190c <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 8001914:	4b30      	ldr	r3, [pc, #192]	@ (80019d8 <StartJoystickTask+0xcc>)
 8001916:	2208      	movs	r2, #8
 8001918:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800191a:	492f      	ldr	r1, [pc, #188]	@ (80019d8 <StartJoystickTask+0xcc>)
 800191c:	482f      	ldr	r0, [pc, #188]	@ (80019dc <StartJoystickTask+0xd0>)
 800191e:	f004 fc73 	bl	8006208 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8001922:	482e      	ldr	r0, [pc, #184]	@ (80019dc <StartJoystickTask+0xd0>)
 8001924:	f004 fb0a 	bl	8005f3c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001928:	bf00      	nop
 800192a:	2164      	movs	r1, #100	@ 0x64
 800192c:	482b      	ldr	r0, [pc, #172]	@ (80019dc <StartJoystickTask+0xd0>)
 800192e:	f004 fbd3 	bl	80060d8 <HAL_ADC_PollForConversion>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f8      	bne.n	800192a <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8001938:	4828      	ldr	r0, [pc, #160]	@ (80019dc <StartJoystickTask+0xd0>)
 800193a:	f004 fc58 	bl	80061ee <HAL_ADC_GetValue>
 800193e:	4603      	mov	r3, r0
 8001940:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <StartJoystickTask+0xd4>)
 8001942:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8001944:	4827      	ldr	r0, [pc, #156]	@ (80019e4 <StartJoystickTask+0xd8>)
 8001946:	f004 faf9 	bl	8005f3c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 800194a:	bf00      	nop
 800194c:	2164      	movs	r1, #100	@ 0x64
 800194e:	4825      	ldr	r0, [pc, #148]	@ (80019e4 <StartJoystickTask+0xd8>)
 8001950:	f004 fbc2 	bl	80060d8 <HAL_ADC_PollForConversion>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f8      	bne.n	800194c <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800195a:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <StartJoystickTask+0xd8>)
 800195c:	f004 fc47 	bl	80061ee <HAL_ADC_GetValue>
 8001960:	4603      	mov	r3, r0
 8001962:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <StartJoystickTask+0xdc>)
 8001964:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <StartJoystickTask+0xd4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800196e:	d207      	bcs.n	8001980 <StartJoystickTask+0x74>
 8001970:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <StartJoystickTask+0xe0>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <StartJoystickTask+0x74>
      direction = Down;
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <StartJoystickTask+0xe4>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e027      	b.n	80019d0 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001980:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <StartJoystickTask+0xd4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001988:	4293      	cmp	r3, r2
 800198a:	d907      	bls.n	800199c <StartJoystickTask+0x90>
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <StartJoystickTask+0xe0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d003      	beq.n	800199c <StartJoystickTask+0x90>
      direction = Up;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <StartJoystickTask+0xe4>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e019      	b.n	80019d0 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <StartJoystickTask+0xdc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019a4:	d207      	bcs.n	80019b6 <StartJoystickTask+0xaa>
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <StartJoystickTask+0xe0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d003      	beq.n	80019b6 <StartJoystickTask+0xaa>
      direction = Right;
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <StartJoystickTask+0xe4>)
 80019b0:	2203      	movs	r2, #3
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e00c      	b.n	80019d0 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <StartJoystickTask+0xdc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019be:	4293      	cmp	r3, r2
 80019c0:	d906      	bls.n	80019d0 <StartJoystickTask+0xc4>
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <StartJoystickTask+0xe0>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d002      	beq.n	80019d0 <StartJoystickTask+0xc4>
      direction = Left;
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <StartJoystickTask+0xe4>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 80019d0:	200a      	movs	r0, #10
 80019d2:	f00a faa2 	bl	800bf1a <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 80019d6:	e79d      	b.n	8001914 <StartJoystickTask+0x8>
 80019d8:	20000808 	.word	0x20000808
 80019dc:	20000118 	.word	0x20000118
 80019e0:	2000021c 	.word	0x2000021c
 80019e4:	200000d0 	.word	0x200000d0
 80019e8:	20000220 	.word	0x20000220
 80019ec:	20000225 	.word	0x20000225
 80019f0:	20000224 	.word	0x20000224

080019f4 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b08e      	sub	sp, #56	@ 0x38
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80019fc:	f00b fbc6 	bl	800d18c <xTaskGetTickCount>
 8001a00:	4603      	mov	r3, r0
 8001a02:	613b      	str	r3, [r7, #16]
  const TickType_t delay = pdMS_TO_TICKS(1000. / speed);
 8001a04:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf8 <StartManageBodyParts+0x204>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fda3 	bl	8000554 <__aeabi_i2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	4979      	ldr	r1, [pc, #484]	@ (8001bfc <StartManageBodyParts+0x208>)
 8001a18:	f7fe ff30 	bl	800087c <__aeabi_ddiv>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f812 	bl	8000a4c <__aeabi_d2uiz>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	4a73      	ldr	r2, [pc, #460]	@ (8001c00 <StartManageBodyParts+0x20c>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 8001a3c:	4b71      	ldr	r3, [pc, #452]	@ (8001c04 <StartManageBodyParts+0x210>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 82a5 	bne.w	8001f90 <StartManageBodyParts+0x59c>
 8001a46:	4b70      	ldr	r3, [pc, #448]	@ (8001c08 <StartManageBodyParts+0x214>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 82a0 	bne.w	8001f90 <StartManageBodyParts+0x59c>
 8001a50:	4b6e      	ldr	r3, [pc, #440]	@ (8001c0c <StartManageBodyParts+0x218>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 829b 	beq.w	8001f90 <StartManageBodyParts+0x59c>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c10 <StartManageBodyParts+0x21c>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c14 <StartManageBodyParts+0x220>)
 8001a60:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001a62:	4b6b      	ldr	r3, [pc, #428]	@ (8001c10 <StartManageBodyParts+0x21c>)
 8001a64:	785a      	ldrb	r2, [r3, #1]
 8001a66:	4b6b      	ldr	r3, [pc, #428]	@ (8001c14 <StartManageBodyParts+0x220>)
 8001a68:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001a6a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	733b      	strb	r3, [r7, #12]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001a70:	4b69      	ldr	r3, [pc, #420]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	737b      	strb	r3, [r7, #13]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001a76:	4b69      	ldr	r3, [pc, #420]	@ (8001c1c <StartManageBodyParts+0x228>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d832      	bhi.n	8001ae4 <StartManageBodyParts+0xf0>
 8001a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a84 <StartManageBodyParts+0x90>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001aa9 	.word	0x08001aa9
 8001a8c:	08001abd 	.word	0x08001abd
 8001a90:	08001ad1 	.word	0x08001ad1
        case Up:
          headPart = HeadTop;
 8001a94:	4b62      	ldr	r3, [pc, #392]	@ (8001c20 <StartManageBodyParts+0x22c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001aa4:	705a      	strb	r2, [r3, #1]
          break;
 8001aa6:	e01d      	b.n	8001ae4 <StartManageBodyParts+0xf0>
        case Down:
          headPart = HeadBottom;
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c20 <StartManageBodyParts+0x22c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001aae:	4b5a      	ldr	r3, [pc, #360]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b58      	ldr	r3, [pc, #352]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001ab8:	705a      	strb	r2, [r3, #1]
          break;
 8001aba:	e013      	b.n	8001ae4 <StartManageBodyParts+0xf0>
        case Left:
          headPart = HeadLeft;
 8001abc:	4b58      	ldr	r3, [pc, #352]	@ (8001c20 <StartManageBodyParts+0x22c>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001ac2:	4b55      	ldr	r3, [pc, #340]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b53      	ldr	r3, [pc, #332]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001acc:	701a      	strb	r2, [r3, #0]
          break;
 8001ace:	e009      	b.n	8001ae4 <StartManageBodyParts+0xf0>
        case Right:
          headPart = HeadRight;
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <StartManageBodyParts+0x22c>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001ad6:	4b50      	ldr	r3, [pc, #320]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001ae0:	701a      	strb	r2, [r3, #0]
          break;
 8001ae2:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	220f      	movs	r2, #15
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d204      	bcs.n	8001af8 <StartManageBodyParts+0x104>
 8001aee:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001af0:	785b      	ldrb	r3, [r3, #1]
 8001af2:	2208      	movs	r2, #8
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d303      	bcc.n	8001b00 <StartManageBodyParts+0x10c>
        // On a touché un mur
        gameOver = 1;
 8001af8:	4b42      	ldr	r3, [pc, #264]	@ (8001c04 <StartManageBodyParts+0x210>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e01f      	b.n	8001b40 <StartManageBodyParts+0x14c>

        // displayGameStatus();
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b04:	e016      	b.n	8001b34 <StartManageBodyParts+0x140>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001b06:	4b44      	ldr	r3, [pc, #272]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	4946      	ldr	r1, [pc, #280]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d10b      	bne.n	8001b2e <StartManageBodyParts+0x13a>
 8001b16:	4b40      	ldr	r3, [pc, #256]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001b18:	785a      	ldrb	r2, [r3, #1]
 8001b1a:	4942      	ldr	r1, [pc, #264]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	785b      	ldrb	r3, [r3, #1]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d102      	bne.n	8001b2e <StartManageBodyParts+0x13a>
            // On a touché notre corps
            gameOver = 1;
 8001b28:	4b36      	ldr	r3, [pc, #216]	@ (8001c04 <StartManageBodyParts+0x210>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b30:	3301      	adds	r3, #1
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b34:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <StartManageBodyParts+0x234>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	dbe2      	blt.n	8001b06 <StartManageBodyParts+0x112>
      */


      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001b40:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <StartManageBodyParts+0x238>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4a:	e0fa      	b.n	8001d42 <StartManageBodyParts+0x34e>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001b4c:	4b32      	ldr	r3, [pc, #200]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4a37      	ldr	r2, [pc, #220]	@ (8001c30 <StartManageBodyParts+0x23c>)
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	f040 80ee 	bne.w	8001d3c <StartManageBodyParts+0x348>
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <StartManageBodyParts+0x224>)
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <StartManageBodyParts+0x23c>)
 8001b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b72:	4299      	cmp	r1, r3
 8001b74:	f040 80e2 	bne.w	8001d3c <StartManageBodyParts+0x348>
          snakeSize++;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <StartManageBodyParts+0x234>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <StartManageBodyParts+0x234>)
 8001b82:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001b84:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <StartManageBodyParts+0x238>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b8a:	4b27      	ldr	r3, [pc, #156]	@ (8001c28 <StartManageBodyParts+0x234>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	e020      	b.n	8001bd6 <StartManageBodyParts+0x1e2>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	3b01      	subs	r3, #1
 8001b98:	4a26      	ldr	r2, [pc, #152]	@ (8001c34 <StartManageBodyParts+0x240>)
 8001b9a:	5cd1      	ldrb	r1, [r2, r3]
 8001b9c:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <StartManageBodyParts+0x240>)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	4413      	add	r3, r2
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001bac:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	7859      	ldrb	r1, [r3, #1]
 8001bc4:	4a17      	ldr	r2, [pc, #92]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	460a      	mov	r2, r1
 8001bce:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	dcdb      	bgt.n	8001b94 <StartManageBodyParts+0x1a0>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <StartManageBodyParts+0x234>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d929      	bls.n	8001c38 <StartManageBodyParts+0x244>
            backX = snakeBodyPosition[0][0];
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeBodyPosition[0][1];
 8001bec:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <StartManageBodyParts+0x230>)
 8001bee:	785b      	ldrb	r3, [r3, #1]
 8001bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001bf4:	e028      	b.n	8001c48 <StartManageBodyParts+0x254>
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	408f4000 	.word	0x408f4000
 8001c00:	10624dd3 	.word	0x10624dd3
 8001c04:	200002a8 	.word	0x200002a8
 8001c08:	200002ac 	.word	0x200002ac
 8001c0c:	200002b0 	.word	0x200002b0
 8001c10:	20000008 	.word	0x20000008
 8001c14:	200003a4 	.word	0x200003a4
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	20000224 	.word	0x20000224
 8001c20:	20000225 	.word	0x20000225
 8001c24:	200002b4 	.word	0x200002b4
 8001c28:	200002a0 	.word	0x200002a0
 8001c2c:	200002a4 	.word	0x200002a4
 8001c30:	200003a8 	.word	0x200003a8
 8001c34:	20000228 	.word	0x20000228
          }
          else {
            backX = snakeTailPosition[0];
 8001c38:	4ba8      	ldr	r3, [pc, #672]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeTailPosition[1];
 8001c40:	4ba6      	ldr	r3, [pc, #664]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001c48:	4ba5      	ldr	r3, [pc, #660]	@ (8001ee0 <StartManageBodyParts+0x4ec>)
 8001c4a:	7818      	ldrb	r0, [r3, #0]
 8001c4c:	4ba4      	ldr	r3, [pc, #656]	@ (8001ee0 <StartManageBodyParts+0x4ec>)
 8001c4e:	7859      	ldrb	r1, [r3, #1]
 8001c50:	7b3b      	ldrb	r3, [r7, #12]
 8001c52:	7b7a      	ldrb	r2, [r7, #13]
 8001c54:	f897 5022 	ldrb.w	r5, [r7, #34]	@ 0x22
 8001c58:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	462b      	mov	r3, r5
 8001c62:	4622      	mov	r2, r4
 8001c64:	f000 fa0e 	bl	8002084 <whatBodyPart>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ee4 <StartManageBodyParts+0x4f0>)
 8001c6e:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001c70:	7b3a      	ldrb	r2, [r7, #12]
 8001c72:	4b9d      	ldr	r3, [pc, #628]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001c74:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001c76:	7b7a      	ldrb	r2, [r7, #13]
 8001c78:	4b9b      	ldr	r3, [pc, #620]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001c7a:	705a      	strb	r2, [r3, #1]

          // Si on a de la place pour une nouvelle pomme
          uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	2308      	movs	r3, #8
 8001c80:	fb12 f303 	smulbb	r3, r2, r3
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b99      	ldr	r3, [pc, #612]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
          if (NBFreeCells > NBApple) {
 8001c92:	2228      	movs	r2, #40	@ 0x28
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d945      	bls.n	8001d26 <StartManageBodyParts+0x332>
            // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
            do {
              applePosition[i][0] = rand() % gridSizeX;
 8001c9a:	f00c fbc1 	bl	800e420 <rand>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ca6:	fb01 f202 	mul.w	r2, r1, r2
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	b259      	sxtb	r1, r3
 8001cae:	4a90      	ldr	r2, [pc, #576]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
              applePosition[i][1] = rand() % gridSizeY;
 8001cb6:	f00c fbb3 	bl	800e420 <rand>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cc2:	fb01 f202 	mul.w	r2, r1, r2
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	b259      	sxtb	r1, r3
 8001cca:	4a89      	ldr	r2, [pc, #548]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	705a      	strb	r2, [r3, #1]
            } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) 
 8001cd6:	4a86      	ldr	r2, [pc, #536]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cda:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4983      	ldr	r1, [pc, #524]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	f000 fa29 	bl	8002148 <isSnakePosition>
 8001cf6:	4603      	mov	r3, r0
                  || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ce      	bne.n	8001c9a <StartManageBodyParts+0x2a6>
 8001cfc:	4a7c      	ldr	r2, [pc, #496]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d00:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001d04:	b2d8      	uxtb	r0, r3
 8001d06:	4a7a      	ldr	r2, [pc, #488]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f000 fa61 	bl	80021e0 <isApplePosition>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ba      	bne.n	8001c9a <StartManageBodyParts+0x2a6>
 8001d24:	e00a      	b.n	8001d3c <StartManageBodyParts+0x348>
          }
          else {
            applePosition[i][0] = -1;
 8001d26:	4a72      	ldr	r2, [pc, #456]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2a:	21ff      	movs	r1, #255	@ 0xff
 8001d2c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = -1;
 8001d30:	4a6f      	ldr	r2, [pc, #444]	@ (8001ef0 <StartManageBodyParts+0x4fc>)
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	22ff      	movs	r2, #255	@ 0xff
 8001d3a:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	3301      	adds	r3, #1
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d42:	2328      	movs	r3, #40	@ 0x28
 8001d44:	461a      	mov	r2, r3
 8001d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	f6ff aeff 	blt.w	8001b4c <StartManageBodyParts+0x158>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001d4e:	4b69      	ldr	r3, [pc, #420]	@ (8001ef4 <StartManageBodyParts+0x500>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 811c 	bne.w	8001f90 <StartManageBodyParts+0x59c>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001d58:	4b64      	ldr	r3, [pc, #400]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d011      	beq.n	8001d84 <StartManageBodyParts+0x390>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001d60:	4b62      	ldr	r3, [pc, #392]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a60      	ldr	r2, [pc, #384]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001d68:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001d6e:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001d70:	4b5e      	ldr	r3, [pc, #376]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	4a5c      	ldr	r2, [pc, #368]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	785a      	ldrb	r2, [r3, #1]
 8001d7e:	4b57      	ldr	r3, [pc, #348]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001d80:	705a      	strb	r2, [r3, #1]
 8001d82:	e005      	b.n	8001d90 <StartManageBodyParts+0x39c>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001d84:	7b3a      	ldrb	r2, [r7, #12]
 8001d86:	4b55      	ldr	r3, [pc, #340]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001d88:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001d8a:	7b7a      	ldrb	r2, [r7, #13]
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001d8e:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d90:	4b56      	ldr	r3, [pc, #344]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	e020      	b.n	8001ddc <StartManageBodyParts+0x3e8>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	4a51      	ldr	r2, [pc, #324]	@ (8001ee4 <StartManageBodyParts+0x4f0>)
 8001da0:	5cd1      	ldrb	r1, [r2, r3]
 8001da2:	4a50      	ldr	r2, [pc, #320]	@ (8001ee4 <StartManageBodyParts+0x4f0>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4413      	add	r3, r2
 8001da8:	460a      	mov	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001db2:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001db6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	4a49      	ldr	r2, [pc, #292]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	7859      	ldrb	r1, [r3, #1]
 8001dca:	4a47      	ldr	r2, [pc, #284]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	460a      	mov	r2, r1
 8001dd4:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dcdb      	bgt.n	8001d9a <StartManageBodyParts+0x3a6>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001de2:	4b42      	ldr	r3, [pc, #264]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80b2 	beq.w	8001f50 <StartManageBodyParts+0x55c>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001dec:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee0 <StartManageBodyParts+0x4ec>)
 8001dee:	7818      	ldrb	r0, [r3, #0]
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <StartManageBodyParts+0x4ec>)
 8001df2:	7859      	ldrb	r1, [r3, #1]
 8001df4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001df6:	781c      	ldrb	r4, [r3, #0]
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001dfa:	785d      	ldrb	r5, [r3, #1]
 8001dfc:	7b3b      	ldrb	r3, [r7, #12]
 8001dfe:	7b7a      	ldrb	r2, [r7, #13]
 8001e00:	9201      	str	r2, [sp, #4]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	462b      	mov	r3, r5
 8001e06:	4622      	mov	r2, r4
 8001e08:	f000 f93c 	bl	8002084 <whatBodyPart>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <StartManageBodyParts+0x4f0>)
 8001e12:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001e14:	7b3a      	ldrb	r2, [r7, #12]
 8001e16:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001e18:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001e1a:	7b7a      	ldrb	r2, [r7, #13]
 8001e1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001e1e:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee4 <StartManageBodyParts+0x4f0>)
 8001e28:	5cd3      	ldrb	r3, [r2, r3]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	f200 80b0 	bhi.w	8001f90 <StartManageBodyParts+0x59c>
 8001e30:	a201      	add	r2, pc, #4	@ (adr r2, 8001e38 <StartManageBodyParts+0x444>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e51 	.word	0x08001e51
 8001e3c:	08001e75 	.word	0x08001e75
 8001e40:	08001e99 	.word	0x08001e99
 8001e44:	08001ebf 	.word	0x08001ebf
 8001e48:	08001f05 	.word	0x08001f05
 8001e4c:	08001f2b 	.word	0x08001f2b
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e50:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	4a24      	ldr	r2, [pc, #144]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001e58:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d103      	bne.n	8001e6c <StartManageBodyParts+0x478>
                tailPart = TailTop;
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <StartManageBodyParts+0x504>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e6a:	e091      	b.n	8001f90 <StartManageBodyParts+0x59c>
                tailPart = TailRight;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <StartManageBodyParts+0x504>)
 8001e6e:	2203      	movs	r2, #3
 8001e70:	701a      	strb	r2, [r3, #0]
              break;
 8001e72:	e08d      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e74:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001e7c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e80:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d103      	bne.n	8001e90 <StartManageBodyParts+0x49c>
                tailPart = TailTop;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <StartManageBodyParts+0x504>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001e8e:	e07f      	b.n	8001f90 <StartManageBodyParts+0x59c>
                tailPart = TailLeft;
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <StartManageBodyParts+0x504>)
 8001e92:	2202      	movs	r2, #2
 8001e94:	701a      	strb	r2, [r3, #0]
              break;
 8001e96:	e07b      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	785a      	ldrb	r2, [r3, #1]
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d203      	bcs.n	8001eb6 <StartManageBodyParts+0x4c2>
                tailPart = TailTop;
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <StartManageBodyParts+0x504>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001eb4:	e06c      	b.n	8001f90 <StartManageBodyParts+0x59c>
                tailPart = TailBottom;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <StartManageBodyParts+0x504>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
              break;
 8001ebc:	e068      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <StartManageBodyParts+0x4f8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <StartManageBodyParts+0x4f4>)
 8001ec6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <StartManageBodyParts+0x4e8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d214      	bcs.n	8001efc <StartManageBodyParts+0x508>
                tailPart = TailLeft;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <StartManageBodyParts+0x504>)
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001ed8:	e05a      	b.n	8001f90 <StartManageBodyParts+0x59c>
 8001eda:	bf00      	nop
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	20000228 	.word	0x20000228
 8001ee8:	200002b4 	.word	0x200002b4
 8001eec:	200002a0 	.word	0x200002a0
 8001ef0:	200003a8 	.word	0x200003a8
 8001ef4:	200002a4 	.word	0x200002a4
 8001ef8:	20000001 	.word	0x20000001
                tailPart = TailRight;
 8001efc:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001efe:	2203      	movs	r2, #3
 8001f00:	701a      	strb	r2, [r3, #0]
              break;
 8001f02:	e045      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001f04:	4b27      	ldr	r3, [pc, #156]	@ (8001fa4 <StartManageBodyParts+0x5b0>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <StartManageBodyParts+0x5b4>)
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	785a      	ldrb	r2, [r3, #1]
 8001f12:	4b26      	ldr	r3, [pc, #152]	@ (8001fac <StartManageBodyParts+0x5b8>)
 8001f14:	785b      	ldrb	r3, [r3, #1]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d103      	bne.n	8001f22 <StartManageBodyParts+0x52e>
                tailPart = TailRight;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f20:	e036      	b.n	8001f90 <StartManageBodyParts+0x59c>
                tailPart = TailBottom;
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
              break;
 8001f28:	e032      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <StartManageBodyParts+0x5b0>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <StartManageBodyParts+0x5b4>)
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	785a      	ldrb	r2, [r3, #1]
 8001f38:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <StartManageBodyParts+0x5b8>)
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d103      	bne.n	8001f48 <StartManageBodyParts+0x554>
                tailPart = TailLeft;
 8001f40:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f46:	e023      	b.n	8001f90 <StartManageBodyParts+0x59c>
                tailPart = TailBottom;
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
              break;
 8001f4e:	e01f      	b.n	8001f90 <StartManageBodyParts+0x59c>
          }
        }
        else {
          switch (headPart) {
 8001f50:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <StartManageBodyParts+0x5bc>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d81b      	bhi.n	8001f90 <StartManageBodyParts+0x59c>
 8001f58:	a201      	add	r2, pc, #4	@ (adr r2, 8001f60 <StartManageBodyParts+0x56c>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f79 	.word	0x08001f79
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f89 	.word	0x08001f89
            case HeadTop:
              tailPart = TailTop;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
              break;
 8001f76:	e00b      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case HeadBottom:
              tailPart = TailBottom;
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
              break;
 8001f7e:	e007      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case HeadLeft:
              tailPart = TailLeft;
 8001f80:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f82:	2202      	movs	r2, #2
 8001f84:	701a      	strb	r2, [r3, #0]
              break;
 8001f86:	e003      	b.n	8001f90 <StartManageBodyParts+0x59c>
            case HeadRight:
              tailPart = TailRight;
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <StartManageBodyParts+0x5ac>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
              break;
 8001f8e:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	69b9      	ldr	r1, [r7, #24]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00a ff1e 	bl	800cdd8 <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 8001f9c:	e54e      	b.n	8001a3c <StartManageBodyParts+0x48>
 8001f9e:	bf00      	nop
 8001fa0:	20000001 	.word	0x20000001
 8001fa4:	200002a0 	.word	0x200002a0
 8001fa8:	200002b4 	.word	0x200002b4
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	20000225 	.word	0x20000225

08001fb4 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <StartTsHandlerTask+0xb4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <StartTsHandlerTask+0x14>
      rand();
 8001fc4:	f00c fa2c 	bl	800e420 <rand>
    

    BSP_TS_GetState(&TS_State);
 8001fc8:	4828      	ldr	r0, [pc, #160]	@ (800206c <StartTsHandlerTask+0xb8>)
 8001fca:	f002 ff39 	bl	8004e40 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 8001fce:	4b27      	ldr	r3, [pc, #156]	@ (800206c <StartTsHandlerTask+0xb8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d139      	bne.n	800204a <StartTsHandlerTask+0x96>
 8001fd6:	4b26      	ldr	r3, [pc, #152]	@ (8002070 <StartTsHandlerTask+0xbc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d035      	beq.n	800204a <StartTsHandlerTask+0x96>
      if (gameOver) {
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <StartTsHandlerTask+0xc0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <StartTsHandlerTask+0x44>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fe6:	4824      	ldr	r0, [pc, #144]	@ (8002078 <StartTsHandlerTask+0xc4>)
 8001fe8:	f001 ffd2 	bl	8003f90 <BSP_LCD_Clear>
        gameOver = 0;
 8001fec:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <StartTsHandlerTask+0xc0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
        restartGame();
 8001ff2:	f000 f929 	bl	8002248 <restartGame>
 8001ff6:	e028      	b.n	800204a <StartTsHandlerTask+0x96>
      }
      else if (gamePaused) {
 8001ff8:	4b20      	ldr	r3, [pc, #128]	@ (800207c <StartTsHandlerTask+0xc8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d014      	beq.n	800202a <StartTsHandlerTask+0x76>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8002000:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <StartTsHandlerTask+0xcc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	4618      	mov	r0, r3
 800200a:	f00a fb13 	bl	800c634 <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800200e:	481a      	ldr	r0, [pc, #104]	@ (8002078 <StartTsHandlerTask+0xc4>)
 8002010:	f001 ffbe 	bl	8003f90 <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8002014:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <StartTsHandlerTask+0xcc>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	f00a f9ff 	bl	800c420 <xQueueGenericSend>
        gamePaused = 0;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <StartTsHandlerTask+0xc8>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e00f      	b.n	800204a <StartTsHandlerTask+0x96>
      }
      else if (!gameStarted) {
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <StartTsHandlerTask+0xb4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <StartTsHandlerTask+0x90>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8002032:	4811      	ldr	r0, [pc, #68]	@ (8002078 <StartTsHandlerTask+0xc4>)
 8002034:	f001 ffac 	bl	8003f90 <BSP_LCD_Clear>
        restartGame();
 8002038:	f000 f906 	bl	8002248 <restartGame>
        gameStarted = 1;
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <StartTsHandlerTask+0xb4>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e002      	b.n	800204a <StartTsHandlerTask+0x96>
      }
      else {
        gamePaused = 1;
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <StartTsHandlerTask+0xc8>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 800204a:	4b08      	ldr	r3, [pc, #32]	@ (800206c <StartTsHandlerTask+0xb8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <StartTsHandlerTask+0xa6>
      screenPressed = 1;
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <StartTsHandlerTask+0xbc>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e002      	b.n	8002060 <StartTsHandlerTask+0xac>
    }
    else {
      screenPressed = 0;
 800205a:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <StartTsHandlerTask+0xbc>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 8002060:	200a      	movs	r0, #10
 8002062:	f009 ff5a 	bl	800bf1a <osDelay>
    if (!gameStarted)
 8002066:	e7a9      	b.n	8001fbc <StartTsHandlerTask+0x8>
 8002068:	200002b0 	.word	0x200002b0
 800206c:	200001ec 	.word	0x200001ec
 8002070:	20000218 	.word	0x20000218
 8002074:	200002a8 	.word	0x200002a8
 8002078:	ff81cd4b 	.word	0xff81cd4b
 800207c:	200002ac 	.word	0x200002ac
 8002080:	2000040c 	.word	0x2000040c

08002084 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8002084:	b490      	push	{r4, r7}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4604      	mov	r4, r0
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4623      	mov	r3, r4
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	4603      	mov	r3, r0
 8002098:	71bb      	strb	r3, [r7, #6]
 800209a:	460b      	mov	r3, r1
 800209c:	717b      	strb	r3, [r7, #5]
 800209e:	4613      	mov	r3, r2
 80020a0:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 80020a2:	79fa      	ldrb	r2, [r7, #7]
 80020a4:	797b      	ldrb	r3, [r7, #5]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d101      	bne.n	80020ae <whatBodyPart+0x2a>
    return BottomTop;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e046      	b.n	800213c <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 80020ae:	79ba      	ldrb	r2, [r7, #6]
 80020b0:	793b      	ldrb	r3, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d101      	bne.n	80020ba <whatBodyPart+0x36>
    return LeftRight;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e040      	b.n	800213c <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 80020ba:	79fa      	ldrb	r2, [r7, #7]
 80020bc:	797b      	ldrb	r3, [r7, #5]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d20b      	bcs.n	80020da <whatBodyPart+0x56>
 80020c2:	79ba      	ldrb	r2, [r7, #6]
 80020c4:	793b      	ldrb	r3, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d907      	bls.n	80020da <whatBodyPart+0x56>
    if (missingX == frontX)
 80020ca:	7c3a      	ldrb	r2, [r7, #16]
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d101      	bne.n	80020d6 <whatBodyPart+0x52>
      return BottomRight;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e032      	b.n	800213c <whatBodyPart+0xb8>
    else
      return LeftTop;
 80020d6:	2304      	movs	r3, #4
 80020d8:	e030      	b.n	800213c <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 80020da:	79fa      	ldrb	r2, [r7, #7]
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d20b      	bcs.n	80020fa <whatBodyPart+0x76>
 80020e2:	79ba      	ldrb	r2, [r7, #6]
 80020e4:	793b      	ldrb	r3, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d207      	bcs.n	80020fa <whatBodyPart+0x76>
    if (missingX == frontX)
 80020ea:	7c3a      	ldrb	r2, [r7, #16]
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d101      	bne.n	80020f6 <whatBodyPart+0x72>
      return RightTop;
 80020f2:	2305      	movs	r3, #5
 80020f4:	e022      	b.n	800213c <whatBodyPart+0xb8>
    else
      return BottomLeft;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e020      	b.n	800213c <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 80020fa:	79fa      	ldrb	r2, [r7, #7]
 80020fc:	797b      	ldrb	r3, [r7, #5]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d90b      	bls.n	800211a <whatBodyPart+0x96>
 8002102:	79ba      	ldrb	r2, [r7, #6]
 8002104:	793b      	ldrb	r3, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d207      	bcs.n	800211a <whatBodyPart+0x96>
    if (missingX == frontX)
 800210a:	7c3a      	ldrb	r2, [r7, #16]
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d101      	bne.n	8002116 <whatBodyPart+0x92>
      return LeftTop;
 8002112:	2304      	movs	r3, #4
 8002114:	e012      	b.n	800213c <whatBodyPart+0xb8>
    else
      return BottomRight;
 8002116:	2301      	movs	r3, #1
 8002118:	e010      	b.n	800213c <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	797b      	ldrb	r3, [r7, #5]
 800211e:	429a      	cmp	r2, r3
 8002120:	d90b      	bls.n	800213a <whatBodyPart+0xb6>
 8002122:	79ba      	ldrb	r2, [r7, #6]
 8002124:	793b      	ldrb	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d907      	bls.n	800213a <whatBodyPart+0xb6>
    if (missingX == frontX)
 800212a:	7c3a      	ldrb	r2, [r7, #16]
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	429a      	cmp	r2, r3
 8002130:	d101      	bne.n	8002136 <whatBodyPart+0xb2>
      return BottomLeft;
 8002132:	2300      	movs	r3, #0
 8002134:	e002      	b.n	800213c <whatBodyPart+0xb8>
    else
      return RightTop;
 8002136:	2305      	movs	r3, #5
 8002138:	e000      	b.n	800213c <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 800213a:	2302      	movs	r3, #2
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bc90      	pop	{r4, r7}
 8002144:	4770      	bx	lr
	...

08002148 <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	460a      	mov	r2, r1
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	4613      	mov	r3, r2
 8002156:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <isSnakePosition+0x88>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	429a      	cmp	r2, r3
 8002160:	d106      	bne.n	8002170 <isSnakePosition+0x28>
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <isSnakePosition+0x88>)
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	79ba      	ldrb	r2, [r7, #6]
 8002168:	429a      	cmp	r2, r3
 800216a:	d101      	bne.n	8002170 <isSnakePosition+0x28>
    return 1;
 800216c:	2301      	movs	r3, #1
 800216e:	e029      	b.n	80021c4 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e013      	b.n	800219e <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8002176:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <isSnakePosition+0x8c>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800217e:	79fa      	ldrb	r2, [r7, #7]
 8002180:	429a      	cmp	r2, r3
 8002182:	d109      	bne.n	8002198 <isSnakePosition+0x50>
 8002184:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <isSnakePosition+0x8c>)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	79ba      	ldrb	r2, [r7, #6]
 8002190:	429a      	cmp	r2, r3
 8002192:	d101      	bne.n	8002198 <isSnakePosition+0x50>
      return 1;
 8002194:	2301      	movs	r3, #1
 8002196:	e015      	b.n	80021c4 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <isSnakePosition+0x90>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4293      	cmp	r3, r2
 80021a8:	dbe5      	blt.n	8002176 <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <isSnakePosition+0x94>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	79fa      	ldrb	r2, [r7, #7]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d106      	bne.n	80021c2 <isSnakePosition+0x7a>
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <isSnakePosition+0x94>)
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	79ba      	ldrb	r2, [r7, #6]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d101      	bne.n	80021c2 <isSnakePosition+0x7a>
    return 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <isSnakePosition+0x7c>

  return 0;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000004 	.word	0x20000004
 80021d4:	200002b4 	.word	0x200002b4
 80021d8:	200002a0 	.word	0x200002a0
 80021dc:	20000008 	.word	0x20000008

080021e0 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	460b      	mov	r3, r1
 80021ec:	71bb      	strb	r3, [r7, #6]
 80021ee:	4613      	mov	r3, r2
 80021f0:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e019      	b.n	800222c <isApplePosition+0x4c>
    if (i == appleIndex)
 80021f8:	797b      	ldrb	r3, [r7, #5]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d011      	beq.n	8002224 <isApplePosition+0x44>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4910      	ldr	r1, [pc, #64]	@ (8002244 <isApplePosition+0x64>)
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 800220a:	4293      	cmp	r3, r2
 800220c:	d10b      	bne.n	8002226 <isApplePosition+0x46>
 800220e:	79ba      	ldrb	r2, [r7, #6]
 8002210:	490c      	ldr	r1, [pc, #48]	@ (8002244 <isApplePosition+0x64>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	440b      	add	r3, r1
 8002218:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800221c:	429a      	cmp	r2, r3
 800221e:	d102      	bne.n	8002226 <isApplePosition+0x46>
      return 1;
 8002220:	2301      	movs	r3, #1
 8002222:	e009      	b.n	8002238 <isApplePosition+0x58>
      continue;
 8002224:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	2328      	movs	r3, #40	@ 0x28
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4293      	cmp	r3, r2
 8002234:	dbe0      	blt.n	80021f8 <isApplePosition+0x18>
  }

  return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	200003a8 	.word	0x200003a8

08002248 <restartGame>:

void restartGame()
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  snakeSize = 0;
 800224e:	4b37      	ldr	r3, [pc, #220]	@ (800232c <restartGame+0xe4>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 8002254:	4b36      	ldr	r3, [pc, #216]	@ (8002330 <restartGame+0xe8>)
 8002256:	2207      	movs	r2, #7
 8002258:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 800225a:	4b35      	ldr	r3, [pc, #212]	@ (8002330 <restartGame+0xe8>)
 800225c:	2206      	movs	r2, #6
 800225e:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 8002260:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <restartGame+0xec>)
 8002262:	2207      	movs	r2, #7
 8002264:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 8002266:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <restartGame+0xec>)
 8002268:	2207      	movs	r2, #7
 800226a:	705a      	strb	r2, [r3, #1]
  direction = Up;
 800226c:	4b32      	ldr	r3, [pc, #200]	@ (8002338 <restartGame+0xf0>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 8002272:	4b32      	ldr	r3, [pc, #200]	@ (800233c <restartGame+0xf4>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8002278:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <restartGame+0xf8>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	e047      	b.n	8002314 <restartGame+0xcc>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 8002284:	f00c f8cc 	bl	800e420 <rand>
 8002288:	4603      	mov	r3, r0
 800228a:	220f      	movs	r2, #15
 800228c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002290:	fb01 f202 	mul.w	r2, r1, r2
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	b259      	sxtb	r1, r3
 8002298:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <restartGame+0xfc>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 80022a0:	f00c f8be 	bl	800e420 <rand>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2208      	movs	r2, #8
 80022a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80022ac:	fb01 f202 	mul.w	r2, r1, r2
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	b259      	sxtb	r1, r3
 80022b4:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <restartGame+0xfc>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	460a      	mov	r2, r1
 80022be:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 80022c0:	4a20      	ldr	r2, [pc, #128]	@ (8002344 <restartGame+0xfc>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	491e      	ldr	r1, [pc, #120]	@ (8002344 <restartGame+0xfc>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	440b      	add	r3, r1
 80022d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f7ff ff34 	bl	8002148 <isSnakePosition>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ce      	bne.n	8002284 <restartGame+0x3c>
 80022e6:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <restartGame+0xfc>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80022ee:	b2d8      	uxtb	r0, r3
 80022f0:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <restartGame+0xfc>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7ff ff6c 	bl	80021e0 <isApplePosition>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ba      	bne.n	8002284 <restartGame+0x3c>
  for (int i = 0; i < NBApple; i++) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3301      	adds	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	2328      	movs	r3, #40	@ 0x28
 8002316:	461a      	mov	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4293      	cmp	r3, r2
 800231c:	dbb2      	blt.n	8002284 <restartGame+0x3c>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800231e:	480a      	ldr	r0, [pc, #40]	@ (8002348 <restartGame+0x100>)
 8002320:	f001 fe36 	bl	8003f90 <BSP_LCD_Clear>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200002a0 	.word	0x200002a0
 8002330:	20000004 	.word	0x20000004
 8002334:	20000008 	.word	0x20000008
 8002338:	20000224 	.word	0x20000224
 800233c:	20000225 	.word	0x20000225
 8002340:	20000001 	.word	0x20000001
 8002344:	200003a8 	.word	0x200003a8
 8002348:	ff81cd4b 	.word	0xff81cd4b

0800234c <displayGameStatus>:

void displayGameStatus()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  if (gameOver) {
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <displayGameStatus+0xa4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002358:	4826      	ldr	r0, [pc, #152]	@ (80023f4 <displayGameStatus+0xa8>)
 800235a:	f001 fdcd 	bl	8003ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800235e:	4826      	ldr	r0, [pc, #152]	@ (80023f8 <displayGameStatus+0xac>)
 8002360:	f001 fdfc 	bl	8003f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8002364:	2301      	movs	r3, #1
 8002366:	4a25      	ldr	r2, [pc, #148]	@ (80023fc <displayGameStatus+0xb0>)
 8002368:	2164      	movs	r1, #100	@ 0x64
 800236a:	2000      	movs	r0, #0
 800236c:	f001 fe7c 	bl	8004068 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002370:	4823      	ldr	r0, [pc, #140]	@ (8002400 <displayGameStatus+0xb4>)
 8002372:	f001 fdf3 	bl	8003f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8002376:	2301      	movs	r3, #1
 8002378:	4a22      	ldr	r2, [pc, #136]	@ (8002404 <displayGameStatus+0xb8>)
 800237a:	2182      	movs	r1, #130	@ 0x82
 800237c:	2000      	movs	r0, #0
 800237e:	f001 fe73 	bl	8004068 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 8002382:	e032      	b.n	80023ea <displayGameStatus+0x9e>
  else if (gamePaused) {
 8002384:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <displayGameStatus+0xbc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800238c:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <displayGameStatus+0xa8>)
 800238e:	f001 fdb3 	bl	8003ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002392:	4819      	ldr	r0, [pc, #100]	@ (80023f8 <displayGameStatus+0xac>)
 8002394:	f001 fde2 	bl	8003f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8002398:	2301      	movs	r3, #1
 800239a:	4a1c      	ldr	r2, [pc, #112]	@ (800240c <displayGameStatus+0xc0>)
 800239c:	2164      	movs	r1, #100	@ 0x64
 800239e:	2000      	movs	r0, #0
 80023a0:	f001 fe62 	bl	8004068 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80023a4:	4816      	ldr	r0, [pc, #88]	@ (8002400 <displayGameStatus+0xb4>)
 80023a6:	f001 fdd9 	bl	8003f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 80023aa:	2301      	movs	r3, #1
 80023ac:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <displayGameStatus+0xc4>)
 80023ae:	2182      	movs	r1, #130	@ 0x82
 80023b0:	2000      	movs	r0, #0
 80023b2:	f001 fe59 	bl	8004068 <BSP_LCD_DisplayStringAt>
}
 80023b6:	e018      	b.n	80023ea <displayGameStatus+0x9e>
  else if (!gameStarted) {
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <displayGameStatus+0xc8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d114      	bne.n	80023ea <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80023c0:	480c      	ldr	r0, [pc, #48]	@ (80023f4 <displayGameStatus+0xa8>)
 80023c2:	f001 fd99 	bl	8003ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 80023c6:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <displayGameStatus+0xac>)
 80023c8:	f001 fdc8 	bl	8003f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 80023cc:	2301      	movs	r3, #1
 80023ce:	4a12      	ldr	r2, [pc, #72]	@ (8002418 <displayGameStatus+0xcc>)
 80023d0:	2164      	movs	r1, #100	@ 0x64
 80023d2:	2000      	movs	r0, #0
 80023d4:	f001 fe48 	bl	8004068 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80023d8:	4809      	ldr	r0, [pc, #36]	@ (8002400 <displayGameStatus+0xb4>)
 80023da:	f001 fdbf 	bl	8003f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 80023de:	2301      	movs	r3, #1
 80023e0:	4a0e      	ldr	r2, [pc, #56]	@ (800241c <displayGameStatus+0xd0>)
 80023e2:	2182      	movs	r1, #130	@ 0x82
 80023e4:	2000      	movs	r0, #0
 80023e6:	f001 fe3f 	bl	8004068 <BSP_LCD_DisplayStringAt>
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200002a8 	.word	0x200002a8
 80023f4:	ffa52a2a 	.word	0xffa52a2a
 80023f8:	20000034 	.word	0x20000034
 80023fc:	0800f98c 	.word	0x0800f98c
 8002400:	2000003c 	.word	0x2000003c
 8002404:	0800f998 	.word	0x0800f998
 8002408:	200002ac 	.word	0x200002ac
 800240c:	0800f9b4 	.word	0x0800f9b4
 8002410:	0800f9c0 	.word	0x0800f9c0
 8002414:	200002b0 	.word	0x200002b0
 8002418:	0800f9dc 	.word	0x0800f9dc
 800241c:	0800f9e8 	.word	0x0800f9e8

08002420 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800242a:	20c8      	movs	r0, #200	@ 0xc8
 800242c:	f001 fc50 	bl	8003cd0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002430:	f000 fa7a 	bl	8002928 <ft5336_I2C_InitializeIfRequired>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002464:	2300      	movs	r3, #0
 8002466:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002468:	f000 fa5e 	bl	8002928 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e010      	b.n	8002494 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	21a8      	movs	r1, #168	@ 0xa8
 8002478:	4618      	mov	r0, r3
 800247a:	f001 fc0b 	bl	8003c94 <TS_IO_Read>
 800247e:	4603      	mov	r3, r0
 8002480:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002482:	7b7b      	ldrb	r3, [r7, #13]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b51      	cmp	r3, #81	@ 0x51
 8002488:	d101      	bne.n	800248e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	3301      	adds	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d802      	bhi.n	80024a0 <ft5336_ReadID+0x4e>
 800249a:	7bbb      	ldrb	r3, [r7, #14]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0e8      	beq.n	8002472 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80024a0:	7b7b      	ldrb	r3, [r7, #13]
 80024a2:	b2db      	uxtb	r3, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fa45 	bl	8002948 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f933 	bl	800272c <ft5336_TS_DisableIT>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 fbd5 	bl	8003c94 <TS_IO_Read>
 80024ea:	4603      	mov	r3, r0
 80024ec:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d901      	bls.n	8002506 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <ft5336_TS_DetectTouch+0x50>)
 800250c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <ft5336_TS_DetectTouch+0x50>)
 8002510:	2200      	movs	r2, #0
 8002512:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	b2db      	uxtb	r3, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200006b0 	.word	0x200006b0

08002524 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002546:	4b6d      	ldr	r3, [pc, #436]	@ (80026fc <ft5336_TS_GetXY+0x1d8>)
 8002548:	789a      	ldrb	r2, [r3, #2]
 800254a:	4b6c      	ldr	r3, [pc, #432]	@ (80026fc <ft5336_TS_GetXY+0x1d8>)
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	429a      	cmp	r2, r3
 8002550:	f080 80cf 	bcs.w	80026f2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002554:	4b69      	ldr	r3, [pc, #420]	@ (80026fc <ft5336_TS_GetXY+0x1d8>)
 8002556:	789b      	ldrb	r3, [r3, #2]
 8002558:	2b09      	cmp	r3, #9
 800255a:	d871      	bhi.n	8002640 <ft5336_TS_GetXY+0x11c>
 800255c:	a201      	add	r2, pc, #4	@ (adr r2, 8002564 <ft5336_TS_GetXY+0x40>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	0800258d 	.word	0x0800258d
 8002568:	0800259f 	.word	0x0800259f
 800256c:	080025b1 	.word	0x080025b1
 8002570:	080025c3 	.word	0x080025c3
 8002574:	080025d5 	.word	0x080025d5
 8002578:	080025e7 	.word	0x080025e7
 800257c:	080025f9 	.word	0x080025f9
 8002580:	0800260b 	.word	0x0800260b
 8002584:	0800261d 	.word	0x0800261d
 8002588:	0800262f 	.word	0x0800262f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800258c:	2304      	movs	r3, #4
 800258e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002590:	2303      	movs	r3, #3
 8002592:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002594:	2306      	movs	r3, #6
 8002596:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002598:	2305      	movs	r3, #5
 800259a:	753b      	strb	r3, [r7, #20]
      break;
 800259c:	e051      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800259e:	230a      	movs	r3, #10
 80025a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80025a2:	2309      	movs	r3, #9
 80025a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80025a6:	230c      	movs	r3, #12
 80025a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80025aa:	230b      	movs	r3, #11
 80025ac:	753b      	strb	r3, [r7, #20]
      break;
 80025ae:	e048      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80025b0:	2310      	movs	r3, #16
 80025b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80025b4:	230f      	movs	r3, #15
 80025b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80025b8:	2312      	movs	r3, #18
 80025ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80025bc:	2311      	movs	r3, #17
 80025be:	753b      	strb	r3, [r7, #20]
      break;
 80025c0:	e03f      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80025c2:	2316      	movs	r3, #22
 80025c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80025c6:	2315      	movs	r3, #21
 80025c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80025ca:	2318      	movs	r3, #24
 80025cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80025ce:	2317      	movs	r3, #23
 80025d0:	753b      	strb	r3, [r7, #20]
      break;
 80025d2:	e036      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80025d4:	231c      	movs	r3, #28
 80025d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80025d8:	231b      	movs	r3, #27
 80025da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80025dc:	231e      	movs	r3, #30
 80025de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80025e0:	231d      	movs	r3, #29
 80025e2:	753b      	strb	r3, [r7, #20]
      break;
 80025e4:	e02d      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80025e6:	2322      	movs	r3, #34	@ 0x22
 80025e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80025ea:	2321      	movs	r3, #33	@ 0x21
 80025ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80025ee:	2324      	movs	r3, #36	@ 0x24
 80025f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80025f2:	2323      	movs	r3, #35	@ 0x23
 80025f4:	753b      	strb	r3, [r7, #20]
      break;
 80025f6:	e024      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80025f8:	2328      	movs	r3, #40	@ 0x28
 80025fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80025fc:	2327      	movs	r3, #39	@ 0x27
 80025fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002600:	232a      	movs	r3, #42	@ 0x2a
 8002602:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8002604:	2329      	movs	r3, #41	@ 0x29
 8002606:	753b      	strb	r3, [r7, #20]
      break;
 8002608:	e01b      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800260a:	232e      	movs	r3, #46	@ 0x2e
 800260c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800260e:	232d      	movs	r3, #45	@ 0x2d
 8002610:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8002612:	2330      	movs	r3, #48	@ 0x30
 8002614:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8002616:	232f      	movs	r3, #47	@ 0x2f
 8002618:	753b      	strb	r3, [r7, #20]
      break;
 800261a:	e012      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800261c:	2334      	movs	r3, #52	@ 0x34
 800261e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002620:	2333      	movs	r3, #51	@ 0x33
 8002622:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8002624:	2336      	movs	r3, #54	@ 0x36
 8002626:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002628:	2335      	movs	r3, #53	@ 0x35
 800262a:	753b      	strb	r3, [r7, #20]
      break;
 800262c:	e009      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800262e:	233a      	movs	r3, #58	@ 0x3a
 8002630:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002632:	2339      	movs	r3, #57	@ 0x39
 8002634:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002636:	233c      	movs	r3, #60	@ 0x3c
 8002638:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800263a:	233b      	movs	r3, #59	@ 0x3b
 800263c:	753b      	strb	r3, [r7, #20]
      break;
 800263e:	e000      	b.n	8002642 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002640:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002642:	89fb      	ldrh	r3, [r7, #14]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	7dfa      	ldrb	r2, [r7, #23]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f001 fb22 	bl	8003c94 <TS_IO_Read>
 8002650:	4603      	mov	r3, r0
 8002652:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 800265c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800265e:	89fb      	ldrh	r3, [r7, #14]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	7dba      	ldrb	r2, [r7, #22]
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fb14 	bl	8003c94 <TS_IO_Read>
 800266c:	4603      	mov	r3, r0
 800266e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800267a:	b21a      	sxth	r2, r3
 800267c:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b21b      	sxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b21b      	sxth	r3, r3
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 800268a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800268c:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	7d7a      	ldrb	r2, [r7, #21]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f001 faf9 	bl	8003c94 <TS_IO_Read>
 80026a2:	4603      	mov	r3, r0
 80026a4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 80026ae:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	7d3a      	ldrb	r2, [r7, #20]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 faeb 	bl	8003c94 <TS_IO_Read>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 80026dc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <ft5336_TS_GetXY+0x1dc>)
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <ft5336_TS_GetXY+0x1d8>)
 80026e8:	789b      	ldrb	r3, [r3, #2]
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <ft5336_TS_GetXY+0x1d8>)
 80026f0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200006b0 	.word	0x200006b0
 8002700:	200006b4 	.word	0x200006b4

08002704 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	21a4      	movs	r1, #164	@ 0xa4
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fa9e 	bl	8003c60 <TS_IO_Write>
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	21a4      	movs	r1, #164	@ 0xa4
 8002746:	4618      	mov	r0, r3
 8002748:	f001 fa8a 	bl	8003c60 <TS_IO_Write>
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	6039      	str	r1, [r7, #0]
 800278c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fa7b 	bl	8003c94 <TS_IO_Read>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4603      	mov	r3, r0
 80027c2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80027d4:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <ft5336_TS_GetTouchInfo+0x158>)
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4293      	cmp	r3, r2
 80027de:	f080 8090 	bcs.w	8002902 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d85d      	bhi.n	80028a4 <ft5336_TS_GetTouchInfo+0xf0>
 80027e8:	a201      	add	r2, pc, #4	@ (adr r2, 80027f0 <ft5336_TS_GetTouchInfo+0x3c>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002819 	.word	0x08002819
 80027f4:	08002827 	.word	0x08002827
 80027f8:	08002835 	.word	0x08002835
 80027fc:	08002843 	.word	0x08002843
 8002800:	08002851 	.word	0x08002851
 8002804:	0800285f 	.word	0x0800285f
 8002808:	0800286d 	.word	0x0800286d
 800280c:	0800287b 	.word	0x0800287b
 8002810:	08002889 	.word	0x08002889
 8002814:	08002897 	.word	0x08002897
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8002818:	2303      	movs	r3, #3
 800281a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800281c:	2307      	movs	r3, #7
 800281e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8002820:	2308      	movs	r3, #8
 8002822:	757b      	strb	r3, [r7, #21]
      break;
 8002824:	e03f      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8002826:	2309      	movs	r3, #9
 8002828:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800282a:	230d      	movs	r3, #13
 800282c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800282e:	230e      	movs	r3, #14
 8002830:	757b      	strb	r3, [r7, #21]
      break;
 8002832:	e038      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002834:	230f      	movs	r3, #15
 8002836:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002838:	2313      	movs	r3, #19
 800283a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800283c:	2314      	movs	r3, #20
 800283e:	757b      	strb	r3, [r7, #21]
      break;
 8002840:	e031      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002842:	2315      	movs	r3, #21
 8002844:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002846:	2319      	movs	r3, #25
 8002848:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800284a:	231a      	movs	r3, #26
 800284c:	757b      	strb	r3, [r7, #21]
      break;
 800284e:	e02a      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002850:	231b      	movs	r3, #27
 8002852:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002854:	231f      	movs	r3, #31
 8002856:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002858:	2320      	movs	r3, #32
 800285a:	757b      	strb	r3, [r7, #21]
      break;
 800285c:	e023      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800285e:	2321      	movs	r3, #33	@ 0x21
 8002860:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002862:	2325      	movs	r3, #37	@ 0x25
 8002864:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002866:	2326      	movs	r3, #38	@ 0x26
 8002868:	757b      	strb	r3, [r7, #21]
      break;
 800286a:	e01c      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800286c:	2327      	movs	r3, #39	@ 0x27
 800286e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002870:	232b      	movs	r3, #43	@ 0x2b
 8002872:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002874:	232c      	movs	r3, #44	@ 0x2c
 8002876:	757b      	strb	r3, [r7, #21]
      break;
 8002878:	e015      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800287a:	232d      	movs	r3, #45	@ 0x2d
 800287c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800287e:	2331      	movs	r3, #49	@ 0x31
 8002880:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002882:	2332      	movs	r3, #50	@ 0x32
 8002884:	757b      	strb	r3, [r7, #21]
      break;
 8002886:	e00e      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002888:	2333      	movs	r3, #51	@ 0x33
 800288a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800288c:	2337      	movs	r3, #55	@ 0x37
 800288e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002890:	2338      	movs	r3, #56	@ 0x38
 8002892:	757b      	strb	r3, [r7, #21]
      break;
 8002894:	e007      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002896:	2339      	movs	r3, #57	@ 0x39
 8002898:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800289a:	233d      	movs	r3, #61	@ 0x3d
 800289c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800289e:	233e      	movs	r3, #62	@ 0x3e
 80028a0:	757b      	strb	r3, [r7, #21]
      break;
 80028a2:	e000      	b.n	80028a6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80028a4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	7dfa      	ldrb	r2, [r7, #23]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 f9f0 	bl	8003c94 <TS_IO_Read>
 80028b4:	4603      	mov	r3, r0
 80028b6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80028b8:	7d3b      	ldrb	r3, [r7, #20]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	119b      	asrs	r3, r3, #6
 80028be:	f003 0203 	and.w	r2, r3, #3
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80028c6:	89fb      	ldrh	r3, [r7, #14]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	7dba      	ldrb	r2, [r7, #22]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 f9e0 	bl	8003c94 <TS_IO_Read>
 80028d4:	4603      	mov	r3, r0
 80028d6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80028d8:	7d3b      	ldrb	r3, [r7, #20]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	7d7a      	ldrb	r2, [r7, #21]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f9d2 	bl	8003c94 <TS_IO_Read>
 80028f0:	4603      	mov	r3, r0
 80028f2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80028f4:	7d3b      	ldrb	r3, [r7, #20]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	111b      	asrs	r3, r3, #4
 80028fa:	f003 0204 	and.w	r2, r3, #4
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200006b0 	.word	0x200006b0

08002910 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002916:	781b      	ldrb	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	200006b0 	.word	0x200006b0

08002928 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800292c:	f7ff fff0 	bl	8002910 <ft5336_Get_I2C_InitializedStatus>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002936:	f001 f989 	bl	8003c4c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800293a:	4b02      	ldr	r3, [pc, #8]	@ (8002944 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
  }
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200006b0 	.word	0x200006b0

08002948 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b090      	sub	sp, #64	@ 0x40
 8002968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800297a:	4baf      	ldr	r3, [pc, #700]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4aae      	ldr	r2, [pc, #696]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002980:	f043 0310 	orr.w	r3, r3, #16
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4bac      	ldr	r3, [pc, #688]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002992:	4ba9      	ldr	r3, [pc, #676]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4aa8      	ldr	r2, [pc, #672]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4ba6      	ldr	r3, [pc, #664]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	4ba3      	ldr	r3, [pc, #652]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4aa2      	ldr	r2, [pc, #648]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4ba0      	ldr	r3, [pc, #640]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c2:	4b9d      	ldr	r3, [pc, #628]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a9c      	ldr	r2, [pc, #624]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b9a      	ldr	r3, [pc, #616]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029da:	4b97      	ldr	r3, [pc, #604]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a96      	ldr	r2, [pc, #600]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b94      	ldr	r3, [pc, #592]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b91      	ldr	r3, [pc, #580]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a90      	ldr	r2, [pc, #576]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a8a      	ldr	r2, [pc, #552]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b88      	ldr	r3, [pc, #544]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a22:	4b85      	ldr	r3, [pc, #532]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a84      	ldr	r2, [pc, #528]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b82      	ldr	r3, [pc, #520]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b7c      	ldr	r3, [pc, #496]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a52:	4b79      	ldr	r3, [pc, #484]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	4a78      	ldr	r2, [pc, #480]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a58:	f043 0320 	orr.w	r3, r3, #32
 8002a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5e:	4b76      	ldr	r3, [pc, #472]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a6a:	4b73      	ldr	r3, [pc, #460]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	4a72      	ldr	r2, [pc, #456]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a76:	4b70      	ldr	r3, [pc, #448]	@ (8002c38 <MX_GPIO_Init+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2160      	movs	r1, #96	@ 0x60
 8002a86:	486d      	ldr	r0, [pc, #436]	@ (8002c3c <MX_GPIO_Init+0x2d8>)
 8002a88:	f004 ffe2 	bl	8007a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2120      	movs	r1, #32
 8002a90:	486b      	ldr	r0, [pc, #428]	@ (8002c40 <MX_GPIO_Init+0x2dc>)
 8002a92:	f004 ffdd 	bl	8007a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2108      	movs	r1, #8
 8002a9a:	4869      	ldr	r0, [pc, #420]	@ (8002c40 <MX_GPIO_Init+0x2dc>)
 8002a9c:	f004 ffd8 	bl	8007a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	2108      	movs	r1, #8
 8002aa4:	4867      	ldr	r0, [pc, #412]	@ (8002c44 <MX_GPIO_Init+0x2e0>)
 8002aa6:	f004 ffd3 	bl	8007a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ab0:	4865      	ldr	r0, [pc, #404]	@ (8002c48 <MX_GPIO_Init+0x2e4>)
 8002ab2:	f004 ffcd 	bl	8007a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002abc:	4863      	ldr	r0, [pc, #396]	@ (8002c4c <MX_GPIO_Init+0x2e8>)
 8002abe:	f004 ffc7 	bl	8007a50 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	21c8      	movs	r1, #200	@ 0xc8
 8002ac6:	4862      	ldr	r0, [pc, #392]	@ (8002c50 <MX_GPIO_Init+0x2ec>)
 8002ac8:	f004 ffc2 	bl	8007a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002acc:	2308      	movs	r3, #8
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002adc:	4619      	mov	r1, r3
 8002ade:	4857      	ldr	r0, [pc, #348]	@ (8002c3c <MX_GPIO_Init+0x2d8>)
 8002ae0:	f004 fcfe 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002af4:	2309      	movs	r3, #9
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002af8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002afc:	4619      	mov	r1, r3
 8002afe:	484f      	ldr	r0, [pc, #316]	@ (8002c3c <MX_GPIO_Init+0x2d8>)
 8002b00:	f004 fcee 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002b04:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b16:	230b      	movs	r3, #11
 8002b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	484b      	ldr	r0, [pc, #300]	@ (8002c50 <MX_GPIO_Init+0x2ec>)
 8002b22:	f004 fcdd 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002b26:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b38:	230a      	movs	r3, #10
 8002b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b40:	4619      	mov	r1, r3
 8002b42:	4844      	ldr	r0, [pc, #272]	@ (8002c54 <MX_GPIO_Init+0x2f0>)
 8002b44:	f004 fccc 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b60:	4619      	mov	r1, r3
 8002b62:	4837      	ldr	r0, [pc, #220]	@ (8002c40 <MX_GPIO_Init+0x2dc>)
 8002b64:	f004 fcbc 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002b68:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b82:	4619      	mov	r1, r3
 8002b84:	4834      	ldr	r0, [pc, #208]	@ (8002c58 <MX_GPIO_Init+0x2f4>)
 8002b86:	f004 fcab 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002b8a:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b90:	2300      	movs	r3, #0
 8002b92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	482f      	ldr	r0, [pc, #188]	@ (8002c5c <MX_GPIO_Init+0x2f8>)
 8002ba0:	f004 fc9e 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002ba4:	2360      	movs	r3, #96	@ 0x60
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4820      	ldr	r0, [pc, #128]	@ (8002c3c <MX_GPIO_Init+0x2d8>)
 8002bbc:	f004 fc90 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002bc0:	2340      	movs	r3, #64	@ 0x40
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002bd0:	230a      	movs	r3, #10
 8002bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	481e      	ldr	r0, [pc, #120]	@ (8002c54 <MX_GPIO_Init+0x2f0>)
 8002bdc:	f004 fc80 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be6:	2300      	movs	r3, #0
 8002be8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	481a      	ldr	r0, [pc, #104]	@ (8002c60 <MX_GPIO_Init+0x2fc>)
 8002bf6:	f004 fc73 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002bfa:	2340      	movs	r3, #64	@ 0x40
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bfe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002c08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480c      	ldr	r0, [pc, #48]	@ (8002c40 <MX_GPIO_Init+0x2dc>)
 8002c10:	f004 fc66 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002c14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c26:	230a      	movs	r3, #10
 8002c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480a      	ldr	r0, [pc, #40]	@ (8002c5c <MX_GPIO_Init+0x2f8>)
 8002c32:	f004 fc55 	bl	80074e0 <HAL_GPIO_Init>
 8002c36:	e015      	b.n	8002c64 <MX_GPIO_Init+0x300>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40022800 	.word	0x40022800
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40021c00 	.word	0x40021c00
 8002c50:	40021800 	.word	0x40021800
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002c64:	23f0      	movs	r3, #240	@ 0xf0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c74:	230a      	movs	r3, #10
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4891      	ldr	r0, [pc, #580]	@ (8002ec4 <MX_GPIO_Init+0x560>)
 8002c80:	f004 fc2e 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c96:	230a      	movs	r3, #10
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4889      	ldr	r0, [pc, #548]	@ (8002ec8 <MX_GPIO_Init+0x564>)
 8002ca2:	f004 fc1d 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002ca6:	2328      	movs	r3, #40	@ 0x28
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4883      	ldr	r0, [pc, #524]	@ (8002ecc <MX_GPIO_Init+0x568>)
 8002cbe:	f004 fc0f 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	487e      	ldr	r0, [pc, #504]	@ (8002ed0 <MX_GPIO_Init+0x56c>)
 8002cd8:	f004 fc02 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002cdc:	2308      	movs	r3, #8
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4878      	ldr	r0, [pc, #480]	@ (8002ed4 <MX_GPIO_Init+0x570>)
 8002cf4:	f004 fbf4 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002cf8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	486e      	ldr	r0, [pc, #440]	@ (8002ec8 <MX_GPIO_Init+0x564>)
 8002d0e:	f004 fbe7 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002d12:	2310      	movs	r3, #16
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d16:	2300      	movs	r3, #0
 8002d18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d22:	4619      	mov	r1, r3
 8002d24:	4869      	ldr	r0, [pc, #420]	@ (8002ecc <MX_GPIO_Init+0x568>)
 8002d26:	f004 fbdb 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d36:	2303      	movs	r3, #3
 8002d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d42:	4619      	mov	r1, r3
 8002d44:	4861      	ldr	r0, [pc, #388]	@ (8002ecc <MX_GPIO_Init+0x568>)
 8002d46:	f004 fbcb 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002d4a:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d50:	2300      	movs	r3, #0
 8002d52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	485e      	ldr	r0, [pc, #376]	@ (8002ed8 <MX_GPIO_Init+0x574>)
 8002d60:	f004 fbbe 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4851      	ldr	r0, [pc, #324]	@ (8002ec4 <MX_GPIO_Init+0x560>)
 8002d7e:	f004 fbaf 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002d82:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	4619      	mov	r1, r3
 8002d9a:	484f      	ldr	r0, [pc, #316]	@ (8002ed8 <MX_GPIO_Init+0x574>)
 8002d9c:	f004 fba0 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002da0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002da6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db4:	4619      	mov	r1, r3
 8002db6:	4843      	ldr	r0, [pc, #268]	@ (8002ec4 <MX_GPIO_Init+0x560>)
 8002db8:	f004 fb92 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002dcc:	230a      	movs	r3, #10
 8002dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4840      	ldr	r0, [pc, #256]	@ (8002ed8 <MX_GPIO_Init+0x574>)
 8002dd8:	f004 fb82 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002ddc:	23c8      	movs	r3, #200	@ 0xc8
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002df0:	4619      	mov	r1, r3
 8002df2:	4835      	ldr	r0, [pc, #212]	@ (8002ec8 <MX_GPIO_Init+0x564>)
 8002df4:	f004 fb74 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e08:	230a      	movs	r3, #10
 8002e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e10:	4619      	mov	r1, r3
 8002e12:	482f      	ldr	r0, [pc, #188]	@ (8002ed0 <MX_GPIO_Init+0x56c>)
 8002e14:	f004 fb64 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002e18:	2332      	movs	r3, #50	@ 0x32
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e28:	230b      	movs	r3, #11
 8002e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e30:	4619      	mov	r1, r3
 8002e32:	4827      	ldr	r0, [pc, #156]	@ (8002ed0 <MX_GPIO_Init+0x56c>)
 8002e34:	f004 fb54 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e38:	2304      	movs	r3, #4
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e48:	2309      	movs	r3, #9
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e50:	4619      	mov	r1, r3
 8002e52:	4822      	ldr	r0, [pc, #136]	@ (8002edc <MX_GPIO_Init+0x578>)
 8002e54:	f004 fb44 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e58:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e6a:	2309      	movs	r3, #9
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e72:	4619      	mov	r1, r3
 8002e74:	4815      	ldr	r0, [pc, #84]	@ (8002ecc <MX_GPIO_Init+0x568>)
 8002e76:	f004 fb33 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e7a:	2386      	movs	r3, #134	@ 0x86
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e8a:	230b      	movs	r3, #11
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e92:	4619      	mov	r1, r3
 8002e94:	4812      	ldr	r0, [pc, #72]	@ (8002ee0 <MX_GPIO_Init+0x57c>)
 8002e96:	f004 fb23 	bl	80074e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002e9a:	2328      	movs	r3, #40	@ 0x28
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002eaa:	230a      	movs	r3, #10
 8002eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480a      	ldr	r0, [pc, #40]	@ (8002ee0 <MX_GPIO_Init+0x57c>)
 8002eb6:	f004 fb13 	bl	80074e0 <HAL_GPIO_Init>

}
 8002eba:	bf00      	nop
 8002ebc:	3740      	adds	r7, #64	@ 0x40
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40021800 	.word	0x40021800
 8002ecc:	40020c00 	.word	0x40020c00
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40022800 	.word	0x40022800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020000 	.word	0x40020000

08002ee4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002eea:	4a1c      	ldr	r2, [pc, #112]	@ (8002f5c <MX_I2C1_Init+0x78>)
 8002eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <MX_I2C1_Init+0x7c>)
 8002ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002efa:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f06:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f0c:	4b12      	ldr	r3, [pc, #72]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f1e:	480e      	ldr	r0, [pc, #56]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f20:	f004 fdb0 	bl	8007a84 <HAL_I2C_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f2a:	f000 fbc1 	bl	80036b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4809      	ldr	r0, [pc, #36]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f32:	f005 fb3d 	bl	80085b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f3c:	f000 fbb8 	bl	80036b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f40:	2100      	movs	r1, #0
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <MX_I2C1_Init+0x74>)
 8002f44:	f005 fb7f 	bl	8008646 <HAL_I2CEx_ConfigDigitalFilter>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f4e:	f000 fbaf 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200006b8 	.word	0x200006b8
 8002f5c:	40005400 	.word	0x40005400
 8002f60:	00c0eaff 	.word	0x00c0eaff

08002f64 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f68:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <MX_I2C3_Init+0x78>)
 8002f6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f70:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <MX_I2C3_Init+0x7c>)
 8002f72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002f74:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f7a:	4b17      	ldr	r3, [pc, #92]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f80:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002f86:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f8c:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f92:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f98:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002f9e:	480e      	ldr	r0, [pc, #56]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002fa0:	f004 fd70 	bl	8007a84 <HAL_I2C_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002faa:	f000 fb81 	bl	80036b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4809      	ldr	r0, [pc, #36]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002fb2:	f005 fafd 	bl	80085b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002fbc:	f000 fb78 	bl	80036b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4805      	ldr	r0, [pc, #20]	@ (8002fd8 <MX_I2C3_Init+0x74>)
 8002fc4:	f005 fb3f 	bl	8008646 <HAL_I2CEx_ConfigDigitalFilter>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002fce:	f000 fb6f 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000070c 	.word	0x2000070c
 8002fdc:	40005c00 	.word	0x40005c00
 8002fe0:	00c0eaff 	.word	0x00c0eaff

08002fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b0ac      	sub	sp, #176	@ 0xb0
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ffc:	f107 0318 	add.w	r3, r7, #24
 8003000:	2284      	movs	r2, #132	@ 0x84
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f00b fb6e 	bl	800e6e6 <memset>
  if(i2cHandle->Instance==I2C1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a44      	ldr	r2, [pc, #272]	@ (8003120 <HAL_I2C_MspInit+0x13c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d13d      	bne.n	8003090 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003014:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003018:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800301a:	2300      	movs	r3, #0
 800301c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800301e:	f107 0318 	add.w	r3, r7, #24
 8003022:	4618      	mov	r0, r3
 8003024:	f006 fbf0 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800302e:	f000 fb3f 	bl	80036b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003032:	4b3c      	ldr	r3, [pc, #240]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	4a3b      	ldr	r2, [pc, #236]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6313      	str	r3, [r2, #48]	@ 0x30
 800303e:	4b39      	ldr	r3, [pc, #228]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800304a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003052:	2312      	movs	r3, #18
 8003054:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305e:	2303      	movs	r3, #3
 8003060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003064:	2304      	movs	r3, #4
 8003066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800306e:	4619      	mov	r1, r3
 8003070:	482d      	ldr	r0, [pc, #180]	@ (8003128 <HAL_I2C_MspInit+0x144>)
 8003072:	f004 fa35 	bl	80074e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003076:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	4a2a      	ldr	r2, [pc, #168]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 800307c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003080:	6413      	str	r3, [r2, #64]	@ 0x40
 8003082:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800308e:	e042      	b.n	8003116 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a25      	ldr	r2, [pc, #148]	@ (800312c <HAL_I2C_MspInit+0x148>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d13d      	bne.n	8003116 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800309a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800309e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a6:	f107 0318 	add.w	r3, r7, #24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f006 fbac 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80030b6:	f000 fafb 	bl	80036b0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 80030c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c6:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80030d2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80030d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030da:	2312      	movs	r3, #18
 80030dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030ec:	2304      	movs	r3, #4
 80030ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030f6:	4619      	mov	r1, r3
 80030f8:	480d      	ldr	r0, [pc, #52]	@ (8003130 <HAL_I2C_MspInit+0x14c>)
 80030fa:	f004 f9f1 	bl	80074e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	4a08      	ldr	r2, [pc, #32]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 8003104:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003108:	6413      	str	r3, [r2, #64]	@ 0x40
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_I2C_MspInit+0x140>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
}
 8003116:	bf00      	nop
 8003118:	37b0      	adds	r7, #176	@ 0xb0
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40005400 	.word	0x40005400
 8003124:	40023800 	.word	0x40023800
 8003128:	40020400 	.word	0x40020400
 800312c:	40005c00 	.word	0x40005c00
 8003130:	40021c00 	.word	0x40021c00

08003134 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a15      	ldr	r2, [pc, #84]	@ (8003198 <HAL_I2C_MspDeInit+0x64>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d110      	bne.n	8003168 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <HAL_I2C_MspDeInit+0x68>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	4a14      	ldr	r2, [pc, #80]	@ (800319c <HAL_I2C_MspDeInit+0x68>)
 800314c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003150:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003156:	4812      	ldr	r0, [pc, #72]	@ (80031a0 <HAL_I2C_MspDeInit+0x6c>)
 8003158:	f004 fb6e 	bl	8007838 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800315c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003160:	480f      	ldr	r0, [pc, #60]	@ (80031a0 <HAL_I2C_MspDeInit+0x6c>)
 8003162:	f004 fb69 	bl	8007838 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8003166:	e013      	b.n	8003190 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0d      	ldr	r2, [pc, #52]	@ (80031a4 <HAL_I2C_MspDeInit+0x70>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10e      	bne.n	8003190 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_I2C_MspDeInit+0x68>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	4a09      	ldr	r2, [pc, #36]	@ (800319c <HAL_I2C_MspDeInit+0x68>)
 8003178:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800317c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800317e:	2180      	movs	r1, #128	@ 0x80
 8003180:	4809      	ldr	r0, [pc, #36]	@ (80031a8 <HAL_I2C_MspDeInit+0x74>)
 8003182:	f004 fb59 	bl	8007838 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800318a:	4807      	ldr	r0, [pc, #28]	@ (80031a8 <HAL_I2C_MspDeInit+0x74>)
 800318c:	f004 fb54 	bl	8007838 <HAL_GPIO_DeInit>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40005400 	.word	0x40005400
 800319c:	40023800 	.word	0x40023800
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40005c00 	.word	0x40005c00
 80031a8:	40021c00 	.word	0x40021c00

080031ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08e      	sub	sp, #56	@ 0x38
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2234      	movs	r2, #52	@ 0x34
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f00b fa94 	bl	800e6e6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80031be:	4b3a      	ldr	r3, [pc, #232]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031c0:	4a3a      	ldr	r2, [pc, #232]	@ (80032ac <MX_LTDC_Init+0x100>)
 80031c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80031c4:	4b38      	ldr	r3, [pc, #224]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80031ca:	4b37      	ldr	r3, [pc, #220]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80031d0:	4b35      	ldr	r3, [pc, #212]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80031d6:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80031dc:	4b32      	ldr	r3, [pc, #200]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031de:	2228      	movs	r2, #40	@ 0x28
 80031e0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80031e2:	4b31      	ldr	r3, [pc, #196]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031e4:	2209      	movs	r2, #9
 80031e6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80031e8:	4b2f      	ldr	r3, [pc, #188]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031ea:	2235      	movs	r2, #53	@ 0x35
 80031ec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80031ee:	4b2e      	ldr	r3, [pc, #184]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031f0:	220b      	movs	r2, #11
 80031f2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80031f4:	4b2c      	ldr	r3, [pc, #176]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031f6:	f240 2215 	movw	r2, #533	@ 0x215
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80031fc:	4b2a      	ldr	r3, [pc, #168]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 80031fe:	f240 121b 	movw	r2, #283	@ 0x11b
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8003204:	4b28      	ldr	r3, [pc, #160]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 8003206:	f240 2235 	movw	r2, #565	@ 0x235
 800320a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800320c:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 800320e:	f240 121d 	movw	r2, #285	@ 0x11d
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003214:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800321c:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003224:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800322c:	481e      	ldr	r0, [pc, #120]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 800322e:	f005 fa57 	bl	80086e0 <HAL_LTDC_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003238:	f000 fa3a 	bl	80036b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003240:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003244:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800324a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800324e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003250:	2302      	movs	r3, #2
 8003252:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003254:	23ff      	movs	r3, #255	@ 0xff
 8003256:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800325c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003260:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003262:	2307      	movs	r3, #7
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003266:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800326a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 800326c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8003272:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003276:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	2200      	movs	r2, #0
 800328e:	4619      	mov	r1, r3
 8003290:	4805      	ldr	r0, [pc, #20]	@ (80032a8 <MX_LTDC_Init+0xfc>)
 8003292:	f005 fbb7 	bl	8008a04 <HAL_LTDC_ConfigLayer>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800329c:	f000 fa08 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	3738      	adds	r7, #56	@ 0x38
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000760 	.word	0x20000760
 80032ac:	40016800 	.word	0x40016800

080032b0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b0ae      	sub	sp, #184	@ 0xb8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c8:	f107 0320 	add.w	r3, r7, #32
 80032cc:	2284      	movs	r2, #132	@ 0x84
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00b fa08 	bl	800e6e6 <memset>
  if(ltdcHandle->Instance==LTDC)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	@ (8003498 <HAL_LTDC_MspInit+0x1e8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	f040 80d6 	bne.w	800348e <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80032e2:	2308      	movs	r3, #8
 80032e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80032e6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80032ec:	2305      	movs	r3, #5
 80032ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80032f0:	2302      	movs	r3, #2
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80032f4:	2303      	movs	r3, #3
 80032f6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80032f8:	2301      	movs	r3, #1
 80032fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80032fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003300:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003302:	f107 0320 	add.w	r3, r7, #32
 8003306:	4618      	mov	r0, r3
 8003308:	f006 fa7e 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003312:	f000 f9cd 	bl	80036b0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003316:	4b61      	ldr	r3, [pc, #388]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a60      	ldr	r2, [pc, #384]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 800331c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b5e      	ldr	r3, [pc, #376]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800332e:	4b5b      	ldr	r3, [pc, #364]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	4a5a      	ldr	r2, [pc, #360]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003334:	f043 0310 	orr.w	r3, r3, #16
 8003338:	6313      	str	r3, [r2, #48]	@ 0x30
 800333a:	4b58      	ldr	r3, [pc, #352]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003346:	4b55      	ldr	r3, [pc, #340]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a54      	ldr	r2, [pc, #336]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 800334c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b52      	ldr	r3, [pc, #328]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800335e:	4b4f      	ldr	r3, [pc, #316]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	4a4e      	ldr	r2, [pc, #312]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003364:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003368:	6313      	str	r3, [r2, #48]	@ 0x30
 800336a:	4b4c      	ldr	r3, [pc, #304]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003376:	4b49      	ldr	r3, [pc, #292]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	4a48      	ldr	r2, [pc, #288]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 800337c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003380:	6313      	str	r3, [r2, #48]	@ 0x30
 8003382:	4b46      	ldr	r3, [pc, #280]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800338e:	4b43      	ldr	r3, [pc, #268]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	4a42      	ldr	r2, [pc, #264]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6313      	str	r3, [r2, #48]	@ 0x30
 800339a:	4b40      	ldr	r3, [pc, #256]	@ (800349c <HAL_LTDC_MspInit+0x1ec>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80033a6:	2310      	movs	r3, #16
 80033a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033be:	230e      	movs	r3, #14
 80033c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4835      	ldr	r0, [pc, #212]	@ (80034a0 <HAL_LTDC_MspInit+0x1f0>)
 80033cc:	f004 f888 	bl	80074e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80033d0:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80033d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ea:	230e      	movs	r3, #14
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80033f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033f4:	4619      	mov	r1, r3
 80033f6:	482b      	ldr	r0, [pc, #172]	@ (80034a4 <HAL_LTDC_MspInit+0x1f4>)
 80033f8:	f004 f872 	bl	80074e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80033fc:	23f7      	movs	r3, #247	@ 0xf7
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003414:	230e      	movs	r3, #14
 8003416:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800341a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800341e:	4619      	mov	r1, r3
 8003420:	4821      	ldr	r0, [pc, #132]	@ (80034a8 <HAL_LTDC_MspInit+0x1f8>)
 8003422:	f004 f85d 	bl	80074e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800342a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003440:	2309      	movs	r3, #9
 8003442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003446:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800344a:	4619      	mov	r1, r3
 800344c:	4817      	ldr	r0, [pc, #92]	@ (80034ac <HAL_LTDC_MspInit+0x1fc>)
 800344e:	f004 f847 	bl	80074e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003452:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800346c:	230e      	movs	r3, #14
 800346e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003472:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003476:	4619      	mov	r1, r3
 8003478:	480d      	ldr	r0, [pc, #52]	@ (80034b0 <HAL_LTDC_MspInit+0x200>)
 800347a:	f004 f831 	bl	80074e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800347e:	2200      	movs	r2, #0
 8003480:	2105      	movs	r1, #5
 8003482:	2058      	movs	r0, #88	@ 0x58
 8003484:	f003 f9c8 	bl	8006818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003488:	2058      	movs	r0, #88	@ 0x58
 800348a:	f003 f9e1 	bl	8006850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800348e:	bf00      	nop
 8003490:	37b8      	adds	r7, #184	@ 0xb8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40016800 	.word	0x40016800
 800349c:	40023800 	.word	0x40023800
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40022400 	.word	0x40022400
 80034a8:	40022800 	.word	0x40022800
 80034ac:	40021800 	.word	0x40021800
 80034b0:	40022000 	.word	0x40022000

080034b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034b4:	b598      	push	{r3, r4, r7, lr}
 80034b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034b8:	4b37      	ldr	r3, [pc, #220]	@ (8003598 <main+0xe4>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034be:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <main+0xe4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034c4:	f002 fca5 	bl	8005e12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034c8:	f000 f86e 	bl	80035a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034cc:	f7ff fa4a 	bl	8002964 <MX_GPIO_Init>
  MX_ADC3_Init();
 80034d0:	f7fd fca6 	bl	8000e20 <MX_ADC3_Init>
  MX_DMA2D_Init();
 80034d4:	f7fd fdd6 	bl	8001084 <MX_DMA2D_Init>
  MX_FMC_Init();
 80034d8:	f7fd fe2c 	bl	8001134 <MX_FMC_Init>
  MX_I2C1_Init();
 80034dc:	f7ff fd02 	bl	8002ee4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80034e0:	f7ff fd40 	bl	8002f64 <MX_I2C3_Init>
  MX_LTDC_Init();
 80034e4:	f7ff fe62 	bl	80031ac <MX_LTDC_Init>
  MX_RTC_Init();
 80034e8:	f000 f8e8 	bl	80036bc <MX_RTC_Init>
  MX_SPI2_Init();
 80034ec:	f000 f9b8 	bl	8003860 <MX_SPI2_Init>
  MX_TIM1_Init();
 80034f0:	f002 f8a2 	bl	8005638 <MX_TIM1_Init>
  MX_TIM2_Init();
 80034f4:	f002 f8f4 	bl	80056e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80034f8:	f002 f940 	bl	800577c <MX_TIM3_Init>
  MX_TIM5_Init();
 80034fc:	f002 f98c 	bl	8005818 <MX_TIM5_Init>
  MX_TIM8_Init();
 8003500:	f002 f9d8 	bl	80058b4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8003504:	f002 faec 	bl	8005ae0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003508:	f002 fb1a 	bl	8005b40 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800350c:	f7fd fc36 	bl	8000d7c <MX_ADC1_Init>
  MX_DAC_Init();
 8003510:	f7fd fd46 	bl	8000fa0 <MX_DAC_Init>
  MX_UART7_Init();
 8003514:	f002 fab4 	bl	8005a80 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8003518:	f000 fbe6 	bl	8003ce8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800351c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003520:	2000      	movs	r0, #0
 8003522:	f000 fc79 	bl	8003e18 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8003526:	f000 fc4f 	bl	8003dc8 <BSP_LCD_GetXSize>
 800352a:	4604      	mov	r4, r0
 800352c:	f000 fc60 	bl	8003df0 <BSP_LCD_GetYSize>
 8003530:	4603      	mov	r3, r0
 8003532:	fb04 f303 	mul.w	r3, r4, r3
 8003536:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4619      	mov	r1, r3
 800353e:	2001      	movs	r0, #1
 8003540:	f000 fc6a 	bl	8003e18 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8003544:	f001 f82a 	bl	800459c <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8003548:	2000      	movs	r0, #0
 800354a:	f000 fcc5 	bl	8003ed8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800354e:	4813      	ldr	r0, [pc, #76]	@ (800359c <main+0xe8>)
 8003550:	f000 fd1e 	bl	8003f90 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8003554:	2001      	movs	r0, #1
 8003556:	f000 fcbf 	bl	8003ed8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 800355a:	2000      	movs	r0, #0
 800355c:	f000 fd18 	bl	8003f90 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8003560:	480f      	ldr	r0, [pc, #60]	@ (80035a0 <main+0xec>)
 8003562:	f000 fcfb 	bl	8003f5c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8003566:	480f      	ldr	r0, [pc, #60]	@ (80035a4 <main+0xf0>)
 8003568:	f000 fcc6 	bl	8003ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 800356c:	2000      	movs	r0, #0
 800356e:	f000 fcdb 	bl	8003f28 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003572:	f000 fc29 	bl	8003dc8 <BSP_LCD_GetXSize>
 8003576:	4603      	mov	r3, r0
 8003578:	b29c      	uxth	r4, r3
 800357a:	f000 fc39 	bl	8003df0 <BSP_LCD_GetYSize>
 800357e:	4603      	mov	r3, r0
 8003580:	b29b      	uxth	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	4620      	mov	r0, r4
 8003586:	f001 fc1b 	bl	8004dc0 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800358a:	f7fd fed7 	bl	800133c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800358e:	f008 fc71 	bl	800be74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <main+0xde>
 8003596:	bf00      	nop
 8003598:	20000808 	.word	0x20000808
 800359c:	ff81cd4b 	.word	0xff81cd4b
 80035a0:	2000003c 	.word	0x2000003c
 80035a4:	ffa52a2a 	.word	0xffa52a2a

080035a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b094      	sub	sp, #80	@ 0x50
 80035ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ae:	f107 0320 	add.w	r3, r7, #32
 80035b2:	2230      	movs	r2, #48	@ 0x30
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00b f895 	bl	800e6e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80035cc:	f005 fc00 	bl	8008dd0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003684 <SystemClock_Config+0xdc>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <SystemClock_Config+0xdc>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035da:	6413      	str	r3, [r2, #64]	@ 0x40
 80035dc:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <SystemClock_Config+0xdc>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e8:	4b27      	ldr	r3, [pc, #156]	@ (8003688 <SystemClock_Config+0xe0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a26      	ldr	r2, [pc, #152]	@ (8003688 <SystemClock_Config+0xe0>)
 80035ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b24      	ldr	r3, [pc, #144]	@ (8003688 <SystemClock_Config+0xe0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003600:	2309      	movs	r3, #9
 8003602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800360a:	2301      	movs	r3, #1
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800360e:	2302      	movs	r3, #2
 8003610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003612:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003618:	2319      	movs	r3, #25
 800361a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800361c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003622:	2302      	movs	r3, #2
 8003624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003626:	2309      	movs	r3, #9
 8003628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800362a:	f107 0320 	add.w	r3, r7, #32
 800362e:	4618      	mov	r0, r3
 8003630:	f005 fc2e 	bl	8008e90 <HAL_RCC_OscConfig>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800363a:	f000 f839 	bl	80036b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800363e:	f005 fbd7 	bl	8008df0 <HAL_PWREx_EnableOverDrive>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003648:	f000 f832 	bl	80036b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800364c:	230f      	movs	r3, #15
 800364e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003650:	2302      	movs	r3, #2
 8003652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003658:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800365c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800365e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	2106      	movs	r1, #6
 800366a:	4618      	mov	r0, r3
 800366c:	f005 feb4 	bl	80093d8 <HAL_RCC_ClockConfig>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003676:	f000 f81b 	bl	80036b0 <Error_Handler>
  }
}
 800367a:	bf00      	nop
 800367c:	3750      	adds	r7, #80	@ 0x50
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000

0800368c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a04      	ldr	r2, [pc, #16]	@ (80036ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800369e:	f002 fbc5 	bl	8005e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40001000 	.word	0x40001000

080036b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036b4:	b672      	cpsid	i
}
 80036b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <Error_Handler+0x8>

080036bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b090      	sub	sp, #64	@ 0x40
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036d2:	2300      	movs	r3, #0
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80036d6:	463b      	mov	r3, r7
 80036d8:	2228      	movs	r2, #40	@ 0x28
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f00b f802 	bl	800e6e6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036e2:	4b46      	ldr	r3, [pc, #280]	@ (80037fc <MX_RTC_Init+0x140>)
 80036e4:	4a46      	ldr	r2, [pc, #280]	@ (8003800 <MX_RTC_Init+0x144>)
 80036e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036e8:	4b44      	ldr	r3, [pc, #272]	@ (80037fc <MX_RTC_Init+0x140>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036ee:	4b43      	ldr	r3, [pc, #268]	@ (80037fc <MX_RTC_Init+0x140>)
 80036f0:	227f      	movs	r2, #127	@ 0x7f
 80036f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036f4:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <MX_RTC_Init+0x140>)
 80036f6:	22ff      	movs	r2, #255	@ 0xff
 80036f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036fa:	4b40      	ldr	r3, [pc, #256]	@ (80037fc <MX_RTC_Init+0x140>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003700:	4b3e      	ldr	r3, [pc, #248]	@ (80037fc <MX_RTC_Init+0x140>)
 8003702:	2200      	movs	r2, #0
 8003704:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003706:	4b3d      	ldr	r3, [pc, #244]	@ (80037fc <MX_RTC_Init+0x140>)
 8003708:	2200      	movs	r2, #0
 800370a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800370c:	483b      	ldr	r0, [pc, #236]	@ (80037fc <MX_RTC_Init+0x140>)
 800370e:	f006 fc6b 	bl	8009fe8 <HAL_RTC_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003718:	f7ff ffca 	bl	80036b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8003722:	2300      	movs	r3, #0
 8003724:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800372e:	2300      	movs	r3, #0
 8003730:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003736:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800373a:	2201      	movs	r2, #1
 800373c:	4619      	mov	r1, r3
 800373e:	482f      	ldr	r0, [pc, #188]	@ (80037fc <MX_RTC_Init+0x140>)
 8003740:	f006 fcd6 	bl	800a0f0 <HAL_RTC_SetTime>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800374a:	f7ff ffb1 	bl	80036b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8003760:	2300      	movs	r3, #0
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800376a:	2201      	movs	r2, #1
 800376c:	4619      	mov	r1, r3
 800376e:	4823      	ldr	r0, [pc, #140]	@ (80037fc <MX_RTC_Init+0x140>)
 8003770:	f006 fd58 	bl	800a224 <HAL_RTC_SetDate>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800377a:	f7ff ff99 	bl	80036b0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800377e:	2300      	movs	r3, #0
 8003780:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003782:	2300      	movs	r3, #0
 8003784:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003786:	2300      	movs	r3, #0
 8003788:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80037a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80037ae:	463b      	mov	r3, r7
 80037b0:	2201      	movs	r2, #1
 80037b2:	4619      	mov	r1, r3
 80037b4:	4811      	ldr	r0, [pc, #68]	@ (80037fc <MX_RTC_Init+0x140>)
 80037b6:	f006 fdb9 	bl	800a32c <HAL_RTC_SetAlarm>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80037c0:	f7ff ff76 	bl	80036b0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80037c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80037ca:	463b      	mov	r3, r7
 80037cc:	2201      	movs	r2, #1
 80037ce:	4619      	mov	r1, r3
 80037d0:	480a      	ldr	r0, [pc, #40]	@ (80037fc <MX_RTC_Init+0x140>)
 80037d2:	f006 fdab 	bl	800a32c <HAL_RTC_SetAlarm>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80037dc:	f7ff ff68 	bl	80036b0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80037e0:	2202      	movs	r2, #2
 80037e2:	2100      	movs	r1, #0
 80037e4:	4805      	ldr	r0, [pc, #20]	@ (80037fc <MX_RTC_Init+0x140>)
 80037e6:	f006 ff6d 	bl	800a6c4 <HAL_RTCEx_SetTimeStamp>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80037f0:	f7ff ff5e 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80037f4:	bf00      	nop
 80037f6:	3740      	adds	r7, #64	@ 0x40
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000818 	.word	0x20000818
 8003800:	40002800 	.word	0x40002800

08003804 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b0a4      	sub	sp, #144	@ 0x90
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	2284      	movs	r2, #132	@ 0x84
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f00a ff66 	bl	800e6e6 <memset>
  if(rtcHandle->Instance==RTC)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a0e      	ldr	r2, [pc, #56]	@ (8003858 <HAL_RTC_MspInit+0x54>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d114      	bne.n	800384e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003824:	2320      	movs	r3, #32
 8003826:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800382c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	4618      	mov	r0, r3
 8003834:	f005 ffe8 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800383e:	f7ff ff37 	bl	80036b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003842:	4b06      	ldr	r3, [pc, #24]	@ (800385c <HAL_RTC_MspInit+0x58>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	4a05      	ldr	r2, [pc, #20]	@ (800385c <HAL_RTC_MspInit+0x58>)
 8003848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800384c:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800384e:	bf00      	nop
 8003850:	3790      	adds	r7, #144	@ 0x90
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40002800 	.word	0x40002800
 800385c:	40023800 	.word	0x40023800

08003860 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <MX_SPI2_Init+0x74>)
 8003866:	4a1c      	ldr	r2, [pc, #112]	@ (80038d8 <MX_SPI2_Init+0x78>)
 8003868:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800386a:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <MX_SPI2_Init+0x74>)
 800386c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003870:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003872:	4b18      	ldr	r3, [pc, #96]	@ (80038d4 <MX_SPI2_Init+0x74>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003878:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <MX_SPI2_Init+0x74>)
 800387a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800387e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003880:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <MX_SPI2_Init+0x74>)
 8003882:	2200      	movs	r2, #0
 8003884:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003886:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <MX_SPI2_Init+0x74>)
 8003888:	2200      	movs	r2, #0
 800388a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800388c:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <MX_SPI2_Init+0x74>)
 800388e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003892:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <MX_SPI2_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <MX_SPI2_Init+0x74>)
 800389c:	2200      	movs	r2, #0
 800389e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <MX_SPI2_Init+0x74>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <MX_SPI2_Init+0x74>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <MX_SPI2_Init+0x74>)
 80038ae:	2207      	movs	r2, #7
 80038b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038b2:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <MX_SPI2_Init+0x74>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <MX_SPI2_Init+0x74>)
 80038ba:	2208      	movs	r2, #8
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038be:	4805      	ldr	r0, [pc, #20]	@ (80038d4 <MX_SPI2_Init+0x74>)
 80038c0:	f006 fff9 	bl	800a8b6 <HAL_SPI_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80038ca:	f7ff fef1 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000838 	.word	0x20000838
 80038d8:	40003800 	.word	0x40003800

080038dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	@ 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_SPI_MspInit+0xb4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d144      	bne.n	8003988 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038fe:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	4a24      	ldr	r2, [pc, #144]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 8003904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003908:	6413      	str	r3, [r2, #64]	@ 0x40
 800390a:	4b22      	ldr	r3, [pc, #136]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003916:	4b1f      	ldr	r3, [pc, #124]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	4a1e      	ldr	r2, [pc, #120]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003920:	6313      	str	r3, [r2, #48]	@ 0x30
 8003922:	4b1c      	ldr	r3, [pc, #112]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392e:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6313      	str	r3, [r2, #48]	@ 0x30
 800393a:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <HAL_SPI_MspInit+0xb8>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003946:	2303      	movs	r3, #3
 8003948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003956:	2305      	movs	r3, #5
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800395a:	f107 0314 	add.w	r3, r7, #20
 800395e:	4619      	mov	r1, r3
 8003960:	480d      	ldr	r0, [pc, #52]	@ (8003998 <HAL_SPI_MspInit+0xbc>)
 8003962:	f003 fdbd 	bl	80074e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003966:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800396a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003978:	2305      	movs	r3, #5
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	4619      	mov	r1, r3
 8003982:	4806      	ldr	r0, [pc, #24]	@ (800399c <HAL_SPI_MspInit+0xc0>)
 8003984:	f003 fdac 	bl	80074e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003988:	bf00      	nop
 800398a:	3728      	adds	r7, #40	@ 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40003800 	.word	0x40003800
 8003994:	40023800 	.word	0x40023800
 8003998:	40022000 	.word	0x40022000
 800399c:	40020400 	.word	0x40020400

080039a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08c      	sub	sp, #48	@ 0x30
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a51      	ldr	r2, [pc, #324]	@ (8003af0 <I2Cx_MspInit+0x150>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d14d      	bne.n	8003a4c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80039b0:	4b50      	ldr	r3, [pc, #320]	@ (8003af4 <I2Cx_MspInit+0x154>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	4a4f      	ldr	r2, [pc, #316]	@ (8003af4 <I2Cx_MspInit+0x154>)
 80039b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80039bc:	4b4d      	ldr	r3, [pc, #308]	@ (8003af4 <I2Cx_MspInit+0x154>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039cc:	2312      	movs	r3, #18
 80039ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039d4:	2302      	movs	r3, #2
 80039d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80039d8:	2304      	movs	r3, #4
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	4619      	mov	r1, r3
 80039e2:	4845      	ldr	r0, [pc, #276]	@ (8003af8 <I2Cx_MspInit+0x158>)
 80039e4:	f003 fd7c 	bl	80074e0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80039e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039ee:	f107 031c 	add.w	r3, r7, #28
 80039f2:	4619      	mov	r1, r3
 80039f4:	4840      	ldr	r0, [pc, #256]	@ (8003af8 <I2Cx_MspInit+0x158>)
 80039f6:	f003 fd73 	bl	80074e0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80039fa:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <I2Cx_MspInit+0x154>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	4a3d      	ldr	r2, [pc, #244]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003a12:	4b38      	ldr	r3, [pc, #224]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a37      	ldr	r2, [pc, #220]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a1c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003a1e:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a34      	ldr	r2, [pc, #208]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a28:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	210f      	movs	r1, #15
 8003a2e:	2048      	movs	r0, #72	@ 0x48
 8003a30:	f002 fef2 	bl	8006818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003a34:	2048      	movs	r0, #72	@ 0x48
 8003a36:	f002 ff0b 	bl	8006850 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	210f      	movs	r1, #15
 8003a3e:	2049      	movs	r0, #73	@ 0x49
 8003a40:	f002 feea 	bl	8006818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003a44:	2049      	movs	r0, #73	@ 0x49
 8003a46:	f002 ff03 	bl	8006850 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003a4a:	e04d      	b.n	8003ae8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a4c:	4b29      	ldr	r3, [pc, #164]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	4a28      	ldr	r2, [pc, #160]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a58:	4b26      	ldr	r3, [pc, #152]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003a64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a68:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003a6a:	2312      	movs	r3, #18
 8003a6c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003a72:	2302      	movs	r3, #2
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003a76:	2304      	movs	r3, #4
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a7a:	f107 031c 	add.w	r3, r7, #28
 8003a7e:	4619      	mov	r1, r3
 8003a80:	481e      	ldr	r0, [pc, #120]	@ (8003afc <I2Cx_MspInit+0x15c>)
 8003a82:	f003 fd2d 	bl	80074e0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	4619      	mov	r1, r3
 8003a92:	481a      	ldr	r0, [pc, #104]	@ (8003afc <I2Cx_MspInit+0x15c>)
 8003a94:	f003 fd24 	bl	80074e0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003a98:	4b16      	ldr	r3, [pc, #88]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	4a15      	ldr	r2, [pc, #84]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003a9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003ab0:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003ab6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003aba:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8003af4 <I2Cx_MspInit+0x154>)
 8003ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ac6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	210f      	movs	r1, #15
 8003acc:	201f      	movs	r0, #31
 8003ace:	f002 fea3 	bl	8006818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003ad2:	201f      	movs	r0, #31
 8003ad4:	f002 febc 	bl	8006850 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	210f      	movs	r1, #15
 8003adc:	2020      	movs	r0, #32
 8003ade:	f002 fe9b 	bl	8006818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003ae2:	2020      	movs	r0, #32
 8003ae4:	f002 feb4 	bl	8006850 <HAL_NVIC_EnableIRQ>
}
 8003ae8:	bf00      	nop
 8003aea:	3730      	adds	r7, #48	@ 0x30
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2000089c 	.word	0x2000089c
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40021c00 	.word	0x40021c00
 8003afc:	40020400 	.word	0x40020400

08003b00 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f004 faa9 	bl	8008060 <HAL_I2C_GetState>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d125      	bne.n	8003b60 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <I2Cx_Init+0x68>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d103      	bne.n	8003b24 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a13      	ldr	r2, [pc, #76]	@ (8003b6c <I2Cx_Init+0x6c>)
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <I2Cx_Init+0x70>)
 8003b28:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a11      	ldr	r2, [pc, #68]	@ (8003b74 <I2Cx_Init+0x74>)
 8003b2e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff23 	bl	80039a0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f003 ff92 	bl	8007a84 <HAL_I2C_Init>
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	2000089c 	.word	0x2000089c
 8003b6c:	40005c00 	.word	0x40005c00
 8003b70:	40005400 	.word	0x40005400
 8003b74:	40912732 	.word	0x40912732

08003b78 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	72fb      	strb	r3, [r7, #11]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	b299      	uxth	r1, r3
 8003b9a:	88f8      	ldrh	r0, [r7, #6]
 8003b9c:	893a      	ldrh	r2, [r7, #8]
 8003b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ba2:	9302      	str	r3, [sp, #8]
 8003ba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	4603      	mov	r3, r0
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f004 f93c 	bl	8007e2c <HAL_I2C_Mem_Read>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f832 	bl	8003c2c <I2Cx_Error>
  }
  return status;    
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08a      	sub	sp, #40	@ 0x28
 8003bd6:	af04      	add	r7, sp, #16
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	4608      	mov	r0, r1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	461a      	mov	r2, r3
 8003be0:	4603      	mov	r3, r0
 8003be2:	72fb      	strb	r3, [r7, #11]
 8003be4:	460b      	mov	r3, r1
 8003be6:	813b      	strh	r3, [r7, #8]
 8003be8:	4613      	mov	r3, r2
 8003bea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	b299      	uxth	r1, r3
 8003bf4:	88f8      	ldrh	r0, [r7, #6]
 8003bf6:	893a      	ldrh	r2, [r7, #8]
 8003bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4603      	mov	r3, r0
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f003 fffb 	bl	8007c04 <HAL_I2C_Mem_Write>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003c18:	7afb      	ldrb	r3, [r7, #11]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f805 	bl	8003c2c <I2Cx_Error>
  }
  return status;
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f003 ffb3 	bl	8007ba4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff5e 	bl	8003b00 <I2Cx_Init>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003c50:	4802      	ldr	r0, [pc, #8]	@ (8003c5c <TS_IO_Init+0x10>)
 8003c52:	f7ff ff55 	bl	8003b00 <I2Cx_Init>
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000089c 	.word	0x2000089c

08003c60 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	71bb      	strb	r3, [r7, #6]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003c72:	79bb      	ldrb	r3, [r7, #6]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	79f9      	ldrb	r1, [r7, #7]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	1d7b      	adds	r3, r7, #5
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2301      	movs	r3, #1
 8003c82:	4803      	ldr	r0, [pc, #12]	@ (8003c90 <TS_IO_Write+0x30>)
 8003c84:	f7ff ffa5 	bl	8003bd2 <I2Cx_WriteMultiple>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	2000089c 	.word	0x2000089c

08003c94 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	460a      	mov	r2, r1
 8003c9e:	71fb      	strb	r3, [r7, #7]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003ca8:	79bb      	ldrb	r3, [r7, #6]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	79f9      	ldrb	r1, [r7, #7]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	f107 030f 	add.w	r3, r7, #15
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4804      	ldr	r0, [pc, #16]	@ (8003ccc <TS_IO_Read+0x38>)
 8003cbc:	f7ff ff5c 	bl	8003b78 <I2Cx_ReadMultiple>

  return read_value;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000089c 	.word	0x2000089c

08003cd0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f002 f8c7 	bl	8005e6c <HAL_Delay>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003cec:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003cee:	2228      	movs	r2, #40	@ 0x28
 8003cf0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003cf2:	4b30      	ldr	r3, [pc, #192]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003cf4:	2209      	movs	r2, #9
 8003cf6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003cfa:	2235      	movs	r2, #53	@ 0x35
 8003cfc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d00:	220b      	movs	r2, #11
 8003d02:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003d04:	4b2b      	ldr	r3, [pc, #172]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d06:	f240 121b 	movw	r2, #283	@ 0x11b
 8003d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003d0c:	4b29      	ldr	r3, [pc, #164]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d0e:	f240 2215 	movw	r2, #533	@ 0x215
 8003d12:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003d14:	4b27      	ldr	r3, [pc, #156]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d16:	f240 121d 	movw	r2, #285	@ 0x11d
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003d1c:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d1e:	f240 2235 	movw	r2, #565	@ 0x235
 8003d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003d24:	2100      	movs	r1, #0
 8003d26:	4823      	ldr	r0, [pc, #140]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d28:	f000 fd30 	bl	800478c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003d2c:	4b21      	ldr	r3, [pc, #132]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d2e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003d32:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003d34:	4b1f      	ldr	r3, [pc, #124]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d36:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003d3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003d54:	4b17      	ldr	r3, [pc, #92]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003d5a:	4b16      	ldr	r3, [pc, #88]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003d60:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003d66:	4b13      	ldr	r3, [pc, #76]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003d6c:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d6e:	4a12      	ldr	r2, [pc, #72]	@ (8003db8 <BSP_LCD_Init+0xd0>)
 8003d70:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003d72:	4810      	ldr	r0, [pc, #64]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d74:	f004 fe84 	bl	8008a80 <HAL_LTDC_GetState>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	480c      	ldr	r0, [pc, #48]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d82:	f000 fc29 	bl	80045d8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003d86:	480b      	ldr	r0, [pc, #44]	@ (8003db4 <BSP_LCD_Init+0xcc>)
 8003d88:	f004 fcaa 	bl	80086e0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d92:	480a      	ldr	r0, [pc, #40]	@ (8003dbc <BSP_LCD_Init+0xd4>)
 8003d94:	f003 fe5c 	bl	8007a50 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	2108      	movs	r1, #8
 8003d9c:	4808      	ldr	r0, [pc, #32]	@ (8003dc0 <BSP_LCD_Init+0xd8>)
 8003d9e:	f003 fe57 	bl	8007a50 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003da2:	f000 fe57 	bl	8004a54 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003da6:	4807      	ldr	r0, [pc, #28]	@ (8003dc4 <BSP_LCD_Init+0xdc>)
 8003da8:	f000 f8d8 	bl	8003f5c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200008f0 	.word	0x200008f0
 8003db8:	40016800 	.word	0x40016800
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40022800 	.word	0x40022800
 8003dc4:	20000034 	.word	0x20000034

08003dc8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <BSP_LCD_GetXSize+0x20>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a06      	ldr	r2, [pc, #24]	@ (8003dec <BSP_LCD_GetXSize+0x24>)
 8003dd2:	2134      	movs	r1, #52	@ 0x34
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	3360      	adds	r3, #96	@ 0x60
 8003ddc:	681b      	ldr	r3, [r3, #0]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	200009d8 	.word	0x200009d8
 8003dec:	200008f0 	.word	0x200008f0

08003df0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003df4:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <BSP_LCD_GetYSize+0x20>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a06      	ldr	r2, [pc, #24]	@ (8003e14 <BSP_LCD_GetYSize+0x24>)
 8003dfa:	2134      	movs	r1, #52	@ 0x34
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3364      	adds	r3, #100	@ 0x64
 8003e04:	681b      	ldr	r3, [r3, #0]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	200009d8 	.word	0x200009d8
 8003e14:	200008f0 	.word	0x200008f0

08003e18 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b090      	sub	sp, #64	@ 0x40
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003e28:	f7ff ffce 	bl	8003dc8 <BSP_LCD_GetXSize>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003e34:	f7ff ffdc 	bl	8003df0 <BSP_LCD_GetYSize>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003e44:	23ff      	movs	r3, #255	@ 0xff
 8003e46:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003e5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003e64:	2307      	movs	r3, #7
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003e68:	f7ff ffae 	bl	8003dc8 <BSP_LCD_GetXSize>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003e70:	f7ff ffbe 	bl	8003df0 <BSP_LCD_GetYSize>
 8003e74:	4603      	mov	r3, r0
 8003e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	f107 030c 	add.w	r3, r7, #12
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4812      	ldr	r0, [pc, #72]	@ (8003ecc <BSP_LCD_LayerDefaultInit+0xb4>)
 8003e82:	f004 fdbf 	bl	8008a04 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	4911      	ldr	r1, [pc, #68]	@ (8003ed0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	3304      	adds	r3, #4
 8003e96:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	490c      	ldr	r1, [pc, #48]	@ (8003ed0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3308      	adds	r3, #8
 8003eac:	4a09      	ldr	r2, [pc, #36]	@ (8003ed4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003eae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	4907      	ldr	r1, [pc, #28]	@ (8003ed0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003ec2:	601a      	str	r2, [r3, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3740      	adds	r7, #64	@ 0x40
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200008f0 	.word	0x200008f0
 8003ed0:	200009dc 	.word	0x200009dc
 8003ed4:	20000034 	.word	0x20000034

08003ed8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003ee0:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <BSP_LCD_SelectLayer+0x1c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
} 
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	200009d8 	.word	0x200009d8

08003ef8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <BSP_LCD_SetTextColor+0x28>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4907      	ldr	r1, [pc, #28]	@ (8003f24 <BSP_LCD_SetTextColor+0x2c>)
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	200009d8 	.word	0x200009d8
 8003f24:	200009dc 	.word	0x200009dc

08003f28 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003f30:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <BSP_LCD_SetBackColor+0x2c>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4908      	ldr	r1, [pc, #32]	@ (8003f58 <BSP_LCD_SetBackColor+0x30>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	3304      	adds	r3, #4
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	200009d8 	.word	0x200009d8
 8003f58:	200009dc 	.word	0x200009dc

08003f5c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003f64:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <BSP_LCD_SetFont+0x2c>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4908      	ldr	r1, [pc, #32]	@ (8003f8c <BSP_LCD_SetFont+0x30>)
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3308      	adds	r3, #8
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	200009d8 	.word	0x200009d8
 8003f8c:	200009dc 	.word	0x200009dc

08003f90 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003f98:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <BSP_LCD_Clear+0x48>)
 8003f9a:	681c      	ldr	r4, [r3, #0]
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd8 <BSP_LCD_Clear+0x48>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8003fdc <BSP_LCD_Clear+0x4c>)
 8003fa2:	2134      	movs	r1, #52	@ 0x34
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	335c      	adds	r3, #92	@ 0x5c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461e      	mov	r6, r3
 8003fb0:	f7ff ff0a 	bl	8003dc8 <BSP_LCD_GetXSize>
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	f7ff ff1b 	bl	8003df0 <BSP_LCD_GetYSize>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	462a      	mov	r2, r5
 8003fc8:	4631      	mov	r1, r6
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f000 fcb2 	bl	8004934 <LL_FillBuffer>
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd8:	200009d8 	.word	0x200009d8
 8003fdc:	200008f0 	.word	0x200008f0

08003fe0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	80fb      	strh	r3, [r7, #6]
 8003fea:	460b      	mov	r3, r1
 8003fec:	80bb      	strh	r3, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <BSP_LCD_DisplayChar+0x80>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	491b      	ldr	r1, [pc, #108]	@ (8004064 <BSP_LCD_DisplayChar+0x84>)
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	3308      	adds	r3, #8
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800400e:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <BSP_LCD_DisplayChar+0x80>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4c14      	ldr	r4, [pc, #80]	@ (8004064 <BSP_LCD_DisplayChar+0x84>)
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4423      	add	r3, r4
 800401e:	3308      	adds	r3, #8
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004024:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004028:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <BSP_LCD_DisplayChar+0x80>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4c0d      	ldr	r4, [pc, #52]	@ (8004064 <BSP_LCD_DisplayChar+0x84>)
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4423      	add	r3, r4
 8004038:	3308      	adds	r3, #8
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	889b      	ldrh	r3, [r3, #4]
 800403e:	3307      	adds	r3, #7
 8004040:	2b00      	cmp	r3, #0
 8004042:	da00      	bge.n	8004046 <BSP_LCD_DisplayChar+0x66>
 8004044:	3307      	adds	r3, #7
 8004046:	10db      	asrs	r3, r3, #3
 8004048:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800404c:	18ca      	adds	r2, r1, r3
 800404e:	88b9      	ldrh	r1, [r7, #4]
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fbb6 	bl	80047c4 <DrawChar>
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bd90      	pop	{r4, r7, pc}
 8004060:	200009d8 	.word	0x200009d8
 8004064:	200009dc 	.word	0x200009dc

08004068 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004068:	b5b0      	push	{r4, r5, r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	60ba      	str	r2, [r7, #8]
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	81fb      	strh	r3, [r7, #14]
 8004076:	460b      	mov	r3, r1
 8004078:	81bb      	strh	r3, [r7, #12]
 800407a:	4613      	mov	r3, r2
 800407c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800407e:	2301      	movs	r3, #1
 8004080:	83fb      	strh	r3, [r7, #30]
 8004082:	2300      	movs	r3, #0
 8004084:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004092:	e002      	b.n	800409a <BSP_LCD_DisplayStringAt+0x32>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	3301      	adds	r3, #1
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	617a      	str	r2, [r7, #20]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f6      	bne.n	8004094 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80040a6:	f7ff fe8f 	bl	8003dc8 <BSP_LCD_GetXSize>
 80040aa:	4601      	mov	r1, r0
 80040ac:	4b50      	ldr	r3, [pc, #320]	@ (80041f0 <BSP_LCD_DisplayStringAt+0x188>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4850      	ldr	r0, [pc, #320]	@ (80041f4 <BSP_LCD_DisplayStringAt+0x18c>)
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4403      	add	r3, r0
 80040bc:	3308      	adds	r3, #8
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	889b      	ldrh	r3, [r3, #4]
 80040c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d01c      	beq.n	8004108 <BSP_LCD_DisplayStringAt+0xa0>
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	dc33      	bgt.n	800413a <BSP_LCD_DisplayStringAt+0xd2>
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d002      	beq.n	80040dc <BSP_LCD_DisplayStringAt+0x74>
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d019      	beq.n	800410e <BSP_LCD_DisplayStringAt+0xa6>
 80040da:	e02e      	b.n	800413a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad1      	subs	r1, r2, r3
 80040e2:	4b43      	ldr	r3, [pc, #268]	@ (80041f0 <BSP_LCD_DisplayStringAt+0x188>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4843      	ldr	r0, [pc, #268]	@ (80041f4 <BSP_LCD_DisplayStringAt+0x18c>)
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4403      	add	r3, r0
 80040f2:	3308      	adds	r3, #8
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	889b      	ldrh	r3, [r3, #4]
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	89fb      	ldrh	r3, [r7, #14]
 8004102:	4413      	add	r3, r2
 8004104:	83fb      	strh	r3, [r7, #30]
      break;
 8004106:	e01b      	b.n	8004140 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004108:	89fb      	ldrh	r3, [r7, #14]
 800410a:	83fb      	strh	r3, [r7, #30]
      break;
 800410c:	e018      	b.n	8004140 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	b299      	uxth	r1, r3
 8004116:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <BSP_LCD_DisplayStringAt+0x188>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4836      	ldr	r0, [pc, #216]	@ (80041f4 <BSP_LCD_DisplayStringAt+0x18c>)
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4403      	add	r3, r0
 8004126:	3308      	adds	r3, #8
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	889b      	ldrh	r3, [r3, #4]
 800412c:	fb11 f303 	smulbb	r3, r1, r3
 8004130:	b29a      	uxth	r2, r3
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	83fb      	strh	r3, [r7, #30]
      break;
 8004138:	e002      	b.n	8004140 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800413a:	89fb      	ldrh	r3, [r7, #14]
 800413c:	83fb      	strh	r3, [r7, #30]
      break;
 800413e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004140:	8bfb      	ldrh	r3, [r7, #30]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <BSP_LCD_DisplayStringAt+0xe6>
 8004146:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da1d      	bge.n	800418a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004152:	e01a      	b.n	800418a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	89b9      	ldrh	r1, [r7, #12]
 800415a:	8bfb      	ldrh	r3, [r7, #30]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff ff3f 	bl	8003fe0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004162:	4b23      	ldr	r3, [pc, #140]	@ (80041f0 <BSP_LCD_DisplayStringAt+0x188>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4923      	ldr	r1, [pc, #140]	@ (80041f4 <BSP_LCD_DisplayStringAt+0x18c>)
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	3308      	adds	r3, #8
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	889a      	ldrh	r2, [r3, #4]
 8004178:	8bfb      	ldrh	r3, [r7, #30]
 800417a:	4413      	add	r3, r2
 800417c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3301      	adds	r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
    i++;
 8004184:	8bbb      	ldrh	r3, [r7, #28]
 8004186:	3301      	adds	r3, #1
 8004188:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2dc      	uxtb	r4, r3
 8004198:	f7ff fe16 	bl	8003dc8 <BSP_LCD_GetXSize>
 800419c:	8bb9      	ldrh	r1, [r7, #28]
 800419e:	4b14      	ldr	r3, [pc, #80]	@ (80041f0 <BSP_LCD_DisplayStringAt+0x188>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4d14      	ldr	r5, [pc, #80]	@ (80041f4 <BSP_LCD_DisplayStringAt+0x18c>)
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	442b      	add	r3, r5
 80041ae:	3308      	adds	r3, #8
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	889b      	ldrh	r3, [r3, #4]
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	1ac3      	subs	r3, r0, r3
 80041ba:	b299      	uxth	r1, r3
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <BSP_LCD_DisplayStringAt+0x188>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	480c      	ldr	r0, [pc, #48]	@ (80041f4 <BSP_LCD_DisplayStringAt+0x18c>)
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4403      	add	r3, r0
 80041cc:	3308      	adds	r3, #8
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	889b      	ldrh	r3, [r3, #4]
 80041d2:	4299      	cmp	r1, r3
 80041d4:	bf2c      	ite	cs
 80041d6:	2301      	movcs	r3, #1
 80041d8:	2300      	movcc	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4023      	ands	r3, r4
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1b7      	bne.n	8004154 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bdb0      	pop	{r4, r5, r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200009d8 	.word	0x200009d8
 80041f4:	200009dc 	.word	0x200009dc

080041f8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80041f8:	b5b0      	push	{r4, r5, r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
 8004202:	460b      	mov	r3, r1
 8004204:	80bb      	strh	r3, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800420e:	4b26      	ldr	r3, [pc, #152]	@ (80042a8 <BSP_LCD_DrawHLine+0xb0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <BSP_LCD_DrawHLine+0xb4>)
 8004214:	2134      	movs	r1, #52	@ 0x34
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3348      	adds	r3, #72	@ 0x48
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d114      	bne.n	800424e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004224:	4b20      	ldr	r3, [pc, #128]	@ (80042a8 <BSP_LCD_DrawHLine+0xb0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a20      	ldr	r2, [pc, #128]	@ (80042ac <BSP_LCD_DrawHLine+0xb4>)
 800422a:	2134      	movs	r1, #52	@ 0x34
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	335c      	adds	r3, #92	@ 0x5c
 8004234:	681c      	ldr	r4, [r3, #0]
 8004236:	f7ff fdc7 	bl	8003dc8 <BSP_LCD_GetXSize>
 800423a:	4602      	mov	r2, r0
 800423c:	88bb      	ldrh	r3, [r7, #4]
 800423e:	fb03 f202 	mul.w	r2, r3, r2
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	4413      	add	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4423      	add	r3, r4
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e013      	b.n	8004276 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800424e:	4b16      	ldr	r3, [pc, #88]	@ (80042a8 <BSP_LCD_DrawHLine+0xb0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <BSP_LCD_DrawHLine+0xb4>)
 8004254:	2134      	movs	r1, #52	@ 0x34
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	335c      	adds	r3, #92	@ 0x5c
 800425e:	681c      	ldr	r4, [r3, #0]
 8004260:	f7ff fdb2 	bl	8003dc8 <BSP_LCD_GetXSize>
 8004264:	4602      	mov	r2, r0
 8004266:	88bb      	ldrh	r3, [r7, #4]
 8004268:	fb03 f202 	mul.w	r2, r3, r2
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4423      	add	r3, r4
 8004274:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004276:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <BSP_LCD_DrawHLine+0xb0>)
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	887c      	ldrh	r4, [r7, #2]
 800427e:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <BSP_LCD_DrawHLine+0xb0>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4d0b      	ldr	r5, [pc, #44]	@ (80042b0 <BSP_LCD_DrawHLine+0xb8>)
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	442b      	add	r3, r5
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	2301      	movs	r3, #1
 8004298:	4622      	mov	r2, r4
 800429a:	f000 fb4b 	bl	8004934 <LL_FillBuffer>
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bdb0      	pop	{r4, r5, r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200009d8 	.word	0x200009d8
 80042ac:	200008f0 	.word	0x200008f0
 80042b0:	200009dc 	.word	0x200009dc

080042b4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	603a      	str	r2, [r7, #0]
 80042be:	80fb      	strh	r3, [r7, #6]
 80042c0:	460b      	mov	r3, r1
 80042c2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80042c4:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <BSP_LCD_DrawPixel+0x88>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <BSP_LCD_DrawPixel+0x8c>)
 80042ca:	2134      	movs	r1, #52	@ 0x34
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3348      	adds	r3, #72	@ 0x48
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d116      	bne.n	8004308 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <BSP_LCD_DrawPixel+0x88>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a18      	ldr	r2, [pc, #96]	@ (8004340 <BSP_LCD_DrawPixel+0x8c>)
 80042e0:	2134      	movs	r1, #52	@ 0x34
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	335c      	adds	r3, #92	@ 0x5c
 80042ea:	681c      	ldr	r4, [r3, #0]
 80042ec:	88bd      	ldrh	r5, [r7, #4]
 80042ee:	f7ff fd6b 	bl	8003dc8 <BSP_LCD_GetXSize>
 80042f2:	4603      	mov	r3, r0
 80042f4:	fb03 f205 	mul.w	r2, r3, r5
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	4413      	add	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4423      	add	r3, r4
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	b292      	uxth	r2, r2
 8004304:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004306:	e015      	b.n	8004334 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <BSP_LCD_DrawPixel+0x88>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0c      	ldr	r2, [pc, #48]	@ (8004340 <BSP_LCD_DrawPixel+0x8c>)
 800430e:	2134      	movs	r1, #52	@ 0x34
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	335c      	adds	r3, #92	@ 0x5c
 8004318:	681c      	ldr	r4, [r3, #0]
 800431a:	88bd      	ldrh	r5, [r7, #4]
 800431c:	f7ff fd54 	bl	8003dc8 <BSP_LCD_GetXSize>
 8004320:	4603      	mov	r3, r0
 8004322:	fb03 f205 	mul.w	r2, r3, r5
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4423      	add	r3, r4
 800432e:	461a      	mov	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6013      	str	r3, [r2, #0]
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bdb0      	pop	{r4, r5, r7, pc}
 800433c:	200009d8 	.word	0x200009d8
 8004340:	200008f0 	.word	0x200008f0

08004344 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8004344:	b590      	push	{r4, r7, lr}
 8004346:	b08b      	sub	sp, #44	@ 0x2c
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	330a      	adds	r3, #10
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	330b      	adds	r3, #11
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	441a      	add	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	330c      	adds	r3, #12
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	441a      	add	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	330d      	adds	r3, #13
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	4413      	add	r3, r2
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3312      	adds	r3, #18
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3313      	adds	r3, #19
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3314      	adds	r3, #20
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	441a      	add	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3315      	adds	r3, #21
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	4413      	add	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3316      	adds	r3, #22
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3317      	adds	r3, #23
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	441a      	add	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3318      	adds	r3, #24
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	441a      	add	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3319      	adds	r3, #25
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	4413      	add	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	331c      	adds	r3, #28
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	331d      	adds	r3, #29
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	4413      	add	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80043f0:	4b2b      	ldr	r3, [pc, #172]	@ (80044a0 <BSP_LCD_DrawBitmap+0x15c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2b      	ldr	r2, [pc, #172]	@ (80044a4 <BSP_LCD_DrawBitmap+0x160>)
 80043f6:	2134      	movs	r1, #52	@ 0x34
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	335c      	adds	r3, #92	@ 0x5c
 8004400:	681c      	ldr	r4, [r3, #0]
 8004402:	f7ff fce1 	bl	8003dc8 <BSP_LCD_GetXSize>
 8004406:	4602      	mov	r2, r0
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	fb03 f202 	mul.w	r2, r3, r2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4423      	add	r3, r4
 8004416:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	3b20      	subs	r3, #32
 800441c:	2b07      	cmp	r3, #7
 800441e:	d802      	bhi.n	8004426 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e008      	b.n	8004438 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3b10      	subs	r3, #16
 800442a:	2b07      	cmp	r3, #7
 800442c:	d802      	bhi.n	8004434 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800442e:	2302      	movs	r3, #2
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e001      	b.n	8004438 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8004434:	2301      	movs	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	3b01      	subs	r3, #1
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	08d2      	lsrs	r2, r2, #3
 8004446:	fb03 f202 	mul.w	r2, r3, r2
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	4413      	add	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8004454:	2300      	movs	r3, #0
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
 8004458:	e018      	b.n	800448c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800445a:	6a39      	ldr	r1, [r7, #32]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fab3 	bl	80049cc <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8004466:	f7ff fcaf 	bl	8003dc8 <BSP_LCD_GetXSize>
 800446a:	4603      	mov	r3, r0
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	4413      	add	r3, r2
 8004472:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	08db      	lsrs	r3, r3, #3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	425b      	negs	r3, r3
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	3301      	adds	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
 800448c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	429a      	cmp	r2, r3
 8004492:	d3e2      	bcc.n	800445a <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	372c      	adds	r7, #44	@ 0x2c
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	bf00      	nop
 80044a0:	200009d8 	.word	0x200009d8
 80044a4:	200008f0 	.word	0x200008f0

080044a8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80044a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af02      	add	r7, sp, #8
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	461a      	mov	r2, r3
 80044b8:	4623      	mov	r3, r4
 80044ba:	80fb      	strh	r3, [r7, #6]
 80044bc:	4603      	mov	r3, r0
 80044be:	80bb      	strh	r3, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
 80044c4:	4613      	mov	r3, r2
 80044c6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80044cc:	4b30      	ldr	r3, [pc, #192]	@ (8004590 <BSP_LCD_FillRect+0xe8>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4930      	ldr	r1, [pc, #192]	@ (8004594 <BSP_LCD_FillRect+0xec>)
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fd0a 	bl	8003ef8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80044e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004590 <BSP_LCD_FillRect+0xe8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004598 <BSP_LCD_FillRect+0xf0>)
 80044ea:	2134      	movs	r1, #52	@ 0x34
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	3348      	adds	r3, #72	@ 0x48
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d114      	bne.n	8004524 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80044fa:	4b25      	ldr	r3, [pc, #148]	@ (8004590 <BSP_LCD_FillRect+0xe8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a26      	ldr	r2, [pc, #152]	@ (8004598 <BSP_LCD_FillRect+0xf0>)
 8004500:	2134      	movs	r1, #52	@ 0x34
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	335c      	adds	r3, #92	@ 0x5c
 800450a:	681c      	ldr	r4, [r3, #0]
 800450c:	f7ff fc5c 	bl	8003dc8 <BSP_LCD_GetXSize>
 8004510:	4602      	mov	r2, r0
 8004512:	88bb      	ldrh	r3, [r7, #4]
 8004514:	fb03 f202 	mul.w	r2, r3, r2
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	4413      	add	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4423      	add	r3, r4
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e013      	b.n	800454c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004524:	4b1a      	ldr	r3, [pc, #104]	@ (8004590 <BSP_LCD_FillRect+0xe8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1b      	ldr	r2, [pc, #108]	@ (8004598 <BSP_LCD_FillRect+0xf0>)
 800452a:	2134      	movs	r1, #52	@ 0x34
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	335c      	adds	r3, #92	@ 0x5c
 8004534:	681c      	ldr	r4, [r3, #0]
 8004536:	f7ff fc47 	bl	8003dc8 <BSP_LCD_GetXSize>
 800453a:	4602      	mov	r2, r0
 800453c:	88bb      	ldrh	r3, [r7, #4]
 800453e:	fb03 f202 	mul.w	r2, r3, r2
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4423      	add	r3, r4
 800454a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800454c:	4b10      	ldr	r3, [pc, #64]	@ (8004590 <BSP_LCD_FillRect+0xe8>)
 800454e:	681c      	ldr	r4, [r3, #0]
 8004550:	68fd      	ldr	r5, [r7, #12]
 8004552:	887e      	ldrh	r6, [r7, #2]
 8004554:	f8b7 8000 	ldrh.w	r8, [r7]
 8004558:	f7ff fc36 	bl	8003dc8 <BSP_LCD_GetXSize>
 800455c:	4602      	mov	r2, r0
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	1ad1      	subs	r1, r2, r3
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <BSP_LCD_FillRect+0xe8>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	480b      	ldr	r0, [pc, #44]	@ (8004594 <BSP_LCD_FillRect+0xec>)
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4403      	add	r3, r0
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	9100      	str	r1, [sp, #0]
 8004578:	4643      	mov	r3, r8
 800457a:	4632      	mov	r2, r6
 800457c:	4629      	mov	r1, r5
 800457e:	4620      	mov	r0, r4
 8004580:	f000 f9d8 	bl	8004934 <LL_FillBuffer>
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800458e:	bf00      	nop
 8004590:	200009d8 	.word	0x200009d8
 8004594:	200009dc 	.word	0x200009dc
 8004598:	200008f0 	.word	0x200008f0

0800459c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80045a0:	4b0a      	ldr	r3, [pc, #40]	@ (80045cc <BSP_LCD_DisplayOn+0x30>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <BSP_LCD_DisplayOn+0x30>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80045b0:	2201      	movs	r2, #1
 80045b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045b6:	4806      	ldr	r0, [pc, #24]	@ (80045d0 <BSP_LCD_DisplayOn+0x34>)
 80045b8:	f003 fa4a 	bl	8007a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80045bc:	2201      	movs	r2, #1
 80045be:	2108      	movs	r1, #8
 80045c0:	4804      	ldr	r0, [pc, #16]	@ (80045d4 <BSP_LCD_DisplayOn+0x38>)
 80045c2:	f003 fa45 	bl	8007a50 <HAL_GPIO_WritePin>
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	200008f0 	.word	0x200008f0
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40022800 	.word	0x40022800

080045d8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b090      	sub	sp, #64	@ 0x40
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80045e2:	4b64      	ldr	r3, [pc, #400]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	4a63      	ldr	r2, [pc, #396]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 80045e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ee:	4b61      	ldr	r3, [pc, #388]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80045fa:	4b5e      	ldr	r3, [pc, #376]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	4a5d      	ldr	r2, [pc, #372]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004604:	6313      	str	r3, [r2, #48]	@ 0x30
 8004606:	4b5b      	ldr	r3, [pc, #364]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004612:	4b58      	ldr	r3, [pc, #352]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	4a57      	ldr	r2, [pc, #348]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004618:	f043 0310 	orr.w	r3, r3, #16
 800461c:	6313      	str	r3, [r2, #48]	@ 0x30
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	623b      	str	r3, [r7, #32]
 8004628:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800462a:	4b52      	ldr	r3, [pc, #328]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	4a51      	ldr	r2, [pc, #324]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004634:	6313      	str	r3, [r2, #48]	@ 0x30
 8004636:	4b4f      	ldr	r3, [pc, #316]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004642:	4b4c      	ldr	r3, [pc, #304]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	4a4b      	ldr	r2, [pc, #300]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464c:	6313      	str	r3, [r2, #48]	@ 0x30
 800464e:	4b49      	ldr	r3, [pc, #292]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800465a:	4b46      	ldr	r3, [pc, #280]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	4a45      	ldr	r2, [pc, #276]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004660:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004664:	6313      	str	r3, [r2, #48]	@ 0x30
 8004666:	4b43      	ldr	r3, [pc, #268]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004672:	4b40      	ldr	r3, [pc, #256]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	4a3f      	ldr	r2, [pc, #252]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004678:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800467c:	6313      	str	r3, [r2, #48]	@ 0x30
 800467e:	4b3d      	ldr	r3, [pc, #244]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800468a:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	4a39      	ldr	r2, [pc, #228]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004694:	6313      	str	r3, [r2, #48]	@ 0x30
 8004696:	4b37      	ldr	r3, [pc, #220]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80046a2:	4b34      	ldr	r3, [pc, #208]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 80046a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ae:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <BSP_LCD_MspInit+0x19c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80046ba:	2310      	movs	r3, #16
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80046c6:	2302      	movs	r3, #2
 80046c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80046ca:	230e      	movs	r3, #14
 80046cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80046ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046d2:	4619      	mov	r1, r3
 80046d4:	4828      	ldr	r0, [pc, #160]	@ (8004778 <BSP_LCD_MspInit+0x1a0>)
 80046d6:	f002 ff03 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80046da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046e0:	2302      	movs	r3, #2
 80046e2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80046e4:	2309      	movs	r3, #9
 80046e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80046e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046ec:	4619      	mov	r1, r3
 80046ee:	4823      	ldr	r0, [pc, #140]	@ (800477c <BSP_LCD_MspInit+0x1a4>)
 80046f0:	f002 fef6 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80046f4:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80046f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046fa:	2302      	movs	r3, #2
 80046fc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046fe:	230e      	movs	r3, #14
 8004700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004702:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004706:	4619      	mov	r1, r3
 8004708:	481d      	ldr	r0, [pc, #116]	@ (8004780 <BSP_LCD_MspInit+0x1a8>)
 800470a:	f002 fee9 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800470e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004712:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004718:	230e      	movs	r3, #14
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800471c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004720:	4619      	mov	r1, r3
 8004722:	4818      	ldr	r0, [pc, #96]	@ (8004784 <BSP_LCD_MspInit+0x1ac>)
 8004724:	f002 fedc 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004728:	23f7      	movs	r3, #247	@ 0xf7
 800472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004730:	230e      	movs	r3, #14
 8004732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004738:	4619      	mov	r1, r3
 800473a:	4813      	ldr	r0, [pc, #76]	@ (8004788 <BSP_LCD_MspInit+0x1b0>)
 800473c:	f002 fed0 	bl	80074e0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004746:	2301      	movs	r3, #1
 8004748:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800474a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800474e:	4619      	mov	r1, r3
 8004750:	480b      	ldr	r0, [pc, #44]	@ (8004780 <BSP_LCD_MspInit+0x1a8>)
 8004752:	f002 fec5 	bl	80074e0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004756:	2308      	movs	r3, #8
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800475a:	2301      	movs	r3, #1
 800475c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800475e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004762:	4619      	mov	r1, r3
 8004764:	4808      	ldr	r0, [pc, #32]	@ (8004788 <BSP_LCD_MspInit+0x1b0>)
 8004766:	f002 febb 	bl	80074e0 <HAL_GPIO_Init>
}
 800476a:	bf00      	nop
 800476c:	3740      	adds	r7, #64	@ 0x40
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	40021000 	.word	0x40021000
 800477c:	40021800 	.word	0x40021800
 8004780:	40022000 	.word	0x40022000
 8004784:	40022400 	.word	0x40022400
 8004788:	40022800 	.word	0x40022800

0800478c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004796:	4b0a      	ldr	r3, [pc, #40]	@ (80047c0 <BSP_LCD_ClockConfig+0x34>)
 8004798:	2208      	movs	r2, #8
 800479a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800479c:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <BSP_LCD_ClockConfig+0x34>)
 800479e:	22c0      	movs	r2, #192	@ 0xc0
 80047a0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80047a2:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <BSP_LCD_ClockConfig+0x34>)
 80047a4:	2205      	movs	r2, #5
 80047a6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <BSP_LCD_ClockConfig+0x34>)
 80047aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80047b0:	4803      	ldr	r0, [pc, #12]	@ (80047c0 <BSP_LCD_ClockConfig+0x34>)
 80047b2:	f005 f829 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	200009f4 	.word	0x200009f4

080047c4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	603a      	str	r2, [r7, #0]
 80047ce:	80fb      	strh	r3, [r7, #6]
 80047d0:	460b      	mov	r3, r1
 80047d2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80047dc:	4b53      	ldr	r3, [pc, #332]	@ (800492c <DrawChar+0x168>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4953      	ldr	r1, [pc, #332]	@ (8004930 <DrawChar+0x16c>)
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	3308      	adds	r3, #8
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	88db      	ldrh	r3, [r3, #6]
 80047f2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80047f4:	4b4d      	ldr	r3, [pc, #308]	@ (800492c <DrawChar+0x168>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	494d      	ldr	r1, [pc, #308]	@ (8004930 <DrawChar+0x16c>)
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	3308      	adds	r3, #8
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	889b      	ldrh	r3, [r3, #4]
 800480a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800480c:	8a3b      	ldrh	r3, [r7, #16]
 800480e:	3307      	adds	r3, #7
 8004810:	2b00      	cmp	r3, #0
 8004812:	da00      	bge.n	8004816 <DrawChar+0x52>
 8004814:	3307      	adds	r3, #7
 8004816:	10db      	asrs	r3, r3, #3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	b2da      	uxtb	r2, r3
 800481e:	8a3b      	ldrh	r3, [r7, #16]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e076      	b.n	800491a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800482c:	8a3b      	ldrh	r3, [r7, #16]
 800482e:	3307      	adds	r3, #7
 8004830:	2b00      	cmp	r3, #0
 8004832:	da00      	bge.n	8004836 <DrawChar+0x72>
 8004834:	3307      	adds	r3, #7
 8004836:	10db      	asrs	r3, r3, #3
 8004838:	461a      	mov	r2, r3
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	4413      	add	r3, r2
 8004844:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004846:	8a3b      	ldrh	r3, [r7, #16]
 8004848:	3307      	adds	r3, #7
 800484a:	2b00      	cmp	r3, #0
 800484c:	da00      	bge.n	8004850 <DrawChar+0x8c>
 800484e:	3307      	adds	r3, #7
 8004850:	10db      	asrs	r3, r3, #3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d002      	beq.n	800485c <DrawChar+0x98>
 8004856:	2b02      	cmp	r3, #2
 8004858:	d004      	beq.n	8004864 <DrawChar+0xa0>
 800485a:	e00c      	b.n	8004876 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	617b      	str	r3, [r7, #20]
      break;
 8004862:	e016      	b.n	8004892 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	3201      	adds	r2, #1
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
      break;
 8004874:	e00d      	b.n	8004892 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	041a      	lsls	r2, r3, #16
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	3301      	adds	r3, #1
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	4313      	orrs	r3, r2
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	3202      	adds	r2, #2
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
      break;
 8004890:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e036      	b.n	8004906 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004898:	8a3a      	ldrh	r2, [r7, #16]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1ad2      	subs	r2, r2, r3
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	4413      	add	r3, r2
 80048a2:	3b01      	subs	r3, #1
 80048a4:	2201      	movs	r2, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	4413      	add	r3, r2
 80048bc:	b298      	uxth	r0, r3
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <DrawChar+0x168>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	491b      	ldr	r1, [pc, #108]	@ (8004930 <DrawChar+0x16c>)
 80048c4:	4613      	mov	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	88bb      	ldrh	r3, [r7, #4]
 80048d2:	4619      	mov	r1, r3
 80048d4:	f7ff fcee 	bl	80042b4 <BSP_LCD_DrawPixel>
 80048d8:	e012      	b.n	8004900 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	4413      	add	r3, r2
 80048e2:	b298      	uxth	r0, r3
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <DrawChar+0x168>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4911      	ldr	r1, [pc, #68]	@ (8004930 <DrawChar+0x16c>)
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3304      	adds	r3, #4
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	88bb      	ldrh	r3, [r7, #4]
 80048fa:	4619      	mov	r1, r3
 80048fc:	f7ff fcda 	bl	80042b4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	3301      	adds	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	8a3b      	ldrh	r3, [r7, #16]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3c4      	bcc.n	8004898 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800490e:	88bb      	ldrh	r3, [r7, #4]
 8004910:	3301      	adds	r3, #1
 8004912:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3301      	adds	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	8a7b      	ldrh	r3, [r7, #18]
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	429a      	cmp	r2, r3
 8004920:	d384      	bcc.n	800482c <DrawChar+0x68>
  }
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	200009d8 	.word	0x200009d8
 8004930:	200009dc 	.word	0x200009dc

08004934 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004942:	4b1e      	ldr	r3, [pc, #120]	@ (80049bc <LL_FillBuffer+0x88>)
 8004944:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004948:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <LL_FillBuffer+0x8c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <LL_FillBuffer+0x90>)
 8004950:	2134      	movs	r1, #52	@ 0x34
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	3348      	adds	r3, #72	@ 0x48
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d103      	bne.n	8004968 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004960:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <LL_FillBuffer+0x88>)
 8004962:	2202      	movs	r2, #2
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	e002      	b.n	800496e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004968:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <LL_FillBuffer+0x88>)
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800496e:	4a13      	ldr	r2, [pc, #76]	@ (80049bc <LL_FillBuffer+0x88>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <LL_FillBuffer+0x88>)
 8004976:	4a14      	ldr	r2, [pc, #80]	@ (80049c8 <LL_FillBuffer+0x94>)
 8004978:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800497a:	4810      	ldr	r0, [pc, #64]	@ (80049bc <LL_FillBuffer+0x88>)
 800497c:	f002 fa14 	bl	8006da8 <HAL_DMA2D_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d115      	bne.n	80049b2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	480c      	ldr	r0, [pc, #48]	@ (80049bc <LL_FillBuffer+0x88>)
 800498a:	f002 fc7b 	bl	8007284 <HAL_DMA2D_ConfigLayer>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10e      	bne.n	80049b2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69f9      	ldr	r1, [r7, #28]
 800499e:	4807      	ldr	r0, [pc, #28]	@ (80049bc <LL_FillBuffer+0x88>)
 80049a0:	f002 fa4c 	bl	8006e3c <HAL_DMA2D_Start>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80049aa:	210a      	movs	r1, #10
 80049ac:	4803      	ldr	r0, [pc, #12]	@ (80049bc <LL_FillBuffer+0x88>)
 80049ae:	f002 fa70 	bl	8006e92 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000998 	.word	0x20000998
 80049c0:	200009d8 	.word	0x200009d8
 80049c4:	200008f0 	.word	0x200008f0
 80049c8:	4002b000 	.word	0x4002b000

080049cc <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80049da:	4b1c      	ldr	r3, [pc, #112]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 80049dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80049e0:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80049e2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80049e8:	4b18      	ldr	r3, [pc, #96]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80049ee:	4b17      	ldr	r3, [pc, #92]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80049f4:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 80049f6:	22ff      	movs	r2, #255	@ 0xff
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80049fa:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004a00:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004a06:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 8004a08:	4a11      	ldr	r2, [pc, #68]	@ (8004a50 <LL_ConvertLineToARGB8888+0x84>)
 8004a0a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004a0c:	480f      	ldr	r0, [pc, #60]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 8004a0e:	f002 f9cb 	bl	8006da8 <HAL_DMA2D_Init>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d115      	bne.n	8004a44 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004a18:	2101      	movs	r1, #1
 8004a1a:	480c      	ldr	r0, [pc, #48]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 8004a1c:	f002 fc32 	bl	8007284 <HAL_DMA2D_ConfigLayer>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10e      	bne.n	8004a44 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4806      	ldr	r0, [pc, #24]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 8004a32:	f002 fa03 	bl	8006e3c <HAL_DMA2D_Start>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004a3c:	210a      	movs	r1, #10
 8004a3e:	4803      	ldr	r0, [pc, #12]	@ (8004a4c <LL_ConvertLineToARGB8888+0x80>)
 8004a40:	f002 fa27 	bl	8006e92 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000998 	.word	0x20000998
 8004a50:	4002b000 	.word	0x4002b000

08004a54 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004a58:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b04 <BSP_SDRAM_Init+0xb0>)
 8004a5c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004a60:	2202      	movs	r2, #2
 8004a62:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004a64:	4b28      	ldr	r3, [pc, #160]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004a66:	2207      	movs	r2, #7
 8004a68:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004a6a:	4b27      	ldr	r3, [pc, #156]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004a70:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004a72:	2207      	movs	r2, #7
 8004a74:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004a76:	4b24      	ldr	r3, [pc, #144]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004a78:	2202      	movs	r2, #2
 8004a7a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004a7c:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004a7e:	2202      	movs	r2, #2
 8004a80:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004a82:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004a84:	2202      	movs	r2, #2
 8004a86:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004a88:	4b1d      	ldr	r3, [pc, #116]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a94:	4b1a      	ldr	r3, [pc, #104]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004a96:	2204      	movs	r2, #4
 8004a98:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004a9a:	4b19      	ldr	r3, [pc, #100]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004aa0:	4b17      	ldr	r3, [pc, #92]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004aa2:	2240      	movs	r2, #64	@ 0x40
 8004aa4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004aa6:	4b16      	ldr	r3, [pc, #88]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004aac:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004aae:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004ab4:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004ab6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aba:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004abc:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004abe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004aca:	2100      	movs	r1, #0
 8004acc:	480c      	ldr	r0, [pc, #48]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004ace:	f000 f87f 	bl	8004bd0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004ad2:	490d      	ldr	r1, [pc, #52]	@ (8004b08 <BSP_SDRAM_Init+0xb4>)
 8004ad4:	480a      	ldr	r0, [pc, #40]	@ (8004b00 <BSP_SDRAM_Init+0xac>)
 8004ad6:	f005 fe5d 	bl	800a794 <HAL_SDRAM_Init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <BSP_SDRAM_Init+0xb8>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e002      	b.n	8004aee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004ae8:	4b08      	ldr	r3, [pc, #32]	@ (8004b0c <BSP_SDRAM_Init+0xb8>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004aee:	f240 6003 	movw	r0, #1539	@ 0x603
 8004af2:	f000 f80d 	bl	8004b10 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004af6:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <BSP_SDRAM_Init+0xb8>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000a78 	.word	0x20000a78
 8004b04:	a0000140 	.word	0xa0000140
 8004b08:	20000aac 	.word	0x20000aac
 8004b0c:	20000044 	.word	0x20000044

08004b10 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b22:	4b29      	ldr	r3, [pc, #164]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b24:	2210      	movs	r2, #16
 8004b26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b28:	4b27      	ldr	r3, [pc, #156]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b2e:	4b26      	ldr	r3, [pc, #152]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b38:	4923      	ldr	r1, [pc, #140]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b3a:	4824      	ldr	r0, [pc, #144]	@ (8004bcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b3c:	f005 fe5e 	bl	800a7fc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004b40:	2001      	movs	r0, #1
 8004b42:	f001 f993 	bl	8005e6c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004b46:	4b20      	ldr	r3, [pc, #128]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b48:	2202      	movs	r2, #2
 8004b4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b4e:	2210      	movs	r2, #16
 8004b50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b52:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b62:	4919      	ldr	r1, [pc, #100]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b64:	4819      	ldr	r0, [pc, #100]	@ (8004bcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b66:	f005 fe49 	bl	800a7fc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004b6a:	4b17      	ldr	r3, [pc, #92]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b70:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b72:	2210      	movs	r2, #16
 8004b74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004b76:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b78:	2208      	movs	r2, #8
 8004b7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b7c:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b86:	4910      	ldr	r1, [pc, #64]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b88:	4810      	ldr	r0, [pc, #64]	@ (8004bcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b8a:	f005 fe37 	bl	800a7fc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004b8e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004b92:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b96:	2204      	movs	r2, #4
 8004b98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a07      	ldr	r2, [pc, #28]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004baa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb0:	4905      	ldr	r1, [pc, #20]	@ (8004bc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bb2:	4806      	ldr	r0, [pc, #24]	@ (8004bcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004bb4:	f005 fe22 	bl	800a7fc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4804      	ldr	r0, [pc, #16]	@ (8004bcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004bbc:	f005 fe53 	bl	800a866 <HAL_SDRAM_ProgramRefreshRate>
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000ac8 	.word	0x20000ac8
 8004bcc:	20000a78 	.word	0x20000a78

08004bd0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b090      	sub	sp, #64	@ 0x40
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004bda:	4b70      	ldr	r3, [pc, #448]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	4a6f      	ldr	r2, [pc, #444]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	6393      	str	r3, [r2, #56]	@ 0x38
 8004be6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	4a69      	ldr	r2, [pc, #420]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfe:	4b67      	ldr	r3, [pc, #412]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c0a:	4b64      	ldr	r3, [pc, #400]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	4a63      	ldr	r2, [pc, #396]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c16:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c22:	4b5e      	ldr	r3, [pc, #376]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c3a:	4b58      	ldr	r3, [pc, #352]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3e:	4a57      	ldr	r2, [pc, #348]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c40:	f043 0310 	orr.w	r3, r3, #16
 8004c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c46:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c52:	4b52      	ldr	r3, [pc, #328]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	4a51      	ldr	r2, [pc, #324]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c58:	f043 0320 	orr.w	r3, r3, #32
 8004c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c76:	4b49      	ldr	r3, [pc, #292]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c82:	4b46      	ldr	r3, [pc, #280]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	4a45      	ldr	r2, [pc, #276]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c8e:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <BSP_SDRAM_MspInit+0x1cc>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004caa:	2308      	movs	r3, #8
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	483a      	ldr	r0, [pc, #232]	@ (8004da0 <BSP_SDRAM_MspInit+0x1d0>)
 8004cb6:	f002 fc13 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004cba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4837      	ldr	r0, [pc, #220]	@ (8004da4 <BSP_SDRAM_MspInit+0x1d4>)
 8004cc8:	f002 fc0a 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004ccc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4833      	ldr	r0, [pc, #204]	@ (8004da8 <BSP_SDRAM_MspInit+0x1d8>)
 8004cda:	f002 fc01 	bl	80074e0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004cde:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4830      	ldr	r0, [pc, #192]	@ (8004dac <BSP_SDRAM_MspInit+0x1dc>)
 8004cec:	f002 fbf8 	bl	80074e0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004cf0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004cf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	482c      	ldr	r0, [pc, #176]	@ (8004db0 <BSP_SDRAM_MspInit+0x1e0>)
 8004cfe:	f002 fbef 	bl	80074e0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004d02:	2328      	movs	r3, #40	@ 0x28
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4829      	ldr	r0, [pc, #164]	@ (8004db4 <BSP_SDRAM_MspInit+0x1e4>)
 8004d0e:	f002 fbe7 	bl	80074e0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004d12:	4b29      	ldr	r3, [pc, #164]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004d18:	4b27      	ldr	r3, [pc, #156]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d1a:	2280      	movs	r2, #128	@ 0x80
 8004d1c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004d1e:	4b26      	ldr	r3, [pc, #152]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d24:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004d26:	4b24      	ldr	r3, [pc, #144]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d2c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d2e:	4b22      	ldr	r3, [pc, #136]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d34:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004d36:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d3c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004d44:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d4a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004d52:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d54:	2203      	movs	r2, #3
 8004d56:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004d58:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004d5e:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004d64:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d66:	4a15      	ldr	r2, [pc, #84]	@ (8004dbc <BSP_SDRAM_MspInit+0x1ec>)
 8004d68:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a12      	ldr	r2, [pc, #72]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d70:	4a11      	ldr	r2, [pc, #68]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004d76:	4810      	ldr	r0, [pc, #64]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d78:	f001 ff06 	bl	8006b88 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004d7c:	480e      	ldr	r0, [pc, #56]	@ (8004db8 <BSP_SDRAM_MspInit+0x1e8>)
 8004d7e:	f001 fe55 	bl	8006a2c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004d82:	2200      	movs	r2, #0
 8004d84:	210f      	movs	r1, #15
 8004d86:	2038      	movs	r0, #56	@ 0x38
 8004d88:	f001 fd46 	bl	8006818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004d8c:	2038      	movs	r0, #56	@ 0x38
 8004d8e:	f001 fd5f 	bl	8006850 <HAL_NVIC_EnableIRQ>
}
 8004d92:	bf00      	nop
 8004d94:	3740      	adds	r7, #64	@ 0x40
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40020800 	.word	0x40020800
 8004da4:	40020c00 	.word	0x40020c00
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40021400 	.word	0x40021400
 8004db0:	40021800 	.word	0x40021800
 8004db4:	40021c00 	.word	0x40021c00
 8004db8:	20000ad8 	.word	0x20000ad8
 8004dbc:	40026410 	.word	0x40026410

08004dc0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	460a      	mov	r2, r1
 8004dca:	80fb      	strh	r3, [r7, #6]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004dd4:	4a14      	ldr	r2, [pc, #80]	@ (8004e28 <BSP_TS_Init+0x68>)
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004dda:	4a14      	ldr	r2, [pc, #80]	@ (8004e2c <BSP_TS_Init+0x6c>)
 8004ddc:	88bb      	ldrh	r3, [r7, #4]
 8004dde:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004de0:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <BSP_TS_Init+0x70>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2070      	movs	r0, #112	@ 0x70
 8004de6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004de8:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <BSP_TS_Init+0x70>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2070      	movs	r0, #112	@ 0x70
 8004dee:	4798      	blx	r3
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b51      	cmp	r3, #81	@ 0x51
 8004df4:	d110      	bne.n	8004e18 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <BSP_TS_Init+0x74>)
 8004df8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e30 <BSP_TS_Init+0x70>)
 8004dfa:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e38 <BSP_TS_Init+0x78>)
 8004dfe:	2270      	movs	r2, #112	@ 0x70
 8004e00:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004e02:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <BSP_TS_Init+0x7c>)
 8004e04:	2208      	movs	r2, #8
 8004e06:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004e08:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <BSP_TS_Init+0x74>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e38 <BSP_TS_Init+0x78>)
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	4610      	mov	r0, r2
 8004e14:	4798      	blx	r3
 8004e16:	e001      	b.n	8004e1c <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000b3c 	.word	0x20000b3c
 8004e2c:	20000b3e 	.word	0x20000b3e
 8004e30:	2000000c 	.word	0x2000000c
 8004e34:	20000b38 	.word	0x20000b38
 8004e38:	20000b41 	.word	0x20000b41
 8004e3c:	20000b40 	.word	0x20000b40

08004e40 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b097      	sub	sp, #92	@ 0x5c
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004e5a:	4bb8      	ldr	r3, [pc, #736]	@ (800513c <BSP_TS_GetState+0x2fc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	4ab7      	ldr	r2, [pc, #732]	@ (8005140 <BSP_TS_GetState+0x300>)
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	4610      	mov	r0, r2
 8004e66:	4798      	blx	r3
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8198 	beq.w	80051aa <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e7e:	e187      	b.n	8005190 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004e80:	4bae      	ldr	r3, [pc, #696]	@ (800513c <BSP_TS_GetState+0x2fc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4aae      	ldr	r2, [pc, #696]	@ (8005140 <BSP_TS_GetState+0x300>)
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	f107 0120 	add.w	r1, r7, #32
 8004e90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e92:	0052      	lsls	r2, r2, #1
 8004e94:	1888      	adds	r0, r1, r2
 8004e96:	f107 0114 	add.w	r1, r7, #20
 8004e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e9c:	0052      	lsls	r2, r2, #1
 8004e9e:	440a      	add	r2, r1
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004ea6:	4ba7      	ldr	r3, [pc, #668]	@ (8005144 <BSP_TS_GetState+0x304>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d117      	bne.n	8004ede <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	3350      	adds	r3, #80	@ 0x50
 8004eb4:	443b      	add	r3, r7
 8004eb6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	3350      	adds	r3, #80	@ 0x50
 8004ec0:	443b      	add	r3, r7
 8004ec2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	3350      	adds	r3, #80	@ 0x50
 8004ecc:	443b      	add	r3, r7
 8004ece:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	3350      	adds	r3, #80	@ 0x50
 8004ed8:	443b      	add	r3, r7
 8004eda:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004ede:	4b99      	ldr	r3, [pc, #612]	@ (8005144 <BSP_TS_GetState+0x304>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	3350      	adds	r3, #80	@ 0x50
 8004ef0:	443b      	add	r3, r7
 8004ef2:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004ef6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	3350      	adds	r3, #80	@ 0x50
 8004f02:	443b      	add	r3, r7
 8004f04:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004f08:	4b8e      	ldr	r3, [pc, #568]	@ (8005144 <BSP_TS_GetState+0x304>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00e      	beq.n	8004f32 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	3350      	adds	r3, #80	@ 0x50
 8004f1a:	443b      	add	r3, r7
 8004f1c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004f20:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	3350      	adds	r3, #80	@ 0x50
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004f32:	4b84      	ldr	r3, [pc, #528]	@ (8005144 <BSP_TS_GetState+0x304>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	3350      	adds	r3, #80	@ 0x50
 8004f44:	443b      	add	r3, r7
 8004f46:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	3350      	adds	r3, #80	@ 0x50
 8004f50:	443b      	add	r3, r7
 8004f52:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	3350      	adds	r3, #80	@ 0x50
 8004f5c:	443b      	add	r3, r7
 8004f5e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	3350      	adds	r3, #80	@ 0x50
 8004f68:	443b      	add	r3, r7
 8004f6a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	3350      	adds	r3, #80	@ 0x50
 8004f74:	443b      	add	r3, r7
 8004f76:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4a72      	ldr	r2, [pc, #456]	@ (8005148 <BSP_TS_GetState+0x308>)
 8004f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f84:	4299      	cmp	r1, r3
 8004f86:	d90d      	bls.n	8004fa4 <BSP_TS_GetState+0x164>
 8004f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	3350      	adds	r3, #80	@ 0x50
 8004f8e:	443b      	add	r3, r7
 8004f90:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004f94:	496c      	ldr	r1, [pc, #432]	@ (8005148 <BSP_TS_GetState+0x308>)
 8004f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	e00c      	b.n	8004fbe <BSP_TS_GetState+0x17e>
 8004fa4:	4a68      	ldr	r2, [pc, #416]	@ (8005148 <BSP_TS_GetState+0x308>)
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	3350      	adds	r3, #80	@ 0x50
 8004fb4:	443b      	add	r3, r7
 8004fb6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	3350      	adds	r3, #80	@ 0x50
 8004fc8:	443b      	add	r3, r7
 8004fca:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4a5e      	ldr	r2, [pc, #376]	@ (800514c <BSP_TS_GetState+0x30c>)
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd8:	4299      	cmp	r1, r3
 8004fda:	d90d      	bls.n	8004ff8 <BSP_TS_GetState+0x1b8>
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	3350      	adds	r3, #80	@ 0x50
 8004fe2:	443b      	add	r3, r7
 8004fe4:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004fe8:	4958      	ldr	r1, [pc, #352]	@ (800514c <BSP_TS_GetState+0x30c>)
 8004fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	e00c      	b.n	8005012 <BSP_TS_GetState+0x1d2>
 8004ff8:	4a54      	ldr	r2, [pc, #336]	@ (800514c <BSP_TS_GetState+0x30c>)
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005000:	b29a      	uxth	r2, r3
 8005002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	3350      	adds	r3, #80	@ 0x50
 8005008:	443b      	add	r3, r7
 800500a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	b29b      	uxth	r3, r3
 8005012:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8005016:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800501a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800501e:	4413      	add	r3, r2
 8005020:	2b05      	cmp	r3, #5
 8005022:	dd15      	ble.n	8005050 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	3350      	adds	r3, #80	@ 0x50
 800502a:	443b      	add	r3, r7
 800502c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005030:	4619      	mov	r1, r3
 8005032:	4a45      	ldr	r2, [pc, #276]	@ (8005148 <BSP_TS_GetState+0x308>)
 8005034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800503a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	3350      	adds	r3, #80	@ 0x50
 8005040:	443b      	add	r3, r7
 8005042:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005046:	4619      	mov	r1, r3
 8005048:	4a40      	ldr	r2, [pc, #256]	@ (800514c <BSP_TS_GetState+0x30c>)
 800504a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800504c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005050:	4b3b      	ldr	r3, [pc, #236]	@ (8005140 <BSP_TS_GetState+0x300>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b70      	cmp	r3, #112	@ 0x70
 8005056:	d119      	bne.n	800508c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	3350      	adds	r3, #80	@ 0x50
 800505e:	443b      	add	r3, r7
 8005060:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4413      	add	r3, r2
 800506c:	460a      	mov	r2, r1
 800506e:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	3350      	adds	r3, #80	@ 0x50
 8005076:	443b      	add	r3, r7
 8005078:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005080:	3304      	adds	r3, #4
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	460a      	mov	r2, r1
 8005088:	809a      	strh	r2, [r3, #4]
 800508a:	e022      	b.n	80050d2 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800508c:	4b30      	ldr	r3, [pc, #192]	@ (8005150 <BSP_TS_GetState+0x310>)
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	4a2d      	ldr	r2, [pc, #180]	@ (8005148 <BSP_TS_GetState+0x308>)
 8005094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	0b1b      	lsrs	r3, r3, #12
 80050a0:	b299      	uxth	r1, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	460a      	mov	r2, r1
 80050ac:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80050ae:	4b29      	ldr	r3, [pc, #164]	@ (8005154 <BSP_TS_GetState+0x314>)
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	4619      	mov	r1, r3
 80050b4:	4a25      	ldr	r2, [pc, #148]	@ (800514c <BSP_TS_GetState+0x30c>)
 80050b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	0b1b      	lsrs	r3, r3, #12
 80050c2:	b299      	uxth	r1, r3
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050c8:	3304      	adds	r3, #4
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	460a      	mov	r2, r1
 80050d0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80050d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <BSP_TS_GetState+0x300>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f107 010c 	add.w	r1, r7, #12
 80050dc:	f107 0210 	add.w	r2, r7, #16
 80050e0:	f107 0308 	add.w	r3, r7, #8
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	460b      	mov	r3, r1
 80050e8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80050ea:	f7fd fb63 	bl	80027b4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	b2d9      	uxtb	r1, r3
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f6:	4413      	add	r3, r2
 80050f8:	3316      	adds	r3, #22
 80050fa:	460a      	mov	r2, r1
 80050fc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	b2d9      	uxtb	r1, r3
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005106:	4413      	add	r3, r2
 8005108:	3320      	adds	r3, #32
 800510a:	460a      	mov	r2, r1
 800510c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d836      	bhi.n	8005182 <BSP_TS_GetState+0x342>
 8005114:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <BSP_TS_GetState+0x2dc>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	0800512d 	.word	0x0800512d
 8005120:	08005159 	.word	0x08005159
 8005124:	08005167 	.word	0x08005167
 8005128:	08005175 	.word	0x08005175
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005130:	4413      	add	r3, r2
 8005132:	331b      	adds	r3, #27
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
          break;
 8005138:	e027      	b.n	800518a <BSP_TS_GetState+0x34a>
 800513a:	bf00      	nop
 800513c:	20000b38 	.word	0x20000b38
 8005140:	20000b41 	.word	0x20000b41
 8005144:	20000b40 	.word	0x20000b40
 8005148:	20000b44 	.word	0x20000b44
 800514c:	20000b58 	.word	0x20000b58
 8005150:	20000b3c 	.word	0x20000b3c
 8005154:	20000b3e 	.word	0x20000b3e
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800515c:	4413      	add	r3, r2
 800515e:	331b      	adds	r3, #27
 8005160:	2202      	movs	r2, #2
 8005162:	701a      	strb	r2, [r3, #0]
          break;
 8005164:	e011      	b.n	800518a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800516a:	4413      	add	r3, r2
 800516c:	331b      	adds	r3, #27
 800516e:	2203      	movs	r2, #3
 8005170:	701a      	strb	r2, [r3, #0]
          break;
 8005172:	e00a      	b.n	800518a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005178:	4413      	add	r3, r2
 800517a:	331b      	adds	r3, #27
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
          break;
 8005180:	e003      	b.n	800518a <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005188:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800518a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800518c:	3301      	adds	r3, #1
 800518e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005198:	4293      	cmp	r3, r2
 800519a:	f4ff ae71 	bcc.w	8004e80 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f80a 	bl	80051b8 <BSP_TS_Get_GestureId>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80051aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3754      	adds	r7, #84	@ 0x54
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd90      	pop	{r4, r7, pc}
 80051b6:	bf00      	nop

080051b8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80051c8:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <BSP_TS_Get_GestureId+0x100>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	f107 0308 	add.w	r3, r7, #8
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fd fad4 	bl	8002782 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b49      	cmp	r3, #73	@ 0x49
 80051de:	d05e      	beq.n	800529e <BSP_TS_Get_GestureId+0xe6>
 80051e0:	2b49      	cmp	r3, #73	@ 0x49
 80051e2:	d860      	bhi.n	80052a6 <BSP_TS_Get_GestureId+0xee>
 80051e4:	2b1c      	cmp	r3, #28
 80051e6:	d83f      	bhi.n	8005268 <BSP_TS_Get_GestureId+0xb0>
 80051e8:	2b1c      	cmp	r3, #28
 80051ea:	d85c      	bhi.n	80052a6 <BSP_TS_Get_GestureId+0xee>
 80051ec:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <BSP_TS_Get_GestureId+0x3c>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	0800526f 	.word	0x0800526f
 80051f8:	080052a7 	.word	0x080052a7
 80051fc:	080052a7 	.word	0x080052a7
 8005200:	080052a7 	.word	0x080052a7
 8005204:	080052a7 	.word	0x080052a7
 8005208:	080052a7 	.word	0x080052a7
 800520c:	080052a7 	.word	0x080052a7
 8005210:	080052a7 	.word	0x080052a7
 8005214:	080052a7 	.word	0x080052a7
 8005218:	080052a7 	.word	0x080052a7
 800521c:	080052a7 	.word	0x080052a7
 8005220:	080052a7 	.word	0x080052a7
 8005224:	080052a7 	.word	0x080052a7
 8005228:	080052a7 	.word	0x080052a7
 800522c:	080052a7 	.word	0x080052a7
 8005230:	080052a7 	.word	0x080052a7
 8005234:	08005277 	.word	0x08005277
 8005238:	080052a7 	.word	0x080052a7
 800523c:	080052a7 	.word	0x080052a7
 8005240:	080052a7 	.word	0x080052a7
 8005244:	0800527f 	.word	0x0800527f
 8005248:	080052a7 	.word	0x080052a7
 800524c:	080052a7 	.word	0x080052a7
 8005250:	080052a7 	.word	0x080052a7
 8005254:	08005287 	.word	0x08005287
 8005258:	080052a7 	.word	0x080052a7
 800525c:	080052a7 	.word	0x080052a7
 8005260:	080052a7 	.word	0x080052a7
 8005264:	0800528f 	.word	0x0800528f
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d014      	beq.n	8005296 <BSP_TS_Get_GestureId+0xde>
 800526c:	e01b      	b.n	80052a6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005274:	e01a      	b.n	80052ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800527c:	e016      	b.n	80052ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005284:	e012      	b.n	80052ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2203      	movs	r2, #3
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800528c:	e00e      	b.n	80052ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2204      	movs	r2, #4
 8005292:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005294:	e00a      	b.n	80052ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2205      	movs	r2, #5
 800529a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800529c:	e006      	b.n	80052ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2206      	movs	r2, #6
 80052a2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80052a4:	e002      	b.n	80052ac <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
      break;
 80052aa:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000b41 	.word	0x20000b41

080052bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80052c2:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <HAL_MspInit+0x4c>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	4a10      	ldr	r2, [pc, #64]	@ (8005308 <HAL_MspInit+0x4c>)
 80052c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80052ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <HAL_MspInit+0x4c>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052da:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_MspInit+0x4c>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	4a0a      	ldr	r2, [pc, #40]	@ (8005308 <HAL_MspInit+0x4c>)
 80052e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052e6:	4b08      	ldr	r3, [pc, #32]	@ (8005308 <HAL_MspInit+0x4c>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	210f      	movs	r1, #15
 80052f6:	f06f 0001 	mvn.w	r0, #1
 80052fa:	f001 fa8d 	bl	8006818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800

0800530c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08e      	sub	sp, #56	@ 0x38
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800531c:	4b33      	ldr	r3, [pc, #204]	@ (80053ec <HAL_InitTick+0xe0>)
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	4a32      	ldr	r2, [pc, #200]	@ (80053ec <HAL_InitTick+0xe0>)
 8005322:	f043 0310 	orr.w	r3, r3, #16
 8005326:	6413      	str	r3, [r2, #64]	@ 0x40
 8005328:	4b30      	ldr	r3, [pc, #192]	@ (80053ec <HAL_InitTick+0xe0>)
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005334:	f107 0210 	add.w	r2, r7, #16
 8005338:	f107 0314 	add.w	r3, r7, #20
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f004 fa30 	bl	80097a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800534e:	f004 fa01 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 8005352:	6378      	str	r0, [r7, #52]	@ 0x34
 8005354:	e004      	b.n	8005360 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005356:	f004 f9fd 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800535a:	4603      	mov	r3, r0
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005362:	4a23      	ldr	r2, [pc, #140]	@ (80053f0 <HAL_InitTick+0xe4>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0c9b      	lsrs	r3, r3, #18
 800536a:	3b01      	subs	r3, #1
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800536e:	4b21      	ldr	r3, [pc, #132]	@ (80053f4 <HAL_InitTick+0xe8>)
 8005370:	4a21      	ldr	r2, [pc, #132]	@ (80053f8 <HAL_InitTick+0xec>)
 8005372:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005374:	4b1f      	ldr	r3, [pc, #124]	@ (80053f4 <HAL_InitTick+0xe8>)
 8005376:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800537a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800537c:	4a1d      	ldr	r2, [pc, #116]	@ (80053f4 <HAL_InitTick+0xe8>)
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005382:	4b1c      	ldr	r3, [pc, #112]	@ (80053f4 <HAL_InitTick+0xe8>)
 8005384:	2200      	movs	r2, #0
 8005386:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005388:	4b1a      	ldr	r3, [pc, #104]	@ (80053f4 <HAL_InitTick+0xe8>)
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800538e:	4b19      	ldr	r3, [pc, #100]	@ (80053f4 <HAL_InitTick+0xe8>)
 8005390:	2200      	movs	r2, #0
 8005392:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005394:	4817      	ldr	r0, [pc, #92]	@ (80053f4 <HAL_InitTick+0xe8>)
 8005396:	f005 fb39 	bl	800aa0c <HAL_TIM_Base_Init>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80053a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11b      	bne.n	80053e0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80053a8:	4812      	ldr	r0, [pc, #72]	@ (80053f4 <HAL_InitTick+0xe8>)
 80053aa:	f005 fb87 	bl	800aabc <HAL_TIM_Base_Start_IT>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80053b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d111      	bne.n	80053e0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053bc:	2036      	movs	r0, #54	@ 0x36
 80053be:	f001 fa47 	bl	8006850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b0f      	cmp	r3, #15
 80053c6:	d808      	bhi.n	80053da <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80053c8:	2200      	movs	r2, #0
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	2036      	movs	r0, #54	@ 0x36
 80053ce:	f001 fa23 	bl	8006818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053d2:	4a0a      	ldr	r2, [pc, #40]	@ (80053fc <HAL_InitTick+0xf0>)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e002      	b.n	80053e0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80053e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3738      	adds	r7, #56	@ 0x38
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40023800 	.word	0x40023800
 80053f0:	431bde83 	.word	0x431bde83
 80053f4:	20000b6c 	.word	0x20000b6c
 80053f8:	40001000 	.word	0x40001000
 80053fc:	2000004c 	.word	0x2000004c

08005400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <NMI_Handler+0x4>

08005408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <HardFault_Handler+0x4>

08005410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <MemManage_Handler+0x4>

08005418 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <BusFault_Handler+0x4>

08005420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <UsageFault_Handler+0x4>

08005428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800543c:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <TIM6_DAC_IRQHandler+0x20>)
 800543e:	791b      	ldrb	r3, [r3, #4]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8005446:	4804      	ldr	r0, [pc, #16]	@ (8005458 <TIM6_DAC_IRQHandler+0x20>)
 8005448:	f001 fa32 	bl	80068b0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800544c:	4803      	ldr	r0, [pc, #12]	@ (800545c <TIM6_DAC_IRQHandler+0x24>)
 800544e:	f005 fbad 	bl	800abac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000160 	.word	0x20000160
 800545c:	20000b6c 	.word	0x20000b6c

08005460 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005464:	4802      	ldr	r0, [pc, #8]	@ (8005470 <LTDC_IRQHandler+0x10>)
 8005466:	f003 fa0b 	bl	8008880 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000760 	.word	0x20000760

08005474 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005478:	4802      	ldr	r0, [pc, #8]	@ (8005484 <DMA2D_IRQHandler+0x10>)
 800547a:	f001 fdf3 	bl	8007064 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000174 	.word	0x20000174

08005488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
	return 1;
 800548c:	2301      	movs	r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <_kill>:

int _kill(int pid, int sig)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80054a2:	f009 f9c5 	bl	800e830 <__errno>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2216      	movs	r2, #22
 80054aa:	601a      	str	r2, [r3, #0]
	return -1;
 80054ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <_exit>:

void _exit (int status)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80054c0:	f04f 31ff 	mov.w	r1, #4294967295
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ffe7 	bl	8005498 <_kill>
	while (1) {}		/* Make sure we hang here */
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <_exit+0x12>

080054ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e00a      	b.n	80054f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054e0:	f3af 8000 	nop.w
 80054e4:	4601      	mov	r1, r0
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	60ba      	str	r2, [r7, #8]
 80054ec:	b2ca      	uxtb	r2, r1
 80054ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	dbf0      	blt.n	80054e0 <_read+0x12>
	}

return len;
 80054fe:	687b      	ldr	r3, [r7, #4]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e009      	b.n	800552e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	60ba      	str	r2, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3301      	adds	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	dbf1      	blt.n	800551a <_write+0x12>
	}
	return len;
 8005536:	687b      	ldr	r3, [r7, #4]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <_close>:

int _close(int file)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	return -1;
 8005548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005568:	605a      	str	r2, [r3, #4]
	return 0;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_isatty>:

int _isatty(int file)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	return 1;
 8005580:	2301      	movs	r3, #1
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
	return 0;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055b0:	4a14      	ldr	r2, [pc, #80]	@ (8005604 <_sbrk+0x5c>)
 80055b2:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <_sbrk+0x60>)
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055bc:	4b13      	ldr	r3, [pc, #76]	@ (800560c <_sbrk+0x64>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055c4:	4b11      	ldr	r3, [pc, #68]	@ (800560c <_sbrk+0x64>)
 80055c6:	4a12      	ldr	r2, [pc, #72]	@ (8005610 <_sbrk+0x68>)
 80055c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055ca:	4b10      	ldr	r3, [pc, #64]	@ (800560c <_sbrk+0x64>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d207      	bcs.n	80055e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055d8:	f009 f92a 	bl	800e830 <__errno>
 80055dc:	4603      	mov	r3, r0
 80055de:	220c      	movs	r2, #12
 80055e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
 80055e6:	e009      	b.n	80055fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055e8:	4b08      	ldr	r3, [pc, #32]	@ (800560c <_sbrk+0x64>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055ee:	4b07      	ldr	r3, [pc, #28]	@ (800560c <_sbrk+0x64>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	4a05      	ldr	r2, [pc, #20]	@ (800560c <_sbrk+0x64>)
 80055f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055fa:	68fb      	ldr	r3, [r7, #12]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20050000 	.word	0x20050000
 8005608:	00000400 	.word	0x00000400
 800560c:	20000bb8 	.word	0x20000bb8
 8005610:	20004d70 	.word	0x20004d70

08005614 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <SystemInit+0x20>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	4a05      	ldr	r2, [pc, #20]	@ (8005634 <SystemInit+0x20>)
 8005620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800563e:	f107 0310 	add.w	r3, r7, #16
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005656:	4b20      	ldr	r3, [pc, #128]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 8005658:	4a20      	ldr	r2, [pc, #128]	@ (80056dc <MX_TIM1_Init+0xa4>)
 800565a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800565c:	4b1e      	ldr	r3, [pc, #120]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 800565e:	2200      	movs	r2, #0
 8005660:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005662:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 8005664:	2200      	movs	r2, #0
 8005666:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005668:	4b1b      	ldr	r3, [pc, #108]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 800566a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800566e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005670:	4b19      	ldr	r3, [pc, #100]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 8005672:	2200      	movs	r2, #0
 8005674:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005676:	4b18      	ldr	r3, [pc, #96]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 8005678:	2200      	movs	r2, #0
 800567a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800567c:	4b16      	ldr	r3, [pc, #88]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 800567e:	2200      	movs	r2, #0
 8005680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005682:	4815      	ldr	r0, [pc, #84]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 8005684:	f005 f9c2 	bl	800aa0c <HAL_TIM_Base_Init>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800568e:	f7fe f80f 	bl	80036b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005698:	f107 0310 	add.w	r3, r7, #16
 800569c:	4619      	mov	r1, r3
 800569e:	480e      	ldr	r0, [pc, #56]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 80056a0:	f005 fba4 	bl	800adec <HAL_TIM_ConfigClockSource>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80056aa:	f7fe f801 	bl	80036b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4806      	ldr	r0, [pc, #24]	@ (80056d8 <MX_TIM1_Init+0xa0>)
 80056c0:	f005 fdc0 	bl	800b244 <HAL_TIMEx_MasterConfigSynchronization>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80056ca:	f7fd fff1 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80056ce:	bf00      	nop
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000bbc 	.word	0x20000bbc
 80056dc:	40010000 	.word	0x40010000

080056e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056e6:	f107 0310 	add.w	r3, r7, #16
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
 80056f0:	609a      	str	r2, [r3, #8]
 80056f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005778 <MX_TIM2_Init+0x98>)
 8005700:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005704:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005706:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <MX_TIM2_Init+0x98>)
 8005708:	2200      	movs	r2, #0
 800570a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800570c:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <MX_TIM2_Init+0x98>)
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005712:	4b19      	ldr	r3, [pc, #100]	@ (8005778 <MX_TIM2_Init+0x98>)
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800571a:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <MX_TIM2_Init+0x98>)
 800571c:	2200      	movs	r2, #0
 800571e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005720:	4b15      	ldr	r3, [pc, #84]	@ (8005778 <MX_TIM2_Init+0x98>)
 8005722:	2200      	movs	r2, #0
 8005724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005726:	4814      	ldr	r0, [pc, #80]	@ (8005778 <MX_TIM2_Init+0x98>)
 8005728:	f005 f970 	bl	800aa0c <HAL_TIM_Base_Init>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005732:	f7fd ffbd 	bl	80036b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800573a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	4619      	mov	r1, r3
 8005742:	480d      	ldr	r0, [pc, #52]	@ (8005778 <MX_TIM2_Init+0x98>)
 8005744:	f005 fb52 	bl	800adec <HAL_TIM_ConfigClockSource>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800574e:	f7fd ffaf 	bl	80036b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4806      	ldr	r0, [pc, #24]	@ (8005778 <MX_TIM2_Init+0x98>)
 8005760:	f005 fd70 	bl	800b244 <HAL_TIMEx_MasterConfigSynchronization>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800576a:	f7fd ffa1 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800576e:	bf00      	nop
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000c08 	.word	0x20000c08

0800577c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005782:	f107 0310 	add.w	r3, r7, #16
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800579a:	4b1d      	ldr	r3, [pc, #116]	@ (8005810 <MX_TIM3_Init+0x94>)
 800579c:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <MX_TIM3_Init+0x98>)
 800579e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80057a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80057ac:	4b18      	ldr	r3, [pc, #96]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057b4:	4b16      	ldr	r3, [pc, #88]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057ba:	4b15      	ldr	r3, [pc, #84]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80057c0:	4813      	ldr	r0, [pc, #76]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057c2:	f005 f923 	bl	800aa0c <HAL_TIM_Base_Init>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80057cc:	f7fd ff70 	bl	80036b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80057d6:	f107 0310 	add.w	r3, r7, #16
 80057da:	4619      	mov	r1, r3
 80057dc:	480c      	ldr	r0, [pc, #48]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057de:	f005 fb05 	bl	800adec <HAL_TIM_ConfigClockSource>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80057e8:	f7fd ff62 	bl	80036b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ec:	2300      	movs	r3, #0
 80057ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80057f4:	1d3b      	adds	r3, r7, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4805      	ldr	r0, [pc, #20]	@ (8005810 <MX_TIM3_Init+0x94>)
 80057fa:	f005 fd23 	bl	800b244 <HAL_TIMEx_MasterConfigSynchronization>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005804:	f7fd ff54 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005808:	bf00      	nop
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000c54 	.word	0x20000c54
 8005814:	40000400 	.word	0x40000400

08005818 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800581e:	f107 0310 	add.w	r3, r7, #16
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	609a      	str	r2, [r3, #8]
 800582a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005836:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <MX_TIM5_Init+0x94>)
 8005838:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <MX_TIM5_Init+0x98>)
 800583a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800583c:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <MX_TIM5_Init+0x94>)
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005842:	4b1a      	ldr	r3, [pc, #104]	@ (80058ac <MX_TIM5_Init+0x94>)
 8005844:	2200      	movs	r2, #0
 8005846:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005848:	4b18      	ldr	r3, [pc, #96]	@ (80058ac <MX_TIM5_Init+0x94>)
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005850:	4b16      	ldr	r3, [pc, #88]	@ (80058ac <MX_TIM5_Init+0x94>)
 8005852:	2200      	movs	r2, #0
 8005854:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005856:	4b15      	ldr	r3, [pc, #84]	@ (80058ac <MX_TIM5_Init+0x94>)
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800585c:	4813      	ldr	r0, [pc, #76]	@ (80058ac <MX_TIM5_Init+0x94>)
 800585e:	f005 f8d5 	bl	800aa0c <HAL_TIM_Base_Init>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005868:	f7fd ff22 	bl	80036b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800586c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005870:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005872:	f107 0310 	add.w	r3, r7, #16
 8005876:	4619      	mov	r1, r3
 8005878:	480c      	ldr	r0, [pc, #48]	@ (80058ac <MX_TIM5_Init+0x94>)
 800587a:	f005 fab7 	bl	800adec <HAL_TIM_ConfigClockSource>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005884:	f7fd ff14 	bl	80036b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005888:	2300      	movs	r3, #0
 800588a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4805      	ldr	r0, [pc, #20]	@ (80058ac <MX_TIM5_Init+0x94>)
 8005896:	f005 fcd5 	bl	800b244 <HAL_TIMEx_MasterConfigSynchronization>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80058a0:	f7fd ff06 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80058a4:	bf00      	nop
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000ca0 	.word	0x20000ca0
 80058b0:	40000c00 	.word	0x40000c00

080058b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ba:	f107 0310 	add.w	r3, r7, #16
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	609a      	str	r2, [r3, #8]
 80058c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058c8:	1d3b      	adds	r3, r7, #4
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	605a      	str	r2, [r3, #4]
 80058d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80058d2:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <MX_TIM8_Init+0xa0>)
 80058d4:	4a20      	ldr	r2, [pc, #128]	@ (8005958 <MX_TIM8_Init+0xa4>)
 80058d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80058d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <MX_TIM8_Init+0xa0>)
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058de:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <MX_TIM8_Init+0xa0>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <MX_TIM8_Init+0xa0>)
 80058e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058ec:	4b19      	ldr	r3, [pc, #100]	@ (8005954 <MX_TIM8_Init+0xa0>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80058f2:	4b18      	ldr	r3, [pc, #96]	@ (8005954 <MX_TIM8_Init+0xa0>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058f8:	4b16      	ldr	r3, [pc, #88]	@ (8005954 <MX_TIM8_Init+0xa0>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80058fe:	4815      	ldr	r0, [pc, #84]	@ (8005954 <MX_TIM8_Init+0xa0>)
 8005900:	f005 f884 	bl	800aa0c <HAL_TIM_Base_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800590a:	f7fd fed1 	bl	80036b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800590e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005914:	f107 0310 	add.w	r3, r7, #16
 8005918:	4619      	mov	r1, r3
 800591a:	480e      	ldr	r0, [pc, #56]	@ (8005954 <MX_TIM8_Init+0xa0>)
 800591c:	f005 fa66 	bl	800adec <HAL_TIM_ConfigClockSource>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8005926:	f7fd fec3 	bl	80036b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800592a:	2300      	movs	r3, #0
 800592c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4806      	ldr	r0, [pc, #24]	@ (8005954 <MX_TIM8_Init+0xa0>)
 800593c:	f005 fc82 	bl	800b244 <HAL_TIMEx_MasterConfigSynchronization>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8005946:	f7fd feb3 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800594a:	bf00      	nop
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000cec 	.word	0x20000cec
 8005958:	40010400 	.word	0x40010400

0800595c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08e      	sub	sp, #56	@ 0x38
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	609a      	str	r2, [r3, #8]
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a3b      	ldr	r2, [pc, #236]	@ (8005a68 <HAL_TIM_Base_MspInit+0x10c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10c      	bne.n	8005998 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800597e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005982:	4a3a      	ldr	r2, [pc, #232]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6453      	str	r3, [r2, #68]	@ 0x44
 800598a:	4b38      	ldr	r3, [pc, #224]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005996:	e062      	b.n	8005a5e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a0:	d10c      	bne.n	80059bc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059a2:	4b32      	ldr	r3, [pc, #200]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	4a31      	ldr	r2, [pc, #196]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ae:	4b2f      	ldr	r3, [pc, #188]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	69fb      	ldr	r3, [r7, #28]
}
 80059ba:	e050      	b.n	8005a5e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a70 <HAL_TIM_Base_MspInit+0x114>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d10c      	bne.n	80059e0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059c6:	4b29      	ldr	r3, [pc, #164]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	4a28      	ldr	r2, [pc, #160]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	69bb      	ldr	r3, [r7, #24]
}
 80059de:	e03e      	b.n	8005a5e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a23      	ldr	r2, [pc, #140]	@ (8005a74 <HAL_TIM_Base_MspInit+0x118>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d10c      	bne.n	8005a04 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80059ea:	4b20      	ldr	r3, [pc, #128]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	4a1f      	ldr	r2, [pc, #124]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059f0:	f043 0308 	orr.w	r3, r3, #8
 80059f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80059f6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
}
 8005a02:	e02c      	b.n	8005a5e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	@ (8005a78 <HAL_TIM_Base_MspInit+0x11c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d127      	bne.n	8005a5e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005a0e:	4b17      	ldr	r3, [pc, #92]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a12:	4a16      	ldr	r2, [pc, #88]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a1a:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005a26:	4b11      	ldr	r3, [pc, #68]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	4a10      	ldr	r2, [pc, #64]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a32:	4b0e      	ldr	r3, [pc, #56]	@ (8005a6c <HAL_TIM_Base_MspInit+0x110>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005a3e:	2304      	movs	r3, #4
 8005a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a42:	2302      	movs	r3, #2
 8005a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a56:	4619      	mov	r1, r3
 8005a58:	4808      	ldr	r0, [pc, #32]	@ (8005a7c <HAL_TIM_Base_MspInit+0x120>)
 8005a5a:	f001 fd41 	bl	80074e0 <HAL_GPIO_Init>
}
 8005a5e:	bf00      	nop
 8005a60:	3738      	adds	r7, #56	@ 0x38
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000c00 	.word	0x40000c00
 8005a78:	40010400 	.word	0x40010400
 8005a7c:	40022000 	.word	0x40022000

08005a80 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005a84:	4b14      	ldr	r3, [pc, #80]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005a86:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <MX_UART7_Init+0x5c>)
 8005a88:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005a8a:	4b13      	ldr	r3, [pc, #76]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005a90:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005a92:	4b11      	ldr	r3, [pc, #68]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005a98:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ab0:	4b09      	ldr	r3, [pc, #36]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ab6:	4b08      	ldr	r3, [pc, #32]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005abc:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005ac2:	4805      	ldr	r0, [pc, #20]	@ (8005ad8 <MX_UART7_Init+0x58>)
 8005ac4:	f005 fc6a 	bl	800b39c <HAL_UART_Init>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8005ace:	f7fd fdef 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000d38 	.word	0x20000d38
 8005adc:	40007800 	.word	0x40007800

08005ae0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ae4:	4b14      	ldr	r3, [pc, #80]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005ae6:	4a15      	ldr	r2, [pc, #84]	@ (8005b3c <MX_USART1_UART_Init+0x5c>)
 8005ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005aea:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005af2:	4b11      	ldr	r3, [pc, #68]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005af8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005afe:	4b0e      	ldr	r3, [pc, #56]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005b06:	220c      	movs	r2, #12
 8005b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b10:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b16:	4b08      	ldr	r3, [pc, #32]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b22:	4805      	ldr	r0, [pc, #20]	@ (8005b38 <MX_USART1_UART_Init+0x58>)
 8005b24:	f005 fc3a 	bl	800b39c <HAL_UART_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005b2e:	f7fd fdbf 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000dc0 	.word	0x20000dc0
 8005b3c:	40011000 	.word	0x40011000

08005b40 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005b44:	4b14      	ldr	r3, [pc, #80]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b46:	4a15      	ldr	r2, [pc, #84]	@ (8005b9c <MX_USART6_UART_Init+0x5c>)
 8005b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005b4a:	4b13      	ldr	r3, [pc, #76]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005b52:	4b11      	ldr	r3, [pc, #68]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005b58:	4b0f      	ldr	r3, [pc, #60]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005b64:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b66:	220c      	movs	r2, #12
 8005b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b70:	4b09      	ldr	r3, [pc, #36]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b76:	4b08      	ldr	r3, [pc, #32]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005b82:	4805      	ldr	r0, [pc, #20]	@ (8005b98 <MX_USART6_UART_Init+0x58>)
 8005b84:	f005 fc0a 	bl	800b39c <HAL_UART_Init>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005b8e:	f7fd fd8f 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000e48 	.word	0x20000e48
 8005b9c:	40011400 	.word	0x40011400

08005ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b0b0      	sub	sp, #192	@ 0xc0
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005bbc:	2284      	movs	r2, #132	@ 0x84
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f008 fd90 	bl	800e6e6 <memset>
  if(uartHandle->Instance==UART7)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a75      	ldr	r2, [pc, #468]	@ (8005da0 <HAL_UART_MspInit+0x200>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d13d      	bne.n	8005c4c <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005be0:	4618      	mov	r0, r3
 8005be2:	f003 fe11 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005bec:	f7fd fd60 	bl	80036b0 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005bf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bfc:	4b69      	ldr	r3, [pc, #420]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c08:	4b66      	ldr	r3, [pc, #408]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0c:	4a65      	ldr	r2, [pc, #404]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c0e:	f043 0320 	orr.w	r3, r3, #32
 8005c12:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c14:	4b63      	ldr	r3, [pc, #396]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005c20:	23c0      	movs	r3, #192	@ 0xc0
 8005c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c26:	2302      	movs	r3, #2
 8005c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c32:	2303      	movs	r3, #3
 8005c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c3e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005c42:	4619      	mov	r1, r3
 8005c44:	4858      	ldr	r0, [pc, #352]	@ (8005da8 <HAL_UART_MspInit+0x208>)
 8005c46:	f001 fc4b 	bl	80074e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005c4a:	e0a4      	b.n	8005d96 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a56      	ldr	r2, [pc, #344]	@ (8005dac <HAL_UART_MspInit+0x20c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d15d      	bne.n	8005d12 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005c56:	2340      	movs	r3, #64	@ 0x40
 8005c58:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c62:	4618      	mov	r0, r3
 8005c64:	f003 fdd0 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005c6e:	f7fd fd1f 	bl	80036b0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c72:	4b4c      	ldr	r3, [pc, #304]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	4a4b      	ldr	r2, [pc, #300]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c78:	f043 0310 	orr.w	r3, r3, #16
 8005c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c7e:	4b49      	ldr	r3, [pc, #292]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c8a:	4b46      	ldr	r3, [pc, #280]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8e:	4a45      	ldr	r2, [pc, #276]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c90:	f043 0302 	orr.w	r3, r3, #2
 8005c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c96:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca2:	4b40      	ldr	r3, [pc, #256]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cae:	4b3d      	ldr	r3, [pc, #244]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005cba:	2380      	movs	r3, #128	@ 0x80
 8005cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005cd2:	2307      	movs	r3, #7
 8005cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005cd8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4834      	ldr	r0, [pc, #208]	@ (8005db0 <HAL_UART_MspInit+0x210>)
 8005ce0:	f001 fbfe 	bl	80074e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cec:	2302      	movs	r3, #2
 8005cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005cfe:	2307      	movs	r3, #7
 8005d00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005d04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005d08:	4619      	mov	r1, r3
 8005d0a:	482a      	ldr	r0, [pc, #168]	@ (8005db4 <HAL_UART_MspInit+0x214>)
 8005d0c:	f001 fbe8 	bl	80074e0 <HAL_GPIO_Init>
}
 8005d10:	e041      	b.n	8005d96 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a28      	ldr	r2, [pc, #160]	@ (8005db8 <HAL_UART_MspInit+0x218>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d13c      	bne.n	8005d96 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005d1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f003 fd6b 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005d38:	f7fd fcba 	bl	80036b0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005d3c:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d40:	4a18      	ldr	r2, [pc, #96]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005d42:	f043 0320 	orr.w	r3, r3, #32
 8005d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d48:	4b16      	ldr	r3, [pc, #88]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d54:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d58:	4a12      	ldr	r2, [pc, #72]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005d5a:	f043 0304 	orr.w	r3, r3, #4
 8005d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d60:	4b10      	ldr	r3, [pc, #64]	@ (8005da4 <HAL_UART_MspInit+0x204>)
 8005d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005d6c:	23c0      	movs	r3, #192	@ 0xc0
 8005d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d72:	2302      	movs	r3, #2
 8005d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005d84:	2308      	movs	r3, #8
 8005d86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d8a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005d8e:	4619      	mov	r1, r3
 8005d90:	480a      	ldr	r0, [pc, #40]	@ (8005dbc <HAL_UART_MspInit+0x21c>)
 8005d92:	f001 fba5 	bl	80074e0 <HAL_GPIO_Init>
}
 8005d96:	bf00      	nop
 8005d98:	37c0      	adds	r7, #192	@ 0xc0
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40007800 	.word	0x40007800
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40021400 	.word	0x40021400
 8005dac:	40011000 	.word	0x40011000
 8005db0:	40020400 	.word	0x40020400
 8005db4:	40020000 	.word	0x40020000
 8005db8:	40011400 	.word	0x40011400
 8005dbc:	40020800 	.word	0x40020800

08005dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005dc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005dc4:	480d      	ldr	r0, [pc, #52]	@ (8005dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005dc6:	490e      	ldr	r1, [pc, #56]	@ (8005e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8005e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dcc:	e002      	b.n	8005dd4 <LoopCopyDataInit>

08005dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dd2:	3304      	adds	r3, #4

08005dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dd8:	d3f9      	bcc.n	8005dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dda:	4a0b      	ldr	r2, [pc, #44]	@ (8005e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005ddc:	4c0b      	ldr	r4, [pc, #44]	@ (8005e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005de0:	e001      	b.n	8005de6 <LoopFillZerobss>

08005de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005de4:	3204      	adds	r2, #4

08005de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005de8:	d3fb      	bcc.n	8005de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005dea:	f7ff fc13 	bl	8005614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dee:	f008 fd25 	bl	800e83c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005df2:	f7fd fb5f 	bl	80034b4 <main>
  bx  lr    
 8005df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005df8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e00:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005e04:	0801dde8 	.word	0x0801dde8
  ldr r2, =_sbss
 8005e08:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8005e0c:	20004d6c 	.word	0x20004d6c

08005e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e10:	e7fe      	b.n	8005e10 <ADC_IRQHandler>

08005e12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e16:	2003      	movs	r0, #3
 8005e18:	f000 fcf3 	bl	8006802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e1c:	200f      	movs	r0, #15
 8005e1e:	f7ff fa75 	bl	800530c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e22:	f7ff fa4b 	bl	80052bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e30:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <HAL_IncTick+0x20>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <HAL_IncTick+0x24>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	4a04      	ldr	r2, [pc, #16]	@ (8005e50 <HAL_IncTick+0x24>)
 8005e3e:	6013      	str	r3, [r2, #0]
}
 8005e40:	bf00      	nop
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000050 	.word	0x20000050
 8005e50:	20000ed0 	.word	0x20000ed0

08005e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  return uwTick;
 8005e58:	4b03      	ldr	r3, [pc, #12]	@ (8005e68 <HAL_GetTick+0x14>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000ed0 	.word	0x20000ed0

08005e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e74:	f7ff ffee 	bl	8005e54 <HAL_GetTick>
 8005e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d005      	beq.n	8005e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e86:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb0 <HAL_Delay+0x44>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e92:	bf00      	nop
 8005e94:	f7ff ffde 	bl	8005e54 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d8f7      	bhi.n	8005e94 <HAL_Delay+0x28>
  {
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000050 	.word	0x20000050

08005eb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e031      	b.n	8005f2e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fa fff6 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	f003 0310 	and.w	r3, r3, #16
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d116      	bne.n	8005f20 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ef6:	4b10      	ldr	r3, [pc, #64]	@ (8005f38 <HAL_ADC_Init+0x84>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	f043 0202 	orr.w	r2, r3, #2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fad6 	bl	80064b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	f023 0303 	bic.w	r3, r3, #3
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f1e:	e001      	b.n	8005f24 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	ffffeefd 	.word	0xffffeefd

08005f3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_ADC_Start+0x1a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e0ad      	b.n	80060b2 <HAL_ADC_Start+0x176>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d018      	beq.n	8005f9e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005f7c:	4b50      	ldr	r3, [pc, #320]	@ (80060c0 <HAL_ADC_Start+0x184>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a50      	ldr	r2, [pc, #320]	@ (80060c4 <HAL_ADC_Start+0x188>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	0c9a      	lsrs	r2, r3, #18
 8005f88:	4613      	mov	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005f90:	e002      	b.n	8005f98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f9      	bne.n	8005f92 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d175      	bne.n	8006098 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fb0:	4b45      	ldr	r3, [pc, #276]	@ (80060c8 <HAL_ADC_Start+0x18c>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005fd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe6:	d106      	bne.n	8005ff6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fec:	f023 0206 	bic.w	r2, r3, #6
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ff4:	e002      	b.n	8005ffc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800600c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800600e:	4b2f      	ldr	r3, [pc, #188]	@ (80060cc <HAL_ADC_Start+0x190>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d143      	bne.n	80060b0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	e03a      	b.n	80060b0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a24      	ldr	r2, [pc, #144]	@ (80060d0 <HAL_ADC_Start+0x194>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d10e      	bne.n	8006062 <HAL_ADC_Start+0x126>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006060:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006062:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <HAL_ADC_Start+0x190>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	d120      	bne.n	80060b0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a18      	ldr	r2, [pc, #96]	@ (80060d4 <HAL_ADC_Start+0x198>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d11b      	bne.n	80060b0 <HAL_ADC_Start+0x174>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d114      	bne.n	80060b0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	e00b      	b.n	80060b0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	f043 0210 	orr.w	r2, r3, #16
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a8:	f043 0201 	orr.w	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000048 	.word	0x20000048
 80060c4:	431bde83 	.word	0x431bde83
 80060c8:	fffff8fe 	.word	0xfffff8fe
 80060cc:	40012300 	.word	0x40012300
 80060d0:	40012000 	.word	0x40012000
 80060d4:	40012200 	.word	0x40012200

080060d8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f4:	d113      	bne.n	800611e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006104:	d10b      	bne.n	800611e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e063      	b.n	80061e6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800611e:	f7ff fe99 	bl	8005e54 <HAL_GetTick>
 8006122:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006124:	e021      	b.n	800616a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d01d      	beq.n	800616a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_ADC_PollForConversion+0x6c>
 8006134:	f7ff fe8e 	bl	8005e54 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d212      	bcs.n	800616a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d00b      	beq.n	800616a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f043 0204 	orr.w	r2, r3, #4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e03d      	b.n	80061e6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d1d6      	bne.n	8006126 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0212 	mvn.w	r2, #18
 8006180:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d123      	bne.n	80061e4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11f      	bne.n	80061e4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d006      	beq.n	80061c0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d111      	bne.n	80061e4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x1c>
 8006220:	2302      	movs	r3, #2
 8006222:	e136      	b.n	8006492 <HAL_ADC_ConfigChannel+0x28a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b09      	cmp	r3, #9
 8006232:	d93a      	bls.n	80062aa <HAL_ADC_ConfigChannel+0xa2>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800623c:	d035      	beq.n	80062aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68d9      	ldr	r1, [r3, #12]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	4613      	mov	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	4413      	add	r3, r2
 8006252:	3b1e      	subs	r3, #30
 8006254:	2207      	movs	r2, #7
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43da      	mvns	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	400a      	ands	r2, r1
 8006262:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a8d      	ldr	r2, [pc, #564]	@ (80064a0 <HAL_ADC_ConfigChannel+0x298>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10a      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68d9      	ldr	r1, [r3, #12]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	061a      	lsls	r2, r3, #24
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006282:	e035      	b.n	80062f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68d9      	ldr	r1, [r3, #12]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	4618      	mov	r0, r3
 8006296:	4603      	mov	r3, r0
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4403      	add	r3, r0
 800629c:	3b1e      	subs	r3, #30
 800629e:	409a      	lsls	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062a8:	e022      	b.n	80062f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6919      	ldr	r1, [r3, #16]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	4613      	mov	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	2207      	movs	r2, #7
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	43da      	mvns	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	400a      	ands	r2, r1
 80062cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6919      	ldr	r1, [r3, #16]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	4618      	mov	r0, r3
 80062e0:	4603      	mov	r3, r0
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4403      	add	r3, r0
 80062e6:	409a      	lsls	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b06      	cmp	r3, #6
 80062f6:	d824      	bhi.n	8006342 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	3b05      	subs	r3, #5
 800630a:	221f      	movs	r2, #31
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43da      	mvns	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	400a      	ands	r2, r1
 8006318:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	4618      	mov	r0, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	3b05      	subs	r3, #5
 8006334:	fa00 f203 	lsl.w	r2, r0, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006340:	e04c      	b.n	80063dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d824      	bhi.n	8006394 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	3b23      	subs	r3, #35	@ 0x23
 800635c:	221f      	movs	r2, #31
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	43da      	mvns	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	400a      	ands	r2, r1
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	4618      	mov	r0, r3
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	3b23      	subs	r3, #35	@ 0x23
 8006386:	fa00 f203 	lsl.w	r2, r0, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	631a      	str	r2, [r3, #48]	@ 0x30
 8006392:	e023      	b.n	80063dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	3b41      	subs	r3, #65	@ 0x41
 80063a6:	221f      	movs	r2, #31
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43da      	mvns	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	400a      	ands	r2, r1
 80063b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	4618      	mov	r0, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	3b41      	subs	r3, #65	@ 0x41
 80063d0:	fa00 f203 	lsl.w	r2, r0, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a30      	ldr	r2, [pc, #192]	@ (80064a4 <HAL_ADC_ConfigChannel+0x29c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10a      	bne.n	80063fc <HAL_ADC_ConfigChannel+0x1f4>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063ee:	d105      	bne.n	80063fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80063f0:	4b2d      	ldr	r3, [pc, #180]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4a2c      	ldr	r2, [pc, #176]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80063f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80063fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a28      	ldr	r2, [pc, #160]	@ (80064a4 <HAL_ADC_ConfigChannel+0x29c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d10f      	bne.n	8006426 <HAL_ADC_ConfigChannel+0x21e>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b12      	cmp	r3, #18
 800640c:	d10b      	bne.n	8006426 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800640e:	4b26      	ldr	r3, [pc, #152]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4a25      	ldr	r2, [pc, #148]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006414:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006418:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800641a:	4b23      	ldr	r3, [pc, #140]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4a22      	ldr	r2, [pc, #136]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006424:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1e      	ldr	r2, [pc, #120]	@ (80064a4 <HAL_ADC_ConfigChannel+0x29c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d12b      	bne.n	8006488 <HAL_ADC_ConfigChannel+0x280>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1a      	ldr	r2, [pc, #104]	@ (80064a0 <HAL_ADC_ConfigChannel+0x298>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <HAL_ADC_ConfigChannel+0x23a>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b11      	cmp	r3, #17
 8006440:	d122      	bne.n	8006488 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006442:	4b19      	ldr	r3, [pc, #100]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006448:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800644c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800644e:	4b16      	ldr	r3, [pc, #88]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006454:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006458:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a10      	ldr	r2, [pc, #64]	@ (80064a0 <HAL_ADC_ConfigChannel+0x298>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d111      	bne.n	8006488 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006464:	4b11      	ldr	r3, [pc, #68]	@ (80064ac <HAL_ADC_ConfigChannel+0x2a4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a11      	ldr	r2, [pc, #68]	@ (80064b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	0c9a      	lsrs	r2, r3, #18
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800647a:	e002      	b.n	8006482 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3b01      	subs	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1f9      	bne.n	800647c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	10000012 	.word	0x10000012
 80064a4:	40012000 	.word	0x40012000
 80064a8:	40012300 	.word	0x40012300
 80064ac:	20000048 	.word	0x20000048
 80064b0:	431bde83 	.word	0x431bde83

080064b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80064bc:	4b78      	ldr	r3, [pc, #480]	@ (80066a0 <ADC_Init+0x1ec>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a77      	ldr	r2, [pc, #476]	@ (80066a0 <ADC_Init+0x1ec>)
 80064c2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80064c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80064c8:	4b75      	ldr	r3, [pc, #468]	@ (80066a0 <ADC_Init+0x1ec>)
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4973      	ldr	r1, [pc, #460]	@ (80066a0 <ADC_Init+0x1ec>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6859      	ldr	r1, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	021a      	lsls	r2, r3, #8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6859      	ldr	r1, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800652a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6899      	ldr	r1, [r3, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	4a58      	ldr	r2, [pc, #352]	@ (80066a4 <ADC_Init+0x1f0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d022      	beq.n	800658e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006556:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6899      	ldr	r1, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]
 800658c:	e00f      	b.n	80065ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800659c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80065ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0202 	bic.w	r2, r2, #2
 80065bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6899      	ldr	r1, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	005a      	lsls	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01b      	beq.n	8006614 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80065fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	3b01      	subs	r3, #1
 8006608:	035a      	lsls	r2, r3, #13
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	e007      	b.n	8006624 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006622:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	3b01      	subs	r3, #1
 8006640:	051a      	lsls	r2, r3, #20
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006666:	025a      	lsls	r2, r3, #9
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800667e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6899      	ldr	r1, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	029a      	lsls	r2, r3, #10
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40012300 	.word	0x40012300
 80066a4:	0f000001 	.word	0x0f000001

080066a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066b8:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <__NVIC_SetPriorityGrouping+0x40>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066c4:	4013      	ands	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80066d0:	4b06      	ldr	r3, [pc, #24]	@ (80066ec <__NVIC_SetPriorityGrouping+0x44>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066d6:	4a04      	ldr	r2, [pc, #16]	@ (80066e8 <__NVIC_SetPriorityGrouping+0x40>)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	60d3      	str	r3, [r2, #12]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	e000ed00 	.word	0xe000ed00
 80066ec:	05fa0000 	.word	0x05fa0000

080066f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066f4:	4b04      	ldr	r3, [pc, #16]	@ (8006708 <__NVIC_GetPriorityGrouping+0x18>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	f003 0307 	and.w	r3, r3, #7
}
 80066fe:	4618      	mov	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	e000ed00 	.word	0xe000ed00

0800670c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671a:	2b00      	cmp	r3, #0
 800671c:	db0b      	blt.n	8006736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	f003 021f 	and.w	r2, r3, #31
 8006724:	4907      	ldr	r1, [pc, #28]	@ (8006744 <__NVIC_EnableIRQ+0x38>)
 8006726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	2001      	movs	r0, #1
 800672e:	fa00 f202 	lsl.w	r2, r0, r2
 8006732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	e000e100 	.word	0xe000e100

08006748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	6039      	str	r1, [r7, #0]
 8006752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006758:	2b00      	cmp	r3, #0
 800675a:	db0a      	blt.n	8006772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	b2da      	uxtb	r2, r3
 8006760:	490c      	ldr	r1, [pc, #48]	@ (8006794 <__NVIC_SetPriority+0x4c>)
 8006762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006766:	0112      	lsls	r2, r2, #4
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	440b      	add	r3, r1
 800676c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006770:	e00a      	b.n	8006788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	4908      	ldr	r1, [pc, #32]	@ (8006798 <__NVIC_SetPriority+0x50>)
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	3b04      	subs	r3, #4
 8006780:	0112      	lsls	r2, r2, #4
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	440b      	add	r3, r1
 8006786:	761a      	strb	r2, [r3, #24]
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	e000e100 	.word	0xe000e100
 8006798:	e000ed00 	.word	0xe000ed00

0800679c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800679c:	b480      	push	{r7}
 800679e:	b089      	sub	sp, #36	@ 0x24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f1c3 0307 	rsb	r3, r3, #7
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	bf28      	it	cs
 80067ba:	2304      	movcs	r3, #4
 80067bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	3304      	adds	r3, #4
 80067c2:	2b06      	cmp	r3, #6
 80067c4:	d902      	bls.n	80067cc <NVIC_EncodePriority+0x30>
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	3b03      	subs	r3, #3
 80067ca:	e000      	b.n	80067ce <NVIC_EncodePriority+0x32>
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067d0:	f04f 32ff 	mov.w	r2, #4294967295
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	43da      	mvns	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	401a      	ands	r2, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067e4:	f04f 31ff 	mov.w	r1, #4294967295
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	fa01 f303 	lsl.w	r3, r1, r3
 80067ee:	43d9      	mvns	r1, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f4:	4313      	orrs	r3, r2
         );
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3724      	adds	r7, #36	@ 0x24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ff4c 	bl	80066a8 <__NVIC_SetPriorityGrouping>
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800682a:	f7ff ff61 	bl	80066f0 <__NVIC_GetPriorityGrouping>
 800682e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	6978      	ldr	r0, [r7, #20]
 8006836:	f7ff ffb1 	bl	800679c <NVIC_EncodePriority>
 800683a:	4602      	mov	r2, r0
 800683c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff ff80 	bl	8006748 <__NVIC_SetPriority>
}
 8006848:	bf00      	nop
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff ff54 	bl	800670c <__NVIC_EnableIRQ>
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e014      	b.n	80068a8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	791b      	ldrb	r3, [r3, #4]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fa fbb0 	bl	8000ff4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c6:	d120      	bne.n	800690a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d6:	d118      	bne.n	800690a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2204      	movs	r2, #4
 80068dc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f043 0201 	orr.w	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006902:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f82d 	bl	8006964 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006918:	d120      	bne.n	800695c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006928:	d118      	bne.n	800695c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2204      	movs	r2, #4
 800692e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f043 0202 	orr.w	r2, r3, #2
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006944:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f85d 	bl	8006a16 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	795b      	ldrb	r3, [r3, #5]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_DAC_ConfigChannel+0x18>
 800698c:	2302      	movs	r3, #2
 800698e:	e03c      	b.n	8006a0a <HAL_DAC_ConfigChannel+0x92>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2202      	movs	r2, #2
 800699a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4013      	ands	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6819      	ldr	r1, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	22c0      	movs	r2, #192	@ 0xc0
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43da      	mvns	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	400a      	ands	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a38:	f7ff fa0c 	bl	8005e54 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e099      	b.n	8006b7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0201 	bic.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a68:	e00f      	b.n	8006a8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a6a:	f7ff f9f3 	bl	8005e54 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	d908      	bls.n	8006a8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2203      	movs	r2, #3
 8006a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e078      	b.n	8006b7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e8      	bne.n	8006a6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4b38      	ldr	r3, [pc, #224]	@ (8006b84 <HAL_DMA_Init+0x158>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d107      	bne.n	8006af4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	4313      	orrs	r3, r2
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0307 	bic.w	r3, r3, #7
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d117      	bne.n	8006b4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f8bd 	bl	8006cb0 <DMA_CheckFifoParam>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d008      	beq.n	8006b4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2240      	movs	r2, #64	@ 0x40
 8006b40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e016      	b.n	8006b7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f874 	bl	8006c44 <DMA_CalcBaseAndBitshift>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b64:	223f      	movs	r2, #63	@ 0x3f
 8006b66:	409a      	lsls	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	f010803f 	.word	0xf010803f

08006b88 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e050      	b.n	8006c3c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d101      	bne.n	8006baa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e048      	b.n	8006c3c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2221      	movs	r2, #33	@ 0x21
 8006be8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f82a 	bl	8006c44 <DMA_CalcBaseAndBitshift>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf8:	223f      	movs	r2, #63	@ 0x3f
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	3b10      	subs	r3, #16
 8006c54:	4a13      	ldr	r2, [pc, #76]	@ (8006ca4 <DMA_CalcBaseAndBitshift+0x60>)
 8006c56:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c5e:	4a12      	ldr	r2, [pc, #72]	@ (8006ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d908      	bls.n	8006c84 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	4b0c      	ldr	r3, [pc, #48]	@ (8006cac <DMA_CalcBaseAndBitshift+0x68>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	1d1a      	adds	r2, r3, #4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c82:	e006      	b.n	8006c92 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4b08      	ldr	r3, [pc, #32]	@ (8006cac <DMA_CalcBaseAndBitshift+0x68>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	aaaaaaab 	.word	0xaaaaaaab
 8006ca8:	0801dcf0 	.word	0x0801dcf0
 8006cac:	fffffc00 	.word	0xfffffc00

08006cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d11f      	bne.n	8006d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d856      	bhi.n	8006d7e <DMA_CheckFifoParam+0xce>
 8006cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd8 <DMA_CheckFifoParam+0x28>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cfb 	.word	0x08006cfb
 8006ce0:	08006ce9 	.word	0x08006ce9
 8006ce4:	08006d7f 	.word	0x08006d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d046      	beq.n	8006d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cf8:	e043      	b.n	8006d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d02:	d140      	bne.n	8006d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d08:	e03d      	b.n	8006d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d12:	d121      	bne.n	8006d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d837      	bhi.n	8006d8a <DMA_CheckFifoParam+0xda>
 8006d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <DMA_CheckFifoParam+0x70>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d31 	.word	0x08006d31
 8006d24:	08006d37 	.word	0x08006d37
 8006d28:	08006d31 	.word	0x08006d31
 8006d2c:	08006d49 	.word	0x08006d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	e030      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d025      	beq.n	8006d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d46:	e022      	b.n	8006d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d50:	d11f      	bne.n	8006d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d56:	e01c      	b.n	8006d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d903      	bls.n	8006d66 <DMA_CheckFifoParam+0xb6>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d003      	beq.n	8006d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d64:	e018      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6a:	e015      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7c:	e00b      	b.n	8006d96 <DMA_CheckFifoParam+0xe6>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e00a      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      break;
 8006d82:	bf00      	nop
 8006d84:	e008      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      break;
 8006d86:	bf00      	nop
 8006d88:	e006      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      break;
 8006d8a:	bf00      	nop
 8006d8c:	e004      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e002      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <DMA_CheckFifoParam+0xe8>
      break;
 8006d96:	bf00      	nop
    }
  } 
  
  return status; 
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e039      	b.n	8006e2e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fa f98a 	bl	80010e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df8:	f023 0107 	bic.w	r1, r3, #7
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e38 <HAL_DMA2D_Init+0x90>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68d1      	ldr	r1, [r2, #12]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	ffffc000 	.word	0xffffc000

08006e3c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_DMA2D_Start+0x1c>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e018      	b.n	8006e8a <HAL_DMA2D_Start+0x4e>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fa98 	bl	80073a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b086      	sub	sp, #24
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d056      	beq.n	8006f5c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eae:	f7fe ffd1 	bl	8005e54 <HAL_GetTick>
 8006eb2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006eb4:	e04b      	b.n	8006f4e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d023      	beq.n	8006f10 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d005      	beq.n	8006ede <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed6:	f043 0202 	orr.w	r2, r3, #2
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	f043 0201 	orr.w	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2221      	movs	r2, #33	@ 0x21
 8006efa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2204      	movs	r2, #4
 8006f00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e0a5      	b.n	800705c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d01a      	beq.n	8006f4e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f18:	f7fe ff9c 	bl	8005e54 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d302      	bcc.n	8006f2e <HAL_DMA2D_PollForTransfer+0x9c>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10f      	bne.n	8006f4e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f32:	f043 0220 	orr.w	r2, r3, #32
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2203      	movs	r2, #3
 8006f3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e086      	b.n	800705c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0ac      	beq.n	8006eb6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d061      	beq.n	8007042 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f7e:	f7fe ff69 	bl	8005e54 <HAL_GetTick>
 8006f82:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006f84:	e056      	b.n	8007034 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d02e      	beq.n	8006ff6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa6:	f043 0204 	orr.w	r2, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fbc:	f043 0202 	orr.w	r2, r3, #2
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2229      	movs	r2, #41	@ 0x29
 8006fe0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e032      	b.n	800705c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d01a      	beq.n	8007034 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ffe:	f7fe ff29 	bl	8005e54 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d302      	bcc.n	8007014 <HAL_DMA2D_PollForTransfer+0x182>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10f      	bne.n	8007034 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007018:	f043 0220 	orr.w	r2, r3, #32
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2203      	movs	r2, #3
 8007024:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e013      	b.n	800705c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f003 0310 	and.w	r3, r3, #16
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0a1      	beq.n	8006f86 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2212      	movs	r2, #18
 8007048:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d026      	beq.n	80070d4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d021      	beq.n	80070d4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800709e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a4:	f043 0201 	orr.w	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2201      	movs	r2, #1
 80070b2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2204      	movs	r2, #4
 80070b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d026      	beq.n	800712c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d021      	beq.n	800712c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070f6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2220      	movs	r2, #32
 80070fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007104:	f043 0202 	orr.w	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2204      	movs	r2, #4
 8007110:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d026      	beq.n	8007184 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800713c:	2b00      	cmp	r3, #0
 800713e:	d021      	beq.n	8007184 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800714e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2208      	movs	r2, #8
 8007156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715c:	f043 0204 	orr.w	r2, r3, #4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2204      	movs	r2, #4
 8007168:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d013      	beq.n	80071b6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00e      	beq.n	80071b6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2204      	movs	r2, #4
 80071ae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f853 	bl	800725c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d024      	beq.n	800720a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01f      	beq.n	800720a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80071d8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2202      	movs	r2, #2
 80071e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01f      	beq.n	8007254 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01a      	beq.n	8007254 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800722c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2210      	movs	r2, #16
 8007234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f80e 	bl	8007270 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_DMA2D_ConfigLayer+0x20>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e079      	b.n	8007398 <HAL_DMA2D_ConfigLayer+0x114>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	3318      	adds	r3, #24
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	4413      	add	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80072ce:	4b35      	ldr	r3, [pc, #212]	@ (80073a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80072d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b0a      	cmp	r3, #10
 80072d8:	d003      	beq.n	80072e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b09      	cmp	r3, #9
 80072e0:	d107      	bne.n	80072f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e005      	b.n	80072fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	061b      	lsls	r3, r3, #24
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d120      	bne.n	8007346 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	43db      	mvns	r3, r3
 800730e:	ea02 0103 	and.w	r1, r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	430a      	orrs	r2, r1
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b0a      	cmp	r3, #10
 800732c:	d003      	beq.n	8007336 <HAL_DMA2D_ConfigLayer+0xb2>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b09      	cmp	r3, #9
 8007334:	d127      	bne.n	8007386 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007342:	629a      	str	r2, [r3, #40]	@ 0x28
 8007344:	e01f      	b.n	8007386 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	43db      	mvns	r3, r3
 8007350:	ea02 0103 	and.w	r1, r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	430a      	orrs	r2, r1
 800735c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b0a      	cmp	r3, #10
 800736e:	d003      	beq.n	8007378 <HAL_DMA2D_ConfigLayer+0xf4>
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b09      	cmp	r3, #9
 8007376:	d106      	bne.n	8007386 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007384:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	ff03000f 	.word	0xff03000f

080073a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b08b      	sub	sp, #44	@ 0x2c
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073bc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	041a      	lsls	r2, r3, #16
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	431a      	orrs	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073e0:	d174      	bne.n	80074cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80073e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80073f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d108      	bne.n	800741a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	431a      	orrs	r2, r3
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	4313      	orrs	r3, r2
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
 8007418:	e053      	b.n	80074c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d106      	bne.n	8007430 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4313      	orrs	r3, r2
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	e048      	b.n	80074c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d111      	bne.n	800745c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	0cdb      	lsrs	r3, r3, #19
 800743c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	0a9b      	lsrs	r3, r3, #10
 8007442:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	08db      	lsrs	r3, r3, #3
 8007448:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	02db      	lsls	r3, r3, #11
 8007452:	4313      	orrs	r3, r2
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	627b      	str	r3, [r7, #36]	@ 0x24
 800745a:	e032      	b.n	80074c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d117      	bne.n	8007494 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	0fdb      	lsrs	r3, r3, #31
 8007468:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	0cdb      	lsrs	r3, r3, #19
 800746e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	0adb      	lsrs	r3, r3, #11
 8007474:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	08db      	lsrs	r3, r3, #3
 800747a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	029b      	lsls	r3, r3, #10
 8007484:	431a      	orrs	r2, r3
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	03db      	lsls	r3, r3, #15
 800748a:	4313      	orrs	r3, r2
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
 8007492:	e016      	b.n	80074c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	0f1b      	lsrs	r3, r3, #28
 8007498:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	0d1b      	lsrs	r3, r3, #20
 800749e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	0b1b      	lsrs	r3, r3, #12
 80074a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	091b      	lsrs	r3, r3, #4
 80074aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	011a      	lsls	r2, r3, #4
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	431a      	orrs	r2, r3
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	031b      	lsls	r3, r3, #12
 80074ba:	4313      	orrs	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80074ca:	e003      	b.n	80074d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	60da      	str	r2, [r3, #12]
}
 80074d4:	bf00      	nop
 80074d6:	372c      	adds	r7, #44	@ 0x2c
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b089      	sub	sp, #36	@ 0x24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	e175      	b.n	80077ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007500:	2201      	movs	r2, #1
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4013      	ands	r3, r2
 8007512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	429a      	cmp	r2, r3
 800751a:	f040 8164 	bne.w	80077e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d005      	beq.n	8007536 <HAL_GPIO_Init+0x56>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d130      	bne.n	8007598 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	2203      	movs	r2, #3
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	43db      	mvns	r3, r3
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	4013      	ands	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4313      	orrs	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800756c:	2201      	movs	r2, #1
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	43db      	mvns	r3, r3
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	4013      	ands	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	f003 0201 	and.w	r2, r3, #1
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	4313      	orrs	r3, r2
 8007590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d017      	beq.n	80075d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	2203      	movs	r2, #3
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	43db      	mvns	r3, r3
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	4013      	ands	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d123      	bne.n	8007628 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	08da      	lsrs	r2, r3, #3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3208      	adds	r2, #8
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	220f      	movs	r2, #15
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	43db      	mvns	r3, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	4013      	ands	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	4313      	orrs	r3, r2
 8007618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	08da      	lsrs	r2, r3, #3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3208      	adds	r2, #8
 8007622:	69b9      	ldr	r1, [r7, #24]
 8007624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	2203      	movs	r2, #3
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	43db      	mvns	r3, r3
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	4013      	ands	r3, r2
 800763e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 0203 	and.w	r2, r3, #3
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4313      	orrs	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80be 	beq.w	80077e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800766a:	4b66      	ldr	r3, [pc, #408]	@ (8007804 <HAL_GPIO_Init+0x324>)
 800766c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766e:	4a65      	ldr	r2, [pc, #404]	@ (8007804 <HAL_GPIO_Init+0x324>)
 8007670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007674:	6453      	str	r3, [r2, #68]	@ 0x44
 8007676:	4b63      	ldr	r3, [pc, #396]	@ (8007804 <HAL_GPIO_Init+0x324>)
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007682:	4a61      	ldr	r2, [pc, #388]	@ (8007808 <HAL_GPIO_Init+0x328>)
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	089b      	lsrs	r3, r3, #2
 8007688:	3302      	adds	r3, #2
 800768a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800768e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	220f      	movs	r2, #15
 800769a:	fa02 f303 	lsl.w	r3, r2, r3
 800769e:	43db      	mvns	r3, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	4013      	ands	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a58      	ldr	r2, [pc, #352]	@ (800780c <HAL_GPIO_Init+0x32c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d037      	beq.n	800771e <HAL_GPIO_Init+0x23e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a57      	ldr	r2, [pc, #348]	@ (8007810 <HAL_GPIO_Init+0x330>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d031      	beq.n	800771a <HAL_GPIO_Init+0x23a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a56      	ldr	r2, [pc, #344]	@ (8007814 <HAL_GPIO_Init+0x334>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d02b      	beq.n	8007716 <HAL_GPIO_Init+0x236>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a55      	ldr	r2, [pc, #340]	@ (8007818 <HAL_GPIO_Init+0x338>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d025      	beq.n	8007712 <HAL_GPIO_Init+0x232>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a54      	ldr	r2, [pc, #336]	@ (800781c <HAL_GPIO_Init+0x33c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01f      	beq.n	800770e <HAL_GPIO_Init+0x22e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a53      	ldr	r2, [pc, #332]	@ (8007820 <HAL_GPIO_Init+0x340>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d019      	beq.n	800770a <HAL_GPIO_Init+0x22a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a52      	ldr	r2, [pc, #328]	@ (8007824 <HAL_GPIO_Init+0x344>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <HAL_GPIO_Init+0x226>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a51      	ldr	r2, [pc, #324]	@ (8007828 <HAL_GPIO_Init+0x348>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00d      	beq.n	8007702 <HAL_GPIO_Init+0x222>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a50      	ldr	r2, [pc, #320]	@ (800782c <HAL_GPIO_Init+0x34c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d007      	beq.n	80076fe <HAL_GPIO_Init+0x21e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a4f      	ldr	r2, [pc, #316]	@ (8007830 <HAL_GPIO_Init+0x350>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d101      	bne.n	80076fa <HAL_GPIO_Init+0x21a>
 80076f6:	2309      	movs	r3, #9
 80076f8:	e012      	b.n	8007720 <HAL_GPIO_Init+0x240>
 80076fa:	230a      	movs	r3, #10
 80076fc:	e010      	b.n	8007720 <HAL_GPIO_Init+0x240>
 80076fe:	2308      	movs	r3, #8
 8007700:	e00e      	b.n	8007720 <HAL_GPIO_Init+0x240>
 8007702:	2307      	movs	r3, #7
 8007704:	e00c      	b.n	8007720 <HAL_GPIO_Init+0x240>
 8007706:	2306      	movs	r3, #6
 8007708:	e00a      	b.n	8007720 <HAL_GPIO_Init+0x240>
 800770a:	2305      	movs	r3, #5
 800770c:	e008      	b.n	8007720 <HAL_GPIO_Init+0x240>
 800770e:	2304      	movs	r3, #4
 8007710:	e006      	b.n	8007720 <HAL_GPIO_Init+0x240>
 8007712:	2303      	movs	r3, #3
 8007714:	e004      	b.n	8007720 <HAL_GPIO_Init+0x240>
 8007716:	2302      	movs	r3, #2
 8007718:	e002      	b.n	8007720 <HAL_GPIO_Init+0x240>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_GPIO_Init+0x240>
 800771e:	2300      	movs	r3, #0
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	f002 0203 	and.w	r2, r2, #3
 8007726:	0092      	lsls	r2, r2, #2
 8007728:	4093      	lsls	r3, r2
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	4313      	orrs	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007730:	4935      	ldr	r1, [pc, #212]	@ (8007808 <HAL_GPIO_Init+0x328>)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	089b      	lsrs	r3, r3, #2
 8007736:	3302      	adds	r3, #2
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800773e:	4b3d      	ldr	r3, [pc, #244]	@ (8007834 <HAL_GPIO_Init+0x354>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	43db      	mvns	r3, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4013      	ands	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007762:	4a34      	ldr	r2, [pc, #208]	@ (8007834 <HAL_GPIO_Init+0x354>)
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007768:	4b32      	ldr	r3, [pc, #200]	@ (8007834 <HAL_GPIO_Init+0x354>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	43db      	mvns	r3, r3
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	4013      	ands	r3, r2
 8007776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800778c:	4a29      	ldr	r2, [pc, #164]	@ (8007834 <HAL_GPIO_Init+0x354>)
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007792:	4b28      	ldr	r3, [pc, #160]	@ (8007834 <HAL_GPIO_Init+0x354>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	43db      	mvns	r3, r3
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	4013      	ands	r3, r2
 80077a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007834 <HAL_GPIO_Init+0x354>)
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007834 <HAL_GPIO_Init+0x354>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	4013      	ands	r3, r2
 80077ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4313      	orrs	r3, r2
 80077de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077e0:	4a14      	ldr	r2, [pc, #80]	@ (8007834 <HAL_GPIO_Init+0x354>)
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	3301      	adds	r3, #1
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b0f      	cmp	r3, #15
 80077f0:	f67f ae86 	bls.w	8007500 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	3724      	adds	r7, #36	@ 0x24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40023800 	.word	0x40023800
 8007808:	40013800 	.word	0x40013800
 800780c:	40020000 	.word	0x40020000
 8007810:	40020400 	.word	0x40020400
 8007814:	40020800 	.word	0x40020800
 8007818:	40020c00 	.word	0x40020c00
 800781c:	40021000 	.word	0x40021000
 8007820:	40021400 	.word	0x40021400
 8007824:	40021800 	.word	0x40021800
 8007828:	40021c00 	.word	0x40021c00
 800782c:	40022000 	.word	0x40022000
 8007830:	40022400 	.word	0x40022400
 8007834:	40013c00 	.word	0x40013c00

08007838 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800784a:	2300      	movs	r3, #0
 800784c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	e0d9      	b.n	8007a08 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007854:	2201      	movs	r2, #1
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4013      	ands	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	429a      	cmp	r2, r3
 800786c:	f040 80c9 	bne.w	8007a02 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007870:	4a6b      	ldr	r2, [pc, #428]	@ (8007a20 <HAL_GPIO_DeInit+0x1e8>)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	089b      	lsrs	r3, r3, #2
 8007876:	3302      	adds	r3, #2
 8007878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	220f      	movs	r2, #15
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	4013      	ands	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a63      	ldr	r2, [pc, #396]	@ (8007a24 <HAL_GPIO_DeInit+0x1ec>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d037      	beq.n	800790a <HAL_GPIO_DeInit+0xd2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a62      	ldr	r2, [pc, #392]	@ (8007a28 <HAL_GPIO_DeInit+0x1f0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d031      	beq.n	8007906 <HAL_GPIO_DeInit+0xce>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a61      	ldr	r2, [pc, #388]	@ (8007a2c <HAL_GPIO_DeInit+0x1f4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d02b      	beq.n	8007902 <HAL_GPIO_DeInit+0xca>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a60      	ldr	r2, [pc, #384]	@ (8007a30 <HAL_GPIO_DeInit+0x1f8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d025      	beq.n	80078fe <HAL_GPIO_DeInit+0xc6>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a5f      	ldr	r2, [pc, #380]	@ (8007a34 <HAL_GPIO_DeInit+0x1fc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01f      	beq.n	80078fa <HAL_GPIO_DeInit+0xc2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007a38 <HAL_GPIO_DeInit+0x200>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d019      	beq.n	80078f6 <HAL_GPIO_DeInit+0xbe>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a5d      	ldr	r2, [pc, #372]	@ (8007a3c <HAL_GPIO_DeInit+0x204>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_GPIO_DeInit+0xba>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a5c      	ldr	r2, [pc, #368]	@ (8007a40 <HAL_GPIO_DeInit+0x208>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00d      	beq.n	80078ee <HAL_GPIO_DeInit+0xb6>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a5b      	ldr	r2, [pc, #364]	@ (8007a44 <HAL_GPIO_DeInit+0x20c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d007      	beq.n	80078ea <HAL_GPIO_DeInit+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a5a      	ldr	r2, [pc, #360]	@ (8007a48 <HAL_GPIO_DeInit+0x210>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d101      	bne.n	80078e6 <HAL_GPIO_DeInit+0xae>
 80078e2:	2309      	movs	r3, #9
 80078e4:	e012      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 80078e6:	230a      	movs	r3, #10
 80078e8:	e010      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 80078ea:	2308      	movs	r3, #8
 80078ec:	e00e      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 80078ee:	2307      	movs	r3, #7
 80078f0:	e00c      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 80078f2:	2306      	movs	r3, #6
 80078f4:	e00a      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 80078f6:	2305      	movs	r3, #5
 80078f8:	e008      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 80078fa:	2304      	movs	r3, #4
 80078fc:	e006      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 80078fe:	2303      	movs	r3, #3
 8007900:	e004      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 8007902:	2302      	movs	r3, #2
 8007904:	e002      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <HAL_GPIO_DeInit+0xd4>
 800790a:	2300      	movs	r3, #0
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	f002 0203 	and.w	r2, r2, #3
 8007912:	0092      	lsls	r2, r2, #2
 8007914:	4093      	lsls	r3, r2
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	429a      	cmp	r2, r3
 800791a:	d132      	bne.n	8007982 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800791c:	4b4b      	ldr	r3, [pc, #300]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	43db      	mvns	r3, r3
 8007924:	4949      	ldr	r1, [pc, #292]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 8007926:	4013      	ands	r3, r2
 8007928:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800792a:	4b48      	ldr	r3, [pc, #288]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	43db      	mvns	r3, r3
 8007932:	4946      	ldr	r1, [pc, #280]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 8007934:	4013      	ands	r3, r2
 8007936:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007938:	4b44      	ldr	r3, [pc, #272]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	43db      	mvns	r3, r3
 8007940:	4942      	ldr	r1, [pc, #264]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 8007942:	4013      	ands	r3, r2
 8007944:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007946:	4b41      	ldr	r3, [pc, #260]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	43db      	mvns	r3, r3
 800794e:	493f      	ldr	r1, [pc, #252]	@ (8007a4c <HAL_GPIO_DeInit+0x214>)
 8007950:	4013      	ands	r3, r2
 8007952:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	220f      	movs	r2, #15
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007964:	4a2e      	ldr	r2, [pc, #184]	@ (8007a20 <HAL_GPIO_DeInit+0x1e8>)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	089b      	lsrs	r3, r3, #2
 800796a:	3302      	adds	r3, #2
 800796c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	43da      	mvns	r2, r3
 8007974:	482a      	ldr	r0, [pc, #168]	@ (8007a20 <HAL_GPIO_DeInit+0x1e8>)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	089b      	lsrs	r3, r3, #2
 800797a:	400a      	ands	r2, r1
 800797c:	3302      	adds	r3, #2
 800797e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	2103      	movs	r1, #3
 800798c:	fa01 f303 	lsl.w	r3, r1, r3
 8007990:	43db      	mvns	r3, r3
 8007992:	401a      	ands	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	08da      	lsrs	r2, r3, #3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3208      	adds	r2, #8
 80079a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	220f      	movs	r2, #15
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	08d2      	lsrs	r2, r2, #3
 80079b8:	4019      	ands	r1, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3208      	adds	r2, #8
 80079be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	2103      	movs	r1, #3
 80079cc:	fa01 f303 	lsl.w	r3, r1, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	401a      	ands	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	2101      	movs	r1, #1
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	fa01 f303 	lsl.w	r3, r1, r3
 80079e4:	43db      	mvns	r3, r3
 80079e6:	401a      	ands	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	2103      	movs	r1, #3
 80079f6:	fa01 f303 	lsl.w	r3, r1, r3
 80079fa:	43db      	mvns	r3, r3
 80079fc:	401a      	ands	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	3301      	adds	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2b0f      	cmp	r3, #15
 8007a0c:	f67f af22 	bls.w	8007854 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40013800 	.word	0x40013800
 8007a24:	40020000 	.word	0x40020000
 8007a28:	40020400 	.word	0x40020400
 8007a2c:	40020800 	.word	0x40020800
 8007a30:	40020c00 	.word	0x40020c00
 8007a34:	40021000 	.word	0x40021000
 8007a38:	40021400 	.word	0x40021400
 8007a3c:	40021800 	.word	0x40021800
 8007a40:	40021c00 	.word	0x40021c00
 8007a44:	40022000 	.word	0x40022000
 8007a48:	40022400 	.word	0x40022400
 8007a4c:	40013c00 	.word	0x40013c00

08007a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	807b      	strh	r3, [r7, #2]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a60:	787b      	ldrb	r3, [r7, #1]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a66:	887a      	ldrh	r2, [r7, #2]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007a6c:	e003      	b.n	8007a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007a6e:	887b      	ldrh	r3, [r7, #2]
 8007a70:	041a      	lsls	r2, r3, #16
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	619a      	str	r2, [r3, #24]
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
	...

08007a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e07f      	b.n	8007b96 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fb fa9a 	bl	8002fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2224      	movs	r2, #36	@ 0x24
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d107      	bne.n	8007afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007afa:	609a      	str	r2, [r3, #8]
 8007afc:	e006      	b.n	8007b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d104      	bne.n	8007b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6859      	ldr	r1, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba0 <HAL_I2C_Init+0x11c>)
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	69d9      	ldr	r1, [r3, #28]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1a      	ldr	r2, [r3, #32]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	02008000 	.word	0x02008000

08007ba4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e021      	b.n	8007bfa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2224      	movs	r2, #36	@ 0x24
 8007bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0201 	bic.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fb fab0 	bl	8003134 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	461a      	mov	r2, r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	817b      	strh	r3, [r7, #10]
 8007c16:	460b      	mov	r3, r1
 8007c18:	813b      	strh	r3, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	f040 80f9 	bne.w	8007e1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_I2C_Mem_Write+0x34>
 8007c32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e0ed      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_I2C_Mem_Write+0x4e>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e0e6      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c5a:	f7fe f8fb 	bl	8005e54 <HAL_GetTick>
 8007c5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2319      	movs	r3, #25
 8007c66:	2201      	movs	r2, #1
 8007c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 fad1 	bl	8008214 <I2C_WaitOnFlagUntilTimeout>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0d1      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2221      	movs	r2, #33	@ 0x21
 8007c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2240      	movs	r2, #64	@ 0x40
 8007c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a3a      	ldr	r2, [r7, #32]
 8007c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ca4:	88f8      	ldrh	r0, [r7, #6]
 8007ca6:	893a      	ldrh	r2, [r7, #8]
 8007ca8:	8979      	ldrh	r1, [r7, #10]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	9301      	str	r3, [sp, #4]
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f9e1 	bl	800807c <I2C_RequestMemoryWrite>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e0a9      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2bff      	cmp	r3, #255	@ 0xff
 8007cd4:	d90e      	bls.n	8007cf4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	22ff      	movs	r2, #255	@ 0xff
 8007cda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	8979      	ldrh	r1, [r7, #10]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fc2d 	bl	800854c <I2C_TransferConfig>
 8007cf2:	e00f      	b.n	8007d14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	8979      	ldrh	r1, [r7, #10]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fc1c 	bl	800854c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fabb 	bl	8008294 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e07b      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d034      	beq.n	8007dcc <HAL_I2C_Mem_Write+0x1c8>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d130      	bne.n	8007dcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	2200      	movs	r2, #0
 8007d72:	2180      	movs	r1, #128	@ 0x80
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fa4d 	bl	8008214 <I2C_WaitOnFlagUntilTimeout>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e04d      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2bff      	cmp	r3, #255	@ 0xff
 8007d8c:	d90e      	bls.n	8007dac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	22ff      	movs	r2, #255	@ 0xff
 8007d92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	8979      	ldrh	r1, [r7, #10]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fbd1 	bl	800854c <I2C_TransferConfig>
 8007daa:	e00f      	b.n	8007dcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	8979      	ldrh	r1, [r7, #10]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fbc0 	bl	800854c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d19e      	bne.n	8007d14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fa9a 	bl	8008314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e01a      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2220      	movs	r2, #32
 8007df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6859      	ldr	r1, [r3, #4]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <HAL_I2C_Mem_Write+0x224>)
 8007dfe:	400b      	ands	r3, r1
 8007e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e000      	b.n	8007e20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007e1e:	2302      	movs	r3, #2
  }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	fe00e800 	.word	0xfe00e800

08007e2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	4608      	mov	r0, r1
 8007e36:	4611      	mov	r1, r2
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	817b      	strh	r3, [r7, #10]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	813b      	strh	r3, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	f040 80fd 	bne.w	800804e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_I2C_Mem_Read+0x34>
 8007e5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d105      	bne.n	8007e6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e0f1      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_I2C_Mem_Read+0x4e>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e0ea      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e82:	f7fd ffe7 	bl	8005e54 <HAL_GetTick>
 8007e86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2319      	movs	r3, #25
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f9bd 	bl	8008214 <I2C_WaitOnFlagUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e0d5      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2222      	movs	r2, #34	@ 0x22
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2240      	movs	r2, #64	@ 0x40
 8007eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a3a      	ldr	r2, [r7, #32]
 8007ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ecc:	88f8      	ldrh	r0, [r7, #6]
 8007ece:	893a      	ldrh	r2, [r7, #8]
 8007ed0:	8979      	ldrh	r1, [r7, #10]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	4603      	mov	r3, r0
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f921 	bl	8008124 <I2C_RequestMemoryRead>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0ad      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2bff      	cmp	r3, #255	@ 0xff
 8007efc:	d90e      	bls.n	8007f1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	22ff      	movs	r2, #255	@ 0xff
 8007f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	8979      	ldrh	r1, [r7, #10]
 8007f0c:	4b52      	ldr	r3, [pc, #328]	@ (8008058 <HAL_I2C_Mem_Read+0x22c>)
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fb19 	bl	800854c <I2C_TransferConfig>
 8007f1a:	e00f      	b.n	8007f3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	8979      	ldrh	r1, [r7, #10]
 8007f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8008058 <HAL_I2C_Mem_Read+0x22c>)
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fb08 	bl	800854c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f42:	2200      	movs	r2, #0
 8007f44:	2104      	movs	r1, #4
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f964 	bl	8008214 <I2C_WaitOnFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e07c      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d034      	beq.n	8007ffc <HAL_I2C_Mem_Read+0x1d0>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d130      	bne.n	8007ffc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2180      	movs	r1, #128	@ 0x80
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 f935 	bl	8008214 <I2C_WaitOnFlagUntilTimeout>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e04d      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2bff      	cmp	r3, #255	@ 0xff
 8007fbc:	d90e      	bls.n	8007fdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	22ff      	movs	r2, #255	@ 0xff
 8007fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	8979      	ldrh	r1, [r7, #10]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 fab9 	bl	800854c <I2C_TransferConfig>
 8007fda:	e00f      	b.n	8007ffc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	8979      	ldrh	r1, [r7, #10]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 faa8 	bl	800854c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008000:	b29b      	uxth	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d19a      	bne.n	8007f3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f982 	bl	8008314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e01a      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2220      	movs	r2, #32
 8008020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6859      	ldr	r1, [r3, #4]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	4b0b      	ldr	r3, [pc, #44]	@ (800805c <HAL_I2C_Mem_Read+0x230>)
 800802e:	400b      	ands	r3, r1
 8008030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	e000      	b.n	8008050 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800804e:	2302      	movs	r3, #2
  }
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	80002400 	.word	0x80002400
 800805c:	fe00e800 	.word	0xfe00e800

08008060 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800806e:	b2db      	uxtb	r3, r3
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af02      	add	r7, sp, #8
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	4608      	mov	r0, r1
 8008086:	4611      	mov	r1, r2
 8008088:	461a      	mov	r2, r3
 800808a:	4603      	mov	r3, r0
 800808c:	817b      	strh	r3, [r7, #10]
 800808e:	460b      	mov	r3, r1
 8008090:	813b      	strh	r3, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	b2da      	uxtb	r2, r3
 800809a:	8979      	ldrh	r1, [r7, #10]
 800809c:	4b20      	ldr	r3, [pc, #128]	@ (8008120 <I2C_RequestMemoryWrite+0xa4>)
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fa51 	bl	800854c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	69b9      	ldr	r1, [r7, #24]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f8f0 	bl	8008294 <I2C_WaitOnTXISFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e02c      	b.n	8008118 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d105      	bne.n	80080d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080c4:	893b      	ldrh	r3, [r7, #8]
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80080ce:	e015      	b.n	80080fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080d0:	893b      	ldrh	r3, [r7, #8]
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	69b9      	ldr	r1, [r7, #24]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f8d6 	bl	8008294 <I2C_WaitOnTXISFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e012      	b.n	8008118 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080f2:	893b      	ldrh	r3, [r7, #8]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	2200      	movs	r2, #0
 8008104:	2180      	movs	r1, #128	@ 0x80
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f884 	bl	8008214 <I2C_WaitOnFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	80002000 	.word	0x80002000

08008124 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4603      	mov	r3, r0
 8008134:	817b      	strh	r3, [r7, #10]
 8008136:	460b      	mov	r3, r1
 8008138:	813b      	strh	r3, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	b2da      	uxtb	r2, r3
 8008142:	8979      	ldrh	r1, [r7, #10]
 8008144:	4b20      	ldr	r3, [pc, #128]	@ (80081c8 <I2C_RequestMemoryRead+0xa4>)
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2300      	movs	r3, #0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f9fe 	bl	800854c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	69b9      	ldr	r1, [r7, #24]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f89d 	bl	8008294 <I2C_WaitOnTXISFlagUntilTimeout>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e02c      	b.n	80081be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d105      	bne.n	8008176 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800816a:	893b      	ldrh	r3, [r7, #8]
 800816c:	b2da      	uxtb	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	629a      	str	r2, [r3, #40]	@ 0x28
 8008174:	e015      	b.n	80081a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008176:	893b      	ldrh	r3, [r7, #8]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	b2da      	uxtb	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	69b9      	ldr	r1, [r7, #24]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f883 	bl	8008294 <I2C_WaitOnTXISFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e012      	b.n	80081be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008198:	893b      	ldrh	r3, [r7, #8]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2200      	movs	r2, #0
 80081aa:	2140      	movs	r1, #64	@ 0x40
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f831 	bl	8008214 <I2C_WaitOnFlagUntilTimeout>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	80002000 	.word	0x80002000

080081cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d103      	bne.n	80081ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2200      	movs	r2, #0
 80081e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d007      	beq.n	8008208 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	619a      	str	r2, [r3, #24]
  }
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008224:	e022      	b.n	800826c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d01e      	beq.n	800826c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800822e:	f7fd fe11 	bl	8005e54 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d302      	bcc.n	8008244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d113      	bne.n	800826c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e00f      	b.n	800828c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4013      	ands	r3, r2
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	429a      	cmp	r2, r3
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	429a      	cmp	r2, r3
 8008288:	d0cd      	beq.n	8008226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80082a0:	e02c      	b.n	80082fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f870 	bl	800838c <I2C_IsErrorOccurred>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e02a      	b.n	800830c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082bc:	d01e      	beq.n	80082fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082be:	f7fd fdc9 	bl	8005e54 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d302      	bcc.n	80082d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d113      	bne.n	80082fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d8:	f043 0220 	orr.w	r2, r3, #32
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e007      	b.n	800830c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b02      	cmp	r3, #2
 8008308:	d1cb      	bne.n	80082a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008320:	e028      	b.n	8008374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f830 	bl	800838c <I2C_IsErrorOccurred>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e026      	b.n	8008384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008336:	f7fd fd8d 	bl	8005e54 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d113      	bne.n	8008374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008350:	f043 0220 	orr.w	r2, r3, #32
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e007      	b.n	8008384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b20      	cmp	r3, #32
 8008380:	d1cf      	bne.n	8008322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08a      	sub	sp, #40	@ 0x28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d068      	beq.n	800848a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2210      	movs	r2, #16
 80083be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083c0:	e049      	b.n	8008456 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d045      	beq.n	8008456 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7fd fd43 	bl	8005e54 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <I2C_IsErrorOccurred+0x54>
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d13a      	bne.n	8008456 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008402:	d121      	bne.n	8008448 <I2C_IsErrorOccurred+0xbc>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800840a:	d01d      	beq.n	8008448 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800840c:	7cfb      	ldrb	r3, [r7, #19]
 800840e:	2b20      	cmp	r3, #32
 8008410:	d01a      	beq.n	8008448 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008422:	f7fd fd17 	bl	8005e54 <HAL_GetTick>
 8008426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008428:	e00e      	b.n	8008448 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800842a:	f7fd fd13 	bl	8005e54 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b19      	cmp	r3, #25
 8008436:	d907      	bls.n	8008448 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	f043 0320 	orr.w	r3, r3, #32
 800843e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008446:	e006      	b.n	8008456 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b20      	cmp	r3, #32
 8008454:	d1e9      	bne.n	800842a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	f003 0320 	and.w	r3, r3, #32
 8008460:	2b20      	cmp	r3, #32
 8008462:	d003      	beq.n	800846c <I2C_IsErrorOccurred+0xe0>
 8008464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0aa      	beq.n	80083c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800846c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2220      	movs	r2, #32
 800847a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	f043 0304 	orr.w	r3, r3, #4
 8008482:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00b      	beq.n	80084b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	f043 0301 	orr.w	r3, r3, #1
 80084a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	f043 0308 	orr.w	r3, r3, #8
 80084c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	f043 0302 	orr.w	r3, r3, #2
 80084e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80084f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01c      	beq.n	800853a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fe63 	bl	80081cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6859      	ldr	r1, [r3, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4b0d      	ldr	r3, [pc, #52]	@ (8008548 <I2C_IsErrorOccurred+0x1bc>)
 8008512:	400b      	ands	r3, r1
 8008514:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	431a      	orrs	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800853a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800853e:	4618      	mov	r0, r3
 8008540:	3728      	adds	r7, #40	@ 0x28
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	fe00e800 	.word	0xfe00e800

0800854c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	817b      	strh	r3, [r7, #10]
 800855a:	4613      	mov	r3, r2
 800855c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800855e:	897b      	ldrh	r3, [r7, #10]
 8008560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008564:	7a7b      	ldrb	r3, [r7, #9]
 8008566:	041b      	lsls	r3, r3, #16
 8008568:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800856c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	4313      	orrs	r3, r2
 8008576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800857a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	0d5b      	lsrs	r3, r3, #21
 8008586:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800858a:	4b08      	ldr	r3, [pc, #32]	@ (80085ac <I2C_TransferConfig+0x60>)
 800858c:	430b      	orrs	r3, r1
 800858e:	43db      	mvns	r3, r3
 8008590:	ea02 0103 	and.w	r1, r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	03ff63ff 	.word	0x03ff63ff

080085b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d138      	bne.n	8008638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e032      	b.n	800863a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2224      	movs	r2, #36	@ 0x24
 80085e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0201 	bic.w	r2, r2, #1
 80085f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0201 	orr.w	r2, r2, #1
 8008622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	e000      	b.n	800863a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008638:	2302      	movs	r3, #2
  }
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b20      	cmp	r3, #32
 800865a:	d139      	bne.n	80086d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008662:	2b01      	cmp	r3, #1
 8008664:	d101      	bne.n	800866a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008666:	2302      	movs	r3, #2
 8008668:	e033      	b.n	80086d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2224      	movs	r2, #36	@ 0x24
 8008676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0201 	bic.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008698:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086d0:	2302      	movs	r3, #2
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e0bf      	b.n	8008872 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7fa fdd2 	bl	80032b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008722:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6999      	ldr	r1, [r3, #24]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008738:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6899      	ldr	r1, [r3, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b4a      	ldr	r3, [pc, #296]	@ (800887c <HAL_LTDC_Init+0x19c>)
 8008754:	400b      	ands	r3, r1
 8008756:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	041b      	lsls	r3, r3, #16
 800875e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6899      	ldr	r1, [r3, #8]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68d9      	ldr	r1, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	4b3e      	ldr	r3, [pc, #248]	@ (800887c <HAL_LTDC_Init+0x19c>)
 8008782:	400b      	ands	r3, r1
 8008784:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	041b      	lsls	r3, r3, #16
 800878c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68d9      	ldr	r1, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1a      	ldr	r2, [r3, #32]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	430a      	orrs	r2, r1
 80087a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6919      	ldr	r1, [r3, #16]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4b33      	ldr	r3, [pc, #204]	@ (800887c <HAL_LTDC_Init+0x19c>)
 80087b0:	400b      	ands	r3, r1
 80087b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	041b      	lsls	r3, r3, #16
 80087ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6919      	ldr	r1, [r3, #16]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	431a      	orrs	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6959      	ldr	r1, [r3, #20]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	4b27      	ldr	r3, [pc, #156]	@ (800887c <HAL_LTDC_Init+0x19c>)
 80087de:	400b      	ands	r3, r1
 80087e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e6:	041b      	lsls	r3, r3, #16
 80087e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6959      	ldr	r1, [r3, #20]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0206 	orr.w	r2, r2, #6
 800884e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	699a      	ldr	r2, [r3, #24]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0201 	orr.w	r2, r2, #1
 800885e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	f000f800 	.word	0xf000f800

08008880 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008896:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d023      	beq.n	80088ea <HAL_LTDC_IRQHandler+0x6a>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d01e      	beq.n	80088ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0204 	bic.w	r2, r2, #4
 80088ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2204      	movs	r2, #4
 80088c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088ca:	f043 0201 	orr.w	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2204      	movs	r2, #4
 80088d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f86f 	bl	80089c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d023      	beq.n	800893c <HAL_LTDC_IRQHandler+0xbc>
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d01e      	beq.n	800893c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0202 	bic.w	r2, r2, #2
 800890c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2202      	movs	r2, #2
 8008914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800891c:	f043 0202 	orr.w	r2, r3, #2
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2204      	movs	r2, #4
 800892a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f846 	bl	80089c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01b      	beq.n	800897e <HAL_LTDC_IRQHandler+0xfe>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d016      	beq.n	800897e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2201      	movs	r2, #1
 8008966:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f82f 	bl	80089dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01b      	beq.n	80089c0 <HAL_LTDC_IRQHandler+0x140>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b00      	cmp	r3, #0
 8008990:	d016      	beq.n	80089c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0208 	bic.w	r2, r2, #8
 80089a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2208      	movs	r2, #8
 80089a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f818 	bl	80089f0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008a04:	b5b0      	push	{r4, r5, r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <HAL_LTDC_ConfigLayer+0x1a>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e02c      	b.n	8008a78 <HAL_LTDC_ConfigLayer+0x74>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2134      	movs	r1, #52	@ 0x34
 8008a34:	fb01 f303 	mul.w	r3, r1, r3
 8008a38:	4413      	add	r3, r2
 8008a3a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	4614      	mov	r4, r2
 8008a42:	461d      	mov	r5, r3
 8008a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f81f 	bl	8008a9c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2201      	movs	r2, #1
 8008a64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bdb0      	pop	{r4, r5, r7, pc}

08008a80 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008a8e:	b2db      	uxtb	r3, r3
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b089      	sub	sp, #36	@ 0x24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	0c1b      	lsrs	r3, r3, #16
 8008ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ab8:	4413      	add	r3, r2
 8008aba:	041b      	lsls	r3, r3, #16
 8008abc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	01db      	lsls	r3, r3, #7
 8008ac8:	4413      	add	r3, r2
 8008aca:	3384      	adds	r3, #132	@ 0x84
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	01d2      	lsls	r2, r2, #7
 8008ad8:	440a      	add	r2, r1
 8008ada:	3284      	adds	r2, #132	@ 0x84
 8008adc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008ae0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	0c1b      	lsrs	r3, r3, #16
 8008aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008af2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008af4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4619      	mov	r1, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	01db      	lsls	r3, r3, #7
 8008b00:	440b      	add	r3, r1
 8008b02:	3384      	adds	r3, #132	@ 0x84
 8008b04:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b0a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b1a:	4413      	add	r3, r2
 8008b1c:	041b      	lsls	r3, r3, #16
 8008b1e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	01db      	lsls	r3, r3, #7
 8008b2a:	4413      	add	r3, r2
 8008b2c:	3384      	adds	r3, #132	@ 0x84
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	4611      	mov	r1, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	01d2      	lsls	r2, r2, #7
 8008b3a:	440a      	add	r2, r1
 8008b3c:	3284      	adds	r2, #132	@ 0x84
 8008b3e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008b42:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b52:	4413      	add	r3, r2
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	01db      	lsls	r3, r3, #7
 8008b60:	440b      	add	r3, r1
 8008b62:	3384      	adds	r3, #132	@ 0x84
 8008b64:	4619      	mov	r1, r3
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	01db      	lsls	r3, r3, #7
 8008b76:	4413      	add	r3, r2
 8008b78:	3384      	adds	r3, #132	@ 0x84
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	4611      	mov	r1, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	01d2      	lsls	r2, r2, #7
 8008b86:	440a      	add	r2, r1
 8008b88:	3284      	adds	r2, #132	@ 0x84
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	01db      	lsls	r3, r3, #7
 8008b9a:	4413      	add	r3, r2
 8008b9c:	3384      	adds	r3, #132	@ 0x84
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008bb6:	041b      	lsls	r3, r3, #16
 8008bb8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	061b      	lsls	r3, r3, #24
 8008bc0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	01db      	lsls	r3, r3, #7
 8008bcc:	4413      	add	r3, r2
 8008bce:	3384      	adds	r3, #132	@ 0x84
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	01db      	lsls	r3, r3, #7
 8008bdc:	4413      	add	r3, r2
 8008bde:	3384      	adds	r3, #132	@ 0x84
 8008be0:	461a      	mov	r2, r3
 8008be2:	2300      	movs	r3, #0
 8008be4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008bec:	461a      	mov	r2, r3
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	01db      	lsls	r3, r3, #7
 8008c00:	440b      	add	r3, r1
 8008c02:	3384      	adds	r3, #132	@ 0x84
 8008c04:	4619      	mov	r1, r3
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	01db      	lsls	r3, r3, #7
 8008c16:	4413      	add	r3, r2
 8008c18:	3384      	adds	r3, #132	@ 0x84
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	6812      	ldr	r2, [r2, #0]
 8008c20:	4611      	mov	r1, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	01d2      	lsls	r2, r2, #7
 8008c26:	440a      	add	r2, r1
 8008c28:	3284      	adds	r2, #132	@ 0x84
 8008c2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008c2e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	01db      	lsls	r3, r3, #7
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3384      	adds	r3, #132	@ 0x84
 8008c3e:	461a      	mov	r2, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	01db      	lsls	r3, r3, #7
 8008c50:	4413      	add	r3, r2
 8008c52:	3384      	adds	r3, #132	@ 0x84
 8008c54:	69da      	ldr	r2, [r3, #28]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	01db      	lsls	r3, r3, #7
 8008c60:	440b      	add	r3, r1
 8008c62:	3384      	adds	r3, #132	@ 0x84
 8008c64:	4619      	mov	r1, r3
 8008c66:	4b58      	ldr	r3, [pc, #352]	@ (8008dc8 <LTDC_SetConfig+0x32c>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	69da      	ldr	r2, [r3, #28]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	68f9      	ldr	r1, [r7, #12]
 8008c76:	6809      	ldr	r1, [r1, #0]
 8008c78:	4608      	mov	r0, r1
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	01c9      	lsls	r1, r1, #7
 8008c7e:	4401      	add	r1, r0
 8008c80:	3184      	adds	r1, #132	@ 0x84
 8008c82:	4313      	orrs	r3, r2
 8008c84:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	01db      	lsls	r3, r3, #7
 8008c90:	4413      	add	r3, r2
 8008c92:	3384      	adds	r3, #132	@ 0x84
 8008c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	01db      	lsls	r3, r3, #7
 8008ca0:	4413      	add	r3, r2
 8008ca2:	3384      	adds	r3, #132	@ 0x84
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	01db      	lsls	r3, r3, #7
 8008cb4:	4413      	add	r3, r2
 8008cb6:	3384      	adds	r3, #132	@ 0x84
 8008cb8:	461a      	mov	r2, r3
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008cc8:	2304      	movs	r3, #4
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e01b      	b.n	8008d06 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d102      	bne.n	8008cdc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	e014      	b.n	8008d06 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d00b      	beq.n	8008cfc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d007      	beq.n	8008cfc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d003      	beq.n	8008cfc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008cf8:	2b07      	cmp	r3, #7
 8008cfa:	d102      	bne.n	8008d02 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	e001      	b.n	8008d06 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008d02:	2301      	movs	r3, #1
 8008d04:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	01db      	lsls	r3, r3, #7
 8008d10:	4413      	add	r3, r2
 8008d12:	3384      	adds	r3, #132	@ 0x84
 8008d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	01d2      	lsls	r2, r2, #7
 8008d20:	440a      	add	r2, r1
 8008d22:	3284      	adds	r2, #132	@ 0x84
 8008d24:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	fb02 f303 	mul.w	r3, r2, r3
 8008d34:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6859      	ldr	r1, [r3, #4]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	69f9      	ldr	r1, [r7, #28]
 8008d42:	fb01 f303 	mul.w	r3, r1, r3
 8008d46:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008d48:	68f9      	ldr	r1, [r7, #12]
 8008d4a:	6809      	ldr	r1, [r1, #0]
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	01c9      	lsls	r1, r1, #7
 8008d52:	4401      	add	r1, r0
 8008d54:	3184      	adds	r1, #132	@ 0x84
 8008d56:	4313      	orrs	r3, r2
 8008d58:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	01db      	lsls	r3, r3, #7
 8008d64:	4413      	add	r3, r2
 8008d66:	3384      	adds	r3, #132	@ 0x84
 8008d68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	01db      	lsls	r3, r3, #7
 8008d74:	440b      	add	r3, r1
 8008d76:	3384      	adds	r3, #132	@ 0x84
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4b14      	ldr	r3, [pc, #80]	@ (8008dcc <LTDC_SetConfig+0x330>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	01db      	lsls	r3, r3, #7
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3384      	adds	r3, #132	@ 0x84
 8008d8e:	461a      	mov	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	01db      	lsls	r3, r3, #7
 8008da0:	4413      	add	r3, r2
 8008da2:	3384      	adds	r3, #132	@ 0x84
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	4611      	mov	r1, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	01d2      	lsls	r2, r2, #7
 8008db0:	440a      	add	r2, r1
 8008db2:	3284      	adds	r2, #132	@ 0x84
 8008db4:	f043 0301 	orr.w	r3, r3, #1
 8008db8:	6013      	str	r3, [r2, #0]
}
 8008dba:	bf00      	nop
 8008dbc:	3724      	adds	r7, #36	@ 0x24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	fffff8f8 	.word	0xfffff8f8
 8008dcc:	fffff800 	.word	0xfffff800

08008dd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dd4:	4b05      	ldr	r3, [pc, #20]	@ (8008dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a04      	ldr	r2, [pc, #16]	@ (8008dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dde:	6013      	str	r3, [r2, #0]
}
 8008de0:	bf00      	nop
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40007000 	.word	0x40007000

08008df0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008dfa:	4b23      	ldr	r3, [pc, #140]	@ (8008e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	4a22      	ldr	r2, [pc, #136]	@ (8008e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8008e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e06:	4b20      	ldr	r3, [pc, #128]	@ (8008e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8008e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008e12:	4b1e      	ldr	r3, [pc, #120]	@ (8008e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a1d      	ldr	r2, [pc, #116]	@ (8008e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e1e:	f7fd f819 	bl	8005e54 <HAL_GetTick>
 8008e22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e24:	e009      	b.n	8008e3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e26:	f7fd f815 	bl	8005e54 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e34:	d901      	bls.n	8008e3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e022      	b.n	8008e80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e3a:	4b14      	ldr	r3, [pc, #80]	@ (8008e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e46:	d1ee      	bne.n	8008e26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e48:	4b10      	ldr	r3, [pc, #64]	@ (8008e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8008e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e54:	f7fc fffe 	bl	8005e54 <HAL_GetTick>
 8008e58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e5a:	e009      	b.n	8008e70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e5c:	f7fc fffa 	bl	8005e54 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e6a:	d901      	bls.n	8008e70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e007      	b.n	8008e80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e70:	4b06      	ldr	r3, [pc, #24]	@ (8008e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e7c:	d1ee      	bne.n	8008e5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40007000 	.word	0x40007000

08008e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e291      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 8087 	beq.w	8008fc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008eb4:	4b96      	ldr	r3, [pc, #600]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 030c 	and.w	r3, r3, #12
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d00c      	beq.n	8008eda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ec0:	4b93      	ldr	r3, [pc, #588]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f003 030c 	and.w	r3, r3, #12
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d112      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x62>
 8008ecc:	4b90      	ldr	r3, [pc, #576]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ed8:	d10b      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eda:	4b8d      	ldr	r3, [pc, #564]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d06c      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x130>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d168      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e26b      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008efa:	d106      	bne.n	8008f0a <HAL_RCC_OscConfig+0x7a>
 8008efc:	4b84      	ldr	r3, [pc, #528]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a83      	ldr	r2, [pc, #524]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	e02e      	b.n	8008f68 <HAL_RCC_OscConfig+0xd8>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10c      	bne.n	8008f2c <HAL_RCC_OscConfig+0x9c>
 8008f12:	4b7f      	ldr	r3, [pc, #508]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a7e      	ldr	r2, [pc, #504]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a7b      	ldr	r2, [pc, #492]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e01d      	b.n	8008f68 <HAL_RCC_OscConfig+0xd8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f34:	d10c      	bne.n	8008f50 <HAL_RCC_OscConfig+0xc0>
 8008f36:	4b76      	ldr	r3, [pc, #472]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a75      	ldr	r2, [pc, #468]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	4b73      	ldr	r3, [pc, #460]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a72      	ldr	r2, [pc, #456]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	e00b      	b.n	8008f68 <HAL_RCC_OscConfig+0xd8>
 8008f50:	4b6f      	ldr	r3, [pc, #444]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a6e      	ldr	r2, [pc, #440]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a6b      	ldr	r2, [pc, #428]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d013      	beq.n	8008f98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f70:	f7fc ff70 	bl	8005e54 <HAL_GetTick>
 8008f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f78:	f7fc ff6c 	bl	8005e54 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b64      	cmp	r3, #100	@ 0x64
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e21f      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f8a:	4b61      	ldr	r3, [pc, #388]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0xe8>
 8008f96:	e014      	b.n	8008fc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f98:	f7fc ff5c 	bl	8005e54 <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fa0:	f7fc ff58 	bl	8005e54 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b64      	cmp	r3, #100	@ 0x64
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e20b      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fb2:	4b57      	ldr	r3, [pc, #348]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f0      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x110>
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d069      	beq.n	80090a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008fce:	4b50      	ldr	r3, [pc, #320]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 030c 	and.w	r3, r3, #12
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fda:	4b4d      	ldr	r3, [pc, #308]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 030c 	and.w	r3, r3, #12
 8008fe2:	2b08      	cmp	r3, #8
 8008fe4:	d11c      	bne.n	8009020 <HAL_RCC_OscConfig+0x190>
 8008fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d116      	bne.n	8009020 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ff2:	4b47      	ldr	r3, [pc, #284]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <HAL_RCC_OscConfig+0x17a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d001      	beq.n	800900a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e1df      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800900a:	4b41      	ldr	r3, [pc, #260]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	493d      	ldr	r1, [pc, #244]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800901a:	4313      	orrs	r3, r2
 800901c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800901e:	e040      	b.n	80090a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d023      	beq.n	8009070 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009028:	4b39      	ldr	r3, [pc, #228]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a38      	ldr	r2, [pc, #224]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800902e:	f043 0301 	orr.w	r3, r3, #1
 8009032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009034:	f7fc ff0e 	bl	8005e54 <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800903c:	f7fc ff0a 	bl	8005e54 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e1bd      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800904e:	4b30      	ldr	r3, [pc, #192]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0f0      	beq.n	800903c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800905a:	4b2d      	ldr	r3, [pc, #180]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	4929      	ldr	r1, [pc, #164]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800906a:	4313      	orrs	r3, r2
 800906c:	600b      	str	r3, [r1, #0]
 800906e:	e018      	b.n	80090a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009070:	4b27      	ldr	r3, [pc, #156]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a26      	ldr	r2, [pc, #152]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009076:	f023 0301 	bic.w	r3, r3, #1
 800907a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907c:	f7fc feea 	bl	8005e54 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009082:	e008      	b.n	8009096 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009084:	f7fc fee6 	bl	8005e54 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d901      	bls.n	8009096 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e199      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009096:	4b1e      	ldr	r3, [pc, #120]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f0      	bne.n	8009084 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0308 	and.w	r3, r3, #8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d038      	beq.n	8009120 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d019      	beq.n	80090ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090b6:	4b16      	ldr	r3, [pc, #88]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ba:	4a15      	ldr	r2, [pc, #84]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090bc:	f043 0301 	orr.w	r3, r3, #1
 80090c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c2:	f7fc fec7 	bl	8005e54 <HAL_GetTick>
 80090c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090ca:	f7fc fec3 	bl	8005e54 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e176      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f0      	beq.n	80090ca <HAL_RCC_OscConfig+0x23a>
 80090e8:	e01a      	b.n	8009120 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090ea:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ee:	4a08      	ldr	r2, [pc, #32]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090f0:	f023 0301 	bic.w	r3, r3, #1
 80090f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f6:	f7fc fead 	bl	8005e54 <HAL_GetTick>
 80090fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090fc:	e00a      	b.n	8009114 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090fe:	f7fc fea9 	bl	8005e54 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d903      	bls.n	8009114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e15c      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
 8009110:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009114:	4b91      	ldr	r3, [pc, #580]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1ee      	bne.n	80090fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 80a4 	beq.w	8009276 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800912e:	4b8b      	ldr	r3, [pc, #556]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10d      	bne.n	8009156 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800913a:	4b88      	ldr	r3, [pc, #544]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	4a87      	ldr	r2, [pc, #540]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009144:	6413      	str	r3, [r2, #64]	@ 0x40
 8009146:	4b85      	ldr	r3, [pc, #532]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800914e:	60bb      	str	r3, [r7, #8]
 8009150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009152:	2301      	movs	r3, #1
 8009154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009156:	4b82      	ldr	r3, [pc, #520]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915e:	2b00      	cmp	r3, #0
 8009160:	d118      	bne.n	8009194 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009162:	4b7f      	ldr	r3, [pc, #508]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a7e      	ldr	r2, [pc, #504]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 8009168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800916c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800916e:	f7fc fe71 	bl	8005e54 <HAL_GetTick>
 8009172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009176:	f7fc fe6d 	bl	8005e54 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b64      	cmp	r3, #100	@ 0x64
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e120      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009188:	4b75      	ldr	r3, [pc, #468]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d106      	bne.n	80091aa <HAL_RCC_OscConfig+0x31a>
 800919c:	4b6f      	ldr	r3, [pc, #444]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800919e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091a0:	4a6e      	ldr	r2, [pc, #440]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80091a8:	e02d      	b.n	8009206 <HAL_RCC_OscConfig+0x376>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10c      	bne.n	80091cc <HAL_RCC_OscConfig+0x33c>
 80091b2:	4b6a      	ldr	r3, [pc, #424]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091b6:	4a69      	ldr	r2, [pc, #420]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091b8:	f023 0301 	bic.w	r3, r3, #1
 80091bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80091be:	4b67      	ldr	r3, [pc, #412]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c2:	4a66      	ldr	r2, [pc, #408]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091c4:	f023 0304 	bic.w	r3, r3, #4
 80091c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ca:	e01c      	b.n	8009206 <HAL_RCC_OscConfig+0x376>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	2b05      	cmp	r3, #5
 80091d2:	d10c      	bne.n	80091ee <HAL_RCC_OscConfig+0x35e>
 80091d4:	4b61      	ldr	r3, [pc, #388]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091d8:	4a60      	ldr	r2, [pc, #384]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091da:	f043 0304 	orr.w	r3, r3, #4
 80091de:	6713      	str	r3, [r2, #112]	@ 0x70
 80091e0:	4b5e      	ldr	r3, [pc, #376]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e4:	4a5d      	ldr	r2, [pc, #372]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ec:	e00b      	b.n	8009206 <HAL_RCC_OscConfig+0x376>
 80091ee:	4b5b      	ldr	r3, [pc, #364]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091f2:	4a5a      	ldr	r2, [pc, #360]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091f4:	f023 0301 	bic.w	r3, r3, #1
 80091f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80091fa:	4b58      	ldr	r3, [pc, #352]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fe:	4a57      	ldr	r2, [pc, #348]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009200:	f023 0304 	bic.w	r3, r3, #4
 8009204:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d015      	beq.n	800923a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800920e:	f7fc fe21 	bl	8005e54 <HAL_GetTick>
 8009212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009214:	e00a      	b.n	800922c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009216:	f7fc fe1d 	bl	8005e54 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009224:	4293      	cmp	r3, r2
 8009226:	d901      	bls.n	800922c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e0ce      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800922c:	4b4b      	ldr	r3, [pc, #300]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800922e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0ee      	beq.n	8009216 <HAL_RCC_OscConfig+0x386>
 8009238:	e014      	b.n	8009264 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923a:	f7fc fe0b 	bl	8005e54 <HAL_GetTick>
 800923e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009240:	e00a      	b.n	8009258 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009242:	f7fc fe07 	bl	8005e54 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009250:	4293      	cmp	r3, r2
 8009252:	d901      	bls.n	8009258 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e0b8      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009258:	4b40      	ldr	r3, [pc, #256]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800925a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1ee      	bne.n	8009242 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d105      	bne.n	8009276 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800926a:	4b3c      	ldr	r3, [pc, #240]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800926c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926e:	4a3b      	ldr	r2, [pc, #236]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009274:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80a4 	beq.w	80093c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009280:	4b36      	ldr	r3, [pc, #216]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 030c 	and.w	r3, r3, #12
 8009288:	2b08      	cmp	r3, #8
 800928a:	d06b      	beq.n	8009364 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d149      	bne.n	8009328 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009294:	4b31      	ldr	r3, [pc, #196]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a30      	ldr	r2, [pc, #192]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800929a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800929e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a0:	f7fc fdd8 	bl	8005e54 <HAL_GetTick>
 80092a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092a6:	e008      	b.n	80092ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092a8:	f7fc fdd4 	bl	8005e54 <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d901      	bls.n	80092ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e087      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092ba:	4b28      	ldr	r3, [pc, #160]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1f0      	bne.n	80092a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69da      	ldr	r2, [r3, #28]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d4:	019b      	lsls	r3, r3, #6
 80092d6:	431a      	orrs	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	085b      	lsrs	r3, r3, #1
 80092de:	3b01      	subs	r3, #1
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	061b      	lsls	r3, r3, #24
 80092ea:	4313      	orrs	r3, r2
 80092ec:	4a1b      	ldr	r2, [pc, #108]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092f4:	4b19      	ldr	r3, [pc, #100]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a18      	ldr	r2, [pc, #96]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009300:	f7fc fda8 	bl	8005e54 <HAL_GetTick>
 8009304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009308:	f7fc fda4 	bl	8005e54 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e057      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800931a:	4b10      	ldr	r3, [pc, #64]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0f0      	beq.n	8009308 <HAL_RCC_OscConfig+0x478>
 8009326:	e04f      	b.n	80093c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009328:	4b0c      	ldr	r3, [pc, #48]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a0b      	ldr	r2, [pc, #44]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800932e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009334:	f7fc fd8e 	bl	8005e54 <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800933a:	e008      	b.n	800934e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800933c:	f7fc fd8a 	bl	8005e54 <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d901      	bls.n	800934e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e03d      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934e:	4b03      	ldr	r3, [pc, #12]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1f0      	bne.n	800933c <HAL_RCC_OscConfig+0x4ac>
 800935a:	e035      	b.n	80093c8 <HAL_RCC_OscConfig+0x538>
 800935c:	40023800 	.word	0x40023800
 8009360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009364:	4b1b      	ldr	r3, [pc, #108]	@ (80093d4 <HAL_RCC_OscConfig+0x544>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d028      	beq.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800937c:	429a      	cmp	r2, r3
 800937e:	d121      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800938a:	429a      	cmp	r2, r3
 800938c:	d11a      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009394:	4013      	ands	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800939a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800939c:	4293      	cmp	r3, r2
 800939e:	d111      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	085b      	lsrs	r3, r3, #1
 80093ac:	3b01      	subs	r3, #1
 80093ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d107      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d001      	beq.n	80093c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e000      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40023800 	.word	0x40023800

080093d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0d0      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093f0:	4b6a      	ldr	r3, [pc, #424]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 030f 	and.w	r3, r3, #15
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d910      	bls.n	8009420 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093fe:	4b67      	ldr	r3, [pc, #412]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f023 020f 	bic.w	r2, r3, #15
 8009406:	4965      	ldr	r1, [pc, #404]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	4313      	orrs	r3, r2
 800940c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800940e:	4b63      	ldr	r3, [pc, #396]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d001      	beq.n	8009420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e0b8      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d020      	beq.n	800946e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009438:	4b59      	ldr	r3, [pc, #356]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	4a58      	ldr	r2, [pc, #352]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800943e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009442:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009450:	4b53      	ldr	r3, [pc, #332]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	4a52      	ldr	r2, [pc, #328]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009456:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800945a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800945c:	4b50      	ldr	r3, [pc, #320]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	494d      	ldr	r1, [pc, #308]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800946a:	4313      	orrs	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d040      	beq.n	80094fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d107      	bne.n	8009492 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009482:	4b47      	ldr	r3, [pc, #284]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d115      	bne.n	80094ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e07f      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d107      	bne.n	80094aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800949a:	4b41      	ldr	r3, [pc, #260]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e073      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094aa:	4b3d      	ldr	r3, [pc, #244]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e06b      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ba:	4b39      	ldr	r3, [pc, #228]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f023 0203 	bic.w	r2, r3, #3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	4936      	ldr	r1, [pc, #216]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094cc:	f7fc fcc2 	bl	8005e54 <HAL_GetTick>
 80094d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094d2:	e00a      	b.n	80094ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094d4:	f7fc fcbe 	bl	8005e54 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e053      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ea:	4b2d      	ldr	r3, [pc, #180]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 020c 	and.w	r2, r3, #12
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d1eb      	bne.n	80094d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094fc:	4b27      	ldr	r3, [pc, #156]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d210      	bcs.n	800952c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800950a:	4b24      	ldr	r3, [pc, #144]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f023 020f 	bic.w	r2, r3, #15
 8009512:	4922      	ldr	r1, [pc, #136]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800951a:	4b20      	ldr	r3, [pc, #128]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d001      	beq.n	800952c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e032      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009538:	4b19      	ldr	r3, [pc, #100]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4916      	ldr	r1, [pc, #88]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009546:	4313      	orrs	r3, r2
 8009548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009556:	4b12      	ldr	r3, [pc, #72]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	490e      	ldr	r1, [pc, #56]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009566:	4313      	orrs	r3, r2
 8009568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800956a:	f000 f821 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800956e:	4602      	mov	r2, r0
 8009570:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	091b      	lsrs	r3, r3, #4
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	490a      	ldr	r1, [pc, #40]	@ (80095a4 <HAL_RCC_ClockConfig+0x1cc>)
 800957c:	5ccb      	ldrb	r3, [r1, r3]
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	4a09      	ldr	r2, [pc, #36]	@ (80095a8 <HAL_RCC_ClockConfig+0x1d0>)
 8009584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009586:	4b09      	ldr	r3, [pc, #36]	@ (80095ac <HAL_RCC_ClockConfig+0x1d4>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f7fb febe 	bl	800530c <HAL_InitTick>

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	40023c00 	.word	0x40023c00
 80095a0:	40023800 	.word	0x40023800
 80095a4:	0801dcd8 	.word	0x0801dcd8
 80095a8:	20000048 	.word	0x20000048
 80095ac:	2000004c 	.word	0x2000004c

080095b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b4:	b090      	sub	sp, #64	@ 0x40
 80095b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095c0:	2300      	movs	r3, #0
 80095c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095c8:	4b59      	ldr	r3, [pc, #356]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f003 030c 	and.w	r3, r3, #12
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d00d      	beq.n	80095f0 <HAL_RCC_GetSysClockFreq+0x40>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	f200 80a1 	bhi.w	800971c <HAL_RCC_GetSysClockFreq+0x16c>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <HAL_RCC_GetSysClockFreq+0x34>
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d003      	beq.n	80095ea <HAL_RCC_GetSysClockFreq+0x3a>
 80095e2:	e09b      	b.n	800971c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80095e4:	4b53      	ldr	r3, [pc, #332]	@ (8009734 <HAL_RCC_GetSysClockFreq+0x184>)
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80095e8:	e09b      	b.n	8009722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80095ea:	4b53      	ldr	r3, [pc, #332]	@ (8009738 <HAL_RCC_GetSysClockFreq+0x188>)
 80095ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80095ee:	e098      	b.n	8009722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095f0:	4b4f      	ldr	r3, [pc, #316]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80095fa:	4b4d      	ldr	r3, [pc, #308]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d028      	beq.n	8009658 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009606:	4b4a      	ldr	r3, [pc, #296]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	099b      	lsrs	r3, r3, #6
 800960c:	2200      	movs	r2, #0
 800960e:	623b      	str	r3, [r7, #32]
 8009610:	627a      	str	r2, [r7, #36]	@ 0x24
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009618:	2100      	movs	r1, #0
 800961a:	4b47      	ldr	r3, [pc, #284]	@ (8009738 <HAL_RCC_GetSysClockFreq+0x188>)
 800961c:	fb03 f201 	mul.w	r2, r3, r1
 8009620:	2300      	movs	r3, #0
 8009622:	fb00 f303 	mul.w	r3, r0, r3
 8009626:	4413      	add	r3, r2
 8009628:	4a43      	ldr	r2, [pc, #268]	@ (8009738 <HAL_RCC_GetSysClockFreq+0x188>)
 800962a:	fba0 1202 	umull	r1, r2, r0, r2
 800962e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009630:	460a      	mov	r2, r1
 8009632:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009636:	4413      	add	r3, r2
 8009638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800963a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963c:	2200      	movs	r2, #0
 800963e:	61bb      	str	r3, [r7, #24]
 8009640:	61fa      	str	r2, [r7, #28]
 8009642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009646:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800964a:	f7f7 fa1f 	bl	8000a8c <__aeabi_uldivmod>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4613      	mov	r3, r2
 8009654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009656:	e053      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009658:	4b35      	ldr	r3, [pc, #212]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	099b      	lsrs	r3, r3, #6
 800965e:	2200      	movs	r2, #0
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	617a      	str	r2, [r7, #20]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800966a:	f04f 0b00 	mov.w	fp, #0
 800966e:	4652      	mov	r2, sl
 8009670:	465b      	mov	r3, fp
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f04f 0100 	mov.w	r1, #0
 800967a:	0159      	lsls	r1, r3, #5
 800967c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009680:	0150      	lsls	r0, r2, #5
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	ebb2 080a 	subs.w	r8, r2, sl
 800968a:	eb63 090b 	sbc.w	r9, r3, fp
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	f04f 0300 	mov.w	r3, #0
 8009696:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800969a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800969e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80096a2:	ebb2 0408 	subs.w	r4, r2, r8
 80096a6:	eb63 0509 	sbc.w	r5, r3, r9
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	00eb      	lsls	r3, r5, #3
 80096b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096b8:	00e2      	lsls	r2, r4, #3
 80096ba:	4614      	mov	r4, r2
 80096bc:	461d      	mov	r5, r3
 80096be:	eb14 030a 	adds.w	r3, r4, sl
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	eb45 030b 	adc.w	r3, r5, fp
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80096d6:	4629      	mov	r1, r5
 80096d8:	028b      	lsls	r3, r1, #10
 80096da:	4621      	mov	r1, r4
 80096dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80096e0:	4621      	mov	r1, r4
 80096e2:	028a      	lsls	r2, r1, #10
 80096e4:	4610      	mov	r0, r2
 80096e6:	4619      	mov	r1, r3
 80096e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ea:	2200      	movs	r2, #0
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	60fa      	str	r2, [r7, #12]
 80096f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096f4:	f7f7 f9ca 	bl	8000a8c <__aeabi_uldivmod>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4613      	mov	r3, r2
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009700:	4b0b      	ldr	r3, [pc, #44]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	3301      	adds	r3, #1
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	fbb2 f3f3 	udiv	r3, r2, r3
 8009718:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800971a:	e002      	b.n	8009722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800971c:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <HAL_RCC_GetSysClockFreq+0x184>)
 800971e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009724:	4618      	mov	r0, r3
 8009726:	3740      	adds	r7, #64	@ 0x40
 8009728:	46bd      	mov	sp, r7
 800972a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800972e:	bf00      	nop
 8009730:	40023800 	.word	0x40023800
 8009734:	00f42400 	.word	0x00f42400
 8009738:	017d7840 	.word	0x017d7840

0800973c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009740:	4b03      	ldr	r3, [pc, #12]	@ (8009750 <HAL_RCC_GetHCLKFreq+0x14>)
 8009742:	681b      	ldr	r3, [r3, #0]
}
 8009744:	4618      	mov	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000048 	.word	0x20000048

08009754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009758:	f7ff fff0 	bl	800973c <HAL_RCC_GetHCLKFreq>
 800975c:	4602      	mov	r2, r0
 800975e:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	0a9b      	lsrs	r3, r3, #10
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4903      	ldr	r1, [pc, #12]	@ (8009778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800976a:	5ccb      	ldrb	r3, [r1, r3]
 800976c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40023800 	.word	0x40023800
 8009778:	0801dce8 	.word	0x0801dce8

0800977c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009780:	f7ff ffdc 	bl	800973c <HAL_RCC_GetHCLKFreq>
 8009784:	4602      	mov	r2, r0
 8009786:	4b05      	ldr	r3, [pc, #20]	@ (800979c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	0b5b      	lsrs	r3, r3, #13
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	4903      	ldr	r1, [pc, #12]	@ (80097a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009792:	5ccb      	ldrb	r3, [r1, r3]
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009798:	4618      	mov	r0, r3
 800979a:	bd80      	pop	{r7, pc}
 800979c:	40023800 	.word	0x40023800
 80097a0:	0801dce8 	.word	0x0801dce8

080097a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	220f      	movs	r2, #15
 80097b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097b4:	4b12      	ldr	r3, [pc, #72]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0203 	and.w	r2, r3, #3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80097cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80097d8:	4b09      	ldr	r3, [pc, #36]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	08db      	lsrs	r3, r3, #3
 80097de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097e6:	4b07      	ldr	r3, [pc, #28]	@ (8009804 <HAL_RCC_GetClockConfig+0x60>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 020f 	and.w	r2, r3, #15
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	601a      	str	r2, [r3, #0]
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40023800 	.word	0x40023800
 8009804:	40023c00 	.word	0x40023c00

08009808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009830:	4b69      	ldr	r3, [pc, #420]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	4a68      	ldr	r2, [pc, #416]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009836:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800983a:	6093      	str	r3, [r2, #8]
 800983c:	4b66      	ldr	r3, [pc, #408]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009844:	4964      	ldr	r1, [pc, #400]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009846:	4313      	orrs	r3, r2
 8009848:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009852:	2301      	movs	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d017      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009862:	4b5d      	ldr	r3, [pc, #372]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009868:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009870:	4959      	ldr	r1, [pc, #356]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009872:	4313      	orrs	r3, r2
 8009874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009880:	d101      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009882:	2301      	movs	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800988e:	2301      	movs	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d017      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800989e:	4b4e      	ldr	r3, [pc, #312]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ac:	494a      	ldr	r1, [pc, #296]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098bc:	d101      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80098be:	2301      	movs	r3, #1
 80098c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80098da:	2301      	movs	r3, #1
 80098dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 808b 	beq.w	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80098ec:	4b3a      	ldr	r3, [pc, #232]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f0:	4a39      	ldr	r2, [pc, #228]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80098f8:	4b37      	ldr	r3, [pc, #220]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009904:	4b35      	ldr	r3, [pc, #212]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a34      	ldr	r2, [pc, #208]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800990a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800990e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009910:	f7fc faa0 	bl	8005e54 <HAL_GetTick>
 8009914:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009916:	e008      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009918:	f7fc fa9c 	bl	8005e54 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	@ 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e357      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800992a:	4b2c      	ldr	r3, [pc, #176]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f0      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009936:	4b28      	ldr	r3, [pc, #160]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800993a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800993e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d035      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800994a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	429a      	cmp	r2, r3
 8009952:	d02e      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009954:	4b20      	ldr	r3, [pc, #128]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800995c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800995e:	4b1e      	ldr	r3, [pc, #120]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009962:	4a1d      	ldr	r2, [pc, #116]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009968:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800996a:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800996c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800996e:	4a1a      	ldr	r2, [pc, #104]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009974:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009976:	4a18      	ldr	r2, [pc, #96]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800997c:	4b16      	ldr	r3, [pc, #88]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b01      	cmp	r3, #1
 8009986:	d114      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009988:	f7fc fa64 	bl	8005e54 <HAL_GetTick>
 800998c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800998e:	e00a      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009990:	f7fc fa60 	bl	8005e54 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800999e:	4293      	cmp	r3, r2
 80099a0:	d901      	bls.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e319      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099a6:	4b0c      	ldr	r3, [pc, #48]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099aa:	f003 0302 	and.w	r3, r3, #2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0ee      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099be:	d111      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80099c0:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80099cc:	4b04      	ldr	r3, [pc, #16]	@ (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80099ce:	400b      	ands	r3, r1
 80099d0:	4901      	ldr	r1, [pc, #4]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	608b      	str	r3, [r1, #8]
 80099d6:	e00b      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80099d8:	40023800 	.word	0x40023800
 80099dc:	40007000 	.word	0x40007000
 80099e0:	0ffffcff 	.word	0x0ffffcff
 80099e4:	4baa      	ldr	r3, [pc, #680]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	4aa9      	ldr	r2, [pc, #676]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80099ee:	6093      	str	r3, [r2, #8]
 80099f0:	4ba7      	ldr	r3, [pc, #668]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099fc:	49a4      	ldr	r1, [pc, #656]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d010      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a0e:	4ba0      	ldr	r3, [pc, #640]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a14:	4a9e      	ldr	r2, [pc, #632]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a20:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a28:	4999      	ldr	r1, [pc, #612]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a3c:	4b94      	ldr	r3, [pc, #592]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a4a:	4991      	ldr	r1, [pc, #580]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a5e:	4b8c      	ldr	r3, [pc, #560]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a6c:	4988      	ldr	r1, [pc, #544]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a80:	4b83      	ldr	r3, [pc, #524]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a8e:	4980      	ldr	r1, [pc, #512]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab0:	4977      	ldr	r1, [pc, #476]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00a      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ac4:	4b72      	ldr	r3, [pc, #456]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aca:	f023 0203 	bic.w	r2, r3, #3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ad2:	496f      	ldr	r1, [pc, #444]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aec:	f023 020c 	bic.w	r2, r3, #12
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009af4:	4966      	ldr	r1, [pc, #408]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00a      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b08:	4b61      	ldr	r3, [pc, #388]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b16:	495e      	ldr	r1, [pc, #376]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b2a:	4b59      	ldr	r3, [pc, #356]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b30:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b38:	4955      	ldr	r1, [pc, #340]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00a      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b4c:	4b50      	ldr	r3, [pc, #320]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	494d      	ldr	r1, [pc, #308]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009b6e:	4b48      	ldr	r3, [pc, #288]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b7c:	4944      	ldr	r1, [pc, #272]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009b90:	4b3f      	ldr	r3, [pc, #252]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b96:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b9e:	493c      	ldr	r1, [pc, #240]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009bb2:	4b37      	ldr	r3, [pc, #220]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bc0:	4933      	ldr	r1, [pc, #204]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009be2:	492b      	ldr	r1, [pc, #172]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d011      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009bf6:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bfc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c04:	4922      	ldr	r1, [pc, #136]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c14:	d101      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009c16:	2301      	movs	r3, #1
 8009c18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0308 	and.w	r3, r3, #8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009c26:	2301      	movs	r3, #1
 8009c28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c36:	4b16      	ldr	r3, [pc, #88]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c44:	4912      	ldr	r1, [pc, #72]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00b      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009c58:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c68:	4909      	ldr	r1, [pc, #36]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d006      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80d9 	beq.w	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c84:	4b02      	ldr	r3, [pc, #8]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a01      	ldr	r2, [pc, #4]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c8e:	e001      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009c90:	40023800 	.word	0x40023800
 8009c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c96:	f7fc f8dd 	bl	8005e54 <HAL_GetTick>
 8009c9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c9c:	e008      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c9e:	f7fc f8d9 	bl	8005e54 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	2b64      	cmp	r3, #100	@ 0x64
 8009caa:	d901      	bls.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e194      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f0      	bne.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d021      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d11d      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009cd0:	4b64      	ldr	r3, [pc, #400]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cd6:	0c1b      	lsrs	r3, r3, #16
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009cde:	4b61      	ldr	r3, [pc, #388]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce4:	0e1b      	lsrs	r3, r3, #24
 8009ce6:	f003 030f 	and.w	r3, r3, #15
 8009cea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	019a      	lsls	r2, r3, #6
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	061b      	lsls	r3, r3, #24
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	071b      	lsls	r3, r3, #28
 8009d04:	4957      	ldr	r1, [pc, #348]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d20:	d00a      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d02e      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d36:	d129      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d38:	4b4a      	ldr	r3, [pc, #296]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d3e:	0c1b      	lsrs	r3, r3, #16
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d46:	4b47      	ldr	r3, [pc, #284]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d4c:	0f1b      	lsrs	r3, r3, #28
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	019a      	lsls	r2, r3, #6
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	061b      	lsls	r3, r3, #24
 8009d66:	431a      	orrs	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	071b      	lsls	r3, r3, #28
 8009d6c:	493d      	ldr	r1, [pc, #244]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009d74:	4b3b      	ldr	r3, [pc, #236]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d7a:	f023 021f 	bic.w	r2, r3, #31
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d82:	3b01      	subs	r3, #1
 8009d84:	4937      	ldr	r1, [pc, #220]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01d      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d98:	4b32      	ldr	r3, [pc, #200]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d9e:	0e1b      	lsrs	r3, r3, #24
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009da6:	4b2f      	ldr	r3, [pc, #188]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dac:	0f1b      	lsrs	r3, r3, #28
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	019a      	lsls	r2, r3, #6
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	041b      	lsls	r3, r3, #16
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	061b      	lsls	r3, r3, #24
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	071b      	lsls	r3, r3, #28
 8009dcc:	4925      	ldr	r1, [pc, #148]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d011      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	019a      	lsls	r2, r3, #6
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	041b      	lsls	r3, r3, #16
 8009dec:	431a      	orrs	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	061b      	lsls	r3, r3, #24
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	071b      	lsls	r3, r3, #28
 8009dfc:	4919      	ldr	r1, [pc, #100]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009e04:	4b17      	ldr	r3, [pc, #92]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a16      	ldr	r2, [pc, #88]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e10:	f7fc f820 	bl	8005e54 <HAL_GetTick>
 8009e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e16:	e008      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e18:	f7fc f81c 	bl	8005e54 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b64      	cmp	r3, #100	@ 0x64
 8009e24:	d901      	bls.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e0d7      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0f0      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	f040 80cd 	bne.w	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009e3e:	4b09      	ldr	r3, [pc, #36]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a08      	ldr	r2, [pc, #32]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e4a:	f7fc f803 	bl	8005e54 <HAL_GetTick>
 8009e4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e50:	e00a      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e52:	f7fb ffff 	bl	8005e54 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b64      	cmp	r3, #100	@ 0x64
 8009e5e:	d903      	bls.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e0ba      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009e64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e68:	4b5e      	ldr	r3, [pc, #376]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e74:	d0ed      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d02e      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d12a      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009e9e:	4b51      	ldr	r3, [pc, #324]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ea4:	0c1b      	lsrs	r3, r3, #16
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009eac:	4b4d      	ldr	r3, [pc, #308]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eb2:	0f1b      	lsrs	r3, r3, #28
 8009eb4:	f003 0307 	and.w	r3, r3, #7
 8009eb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	019a      	lsls	r2, r3, #6
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	061b      	lsls	r3, r3, #24
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	071b      	lsls	r3, r3, #28
 8009ed2:	4944      	ldr	r1, [pc, #272]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009eda:	4b42      	ldr	r3, [pc, #264]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ee0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	493d      	ldr	r1, [pc, #244]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d022      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f08:	d11d      	bne.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f0a:	4b36      	ldr	r3, [pc, #216]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f10:	0e1b      	lsrs	r3, r3, #24
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009f18:	4b32      	ldr	r3, [pc, #200]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1e:	0f1b      	lsrs	r3, r3, #28
 8009f20:	f003 0307 	and.w	r3, r3, #7
 8009f24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	019a      	lsls	r2, r3, #6
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	041b      	lsls	r3, r3, #16
 8009f32:	431a      	orrs	r2, r3
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	071b      	lsls	r3, r3, #28
 8009f3e:	4929      	ldr	r1, [pc, #164]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0308 	and.w	r3, r3, #8
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d028      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f52:	4b24      	ldr	r3, [pc, #144]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f58:	0e1b      	lsrs	r3, r3, #24
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009f60:	4b20      	ldr	r3, [pc, #128]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f66:	0c1b      	lsrs	r3, r3, #16
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	019a      	lsls	r2, r3, #6
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	041b      	lsls	r3, r3, #16
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	061b      	lsls	r3, r3, #24
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	071b      	lsls	r3, r3, #28
 8009f86:	4917      	ldr	r1, [pc, #92]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009f8e:	4b15      	ldr	r3, [pc, #84]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9c:	4911      	ldr	r1, [pc, #68]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fb0:	f7fb ff50 	bl	8005e54 <HAL_GetTick>
 8009fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009fb6:	e008      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009fb8:	f7fb ff4c 	bl	8005e54 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b64      	cmp	r3, #100	@ 0x64
 8009fc4:	d901      	bls.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e007      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009fca:	4b06      	ldr	r3, [pc, #24]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd6:	d1ef      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3720      	adds	r7, #32
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	40023800 	.word	0x40023800

08009fe8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e071      	b.n	800a0e2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	7f5b      	ldrb	r3, [r3, #29]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	d105      	bne.n	800a014 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7f9 fbf8 	bl	8003804 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2202      	movs	r2, #2
 800a018:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	2b10      	cmp	r3, #16
 800a026:	d053      	beq.n	800a0d0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	22ca      	movs	r2, #202	@ 0xca
 800a02e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2253      	movs	r2, #83	@ 0x53
 800a036:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fac9 	bl	800a5d0 <RTC_EnterInitMode>
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a042:	7bfb      	ldrb	r3, [r7, #15]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d12a      	bne.n	800a09e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6899      	ldr	r1, [r3, #8]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b26      	ldr	r3, [pc, #152]	@ (800a0ec <HAL_RTC_Init+0x104>)
 800a054:	400b      	ands	r3, r1
 800a056:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6899      	ldr	r1, [r3, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	430a      	orrs	r2, r1
 800a074:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	68d2      	ldr	r2, [r2, #12]
 800a07e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6919      	ldr	r1, [r3, #16]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	041a      	lsls	r2, r3, #16
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	430a      	orrs	r2, r1
 800a092:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fad2 	bl	800a63e <RTC_ExitInitMode>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d110      	bne.n	800a0c6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0208 	bic.w	r2, r2, #8
 800a0b2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	22ff      	movs	r2, #255	@ 0xff
 800a0cc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a0ce:	e001      	b.n	800a0d4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	ff8fffbf 	.word	0xff8fffbf

0800a0f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a0f0:	b590      	push	{r4, r7, lr}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	7f1b      	ldrb	r3, [r3, #28]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d101      	bne.n	800a10c <HAL_RTC_SetTime+0x1c>
 800a108:	2302      	movs	r3, #2
 800a10a:	e085      	b.n	800a218 <HAL_RTC_SetTime+0x128>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2201      	movs	r2, #1
 800a110:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2202      	movs	r2, #2
 800a116:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d126      	bne.n	800a16c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 faa6 	bl	800a688 <RTC_ByteToBcd2>
 800a13c:	4603      	mov	r3, r0
 800a13e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	785b      	ldrb	r3, [r3, #1]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fa9f 	bl	800a688 <RTC_ByteToBcd2>
 800a14a:	4603      	mov	r3, r0
 800a14c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a14e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	789b      	ldrb	r3, [r3, #2]
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fa97 	bl	800a688 <RTC_ByteToBcd2>
 800a15a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a15c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	78db      	ldrb	r3, [r3, #3]
 800a164:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a166:	4313      	orrs	r3, r2
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	e018      	b.n	800a19e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2200      	movs	r2, #0
 800a17e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a18c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a192:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	78db      	ldrb	r3, [r3, #3]
 800a198:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a19a:	4313      	orrs	r3, r2
 800a19c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	22ca      	movs	r2, #202	@ 0xca
 800a1a4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2253      	movs	r2, #83	@ 0x53
 800a1ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 fa0e 	bl	800a5d0 <RTC_EnterInitMode>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a1b8:	7cfb      	ldrb	r3, [r7, #19]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d11e      	bne.n	800a1fc <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	6979      	ldr	r1, [r7, #20]
 800a1c4:	4b16      	ldr	r3, [pc, #88]	@ (800a220 <HAL_RTC_SetTime+0x130>)
 800a1c6:	400b      	ands	r3, r1
 800a1c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a1d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6899      	ldr	r1, [r3, #8]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fa23 	bl	800a63e <RTC_ExitInitMode>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a1fc:	7cfb      	ldrb	r3, [r7, #19]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	22ff      	movs	r2, #255	@ 0xff
 800a20e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	771a      	strb	r2, [r3, #28]

  return status;
 800a216:	7cfb      	ldrb	r3, [r7, #19]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd90      	pop	{r4, r7, pc}
 800a220:	007f7f7f 	.word	0x007f7f7f

0800a224 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	7f1b      	ldrb	r3, [r3, #28]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d101      	bne.n	800a240 <HAL_RTC_SetDate+0x1c>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e06f      	b.n	800a320 <HAL_RTC_SetDate+0xfc>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2201      	movs	r2, #1
 800a244:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2202      	movs	r2, #2
 800a24a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10e      	bne.n	800a270 <HAL_RTC_SetDate+0x4c>
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	785b      	ldrb	r3, [r3, #1]
 800a256:	f003 0310 	and.w	r3, r3, #16
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d008      	beq.n	800a270 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	f023 0310 	bic.w	r3, r3, #16
 800a266:	b2db      	uxtb	r3, r3
 800a268:	330a      	adds	r3, #10
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d11c      	bne.n	800a2b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	78db      	ldrb	r3, [r3, #3]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fa04 	bl	800a688 <RTC_ByteToBcd2>
 800a280:	4603      	mov	r3, r0
 800a282:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 f9fd 	bl	800a688 <RTC_ByteToBcd2>
 800a28e:	4603      	mov	r3, r0
 800a290:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a292:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	789b      	ldrb	r3, [r3, #2]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f9f5 	bl	800a688 <RTC_ByteToBcd2>
 800a29e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a2a0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	617b      	str	r3, [r7, #20]
 800a2ae:	e00e      	b.n	800a2ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	78db      	ldrb	r3, [r3, #3]
 800a2b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	785b      	ldrb	r3, [r3, #1]
 800a2ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a2bc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a2c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	22ca      	movs	r2, #202	@ 0xca
 800a2d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2253      	movs	r2, #83	@ 0x53
 800a2dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f976 	bl	800a5d0 <RTC_EnterInitMode>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a2e8:	7cfb      	ldrb	r3, [r7, #19]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10a      	bne.n	800a304 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	6979      	ldr	r1, [r7, #20]
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <HAL_RTC_SetDate+0x104>)
 800a2f6:	400b      	ands	r3, r1
 800a2f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 f99f 	bl	800a63e <RTC_ExitInitMode>
 800a300:	4603      	mov	r3, r0
 800a302:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a304:	7cfb      	ldrb	r3, [r7, #19]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	22ff      	movs	r2, #255	@ 0xff
 800a316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	771a      	strb	r2, [r3, #28]

  return status;
 800a31e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a320:	4618      	mov	r0, r3
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	bd90      	pop	{r4, r7, pc}
 800a328:	00ffff3f 	.word	0x00ffff3f

0800a32c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a32c:	b590      	push	{r4, r7, lr}
 800a32e:	b089      	sub	sp, #36	@ 0x24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	7f1b      	ldrb	r3, [r3, #28]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_RTC_SetAlarm+0x24>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e113      	b.n	800a578 <HAL_RTC_SetAlarm+0x24c>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2202      	movs	r2, #2
 800a35a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d137      	bne.n	800a3d2 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f984 	bl	800a688 <RTC_ByteToBcd2>
 800a380:	4603      	mov	r3, r0
 800a382:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 f97d 	bl	800a688 <RTC_ByteToBcd2>
 800a38e:	4603      	mov	r3, r0
 800a390:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a392:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	789b      	ldrb	r3, [r3, #2]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 f975 	bl	800a688 <RTC_ByteToBcd2>
 800a39e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a3a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	78db      	ldrb	r3, [r3, #3]
 800a3a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a3aa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f967 	bl	800a688 <RTC_ByteToBcd2>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a3be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a3c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	e023      	b.n	800a41a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	785b      	ldrb	r3, [r3, #1]
 800a3f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a3f2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a3f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	78db      	ldrb	r3, [r3, #3]
 800a3fe:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a400:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a408:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a40a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a410:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a416:	4313      	orrs	r3, r2
 800a418:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a422:	4313      	orrs	r3, r2
 800a424:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	22ca      	movs	r2, #202	@ 0xca
 800a42c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2253      	movs	r2, #83	@ 0x53
 800a434:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43e:	d148      	bne.n	800a4d2 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a44e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a45e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a470:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a472:	f7fb fcef 	bl	8005e54 <HAL_GetTick>
 800a476:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a478:	e013      	b.n	800a4a2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a47a:	f7fb fceb 	bl	8005e54 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a488:	d90b      	bls.n	800a4a2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	22ff      	movs	r2, #255	@ 0xff
 800a490:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2203      	movs	r2, #3
 800a496:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	e06a      	b.n	800a578 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0e4      	beq.n	800a47a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689a      	ldr	r2, [r3, #8]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4ce:	609a      	str	r2, [r3, #8]
 800a4d0:	e047      	b.n	800a562 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a4e0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4f0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a502:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a504:	f7fb fca6 	bl	8005e54 <HAL_GetTick>
 800a508:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a50a:	e013      	b.n	800a534 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a50c:	f7fb fca2 	bl	8005e54 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a51a:	d90b      	bls.n	800a534 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	22ff      	movs	r2, #255	@ 0xff
 800a522:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2203      	movs	r2, #3
 800a528:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e021      	b.n	800a578 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d0e4      	beq.n	800a50c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a560:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	22ff      	movs	r2, #255	@ 0xff
 800a568:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3724      	adds	r7, #36	@ 0x24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd90      	pop	{r4, r7, pc}

0800a580 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a59a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a59c:	f7fb fc5a 	bl	8005e54 <HAL_GetTick>
 800a5a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a5a2:	e009      	b.n	800a5b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a5a4:	f7fb fc56 	bl	8005e54 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5b2:	d901      	bls.n	800a5b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e007      	b.n	800a5c8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0ee      	beq.n	800a5a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d122      	bne.n	800a634 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68da      	ldr	r2, [r3, #12]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a5fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5fe:	f7fb fc29 	bl	8005e54 <HAL_GetTick>
 800a602:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a604:	e00c      	b.n	800a620 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a606:	f7fb fc25 	bl	8005e54 <HAL_GetTick>
 800a60a:	4602      	mov	r2, r0
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a614:	d904      	bls.n	800a620 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2204      	movs	r2, #4
 800a61a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <RTC_EnterInitMode+0x64>
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d1e8      	bne.n	800a606 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a634:	7bfb      	ldrb	r3, [r7, #15]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a658:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7ff ff89 	bl	800a580 <HAL_RTC_WaitForSynchro>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d004      	beq.n	800a67e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2204      	movs	r2, #4
 800a678:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a696:	e005      	b.n	800a6a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	3b0a      	subs	r3, #10
 800a6a2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	d8f6      	bhi.n	800a698 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	b2db      	uxtb	r3, r3
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	7f1b      	ldrb	r3, [r3, #28]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d101      	bne.n	800a6e0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e050      	b.n	800a782 <HAL_RTCEx_SetTimeStamp+0xbe>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f022 0206 	bic.w	r2, r2, #6
 800a6fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	430a      	orrs	r2, r1
 800a70a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	4b1f      	ldr	r3, [pc, #124]	@ (800a790 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a714:	4013      	ands	r3, r2
 800a716:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	22ca      	movs	r2, #202	@ 0xca
 800a726:	625a      	str	r2, [r3, #36]	@ 0x24
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2253      	movs	r2, #83	@ 0x53
 800a72e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a748:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	b2da      	uxtb	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a75a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	689a      	ldr	r2, [r3, #8]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a76a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	22ff      	movs	r2, #255	@ 0xff
 800a772:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2201      	movs	r2, #1
 800a778:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	fffff7f7 	.word	0xfffff7f7

0800a794 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e025      	b.n	800a7f4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d106      	bne.n	800a7c2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7f6 fd99 	bl	80012f4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	f001 fa33 	bl	800bc40 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	f001 fa87 	bl	800bcf8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a80e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d101      	bne.n	800a81a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a816:	2302      	movs	r3, #2
 800a818:	e021      	b.n	800a85e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d002      	beq.n	800a826 <HAL_SDRAM_SendCommand+0x2a>
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	2b05      	cmp	r3, #5
 800a824:	d118      	bne.n	800a858 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2202      	movs	r2, #2
 800a82a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	68b9      	ldr	r1, [r7, #8]
 800a836:	4618      	mov	r0, r3
 800a838:	f001 fac8 	bl	800bdcc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d104      	bne.n	800a84e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2205      	movs	r2, #5
 800a848:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a84c:	e006      	b.n	800a85c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a856:	e001      	b.n	800a85c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e000      	b.n	800a85e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d101      	bne.n	800a880 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a87c:	2302      	movs	r3, #2
 800a87e:	e016      	b.n	800a8ae <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d10f      	bne.n	800a8ac <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 faba 	bl	800be14 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	e000      	b.n	800a8ae <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e09d      	b.n	800aa04 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d108      	bne.n	800a8e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8d8:	d009      	beq.n	800a8ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	61da      	str	r2, [r3, #28]
 800a8e0:	e005      	b.n	800a8ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d106      	bne.n	800a90e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7f8 ffe7 	bl	80038dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2202      	movs	r2, #2
 800a912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a924:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a92e:	d902      	bls.n	800a936 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a930:	2300      	movs	r3, #0
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e002      	b.n	800a93c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a93a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a944:	d007      	beq.n	800a956 <HAL_SPI_Init+0xa0>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a94e:	d002      	beq.n	800a956 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a966:	431a      	orrs	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	431a      	orrs	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a984:	431a      	orrs	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a98e:	431a      	orrs	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a998:	ea42 0103 	orr.w	r1, r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	430a      	orrs	r2, r1
 800a9aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	0c1b      	lsrs	r3, r3, #16
 800a9b2:	f003 0204 	and.w	r2, r3, #4
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a9d2:	ea42 0103 	orr.w	r1, r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	69da      	ldr	r2, [r3, #28]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e049      	b.n	800aab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d106      	bne.n	800aa38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7fa ff92 	bl	800595c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f000 fac0 	bl	800afd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d001      	beq.n	800aad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e054      	b.n	800ab7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f042 0201 	orr.w	r2, r2, #1
 800aaea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a26      	ldr	r2, [pc, #152]	@ (800ab8c <HAL_TIM_Base_Start_IT+0xd0>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d022      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x80>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aafe:	d01d      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x80>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a22      	ldr	r2, [pc, #136]	@ (800ab90 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d018      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x80>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a21      	ldr	r2, [pc, #132]	@ (800ab94 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d013      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x80>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a1f      	ldr	r2, [pc, #124]	@ (800ab98 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d00e      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x80>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a1e      	ldr	r2, [pc, #120]	@ (800ab9c <HAL_TIM_Base_Start_IT+0xe0>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d009      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x80>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a1c      	ldr	r2, [pc, #112]	@ (800aba0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d004      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0x80>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a1b      	ldr	r2, [pc, #108]	@ (800aba4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d115      	bne.n	800ab68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689a      	ldr	r2, [r3, #8]
 800ab42:	4b19      	ldr	r3, [pc, #100]	@ (800aba8 <HAL_TIM_Base_Start_IT+0xec>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b06      	cmp	r3, #6
 800ab4c:	d015      	beq.n	800ab7a <HAL_TIM_Base_Start_IT+0xbe>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab54:	d011      	beq.n	800ab7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f042 0201 	orr.w	r2, r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab66:	e008      	b.n	800ab7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f042 0201 	orr.w	r2, r2, #1
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	e000      	b.n	800ab7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	40010000 	.word	0x40010000
 800ab90:	40000400 	.word	0x40000400
 800ab94:	40000800 	.word	0x40000800
 800ab98:	40000c00 	.word	0x40000c00
 800ab9c:	40010400 	.word	0x40010400
 800aba0:	40014000 	.word	0x40014000
 800aba4:	40001800 	.word	0x40001800
 800aba8:	00010007 	.word	0x00010007

0800abac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d122      	bne.n	800ac08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d11b      	bne.n	800ac08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f06f 0202 	mvn.w	r2, #2
 800abd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	f003 0303 	and.w	r3, r3, #3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f9d0 	bl	800af94 <HAL_TIM_IC_CaptureCallback>
 800abf4:	e005      	b.n	800ac02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f9c2 	bl	800af80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f9d3 	bl	800afa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d122      	bne.n	800ac5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d11b      	bne.n	800ac5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f06f 0204 	mvn.w	r2, #4
 800ac2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2202      	movs	r2, #2
 800ac32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f9a6 	bl	800af94 <HAL_TIM_IC_CaptureCallback>
 800ac48:	e005      	b.n	800ac56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f998 	bl	800af80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f9a9 	bl	800afa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f003 0308 	and.w	r3, r3, #8
 800ac66:	2b08      	cmp	r3, #8
 800ac68:	d122      	bne.n	800acb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f003 0308 	and.w	r3, r3, #8
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d11b      	bne.n	800acb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f06f 0208 	mvn.w	r2, #8
 800ac80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2204      	movs	r2, #4
 800ac86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f97c 	bl	800af94 <HAL_TIM_IC_CaptureCallback>
 800ac9c:	e005      	b.n	800acaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f96e 	bl	800af80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f97f 	bl	800afa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f003 0310 	and.w	r3, r3, #16
 800acba:	2b10      	cmp	r3, #16
 800acbc:	d122      	bne.n	800ad04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	f003 0310 	and.w	r3, r3, #16
 800acc8:	2b10      	cmp	r3, #16
 800acca:	d11b      	bne.n	800ad04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f06f 0210 	mvn.w	r2, #16
 800acd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2208      	movs	r2, #8
 800acda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f952 	bl	800af94 <HAL_TIM_IC_CaptureCallback>
 800acf0:	e005      	b.n	800acfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f944 	bl	800af80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f955 	bl	800afa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d10e      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d107      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f06f 0201 	mvn.w	r2, #1
 800ad28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7f8 fcae 	bl	800368c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad3a:	2b80      	cmp	r3, #128	@ 0x80
 800ad3c:	d10e      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad48:	2b80      	cmp	r3, #128	@ 0x80
 800ad4a:	d107      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ad54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fb0c 	bl	800b374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad6a:	d10e      	bne.n	800ad8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad76:	2b80      	cmp	r3, #128	@ 0x80
 800ad78:	d107      	bne.n	800ad8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 faff 	bl	800b388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad94:	2b40      	cmp	r3, #64	@ 0x40
 800ad96:	d10e      	bne.n	800adb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ada2:	2b40      	cmp	r3, #64	@ 0x40
 800ada4:	d107      	bne.n	800adb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800adae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f903 	bl	800afbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b20      	cmp	r3, #32
 800adc2:	d10e      	bne.n	800ade2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f003 0320 	and.w	r3, r3, #32
 800adce:	2b20      	cmp	r3, #32
 800add0:	d107      	bne.n	800ade2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f06f 0220 	mvn.w	r2, #32
 800adda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fabf 	bl	800b360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ade2:	bf00      	nop
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d101      	bne.n	800ae08 <HAL_TIM_ConfigClockSource+0x1c>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e0b4      	b.n	800af72 <HAL_TIM_ConfigClockSource+0x186>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	4b56      	ldr	r3, [pc, #344]	@ (800af7c <HAL_TIM_ConfigClockSource+0x190>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae40:	d03e      	beq.n	800aec0 <HAL_TIM_ConfigClockSource+0xd4>
 800ae42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae46:	f200 8087 	bhi.w	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae4e:	f000 8086 	beq.w	800af5e <HAL_TIM_ConfigClockSource+0x172>
 800ae52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae56:	d87f      	bhi.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae58:	2b70      	cmp	r3, #112	@ 0x70
 800ae5a:	d01a      	beq.n	800ae92 <HAL_TIM_ConfigClockSource+0xa6>
 800ae5c:	2b70      	cmp	r3, #112	@ 0x70
 800ae5e:	d87b      	bhi.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae60:	2b60      	cmp	r3, #96	@ 0x60
 800ae62:	d050      	beq.n	800af06 <HAL_TIM_ConfigClockSource+0x11a>
 800ae64:	2b60      	cmp	r3, #96	@ 0x60
 800ae66:	d877      	bhi.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae68:	2b50      	cmp	r3, #80	@ 0x50
 800ae6a:	d03c      	beq.n	800aee6 <HAL_TIM_ConfigClockSource+0xfa>
 800ae6c:	2b50      	cmp	r3, #80	@ 0x50
 800ae6e:	d873      	bhi.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae70:	2b40      	cmp	r3, #64	@ 0x40
 800ae72:	d058      	beq.n	800af26 <HAL_TIM_ConfigClockSource+0x13a>
 800ae74:	2b40      	cmp	r3, #64	@ 0x40
 800ae76:	d86f      	bhi.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae78:	2b30      	cmp	r3, #48	@ 0x30
 800ae7a:	d064      	beq.n	800af46 <HAL_TIM_ConfigClockSource+0x15a>
 800ae7c:	2b30      	cmp	r3, #48	@ 0x30
 800ae7e:	d86b      	bhi.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae80:	2b20      	cmp	r3, #32
 800ae82:	d060      	beq.n	800af46 <HAL_TIM_ConfigClockSource+0x15a>
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	d867      	bhi.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d05c      	beq.n	800af46 <HAL_TIM_ConfigClockSource+0x15a>
 800ae8c:	2b10      	cmp	r3, #16
 800ae8e:	d05a      	beq.n	800af46 <HAL_TIM_ConfigClockSource+0x15a>
 800ae90:	e062      	b.n	800af58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aea2:	f000 f9af 	bl	800b204 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aeb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	609a      	str	r2, [r3, #8]
      break;
 800aebe:	e04f      	b.n	800af60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aed0:	f000 f998 	bl	800b204 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689a      	ldr	r2, [r3, #8]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aee2:	609a      	str	r2, [r3, #8]
      break;
 800aee4:	e03c      	b.n	800af60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aef2:	461a      	mov	r2, r3
 800aef4:	f000 f90c 	bl	800b110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2150      	movs	r1, #80	@ 0x50
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 f965 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800af04:	e02c      	b.n	800af60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af12:	461a      	mov	r2, r3
 800af14:	f000 f92b 	bl	800b16e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2160      	movs	r1, #96	@ 0x60
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f955 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800af24:	e01c      	b.n	800af60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af32:	461a      	mov	r2, r3
 800af34:	f000 f8ec 	bl	800b110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2140      	movs	r1, #64	@ 0x40
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f945 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800af44:	e00c      	b.n	800af60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4619      	mov	r1, r3
 800af50:	4610      	mov	r0, r2
 800af52:	f000 f93c 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800af56:	e003      	b.n	800af60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	73fb      	strb	r3, [r7, #15]
      break;
 800af5c:	e000      	b.n	800af60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800af5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af70:	7bfb      	ldrb	r3, [r7, #15]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	fffeff88 	.word	0xfffeff88

0800af80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a40      	ldr	r2, [pc, #256]	@ (800b0e4 <TIM_Base_SetConfig+0x114>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d013      	beq.n	800b010 <TIM_Base_SetConfig+0x40>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afee:	d00f      	beq.n	800b010 <TIM_Base_SetConfig+0x40>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a3d      	ldr	r2, [pc, #244]	@ (800b0e8 <TIM_Base_SetConfig+0x118>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d00b      	beq.n	800b010 <TIM_Base_SetConfig+0x40>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a3c      	ldr	r2, [pc, #240]	@ (800b0ec <TIM_Base_SetConfig+0x11c>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d007      	beq.n	800b010 <TIM_Base_SetConfig+0x40>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a3b      	ldr	r2, [pc, #236]	@ (800b0f0 <TIM_Base_SetConfig+0x120>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d003      	beq.n	800b010 <TIM_Base_SetConfig+0x40>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a3a      	ldr	r2, [pc, #232]	@ (800b0f4 <TIM_Base_SetConfig+0x124>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d108      	bne.n	800b022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a2f      	ldr	r2, [pc, #188]	@ (800b0e4 <TIM_Base_SetConfig+0x114>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d02b      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b030:	d027      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a2c      	ldr	r2, [pc, #176]	@ (800b0e8 <TIM_Base_SetConfig+0x118>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d023      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a2b      	ldr	r2, [pc, #172]	@ (800b0ec <TIM_Base_SetConfig+0x11c>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d01f      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a2a      	ldr	r2, [pc, #168]	@ (800b0f0 <TIM_Base_SetConfig+0x120>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d01b      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a29      	ldr	r2, [pc, #164]	@ (800b0f4 <TIM_Base_SetConfig+0x124>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d017      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a28      	ldr	r2, [pc, #160]	@ (800b0f8 <TIM_Base_SetConfig+0x128>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d013      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a27      	ldr	r2, [pc, #156]	@ (800b0fc <TIM_Base_SetConfig+0x12c>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d00f      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a26      	ldr	r2, [pc, #152]	@ (800b100 <TIM_Base_SetConfig+0x130>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d00b      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a25      	ldr	r2, [pc, #148]	@ (800b104 <TIM_Base_SetConfig+0x134>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d007      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a24      	ldr	r2, [pc, #144]	@ (800b108 <TIM_Base_SetConfig+0x138>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d003      	beq.n	800b082 <TIM_Base_SetConfig+0xb2>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a23      	ldr	r2, [pc, #140]	@ (800b10c <TIM_Base_SetConfig+0x13c>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d108      	bne.n	800b094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	4313      	orrs	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	689a      	ldr	r2, [r3, #8]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b0e4 <TIM_Base_SetConfig+0x114>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d003      	beq.n	800b0c8 <TIM_Base_SetConfig+0xf8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b0f4 <TIM_Base_SetConfig+0x124>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d103      	bne.n	800b0d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	691a      	ldr	r2, [r3, #16]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	615a      	str	r2, [r3, #20]
}
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	40000400 	.word	0x40000400
 800b0ec:	40000800 	.word	0x40000800
 800b0f0:	40000c00 	.word	0x40000c00
 800b0f4:	40010400 	.word	0x40010400
 800b0f8:	40014000 	.word	0x40014000
 800b0fc:	40014400 	.word	0x40014400
 800b100:	40014800 	.word	0x40014800
 800b104:	40001800 	.word	0x40001800
 800b108:	40001c00 	.word	0x40001c00
 800b10c:	40002000 	.word	0x40002000

0800b110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b110:	b480      	push	{r7}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
 800b120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	f023 0201 	bic.w	r2, r3, #1
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4313      	orrs	r3, r2
 800b144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f023 030a 	bic.w	r3, r3, #10
 800b14c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	4313      	orrs	r3, r2
 800b154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	621a      	str	r2, [r3, #32]
}
 800b162:	bf00      	nop
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b16e:	b480      	push	{r7}
 800b170:	b087      	sub	sp, #28
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	f023 0210 	bic.w	r2, r3, #16
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	031b      	lsls	r3, r3, #12
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b1aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	011b      	lsls	r3, r3, #4
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	621a      	str	r2, [r3, #32]
}
 800b1c2:	bf00      	nop
 800b1c4:	371c      	adds	r7, #28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	f043 0307 	orr.w	r3, r3, #7
 800b1f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	609a      	str	r2, [r3, #8]
}
 800b1f8:	bf00      	nop
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b204:	b480      	push	{r7}
 800b206:	b087      	sub	sp, #28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b21e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	021a      	lsls	r2, r3, #8
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	431a      	orrs	r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4313      	orrs	r3, r2
 800b230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	609a      	str	r2, [r3, #8]
}
 800b238:	bf00      	nop
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b254:	2b01      	cmp	r3, #1
 800b256:	d101      	bne.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b258:	2302      	movs	r3, #2
 800b25a:	e06d      	b.n	800b338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2202      	movs	r2, #2
 800b268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a30      	ldr	r2, [pc, #192]	@ (800b344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d004      	beq.n	800b290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a2f      	ldr	r2, [pc, #188]	@ (800b348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d108      	bne.n	800b2a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a20      	ldr	r2, [pc, #128]	@ (800b344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d022      	beq.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ce:	d01d      	beq.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b34c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d018      	beq.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a1c      	ldr	r2, [pc, #112]	@ (800b350 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d013      	beq.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a1a      	ldr	r2, [pc, #104]	@ (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00e      	beq.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a15      	ldr	r2, [pc, #84]	@ (800b348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d009      	beq.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a16      	ldr	r2, [pc, #88]	@ (800b358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d004      	beq.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a15      	ldr	r2, [pc, #84]	@ (800b35c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d10c      	bne.n	800b326 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b312:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	40010000 	.word	0x40010000
 800b348:	40010400 	.word	0x40010400
 800b34c:	40000400 	.word	0x40000400
 800b350:	40000800 	.word	0x40000800
 800b354:	40000c00 	.word	0x40000c00
 800b358:	40014000 	.word	0x40014000
 800b35c:	40001800 	.word	0x40001800

0800b360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e040      	b.n	800b430 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fa fbee 	bl	8005ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2224      	movs	r2, #36	@ 0x24
 800b3c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 0201 	bic.w	r2, r2, #1
 800b3d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f82c 	bl	800b438 <UART_SetConfig>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d101      	bne.n	800b3ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e022      	b.n	800b430 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fa84 	bl	800b900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689a      	ldr	r2, [r3, #8]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f042 0201 	orr.w	r2, r2, #1
 800b426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fb0b 	bl	800ba44 <UART_CheckIdleState>
 800b42e:	4603      	mov	r3, r0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	431a      	orrs	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	4313      	orrs	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	4ba6      	ldr	r3, [pc, #664]	@ (800b6fc <UART_SetConfig+0x2c4>)
 800b464:	4013      	ands	r3, r2
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	6979      	ldr	r1, [r7, #20]
 800b46c:	430b      	orrs	r3, r1
 800b46e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a1b      	ldr	r3, [r3, #32]
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	4313      	orrs	r3, r2
 800b494:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a94      	ldr	r2, [pc, #592]	@ (800b700 <UART_SetConfig+0x2c8>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d120      	bne.n	800b4f6 <UART_SetConfig+0xbe>
 800b4b4:	4b93      	ldr	r3, [pc, #588]	@ (800b704 <UART_SetConfig+0x2cc>)
 800b4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d816      	bhi.n	800b4f0 <UART_SetConfig+0xb8>
 800b4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c8 <UART_SetConfig+0x90>)
 800b4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c8:	0800b4d9 	.word	0x0800b4d9
 800b4cc:	0800b4e5 	.word	0x0800b4e5
 800b4d0:	0800b4df 	.word	0x0800b4df
 800b4d4:	0800b4eb 	.word	0x0800b4eb
 800b4d8:	2301      	movs	r3, #1
 800b4da:	77fb      	strb	r3, [r7, #31]
 800b4dc:	e150      	b.n	800b780 <UART_SetConfig+0x348>
 800b4de:	2302      	movs	r3, #2
 800b4e0:	77fb      	strb	r3, [r7, #31]
 800b4e2:	e14d      	b.n	800b780 <UART_SetConfig+0x348>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e14a      	b.n	800b780 <UART_SetConfig+0x348>
 800b4ea:	2308      	movs	r3, #8
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	e147      	b.n	800b780 <UART_SetConfig+0x348>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	77fb      	strb	r3, [r7, #31]
 800b4f4:	e144      	b.n	800b780 <UART_SetConfig+0x348>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a83      	ldr	r2, [pc, #524]	@ (800b708 <UART_SetConfig+0x2d0>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d132      	bne.n	800b566 <UART_SetConfig+0x12e>
 800b500:	4b80      	ldr	r3, [pc, #512]	@ (800b704 <UART_SetConfig+0x2cc>)
 800b502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b506:	f003 030c 	and.w	r3, r3, #12
 800b50a:	2b0c      	cmp	r3, #12
 800b50c:	d828      	bhi.n	800b560 <UART_SetConfig+0x128>
 800b50e:	a201      	add	r2, pc, #4	@ (adr r2, 800b514 <UART_SetConfig+0xdc>)
 800b510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b514:	0800b549 	.word	0x0800b549
 800b518:	0800b561 	.word	0x0800b561
 800b51c:	0800b561 	.word	0x0800b561
 800b520:	0800b561 	.word	0x0800b561
 800b524:	0800b555 	.word	0x0800b555
 800b528:	0800b561 	.word	0x0800b561
 800b52c:	0800b561 	.word	0x0800b561
 800b530:	0800b561 	.word	0x0800b561
 800b534:	0800b54f 	.word	0x0800b54f
 800b538:	0800b561 	.word	0x0800b561
 800b53c:	0800b561 	.word	0x0800b561
 800b540:	0800b561 	.word	0x0800b561
 800b544:	0800b55b 	.word	0x0800b55b
 800b548:	2300      	movs	r3, #0
 800b54a:	77fb      	strb	r3, [r7, #31]
 800b54c:	e118      	b.n	800b780 <UART_SetConfig+0x348>
 800b54e:	2302      	movs	r3, #2
 800b550:	77fb      	strb	r3, [r7, #31]
 800b552:	e115      	b.n	800b780 <UART_SetConfig+0x348>
 800b554:	2304      	movs	r3, #4
 800b556:	77fb      	strb	r3, [r7, #31]
 800b558:	e112      	b.n	800b780 <UART_SetConfig+0x348>
 800b55a:	2308      	movs	r3, #8
 800b55c:	77fb      	strb	r3, [r7, #31]
 800b55e:	e10f      	b.n	800b780 <UART_SetConfig+0x348>
 800b560:	2310      	movs	r3, #16
 800b562:	77fb      	strb	r3, [r7, #31]
 800b564:	e10c      	b.n	800b780 <UART_SetConfig+0x348>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a68      	ldr	r2, [pc, #416]	@ (800b70c <UART_SetConfig+0x2d4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d120      	bne.n	800b5b2 <UART_SetConfig+0x17a>
 800b570:	4b64      	ldr	r3, [pc, #400]	@ (800b704 <UART_SetConfig+0x2cc>)
 800b572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b576:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b57a:	2b30      	cmp	r3, #48	@ 0x30
 800b57c:	d013      	beq.n	800b5a6 <UART_SetConfig+0x16e>
 800b57e:	2b30      	cmp	r3, #48	@ 0x30
 800b580:	d814      	bhi.n	800b5ac <UART_SetConfig+0x174>
 800b582:	2b20      	cmp	r3, #32
 800b584:	d009      	beq.n	800b59a <UART_SetConfig+0x162>
 800b586:	2b20      	cmp	r3, #32
 800b588:	d810      	bhi.n	800b5ac <UART_SetConfig+0x174>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d002      	beq.n	800b594 <UART_SetConfig+0x15c>
 800b58e:	2b10      	cmp	r3, #16
 800b590:	d006      	beq.n	800b5a0 <UART_SetConfig+0x168>
 800b592:	e00b      	b.n	800b5ac <UART_SetConfig+0x174>
 800b594:	2300      	movs	r3, #0
 800b596:	77fb      	strb	r3, [r7, #31]
 800b598:	e0f2      	b.n	800b780 <UART_SetConfig+0x348>
 800b59a:	2302      	movs	r3, #2
 800b59c:	77fb      	strb	r3, [r7, #31]
 800b59e:	e0ef      	b.n	800b780 <UART_SetConfig+0x348>
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	77fb      	strb	r3, [r7, #31]
 800b5a4:	e0ec      	b.n	800b780 <UART_SetConfig+0x348>
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	77fb      	strb	r3, [r7, #31]
 800b5aa:	e0e9      	b.n	800b780 <UART_SetConfig+0x348>
 800b5ac:	2310      	movs	r3, #16
 800b5ae:	77fb      	strb	r3, [r7, #31]
 800b5b0:	e0e6      	b.n	800b780 <UART_SetConfig+0x348>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a56      	ldr	r2, [pc, #344]	@ (800b710 <UART_SetConfig+0x2d8>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d120      	bne.n	800b5fe <UART_SetConfig+0x1c6>
 800b5bc:	4b51      	ldr	r3, [pc, #324]	@ (800b704 <UART_SetConfig+0x2cc>)
 800b5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b5c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5c8:	d013      	beq.n	800b5f2 <UART_SetConfig+0x1ba>
 800b5ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5cc:	d814      	bhi.n	800b5f8 <UART_SetConfig+0x1c0>
 800b5ce:	2b80      	cmp	r3, #128	@ 0x80
 800b5d0:	d009      	beq.n	800b5e6 <UART_SetConfig+0x1ae>
 800b5d2:	2b80      	cmp	r3, #128	@ 0x80
 800b5d4:	d810      	bhi.n	800b5f8 <UART_SetConfig+0x1c0>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <UART_SetConfig+0x1a8>
 800b5da:	2b40      	cmp	r3, #64	@ 0x40
 800b5dc:	d006      	beq.n	800b5ec <UART_SetConfig+0x1b4>
 800b5de:	e00b      	b.n	800b5f8 <UART_SetConfig+0x1c0>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	77fb      	strb	r3, [r7, #31]
 800b5e4:	e0cc      	b.n	800b780 <UART_SetConfig+0x348>
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	77fb      	strb	r3, [r7, #31]
 800b5ea:	e0c9      	b.n	800b780 <UART_SetConfig+0x348>
 800b5ec:	2304      	movs	r3, #4
 800b5ee:	77fb      	strb	r3, [r7, #31]
 800b5f0:	e0c6      	b.n	800b780 <UART_SetConfig+0x348>
 800b5f2:	2308      	movs	r3, #8
 800b5f4:	77fb      	strb	r3, [r7, #31]
 800b5f6:	e0c3      	b.n	800b780 <UART_SetConfig+0x348>
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	77fb      	strb	r3, [r7, #31]
 800b5fc:	e0c0      	b.n	800b780 <UART_SetConfig+0x348>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a44      	ldr	r2, [pc, #272]	@ (800b714 <UART_SetConfig+0x2dc>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d125      	bne.n	800b654 <UART_SetConfig+0x21c>
 800b608:	4b3e      	ldr	r3, [pc, #248]	@ (800b704 <UART_SetConfig+0x2cc>)
 800b60a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b60e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b616:	d017      	beq.n	800b648 <UART_SetConfig+0x210>
 800b618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b61c:	d817      	bhi.n	800b64e <UART_SetConfig+0x216>
 800b61e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b622:	d00b      	beq.n	800b63c <UART_SetConfig+0x204>
 800b624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b628:	d811      	bhi.n	800b64e <UART_SetConfig+0x216>
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <UART_SetConfig+0x1fe>
 800b62e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b632:	d006      	beq.n	800b642 <UART_SetConfig+0x20a>
 800b634:	e00b      	b.n	800b64e <UART_SetConfig+0x216>
 800b636:	2300      	movs	r3, #0
 800b638:	77fb      	strb	r3, [r7, #31]
 800b63a:	e0a1      	b.n	800b780 <UART_SetConfig+0x348>
 800b63c:	2302      	movs	r3, #2
 800b63e:	77fb      	strb	r3, [r7, #31]
 800b640:	e09e      	b.n	800b780 <UART_SetConfig+0x348>
 800b642:	2304      	movs	r3, #4
 800b644:	77fb      	strb	r3, [r7, #31]
 800b646:	e09b      	b.n	800b780 <UART_SetConfig+0x348>
 800b648:	2308      	movs	r3, #8
 800b64a:	77fb      	strb	r3, [r7, #31]
 800b64c:	e098      	b.n	800b780 <UART_SetConfig+0x348>
 800b64e:	2310      	movs	r3, #16
 800b650:	77fb      	strb	r3, [r7, #31]
 800b652:	e095      	b.n	800b780 <UART_SetConfig+0x348>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a2f      	ldr	r2, [pc, #188]	@ (800b718 <UART_SetConfig+0x2e0>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d125      	bne.n	800b6aa <UART_SetConfig+0x272>
 800b65e:	4b29      	ldr	r3, [pc, #164]	@ (800b704 <UART_SetConfig+0x2cc>)
 800b660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b664:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b668:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b66c:	d017      	beq.n	800b69e <UART_SetConfig+0x266>
 800b66e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b672:	d817      	bhi.n	800b6a4 <UART_SetConfig+0x26c>
 800b674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b678:	d00b      	beq.n	800b692 <UART_SetConfig+0x25a>
 800b67a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b67e:	d811      	bhi.n	800b6a4 <UART_SetConfig+0x26c>
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <UART_SetConfig+0x254>
 800b684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b688:	d006      	beq.n	800b698 <UART_SetConfig+0x260>
 800b68a:	e00b      	b.n	800b6a4 <UART_SetConfig+0x26c>
 800b68c:	2301      	movs	r3, #1
 800b68e:	77fb      	strb	r3, [r7, #31]
 800b690:	e076      	b.n	800b780 <UART_SetConfig+0x348>
 800b692:	2302      	movs	r3, #2
 800b694:	77fb      	strb	r3, [r7, #31]
 800b696:	e073      	b.n	800b780 <UART_SetConfig+0x348>
 800b698:	2304      	movs	r3, #4
 800b69a:	77fb      	strb	r3, [r7, #31]
 800b69c:	e070      	b.n	800b780 <UART_SetConfig+0x348>
 800b69e:	2308      	movs	r3, #8
 800b6a0:	77fb      	strb	r3, [r7, #31]
 800b6a2:	e06d      	b.n	800b780 <UART_SetConfig+0x348>
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	77fb      	strb	r3, [r7, #31]
 800b6a8:	e06a      	b.n	800b780 <UART_SetConfig+0x348>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a1b      	ldr	r2, [pc, #108]	@ (800b71c <UART_SetConfig+0x2e4>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d138      	bne.n	800b726 <UART_SetConfig+0x2ee>
 800b6b4:	4b13      	ldr	r3, [pc, #76]	@ (800b704 <UART_SetConfig+0x2cc>)
 800b6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b6be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b6c2:	d017      	beq.n	800b6f4 <UART_SetConfig+0x2bc>
 800b6c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b6c8:	d82a      	bhi.n	800b720 <UART_SetConfig+0x2e8>
 800b6ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6ce:	d00b      	beq.n	800b6e8 <UART_SetConfig+0x2b0>
 800b6d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6d4:	d824      	bhi.n	800b720 <UART_SetConfig+0x2e8>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <UART_SetConfig+0x2aa>
 800b6da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6de:	d006      	beq.n	800b6ee <UART_SetConfig+0x2b6>
 800b6e0:	e01e      	b.n	800b720 <UART_SetConfig+0x2e8>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	77fb      	strb	r3, [r7, #31]
 800b6e6:	e04b      	b.n	800b780 <UART_SetConfig+0x348>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	77fb      	strb	r3, [r7, #31]
 800b6ec:	e048      	b.n	800b780 <UART_SetConfig+0x348>
 800b6ee:	2304      	movs	r3, #4
 800b6f0:	77fb      	strb	r3, [r7, #31]
 800b6f2:	e045      	b.n	800b780 <UART_SetConfig+0x348>
 800b6f4:	2308      	movs	r3, #8
 800b6f6:	77fb      	strb	r3, [r7, #31]
 800b6f8:	e042      	b.n	800b780 <UART_SetConfig+0x348>
 800b6fa:	bf00      	nop
 800b6fc:	efff69f3 	.word	0xefff69f3
 800b700:	40011000 	.word	0x40011000
 800b704:	40023800 	.word	0x40023800
 800b708:	40004400 	.word	0x40004400
 800b70c:	40004800 	.word	0x40004800
 800b710:	40004c00 	.word	0x40004c00
 800b714:	40005000 	.word	0x40005000
 800b718:	40011400 	.word	0x40011400
 800b71c:	40007800 	.word	0x40007800
 800b720:	2310      	movs	r3, #16
 800b722:	77fb      	strb	r3, [r7, #31]
 800b724:	e02c      	b.n	800b780 <UART_SetConfig+0x348>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a72      	ldr	r2, [pc, #456]	@ (800b8f4 <UART_SetConfig+0x4bc>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d125      	bne.n	800b77c <UART_SetConfig+0x344>
 800b730:	4b71      	ldr	r3, [pc, #452]	@ (800b8f8 <UART_SetConfig+0x4c0>)
 800b732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b736:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b73a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b73e:	d017      	beq.n	800b770 <UART_SetConfig+0x338>
 800b740:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b744:	d817      	bhi.n	800b776 <UART_SetConfig+0x33e>
 800b746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b74a:	d00b      	beq.n	800b764 <UART_SetConfig+0x32c>
 800b74c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b750:	d811      	bhi.n	800b776 <UART_SetConfig+0x33e>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <UART_SetConfig+0x326>
 800b756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b75a:	d006      	beq.n	800b76a <UART_SetConfig+0x332>
 800b75c:	e00b      	b.n	800b776 <UART_SetConfig+0x33e>
 800b75e:	2300      	movs	r3, #0
 800b760:	77fb      	strb	r3, [r7, #31]
 800b762:	e00d      	b.n	800b780 <UART_SetConfig+0x348>
 800b764:	2302      	movs	r3, #2
 800b766:	77fb      	strb	r3, [r7, #31]
 800b768:	e00a      	b.n	800b780 <UART_SetConfig+0x348>
 800b76a:	2304      	movs	r3, #4
 800b76c:	77fb      	strb	r3, [r7, #31]
 800b76e:	e007      	b.n	800b780 <UART_SetConfig+0x348>
 800b770:	2308      	movs	r3, #8
 800b772:	77fb      	strb	r3, [r7, #31]
 800b774:	e004      	b.n	800b780 <UART_SetConfig+0x348>
 800b776:	2310      	movs	r3, #16
 800b778:	77fb      	strb	r3, [r7, #31]
 800b77a:	e001      	b.n	800b780 <UART_SetConfig+0x348>
 800b77c:	2310      	movs	r3, #16
 800b77e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b788:	d15b      	bne.n	800b842 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b78a:	7ffb      	ldrb	r3, [r7, #31]
 800b78c:	2b08      	cmp	r3, #8
 800b78e:	d828      	bhi.n	800b7e2 <UART_SetConfig+0x3aa>
 800b790:	a201      	add	r2, pc, #4	@ (adr r2, 800b798 <UART_SetConfig+0x360>)
 800b792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b796:	bf00      	nop
 800b798:	0800b7bd 	.word	0x0800b7bd
 800b79c:	0800b7c5 	.word	0x0800b7c5
 800b7a0:	0800b7cd 	.word	0x0800b7cd
 800b7a4:	0800b7e3 	.word	0x0800b7e3
 800b7a8:	0800b7d3 	.word	0x0800b7d3
 800b7ac:	0800b7e3 	.word	0x0800b7e3
 800b7b0:	0800b7e3 	.word	0x0800b7e3
 800b7b4:	0800b7e3 	.word	0x0800b7e3
 800b7b8:	0800b7db 	.word	0x0800b7db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7bc:	f7fd ffca 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800b7c0:	61b8      	str	r0, [r7, #24]
        break;
 800b7c2:	e013      	b.n	800b7ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7c4:	f7fd ffda 	bl	800977c <HAL_RCC_GetPCLK2Freq>
 800b7c8:	61b8      	str	r0, [r7, #24]
        break;
 800b7ca:	e00f      	b.n	800b7ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7cc:	4b4b      	ldr	r3, [pc, #300]	@ (800b8fc <UART_SetConfig+0x4c4>)
 800b7ce:	61bb      	str	r3, [r7, #24]
        break;
 800b7d0:	e00c      	b.n	800b7ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7d2:	f7fd feed 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800b7d6:	61b8      	str	r0, [r7, #24]
        break;
 800b7d8:	e008      	b.n	800b7ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7de:	61bb      	str	r3, [r7, #24]
        break;
 800b7e0:	e004      	b.n	800b7ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	77bb      	strb	r3, [r7, #30]
        break;
 800b7ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d074      	beq.n	800b8dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	005a      	lsls	r2, r3, #1
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	085b      	lsrs	r3, r3, #1
 800b7fc:	441a      	add	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	fbb2 f3f3 	udiv	r3, r2, r3
 800b806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	2b0f      	cmp	r3, #15
 800b80c:	d916      	bls.n	800b83c <UART_SetConfig+0x404>
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b814:	d212      	bcs.n	800b83c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f023 030f 	bic.w	r3, r3, #15
 800b81e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	085b      	lsrs	r3, r3, #1
 800b824:	b29b      	uxth	r3, r3
 800b826:	f003 0307 	and.w	r3, r3, #7
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	89fb      	ldrh	r3, [r7, #14]
 800b82e:	4313      	orrs	r3, r2
 800b830:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	89fa      	ldrh	r2, [r7, #14]
 800b838:	60da      	str	r2, [r3, #12]
 800b83a:	e04f      	b.n	800b8dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	77bb      	strb	r3, [r7, #30]
 800b840:	e04c      	b.n	800b8dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b842:	7ffb      	ldrb	r3, [r7, #31]
 800b844:	2b08      	cmp	r3, #8
 800b846:	d828      	bhi.n	800b89a <UART_SetConfig+0x462>
 800b848:	a201      	add	r2, pc, #4	@ (adr r2, 800b850 <UART_SetConfig+0x418>)
 800b84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84e:	bf00      	nop
 800b850:	0800b875 	.word	0x0800b875
 800b854:	0800b87d 	.word	0x0800b87d
 800b858:	0800b885 	.word	0x0800b885
 800b85c:	0800b89b 	.word	0x0800b89b
 800b860:	0800b88b 	.word	0x0800b88b
 800b864:	0800b89b 	.word	0x0800b89b
 800b868:	0800b89b 	.word	0x0800b89b
 800b86c:	0800b89b 	.word	0x0800b89b
 800b870:	0800b893 	.word	0x0800b893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b874:	f7fd ff6e 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800b878:	61b8      	str	r0, [r7, #24]
        break;
 800b87a:	e013      	b.n	800b8a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b87c:	f7fd ff7e 	bl	800977c <HAL_RCC_GetPCLK2Freq>
 800b880:	61b8      	str	r0, [r7, #24]
        break;
 800b882:	e00f      	b.n	800b8a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b884:	4b1d      	ldr	r3, [pc, #116]	@ (800b8fc <UART_SetConfig+0x4c4>)
 800b886:	61bb      	str	r3, [r7, #24]
        break;
 800b888:	e00c      	b.n	800b8a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b88a:	f7fd fe91 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800b88e:	61b8      	str	r0, [r7, #24]
        break;
 800b890:	e008      	b.n	800b8a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b896:	61bb      	str	r3, [r7, #24]
        break;
 800b898:	e004      	b.n	800b8a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b89a:	2300      	movs	r3, #0
 800b89c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	77bb      	strb	r3, [r7, #30]
        break;
 800b8a2:	bf00      	nop
    }

    if (pclk != 0U)
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d018      	beq.n	800b8dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	085a      	lsrs	r2, r3, #1
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	441a      	add	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	2b0f      	cmp	r3, #15
 800b8c2:	d909      	bls.n	800b8d8 <UART_SetConfig+0x4a0>
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8ca:	d205      	bcs.n	800b8d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60da      	str	r2, [r3, #12]
 800b8d6:	e001      	b.n	800b8dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b8e8:	7fbb      	ldrb	r3, [r7, #30]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3720      	adds	r7, #32
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	40007c00 	.word	0x40007c00
 800b8f8:	40023800 	.word	0x40023800
 800b8fc:	00f42400 	.word	0x00f42400

0800b900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00a      	beq.n	800b92a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92e:	f003 0302 	and.w	r3, r3, #2
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	430a      	orrs	r2, r1
 800b94a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00a      	beq.n	800b96e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b972:	f003 0308 	and.w	r3, r3, #8
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b994:	f003 0310 	and.w	r3, r3, #16
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00a      	beq.n	800b9b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b6:	f003 0320 	and.w	r3, r3, #32
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00a      	beq.n	800b9d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d01a      	beq.n	800ba16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9fe:	d10a      	bne.n	800ba16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	430a      	orrs	r2, r1
 800ba14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00a      	beq.n	800ba38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	430a      	orrs	r2, r1
 800ba36:	605a      	str	r2, [r3, #4]
  }
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af02      	add	r7, sp, #8
 800ba4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba54:	f7fa f9fe 	bl	8005e54 <HAL_GetTick>
 800ba58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0308 	and.w	r3, r3, #8
 800ba64:	2b08      	cmp	r3, #8
 800ba66:	d10e      	bne.n	800ba86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f81b 	bl	800bab2 <UART_WaitOnFlagUntilTimeout>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba82:	2303      	movs	r3, #3
 800ba84:	e011      	b.n	800baaa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2220      	movs	r2, #32
 800ba8a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b09c      	sub	sp, #112	@ 0x70
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bac2:	e0a7      	b.n	800bc14 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baca:	f000 80a3 	beq.w	800bc14 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bace:	f7fa f9c1 	bl	8005e54 <HAL_GetTick>
 800bad2:	4602      	mov	r2, r0
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bada:	429a      	cmp	r2, r3
 800badc:	d302      	bcc.n	800bae4 <UART_WaitOnFlagUntilTimeout+0x32>
 800bade:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d13f      	bne.n	800bb64 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baec:	e853 3f00 	ldrex	r3, [r3]
 800baf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800baf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800baf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb04:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb06:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bb08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bb0a:	e841 2300 	strex	r3, r2, [r1]
 800bb0e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bb10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1e6      	bne.n	800bae4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb20:	e853 3f00 	ldrex	r3, [r3]
 800bb24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb28:	f023 0301 	bic.w	r3, r3, #1
 800bb2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3308      	adds	r3, #8
 800bb34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb36:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bb38:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb3e:	e841 2300 	strex	r3, r2, [r1]
 800bb42:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bb44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1e5      	bne.n	800bb16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2220      	movs	r2, #32
 800bb4e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2220      	movs	r2, #32
 800bb54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800bb60:	2303      	movs	r3, #3
 800bb62:	e068      	b.n	800bc36 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0304 	and.w	r3, r3, #4
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d050      	beq.n	800bc14 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb80:	d148      	bne.n	800bc14 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb94:	e853 3f00 	ldrex	r3, [r3]
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bbb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbb2:	e841 2300 	strex	r3, r2, [r1]
 800bbb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1e6      	bne.n	800bb8c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	e853 3f00 	ldrex	r3, [r3]
 800bbcc:	613b      	str	r3, [r7, #16]
   return(result);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f023 0301 	bic.w	r3, r3, #1
 800bbd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3308      	adds	r3, #8
 800bbdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bbde:	623a      	str	r2, [r7, #32]
 800bbe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	69f9      	ldr	r1, [r7, #28]
 800bbe4:	6a3a      	ldr	r2, [r7, #32]
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e5      	bne.n	800bbbe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e010      	b.n	800bc36 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	69da      	ldr	r2, [r3, #28]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	bf0c      	ite	eq
 800bc24:	2301      	moveq	r3, #1
 800bc26:	2300      	movne	r3, #0
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	f43f af48 	beq.w	800bac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3770      	adds	r7, #112	@ 0x70
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d121      	bne.n	800bc96 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	4b27      	ldr	r3, [pc, #156]	@ (800bcf4 <FMC_SDRAM_Init+0xb4>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	6851      	ldr	r1, [r2, #4]
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	6892      	ldr	r2, [r2, #8]
 800bc62:	4311      	orrs	r1, r2
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	68d2      	ldr	r2, [r2, #12]
 800bc68:	4311      	orrs	r1, r2
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	6912      	ldr	r2, [r2, #16]
 800bc6e:	4311      	orrs	r1, r2
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	6952      	ldr	r2, [r2, #20]
 800bc74:	4311      	orrs	r1, r2
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	6992      	ldr	r2, [r2, #24]
 800bc7a:	4311      	orrs	r1, r2
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	69d2      	ldr	r2, [r2, #28]
 800bc80:	4311      	orrs	r1, r2
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	6a12      	ldr	r2, [r2, #32]
 800bc86:	4311      	orrs	r1, r2
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	e026      	b.n	800bce4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	69d9      	ldr	r1, [r3, #28]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	4319      	orrs	r1, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcac:	430b      	orrs	r3, r1
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bcf4 <FMC_SDRAM_Init+0xb4>)
 800bcba:	4013      	ands	r3, r2
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	6851      	ldr	r1, [r2, #4]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	6892      	ldr	r2, [r2, #8]
 800bcc4:	4311      	orrs	r1, r2
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	68d2      	ldr	r2, [r2, #12]
 800bcca:	4311      	orrs	r1, r2
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	6912      	ldr	r2, [r2, #16]
 800bcd0:	4311      	orrs	r1, r2
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	6952      	ldr	r2, [r2, #20]
 800bcd6:	4311      	orrs	r1, r2
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	6992      	ldr	r2, [r2, #24]
 800bcdc:	430a      	orrs	r2, r1
 800bcde:	431a      	orrs	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	ffff8000 	.word	0xffff8000

0800bcf8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d128      	bne.n	800bd5c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	1e59      	subs	r1, r3, #1
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	4319      	orrs	r1, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	021b      	lsls	r3, r3, #8
 800bd2a:	4319      	orrs	r1, r3
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	3b01      	subs	r3, #1
 800bd32:	031b      	lsls	r3, r3, #12
 800bd34:	4319      	orrs	r1, r3
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	041b      	lsls	r3, r3, #16
 800bd3e:	4319      	orrs	r1, r3
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	051b      	lsls	r3, r3, #20
 800bd48:	4319      	orrs	r1, r3
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	061b      	lsls	r3, r3, #24
 800bd52:	430b      	orrs	r3, r1
 800bd54:	431a      	orrs	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	609a      	str	r2, [r3, #8]
 800bd5a:	e02d      	b.n	800bdb8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	4b19      	ldr	r3, [pc, #100]	@ (800bdc8 <FMC_SDRAM_Timing_Init+0xd0>)
 800bd62:	4013      	ands	r3, r2
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	68d2      	ldr	r2, [r2, #12]
 800bd68:	3a01      	subs	r2, #1
 800bd6a:	0311      	lsls	r1, r2, #12
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	6952      	ldr	r2, [r2, #20]
 800bd70:	3a01      	subs	r2, #1
 800bd72:	0512      	lsls	r2, r2, #20
 800bd74:	430a      	orrs	r2, r1
 800bd76:	431a      	orrs	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	1e59      	subs	r1, r3, #1
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	011b      	lsls	r3, r3, #4
 800bd92:	4319      	orrs	r1, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	4319      	orrs	r1, r3
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	041b      	lsls	r3, r3, #16
 800bda6:	4319      	orrs	r1, r3
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	061b      	lsls	r3, r3, #24
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	ff0f0fff 	.word	0xff0f0fff

0800bdcc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	691a      	ldr	r2, [r3, #16]
 800bddc:	4b0c      	ldr	r3, [pc, #48]	@ (800be10 <FMC_SDRAM_SendCommand+0x44>)
 800bdde:	4013      	ands	r3, r2
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	6811      	ldr	r1, [r2, #0]
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	6852      	ldr	r2, [r2, #4]
 800bde8:	4311      	orrs	r1, r2
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	6892      	ldr	r2, [r2, #8]
 800bdee:	3a01      	subs	r2, #1
 800bdf0:	0152      	lsls	r2, r2, #5
 800bdf2:	4311      	orrs	r1, r2
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	68d2      	ldr	r2, [r2, #12]
 800bdf8:	0252      	lsls	r2, r2, #9
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	ffc00000 	.word	0xffc00000

0800be14 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	695a      	ldr	r2, [r3, #20]
 800be22:	4b07      	ldr	r3, [pc, #28]	@ (800be40 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800be24:	4013      	ands	r3, r2
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	0052      	lsls	r2, r2, #1
 800be2a:	431a      	orrs	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	ffffc001 	.word	0xffffc001

0800be44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800be52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be56:	2b84      	cmp	r3, #132	@ 0x84
 800be58:	d005      	beq.n	800be66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800be5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	3303      	adds	r3, #3
 800be64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800be66:	68fb      	ldr	r3, [r7, #12]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800be78:	f001 f86c 	bl	800cf54 <vTaskStartScheduler>
  
  return osOK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	bd80      	pop	{r7, pc}

0800be82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800be82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be84:	b089      	sub	sp, #36	@ 0x24
 800be86:	af04      	add	r7, sp, #16
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d020      	beq.n	800bed6 <osThreadCreate+0x54>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01c      	beq.n	800bed6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685c      	ldr	r4, [r3, #4]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	691e      	ldr	r6, [r3, #16]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff ffc8 	bl	800be44 <makeFreeRtosPriority>
 800beb4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bebe:	9202      	str	r2, [sp, #8]
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	9100      	str	r1, [sp, #0]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	4632      	mov	r2, r6
 800bec8:	4629      	mov	r1, r5
 800beca:	4620      	mov	r0, r4
 800becc:	f000 fdcc 	bl	800ca68 <xTaskCreateStatic>
 800bed0:	4603      	mov	r3, r0
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	e01c      	b.n	800bf10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685c      	ldr	r4, [r3, #4]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bee2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff ffaa 	bl	800be44 <makeFreeRtosPriority>
 800bef0:	4602      	mov	r2, r0
 800bef2:	f107 030c 	add.w	r3, r7, #12
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	9200      	str	r2, [sp, #0]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	4632      	mov	r2, r6
 800befe:	4629      	mov	r1, r5
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 fe17 	bl	800cb34 <xTaskCreate>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d001      	beq.n	800bf10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e000      	b.n	800bf12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf10:	68fb      	ldr	r3, [r7, #12]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <osDelay+0x16>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	e000      	b.n	800bf32 <osDelay+0x18>
 800bf30:	2301      	movs	r3, #1
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 ffd6 	bl	800cee4 <vTaskDelay>
  
  return osOK;
 800bf38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b082      	sub	sp, #8
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d007      	beq.n	800bf62 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	4619      	mov	r1, r3
 800bf58:	2001      	movs	r0, #1
 800bf5a:	f000 fa46 	bl	800c3ea <xQueueCreateMutexStatic>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	e003      	b.n	800bf6a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bf62:	2001      	movs	r0, #1
 800bf64:	f000 fa29 	bl	800c3ba <xQueueCreateMutex>
 800bf68:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f103 0208 	add.w	r2, r3, #8
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f103 0208 	add.w	r2, r3, #8
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f103 0208 	add.w	r2, r3, #8
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfa6:	bf00      	nop
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	689a      	ldr	r2, [r3, #8]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	1c5a      	adds	r2, r3, #1
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
}
 800c008:	bf00      	nop
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d103      	bne.n	800c034 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	e00c      	b.n	800c04e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	3308      	adds	r3, #8
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	e002      	b.n	800c042 <vListInsert+0x2e>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d2f6      	bcs.n	800c03c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	601a      	str	r2, [r3, #0]
}
 800c07a:	bf00      	nop
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	6892      	ldr	r2, [r2, #8]
 800c09c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	6852      	ldr	r2, [r2, #4]
 800c0a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d103      	bne.n	800c0ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	689a      	ldr	r2, [r3, #8]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	1e5a      	subs	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
	...

0800c0dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10d      	bne.n	800c10c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	b672      	cpsid	i
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	b662      	cpsie	i
 800c104:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	e7fd      	b.n	800c108 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c10c:	f001 feb6 	bl	800de7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c118:	68f9      	ldr	r1, [r7, #12]
 800c11a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c11c:	fb01 f303 	mul.w	r3, r1, r3
 800c120:	441a      	add	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c13c:	3b01      	subs	r3, #1
 800c13e:	68f9      	ldr	r1, [r7, #12]
 800c140:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c142:	fb01 f303 	mul.w	r3, r1, r3
 800c146:	441a      	add	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	22ff      	movs	r2, #255	@ 0xff
 800c150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	22ff      	movs	r2, #255	@ 0xff
 800c158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d114      	bne.n	800c18c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d01a      	beq.n	800c1a0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3310      	adds	r3, #16
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 f966 	bl	800d440 <xTaskRemoveFromEventList>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d012      	beq.n	800c1a0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c17a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b0 <xQueueGenericReset+0xd4>)
 800c17c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	e009      	b.n	800c1a0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3310      	adds	r3, #16
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff feee 	bl	800bf72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3324      	adds	r3, #36	@ 0x24
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff fee9 	bl	800bf72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c1a0:	f001 fea2 	bl	800dee8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c1a4:	2301      	movs	r3, #1
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	@ 0x38
 800c1b8:	af02      	add	r7, sp, #8
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10d      	bne.n	800c1e4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1cc:	b672      	cpsid	i
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	b662      	cpsie	i
 800c1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c1de:	bf00      	nop
 800c1e0:	bf00      	nop
 800c1e2:	e7fd      	b.n	800c1e0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10d      	bne.n	800c206 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ee:	b672      	cpsid	i
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	b662      	cpsie	i
 800c1fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d002      	beq.n	800c212 <xQueueGenericCreateStatic+0x5e>
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <xQueueGenericCreateStatic+0x62>
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <xQueueGenericCreateStatic+0x64>
 800c216:	2300      	movs	r3, #0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d10d      	bne.n	800c238 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c220:	b672      	cpsid	i
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	b662      	cpsie	i
 800c230:	623b      	str	r3, [r7, #32]
}
 800c232:	bf00      	nop
 800c234:	bf00      	nop
 800c236:	e7fd      	b.n	800c234 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d102      	bne.n	800c244 <xQueueGenericCreateStatic+0x90>
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <xQueueGenericCreateStatic+0x94>
 800c244:	2301      	movs	r3, #1
 800c246:	e000      	b.n	800c24a <xQueueGenericCreateStatic+0x96>
 800c248:	2300      	movs	r3, #0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10d      	bne.n	800c26a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	b672      	cpsid	i
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	b662      	cpsie	i
 800c262:	61fb      	str	r3, [r7, #28]
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop
 800c268:	e7fd      	b.n	800c266 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c26a:	2348      	movs	r3, #72	@ 0x48
 800c26c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b48      	cmp	r3, #72	@ 0x48
 800c272:	d00d      	beq.n	800c290 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c278:	b672      	cpsid	i
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	b662      	cpsie	i
 800c288:	61bb      	str	r3, [r7, #24]
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c290:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00d      	beq.n	800c2b8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f000 f848 	bl	800c348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3730      	adds	r7, #48	@ 0x30
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b08a      	sub	sp, #40	@ 0x28
 800c2c6:	af02      	add	r7, sp, #8
 800c2c8:	60f8      	str	r0, [r7, #12]
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10d      	bne.n	800c2f2 <xQueueGenericCreate+0x30>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2da:	b672      	cpsid	i
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	b662      	cpsie	i
 800c2ea:	613b      	str	r3, [r7, #16]
}
 800c2ec:	bf00      	nop
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	61fb      	str	r3, [r7, #28]
 800c2fc:	e004      	b.n	800c308 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	fb02 f303 	mul.w	r3, r2, r3
 800c306:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	3348      	adds	r3, #72	@ 0x48
 800c30c:	4618      	mov	r0, r3
 800c30e:	f001 fe9d 	bl	800e04c <pvPortMalloc>
 800c312:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d011      	beq.n	800c33e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	3348      	adds	r3, #72	@ 0x48
 800c322:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c32c:	79fa      	ldrb	r2, [r7, #7]
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4613      	mov	r3, r2
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f000 f805 	bl	800c348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c33e:	69bb      	ldr	r3, [r7, #24]
	}
 800c340:	4618      	mov	r0, r3
 800c342:	3720      	adds	r7, #32
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d103      	bne.n	800c364 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	69ba      	ldr	r2, [r7, #24]
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	e002      	b.n	800c36a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c376:	2101      	movs	r1, #1
 800c378:	69b8      	ldr	r0, [r7, #24]
 800c37a:	f7ff feaf 	bl	800c0dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c37e:	bf00      	nop
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c386:	b580      	push	{r7, lr}
 800c388:	b082      	sub	sp, #8
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00e      	beq.n	800c3b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f837 	bl	800c420 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b086      	sub	sp, #24
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	617b      	str	r3, [r7, #20]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6939      	ldr	r1, [r7, #16]
 800c3d2:	6978      	ldr	r0, [r7, #20]
 800c3d4:	f7ff ff75 	bl	800c2c2 <xQueueGenericCreate>
 800c3d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f7ff ffd3 	bl	800c386 <prvInitialiseMutex>

		return xNewQueue;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
	}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b088      	sub	sp, #32
 800c3ee:	af02      	add	r7, sp, #8
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	6039      	str	r1, [r7, #0]
 800c3f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	617b      	str	r3, [r7, #20]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2200      	movs	r2, #0
 800c406:	6939      	ldr	r1, [r7, #16]
 800c408:	6978      	ldr	r0, [r7, #20]
 800c40a:	f7ff fed3 	bl	800c1b4 <xQueueGenericCreateStatic>
 800c40e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7ff ffb8 	bl	800c386 <prvInitialiseMutex>

		return xNewQueue;
 800c416:	68fb      	ldr	r3, [r7, #12]
	}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b08e      	sub	sp, #56	@ 0x38
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c42e:	2300      	movs	r3, #0
 800c430:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10d      	bne.n	800c458 <xQueueGenericSend+0x38>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c440:	b672      	cpsid	i
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	b662      	cpsie	i
 800c450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d103      	bne.n	800c466 <xQueueGenericSend+0x46>
 800c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c462:	2b00      	cmp	r3, #0
 800c464:	d101      	bne.n	800c46a <xQueueGenericSend+0x4a>
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <xQueueGenericSend+0x4c>
 800c46a:	2300      	movs	r3, #0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10d      	bne.n	800c48c <xQueueGenericSend+0x6c>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c474:	b672      	cpsid	i
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	b662      	cpsie	i
 800c484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c486:	bf00      	nop
 800c488:	bf00      	nop
 800c48a:	e7fd      	b.n	800c488 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d103      	bne.n	800c49a <xQueueGenericSend+0x7a>
 800c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c496:	2b01      	cmp	r3, #1
 800c498:	d101      	bne.n	800c49e <xQueueGenericSend+0x7e>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e000      	b.n	800c4a0 <xQueueGenericSend+0x80>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10d      	bne.n	800c4c0 <xQueueGenericSend+0xa0>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a8:	b672      	cpsid	i
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	b662      	cpsie	i
 800c4b8:	623b      	str	r3, [r7, #32]
}
 800c4ba:	bf00      	nop
 800c4bc:	bf00      	nop
 800c4be:	e7fd      	b.n	800c4bc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4c0:	f001 f98c 	bl	800d7dc <xTaskGetSchedulerState>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d102      	bne.n	800c4d0 <xQueueGenericSend+0xb0>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <xQueueGenericSend+0xb4>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e000      	b.n	800c4d6 <xQueueGenericSend+0xb6>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10d      	bne.n	800c4f6 <xQueueGenericSend+0xd6>
	__asm volatile
 800c4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4de:	b672      	cpsid	i
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	b662      	cpsie	i
 800c4ee:	61fb      	str	r3, [r7, #28]
}
 800c4f0:	bf00      	nop
 800c4f2:	bf00      	nop
 800c4f4:	e7fd      	b.n	800c4f2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4f6:	f001 fcc1 	bl	800de7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c502:	429a      	cmp	r2, r3
 800c504:	d302      	bcc.n	800c50c <xQueueGenericSend+0xec>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d129      	bne.n	800c560 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c50c:	683a      	ldr	r2, [r7, #0]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c512:	f000 f9bf 	bl	800c894 <prvCopyDataToQueue>
 800c516:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d010      	beq.n	800c542 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c522:	3324      	adds	r3, #36	@ 0x24
 800c524:	4618      	mov	r0, r3
 800c526:	f000 ff8b 	bl	800d440 <xTaskRemoveFromEventList>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d013      	beq.n	800c558 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c530:	4b3f      	ldr	r3, [pc, #252]	@ (800c630 <xQueueGenericSend+0x210>)
 800c532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c536:	601a      	str	r2, [r3, #0]
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	e00a      	b.n	800c558 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d007      	beq.n	800c558 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c548:	4b39      	ldr	r3, [pc, #228]	@ (800c630 <xQueueGenericSend+0x210>)
 800c54a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c558:	f001 fcc6 	bl	800dee8 <vPortExitCritical>
				return pdPASS;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e063      	b.n	800c628 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d103      	bne.n	800c56e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c566:	f001 fcbf 	bl	800dee8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e05c      	b.n	800c628 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c570:	2b00      	cmp	r3, #0
 800c572:	d106      	bne.n	800c582 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c574:	f107 0314 	add.w	r3, r7, #20
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 ffc7 	bl	800d50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c57e:	2301      	movs	r3, #1
 800c580:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c582:	f001 fcb1 	bl	800dee8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c586:	f000 fd53 	bl	800d030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c58a:	f001 fc77 	bl	800de7c <vPortEnterCritical>
 800c58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c594:	b25b      	sxtb	r3, r3
 800c596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59a:	d103      	bne.n	800c5a4 <xQueueGenericSend+0x184>
 800c59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5aa:	b25b      	sxtb	r3, r3
 800c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b0:	d103      	bne.n	800c5ba <xQueueGenericSend+0x19a>
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5ba:	f001 fc95 	bl	800dee8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5be:	1d3a      	adds	r2, r7, #4
 800c5c0:	f107 0314 	add.w	r3, r7, #20
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 ffb6 	bl	800d538 <xTaskCheckForTimeOut>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d124      	bne.n	800c61c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5d4:	f000 fa30 	bl	800ca38 <prvIsQueueFull>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d018      	beq.n	800c610 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	3310      	adds	r3, #16
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 ff02 	bl	800d3f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ee:	f000 f9bb 	bl	800c968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5f2:	f000 fd2b 	bl	800d04c <xTaskResumeAll>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f47f af7c 	bne.w	800c4f6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800c5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <xQueueGenericSend+0x210>)
 800c600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	e772      	b.n	800c4f6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c612:	f000 f9a9 	bl	800c968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c616:	f000 fd19 	bl	800d04c <xTaskResumeAll>
 800c61a:	e76c      	b.n	800c4f6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c61c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c61e:	f000 f9a3 	bl	800c968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c622:	f000 fd13 	bl	800d04c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3738      	adds	r7, #56	@ 0x38
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	e000ed04 	.word	0xe000ed04

0800c634 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08e      	sub	sp, #56	@ 0x38
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c63e:	2300      	movs	r3, #0
 800c640:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c646:	2300      	movs	r3, #0
 800c648:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10d      	bne.n	800c66c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c654:	b672      	cpsid	i
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	b662      	cpsie	i
 800c664:	623b      	str	r3, [r7, #32]
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	e7fd      	b.n	800c668 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00d      	beq.n	800c690 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c678:	b672      	cpsid	i
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	b662      	cpsie	i
 800c688:	61fb      	str	r3, [r7, #28]
}
 800c68a:	bf00      	nop
 800c68c:	bf00      	nop
 800c68e:	e7fd      	b.n	800c68c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c690:	f001 f8a4 	bl	800d7dc <xTaskGetSchedulerState>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <xQueueSemaphoreTake+0x6c>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <xQueueSemaphoreTake+0x70>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e000      	b.n	800c6a6 <xQueueSemaphoreTake+0x72>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10d      	bne.n	800c6c6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ae:	b672      	cpsid	i
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	b662      	cpsie	i
 800c6be:	61bb      	str	r3, [r7, #24]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6c6:	f001 fbd9 	bl	800de7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d024      	beq.n	800c720 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d8:	1e5a      	subs	r2, r3, #1
 800c6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d104      	bne.n	800c6f0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c6e6:	f001 fa43 	bl	800db70 <pvTaskIncrementMutexHeldCount>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00f      	beq.n	800c718 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fa:	3310      	adds	r3, #16
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 fe9f 	bl	800d440 <xTaskRemoveFromEventList>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d007      	beq.n	800c718 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c708:	4b55      	ldr	r3, [pc, #340]	@ (800c860 <xQueueSemaphoreTake+0x22c>)
 800c70a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c718:	f001 fbe6 	bl	800dee8 <vPortExitCritical>
				return pdPASS;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e09a      	b.n	800c856 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d114      	bne.n	800c750 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00d      	beq.n	800c748 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c730:	b672      	cpsid	i
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	b662      	cpsie	i
 800c740:	617b      	str	r3, [r7, #20]
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	e7fd      	b.n	800c744 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c748:	f001 fbce 	bl	800dee8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c74c:	2300      	movs	r3, #0
 800c74e:	e082      	b.n	800c856 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c756:	f107 030c 	add.w	r3, r7, #12
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fed6 	bl	800d50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c760:	2301      	movs	r3, #1
 800c762:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c764:	f001 fbc0 	bl	800dee8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c768:	f000 fc62 	bl	800d030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c76c:	f001 fb86 	bl	800de7c <vPortEnterCritical>
 800c770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c772:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c776:	b25b      	sxtb	r3, r3
 800c778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77c:	d103      	bne.n	800c786 <xQueueSemaphoreTake+0x152>
 800c77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c780:	2200      	movs	r2, #0
 800c782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c78c:	b25b      	sxtb	r3, r3
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c792:	d103      	bne.n	800c79c <xQueueSemaphoreTake+0x168>
 800c794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c796:	2200      	movs	r2, #0
 800c798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c79c:	f001 fba4 	bl	800dee8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7a0:	463a      	mov	r2, r7
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fec5 	bl	800d538 <xTaskCheckForTimeOut>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d132      	bne.n	800c81a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7b6:	f000 f929 	bl	800ca0c <prvIsQueueEmpty>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d026      	beq.n	800c80e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d109      	bne.n	800c7dc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c7c8:	f001 fb58 	bl	800de7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f001 f821 	bl	800d818 <xTaskPriorityInherit>
 800c7d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c7d8:	f001 fb86 	bl	800dee8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7de:	3324      	adds	r3, #36	@ 0x24
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 fe03 	bl	800d3f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7ec:	f000 f8bc 	bl	800c968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7f0:	f000 fc2c 	bl	800d04c <xTaskResumeAll>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f47f af65 	bne.w	800c6c6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c7fc:	4b18      	ldr	r3, [pc, #96]	@ (800c860 <xQueueSemaphoreTake+0x22c>)
 800c7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	e75b      	b.n	800c6c6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c80e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c810:	f000 f8aa 	bl	800c968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c814:	f000 fc1a 	bl	800d04c <xTaskResumeAll>
 800c818:	e755      	b.n	800c6c6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c81a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c81c:	f000 f8a4 	bl	800c968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c820:	f000 fc14 	bl	800d04c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c824:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c826:	f000 f8f1 	bl	800ca0c <prvIsQueueEmpty>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f43f af4a 	beq.w	800c6c6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00d      	beq.n	800c854 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c838:	f001 fb20 	bl	800de7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c83c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c83e:	f000 f811 	bl	800c864 <prvGetDisinheritPriorityAfterTimeout>
 800c842:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c84a:	4618      	mov	r0, r3
 800c84c:	f001 f8f0 	bl	800da30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c850:	f001 fb4a 	bl	800dee8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c856:	4618      	mov	r0, r3
 800c858:	3738      	adds	r7, #56	@ 0x38
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c870:	2b00      	cmp	r3, #0
 800c872:	d006      	beq.n	800c882 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f1c3 0307 	rsb	r3, r3, #7
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	e001      	b.n	800c886 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c882:	2300      	movs	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c886:	68fb      	ldr	r3, [r7, #12]
	}
 800c888:	4618      	mov	r0, r3
 800c88a:	3714      	adds	r7, #20
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10d      	bne.n	800c8ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d14d      	bne.n	800c956 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f001 f82a 	bl	800d918 <xTaskPriorityDisinherit>
 800c8c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	609a      	str	r2, [r3, #8]
 800c8cc:	e043      	b.n	800c956 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d119      	bne.n	800c908 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6858      	ldr	r0, [r3, #4]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8dc:	461a      	mov	r2, r3
 800c8de:	68b9      	ldr	r1, [r7, #8]
 800c8e0:	f001 ffd3 	bl	800e88a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ec:	441a      	add	r2, r3
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d32b      	bcc.n	800c956 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	605a      	str	r2, [r3, #4]
 800c906:	e026      	b.n	800c956 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	68d8      	ldr	r0, [r3, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c910:	461a      	mov	r2, r3
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	f001 ffb9 	bl	800e88a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c920:	425b      	negs	r3, r3
 800c922:	441a      	add	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	68da      	ldr	r2, [r3, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	429a      	cmp	r2, r3
 800c932:	d207      	bcs.n	800c944 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	689a      	ldr	r2, [r3, #8]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93c:	425b      	negs	r3, r3
 800c93e:	441a      	add	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b02      	cmp	r3, #2
 800c948:	d105      	bne.n	800c956 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	3b01      	subs	r3, #1
 800c954:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c95e:	697b      	ldr	r3, [r7, #20]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c970:	f001 fa84 	bl	800de7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c97a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c97c:	e011      	b.n	800c9a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c982:	2b00      	cmp	r3, #0
 800c984:	d012      	beq.n	800c9ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3324      	adds	r3, #36	@ 0x24
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 fd58 	bl	800d440 <xTaskRemoveFromEventList>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c996:	f000 fe37 	bl	800d608 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c99a:	7bfb      	ldrb	r3, [r7, #15]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	dce9      	bgt.n	800c97e <prvUnlockQueue+0x16>
 800c9aa:	e000      	b.n	800c9ae <prvUnlockQueue+0x46>
					break;
 800c9ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	22ff      	movs	r2, #255	@ 0xff
 800c9b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c9b6:	f001 fa97 	bl	800dee8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9ba:	f001 fa5f 	bl	800de7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9c6:	e011      	b.n	800c9ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d012      	beq.n	800c9f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	3310      	adds	r3, #16
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fd33 	bl	800d440 <xTaskRemoveFromEventList>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9e0:	f000 fe12 	bl	800d608 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9e4:	7bbb      	ldrb	r3, [r7, #14]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	dce9      	bgt.n	800c9c8 <prvUnlockQueue+0x60>
 800c9f4:	e000      	b.n	800c9f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	22ff      	movs	r2, #255	@ 0xff
 800c9fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ca00:	f001 fa72 	bl	800dee8 <vPortExitCritical>
}
 800ca04:	bf00      	nop
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca14:	f001 fa32 	bl	800de7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d102      	bne.n	800ca26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca20:	2301      	movs	r3, #1
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e001      	b.n	800ca2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca26:	2300      	movs	r3, #0
 800ca28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca2a:	f001 fa5d 	bl	800dee8 <vPortExitCritical>

	return xReturn;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca40:	f001 fa1c 	bl	800de7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d102      	bne.n	800ca56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca50:	2301      	movs	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	e001      	b.n	800ca5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca56:	2300      	movs	r3, #0
 800ca58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca5a:	f001 fa45 	bl	800dee8 <vPortExitCritical>

	return xReturn;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08e      	sub	sp, #56	@ 0x38
 800ca6c:	af04      	add	r7, sp, #16
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
 800ca74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10d      	bne.n	800ca98 <xTaskCreateStatic+0x30>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca80:	b672      	cpsid	i
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	b662      	cpsie	i
 800ca90:	623b      	str	r3, [r7, #32]
}
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	e7fd      	b.n	800ca94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10d      	bne.n	800caba <xTaskCreateStatic+0x52>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa2:	b672      	cpsid	i
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	b662      	cpsie	i
 800cab2:	61fb      	str	r3, [r7, #28]
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop
 800cab8:	e7fd      	b.n	800cab6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800caba:	23a0      	movs	r3, #160	@ 0xa0
 800cabc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	2ba0      	cmp	r3, #160	@ 0xa0
 800cac2:	d00d      	beq.n	800cae0 <xTaskCreateStatic+0x78>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac8:	b672      	cpsid	i
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	b662      	cpsie	i
 800cad8:	61bb      	str	r3, [r7, #24]
}
 800cada:	bf00      	nop
 800cadc:	bf00      	nop
 800cade:	e7fd      	b.n	800cadc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cae0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01e      	beq.n	800cb26 <xTaskCreateStatic+0xbe>
 800cae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caea:	2b00      	cmp	r3, #0
 800caec:	d01b      	beq.n	800cb26 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800caee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800caf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caf6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafa:	2202      	movs	r2, #2
 800cafc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb00:	2300      	movs	r3, #0
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	9302      	str	r3, [sp, #8]
 800cb08:	f107 0314 	add.w	r3, r7, #20
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f000 f851 	bl	800cbc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb20:	f000 f8f0 	bl	800cd04 <prvAddNewTaskToReadyList>
 800cb24:	e001      	b.n	800cb2a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800cb26:	2300      	movs	r3, #0
 800cb28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb2a:	697b      	ldr	r3, [r7, #20]
	}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3728      	adds	r7, #40	@ 0x28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08c      	sub	sp, #48	@ 0x30
 800cb38:	af04      	add	r7, sp, #16
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	4613      	mov	r3, r2
 800cb42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb44:	88fb      	ldrh	r3, [r7, #6]
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f001 fa7f 	bl	800e04c <pvPortMalloc>
 800cb4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00e      	beq.n	800cb74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb56:	20a0      	movs	r0, #160	@ 0xa0
 800cb58:	f001 fa78 	bl	800e04c <pvPortMalloc>
 800cb5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb6a:	e005      	b.n	800cb78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb6c:	6978      	ldr	r0, [r7, #20]
 800cb6e:	f001 fb3b 	bl	800e1e8 <vPortFree>
 800cb72:	e001      	b.n	800cb78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d017      	beq.n	800cbae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb86:	88fa      	ldrh	r2, [r7, #6]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	9303      	str	r3, [sp, #12]
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	9302      	str	r3, [sp, #8]
 800cb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	68b9      	ldr	r1, [r7, #8]
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f000 f80f 	bl	800cbc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cba2:	69f8      	ldr	r0, [r7, #28]
 800cba4:	f000 f8ae 	bl	800cd04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	61bb      	str	r3, [r7, #24]
 800cbac:	e002      	b.n	800cbb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbae:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cbb4:	69bb      	ldr	r3, [r7, #24]
	}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3720      	adds	r7, #32
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b088      	sub	sp, #32
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
 800cbcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbd2:	6879      	ldr	r1, [r7, #4]
 800cbd4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cbd8:	440b      	add	r3, r1
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	f023 0307 	bic.w	r3, r3, #7
 800cbe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	f003 0307 	and.w	r3, r3, #7
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00d      	beq.n	800cc0e <prvInitialiseNewTask+0x4e>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf6:	b672      	cpsid	i
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	b662      	cpsie	i
 800cc06:	617b      	str	r3, [r7, #20]
}
 800cc08:	bf00      	nop
 800cc0a:	bf00      	nop
 800cc0c:	e7fd      	b.n	800cc0a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01f      	beq.n	800cc54 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc14:	2300      	movs	r3, #0
 800cc16:	61fb      	str	r3, [r7, #28]
 800cc18:	e012      	b.n	800cc40 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc1a:	68ba      	ldr	r2, [r7, #8]
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	4413      	add	r3, r2
 800cc20:	7819      	ldrb	r1, [r3, #0]
 800cc22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	4413      	add	r3, r2
 800cc28:	3334      	adds	r3, #52	@ 0x34
 800cc2a:	460a      	mov	r2, r1
 800cc2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	4413      	add	r3, r2
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d006      	beq.n	800cc48 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	61fb      	str	r3, [r7, #28]
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	2b0f      	cmp	r3, #15
 800cc44:	d9e9      	bls.n	800cc1a <prvInitialiseNewTask+0x5a>
 800cc46:	e000      	b.n	800cc4a <prvInitialiseNewTask+0x8a>
			{
				break;
 800cc48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cc52:	e003      	b.n	800cc5c <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc5e:	2b06      	cmp	r3, #6
 800cc60:	d901      	bls.n	800cc66 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc62:	2306      	movs	r3, #6
 800cc64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc70:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc74:	2200      	movs	r2, #0
 800cc76:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff f998 	bl	800bfb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	3318      	adds	r3, #24
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7ff f993 	bl	800bfb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc94:	f1c3 0207 	rsb	r2, r3, #7
 800cc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cca0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca4:	2200      	movs	r2, #0
 800cca6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	2200      	movs	r2, #0
 800ccae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb4:	334c      	adds	r3, #76	@ 0x4c
 800ccb6:	224c      	movs	r2, #76	@ 0x4c
 800ccb8:	2100      	movs	r1, #0
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f001 fd13 	bl	800e6e6 <memset>
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc2:	4a0d      	ldr	r2, [pc, #52]	@ (800ccf8 <prvInitialiseNewTask+0x138>)
 800ccc4:	651a      	str	r2, [r3, #80]	@ 0x50
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc8:	4a0c      	ldr	r2, [pc, #48]	@ (800ccfc <prvInitialiseNewTask+0x13c>)
 800ccca:	655a      	str	r2, [r3, #84]	@ 0x54
 800cccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccce:	4a0c      	ldr	r2, [pc, #48]	@ (800cd00 <prvInitialiseNewTask+0x140>)
 800ccd0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	68f9      	ldr	r1, [r7, #12]
 800ccd6:	69b8      	ldr	r0, [r7, #24]
 800ccd8:	f000 ffc4 	bl	800dc64 <pxPortInitialiseStack>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccee:	bf00      	nop
 800ccf0:	3720      	adds	r7, #32
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20004c20 	.word	0x20004c20
 800ccfc:	20004c88 	.word	0x20004c88
 800cd00:	20004cf0 	.word	0x20004cf0

0800cd04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd0c:	f001 f8b6 	bl	800de7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd10:	4b2a      	ldr	r3, [pc, #168]	@ (800cdbc <prvAddNewTaskToReadyList+0xb8>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3301      	adds	r3, #1
 800cd16:	4a29      	ldr	r2, [pc, #164]	@ (800cdbc <prvAddNewTaskToReadyList+0xb8>)
 800cd18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd1a:	4b29      	ldr	r3, [pc, #164]	@ (800cdc0 <prvAddNewTaskToReadyList+0xbc>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d109      	bne.n	800cd36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd22:	4a27      	ldr	r2, [pc, #156]	@ (800cdc0 <prvAddNewTaskToReadyList+0xbc>)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd28:	4b24      	ldr	r3, [pc, #144]	@ (800cdbc <prvAddNewTaskToReadyList+0xb8>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d110      	bne.n	800cd52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd30:	f000 fc8e 	bl	800d650 <prvInitialiseTaskLists>
 800cd34:	e00d      	b.n	800cd52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd36:	4b23      	ldr	r3, [pc, #140]	@ (800cdc4 <prvAddNewTaskToReadyList+0xc0>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d109      	bne.n	800cd52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd3e:	4b20      	ldr	r3, [pc, #128]	@ (800cdc0 <prvAddNewTaskToReadyList+0xbc>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d802      	bhi.n	800cd52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd4c:	4a1c      	ldr	r2, [pc, #112]	@ (800cdc0 <prvAddNewTaskToReadyList+0xbc>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd52:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc8 <prvAddNewTaskToReadyList+0xc4>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	3301      	adds	r3, #1
 800cd58:	4a1b      	ldr	r2, [pc, #108]	@ (800cdc8 <prvAddNewTaskToReadyList+0xc4>)
 800cd5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd60:	2201      	movs	r2, #1
 800cd62:	409a      	lsls	r2, r3
 800cd64:	4b19      	ldr	r3, [pc, #100]	@ (800cdcc <prvAddNewTaskToReadyList+0xc8>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	4a18      	ldr	r2, [pc, #96]	@ (800cdcc <prvAddNewTaskToReadyList+0xc8>)
 800cd6c:	6013      	str	r3, [r2, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd72:	4613      	mov	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4a15      	ldr	r2, [pc, #84]	@ (800cdd0 <prvAddNewTaskToReadyList+0xcc>)
 800cd7c:	441a      	add	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	3304      	adds	r3, #4
 800cd82:	4619      	mov	r1, r3
 800cd84:	4610      	mov	r0, r2
 800cd86:	f7ff f921 	bl	800bfcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd8a:	f001 f8ad 	bl	800dee8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd8e:	4b0d      	ldr	r3, [pc, #52]	@ (800cdc4 <prvAddNewTaskToReadyList+0xc0>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00e      	beq.n	800cdb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd96:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc0 <prvAddNewTaskToReadyList+0xbc>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d207      	bcs.n	800cdb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cda4:	4b0b      	ldr	r3, [pc, #44]	@ (800cdd4 <prvAddNewTaskToReadyList+0xd0>)
 800cda6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdb4:	bf00      	nop
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20000fd4 	.word	0x20000fd4
 800cdc0:	20000ed4 	.word	0x20000ed4
 800cdc4:	20000fe0 	.word	0x20000fe0
 800cdc8:	20000ff0 	.word	0x20000ff0
 800cdcc:	20000fdc 	.word	0x20000fdc
 800cdd0:	20000ed8 	.word	0x20000ed8
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08a      	sub	sp, #40	@ 0x28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800cde2:	2300      	movs	r3, #0
 800cde4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10d      	bne.n	800ce08 <vTaskDelayUntil+0x30>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf0:	b672      	cpsid	i
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	b662      	cpsie	i
 800ce00:	617b      	str	r3, [r7, #20]
}
 800ce02:	bf00      	nop
 800ce04:	bf00      	nop
 800ce06:	e7fd      	b.n	800ce04 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10d      	bne.n	800ce2a <vTaskDelayUntil+0x52>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce12:	b672      	cpsid	i
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	b662      	cpsie	i
 800ce22:	613b      	str	r3, [r7, #16]
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop
 800ce28:	e7fd      	b.n	800ce26 <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800ce2a:	4b2b      	ldr	r3, [pc, #172]	@ (800ced8 <vTaskDelayUntil+0x100>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00d      	beq.n	800ce4e <vTaskDelayUntil+0x76>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce36:	b672      	cpsid	i
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	b662      	cpsie	i
 800ce46:	60fb      	str	r3, [r7, #12]
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	e7fd      	b.n	800ce4a <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800ce4e:	f000 f8ef 	bl	800d030 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ce52:	4b22      	ldr	r3, [pc, #136]	@ (800cedc <vTaskDelayUntil+0x104>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	4413      	add	r3, r2
 800ce60:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6a3a      	ldr	r2, [r7, #32]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d20b      	bcs.n	800ce84 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	69fa      	ldr	r2, [r7, #28]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d211      	bcs.n	800ce9a <vTaskDelayUntil+0xc2>
 800ce76:	69fa      	ldr	r2, [r7, #28]
 800ce78:	6a3b      	ldr	r3, [r7, #32]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d90d      	bls.n	800ce9a <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce82:	e00a      	b.n	800ce9a <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	69fa      	ldr	r2, [r7, #28]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d303      	bcc.n	800ce96 <vTaskDelayUntil+0xbe>
 800ce8e:	69fa      	ldr	r2, [r7, #28]
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d901      	bls.n	800ce9a <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800ce96:	2301      	movs	r3, #1
 800ce98:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	69fa      	ldr	r2, [r7, #28]
 800ce9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d006      	beq.n	800ceb4 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cea6:	69fa      	ldr	r2, [r7, #28]
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	2100      	movs	r1, #0
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fe72 	bl	800db98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ceb4:	f000 f8ca 	bl	800d04c <xTaskResumeAll>
 800ceb8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d107      	bne.n	800ced0 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800cec0:	4b07      	ldr	r3, [pc, #28]	@ (800cee0 <vTaskDelayUntil+0x108>)
 800cec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ced0:	bf00      	nop
 800ced2:	3728      	adds	r7, #40	@ 0x28
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	20000ffc 	.word	0x20000ffc
 800cedc:	20000fd8 	.word	0x20000fd8
 800cee0:	e000ed04 	.word	0xe000ed04

0800cee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ceec:	2300      	movs	r3, #0
 800ceee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d01a      	beq.n	800cf2c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cef6:	4b15      	ldr	r3, [pc, #84]	@ (800cf4c <vTaskDelay+0x68>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00d      	beq.n	800cf1a <vTaskDelay+0x36>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf02:	b672      	cpsid	i
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	b662      	cpsie	i
 800cf12:	60bb      	str	r3, [r7, #8]
}
 800cf14:	bf00      	nop
 800cf16:	bf00      	nop
 800cf18:	e7fd      	b.n	800cf16 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cf1a:	f000 f889 	bl	800d030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf1e:	2100      	movs	r1, #0
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 fe39 	bl	800db98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf26:	f000 f891 	bl	800d04c <xTaskResumeAll>
 800cf2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d107      	bne.n	800cf42 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800cf32:	4b07      	ldr	r3, [pc, #28]	@ (800cf50 <vTaskDelay+0x6c>)
 800cf34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20000ffc 	.word	0x20000ffc
 800cf50:	e000ed04 	.word	0xe000ed04

0800cf54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	@ 0x28
 800cf58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf62:	463a      	mov	r2, r7
 800cf64:	1d39      	adds	r1, r7, #4
 800cf66:	f107 0308 	add.w	r3, r7, #8
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7f4 f9cc 	bl	8001308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68ba      	ldr	r2, [r7, #8]
 800cf76:	9202      	str	r2, [sp, #8]
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	460a      	mov	r2, r1
 800cf82:	4923      	ldr	r1, [pc, #140]	@ (800d010 <vTaskStartScheduler+0xbc>)
 800cf84:	4823      	ldr	r0, [pc, #140]	@ (800d014 <vTaskStartScheduler+0xc0>)
 800cf86:	f7ff fd6f 	bl	800ca68 <xTaskCreateStatic>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4a22      	ldr	r2, [pc, #136]	@ (800d018 <vTaskStartScheduler+0xc4>)
 800cf8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf90:	4b21      	ldr	r3, [pc, #132]	@ (800d018 <vTaskStartScheduler+0xc4>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	e001      	b.n	800cfa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d11d      	bne.n	800cfe4 <vTaskStartScheduler+0x90>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfac:	b672      	cpsid	i
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	b662      	cpsie	i
 800cfbc:	613b      	str	r3, [r7, #16]
}
 800cfbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfc0:	4b16      	ldr	r3, [pc, #88]	@ (800d01c <vTaskStartScheduler+0xc8>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	334c      	adds	r3, #76	@ 0x4c
 800cfc6:	4a16      	ldr	r2, [pc, #88]	@ (800d020 <vTaskStartScheduler+0xcc>)
 800cfc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfca:	4b16      	ldr	r3, [pc, #88]	@ (800d024 <vTaskStartScheduler+0xd0>)
 800cfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfd2:	4b15      	ldr	r3, [pc, #84]	@ (800d028 <vTaskStartScheduler+0xd4>)
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfd8:	4b14      	ldr	r3, [pc, #80]	@ (800d02c <vTaskStartScheduler+0xd8>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfde:	f000 fecf 	bl	800dd80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfe2:	e011      	b.n	800d008 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfea:	d10d      	bne.n	800d008 <vTaskStartScheduler+0xb4>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff0:	b672      	cpsid	i
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	b662      	cpsie	i
 800d000:	60fb      	str	r3, [r7, #12]
}
 800d002:	bf00      	nop
 800d004:	bf00      	nop
 800d006:	e7fd      	b.n	800d004 <vTaskStartScheduler+0xb0>
}
 800d008:	bf00      	nop
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	0800fa04 	.word	0x0800fa04
 800d014:	0800d621 	.word	0x0800d621
 800d018:	20000ff8 	.word	0x20000ff8
 800d01c:	20000ed4 	.word	0x20000ed4
 800d020:	20000064 	.word	0x20000064
 800d024:	20000ff4 	.word	0x20000ff4
 800d028:	20000fe0 	.word	0x20000fe0
 800d02c:	20000fd8 	.word	0x20000fd8

0800d030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d030:	b480      	push	{r7}
 800d032:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d034:	4b04      	ldr	r3, [pc, #16]	@ (800d048 <vTaskSuspendAll+0x18>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3301      	adds	r3, #1
 800d03a:	4a03      	ldr	r2, [pc, #12]	@ (800d048 <vTaskSuspendAll+0x18>)
 800d03c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d03e:	bf00      	nop
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr
 800d048:	20000ffc 	.word	0x20000ffc

0800d04c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d052:	2300      	movs	r3, #0
 800d054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d056:	2300      	movs	r3, #0
 800d058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d05a:	4b43      	ldr	r3, [pc, #268]	@ (800d168 <xTaskResumeAll+0x11c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10d      	bne.n	800d07e <xTaskResumeAll+0x32>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d066:	b672      	cpsid	i
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	b662      	cpsie	i
 800d076:	603b      	str	r3, [r7, #0]
}
 800d078:	bf00      	nop
 800d07a:	bf00      	nop
 800d07c:	e7fd      	b.n	800d07a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d07e:	f000 fefd 	bl	800de7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d082:	4b39      	ldr	r3, [pc, #228]	@ (800d168 <xTaskResumeAll+0x11c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3b01      	subs	r3, #1
 800d088:	4a37      	ldr	r2, [pc, #220]	@ (800d168 <xTaskResumeAll+0x11c>)
 800d08a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d08c:	4b36      	ldr	r3, [pc, #216]	@ (800d168 <xTaskResumeAll+0x11c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d161      	bne.n	800d158 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d094:	4b35      	ldr	r3, [pc, #212]	@ (800d16c <xTaskResumeAll+0x120>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d05d      	beq.n	800d158 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d09c:	e02e      	b.n	800d0fc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d09e:	4b34      	ldr	r3, [pc, #208]	@ (800d170 <xTaskResumeAll+0x124>)
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3318      	adds	r3, #24
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fe ffeb 	bl	800c086 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe ffe6 	bl	800c086 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0be:	2201      	movs	r2, #1
 800d0c0:	409a      	lsls	r2, r3
 800d0c2:	4b2c      	ldr	r3, [pc, #176]	@ (800d174 <xTaskResumeAll+0x128>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	4a2a      	ldr	r2, [pc, #168]	@ (800d174 <xTaskResumeAll+0x128>)
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4a27      	ldr	r2, [pc, #156]	@ (800d178 <xTaskResumeAll+0x12c>)
 800d0da:	441a      	add	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f7fe ff72 	bl	800bfcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ec:	4b23      	ldr	r3, [pc, #140]	@ (800d17c <xTaskResumeAll+0x130>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d302      	bcc.n	800d0fc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800d0f6:	4b22      	ldr	r3, [pc, #136]	@ (800d180 <xTaskResumeAll+0x134>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0fc:	4b1c      	ldr	r3, [pc, #112]	@ (800d170 <xTaskResumeAll+0x124>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1cc      	bne.n	800d09e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d10a:	f000 fb47 	bl	800d79c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d10e:	4b1d      	ldr	r3, [pc, #116]	@ (800d184 <xTaskResumeAll+0x138>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d010      	beq.n	800d13c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d11a:	f000 f847 	bl	800d1ac <xTaskIncrementTick>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d124:	4b16      	ldr	r3, [pc, #88]	@ (800d180 <xTaskResumeAll+0x134>)
 800d126:	2201      	movs	r2, #1
 800d128:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3b01      	subs	r3, #1
 800d12e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1f1      	bne.n	800d11a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d136:	4b13      	ldr	r3, [pc, #76]	@ (800d184 <xTaskResumeAll+0x138>)
 800d138:	2200      	movs	r2, #0
 800d13a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d13c:	4b10      	ldr	r3, [pc, #64]	@ (800d180 <xTaskResumeAll+0x134>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d009      	beq.n	800d158 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d144:	2301      	movs	r3, #1
 800d146:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d148:	4b0f      	ldr	r3, [pc, #60]	@ (800d188 <xTaskResumeAll+0x13c>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d158:	f000 fec6 	bl	800dee8 <vPortExitCritical>

	return xAlreadyYielded;
 800d15c:	68bb      	ldr	r3, [r7, #8]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20000ffc 	.word	0x20000ffc
 800d16c:	20000fd4 	.word	0x20000fd4
 800d170:	20000f94 	.word	0x20000f94
 800d174:	20000fdc 	.word	0x20000fdc
 800d178:	20000ed8 	.word	0x20000ed8
 800d17c:	20000ed4 	.word	0x20000ed4
 800d180:	20000fe8 	.word	0x20000fe8
 800d184:	20000fe4 	.word	0x20000fe4
 800d188:	e000ed04 	.word	0xe000ed04

0800d18c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d192:	4b05      	ldr	r3, [pc, #20]	@ (800d1a8 <xTaskGetTickCount+0x1c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d198:	687b      	ldr	r3, [r7, #4]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	20000fd8 	.word	0x20000fd8

0800d1ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1b6:	4b50      	ldr	r3, [pc, #320]	@ (800d2f8 <xTaskIncrementTick+0x14c>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f040 808b 	bne.w	800d2d6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1c0:	4b4e      	ldr	r3, [pc, #312]	@ (800d2fc <xTaskIncrementTick+0x150>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1c8:	4a4c      	ldr	r2, [pc, #304]	@ (800d2fc <xTaskIncrementTick+0x150>)
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d123      	bne.n	800d21c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1d4:	4b4a      	ldr	r3, [pc, #296]	@ (800d300 <xTaskIncrementTick+0x154>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00d      	beq.n	800d1fa <xTaskIncrementTick+0x4e>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e2:	b672      	cpsid	i
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	b662      	cpsie	i
 800d1f2:	603b      	str	r3, [r7, #0]
}
 800d1f4:	bf00      	nop
 800d1f6:	bf00      	nop
 800d1f8:	e7fd      	b.n	800d1f6 <xTaskIncrementTick+0x4a>
 800d1fa:	4b41      	ldr	r3, [pc, #260]	@ (800d300 <xTaskIncrementTick+0x154>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]
 800d200:	4b40      	ldr	r3, [pc, #256]	@ (800d304 <xTaskIncrementTick+0x158>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a3e      	ldr	r2, [pc, #248]	@ (800d300 <xTaskIncrementTick+0x154>)
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	4a3e      	ldr	r2, [pc, #248]	@ (800d304 <xTaskIncrementTick+0x158>)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6013      	str	r3, [r2, #0]
 800d20e:	4b3e      	ldr	r3, [pc, #248]	@ (800d308 <xTaskIncrementTick+0x15c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3301      	adds	r3, #1
 800d214:	4a3c      	ldr	r2, [pc, #240]	@ (800d308 <xTaskIncrementTick+0x15c>)
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	f000 fac0 	bl	800d79c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d21c:	4b3b      	ldr	r3, [pc, #236]	@ (800d30c <xTaskIncrementTick+0x160>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	429a      	cmp	r2, r3
 800d224:	d348      	bcc.n	800d2b8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d226:	4b36      	ldr	r3, [pc, #216]	@ (800d300 <xTaskIncrementTick+0x154>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d104      	bne.n	800d23a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d230:	4b36      	ldr	r3, [pc, #216]	@ (800d30c <xTaskIncrementTick+0x160>)
 800d232:	f04f 32ff 	mov.w	r2, #4294967295
 800d236:	601a      	str	r2, [r3, #0]
					break;
 800d238:	e03e      	b.n	800d2b8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d23a:	4b31      	ldr	r3, [pc, #196]	@ (800d300 <xTaskIncrementTick+0x154>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d203      	bcs.n	800d25a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d252:	4a2e      	ldr	r2, [pc, #184]	@ (800d30c <xTaskIncrementTick+0x160>)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d258:	e02e      	b.n	800d2b8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	3304      	adds	r3, #4
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fe ff11 	bl	800c086 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d004      	beq.n	800d276 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	3318      	adds	r3, #24
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe ff08 	bl	800c086 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27a:	2201      	movs	r2, #1
 800d27c:	409a      	lsls	r2, r3
 800d27e:	4b24      	ldr	r3, [pc, #144]	@ (800d310 <xTaskIncrementTick+0x164>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4313      	orrs	r3, r2
 800d284:	4a22      	ldr	r2, [pc, #136]	@ (800d310 <xTaskIncrementTick+0x164>)
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d28c:	4613      	mov	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4a1f      	ldr	r2, [pc, #124]	@ (800d314 <xTaskIncrementTick+0x168>)
 800d296:	441a      	add	r2, r3
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	3304      	adds	r3, #4
 800d29c:	4619      	mov	r1, r3
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f7fe fe94 	bl	800bfcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d318 <xTaskIncrementTick+0x16c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d3b9      	bcc.n	800d226 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2b6:	e7b6      	b.n	800d226 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2b8:	4b17      	ldr	r3, [pc, #92]	@ (800d318 <xTaskIncrementTick+0x16c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2be:	4915      	ldr	r1, [pc, #84]	@ (800d314 <xTaskIncrementTick+0x168>)
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	440b      	add	r3, r1
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d907      	bls.n	800d2e0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	e004      	b.n	800d2e0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d2d6:	4b11      	ldr	r3, [pc, #68]	@ (800d31c <xTaskIncrementTick+0x170>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	4a0f      	ldr	r2, [pc, #60]	@ (800d31c <xTaskIncrementTick+0x170>)
 800d2de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d320 <xTaskIncrementTick+0x174>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d2ec:	697b      	ldr	r3, [r7, #20]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20000ffc 	.word	0x20000ffc
 800d2fc:	20000fd8 	.word	0x20000fd8
 800d300:	20000f8c 	.word	0x20000f8c
 800d304:	20000f90 	.word	0x20000f90
 800d308:	20000fec 	.word	0x20000fec
 800d30c:	20000ff4 	.word	0x20000ff4
 800d310:	20000fdc 	.word	0x20000fdc
 800d314:	20000ed8 	.word	0x20000ed8
 800d318:	20000ed4 	.word	0x20000ed4
 800d31c:	20000fe4 	.word	0x20000fe4
 800d320:	20000fe8 	.word	0x20000fe8

0800d324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d324:	b480      	push	{r7}
 800d326:	b087      	sub	sp, #28
 800d328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d32a:	4b2b      	ldr	r3, [pc, #172]	@ (800d3d8 <vTaskSwitchContext+0xb4>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d332:	4b2a      	ldr	r3, [pc, #168]	@ (800d3dc <vTaskSwitchContext+0xb8>)
 800d334:	2201      	movs	r2, #1
 800d336:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d338:	e047      	b.n	800d3ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d33a:	4b28      	ldr	r3, [pc, #160]	@ (800d3dc <vTaskSwitchContext+0xb8>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d340:	4b27      	ldr	r3, [pc, #156]	@ (800d3e0 <vTaskSwitchContext+0xbc>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	fab3 f383 	clz	r3, r3
 800d34c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d34e:	7afb      	ldrb	r3, [r7, #11]
 800d350:	f1c3 031f 	rsb	r3, r3, #31
 800d354:	617b      	str	r3, [r7, #20]
 800d356:	4923      	ldr	r1, [pc, #140]	@ (800d3e4 <vTaskSwitchContext+0xc0>)
 800d358:	697a      	ldr	r2, [r7, #20]
 800d35a:	4613      	mov	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	440b      	add	r3, r1
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d10d      	bne.n	800d386 <vTaskSwitchContext+0x62>
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36e:	b672      	cpsid	i
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	b662      	cpsie	i
 800d37e:	607b      	str	r3, [r7, #4]
}
 800d380:	bf00      	nop
 800d382:	bf00      	nop
 800d384:	e7fd      	b.n	800d382 <vTaskSwitchContext+0x5e>
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	4613      	mov	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4a14      	ldr	r2, [pc, #80]	@ (800d3e4 <vTaskSwitchContext+0xc0>)
 800d392:	4413      	add	r3, r2
 800d394:	613b      	str	r3, [r7, #16]
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	605a      	str	r2, [r3, #4]
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d104      	bne.n	800d3b6 <vTaskSwitchContext+0x92>
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	605a      	str	r2, [r3, #4]
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	4a0a      	ldr	r2, [pc, #40]	@ (800d3e8 <vTaskSwitchContext+0xc4>)
 800d3be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d3c0:	4b09      	ldr	r3, [pc, #36]	@ (800d3e8 <vTaskSwitchContext+0xc4>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	334c      	adds	r3, #76	@ 0x4c
 800d3c6:	4a09      	ldr	r2, [pc, #36]	@ (800d3ec <vTaskSwitchContext+0xc8>)
 800d3c8:	6013      	str	r3, [r2, #0]
}
 800d3ca:	bf00      	nop
 800d3cc:	371c      	adds	r7, #28
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	20000ffc 	.word	0x20000ffc
 800d3dc:	20000fe8 	.word	0x20000fe8
 800d3e0:	20000fdc 	.word	0x20000fdc
 800d3e4:	20000ed8 	.word	0x20000ed8
 800d3e8:	20000ed4 	.word	0x20000ed4
 800d3ec:	20000064 	.word	0x20000064

0800d3f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10d      	bne.n	800d41c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d404:	b672      	cpsid	i
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	b662      	cpsie	i
 800d414:	60fb      	str	r3, [r7, #12]
}
 800d416:	bf00      	nop
 800d418:	bf00      	nop
 800d41a:	e7fd      	b.n	800d418 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d41c:	4b07      	ldr	r3, [pc, #28]	@ (800d43c <vTaskPlaceOnEventList+0x4c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3318      	adds	r3, #24
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7fe fdf5 	bl	800c014 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d42a:	2101      	movs	r1, #1
 800d42c:	6838      	ldr	r0, [r7, #0]
 800d42e:	f000 fbb3 	bl	800db98 <prvAddCurrentTaskToDelayedList>
}
 800d432:	bf00      	nop
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	20000ed4 	.word	0x20000ed4

0800d440 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10d      	bne.n	800d472 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45a:	b672      	cpsid	i
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	b662      	cpsie	i
 800d46a:	60fb      	str	r3, [r7, #12]
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	e7fd      	b.n	800d46e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	3318      	adds	r3, #24
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe fe05 	bl	800c086 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d47c:	4b1d      	ldr	r3, [pc, #116]	@ (800d4f4 <xTaskRemoveFromEventList+0xb4>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d11c      	bne.n	800d4be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	3304      	adds	r3, #4
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fe fdfc 	bl	800c086 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d492:	2201      	movs	r2, #1
 800d494:	409a      	lsls	r2, r3
 800d496:	4b18      	ldr	r3, [pc, #96]	@ (800d4f8 <xTaskRemoveFromEventList+0xb8>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	4a16      	ldr	r2, [pc, #88]	@ (800d4f8 <xTaskRemoveFromEventList+0xb8>)
 800d49e:	6013      	str	r3, [r2, #0]
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4a13      	ldr	r2, [pc, #76]	@ (800d4fc <xTaskRemoveFromEventList+0xbc>)
 800d4ae:	441a      	add	r2, r3
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	3304      	adds	r3, #4
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4610      	mov	r0, r2
 800d4b8:	f7fe fd88 	bl	800bfcc <vListInsertEnd>
 800d4bc:	e005      	b.n	800d4ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	3318      	adds	r3, #24
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	480e      	ldr	r0, [pc, #56]	@ (800d500 <xTaskRemoveFromEventList+0xc0>)
 800d4c6:	f7fe fd81 	bl	800bfcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <xTaskRemoveFromEventList+0xc4>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d905      	bls.n	800d4e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d508 <xTaskRemoveFromEventList+0xc8>)
 800d4de:	2201      	movs	r2, #1
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	e001      	b.n	800d4e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4e8:	697b      	ldr	r3, [r7, #20]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20000ffc 	.word	0x20000ffc
 800d4f8:	20000fdc 	.word	0x20000fdc
 800d4fc:	20000ed8 	.word	0x20000ed8
 800d500:	20000f94 	.word	0x20000f94
 800d504:	20000ed4 	.word	0x20000ed4
 800d508:	20000fe8 	.word	0x20000fe8

0800d50c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d514:	4b06      	ldr	r3, [pc, #24]	@ (800d530 <vTaskInternalSetTimeOutState+0x24>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d51c:	4b05      	ldr	r3, [pc, #20]	@ (800d534 <vTaskInternalSetTimeOutState+0x28>)
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	605a      	str	r2, [r3, #4]
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	20000fec 	.word	0x20000fec
 800d534:	20000fd8 	.word	0x20000fd8

0800d538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10d      	bne.n	800d564 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54c:	b672      	cpsid	i
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	b662      	cpsie	i
 800d55c:	613b      	str	r3, [r7, #16]
}
 800d55e:	bf00      	nop
 800d560:	bf00      	nop
 800d562:	e7fd      	b.n	800d560 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10d      	bne.n	800d586 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56e:	b672      	cpsid	i
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	b662      	cpsie	i
 800d57e:	60fb      	str	r3, [r7, #12]
}
 800d580:	bf00      	nop
 800d582:	bf00      	nop
 800d584:	e7fd      	b.n	800d582 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d586:	f000 fc79 	bl	800de7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d58a:	4b1d      	ldr	r3, [pc, #116]	@ (800d600 <xTaskCheckForTimeOut+0xc8>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	69ba      	ldr	r2, [r7, #24]
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a2:	d102      	bne.n	800d5aa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	61fb      	str	r3, [r7, #28]
 800d5a8:	e023      	b.n	800d5f2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	4b15      	ldr	r3, [pc, #84]	@ (800d604 <xTaskCheckForTimeOut+0xcc>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d007      	beq.n	800d5c6 <xTaskCheckForTimeOut+0x8e>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	69ba      	ldr	r2, [r7, #24]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d302      	bcc.n	800d5c6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	e015      	b.n	800d5f2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d20b      	bcs.n	800d5e8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	1ad2      	subs	r2, r2, r3
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7ff ff95 	bl	800d50c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	61fb      	str	r3, [r7, #28]
 800d5e6:	e004      	b.n	800d5f2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5f2:	f000 fc79 	bl	800dee8 <vPortExitCritical>

	return xReturn;
 800d5f6:	69fb      	ldr	r3, [r7, #28]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3720      	adds	r7, #32
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	20000fd8 	.word	0x20000fd8
 800d604:	20000fec 	.word	0x20000fec

0800d608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d608:	b480      	push	{r7}
 800d60a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d60c:	4b03      	ldr	r3, [pc, #12]	@ (800d61c <vTaskMissedYield+0x14>)
 800d60e:	2201      	movs	r2, #1
 800d610:	601a      	str	r2, [r3, #0]
}
 800d612:	bf00      	nop
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	20000fe8 	.word	0x20000fe8

0800d620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d628:	f000 f852 	bl	800d6d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d62c:	4b06      	ldr	r3, [pc, #24]	@ (800d648 <prvIdleTask+0x28>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d9f9      	bls.n	800d628 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d634:	4b05      	ldr	r3, [pc, #20]	@ (800d64c <prvIdleTask+0x2c>)
 800d636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d644:	e7f0      	b.n	800d628 <prvIdleTask+0x8>
 800d646:	bf00      	nop
 800d648:	20000ed8 	.word	0x20000ed8
 800d64c:	e000ed04 	.word	0xe000ed04

0800d650 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d656:	2300      	movs	r3, #0
 800d658:	607b      	str	r3, [r7, #4]
 800d65a:	e00c      	b.n	800d676 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	4613      	mov	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4a12      	ldr	r2, [pc, #72]	@ (800d6b0 <prvInitialiseTaskLists+0x60>)
 800d668:	4413      	add	r3, r2
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe fc81 	bl	800bf72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	3301      	adds	r3, #1
 800d674:	607b      	str	r3, [r7, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b06      	cmp	r3, #6
 800d67a:	d9ef      	bls.n	800d65c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d67c:	480d      	ldr	r0, [pc, #52]	@ (800d6b4 <prvInitialiseTaskLists+0x64>)
 800d67e:	f7fe fc78 	bl	800bf72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d682:	480d      	ldr	r0, [pc, #52]	@ (800d6b8 <prvInitialiseTaskLists+0x68>)
 800d684:	f7fe fc75 	bl	800bf72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d688:	480c      	ldr	r0, [pc, #48]	@ (800d6bc <prvInitialiseTaskLists+0x6c>)
 800d68a:	f7fe fc72 	bl	800bf72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d68e:	480c      	ldr	r0, [pc, #48]	@ (800d6c0 <prvInitialiseTaskLists+0x70>)
 800d690:	f7fe fc6f 	bl	800bf72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d694:	480b      	ldr	r0, [pc, #44]	@ (800d6c4 <prvInitialiseTaskLists+0x74>)
 800d696:	f7fe fc6c 	bl	800bf72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d69a:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c8 <prvInitialiseTaskLists+0x78>)
 800d69c:	4a05      	ldr	r2, [pc, #20]	@ (800d6b4 <prvInitialiseTaskLists+0x64>)
 800d69e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6cc <prvInitialiseTaskLists+0x7c>)
 800d6a2:	4a05      	ldr	r2, [pc, #20]	@ (800d6b8 <prvInitialiseTaskLists+0x68>)
 800d6a4:	601a      	str	r2, [r3, #0]
}
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20000ed8 	.word	0x20000ed8
 800d6b4:	20000f64 	.word	0x20000f64
 800d6b8:	20000f78 	.word	0x20000f78
 800d6bc:	20000f94 	.word	0x20000f94
 800d6c0:	20000fa8 	.word	0x20000fa8
 800d6c4:	20000fc0 	.word	0x20000fc0
 800d6c8:	20000f8c 	.word	0x20000f8c
 800d6cc:	20000f90 	.word	0x20000f90

0800d6d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6d6:	e019      	b.n	800d70c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6d8:	f000 fbd0 	bl	800de7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6dc:	4b10      	ldr	r3, [pc, #64]	@ (800d720 <prvCheckTasksWaitingTermination+0x50>)
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fe fccc 	bl	800c086 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d724 <prvCheckTasksWaitingTermination+0x54>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	4a0b      	ldr	r2, [pc, #44]	@ (800d724 <prvCheckTasksWaitingTermination+0x54>)
 800d6f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800d728 <prvCheckTasksWaitingTermination+0x58>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	4a0a      	ldr	r2, [pc, #40]	@ (800d728 <prvCheckTasksWaitingTermination+0x58>)
 800d700:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d702:	f000 fbf1 	bl	800dee8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f810 	bl	800d72c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d70c:	4b06      	ldr	r3, [pc, #24]	@ (800d728 <prvCheckTasksWaitingTermination+0x58>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1e1      	bne.n	800d6d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d714:	bf00      	nop
 800d716:	bf00      	nop
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	20000fa8 	.word	0x20000fa8
 800d724:	20000fd4 	.word	0x20000fd4
 800d728:	20000fbc 	.word	0x20000fbc

0800d72c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	334c      	adds	r3, #76	@ 0x4c
 800d738:	4618      	mov	r0, r3
 800d73a:	f000 ffed 	bl	800e718 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d744:	2b00      	cmp	r3, #0
 800d746:	d108      	bne.n	800d75a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d74c:	4618      	mov	r0, r3
 800d74e:	f000 fd4b 	bl	800e1e8 <vPortFree>
				vPortFree( pxTCB );
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 fd48 	bl	800e1e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d758:	e01b      	b.n	800d792 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d760:	2b01      	cmp	r3, #1
 800d762:	d103      	bne.n	800d76c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 fd3f 	bl	800e1e8 <vPortFree>
	}
 800d76a:	e012      	b.n	800d792 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d772:	2b02      	cmp	r3, #2
 800d774:	d00d      	beq.n	800d792 <prvDeleteTCB+0x66>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d77a:	b672      	cpsid	i
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	b662      	cpsie	i
 800d78a:	60fb      	str	r3, [r7, #12]
}
 800d78c:	bf00      	nop
 800d78e:	bf00      	nop
 800d790:	e7fd      	b.n	800d78e <prvDeleteTCB+0x62>
	}
 800d792:	bf00      	nop
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
	...

0800d79c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d7d4 <prvResetNextTaskUnblockTime+0x38>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d104      	bne.n	800d7b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7b4:	e008      	b.n	800d7c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b6:	4b07      	ldr	r3, [pc, #28]	@ (800d7d4 <prvResetNextTaskUnblockTime+0x38>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	4a04      	ldr	r2, [pc, #16]	@ (800d7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d7c6:	6013      	str	r3, [r2, #0]
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	20000f8c 	.word	0x20000f8c
 800d7d8:	20000ff4 	.word	0x20000ff4

0800d7dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d810 <xTaskGetSchedulerState+0x34>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d102      	bne.n	800d7f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	e008      	b.n	800d802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7f0:	4b08      	ldr	r3, [pc, #32]	@ (800d814 <xTaskGetSchedulerState+0x38>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7f8:	2302      	movs	r3, #2
 800d7fa:	607b      	str	r3, [r7, #4]
 800d7fc:	e001      	b.n	800d802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7fe:	2300      	movs	r3, #0
 800d800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d802:	687b      	ldr	r3, [r7, #4]
	}
 800d804:	4618      	mov	r0, r3
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr
 800d810:	20000fe0 	.word	0x20000fe0
 800d814:	20000ffc 	.word	0x20000ffc

0800d818 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d824:	2300      	movs	r3, #0
 800d826:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d069      	beq.n	800d902 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d832:	4b36      	ldr	r3, [pc, #216]	@ (800d90c <xTaskPriorityInherit+0xf4>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d838:	429a      	cmp	r2, r3
 800d83a:	d259      	bcs.n	800d8f0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	699b      	ldr	r3, [r3, #24]
 800d840:	2b00      	cmp	r3, #0
 800d842:	db06      	blt.n	800d852 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d844:	4b31      	ldr	r3, [pc, #196]	@ (800d90c <xTaskPriorityInherit+0xf4>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d84a:	f1c3 0207 	rsb	r2, r3, #7
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	6959      	ldr	r1, [r3, #20]
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d85a:	4613      	mov	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4413      	add	r3, r2
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4a2b      	ldr	r2, [pc, #172]	@ (800d910 <xTaskPriorityInherit+0xf8>)
 800d864:	4413      	add	r3, r2
 800d866:	4299      	cmp	r1, r3
 800d868:	d13a      	bne.n	800d8e0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	3304      	adds	r3, #4
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe fc09 	bl	800c086 <uxListRemove>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d115      	bne.n	800d8a6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d87e:	4924      	ldr	r1, [pc, #144]	@ (800d910 <xTaskPriorityInherit+0xf8>)
 800d880:	4613      	mov	r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	440b      	add	r3, r1
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <xTaskPriorityInherit+0x8e>
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d894:	2201      	movs	r2, #1
 800d896:	fa02 f303 	lsl.w	r3, r2, r3
 800d89a:	43da      	mvns	r2, r3
 800d89c:	4b1d      	ldr	r3, [pc, #116]	@ (800d914 <xTaskPriorityInherit+0xfc>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	4a1c      	ldr	r2, [pc, #112]	@ (800d914 <xTaskPriorityInherit+0xfc>)
 800d8a4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8a6:	4b19      	ldr	r3, [pc, #100]	@ (800d90c <xTaskPriorityInherit+0xf4>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	409a      	lsls	r2, r3
 800d8b8:	4b16      	ldr	r3, [pc, #88]	@ (800d914 <xTaskPriorityInherit+0xfc>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	4a15      	ldr	r2, [pc, #84]	@ (800d914 <xTaskPriorityInherit+0xfc>)
 800d8c0:	6013      	str	r3, [r2, #0]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4a10      	ldr	r2, [pc, #64]	@ (800d910 <xTaskPriorityInherit+0xf8>)
 800d8d0:	441a      	add	r2, r3
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4610      	mov	r0, r2
 800d8da:	f7fe fb77 	bl	800bfcc <vListInsertEnd>
 800d8de:	e004      	b.n	800d8ea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d90c <xTaskPriorityInherit+0xf4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]
 800d8ee:	e008      	b.n	800d902 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8f4:	4b05      	ldr	r3, [pc, #20]	@ (800d90c <xTaskPriorityInherit+0xf4>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d201      	bcs.n	800d902 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8fe:	2301      	movs	r3, #1
 800d900:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d902:	68fb      	ldr	r3, [r7, #12]
	}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	20000ed4 	.word	0x20000ed4
 800d910:	20000ed8 	.word	0x20000ed8
 800d914:	20000fdc 	.word	0x20000fdc

0800d918 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d924:	2300      	movs	r3, #0
 800d926:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d074      	beq.n	800da18 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d92e:	4b3d      	ldr	r3, [pc, #244]	@ (800da24 <xTaskPriorityDisinherit+0x10c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	429a      	cmp	r2, r3
 800d936:	d00d      	beq.n	800d954 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93c:	b672      	cpsid	i
 800d93e:	f383 8811 	msr	BASEPRI, r3
 800d942:	f3bf 8f6f 	isb	sy
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	b662      	cpsie	i
 800d94c:	60fb      	str	r3, [r7, #12]
}
 800d94e:	bf00      	nop
 800d950:	bf00      	nop
 800d952:	e7fd      	b.n	800d950 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10d      	bne.n	800d978 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d960:	b672      	cpsid	i
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	b662      	cpsie	i
 800d970:	60bb      	str	r3, [r7, #8]
}
 800d972:	bf00      	nop
 800d974:	bf00      	nop
 800d976:	e7fd      	b.n	800d974 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d97c:	1e5a      	subs	r2, r3, #1
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d044      	beq.n	800da18 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d992:	2b00      	cmp	r3, #0
 800d994:	d140      	bne.n	800da18 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	3304      	adds	r3, #4
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fe fb73 	bl	800c086 <uxListRemove>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d115      	bne.n	800d9d2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9aa:	491f      	ldr	r1, [pc, #124]	@ (800da28 <xTaskPriorityDisinherit+0x110>)
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4413      	add	r3, r2
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	440b      	add	r3, r1
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <xTaskPriorityDisinherit+0xba>
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c6:	43da      	mvns	r2, r3
 800d9c8:	4b18      	ldr	r3, [pc, #96]	@ (800da2c <xTaskPriorityDisinherit+0x114>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	4a17      	ldr	r2, [pc, #92]	@ (800da2c <xTaskPriorityDisinherit+0x114>)
 800d9d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9de:	f1c3 0207 	rsb	r2, r3, #7
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	409a      	lsls	r2, r3
 800d9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800da2c <xTaskPriorityDisinherit+0x114>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	4a0d      	ldr	r2, [pc, #52]	@ (800da2c <xTaskPriorityDisinherit+0x114>)
 800d9f6:	6013      	str	r3, [r2, #0]
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4413      	add	r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4a08      	ldr	r2, [pc, #32]	@ (800da28 <xTaskPriorityDisinherit+0x110>)
 800da06:	441a      	add	r2, r3
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	3304      	adds	r3, #4
 800da0c:	4619      	mov	r1, r3
 800da0e:	4610      	mov	r0, r2
 800da10:	f7fe fadc 	bl	800bfcc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da14:	2301      	movs	r3, #1
 800da16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da18:	697b      	ldr	r3, [r7, #20]
	}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20000ed4 	.word	0x20000ed4
 800da28:	20000ed8 	.word	0x20000ed8
 800da2c:	20000fdc 	.word	0x20000fdc

0800da30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da30:	b580      	push	{r7, lr}
 800da32:	b088      	sub	sp, #32
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da3e:	2301      	movs	r3, #1
 800da40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 8089 	beq.w	800db5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10d      	bne.n	800da6e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da56:	b672      	cpsid	i
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	b662      	cpsie	i
 800da66:	60fb      	str	r3, [r7, #12]
}
 800da68:	bf00      	nop
 800da6a:	bf00      	nop
 800da6c:	e7fd      	b.n	800da6a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d902      	bls.n	800da7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	61fb      	str	r3, [r7, #28]
 800da7c:	e002      	b.n	800da84 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da88:	69fa      	ldr	r2, [r7, #28]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d066      	beq.n	800db5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da92:	697a      	ldr	r2, [r7, #20]
 800da94:	429a      	cmp	r2, r3
 800da96:	d161      	bne.n	800db5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da98:	4b32      	ldr	r3, [pc, #200]	@ (800db64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	69ba      	ldr	r2, [r7, #24]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d10d      	bne.n	800dabe <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa6:	b672      	cpsid	i
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	b662      	cpsie	i
 800dab6:	60bb      	str	r3, [r7, #8]
}
 800dab8:	bf00      	nop
 800daba:	bf00      	nop
 800dabc:	e7fd      	b.n	800daba <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	69fa      	ldr	r2, [r7, #28]
 800dac8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	699b      	ldr	r3, [r3, #24]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	db04      	blt.n	800dadc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	f1c3 0207 	rsb	r2, r3, #7
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	6959      	ldr	r1, [r3, #20]
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	4613      	mov	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4413      	add	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	4a1f      	ldr	r2, [pc, #124]	@ (800db68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800daec:	4413      	add	r3, r2
 800daee:	4299      	cmp	r1, r3
 800daf0:	d134      	bne.n	800db5c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	3304      	adds	r3, #4
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fe fac5 	bl	800c086 <uxListRemove>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d115      	bne.n	800db2e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db06:	4918      	ldr	r1, [pc, #96]	@ (800db68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800db08:	4613      	mov	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4413      	add	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	440b      	add	r3, r1
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10a      	bne.n	800db2e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db1c:	2201      	movs	r2, #1
 800db1e:	fa02 f303 	lsl.w	r3, r2, r3
 800db22:	43da      	mvns	r2, r3
 800db24:	4b11      	ldr	r3, [pc, #68]	@ (800db6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4013      	ands	r3, r2
 800db2a:	4a10      	ldr	r2, [pc, #64]	@ (800db6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800db2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db32:	2201      	movs	r2, #1
 800db34:	409a      	lsls	r2, r3
 800db36:	4b0d      	ldr	r3, [pc, #52]	@ (800db6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	4a0b      	ldr	r2, [pc, #44]	@ (800db6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800db3e:	6013      	str	r3, [r2, #0]
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db44:	4613      	mov	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	4a06      	ldr	r2, [pc, #24]	@ (800db68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800db4e:	441a      	add	r2, r3
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	3304      	adds	r3, #4
 800db54:	4619      	mov	r1, r3
 800db56:	4610      	mov	r0, r2
 800db58:	f7fe fa38 	bl	800bfcc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db5c:	bf00      	nop
 800db5e:	3720      	adds	r7, #32
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	20000ed4 	.word	0x20000ed4
 800db68:	20000ed8 	.word	0x20000ed8
 800db6c:	20000fdc 	.word	0x20000fdc

0800db70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db70:	b480      	push	{r7}
 800db72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db74:	4b07      	ldr	r3, [pc, #28]	@ (800db94 <pvTaskIncrementMutexHeldCount+0x24>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db7c:	4b05      	ldr	r3, [pc, #20]	@ (800db94 <pvTaskIncrementMutexHeldCount+0x24>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800db82:	3201      	adds	r2, #1
 800db84:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800db86:	4b03      	ldr	r3, [pc, #12]	@ (800db94 <pvTaskIncrementMutexHeldCount+0x24>)
 800db88:	681b      	ldr	r3, [r3, #0]
	}
 800db8a:	4618      	mov	r0, r3
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	20000ed4 	.word	0x20000ed4

0800db98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dba2:	4b29      	ldr	r3, [pc, #164]	@ (800dc48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dba8:	4b28      	ldr	r3, [pc, #160]	@ (800dc4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3304      	adds	r3, #4
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fe fa69 	bl	800c086 <uxListRemove>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10b      	bne.n	800dbd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbba:	4b24      	ldr	r3, [pc, #144]	@ (800dc4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc6:	43da      	mvns	r2, r3
 800dbc8:	4b21      	ldr	r3, [pc, #132]	@ (800dc50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4013      	ands	r3, r2
 800dbce:	4a20      	ldr	r2, [pc, #128]	@ (800dc50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd8:	d10a      	bne.n	800dbf0 <prvAddCurrentTaskToDelayedList+0x58>
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d007      	beq.n	800dbf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbe0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	481a      	ldr	r0, [pc, #104]	@ (800dc54 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dbea:	f7fe f9ef 	bl	800bfcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbee:	e026      	b.n	800dc3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbf8:	4b14      	ldr	r3, [pc, #80]	@ (800dc4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc00:	68ba      	ldr	r2, [r7, #8]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d209      	bcs.n	800dc1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc08:	4b13      	ldr	r3, [pc, #76]	@ (800dc58 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3304      	adds	r3, #4
 800dc12:	4619      	mov	r1, r3
 800dc14:	4610      	mov	r0, r2
 800dc16:	f7fe f9fd 	bl	800c014 <vListInsert>
}
 800dc1a:	e010      	b.n	800dc3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc1c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc5c <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	4b0a      	ldr	r3, [pc, #40]	@ (800dc4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7fe f9f3 	bl	800c014 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d202      	bcs.n	800dc3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc38:	4a09      	ldr	r2, [pc, #36]	@ (800dc60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	6013      	str	r3, [r2, #0]
}
 800dc3e:	bf00      	nop
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	20000fd8 	.word	0x20000fd8
 800dc4c:	20000ed4 	.word	0x20000ed4
 800dc50:	20000fdc 	.word	0x20000fdc
 800dc54:	20000fc0 	.word	0x20000fc0
 800dc58:	20000f90 	.word	0x20000f90
 800dc5c:	20000f8c 	.word	0x20000f8c
 800dc60:	20000ff4 	.word	0x20000ff4

0800dc64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	3b04      	subs	r3, #4
 800dc74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dc7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3b04      	subs	r3, #4
 800dc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	f023 0201 	bic.w	r2, r3, #1
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	3b04      	subs	r3, #4
 800dc92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc94:	4a0c      	ldr	r2, [pc, #48]	@ (800dcc8 <pxPortInitialiseStack+0x64>)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	3b14      	subs	r3, #20
 800dc9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3b04      	subs	r3, #4
 800dcaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f06f 0202 	mvn.w	r2, #2
 800dcb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	3b20      	subs	r3, #32
 800dcb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcba:	68fb      	ldr	r3, [r7, #12]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	0800dccd 	.word	0x0800dccd

0800dccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcd6:	4b15      	ldr	r3, [pc, #84]	@ (800dd2c <prvTaskExitError+0x60>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcde:	d00d      	beq.n	800dcfc <prvTaskExitError+0x30>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce4:	b672      	cpsid	i
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	b662      	cpsie	i
 800dcf4:	60fb      	str	r3, [r7, #12]
}
 800dcf6:	bf00      	nop
 800dcf8:	bf00      	nop
 800dcfa:	e7fd      	b.n	800dcf8 <prvTaskExitError+0x2c>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd00:	b672      	cpsid	i
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	b662      	cpsie	i
 800dd10:	60bb      	str	r3, [r7, #8]
}
 800dd12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd14:	bf00      	nop
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0fc      	beq.n	800dd16 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd1c:	bf00      	nop
 800dd1e:	bf00      	nop
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	20000054 	.word	0x20000054

0800dd30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd30:	4b07      	ldr	r3, [pc, #28]	@ (800dd50 <pxCurrentTCBConst2>)
 800dd32:	6819      	ldr	r1, [r3, #0]
 800dd34:	6808      	ldr	r0, [r1, #0]
 800dd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3a:	f380 8809 	msr	PSP, r0
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f04f 0000 	mov.w	r0, #0
 800dd46:	f380 8811 	msr	BASEPRI, r0
 800dd4a:	4770      	bx	lr
 800dd4c:	f3af 8000 	nop.w

0800dd50 <pxCurrentTCBConst2>:
 800dd50:	20000ed4 	.word	0x20000ed4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd54:	bf00      	nop
 800dd56:	bf00      	nop

0800dd58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd58:	4808      	ldr	r0, [pc, #32]	@ (800dd7c <prvPortStartFirstTask+0x24>)
 800dd5a:	6800      	ldr	r0, [r0, #0]
 800dd5c:	6800      	ldr	r0, [r0, #0]
 800dd5e:	f380 8808 	msr	MSP, r0
 800dd62:	f04f 0000 	mov.w	r0, #0
 800dd66:	f380 8814 	msr	CONTROL, r0
 800dd6a:	b662      	cpsie	i
 800dd6c:	b661      	cpsie	f
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	df00      	svc	0
 800dd78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd7a:	bf00      	nop
 800dd7c:	e000ed08 	.word	0xe000ed08

0800dd80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd86:	4b37      	ldr	r3, [pc, #220]	@ (800de64 <xPortStartScheduler+0xe4>)
 800dd88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	22ff      	movs	r2, #255	@ 0xff
 800dd96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dda0:	78fb      	ldrb	r3, [r7, #3]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	4b2f      	ldr	r3, [pc, #188]	@ (800de68 <xPortStartScheduler+0xe8>)
 800ddac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddae:	4b2f      	ldr	r3, [pc, #188]	@ (800de6c <xPortStartScheduler+0xec>)
 800ddb0:	2207      	movs	r2, #7
 800ddb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddb4:	e009      	b.n	800ddca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ddb6:	4b2d      	ldr	r3, [pc, #180]	@ (800de6c <xPortStartScheduler+0xec>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	4a2b      	ldr	r2, [pc, #172]	@ (800de6c <xPortStartScheduler+0xec>)
 800ddbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ddc0:	78fb      	ldrb	r3, [r7, #3]
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddca:	78fb      	ldrb	r3, [r7, #3]
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddd2:	2b80      	cmp	r3, #128	@ 0x80
 800ddd4:	d0ef      	beq.n	800ddb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddd6:	4b25      	ldr	r3, [pc, #148]	@ (800de6c <xPortStartScheduler+0xec>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f1c3 0307 	rsb	r3, r3, #7
 800ddde:	2b04      	cmp	r3, #4
 800dde0:	d00d      	beq.n	800ddfe <xPortStartScheduler+0x7e>
	__asm volatile
 800dde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde6:	b672      	cpsid	i
 800dde8:	f383 8811 	msr	BASEPRI, r3
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	b662      	cpsie	i
 800ddf6:	60bb      	str	r3, [r7, #8]
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	e7fd      	b.n	800ddfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ddfe:	4b1b      	ldr	r3, [pc, #108]	@ (800de6c <xPortStartScheduler+0xec>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	021b      	lsls	r3, r3, #8
 800de04:	4a19      	ldr	r2, [pc, #100]	@ (800de6c <xPortStartScheduler+0xec>)
 800de06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de08:	4b18      	ldr	r3, [pc, #96]	@ (800de6c <xPortStartScheduler+0xec>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800de10:	4a16      	ldr	r2, [pc, #88]	@ (800de6c <xPortStartScheduler+0xec>)
 800de12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	b2da      	uxtb	r2, r3
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de1c:	4b14      	ldr	r3, [pc, #80]	@ (800de70 <xPortStartScheduler+0xf0>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a13      	ldr	r2, [pc, #76]	@ (800de70 <xPortStartScheduler+0xf0>)
 800de22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800de26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de28:	4b11      	ldr	r3, [pc, #68]	@ (800de70 <xPortStartScheduler+0xf0>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a10      	ldr	r2, [pc, #64]	@ (800de70 <xPortStartScheduler+0xf0>)
 800de2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800de32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de34:	f000 f8dc 	bl	800dff0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de38:	4b0e      	ldr	r3, [pc, #56]	@ (800de74 <xPortStartScheduler+0xf4>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de3e:	f000 f8fb 	bl	800e038 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de42:	4b0d      	ldr	r3, [pc, #52]	@ (800de78 <xPortStartScheduler+0xf8>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a0c      	ldr	r2, [pc, #48]	@ (800de78 <xPortStartScheduler+0xf8>)
 800de48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800de4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de4e:	f7ff ff83 	bl	800dd58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de52:	f7ff fa67 	bl	800d324 <vTaskSwitchContext>
	prvTaskExitError();
 800de56:	f7ff ff39 	bl	800dccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	e000e400 	.word	0xe000e400
 800de68:	20001000 	.word	0x20001000
 800de6c:	20001004 	.word	0x20001004
 800de70:	e000ed20 	.word	0xe000ed20
 800de74:	20000054 	.word	0x20000054
 800de78:	e000ef34 	.word	0xe000ef34

0800de7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de86:	b672      	cpsid	i
 800de88:	f383 8811 	msr	BASEPRI, r3
 800de8c:	f3bf 8f6f 	isb	sy
 800de90:	f3bf 8f4f 	dsb	sy
 800de94:	b662      	cpsie	i
 800de96:	607b      	str	r3, [r7, #4]
}
 800de98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de9a:	4b11      	ldr	r3, [pc, #68]	@ (800dee0 <vPortEnterCritical+0x64>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3301      	adds	r3, #1
 800dea0:	4a0f      	ldr	r2, [pc, #60]	@ (800dee0 <vPortEnterCritical+0x64>)
 800dea2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dea4:	4b0e      	ldr	r3, [pc, #56]	@ (800dee0 <vPortEnterCritical+0x64>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d112      	bne.n	800ded2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800deac:	4b0d      	ldr	r3, [pc, #52]	@ (800dee4 <vPortEnterCritical+0x68>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00d      	beq.n	800ded2 <vPortEnterCritical+0x56>
	__asm volatile
 800deb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deba:	b672      	cpsid	i
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	b662      	cpsie	i
 800deca:	603b      	str	r3, [r7, #0]
}
 800decc:	bf00      	nop
 800dece:	bf00      	nop
 800ded0:	e7fd      	b.n	800dece <vPortEnterCritical+0x52>
	}
}
 800ded2:	bf00      	nop
 800ded4:	370c      	adds	r7, #12
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	20000054 	.word	0x20000054
 800dee4:	e000ed04 	.word	0xe000ed04

0800dee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800deee:	4b13      	ldr	r3, [pc, #76]	@ (800df3c <vPortExitCritical+0x54>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10d      	bne.n	800df12 <vPortExitCritical+0x2a>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defa:	b672      	cpsid	i
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	b662      	cpsie	i
 800df0a:	607b      	str	r3, [r7, #4]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800df12:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <vPortExitCritical+0x54>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3b01      	subs	r3, #1
 800df18:	4a08      	ldr	r2, [pc, #32]	@ (800df3c <vPortExitCritical+0x54>)
 800df1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df1c:	4b07      	ldr	r3, [pc, #28]	@ (800df3c <vPortExitCritical+0x54>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d105      	bne.n	800df30 <vPortExitCritical+0x48>
 800df24:	2300      	movs	r3, #0
 800df26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800df2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	20000054 	.word	0x20000054

0800df40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df40:	f3ef 8009 	mrs	r0, PSP
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	4b15      	ldr	r3, [pc, #84]	@ (800dfa0 <pxCurrentTCBConst>)
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	f01e 0f10 	tst.w	lr, #16
 800df50:	bf08      	it	eq
 800df52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5a:	6010      	str	r0, [r2, #0]
 800df5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800df64:	b672      	cpsid	i
 800df66:	f380 8811 	msr	BASEPRI, r0
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	b662      	cpsie	i
 800df74:	f7ff f9d6 	bl	800d324 <vTaskSwitchContext>
 800df78:	f04f 0000 	mov.w	r0, #0
 800df7c:	f380 8811 	msr	BASEPRI, r0
 800df80:	bc09      	pop	{r0, r3}
 800df82:	6819      	ldr	r1, [r3, #0]
 800df84:	6808      	ldr	r0, [r1, #0]
 800df86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8a:	f01e 0f10 	tst.w	lr, #16
 800df8e:	bf08      	it	eq
 800df90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df94:	f380 8809 	msr	PSP, r0
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop

0800dfa0 <pxCurrentTCBConst>:
 800dfa0:	20000ed4 	.word	0x20000ed4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop

0800dfa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
	__asm volatile
 800dfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb2:	b672      	cpsid	i
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	b662      	cpsie	i
 800dfc2:	607b      	str	r3, [r7, #4]
}
 800dfc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfc6:	f7ff f8f1 	bl	800d1ac <xTaskIncrementTick>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d003      	beq.n	800dfd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfd0:	4b06      	ldr	r3, [pc, #24]	@ (800dfec <SysTick_Handler+0x44>)
 800dfd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	f383 8811 	msr	BASEPRI, r3
}
 800dfe2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	e000ed04 	.word	0xe000ed04

0800dff0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dff4:	4b0b      	ldr	r3, [pc, #44]	@ (800e024 <vPortSetupTimerInterrupt+0x34>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dffa:	4b0b      	ldr	r3, [pc, #44]	@ (800e028 <vPortSetupTimerInterrupt+0x38>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e000:	4b0a      	ldr	r3, [pc, #40]	@ (800e02c <vPortSetupTimerInterrupt+0x3c>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a0a      	ldr	r2, [pc, #40]	@ (800e030 <vPortSetupTimerInterrupt+0x40>)
 800e006:	fba2 2303 	umull	r2, r3, r2, r3
 800e00a:	099b      	lsrs	r3, r3, #6
 800e00c:	4a09      	ldr	r2, [pc, #36]	@ (800e034 <vPortSetupTimerInterrupt+0x44>)
 800e00e:	3b01      	subs	r3, #1
 800e010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e012:	4b04      	ldr	r3, [pc, #16]	@ (800e024 <vPortSetupTimerInterrupt+0x34>)
 800e014:	2207      	movs	r2, #7
 800e016:	601a      	str	r2, [r3, #0]
}
 800e018:	bf00      	nop
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	e000e010 	.word	0xe000e010
 800e028:	e000e018 	.word	0xe000e018
 800e02c:	20000048 	.word	0x20000048
 800e030:	10624dd3 	.word	0x10624dd3
 800e034:	e000e014 	.word	0xe000e014

0800e038 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e038:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e048 <vPortEnableVFP+0x10>
 800e03c:	6801      	ldr	r1, [r0, #0]
 800e03e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e042:	6001      	str	r1, [r0, #0]
 800e044:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e046:	bf00      	nop
 800e048:	e000ed88 	.word	0xe000ed88

0800e04c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b08a      	sub	sp, #40	@ 0x28
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e054:	2300      	movs	r3, #0
 800e056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e058:	f7fe ffea 	bl	800d030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e05c:	4b5d      	ldr	r3, [pc, #372]	@ (800e1d4 <pvPortMalloc+0x188>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e064:	f000 f920 	bl	800e2a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e068:	4b5b      	ldr	r3, [pc, #364]	@ (800e1d8 <pvPortMalloc+0x18c>)
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4013      	ands	r3, r2
 800e070:	2b00      	cmp	r3, #0
 800e072:	f040 8094 	bne.w	800e19e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d020      	beq.n	800e0be <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800e07c:	2208      	movs	r2, #8
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4413      	add	r3, r2
 800e082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f003 0307 	and.w	r3, r3, #7
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d017      	beq.n	800e0be <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f023 0307 	bic.w	r3, r3, #7
 800e094:	3308      	adds	r3, #8
 800e096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f003 0307 	and.w	r3, r3, #7
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00d      	beq.n	800e0be <pvPortMalloc+0x72>
	__asm volatile
 800e0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a6:	b672      	cpsid	i
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	b662      	cpsie	i
 800e0b6:	617b      	str	r3, [r7, #20]
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	e7fd      	b.n	800e0ba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d06c      	beq.n	800e19e <pvPortMalloc+0x152>
 800e0c4:	4b45      	ldr	r3, [pc, #276]	@ (800e1dc <pvPortMalloc+0x190>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d867      	bhi.n	800e19e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0ce:	4b44      	ldr	r3, [pc, #272]	@ (800e1e0 <pvPortMalloc+0x194>)
 800e0d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0d2:	4b43      	ldr	r3, [pc, #268]	@ (800e1e0 <pvPortMalloc+0x194>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0d8:	e004      	b.n	800e0e4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d903      	bls.n	800e0f6 <pvPortMalloc+0xaa>
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1f1      	bne.n	800e0da <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0f6:	4b37      	ldr	r3, [pc, #220]	@ (800e1d4 <pvPortMalloc+0x188>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d04e      	beq.n	800e19e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2208      	movs	r2, #8
 800e106:	4413      	add	r3, r2
 800e108:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	1ad2      	subs	r2, r2, r3
 800e11a:	2308      	movs	r3, #8
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	429a      	cmp	r2, r3
 800e120:	d922      	bls.n	800e168 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4413      	add	r3, r2
 800e128:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	f003 0307 	and.w	r3, r3, #7
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00d      	beq.n	800e150 <pvPortMalloc+0x104>
	__asm volatile
 800e134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e138:	b672      	cpsid	i
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	b662      	cpsie	i
 800e148:	613b      	str	r3, [r7, #16]
}
 800e14a:	bf00      	nop
 800e14c:	bf00      	nop
 800e14e:	e7fd      	b.n	800e14c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e152:	685a      	ldr	r2, [r3, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	1ad2      	subs	r2, r2, r3
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e162:	69b8      	ldr	r0, [r7, #24]
 800e164:	f000 f902 	bl	800e36c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e168:	4b1c      	ldr	r3, [pc, #112]	@ (800e1dc <pvPortMalloc+0x190>)
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	4a1a      	ldr	r2, [pc, #104]	@ (800e1dc <pvPortMalloc+0x190>)
 800e174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e176:	4b19      	ldr	r3, [pc, #100]	@ (800e1dc <pvPortMalloc+0x190>)
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	4b1a      	ldr	r3, [pc, #104]	@ (800e1e4 <pvPortMalloc+0x198>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d203      	bcs.n	800e18a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e182:	4b16      	ldr	r3, [pc, #88]	@ (800e1dc <pvPortMalloc+0x190>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a17      	ldr	r2, [pc, #92]	@ (800e1e4 <pvPortMalloc+0x198>)
 800e188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18c:	685a      	ldr	r2, [r3, #4]
 800e18e:	4b12      	ldr	r3, [pc, #72]	@ (800e1d8 <pvPortMalloc+0x18c>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	431a      	orrs	r2, r3
 800e194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e19a:	2200      	movs	r2, #0
 800e19c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e19e:	f7fe ff55 	bl	800d04c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	f003 0307 	and.w	r3, r3, #7
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00d      	beq.n	800e1c8 <pvPortMalloc+0x17c>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b0:	b672      	cpsid	i
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	b662      	cpsie	i
 800e1c0:	60fb      	str	r3, [r7, #12]
}
 800e1c2:	bf00      	nop
 800e1c4:	bf00      	nop
 800e1c6:	e7fd      	b.n	800e1c4 <pvPortMalloc+0x178>
	return pvReturn;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3728      	adds	r7, #40	@ 0x28
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20004c10 	.word	0x20004c10
 800e1d8:	20004c1c 	.word	0x20004c1c
 800e1dc:	20004c14 	.word	0x20004c14
 800e1e0:	20004c08 	.word	0x20004c08
 800e1e4:	20004c18 	.word	0x20004c18

0800e1e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d04e      	beq.n	800e298 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1fa:	2308      	movs	r3, #8
 800e1fc:	425b      	negs	r3, r3
 800e1fe:	697a      	ldr	r2, [r7, #20]
 800e200:	4413      	add	r3, r2
 800e202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	685a      	ldr	r2, [r3, #4]
 800e20c:	4b24      	ldr	r3, [pc, #144]	@ (800e2a0 <vPortFree+0xb8>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4013      	ands	r3, r2
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10d      	bne.n	800e232 <vPortFree+0x4a>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21a:	b672      	cpsid	i
 800e21c:	f383 8811 	msr	BASEPRI, r3
 800e220:	f3bf 8f6f 	isb	sy
 800e224:	f3bf 8f4f 	dsb	sy
 800e228:	b662      	cpsie	i
 800e22a:	60fb      	str	r3, [r7, #12]
}
 800e22c:	bf00      	nop
 800e22e:	bf00      	nop
 800e230:	e7fd      	b.n	800e22e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00d      	beq.n	800e256 <vPortFree+0x6e>
	__asm volatile
 800e23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23e:	b672      	cpsid	i
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	b662      	cpsie	i
 800e24e:	60bb      	str	r3, [r7, #8]
}
 800e250:	bf00      	nop
 800e252:	bf00      	nop
 800e254:	e7fd      	b.n	800e252 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	685a      	ldr	r2, [r3, #4]
 800e25a:	4b11      	ldr	r3, [pc, #68]	@ (800e2a0 <vPortFree+0xb8>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4013      	ands	r3, r2
 800e260:	2b00      	cmp	r3, #0
 800e262:	d019      	beq.n	800e298 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d115      	bne.n	800e298 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	685a      	ldr	r2, [r3, #4]
 800e270:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a0 <vPortFree+0xb8>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	43db      	mvns	r3, r3
 800e276:	401a      	ands	r2, r3
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e27c:	f7fe fed8 	bl	800d030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	685a      	ldr	r2, [r3, #4]
 800e284:	4b07      	ldr	r3, [pc, #28]	@ (800e2a4 <vPortFree+0xbc>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4413      	add	r3, r2
 800e28a:	4a06      	ldr	r2, [pc, #24]	@ (800e2a4 <vPortFree+0xbc>)
 800e28c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e28e:	6938      	ldr	r0, [r7, #16]
 800e290:	f000 f86c 	bl	800e36c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e294:	f7fe feda 	bl	800d04c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e298:	bf00      	nop
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	20004c1c 	.word	0x20004c1c
 800e2a4:	20004c14 	.word	0x20004c14

0800e2a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e2ae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e2b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e2b4:	4b27      	ldr	r3, [pc, #156]	@ (800e354 <prvHeapInit+0xac>)
 800e2b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f003 0307 	and.w	r3, r3, #7
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00c      	beq.n	800e2dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3307      	adds	r3, #7
 800e2c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f023 0307 	bic.w	r3, r3, #7
 800e2ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	4a1f      	ldr	r2, [pc, #124]	@ (800e354 <prvHeapInit+0xac>)
 800e2d8:	4413      	add	r3, r2
 800e2da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e358 <prvHeapInit+0xb0>)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2e6:	4b1c      	ldr	r3, [pc, #112]	@ (800e358 <prvHeapInit+0xb0>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	68ba      	ldr	r2, [r7, #8]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2f4:	2208      	movs	r2, #8
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	1a9b      	subs	r3, r3, r2
 800e2fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f023 0307 	bic.w	r3, r3, #7
 800e302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	4a15      	ldr	r2, [pc, #84]	@ (800e35c <prvHeapInit+0xb4>)
 800e308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e30a:	4b14      	ldr	r3, [pc, #80]	@ (800e35c <prvHeapInit+0xb4>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2200      	movs	r2, #0
 800e310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e312:	4b12      	ldr	r3, [pc, #72]	@ (800e35c <prvHeapInit+0xb4>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	1ad2      	subs	r2, r2, r3
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e328:	4b0c      	ldr	r3, [pc, #48]	@ (800e35c <prvHeapInit+0xb4>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	4a0a      	ldr	r2, [pc, #40]	@ (800e360 <prvHeapInit+0xb8>)
 800e336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	4a09      	ldr	r2, [pc, #36]	@ (800e364 <prvHeapInit+0xbc>)
 800e33e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e340:	4b09      	ldr	r3, [pc, #36]	@ (800e368 <prvHeapInit+0xc0>)
 800e342:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e346:	601a      	str	r2, [r3, #0]
}
 800e348:	bf00      	nop
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr
 800e354:	20001008 	.word	0x20001008
 800e358:	20004c08 	.word	0x20004c08
 800e35c:	20004c10 	.word	0x20004c10
 800e360:	20004c18 	.word	0x20004c18
 800e364:	20004c14 	.word	0x20004c14
 800e368:	20004c1c 	.word	0x20004c1c

0800e36c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e374:	4b28      	ldr	r3, [pc, #160]	@ (800e418 <prvInsertBlockIntoFreeList+0xac>)
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	e002      	b.n	800e380 <prvInsertBlockIntoFreeList+0x14>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	60fb      	str	r3, [r7, #12]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	429a      	cmp	r2, r3
 800e388:	d8f7      	bhi.n	800e37a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	4413      	add	r3, r2
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d108      	bne.n	800e3ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	441a      	add	r2, r3
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	441a      	add	r2, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d118      	bne.n	800e3f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	4b15      	ldr	r3, [pc, #84]	@ (800e41c <prvInsertBlockIntoFreeList+0xb0>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d00d      	beq.n	800e3ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685a      	ldr	r2, [r3, #4]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	441a      	add	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	e008      	b.n	800e3fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e41c <prvInsertBlockIntoFreeList+0xb0>)
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	e003      	b.n	800e3fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	429a      	cmp	r2, r3
 800e402:	d002      	beq.n	800e40a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e40a:	bf00      	nop
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	20004c08 	.word	0x20004c08
 800e41c:	20004c10 	.word	0x20004c10

0800e420 <rand>:
 800e420:	4b16      	ldr	r3, [pc, #88]	@ (800e47c <rand+0x5c>)
 800e422:	b510      	push	{r4, lr}
 800e424:	681c      	ldr	r4, [r3, #0]
 800e426:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e428:	b9b3      	cbnz	r3, 800e458 <rand+0x38>
 800e42a:	2018      	movs	r0, #24
 800e42c:	f000 faa4 	bl	800e978 <malloc>
 800e430:	4602      	mov	r2, r0
 800e432:	6320      	str	r0, [r4, #48]	@ 0x30
 800e434:	b920      	cbnz	r0, 800e440 <rand+0x20>
 800e436:	4b12      	ldr	r3, [pc, #72]	@ (800e480 <rand+0x60>)
 800e438:	4812      	ldr	r0, [pc, #72]	@ (800e484 <rand+0x64>)
 800e43a:	2152      	movs	r1, #82	@ 0x52
 800e43c:	f000 fa34 	bl	800e8a8 <__assert_func>
 800e440:	4911      	ldr	r1, [pc, #68]	@ (800e488 <rand+0x68>)
 800e442:	4b12      	ldr	r3, [pc, #72]	@ (800e48c <rand+0x6c>)
 800e444:	e9c0 1300 	strd	r1, r3, [r0]
 800e448:	4b11      	ldr	r3, [pc, #68]	@ (800e490 <rand+0x70>)
 800e44a:	6083      	str	r3, [r0, #8]
 800e44c:	230b      	movs	r3, #11
 800e44e:	8183      	strh	r3, [r0, #12]
 800e450:	2100      	movs	r1, #0
 800e452:	2001      	movs	r0, #1
 800e454:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e458:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e45a:	480e      	ldr	r0, [pc, #56]	@ (800e494 <rand+0x74>)
 800e45c:	690b      	ldr	r3, [r1, #16]
 800e45e:	694c      	ldr	r4, [r1, #20]
 800e460:	4a0d      	ldr	r2, [pc, #52]	@ (800e498 <rand+0x78>)
 800e462:	4358      	muls	r0, r3
 800e464:	fb02 0004 	mla	r0, r2, r4, r0
 800e468:	fba3 3202 	umull	r3, r2, r3, r2
 800e46c:	3301      	adds	r3, #1
 800e46e:	eb40 0002 	adc.w	r0, r0, r2
 800e472:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e476:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e47a:	bd10      	pop	{r4, pc}
 800e47c:	20000064 	.word	0x20000064
 800e480:	0801dcf8 	.word	0x0801dcf8
 800e484:	0801dd0f 	.word	0x0801dd0f
 800e488:	abcd330e 	.word	0xabcd330e
 800e48c:	e66d1234 	.word	0xe66d1234
 800e490:	0005deec 	.word	0x0005deec
 800e494:	5851f42d 	.word	0x5851f42d
 800e498:	4c957f2d 	.word	0x4c957f2d

0800e49c <std>:
 800e49c:	2300      	movs	r3, #0
 800e49e:	b510      	push	{r4, lr}
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800e4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4aa:	6083      	str	r3, [r0, #8]
 800e4ac:	8181      	strh	r1, [r0, #12]
 800e4ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800e4b0:	81c2      	strh	r2, [r0, #14]
 800e4b2:	6183      	str	r3, [r0, #24]
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	2208      	movs	r2, #8
 800e4b8:	305c      	adds	r0, #92	@ 0x5c
 800e4ba:	f000 f914 	bl	800e6e6 <memset>
 800e4be:	4b0d      	ldr	r3, [pc, #52]	@ (800e4f4 <std+0x58>)
 800e4c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e4f8 <std+0x5c>)
 800e4c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e4fc <std+0x60>)
 800e4c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e500 <std+0x64>)
 800e4cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e504 <std+0x68>)
 800e4d0:	6224      	str	r4, [r4, #32]
 800e4d2:	429c      	cmp	r4, r3
 800e4d4:	d006      	beq.n	800e4e4 <std+0x48>
 800e4d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e4da:	4294      	cmp	r4, r2
 800e4dc:	d002      	beq.n	800e4e4 <std+0x48>
 800e4de:	33d0      	adds	r3, #208	@ 0xd0
 800e4e0:	429c      	cmp	r4, r3
 800e4e2:	d105      	bne.n	800e4f0 <std+0x54>
 800e4e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ec:	f000 b9ca 	b.w	800e884 <__retarget_lock_init_recursive>
 800e4f0:	bd10      	pop	{r4, pc}
 800e4f2:	bf00      	nop
 800e4f4:	0800e661 	.word	0x0800e661
 800e4f8:	0800e683 	.word	0x0800e683
 800e4fc:	0800e6bb 	.word	0x0800e6bb
 800e500:	0800e6df 	.word	0x0800e6df
 800e504:	20004c20 	.word	0x20004c20

0800e508 <stdio_exit_handler>:
 800e508:	4a02      	ldr	r2, [pc, #8]	@ (800e514 <stdio_exit_handler+0xc>)
 800e50a:	4903      	ldr	r1, [pc, #12]	@ (800e518 <stdio_exit_handler+0x10>)
 800e50c:	4803      	ldr	r0, [pc, #12]	@ (800e51c <stdio_exit_handler+0x14>)
 800e50e:	f000 b869 	b.w	800e5e4 <_fwalk_sglue>
 800e512:	bf00      	nop
 800e514:	20000058 	.word	0x20000058
 800e518:	0800f1b9 	.word	0x0800f1b9
 800e51c:	20000068 	.word	0x20000068

0800e520 <cleanup_stdio>:
 800e520:	6841      	ldr	r1, [r0, #4]
 800e522:	4b0c      	ldr	r3, [pc, #48]	@ (800e554 <cleanup_stdio+0x34>)
 800e524:	4299      	cmp	r1, r3
 800e526:	b510      	push	{r4, lr}
 800e528:	4604      	mov	r4, r0
 800e52a:	d001      	beq.n	800e530 <cleanup_stdio+0x10>
 800e52c:	f000 fe44 	bl	800f1b8 <_fflush_r>
 800e530:	68a1      	ldr	r1, [r4, #8]
 800e532:	4b09      	ldr	r3, [pc, #36]	@ (800e558 <cleanup_stdio+0x38>)
 800e534:	4299      	cmp	r1, r3
 800e536:	d002      	beq.n	800e53e <cleanup_stdio+0x1e>
 800e538:	4620      	mov	r0, r4
 800e53a:	f000 fe3d 	bl	800f1b8 <_fflush_r>
 800e53e:	68e1      	ldr	r1, [r4, #12]
 800e540:	4b06      	ldr	r3, [pc, #24]	@ (800e55c <cleanup_stdio+0x3c>)
 800e542:	4299      	cmp	r1, r3
 800e544:	d004      	beq.n	800e550 <cleanup_stdio+0x30>
 800e546:	4620      	mov	r0, r4
 800e548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e54c:	f000 be34 	b.w	800f1b8 <_fflush_r>
 800e550:	bd10      	pop	{r4, pc}
 800e552:	bf00      	nop
 800e554:	20004c20 	.word	0x20004c20
 800e558:	20004c88 	.word	0x20004c88
 800e55c:	20004cf0 	.word	0x20004cf0

0800e560 <global_stdio_init.part.0>:
 800e560:	b510      	push	{r4, lr}
 800e562:	4b0b      	ldr	r3, [pc, #44]	@ (800e590 <global_stdio_init.part.0+0x30>)
 800e564:	4c0b      	ldr	r4, [pc, #44]	@ (800e594 <global_stdio_init.part.0+0x34>)
 800e566:	4a0c      	ldr	r2, [pc, #48]	@ (800e598 <global_stdio_init.part.0+0x38>)
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	4620      	mov	r0, r4
 800e56c:	2200      	movs	r2, #0
 800e56e:	2104      	movs	r1, #4
 800e570:	f7ff ff94 	bl	800e49c <std>
 800e574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e578:	2201      	movs	r2, #1
 800e57a:	2109      	movs	r1, #9
 800e57c:	f7ff ff8e 	bl	800e49c <std>
 800e580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e584:	2202      	movs	r2, #2
 800e586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e58a:	2112      	movs	r1, #18
 800e58c:	f7ff bf86 	b.w	800e49c <std>
 800e590:	20004d58 	.word	0x20004d58
 800e594:	20004c20 	.word	0x20004c20
 800e598:	0800e509 	.word	0x0800e509

0800e59c <__sfp_lock_acquire>:
 800e59c:	4801      	ldr	r0, [pc, #4]	@ (800e5a4 <__sfp_lock_acquire+0x8>)
 800e59e:	f000 b972 	b.w	800e886 <__retarget_lock_acquire_recursive>
 800e5a2:	bf00      	nop
 800e5a4:	20004d61 	.word	0x20004d61

0800e5a8 <__sfp_lock_release>:
 800e5a8:	4801      	ldr	r0, [pc, #4]	@ (800e5b0 <__sfp_lock_release+0x8>)
 800e5aa:	f000 b96d 	b.w	800e888 <__retarget_lock_release_recursive>
 800e5ae:	bf00      	nop
 800e5b0:	20004d61 	.word	0x20004d61

0800e5b4 <__sinit>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	f7ff fff0 	bl	800e59c <__sfp_lock_acquire>
 800e5bc:	6a23      	ldr	r3, [r4, #32]
 800e5be:	b11b      	cbz	r3, 800e5c8 <__sinit+0x14>
 800e5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c4:	f7ff bff0 	b.w	800e5a8 <__sfp_lock_release>
 800e5c8:	4b04      	ldr	r3, [pc, #16]	@ (800e5dc <__sinit+0x28>)
 800e5ca:	6223      	str	r3, [r4, #32]
 800e5cc:	4b04      	ldr	r3, [pc, #16]	@ (800e5e0 <__sinit+0x2c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1f5      	bne.n	800e5c0 <__sinit+0xc>
 800e5d4:	f7ff ffc4 	bl	800e560 <global_stdio_init.part.0>
 800e5d8:	e7f2      	b.n	800e5c0 <__sinit+0xc>
 800e5da:	bf00      	nop
 800e5dc:	0800e521 	.word	0x0800e521
 800e5e0:	20004d58 	.word	0x20004d58

0800e5e4 <_fwalk_sglue>:
 800e5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	4688      	mov	r8, r1
 800e5ec:	4614      	mov	r4, r2
 800e5ee:	2600      	movs	r6, #0
 800e5f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5f4:	f1b9 0901 	subs.w	r9, r9, #1
 800e5f8:	d505      	bpl.n	800e606 <_fwalk_sglue+0x22>
 800e5fa:	6824      	ldr	r4, [r4, #0]
 800e5fc:	2c00      	cmp	r4, #0
 800e5fe:	d1f7      	bne.n	800e5f0 <_fwalk_sglue+0xc>
 800e600:	4630      	mov	r0, r6
 800e602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e606:	89ab      	ldrh	r3, [r5, #12]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d907      	bls.n	800e61c <_fwalk_sglue+0x38>
 800e60c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e610:	3301      	adds	r3, #1
 800e612:	d003      	beq.n	800e61c <_fwalk_sglue+0x38>
 800e614:	4629      	mov	r1, r5
 800e616:	4638      	mov	r0, r7
 800e618:	47c0      	blx	r8
 800e61a:	4306      	orrs	r6, r0
 800e61c:	3568      	adds	r5, #104	@ 0x68
 800e61e:	e7e9      	b.n	800e5f4 <_fwalk_sglue+0x10>

0800e620 <siprintf>:
 800e620:	b40e      	push	{r1, r2, r3}
 800e622:	b500      	push	{lr}
 800e624:	b09c      	sub	sp, #112	@ 0x70
 800e626:	ab1d      	add	r3, sp, #116	@ 0x74
 800e628:	9002      	str	r0, [sp, #8]
 800e62a:	9006      	str	r0, [sp, #24]
 800e62c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e630:	4809      	ldr	r0, [pc, #36]	@ (800e658 <siprintf+0x38>)
 800e632:	9107      	str	r1, [sp, #28]
 800e634:	9104      	str	r1, [sp, #16]
 800e636:	4909      	ldr	r1, [pc, #36]	@ (800e65c <siprintf+0x3c>)
 800e638:	f853 2b04 	ldr.w	r2, [r3], #4
 800e63c:	9105      	str	r1, [sp, #20]
 800e63e:	6800      	ldr	r0, [r0, #0]
 800e640:	9301      	str	r3, [sp, #4]
 800e642:	a902      	add	r1, sp, #8
 800e644:	f000 faaa 	bl	800eb9c <_svfiprintf_r>
 800e648:	9b02      	ldr	r3, [sp, #8]
 800e64a:	2200      	movs	r2, #0
 800e64c:	701a      	strb	r2, [r3, #0]
 800e64e:	b01c      	add	sp, #112	@ 0x70
 800e650:	f85d eb04 	ldr.w	lr, [sp], #4
 800e654:	b003      	add	sp, #12
 800e656:	4770      	bx	lr
 800e658:	20000064 	.word	0x20000064
 800e65c:	ffff0208 	.word	0xffff0208

0800e660 <__sread>:
 800e660:	b510      	push	{r4, lr}
 800e662:	460c      	mov	r4, r1
 800e664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e668:	f000 f8be 	bl	800e7e8 <_read_r>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	bfab      	itete	ge
 800e670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e672:	89a3      	ldrhlt	r3, [r4, #12]
 800e674:	181b      	addge	r3, r3, r0
 800e676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e67a:	bfac      	ite	ge
 800e67c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e67e:	81a3      	strhlt	r3, [r4, #12]
 800e680:	bd10      	pop	{r4, pc}

0800e682 <__swrite>:
 800e682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e686:	461f      	mov	r7, r3
 800e688:	898b      	ldrh	r3, [r1, #12]
 800e68a:	05db      	lsls	r3, r3, #23
 800e68c:	4605      	mov	r5, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	4616      	mov	r6, r2
 800e692:	d505      	bpl.n	800e6a0 <__swrite+0x1e>
 800e694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e698:	2302      	movs	r3, #2
 800e69a:	2200      	movs	r2, #0
 800e69c:	f000 f892 	bl	800e7c4 <_lseek_r>
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6aa:	81a3      	strh	r3, [r4, #12]
 800e6ac:	4632      	mov	r2, r6
 800e6ae:	463b      	mov	r3, r7
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b6:	f000 b8a9 	b.w	800e80c <_write_r>

0800e6ba <__sseek>:
 800e6ba:	b510      	push	{r4, lr}
 800e6bc:	460c      	mov	r4, r1
 800e6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c2:	f000 f87f 	bl	800e7c4 <_lseek_r>
 800e6c6:	1c43      	adds	r3, r0, #1
 800e6c8:	89a3      	ldrh	r3, [r4, #12]
 800e6ca:	bf15      	itete	ne
 800e6cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e6ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e6d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e6d6:	81a3      	strheq	r3, [r4, #12]
 800e6d8:	bf18      	it	ne
 800e6da:	81a3      	strhne	r3, [r4, #12]
 800e6dc:	bd10      	pop	{r4, pc}

0800e6de <__sclose>:
 800e6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e2:	f000 b809 	b.w	800e6f8 <_close_r>

0800e6e6 <memset>:
 800e6e6:	4402      	add	r2, r0
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d100      	bne.n	800e6f0 <memset+0xa>
 800e6ee:	4770      	bx	lr
 800e6f0:	f803 1b01 	strb.w	r1, [r3], #1
 800e6f4:	e7f9      	b.n	800e6ea <memset+0x4>
	...

0800e6f8 <_close_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d06      	ldr	r5, [pc, #24]	@ (800e714 <_close_r+0x1c>)
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	4604      	mov	r4, r0
 800e700:	4608      	mov	r0, r1
 800e702:	602b      	str	r3, [r5, #0]
 800e704:	f7f6 ff1c 	bl	8005540 <_close>
 800e708:	1c43      	adds	r3, r0, #1
 800e70a:	d102      	bne.n	800e712 <_close_r+0x1a>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	b103      	cbz	r3, 800e712 <_close_r+0x1a>
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	bd38      	pop	{r3, r4, r5, pc}
 800e714:	20004d5c 	.word	0x20004d5c

0800e718 <_reclaim_reent>:
 800e718:	4b29      	ldr	r3, [pc, #164]	@ (800e7c0 <_reclaim_reent+0xa8>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4283      	cmp	r3, r0
 800e71e:	b570      	push	{r4, r5, r6, lr}
 800e720:	4604      	mov	r4, r0
 800e722:	d04b      	beq.n	800e7bc <_reclaim_reent+0xa4>
 800e724:	69c3      	ldr	r3, [r0, #28]
 800e726:	b1ab      	cbz	r3, 800e754 <_reclaim_reent+0x3c>
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	b16b      	cbz	r3, 800e748 <_reclaim_reent+0x30>
 800e72c:	2500      	movs	r5, #0
 800e72e:	69e3      	ldr	r3, [r4, #28]
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	5959      	ldr	r1, [r3, r5]
 800e734:	2900      	cmp	r1, #0
 800e736:	d13b      	bne.n	800e7b0 <_reclaim_reent+0x98>
 800e738:	3504      	adds	r5, #4
 800e73a:	2d80      	cmp	r5, #128	@ 0x80
 800e73c:	d1f7      	bne.n	800e72e <_reclaim_reent+0x16>
 800e73e:	69e3      	ldr	r3, [r4, #28]
 800e740:	4620      	mov	r0, r4
 800e742:	68d9      	ldr	r1, [r3, #12]
 800e744:	f000 f8ce 	bl	800e8e4 <_free_r>
 800e748:	69e3      	ldr	r3, [r4, #28]
 800e74a:	6819      	ldr	r1, [r3, #0]
 800e74c:	b111      	cbz	r1, 800e754 <_reclaim_reent+0x3c>
 800e74e:	4620      	mov	r0, r4
 800e750:	f000 f8c8 	bl	800e8e4 <_free_r>
 800e754:	6961      	ldr	r1, [r4, #20]
 800e756:	b111      	cbz	r1, 800e75e <_reclaim_reent+0x46>
 800e758:	4620      	mov	r0, r4
 800e75a:	f000 f8c3 	bl	800e8e4 <_free_r>
 800e75e:	69e1      	ldr	r1, [r4, #28]
 800e760:	b111      	cbz	r1, 800e768 <_reclaim_reent+0x50>
 800e762:	4620      	mov	r0, r4
 800e764:	f000 f8be 	bl	800e8e4 <_free_r>
 800e768:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e76a:	b111      	cbz	r1, 800e772 <_reclaim_reent+0x5a>
 800e76c:	4620      	mov	r0, r4
 800e76e:	f000 f8b9 	bl	800e8e4 <_free_r>
 800e772:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e774:	b111      	cbz	r1, 800e77c <_reclaim_reent+0x64>
 800e776:	4620      	mov	r0, r4
 800e778:	f000 f8b4 	bl	800e8e4 <_free_r>
 800e77c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e77e:	b111      	cbz	r1, 800e786 <_reclaim_reent+0x6e>
 800e780:	4620      	mov	r0, r4
 800e782:	f000 f8af 	bl	800e8e4 <_free_r>
 800e786:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e788:	b111      	cbz	r1, 800e790 <_reclaim_reent+0x78>
 800e78a:	4620      	mov	r0, r4
 800e78c:	f000 f8aa 	bl	800e8e4 <_free_r>
 800e790:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e792:	b111      	cbz	r1, 800e79a <_reclaim_reent+0x82>
 800e794:	4620      	mov	r0, r4
 800e796:	f000 f8a5 	bl	800e8e4 <_free_r>
 800e79a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e79c:	b111      	cbz	r1, 800e7a4 <_reclaim_reent+0x8c>
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f000 f8a0 	bl	800e8e4 <_free_r>
 800e7a4:	6a23      	ldr	r3, [r4, #32]
 800e7a6:	b14b      	cbz	r3, 800e7bc <_reclaim_reent+0xa4>
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7ae:	4718      	bx	r3
 800e7b0:	680e      	ldr	r6, [r1, #0]
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 f896 	bl	800e8e4 <_free_r>
 800e7b8:	4631      	mov	r1, r6
 800e7ba:	e7bb      	b.n	800e734 <_reclaim_reent+0x1c>
 800e7bc:	bd70      	pop	{r4, r5, r6, pc}
 800e7be:	bf00      	nop
 800e7c0:	20000064 	.word	0x20000064

0800e7c4 <_lseek_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4d07      	ldr	r5, [pc, #28]	@ (800e7e4 <_lseek_r+0x20>)
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	4608      	mov	r0, r1
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	602a      	str	r2, [r5, #0]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	f7f6 fedb 	bl	800558e <_lseek>
 800e7d8:	1c43      	adds	r3, r0, #1
 800e7da:	d102      	bne.n	800e7e2 <_lseek_r+0x1e>
 800e7dc:	682b      	ldr	r3, [r5, #0]
 800e7de:	b103      	cbz	r3, 800e7e2 <_lseek_r+0x1e>
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	bd38      	pop	{r3, r4, r5, pc}
 800e7e4:	20004d5c 	.word	0x20004d5c

0800e7e8 <_read_r>:
 800e7e8:	b538      	push	{r3, r4, r5, lr}
 800e7ea:	4d07      	ldr	r5, [pc, #28]	@ (800e808 <_read_r+0x20>)
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	4608      	mov	r0, r1
 800e7f0:	4611      	mov	r1, r2
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	602a      	str	r2, [r5, #0]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f7f6 fe69 	bl	80054ce <_read>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_read_r+0x1e>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_read_r+0x1e>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	20004d5c 	.word	0x20004d5c

0800e80c <_write_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	@ (800e82c <_write_r+0x20>)
 800e810:	4604      	mov	r4, r0
 800e812:	4608      	mov	r0, r1
 800e814:	4611      	mov	r1, r2
 800e816:	2200      	movs	r2, #0
 800e818:	602a      	str	r2, [r5, #0]
 800e81a:	461a      	mov	r2, r3
 800e81c:	f7f6 fe74 	bl	8005508 <_write>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	d102      	bne.n	800e82a <_write_r+0x1e>
 800e824:	682b      	ldr	r3, [r5, #0]
 800e826:	b103      	cbz	r3, 800e82a <_write_r+0x1e>
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	bd38      	pop	{r3, r4, r5, pc}
 800e82c:	20004d5c 	.word	0x20004d5c

0800e830 <__errno>:
 800e830:	4b01      	ldr	r3, [pc, #4]	@ (800e838 <__errno+0x8>)
 800e832:	6818      	ldr	r0, [r3, #0]
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	20000064 	.word	0x20000064

0800e83c <__libc_init_array>:
 800e83c:	b570      	push	{r4, r5, r6, lr}
 800e83e:	4d0d      	ldr	r5, [pc, #52]	@ (800e874 <__libc_init_array+0x38>)
 800e840:	4c0d      	ldr	r4, [pc, #52]	@ (800e878 <__libc_init_array+0x3c>)
 800e842:	1b64      	subs	r4, r4, r5
 800e844:	10a4      	asrs	r4, r4, #2
 800e846:	2600      	movs	r6, #0
 800e848:	42a6      	cmp	r6, r4
 800e84a:	d109      	bne.n	800e860 <__libc_init_array+0x24>
 800e84c:	4d0b      	ldr	r5, [pc, #44]	@ (800e87c <__libc_init_array+0x40>)
 800e84e:	4c0c      	ldr	r4, [pc, #48]	@ (800e880 <__libc_init_array+0x44>)
 800e850:	f000 fff0 	bl	800f834 <_init>
 800e854:	1b64      	subs	r4, r4, r5
 800e856:	10a4      	asrs	r4, r4, #2
 800e858:	2600      	movs	r6, #0
 800e85a:	42a6      	cmp	r6, r4
 800e85c:	d105      	bne.n	800e86a <__libc_init_array+0x2e>
 800e85e:	bd70      	pop	{r4, r5, r6, pc}
 800e860:	f855 3b04 	ldr.w	r3, [r5], #4
 800e864:	4798      	blx	r3
 800e866:	3601      	adds	r6, #1
 800e868:	e7ee      	b.n	800e848 <__libc_init_array+0xc>
 800e86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e86e:	4798      	blx	r3
 800e870:	3601      	adds	r6, #1
 800e872:	e7f2      	b.n	800e85a <__libc_init_array+0x1e>
 800e874:	0801dde0 	.word	0x0801dde0
 800e878:	0801dde0 	.word	0x0801dde0
 800e87c:	0801dde0 	.word	0x0801dde0
 800e880:	0801dde4 	.word	0x0801dde4

0800e884 <__retarget_lock_init_recursive>:
 800e884:	4770      	bx	lr

0800e886 <__retarget_lock_acquire_recursive>:
 800e886:	4770      	bx	lr

0800e888 <__retarget_lock_release_recursive>:
 800e888:	4770      	bx	lr

0800e88a <memcpy>:
 800e88a:	440a      	add	r2, r1
 800e88c:	4291      	cmp	r1, r2
 800e88e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e892:	d100      	bne.n	800e896 <memcpy+0xc>
 800e894:	4770      	bx	lr
 800e896:	b510      	push	{r4, lr}
 800e898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e89c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8a0:	4291      	cmp	r1, r2
 800e8a2:	d1f9      	bne.n	800e898 <memcpy+0xe>
 800e8a4:	bd10      	pop	{r4, pc}
	...

0800e8a8 <__assert_func>:
 800e8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8aa:	4614      	mov	r4, r2
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	4b09      	ldr	r3, [pc, #36]	@ (800e8d4 <__assert_func+0x2c>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	68d8      	ldr	r0, [r3, #12]
 800e8b6:	b954      	cbnz	r4, 800e8ce <__assert_func+0x26>
 800e8b8:	4b07      	ldr	r3, [pc, #28]	@ (800e8d8 <__assert_func+0x30>)
 800e8ba:	461c      	mov	r4, r3
 800e8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8c0:	9100      	str	r1, [sp, #0]
 800e8c2:	462b      	mov	r3, r5
 800e8c4:	4905      	ldr	r1, [pc, #20]	@ (800e8dc <__assert_func+0x34>)
 800e8c6:	f000 fc9f 	bl	800f208 <fiprintf>
 800e8ca:	f000 fcd9 	bl	800f280 <abort>
 800e8ce:	4b04      	ldr	r3, [pc, #16]	@ (800e8e0 <__assert_func+0x38>)
 800e8d0:	e7f4      	b.n	800e8bc <__assert_func+0x14>
 800e8d2:	bf00      	nop
 800e8d4:	20000064 	.word	0x20000064
 800e8d8:	0801dda2 	.word	0x0801dda2
 800e8dc:	0801dd74 	.word	0x0801dd74
 800e8e0:	0801dd67 	.word	0x0801dd67

0800e8e4 <_free_r>:
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	4605      	mov	r5, r0
 800e8e8:	2900      	cmp	r1, #0
 800e8ea:	d041      	beq.n	800e970 <_free_r+0x8c>
 800e8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f0:	1f0c      	subs	r4, r1, #4
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	bfb8      	it	lt
 800e8f6:	18e4      	addlt	r4, r4, r3
 800e8f8:	f000 f8e8 	bl	800eacc <__malloc_lock>
 800e8fc:	4a1d      	ldr	r2, [pc, #116]	@ (800e974 <_free_r+0x90>)
 800e8fe:	6813      	ldr	r3, [r2, #0]
 800e900:	b933      	cbnz	r3, 800e910 <_free_r+0x2c>
 800e902:	6063      	str	r3, [r4, #4]
 800e904:	6014      	str	r4, [r2, #0]
 800e906:	4628      	mov	r0, r5
 800e908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e90c:	f000 b8e4 	b.w	800ead8 <__malloc_unlock>
 800e910:	42a3      	cmp	r3, r4
 800e912:	d908      	bls.n	800e926 <_free_r+0x42>
 800e914:	6820      	ldr	r0, [r4, #0]
 800e916:	1821      	adds	r1, r4, r0
 800e918:	428b      	cmp	r3, r1
 800e91a:	bf01      	itttt	eq
 800e91c:	6819      	ldreq	r1, [r3, #0]
 800e91e:	685b      	ldreq	r3, [r3, #4]
 800e920:	1809      	addeq	r1, r1, r0
 800e922:	6021      	streq	r1, [r4, #0]
 800e924:	e7ed      	b.n	800e902 <_free_r+0x1e>
 800e926:	461a      	mov	r2, r3
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	b10b      	cbz	r3, 800e930 <_free_r+0x4c>
 800e92c:	42a3      	cmp	r3, r4
 800e92e:	d9fa      	bls.n	800e926 <_free_r+0x42>
 800e930:	6811      	ldr	r1, [r2, #0]
 800e932:	1850      	adds	r0, r2, r1
 800e934:	42a0      	cmp	r0, r4
 800e936:	d10b      	bne.n	800e950 <_free_r+0x6c>
 800e938:	6820      	ldr	r0, [r4, #0]
 800e93a:	4401      	add	r1, r0
 800e93c:	1850      	adds	r0, r2, r1
 800e93e:	4283      	cmp	r3, r0
 800e940:	6011      	str	r1, [r2, #0]
 800e942:	d1e0      	bne.n	800e906 <_free_r+0x22>
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	6053      	str	r3, [r2, #4]
 800e94a:	4408      	add	r0, r1
 800e94c:	6010      	str	r0, [r2, #0]
 800e94e:	e7da      	b.n	800e906 <_free_r+0x22>
 800e950:	d902      	bls.n	800e958 <_free_r+0x74>
 800e952:	230c      	movs	r3, #12
 800e954:	602b      	str	r3, [r5, #0]
 800e956:	e7d6      	b.n	800e906 <_free_r+0x22>
 800e958:	6820      	ldr	r0, [r4, #0]
 800e95a:	1821      	adds	r1, r4, r0
 800e95c:	428b      	cmp	r3, r1
 800e95e:	bf04      	itt	eq
 800e960:	6819      	ldreq	r1, [r3, #0]
 800e962:	685b      	ldreq	r3, [r3, #4]
 800e964:	6063      	str	r3, [r4, #4]
 800e966:	bf04      	itt	eq
 800e968:	1809      	addeq	r1, r1, r0
 800e96a:	6021      	streq	r1, [r4, #0]
 800e96c:	6054      	str	r4, [r2, #4]
 800e96e:	e7ca      	b.n	800e906 <_free_r+0x22>
 800e970:	bd38      	pop	{r3, r4, r5, pc}
 800e972:	bf00      	nop
 800e974:	20004d68 	.word	0x20004d68

0800e978 <malloc>:
 800e978:	4b02      	ldr	r3, [pc, #8]	@ (800e984 <malloc+0xc>)
 800e97a:	4601      	mov	r1, r0
 800e97c:	6818      	ldr	r0, [r3, #0]
 800e97e:	f000 b825 	b.w	800e9cc <_malloc_r>
 800e982:	bf00      	nop
 800e984:	20000064 	.word	0x20000064

0800e988 <sbrk_aligned>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	4e0f      	ldr	r6, [pc, #60]	@ (800e9c8 <sbrk_aligned+0x40>)
 800e98c:	460c      	mov	r4, r1
 800e98e:	6831      	ldr	r1, [r6, #0]
 800e990:	4605      	mov	r5, r0
 800e992:	b911      	cbnz	r1, 800e99a <sbrk_aligned+0x12>
 800e994:	f000 fc64 	bl	800f260 <_sbrk_r>
 800e998:	6030      	str	r0, [r6, #0]
 800e99a:	4621      	mov	r1, r4
 800e99c:	4628      	mov	r0, r5
 800e99e:	f000 fc5f 	bl	800f260 <_sbrk_r>
 800e9a2:	1c43      	adds	r3, r0, #1
 800e9a4:	d103      	bne.n	800e9ae <sbrk_aligned+0x26>
 800e9a6:	f04f 34ff 	mov.w	r4, #4294967295
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	bd70      	pop	{r4, r5, r6, pc}
 800e9ae:	1cc4      	adds	r4, r0, #3
 800e9b0:	f024 0403 	bic.w	r4, r4, #3
 800e9b4:	42a0      	cmp	r0, r4
 800e9b6:	d0f8      	beq.n	800e9aa <sbrk_aligned+0x22>
 800e9b8:	1a21      	subs	r1, r4, r0
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	f000 fc50 	bl	800f260 <_sbrk_r>
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	d1f2      	bne.n	800e9aa <sbrk_aligned+0x22>
 800e9c4:	e7ef      	b.n	800e9a6 <sbrk_aligned+0x1e>
 800e9c6:	bf00      	nop
 800e9c8:	20004d64 	.word	0x20004d64

0800e9cc <_malloc_r>:
 800e9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d0:	1ccd      	adds	r5, r1, #3
 800e9d2:	f025 0503 	bic.w	r5, r5, #3
 800e9d6:	3508      	adds	r5, #8
 800e9d8:	2d0c      	cmp	r5, #12
 800e9da:	bf38      	it	cc
 800e9dc:	250c      	movcc	r5, #12
 800e9de:	2d00      	cmp	r5, #0
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	db01      	blt.n	800e9e8 <_malloc_r+0x1c>
 800e9e4:	42a9      	cmp	r1, r5
 800e9e6:	d904      	bls.n	800e9f2 <_malloc_r+0x26>
 800e9e8:	230c      	movs	r3, #12
 800e9ea:	6033      	str	r3, [r6, #0]
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eac8 <_malloc_r+0xfc>
 800e9f6:	f000 f869 	bl	800eacc <__malloc_lock>
 800e9fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e9fe:	461c      	mov	r4, r3
 800ea00:	bb44      	cbnz	r4, 800ea54 <_malloc_r+0x88>
 800ea02:	4629      	mov	r1, r5
 800ea04:	4630      	mov	r0, r6
 800ea06:	f7ff ffbf 	bl	800e988 <sbrk_aligned>
 800ea0a:	1c43      	adds	r3, r0, #1
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	d158      	bne.n	800eac2 <_malloc_r+0xf6>
 800ea10:	f8d8 4000 	ldr.w	r4, [r8]
 800ea14:	4627      	mov	r7, r4
 800ea16:	2f00      	cmp	r7, #0
 800ea18:	d143      	bne.n	800eaa2 <_malloc_r+0xd6>
 800ea1a:	2c00      	cmp	r4, #0
 800ea1c:	d04b      	beq.n	800eab6 <_malloc_r+0xea>
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	4639      	mov	r1, r7
 800ea22:	4630      	mov	r0, r6
 800ea24:	eb04 0903 	add.w	r9, r4, r3
 800ea28:	f000 fc1a 	bl	800f260 <_sbrk_r>
 800ea2c:	4581      	cmp	r9, r0
 800ea2e:	d142      	bne.n	800eab6 <_malloc_r+0xea>
 800ea30:	6821      	ldr	r1, [r4, #0]
 800ea32:	1a6d      	subs	r5, r5, r1
 800ea34:	4629      	mov	r1, r5
 800ea36:	4630      	mov	r0, r6
 800ea38:	f7ff ffa6 	bl	800e988 <sbrk_aligned>
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	d03a      	beq.n	800eab6 <_malloc_r+0xea>
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	442b      	add	r3, r5
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	f8d8 3000 	ldr.w	r3, [r8]
 800ea4a:	685a      	ldr	r2, [r3, #4]
 800ea4c:	bb62      	cbnz	r2, 800eaa8 <_malloc_r+0xdc>
 800ea4e:	f8c8 7000 	str.w	r7, [r8]
 800ea52:	e00f      	b.n	800ea74 <_malloc_r+0xa8>
 800ea54:	6822      	ldr	r2, [r4, #0]
 800ea56:	1b52      	subs	r2, r2, r5
 800ea58:	d420      	bmi.n	800ea9c <_malloc_r+0xd0>
 800ea5a:	2a0b      	cmp	r2, #11
 800ea5c:	d917      	bls.n	800ea8e <_malloc_r+0xc2>
 800ea5e:	1961      	adds	r1, r4, r5
 800ea60:	42a3      	cmp	r3, r4
 800ea62:	6025      	str	r5, [r4, #0]
 800ea64:	bf18      	it	ne
 800ea66:	6059      	strne	r1, [r3, #4]
 800ea68:	6863      	ldr	r3, [r4, #4]
 800ea6a:	bf08      	it	eq
 800ea6c:	f8c8 1000 	streq.w	r1, [r8]
 800ea70:	5162      	str	r2, [r4, r5]
 800ea72:	604b      	str	r3, [r1, #4]
 800ea74:	4630      	mov	r0, r6
 800ea76:	f000 f82f 	bl	800ead8 <__malloc_unlock>
 800ea7a:	f104 000b 	add.w	r0, r4, #11
 800ea7e:	1d23      	adds	r3, r4, #4
 800ea80:	f020 0007 	bic.w	r0, r0, #7
 800ea84:	1ac2      	subs	r2, r0, r3
 800ea86:	bf1c      	itt	ne
 800ea88:	1a1b      	subne	r3, r3, r0
 800ea8a:	50a3      	strne	r3, [r4, r2]
 800ea8c:	e7af      	b.n	800e9ee <_malloc_r+0x22>
 800ea8e:	6862      	ldr	r2, [r4, #4]
 800ea90:	42a3      	cmp	r3, r4
 800ea92:	bf0c      	ite	eq
 800ea94:	f8c8 2000 	streq.w	r2, [r8]
 800ea98:	605a      	strne	r2, [r3, #4]
 800ea9a:	e7eb      	b.n	800ea74 <_malloc_r+0xa8>
 800ea9c:	4623      	mov	r3, r4
 800ea9e:	6864      	ldr	r4, [r4, #4]
 800eaa0:	e7ae      	b.n	800ea00 <_malloc_r+0x34>
 800eaa2:	463c      	mov	r4, r7
 800eaa4:	687f      	ldr	r7, [r7, #4]
 800eaa6:	e7b6      	b.n	800ea16 <_malloc_r+0x4a>
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	42a3      	cmp	r3, r4
 800eaae:	d1fb      	bne.n	800eaa8 <_malloc_r+0xdc>
 800eab0:	2300      	movs	r3, #0
 800eab2:	6053      	str	r3, [r2, #4]
 800eab4:	e7de      	b.n	800ea74 <_malloc_r+0xa8>
 800eab6:	230c      	movs	r3, #12
 800eab8:	6033      	str	r3, [r6, #0]
 800eaba:	4630      	mov	r0, r6
 800eabc:	f000 f80c 	bl	800ead8 <__malloc_unlock>
 800eac0:	e794      	b.n	800e9ec <_malloc_r+0x20>
 800eac2:	6005      	str	r5, [r0, #0]
 800eac4:	e7d6      	b.n	800ea74 <_malloc_r+0xa8>
 800eac6:	bf00      	nop
 800eac8:	20004d68 	.word	0x20004d68

0800eacc <__malloc_lock>:
 800eacc:	4801      	ldr	r0, [pc, #4]	@ (800ead4 <__malloc_lock+0x8>)
 800eace:	f7ff beda 	b.w	800e886 <__retarget_lock_acquire_recursive>
 800ead2:	bf00      	nop
 800ead4:	20004d60 	.word	0x20004d60

0800ead8 <__malloc_unlock>:
 800ead8:	4801      	ldr	r0, [pc, #4]	@ (800eae0 <__malloc_unlock+0x8>)
 800eada:	f7ff bed5 	b.w	800e888 <__retarget_lock_release_recursive>
 800eade:	bf00      	nop
 800eae0:	20004d60 	.word	0x20004d60

0800eae4 <__ssputs_r>:
 800eae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae8:	688e      	ldr	r6, [r1, #8]
 800eaea:	461f      	mov	r7, r3
 800eaec:	42be      	cmp	r6, r7
 800eaee:	680b      	ldr	r3, [r1, #0]
 800eaf0:	4682      	mov	sl, r0
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	4690      	mov	r8, r2
 800eaf6:	d82d      	bhi.n	800eb54 <__ssputs_r+0x70>
 800eaf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eafc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb00:	d026      	beq.n	800eb50 <__ssputs_r+0x6c>
 800eb02:	6965      	ldr	r5, [r4, #20]
 800eb04:	6909      	ldr	r1, [r1, #16]
 800eb06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb0a:	eba3 0901 	sub.w	r9, r3, r1
 800eb0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb12:	1c7b      	adds	r3, r7, #1
 800eb14:	444b      	add	r3, r9
 800eb16:	106d      	asrs	r5, r5, #1
 800eb18:	429d      	cmp	r5, r3
 800eb1a:	bf38      	it	cc
 800eb1c:	461d      	movcc	r5, r3
 800eb1e:	0553      	lsls	r3, r2, #21
 800eb20:	d527      	bpl.n	800eb72 <__ssputs_r+0x8e>
 800eb22:	4629      	mov	r1, r5
 800eb24:	f7ff ff52 	bl	800e9cc <_malloc_r>
 800eb28:	4606      	mov	r6, r0
 800eb2a:	b360      	cbz	r0, 800eb86 <__ssputs_r+0xa2>
 800eb2c:	6921      	ldr	r1, [r4, #16]
 800eb2e:	464a      	mov	r2, r9
 800eb30:	f7ff feab 	bl	800e88a <memcpy>
 800eb34:	89a3      	ldrh	r3, [r4, #12]
 800eb36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb3e:	81a3      	strh	r3, [r4, #12]
 800eb40:	6126      	str	r6, [r4, #16]
 800eb42:	6165      	str	r5, [r4, #20]
 800eb44:	444e      	add	r6, r9
 800eb46:	eba5 0509 	sub.w	r5, r5, r9
 800eb4a:	6026      	str	r6, [r4, #0]
 800eb4c:	60a5      	str	r5, [r4, #8]
 800eb4e:	463e      	mov	r6, r7
 800eb50:	42be      	cmp	r6, r7
 800eb52:	d900      	bls.n	800eb56 <__ssputs_r+0x72>
 800eb54:	463e      	mov	r6, r7
 800eb56:	6820      	ldr	r0, [r4, #0]
 800eb58:	4632      	mov	r2, r6
 800eb5a:	4641      	mov	r1, r8
 800eb5c:	f000 fb66 	bl	800f22c <memmove>
 800eb60:	68a3      	ldr	r3, [r4, #8]
 800eb62:	1b9b      	subs	r3, r3, r6
 800eb64:	60a3      	str	r3, [r4, #8]
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	4433      	add	r3, r6
 800eb6a:	6023      	str	r3, [r4, #0]
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb72:	462a      	mov	r2, r5
 800eb74:	f000 fb8b 	bl	800f28e <_realloc_r>
 800eb78:	4606      	mov	r6, r0
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d1e0      	bne.n	800eb40 <__ssputs_r+0x5c>
 800eb7e:	6921      	ldr	r1, [r4, #16]
 800eb80:	4650      	mov	r0, sl
 800eb82:	f7ff feaf 	bl	800e8e4 <_free_r>
 800eb86:	230c      	movs	r3, #12
 800eb88:	f8ca 3000 	str.w	r3, [sl]
 800eb8c:	89a3      	ldrh	r3, [r4, #12]
 800eb8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb92:	81a3      	strh	r3, [r4, #12]
 800eb94:	f04f 30ff 	mov.w	r0, #4294967295
 800eb98:	e7e9      	b.n	800eb6e <__ssputs_r+0x8a>
	...

0800eb9c <_svfiprintf_r>:
 800eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba0:	4698      	mov	r8, r3
 800eba2:	898b      	ldrh	r3, [r1, #12]
 800eba4:	061b      	lsls	r3, r3, #24
 800eba6:	b09d      	sub	sp, #116	@ 0x74
 800eba8:	4607      	mov	r7, r0
 800ebaa:	460d      	mov	r5, r1
 800ebac:	4614      	mov	r4, r2
 800ebae:	d510      	bpl.n	800ebd2 <_svfiprintf_r+0x36>
 800ebb0:	690b      	ldr	r3, [r1, #16]
 800ebb2:	b973      	cbnz	r3, 800ebd2 <_svfiprintf_r+0x36>
 800ebb4:	2140      	movs	r1, #64	@ 0x40
 800ebb6:	f7ff ff09 	bl	800e9cc <_malloc_r>
 800ebba:	6028      	str	r0, [r5, #0]
 800ebbc:	6128      	str	r0, [r5, #16]
 800ebbe:	b930      	cbnz	r0, 800ebce <_svfiprintf_r+0x32>
 800ebc0:	230c      	movs	r3, #12
 800ebc2:	603b      	str	r3, [r7, #0]
 800ebc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc8:	b01d      	add	sp, #116	@ 0x74
 800ebca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebce:	2340      	movs	r3, #64	@ 0x40
 800ebd0:	616b      	str	r3, [r5, #20]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebd6:	2320      	movs	r3, #32
 800ebd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ebdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebe0:	2330      	movs	r3, #48	@ 0x30
 800ebe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ed80 <_svfiprintf_r+0x1e4>
 800ebe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebea:	f04f 0901 	mov.w	r9, #1
 800ebee:	4623      	mov	r3, r4
 800ebf0:	469a      	mov	sl, r3
 800ebf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebf6:	b10a      	cbz	r2, 800ebfc <_svfiprintf_r+0x60>
 800ebf8:	2a25      	cmp	r2, #37	@ 0x25
 800ebfa:	d1f9      	bne.n	800ebf0 <_svfiprintf_r+0x54>
 800ebfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ec00:	d00b      	beq.n	800ec1a <_svfiprintf_r+0x7e>
 800ec02:	465b      	mov	r3, fp
 800ec04:	4622      	mov	r2, r4
 800ec06:	4629      	mov	r1, r5
 800ec08:	4638      	mov	r0, r7
 800ec0a:	f7ff ff6b 	bl	800eae4 <__ssputs_r>
 800ec0e:	3001      	adds	r0, #1
 800ec10:	f000 80a7 	beq.w	800ed62 <_svfiprintf_r+0x1c6>
 800ec14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec16:	445a      	add	r2, fp
 800ec18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 809f 	beq.w	800ed62 <_svfiprintf_r+0x1c6>
 800ec24:	2300      	movs	r3, #0
 800ec26:	f04f 32ff 	mov.w	r2, #4294967295
 800ec2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec2e:	f10a 0a01 	add.w	sl, sl, #1
 800ec32:	9304      	str	r3, [sp, #16]
 800ec34:	9307      	str	r3, [sp, #28]
 800ec36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec3c:	4654      	mov	r4, sl
 800ec3e:	2205      	movs	r2, #5
 800ec40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec44:	484e      	ldr	r0, [pc, #312]	@ (800ed80 <_svfiprintf_r+0x1e4>)
 800ec46:	f7f1 fae3 	bl	8000210 <memchr>
 800ec4a:	9a04      	ldr	r2, [sp, #16]
 800ec4c:	b9d8      	cbnz	r0, 800ec86 <_svfiprintf_r+0xea>
 800ec4e:	06d0      	lsls	r0, r2, #27
 800ec50:	bf44      	itt	mi
 800ec52:	2320      	movmi	r3, #32
 800ec54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec58:	0711      	lsls	r1, r2, #28
 800ec5a:	bf44      	itt	mi
 800ec5c:	232b      	movmi	r3, #43	@ 0x2b
 800ec5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec62:	f89a 3000 	ldrb.w	r3, [sl]
 800ec66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec68:	d015      	beq.n	800ec96 <_svfiprintf_r+0xfa>
 800ec6a:	9a07      	ldr	r2, [sp, #28]
 800ec6c:	4654      	mov	r4, sl
 800ec6e:	2000      	movs	r0, #0
 800ec70:	f04f 0c0a 	mov.w	ip, #10
 800ec74:	4621      	mov	r1, r4
 800ec76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec7a:	3b30      	subs	r3, #48	@ 0x30
 800ec7c:	2b09      	cmp	r3, #9
 800ec7e:	d94b      	bls.n	800ed18 <_svfiprintf_r+0x17c>
 800ec80:	b1b0      	cbz	r0, 800ecb0 <_svfiprintf_r+0x114>
 800ec82:	9207      	str	r2, [sp, #28]
 800ec84:	e014      	b.n	800ecb0 <_svfiprintf_r+0x114>
 800ec86:	eba0 0308 	sub.w	r3, r0, r8
 800ec8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	9304      	str	r3, [sp, #16]
 800ec92:	46a2      	mov	sl, r4
 800ec94:	e7d2      	b.n	800ec3c <_svfiprintf_r+0xa0>
 800ec96:	9b03      	ldr	r3, [sp, #12]
 800ec98:	1d19      	adds	r1, r3, #4
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	9103      	str	r1, [sp, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	bfbb      	ittet	lt
 800eca2:	425b      	neglt	r3, r3
 800eca4:	f042 0202 	orrlt.w	r2, r2, #2
 800eca8:	9307      	strge	r3, [sp, #28]
 800ecaa:	9307      	strlt	r3, [sp, #28]
 800ecac:	bfb8      	it	lt
 800ecae:	9204      	strlt	r2, [sp, #16]
 800ecb0:	7823      	ldrb	r3, [r4, #0]
 800ecb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecb4:	d10a      	bne.n	800eccc <_svfiprintf_r+0x130>
 800ecb6:	7863      	ldrb	r3, [r4, #1]
 800ecb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecba:	d132      	bne.n	800ed22 <_svfiprintf_r+0x186>
 800ecbc:	9b03      	ldr	r3, [sp, #12]
 800ecbe:	1d1a      	adds	r2, r3, #4
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	9203      	str	r2, [sp, #12]
 800ecc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecc8:	3402      	adds	r4, #2
 800ecca:	9305      	str	r3, [sp, #20]
 800eccc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ed90 <_svfiprintf_r+0x1f4>
 800ecd0:	7821      	ldrb	r1, [r4, #0]
 800ecd2:	2203      	movs	r2, #3
 800ecd4:	4650      	mov	r0, sl
 800ecd6:	f7f1 fa9b 	bl	8000210 <memchr>
 800ecda:	b138      	cbz	r0, 800ecec <_svfiprintf_r+0x150>
 800ecdc:	9b04      	ldr	r3, [sp, #16]
 800ecde:	eba0 000a 	sub.w	r0, r0, sl
 800ece2:	2240      	movs	r2, #64	@ 0x40
 800ece4:	4082      	lsls	r2, r0
 800ece6:	4313      	orrs	r3, r2
 800ece8:	3401      	adds	r4, #1
 800ecea:	9304      	str	r3, [sp, #16]
 800ecec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf0:	4824      	ldr	r0, [pc, #144]	@ (800ed84 <_svfiprintf_r+0x1e8>)
 800ecf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecf6:	2206      	movs	r2, #6
 800ecf8:	f7f1 fa8a 	bl	8000210 <memchr>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d036      	beq.n	800ed6e <_svfiprintf_r+0x1d2>
 800ed00:	4b21      	ldr	r3, [pc, #132]	@ (800ed88 <_svfiprintf_r+0x1ec>)
 800ed02:	bb1b      	cbnz	r3, 800ed4c <_svfiprintf_r+0x1b0>
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	3307      	adds	r3, #7
 800ed08:	f023 0307 	bic.w	r3, r3, #7
 800ed0c:	3308      	adds	r3, #8
 800ed0e:	9303      	str	r3, [sp, #12]
 800ed10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed12:	4433      	add	r3, r6
 800ed14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed16:	e76a      	b.n	800ebee <_svfiprintf_r+0x52>
 800ed18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed1c:	460c      	mov	r4, r1
 800ed1e:	2001      	movs	r0, #1
 800ed20:	e7a8      	b.n	800ec74 <_svfiprintf_r+0xd8>
 800ed22:	2300      	movs	r3, #0
 800ed24:	3401      	adds	r4, #1
 800ed26:	9305      	str	r3, [sp, #20]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	f04f 0c0a 	mov.w	ip, #10
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed34:	3a30      	subs	r2, #48	@ 0x30
 800ed36:	2a09      	cmp	r2, #9
 800ed38:	d903      	bls.n	800ed42 <_svfiprintf_r+0x1a6>
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d0c6      	beq.n	800eccc <_svfiprintf_r+0x130>
 800ed3e:	9105      	str	r1, [sp, #20]
 800ed40:	e7c4      	b.n	800eccc <_svfiprintf_r+0x130>
 800ed42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed46:	4604      	mov	r4, r0
 800ed48:	2301      	movs	r3, #1
 800ed4a:	e7f0      	b.n	800ed2e <_svfiprintf_r+0x192>
 800ed4c:	ab03      	add	r3, sp, #12
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	462a      	mov	r2, r5
 800ed52:	4b0e      	ldr	r3, [pc, #56]	@ (800ed8c <_svfiprintf_r+0x1f0>)
 800ed54:	a904      	add	r1, sp, #16
 800ed56:	4638      	mov	r0, r7
 800ed58:	f3af 8000 	nop.w
 800ed5c:	1c42      	adds	r2, r0, #1
 800ed5e:	4606      	mov	r6, r0
 800ed60:	d1d6      	bne.n	800ed10 <_svfiprintf_r+0x174>
 800ed62:	89ab      	ldrh	r3, [r5, #12]
 800ed64:	065b      	lsls	r3, r3, #25
 800ed66:	f53f af2d 	bmi.w	800ebc4 <_svfiprintf_r+0x28>
 800ed6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed6c:	e72c      	b.n	800ebc8 <_svfiprintf_r+0x2c>
 800ed6e:	ab03      	add	r3, sp, #12
 800ed70:	9300      	str	r3, [sp, #0]
 800ed72:	462a      	mov	r2, r5
 800ed74:	4b05      	ldr	r3, [pc, #20]	@ (800ed8c <_svfiprintf_r+0x1f0>)
 800ed76:	a904      	add	r1, sp, #16
 800ed78:	4638      	mov	r0, r7
 800ed7a:	f000 f879 	bl	800ee70 <_printf_i>
 800ed7e:	e7ed      	b.n	800ed5c <_svfiprintf_r+0x1c0>
 800ed80:	0801dda3 	.word	0x0801dda3
 800ed84:	0801ddad 	.word	0x0801ddad
 800ed88:	00000000 	.word	0x00000000
 800ed8c:	0800eae5 	.word	0x0800eae5
 800ed90:	0801dda9 	.word	0x0801dda9

0800ed94 <_printf_common>:
 800ed94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed98:	4616      	mov	r6, r2
 800ed9a:	4698      	mov	r8, r3
 800ed9c:	688a      	ldr	r2, [r1, #8]
 800ed9e:	690b      	ldr	r3, [r1, #16]
 800eda0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eda4:	4293      	cmp	r3, r2
 800eda6:	bfb8      	it	lt
 800eda8:	4613      	movlt	r3, r2
 800edaa:	6033      	str	r3, [r6, #0]
 800edac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800edb0:	4607      	mov	r7, r0
 800edb2:	460c      	mov	r4, r1
 800edb4:	b10a      	cbz	r2, 800edba <_printf_common+0x26>
 800edb6:	3301      	adds	r3, #1
 800edb8:	6033      	str	r3, [r6, #0]
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	0699      	lsls	r1, r3, #26
 800edbe:	bf42      	ittt	mi
 800edc0:	6833      	ldrmi	r3, [r6, #0]
 800edc2:	3302      	addmi	r3, #2
 800edc4:	6033      	strmi	r3, [r6, #0]
 800edc6:	6825      	ldr	r5, [r4, #0]
 800edc8:	f015 0506 	ands.w	r5, r5, #6
 800edcc:	d106      	bne.n	800eddc <_printf_common+0x48>
 800edce:	f104 0a19 	add.w	sl, r4, #25
 800edd2:	68e3      	ldr	r3, [r4, #12]
 800edd4:	6832      	ldr	r2, [r6, #0]
 800edd6:	1a9b      	subs	r3, r3, r2
 800edd8:	42ab      	cmp	r3, r5
 800edda:	dc26      	bgt.n	800ee2a <_printf_common+0x96>
 800eddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ede0:	6822      	ldr	r2, [r4, #0]
 800ede2:	3b00      	subs	r3, #0
 800ede4:	bf18      	it	ne
 800ede6:	2301      	movne	r3, #1
 800ede8:	0692      	lsls	r2, r2, #26
 800edea:	d42b      	bmi.n	800ee44 <_printf_common+0xb0>
 800edec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800edf0:	4641      	mov	r1, r8
 800edf2:	4638      	mov	r0, r7
 800edf4:	47c8      	blx	r9
 800edf6:	3001      	adds	r0, #1
 800edf8:	d01e      	beq.n	800ee38 <_printf_common+0xa4>
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	6922      	ldr	r2, [r4, #16]
 800edfe:	f003 0306 	and.w	r3, r3, #6
 800ee02:	2b04      	cmp	r3, #4
 800ee04:	bf02      	ittt	eq
 800ee06:	68e5      	ldreq	r5, [r4, #12]
 800ee08:	6833      	ldreq	r3, [r6, #0]
 800ee0a:	1aed      	subeq	r5, r5, r3
 800ee0c:	68a3      	ldr	r3, [r4, #8]
 800ee0e:	bf0c      	ite	eq
 800ee10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee14:	2500      	movne	r5, #0
 800ee16:	4293      	cmp	r3, r2
 800ee18:	bfc4      	itt	gt
 800ee1a:	1a9b      	subgt	r3, r3, r2
 800ee1c:	18ed      	addgt	r5, r5, r3
 800ee1e:	2600      	movs	r6, #0
 800ee20:	341a      	adds	r4, #26
 800ee22:	42b5      	cmp	r5, r6
 800ee24:	d11a      	bne.n	800ee5c <_printf_common+0xc8>
 800ee26:	2000      	movs	r0, #0
 800ee28:	e008      	b.n	800ee3c <_printf_common+0xa8>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	4652      	mov	r2, sl
 800ee2e:	4641      	mov	r1, r8
 800ee30:	4638      	mov	r0, r7
 800ee32:	47c8      	blx	r9
 800ee34:	3001      	adds	r0, #1
 800ee36:	d103      	bne.n	800ee40 <_printf_common+0xac>
 800ee38:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee40:	3501      	adds	r5, #1
 800ee42:	e7c6      	b.n	800edd2 <_printf_common+0x3e>
 800ee44:	18e1      	adds	r1, r4, r3
 800ee46:	1c5a      	adds	r2, r3, #1
 800ee48:	2030      	movs	r0, #48	@ 0x30
 800ee4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ee4e:	4422      	add	r2, r4
 800ee50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ee54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ee58:	3302      	adds	r3, #2
 800ee5a:	e7c7      	b.n	800edec <_printf_common+0x58>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	4622      	mov	r2, r4
 800ee60:	4641      	mov	r1, r8
 800ee62:	4638      	mov	r0, r7
 800ee64:	47c8      	blx	r9
 800ee66:	3001      	adds	r0, #1
 800ee68:	d0e6      	beq.n	800ee38 <_printf_common+0xa4>
 800ee6a:	3601      	adds	r6, #1
 800ee6c:	e7d9      	b.n	800ee22 <_printf_common+0x8e>
	...

0800ee70 <_printf_i>:
 800ee70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee74:	7e0f      	ldrb	r7, [r1, #24]
 800ee76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee78:	2f78      	cmp	r7, #120	@ 0x78
 800ee7a:	4691      	mov	r9, r2
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	460c      	mov	r4, r1
 800ee80:	469a      	mov	sl, r3
 800ee82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee86:	d807      	bhi.n	800ee98 <_printf_i+0x28>
 800ee88:	2f62      	cmp	r7, #98	@ 0x62
 800ee8a:	d80a      	bhi.n	800eea2 <_printf_i+0x32>
 800ee8c:	2f00      	cmp	r7, #0
 800ee8e:	f000 80d2 	beq.w	800f036 <_printf_i+0x1c6>
 800ee92:	2f58      	cmp	r7, #88	@ 0x58
 800ee94:	f000 80b9 	beq.w	800f00a <_printf_i+0x19a>
 800ee98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eea0:	e03a      	b.n	800ef18 <_printf_i+0xa8>
 800eea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eea6:	2b15      	cmp	r3, #21
 800eea8:	d8f6      	bhi.n	800ee98 <_printf_i+0x28>
 800eeaa:	a101      	add	r1, pc, #4	@ (adr r1, 800eeb0 <_printf_i+0x40>)
 800eeac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eeb0:	0800ef09 	.word	0x0800ef09
 800eeb4:	0800ef1d 	.word	0x0800ef1d
 800eeb8:	0800ee99 	.word	0x0800ee99
 800eebc:	0800ee99 	.word	0x0800ee99
 800eec0:	0800ee99 	.word	0x0800ee99
 800eec4:	0800ee99 	.word	0x0800ee99
 800eec8:	0800ef1d 	.word	0x0800ef1d
 800eecc:	0800ee99 	.word	0x0800ee99
 800eed0:	0800ee99 	.word	0x0800ee99
 800eed4:	0800ee99 	.word	0x0800ee99
 800eed8:	0800ee99 	.word	0x0800ee99
 800eedc:	0800f01d 	.word	0x0800f01d
 800eee0:	0800ef47 	.word	0x0800ef47
 800eee4:	0800efd7 	.word	0x0800efd7
 800eee8:	0800ee99 	.word	0x0800ee99
 800eeec:	0800ee99 	.word	0x0800ee99
 800eef0:	0800f03f 	.word	0x0800f03f
 800eef4:	0800ee99 	.word	0x0800ee99
 800eef8:	0800ef47 	.word	0x0800ef47
 800eefc:	0800ee99 	.word	0x0800ee99
 800ef00:	0800ee99 	.word	0x0800ee99
 800ef04:	0800efdf 	.word	0x0800efdf
 800ef08:	6833      	ldr	r3, [r6, #0]
 800ef0a:	1d1a      	adds	r2, r3, #4
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	6032      	str	r2, [r6, #0]
 800ef10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e09d      	b.n	800f058 <_printf_i+0x1e8>
 800ef1c:	6833      	ldr	r3, [r6, #0]
 800ef1e:	6820      	ldr	r0, [r4, #0]
 800ef20:	1d19      	adds	r1, r3, #4
 800ef22:	6031      	str	r1, [r6, #0]
 800ef24:	0606      	lsls	r6, r0, #24
 800ef26:	d501      	bpl.n	800ef2c <_printf_i+0xbc>
 800ef28:	681d      	ldr	r5, [r3, #0]
 800ef2a:	e003      	b.n	800ef34 <_printf_i+0xc4>
 800ef2c:	0645      	lsls	r5, r0, #25
 800ef2e:	d5fb      	bpl.n	800ef28 <_printf_i+0xb8>
 800ef30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ef34:	2d00      	cmp	r5, #0
 800ef36:	da03      	bge.n	800ef40 <_printf_i+0xd0>
 800ef38:	232d      	movs	r3, #45	@ 0x2d
 800ef3a:	426d      	negs	r5, r5
 800ef3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef40:	4859      	ldr	r0, [pc, #356]	@ (800f0a8 <_printf_i+0x238>)
 800ef42:	230a      	movs	r3, #10
 800ef44:	e011      	b.n	800ef6a <_printf_i+0xfa>
 800ef46:	6821      	ldr	r1, [r4, #0]
 800ef48:	6833      	ldr	r3, [r6, #0]
 800ef4a:	0608      	lsls	r0, r1, #24
 800ef4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef50:	d402      	bmi.n	800ef58 <_printf_i+0xe8>
 800ef52:	0649      	lsls	r1, r1, #25
 800ef54:	bf48      	it	mi
 800ef56:	b2ad      	uxthmi	r5, r5
 800ef58:	2f6f      	cmp	r7, #111	@ 0x6f
 800ef5a:	4853      	ldr	r0, [pc, #332]	@ (800f0a8 <_printf_i+0x238>)
 800ef5c:	6033      	str	r3, [r6, #0]
 800ef5e:	bf14      	ite	ne
 800ef60:	230a      	movne	r3, #10
 800ef62:	2308      	moveq	r3, #8
 800ef64:	2100      	movs	r1, #0
 800ef66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ef6a:	6866      	ldr	r6, [r4, #4]
 800ef6c:	60a6      	str	r6, [r4, #8]
 800ef6e:	2e00      	cmp	r6, #0
 800ef70:	bfa2      	ittt	ge
 800ef72:	6821      	ldrge	r1, [r4, #0]
 800ef74:	f021 0104 	bicge.w	r1, r1, #4
 800ef78:	6021      	strge	r1, [r4, #0]
 800ef7a:	b90d      	cbnz	r5, 800ef80 <_printf_i+0x110>
 800ef7c:	2e00      	cmp	r6, #0
 800ef7e:	d04b      	beq.n	800f018 <_printf_i+0x1a8>
 800ef80:	4616      	mov	r6, r2
 800ef82:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef86:	fb03 5711 	mls	r7, r3, r1, r5
 800ef8a:	5dc7      	ldrb	r7, [r0, r7]
 800ef8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef90:	462f      	mov	r7, r5
 800ef92:	42bb      	cmp	r3, r7
 800ef94:	460d      	mov	r5, r1
 800ef96:	d9f4      	bls.n	800ef82 <_printf_i+0x112>
 800ef98:	2b08      	cmp	r3, #8
 800ef9a:	d10b      	bne.n	800efb4 <_printf_i+0x144>
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	07df      	lsls	r7, r3, #31
 800efa0:	d508      	bpl.n	800efb4 <_printf_i+0x144>
 800efa2:	6923      	ldr	r3, [r4, #16]
 800efa4:	6861      	ldr	r1, [r4, #4]
 800efa6:	4299      	cmp	r1, r3
 800efa8:	bfde      	ittt	le
 800efaa:	2330      	movle	r3, #48	@ 0x30
 800efac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800efb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800efb4:	1b92      	subs	r2, r2, r6
 800efb6:	6122      	str	r2, [r4, #16]
 800efb8:	f8cd a000 	str.w	sl, [sp]
 800efbc:	464b      	mov	r3, r9
 800efbe:	aa03      	add	r2, sp, #12
 800efc0:	4621      	mov	r1, r4
 800efc2:	4640      	mov	r0, r8
 800efc4:	f7ff fee6 	bl	800ed94 <_printf_common>
 800efc8:	3001      	adds	r0, #1
 800efca:	d14a      	bne.n	800f062 <_printf_i+0x1f2>
 800efcc:	f04f 30ff 	mov.w	r0, #4294967295
 800efd0:	b004      	add	sp, #16
 800efd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	f043 0320 	orr.w	r3, r3, #32
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	4833      	ldr	r0, [pc, #204]	@ (800f0ac <_printf_i+0x23c>)
 800efe0:	2778      	movs	r7, #120	@ 0x78
 800efe2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	6831      	ldr	r1, [r6, #0]
 800efea:	061f      	lsls	r7, r3, #24
 800efec:	f851 5b04 	ldr.w	r5, [r1], #4
 800eff0:	d402      	bmi.n	800eff8 <_printf_i+0x188>
 800eff2:	065f      	lsls	r7, r3, #25
 800eff4:	bf48      	it	mi
 800eff6:	b2ad      	uxthmi	r5, r5
 800eff8:	6031      	str	r1, [r6, #0]
 800effa:	07d9      	lsls	r1, r3, #31
 800effc:	bf44      	itt	mi
 800effe:	f043 0320 	orrmi.w	r3, r3, #32
 800f002:	6023      	strmi	r3, [r4, #0]
 800f004:	b11d      	cbz	r5, 800f00e <_printf_i+0x19e>
 800f006:	2310      	movs	r3, #16
 800f008:	e7ac      	b.n	800ef64 <_printf_i+0xf4>
 800f00a:	4827      	ldr	r0, [pc, #156]	@ (800f0a8 <_printf_i+0x238>)
 800f00c:	e7e9      	b.n	800efe2 <_printf_i+0x172>
 800f00e:	6823      	ldr	r3, [r4, #0]
 800f010:	f023 0320 	bic.w	r3, r3, #32
 800f014:	6023      	str	r3, [r4, #0]
 800f016:	e7f6      	b.n	800f006 <_printf_i+0x196>
 800f018:	4616      	mov	r6, r2
 800f01a:	e7bd      	b.n	800ef98 <_printf_i+0x128>
 800f01c:	6833      	ldr	r3, [r6, #0]
 800f01e:	6825      	ldr	r5, [r4, #0]
 800f020:	6961      	ldr	r1, [r4, #20]
 800f022:	1d18      	adds	r0, r3, #4
 800f024:	6030      	str	r0, [r6, #0]
 800f026:	062e      	lsls	r6, r5, #24
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	d501      	bpl.n	800f030 <_printf_i+0x1c0>
 800f02c:	6019      	str	r1, [r3, #0]
 800f02e:	e002      	b.n	800f036 <_printf_i+0x1c6>
 800f030:	0668      	lsls	r0, r5, #25
 800f032:	d5fb      	bpl.n	800f02c <_printf_i+0x1bc>
 800f034:	8019      	strh	r1, [r3, #0]
 800f036:	2300      	movs	r3, #0
 800f038:	6123      	str	r3, [r4, #16]
 800f03a:	4616      	mov	r6, r2
 800f03c:	e7bc      	b.n	800efb8 <_printf_i+0x148>
 800f03e:	6833      	ldr	r3, [r6, #0]
 800f040:	1d1a      	adds	r2, r3, #4
 800f042:	6032      	str	r2, [r6, #0]
 800f044:	681e      	ldr	r6, [r3, #0]
 800f046:	6862      	ldr	r2, [r4, #4]
 800f048:	2100      	movs	r1, #0
 800f04a:	4630      	mov	r0, r6
 800f04c:	f7f1 f8e0 	bl	8000210 <memchr>
 800f050:	b108      	cbz	r0, 800f056 <_printf_i+0x1e6>
 800f052:	1b80      	subs	r0, r0, r6
 800f054:	6060      	str	r0, [r4, #4]
 800f056:	6863      	ldr	r3, [r4, #4]
 800f058:	6123      	str	r3, [r4, #16]
 800f05a:	2300      	movs	r3, #0
 800f05c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f060:	e7aa      	b.n	800efb8 <_printf_i+0x148>
 800f062:	6923      	ldr	r3, [r4, #16]
 800f064:	4632      	mov	r2, r6
 800f066:	4649      	mov	r1, r9
 800f068:	4640      	mov	r0, r8
 800f06a:	47d0      	blx	sl
 800f06c:	3001      	adds	r0, #1
 800f06e:	d0ad      	beq.n	800efcc <_printf_i+0x15c>
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	079b      	lsls	r3, r3, #30
 800f074:	d413      	bmi.n	800f09e <_printf_i+0x22e>
 800f076:	68e0      	ldr	r0, [r4, #12]
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	4298      	cmp	r0, r3
 800f07c:	bfb8      	it	lt
 800f07e:	4618      	movlt	r0, r3
 800f080:	e7a6      	b.n	800efd0 <_printf_i+0x160>
 800f082:	2301      	movs	r3, #1
 800f084:	4632      	mov	r2, r6
 800f086:	4649      	mov	r1, r9
 800f088:	4640      	mov	r0, r8
 800f08a:	47d0      	blx	sl
 800f08c:	3001      	adds	r0, #1
 800f08e:	d09d      	beq.n	800efcc <_printf_i+0x15c>
 800f090:	3501      	adds	r5, #1
 800f092:	68e3      	ldr	r3, [r4, #12]
 800f094:	9903      	ldr	r1, [sp, #12]
 800f096:	1a5b      	subs	r3, r3, r1
 800f098:	42ab      	cmp	r3, r5
 800f09a:	dcf2      	bgt.n	800f082 <_printf_i+0x212>
 800f09c:	e7eb      	b.n	800f076 <_printf_i+0x206>
 800f09e:	2500      	movs	r5, #0
 800f0a0:	f104 0619 	add.w	r6, r4, #25
 800f0a4:	e7f5      	b.n	800f092 <_printf_i+0x222>
 800f0a6:	bf00      	nop
 800f0a8:	0801ddb4 	.word	0x0801ddb4
 800f0ac:	0801ddc5 	.word	0x0801ddc5

0800f0b0 <__sflush_r>:
 800f0b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b8:	0716      	lsls	r6, r2, #28
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	460c      	mov	r4, r1
 800f0be:	d454      	bmi.n	800f16a <__sflush_r+0xba>
 800f0c0:	684b      	ldr	r3, [r1, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	dc02      	bgt.n	800f0cc <__sflush_r+0x1c>
 800f0c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	dd48      	ble.n	800f15e <__sflush_r+0xae>
 800f0cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0ce:	2e00      	cmp	r6, #0
 800f0d0:	d045      	beq.n	800f15e <__sflush_r+0xae>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f0d8:	682f      	ldr	r7, [r5, #0]
 800f0da:	6a21      	ldr	r1, [r4, #32]
 800f0dc:	602b      	str	r3, [r5, #0]
 800f0de:	d030      	beq.n	800f142 <__sflush_r+0x92>
 800f0e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0e2:	89a3      	ldrh	r3, [r4, #12]
 800f0e4:	0759      	lsls	r1, r3, #29
 800f0e6:	d505      	bpl.n	800f0f4 <__sflush_r+0x44>
 800f0e8:	6863      	ldr	r3, [r4, #4]
 800f0ea:	1ad2      	subs	r2, r2, r3
 800f0ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0ee:	b10b      	cbz	r3, 800f0f4 <__sflush_r+0x44>
 800f0f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0f2:	1ad2      	subs	r2, r2, r3
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0f8:	6a21      	ldr	r1, [r4, #32]
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b0      	blx	r6
 800f0fe:	1c43      	adds	r3, r0, #1
 800f100:	89a3      	ldrh	r3, [r4, #12]
 800f102:	d106      	bne.n	800f112 <__sflush_r+0x62>
 800f104:	6829      	ldr	r1, [r5, #0]
 800f106:	291d      	cmp	r1, #29
 800f108:	d82b      	bhi.n	800f162 <__sflush_r+0xb2>
 800f10a:	4a2a      	ldr	r2, [pc, #168]	@ (800f1b4 <__sflush_r+0x104>)
 800f10c:	410a      	asrs	r2, r1
 800f10e:	07d6      	lsls	r6, r2, #31
 800f110:	d427      	bmi.n	800f162 <__sflush_r+0xb2>
 800f112:	2200      	movs	r2, #0
 800f114:	6062      	str	r2, [r4, #4]
 800f116:	04d9      	lsls	r1, r3, #19
 800f118:	6922      	ldr	r2, [r4, #16]
 800f11a:	6022      	str	r2, [r4, #0]
 800f11c:	d504      	bpl.n	800f128 <__sflush_r+0x78>
 800f11e:	1c42      	adds	r2, r0, #1
 800f120:	d101      	bne.n	800f126 <__sflush_r+0x76>
 800f122:	682b      	ldr	r3, [r5, #0]
 800f124:	b903      	cbnz	r3, 800f128 <__sflush_r+0x78>
 800f126:	6560      	str	r0, [r4, #84]	@ 0x54
 800f128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f12a:	602f      	str	r7, [r5, #0]
 800f12c:	b1b9      	cbz	r1, 800f15e <__sflush_r+0xae>
 800f12e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f132:	4299      	cmp	r1, r3
 800f134:	d002      	beq.n	800f13c <__sflush_r+0x8c>
 800f136:	4628      	mov	r0, r5
 800f138:	f7ff fbd4 	bl	800e8e4 <_free_r>
 800f13c:	2300      	movs	r3, #0
 800f13e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f140:	e00d      	b.n	800f15e <__sflush_r+0xae>
 800f142:	2301      	movs	r3, #1
 800f144:	4628      	mov	r0, r5
 800f146:	47b0      	blx	r6
 800f148:	4602      	mov	r2, r0
 800f14a:	1c50      	adds	r0, r2, #1
 800f14c:	d1c9      	bne.n	800f0e2 <__sflush_r+0x32>
 800f14e:	682b      	ldr	r3, [r5, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d0c6      	beq.n	800f0e2 <__sflush_r+0x32>
 800f154:	2b1d      	cmp	r3, #29
 800f156:	d001      	beq.n	800f15c <__sflush_r+0xac>
 800f158:	2b16      	cmp	r3, #22
 800f15a:	d11e      	bne.n	800f19a <__sflush_r+0xea>
 800f15c:	602f      	str	r7, [r5, #0]
 800f15e:	2000      	movs	r0, #0
 800f160:	e022      	b.n	800f1a8 <__sflush_r+0xf8>
 800f162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f166:	b21b      	sxth	r3, r3
 800f168:	e01b      	b.n	800f1a2 <__sflush_r+0xf2>
 800f16a:	690f      	ldr	r7, [r1, #16]
 800f16c:	2f00      	cmp	r7, #0
 800f16e:	d0f6      	beq.n	800f15e <__sflush_r+0xae>
 800f170:	0793      	lsls	r3, r2, #30
 800f172:	680e      	ldr	r6, [r1, #0]
 800f174:	bf08      	it	eq
 800f176:	694b      	ldreq	r3, [r1, #20]
 800f178:	600f      	str	r7, [r1, #0]
 800f17a:	bf18      	it	ne
 800f17c:	2300      	movne	r3, #0
 800f17e:	eba6 0807 	sub.w	r8, r6, r7
 800f182:	608b      	str	r3, [r1, #8]
 800f184:	f1b8 0f00 	cmp.w	r8, #0
 800f188:	dde9      	ble.n	800f15e <__sflush_r+0xae>
 800f18a:	6a21      	ldr	r1, [r4, #32]
 800f18c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f18e:	4643      	mov	r3, r8
 800f190:	463a      	mov	r2, r7
 800f192:	4628      	mov	r0, r5
 800f194:	47b0      	blx	r6
 800f196:	2800      	cmp	r0, #0
 800f198:	dc08      	bgt.n	800f1ac <__sflush_r+0xfc>
 800f19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1a2:	81a3      	strh	r3, [r4, #12]
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ac:	4407      	add	r7, r0
 800f1ae:	eba8 0800 	sub.w	r8, r8, r0
 800f1b2:	e7e7      	b.n	800f184 <__sflush_r+0xd4>
 800f1b4:	dfbffffe 	.word	0xdfbffffe

0800f1b8 <_fflush_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	690b      	ldr	r3, [r1, #16]
 800f1bc:	4605      	mov	r5, r0
 800f1be:	460c      	mov	r4, r1
 800f1c0:	b913      	cbnz	r3, 800f1c8 <_fflush_r+0x10>
 800f1c2:	2500      	movs	r5, #0
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
 800f1c8:	b118      	cbz	r0, 800f1d2 <_fflush_r+0x1a>
 800f1ca:	6a03      	ldr	r3, [r0, #32]
 800f1cc:	b90b      	cbnz	r3, 800f1d2 <_fflush_r+0x1a>
 800f1ce:	f7ff f9f1 	bl	800e5b4 <__sinit>
 800f1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d0f3      	beq.n	800f1c2 <_fflush_r+0xa>
 800f1da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1dc:	07d0      	lsls	r0, r2, #31
 800f1de:	d404      	bmi.n	800f1ea <_fflush_r+0x32>
 800f1e0:	0599      	lsls	r1, r3, #22
 800f1e2:	d402      	bmi.n	800f1ea <_fflush_r+0x32>
 800f1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1e6:	f7ff fb4e 	bl	800e886 <__retarget_lock_acquire_recursive>
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	f7ff ff5f 	bl	800f0b0 <__sflush_r>
 800f1f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1f4:	07da      	lsls	r2, r3, #31
 800f1f6:	4605      	mov	r5, r0
 800f1f8:	d4e4      	bmi.n	800f1c4 <_fflush_r+0xc>
 800f1fa:	89a3      	ldrh	r3, [r4, #12]
 800f1fc:	059b      	lsls	r3, r3, #22
 800f1fe:	d4e1      	bmi.n	800f1c4 <_fflush_r+0xc>
 800f200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f202:	f7ff fb41 	bl	800e888 <__retarget_lock_release_recursive>
 800f206:	e7dd      	b.n	800f1c4 <_fflush_r+0xc>

0800f208 <fiprintf>:
 800f208:	b40e      	push	{r1, r2, r3}
 800f20a:	b503      	push	{r0, r1, lr}
 800f20c:	4601      	mov	r1, r0
 800f20e:	ab03      	add	r3, sp, #12
 800f210:	4805      	ldr	r0, [pc, #20]	@ (800f228 <fiprintf+0x20>)
 800f212:	f853 2b04 	ldr.w	r2, [r3], #4
 800f216:	6800      	ldr	r0, [r0, #0]
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	f000 f88f 	bl	800f33c <_vfiprintf_r>
 800f21e:	b002      	add	sp, #8
 800f220:	f85d eb04 	ldr.w	lr, [sp], #4
 800f224:	b003      	add	sp, #12
 800f226:	4770      	bx	lr
 800f228:	20000064 	.word	0x20000064

0800f22c <memmove>:
 800f22c:	4288      	cmp	r0, r1
 800f22e:	b510      	push	{r4, lr}
 800f230:	eb01 0402 	add.w	r4, r1, r2
 800f234:	d902      	bls.n	800f23c <memmove+0x10>
 800f236:	4284      	cmp	r4, r0
 800f238:	4623      	mov	r3, r4
 800f23a:	d807      	bhi.n	800f24c <memmove+0x20>
 800f23c:	1e43      	subs	r3, r0, #1
 800f23e:	42a1      	cmp	r1, r4
 800f240:	d008      	beq.n	800f254 <memmove+0x28>
 800f242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f24a:	e7f8      	b.n	800f23e <memmove+0x12>
 800f24c:	4402      	add	r2, r0
 800f24e:	4601      	mov	r1, r0
 800f250:	428a      	cmp	r2, r1
 800f252:	d100      	bne.n	800f256 <memmove+0x2a>
 800f254:	bd10      	pop	{r4, pc}
 800f256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f25a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f25e:	e7f7      	b.n	800f250 <memmove+0x24>

0800f260 <_sbrk_r>:
 800f260:	b538      	push	{r3, r4, r5, lr}
 800f262:	4d06      	ldr	r5, [pc, #24]	@ (800f27c <_sbrk_r+0x1c>)
 800f264:	2300      	movs	r3, #0
 800f266:	4604      	mov	r4, r0
 800f268:	4608      	mov	r0, r1
 800f26a:	602b      	str	r3, [r5, #0]
 800f26c:	f7f6 f99c 	bl	80055a8 <_sbrk>
 800f270:	1c43      	adds	r3, r0, #1
 800f272:	d102      	bne.n	800f27a <_sbrk_r+0x1a>
 800f274:	682b      	ldr	r3, [r5, #0]
 800f276:	b103      	cbz	r3, 800f27a <_sbrk_r+0x1a>
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	bd38      	pop	{r3, r4, r5, pc}
 800f27c:	20004d5c 	.word	0x20004d5c

0800f280 <abort>:
 800f280:	b508      	push	{r3, lr}
 800f282:	2006      	movs	r0, #6
 800f284:	f000 fa2e 	bl	800f6e4 <raise>
 800f288:	2001      	movs	r0, #1
 800f28a:	f7f6 f915 	bl	80054b8 <_exit>

0800f28e <_realloc_r>:
 800f28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f292:	4680      	mov	r8, r0
 800f294:	4615      	mov	r5, r2
 800f296:	460c      	mov	r4, r1
 800f298:	b921      	cbnz	r1, 800f2a4 <_realloc_r+0x16>
 800f29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f29e:	4611      	mov	r1, r2
 800f2a0:	f7ff bb94 	b.w	800e9cc <_malloc_r>
 800f2a4:	b92a      	cbnz	r2, 800f2b2 <_realloc_r+0x24>
 800f2a6:	f7ff fb1d 	bl	800e8e4 <_free_r>
 800f2aa:	2400      	movs	r4, #0
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b2:	f000 fa33 	bl	800f71c <_malloc_usable_size_r>
 800f2b6:	4285      	cmp	r5, r0
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	d802      	bhi.n	800f2c2 <_realloc_r+0x34>
 800f2bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f2c0:	d8f4      	bhi.n	800f2ac <_realloc_r+0x1e>
 800f2c2:	4629      	mov	r1, r5
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	f7ff fb81 	bl	800e9cc <_malloc_r>
 800f2ca:	4607      	mov	r7, r0
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d0ec      	beq.n	800f2aa <_realloc_r+0x1c>
 800f2d0:	42b5      	cmp	r5, r6
 800f2d2:	462a      	mov	r2, r5
 800f2d4:	4621      	mov	r1, r4
 800f2d6:	bf28      	it	cs
 800f2d8:	4632      	movcs	r2, r6
 800f2da:	f7ff fad6 	bl	800e88a <memcpy>
 800f2de:	4621      	mov	r1, r4
 800f2e0:	4640      	mov	r0, r8
 800f2e2:	f7ff faff 	bl	800e8e4 <_free_r>
 800f2e6:	463c      	mov	r4, r7
 800f2e8:	e7e0      	b.n	800f2ac <_realloc_r+0x1e>

0800f2ea <__sfputc_r>:
 800f2ea:	6893      	ldr	r3, [r2, #8]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	b410      	push	{r4}
 800f2f2:	6093      	str	r3, [r2, #8]
 800f2f4:	da08      	bge.n	800f308 <__sfputc_r+0x1e>
 800f2f6:	6994      	ldr	r4, [r2, #24]
 800f2f8:	42a3      	cmp	r3, r4
 800f2fa:	db01      	blt.n	800f300 <__sfputc_r+0x16>
 800f2fc:	290a      	cmp	r1, #10
 800f2fe:	d103      	bne.n	800f308 <__sfputc_r+0x1e>
 800f300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f304:	f000 b932 	b.w	800f56c <__swbuf_r>
 800f308:	6813      	ldr	r3, [r2, #0]
 800f30a:	1c58      	adds	r0, r3, #1
 800f30c:	6010      	str	r0, [r2, #0]
 800f30e:	7019      	strb	r1, [r3, #0]
 800f310:	4608      	mov	r0, r1
 800f312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <__sfputs_r>:
 800f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31a:	4606      	mov	r6, r0
 800f31c:	460f      	mov	r7, r1
 800f31e:	4614      	mov	r4, r2
 800f320:	18d5      	adds	r5, r2, r3
 800f322:	42ac      	cmp	r4, r5
 800f324:	d101      	bne.n	800f32a <__sfputs_r+0x12>
 800f326:	2000      	movs	r0, #0
 800f328:	e007      	b.n	800f33a <__sfputs_r+0x22>
 800f32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32e:	463a      	mov	r2, r7
 800f330:	4630      	mov	r0, r6
 800f332:	f7ff ffda 	bl	800f2ea <__sfputc_r>
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	d1f3      	bne.n	800f322 <__sfputs_r+0xa>
 800f33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f33c <_vfiprintf_r>:
 800f33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f340:	460d      	mov	r5, r1
 800f342:	b09d      	sub	sp, #116	@ 0x74
 800f344:	4614      	mov	r4, r2
 800f346:	4698      	mov	r8, r3
 800f348:	4606      	mov	r6, r0
 800f34a:	b118      	cbz	r0, 800f354 <_vfiprintf_r+0x18>
 800f34c:	6a03      	ldr	r3, [r0, #32]
 800f34e:	b90b      	cbnz	r3, 800f354 <_vfiprintf_r+0x18>
 800f350:	f7ff f930 	bl	800e5b4 <__sinit>
 800f354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f356:	07d9      	lsls	r1, r3, #31
 800f358:	d405      	bmi.n	800f366 <_vfiprintf_r+0x2a>
 800f35a:	89ab      	ldrh	r3, [r5, #12]
 800f35c:	059a      	lsls	r2, r3, #22
 800f35e:	d402      	bmi.n	800f366 <_vfiprintf_r+0x2a>
 800f360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f362:	f7ff fa90 	bl	800e886 <__retarget_lock_acquire_recursive>
 800f366:	89ab      	ldrh	r3, [r5, #12]
 800f368:	071b      	lsls	r3, r3, #28
 800f36a:	d501      	bpl.n	800f370 <_vfiprintf_r+0x34>
 800f36c:	692b      	ldr	r3, [r5, #16]
 800f36e:	b99b      	cbnz	r3, 800f398 <_vfiprintf_r+0x5c>
 800f370:	4629      	mov	r1, r5
 800f372:	4630      	mov	r0, r6
 800f374:	f000 f938 	bl	800f5e8 <__swsetup_r>
 800f378:	b170      	cbz	r0, 800f398 <_vfiprintf_r+0x5c>
 800f37a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f37c:	07dc      	lsls	r4, r3, #31
 800f37e:	d504      	bpl.n	800f38a <_vfiprintf_r+0x4e>
 800f380:	f04f 30ff 	mov.w	r0, #4294967295
 800f384:	b01d      	add	sp, #116	@ 0x74
 800f386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	0598      	lsls	r0, r3, #22
 800f38e:	d4f7      	bmi.n	800f380 <_vfiprintf_r+0x44>
 800f390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f392:	f7ff fa79 	bl	800e888 <__retarget_lock_release_recursive>
 800f396:	e7f3      	b.n	800f380 <_vfiprintf_r+0x44>
 800f398:	2300      	movs	r3, #0
 800f39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f39c:	2320      	movs	r3, #32
 800f39e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3a6:	2330      	movs	r3, #48	@ 0x30
 800f3a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f558 <_vfiprintf_r+0x21c>
 800f3ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3b0:	f04f 0901 	mov.w	r9, #1
 800f3b4:	4623      	mov	r3, r4
 800f3b6:	469a      	mov	sl, r3
 800f3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3bc:	b10a      	cbz	r2, 800f3c2 <_vfiprintf_r+0x86>
 800f3be:	2a25      	cmp	r2, #37	@ 0x25
 800f3c0:	d1f9      	bne.n	800f3b6 <_vfiprintf_r+0x7a>
 800f3c2:	ebba 0b04 	subs.w	fp, sl, r4
 800f3c6:	d00b      	beq.n	800f3e0 <_vfiprintf_r+0xa4>
 800f3c8:	465b      	mov	r3, fp
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	f7ff ffa2 	bl	800f318 <__sfputs_r>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	f000 80a7 	beq.w	800f528 <_vfiprintf_r+0x1ec>
 800f3da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3dc:	445a      	add	r2, fp
 800f3de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f000 809f 	beq.w	800f528 <_vfiprintf_r+0x1ec>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f3f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3f4:	f10a 0a01 	add.w	sl, sl, #1
 800f3f8:	9304      	str	r3, [sp, #16]
 800f3fa:	9307      	str	r3, [sp, #28]
 800f3fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f400:	931a      	str	r3, [sp, #104]	@ 0x68
 800f402:	4654      	mov	r4, sl
 800f404:	2205      	movs	r2, #5
 800f406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f40a:	4853      	ldr	r0, [pc, #332]	@ (800f558 <_vfiprintf_r+0x21c>)
 800f40c:	f7f0 ff00 	bl	8000210 <memchr>
 800f410:	9a04      	ldr	r2, [sp, #16]
 800f412:	b9d8      	cbnz	r0, 800f44c <_vfiprintf_r+0x110>
 800f414:	06d1      	lsls	r1, r2, #27
 800f416:	bf44      	itt	mi
 800f418:	2320      	movmi	r3, #32
 800f41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f41e:	0713      	lsls	r3, r2, #28
 800f420:	bf44      	itt	mi
 800f422:	232b      	movmi	r3, #43	@ 0x2b
 800f424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f428:	f89a 3000 	ldrb.w	r3, [sl]
 800f42c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f42e:	d015      	beq.n	800f45c <_vfiprintf_r+0x120>
 800f430:	9a07      	ldr	r2, [sp, #28]
 800f432:	4654      	mov	r4, sl
 800f434:	2000      	movs	r0, #0
 800f436:	f04f 0c0a 	mov.w	ip, #10
 800f43a:	4621      	mov	r1, r4
 800f43c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f440:	3b30      	subs	r3, #48	@ 0x30
 800f442:	2b09      	cmp	r3, #9
 800f444:	d94b      	bls.n	800f4de <_vfiprintf_r+0x1a2>
 800f446:	b1b0      	cbz	r0, 800f476 <_vfiprintf_r+0x13a>
 800f448:	9207      	str	r2, [sp, #28]
 800f44a:	e014      	b.n	800f476 <_vfiprintf_r+0x13a>
 800f44c:	eba0 0308 	sub.w	r3, r0, r8
 800f450:	fa09 f303 	lsl.w	r3, r9, r3
 800f454:	4313      	orrs	r3, r2
 800f456:	9304      	str	r3, [sp, #16]
 800f458:	46a2      	mov	sl, r4
 800f45a:	e7d2      	b.n	800f402 <_vfiprintf_r+0xc6>
 800f45c:	9b03      	ldr	r3, [sp, #12]
 800f45e:	1d19      	adds	r1, r3, #4
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	9103      	str	r1, [sp, #12]
 800f464:	2b00      	cmp	r3, #0
 800f466:	bfbb      	ittet	lt
 800f468:	425b      	neglt	r3, r3
 800f46a:	f042 0202 	orrlt.w	r2, r2, #2
 800f46e:	9307      	strge	r3, [sp, #28]
 800f470:	9307      	strlt	r3, [sp, #28]
 800f472:	bfb8      	it	lt
 800f474:	9204      	strlt	r2, [sp, #16]
 800f476:	7823      	ldrb	r3, [r4, #0]
 800f478:	2b2e      	cmp	r3, #46	@ 0x2e
 800f47a:	d10a      	bne.n	800f492 <_vfiprintf_r+0x156>
 800f47c:	7863      	ldrb	r3, [r4, #1]
 800f47e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f480:	d132      	bne.n	800f4e8 <_vfiprintf_r+0x1ac>
 800f482:	9b03      	ldr	r3, [sp, #12]
 800f484:	1d1a      	adds	r2, r3, #4
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	9203      	str	r2, [sp, #12]
 800f48a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f48e:	3402      	adds	r4, #2
 800f490:	9305      	str	r3, [sp, #20]
 800f492:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f568 <_vfiprintf_r+0x22c>
 800f496:	7821      	ldrb	r1, [r4, #0]
 800f498:	2203      	movs	r2, #3
 800f49a:	4650      	mov	r0, sl
 800f49c:	f7f0 feb8 	bl	8000210 <memchr>
 800f4a0:	b138      	cbz	r0, 800f4b2 <_vfiprintf_r+0x176>
 800f4a2:	9b04      	ldr	r3, [sp, #16]
 800f4a4:	eba0 000a 	sub.w	r0, r0, sl
 800f4a8:	2240      	movs	r2, #64	@ 0x40
 800f4aa:	4082      	lsls	r2, r0
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	3401      	adds	r4, #1
 800f4b0:	9304      	str	r3, [sp, #16]
 800f4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4b6:	4829      	ldr	r0, [pc, #164]	@ (800f55c <_vfiprintf_r+0x220>)
 800f4b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4bc:	2206      	movs	r2, #6
 800f4be:	f7f0 fea7 	bl	8000210 <memchr>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d03f      	beq.n	800f546 <_vfiprintf_r+0x20a>
 800f4c6:	4b26      	ldr	r3, [pc, #152]	@ (800f560 <_vfiprintf_r+0x224>)
 800f4c8:	bb1b      	cbnz	r3, 800f512 <_vfiprintf_r+0x1d6>
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	3307      	adds	r3, #7
 800f4ce:	f023 0307 	bic.w	r3, r3, #7
 800f4d2:	3308      	adds	r3, #8
 800f4d4:	9303      	str	r3, [sp, #12]
 800f4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4d8:	443b      	add	r3, r7
 800f4da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4dc:	e76a      	b.n	800f3b4 <_vfiprintf_r+0x78>
 800f4de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4e2:	460c      	mov	r4, r1
 800f4e4:	2001      	movs	r0, #1
 800f4e6:	e7a8      	b.n	800f43a <_vfiprintf_r+0xfe>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	3401      	adds	r4, #1
 800f4ec:	9305      	str	r3, [sp, #20]
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	f04f 0c0a 	mov.w	ip, #10
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4fa:	3a30      	subs	r2, #48	@ 0x30
 800f4fc:	2a09      	cmp	r2, #9
 800f4fe:	d903      	bls.n	800f508 <_vfiprintf_r+0x1cc>
 800f500:	2b00      	cmp	r3, #0
 800f502:	d0c6      	beq.n	800f492 <_vfiprintf_r+0x156>
 800f504:	9105      	str	r1, [sp, #20]
 800f506:	e7c4      	b.n	800f492 <_vfiprintf_r+0x156>
 800f508:	fb0c 2101 	mla	r1, ip, r1, r2
 800f50c:	4604      	mov	r4, r0
 800f50e:	2301      	movs	r3, #1
 800f510:	e7f0      	b.n	800f4f4 <_vfiprintf_r+0x1b8>
 800f512:	ab03      	add	r3, sp, #12
 800f514:	9300      	str	r3, [sp, #0]
 800f516:	462a      	mov	r2, r5
 800f518:	4b12      	ldr	r3, [pc, #72]	@ (800f564 <_vfiprintf_r+0x228>)
 800f51a:	a904      	add	r1, sp, #16
 800f51c:	4630      	mov	r0, r6
 800f51e:	f3af 8000 	nop.w
 800f522:	4607      	mov	r7, r0
 800f524:	1c78      	adds	r0, r7, #1
 800f526:	d1d6      	bne.n	800f4d6 <_vfiprintf_r+0x19a>
 800f528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f52a:	07d9      	lsls	r1, r3, #31
 800f52c:	d405      	bmi.n	800f53a <_vfiprintf_r+0x1fe>
 800f52e:	89ab      	ldrh	r3, [r5, #12]
 800f530:	059a      	lsls	r2, r3, #22
 800f532:	d402      	bmi.n	800f53a <_vfiprintf_r+0x1fe>
 800f534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f536:	f7ff f9a7 	bl	800e888 <__retarget_lock_release_recursive>
 800f53a:	89ab      	ldrh	r3, [r5, #12]
 800f53c:	065b      	lsls	r3, r3, #25
 800f53e:	f53f af1f 	bmi.w	800f380 <_vfiprintf_r+0x44>
 800f542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f544:	e71e      	b.n	800f384 <_vfiprintf_r+0x48>
 800f546:	ab03      	add	r3, sp, #12
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	462a      	mov	r2, r5
 800f54c:	4b05      	ldr	r3, [pc, #20]	@ (800f564 <_vfiprintf_r+0x228>)
 800f54e:	a904      	add	r1, sp, #16
 800f550:	4630      	mov	r0, r6
 800f552:	f7ff fc8d 	bl	800ee70 <_printf_i>
 800f556:	e7e4      	b.n	800f522 <_vfiprintf_r+0x1e6>
 800f558:	0801dda3 	.word	0x0801dda3
 800f55c:	0801ddad 	.word	0x0801ddad
 800f560:	00000000 	.word	0x00000000
 800f564:	0800f319 	.word	0x0800f319
 800f568:	0801dda9 	.word	0x0801dda9

0800f56c <__swbuf_r>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	460e      	mov	r6, r1
 800f570:	4614      	mov	r4, r2
 800f572:	4605      	mov	r5, r0
 800f574:	b118      	cbz	r0, 800f57e <__swbuf_r+0x12>
 800f576:	6a03      	ldr	r3, [r0, #32]
 800f578:	b90b      	cbnz	r3, 800f57e <__swbuf_r+0x12>
 800f57a:	f7ff f81b 	bl	800e5b4 <__sinit>
 800f57e:	69a3      	ldr	r3, [r4, #24]
 800f580:	60a3      	str	r3, [r4, #8]
 800f582:	89a3      	ldrh	r3, [r4, #12]
 800f584:	071a      	lsls	r2, r3, #28
 800f586:	d501      	bpl.n	800f58c <__swbuf_r+0x20>
 800f588:	6923      	ldr	r3, [r4, #16]
 800f58a:	b943      	cbnz	r3, 800f59e <__swbuf_r+0x32>
 800f58c:	4621      	mov	r1, r4
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 f82a 	bl	800f5e8 <__swsetup_r>
 800f594:	b118      	cbz	r0, 800f59e <__swbuf_r+0x32>
 800f596:	f04f 37ff 	mov.w	r7, #4294967295
 800f59a:	4638      	mov	r0, r7
 800f59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	6922      	ldr	r2, [r4, #16]
 800f5a2:	1a98      	subs	r0, r3, r2
 800f5a4:	6963      	ldr	r3, [r4, #20]
 800f5a6:	b2f6      	uxtb	r6, r6
 800f5a8:	4283      	cmp	r3, r0
 800f5aa:	4637      	mov	r7, r6
 800f5ac:	dc05      	bgt.n	800f5ba <__swbuf_r+0x4e>
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	f7ff fe01 	bl	800f1b8 <_fflush_r>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d1ed      	bne.n	800f596 <__swbuf_r+0x2a>
 800f5ba:	68a3      	ldr	r3, [r4, #8]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	60a3      	str	r3, [r4, #8]
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	1c5a      	adds	r2, r3, #1
 800f5c4:	6022      	str	r2, [r4, #0]
 800f5c6:	701e      	strb	r6, [r3, #0]
 800f5c8:	6962      	ldr	r2, [r4, #20]
 800f5ca:	1c43      	adds	r3, r0, #1
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d004      	beq.n	800f5da <__swbuf_r+0x6e>
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	07db      	lsls	r3, r3, #31
 800f5d4:	d5e1      	bpl.n	800f59a <__swbuf_r+0x2e>
 800f5d6:	2e0a      	cmp	r6, #10
 800f5d8:	d1df      	bne.n	800f59a <__swbuf_r+0x2e>
 800f5da:	4621      	mov	r1, r4
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f7ff fdeb 	bl	800f1b8 <_fflush_r>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d0d9      	beq.n	800f59a <__swbuf_r+0x2e>
 800f5e6:	e7d6      	b.n	800f596 <__swbuf_r+0x2a>

0800f5e8 <__swsetup_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4b29      	ldr	r3, [pc, #164]	@ (800f690 <__swsetup_r+0xa8>)
 800f5ec:	4605      	mov	r5, r0
 800f5ee:	6818      	ldr	r0, [r3, #0]
 800f5f0:	460c      	mov	r4, r1
 800f5f2:	b118      	cbz	r0, 800f5fc <__swsetup_r+0x14>
 800f5f4:	6a03      	ldr	r3, [r0, #32]
 800f5f6:	b90b      	cbnz	r3, 800f5fc <__swsetup_r+0x14>
 800f5f8:	f7fe ffdc 	bl	800e5b4 <__sinit>
 800f5fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f600:	0719      	lsls	r1, r3, #28
 800f602:	d422      	bmi.n	800f64a <__swsetup_r+0x62>
 800f604:	06da      	lsls	r2, r3, #27
 800f606:	d407      	bmi.n	800f618 <__swsetup_r+0x30>
 800f608:	2209      	movs	r2, #9
 800f60a:	602a      	str	r2, [r5, #0]
 800f60c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f610:	81a3      	strh	r3, [r4, #12]
 800f612:	f04f 30ff 	mov.w	r0, #4294967295
 800f616:	e033      	b.n	800f680 <__swsetup_r+0x98>
 800f618:	0758      	lsls	r0, r3, #29
 800f61a:	d512      	bpl.n	800f642 <__swsetup_r+0x5a>
 800f61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f61e:	b141      	cbz	r1, 800f632 <__swsetup_r+0x4a>
 800f620:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f624:	4299      	cmp	r1, r3
 800f626:	d002      	beq.n	800f62e <__swsetup_r+0x46>
 800f628:	4628      	mov	r0, r5
 800f62a:	f7ff f95b 	bl	800e8e4 <_free_r>
 800f62e:	2300      	movs	r3, #0
 800f630:	6363      	str	r3, [r4, #52]	@ 0x34
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f638:	81a3      	strh	r3, [r4, #12]
 800f63a:	2300      	movs	r3, #0
 800f63c:	6063      	str	r3, [r4, #4]
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	f043 0308 	orr.w	r3, r3, #8
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	6923      	ldr	r3, [r4, #16]
 800f64c:	b94b      	cbnz	r3, 800f662 <__swsetup_r+0x7a>
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f658:	d003      	beq.n	800f662 <__swsetup_r+0x7a>
 800f65a:	4621      	mov	r1, r4
 800f65c:	4628      	mov	r0, r5
 800f65e:	f000 f88b 	bl	800f778 <__smakebuf_r>
 800f662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f666:	f013 0201 	ands.w	r2, r3, #1
 800f66a:	d00a      	beq.n	800f682 <__swsetup_r+0x9a>
 800f66c:	2200      	movs	r2, #0
 800f66e:	60a2      	str	r2, [r4, #8]
 800f670:	6962      	ldr	r2, [r4, #20]
 800f672:	4252      	negs	r2, r2
 800f674:	61a2      	str	r2, [r4, #24]
 800f676:	6922      	ldr	r2, [r4, #16]
 800f678:	b942      	cbnz	r2, 800f68c <__swsetup_r+0xa4>
 800f67a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f67e:	d1c5      	bne.n	800f60c <__swsetup_r+0x24>
 800f680:	bd38      	pop	{r3, r4, r5, pc}
 800f682:	0799      	lsls	r1, r3, #30
 800f684:	bf58      	it	pl
 800f686:	6962      	ldrpl	r2, [r4, #20]
 800f688:	60a2      	str	r2, [r4, #8]
 800f68a:	e7f4      	b.n	800f676 <__swsetup_r+0x8e>
 800f68c:	2000      	movs	r0, #0
 800f68e:	e7f7      	b.n	800f680 <__swsetup_r+0x98>
 800f690:	20000064 	.word	0x20000064

0800f694 <_raise_r>:
 800f694:	291f      	cmp	r1, #31
 800f696:	b538      	push	{r3, r4, r5, lr}
 800f698:	4605      	mov	r5, r0
 800f69a:	460c      	mov	r4, r1
 800f69c:	d904      	bls.n	800f6a8 <_raise_r+0x14>
 800f69e:	2316      	movs	r3, #22
 800f6a0:	6003      	str	r3, [r0, #0]
 800f6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a6:	bd38      	pop	{r3, r4, r5, pc}
 800f6a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f6aa:	b112      	cbz	r2, 800f6b2 <_raise_r+0x1e>
 800f6ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6b0:	b94b      	cbnz	r3, 800f6c6 <_raise_r+0x32>
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	f000 f830 	bl	800f718 <_getpid_r>
 800f6b8:	4622      	mov	r2, r4
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	4628      	mov	r0, r5
 800f6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6c2:	f000 b817 	b.w	800f6f4 <_kill_r>
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d00a      	beq.n	800f6e0 <_raise_r+0x4c>
 800f6ca:	1c59      	adds	r1, r3, #1
 800f6cc:	d103      	bne.n	800f6d6 <_raise_r+0x42>
 800f6ce:	2316      	movs	r3, #22
 800f6d0:	6003      	str	r3, [r0, #0]
 800f6d2:	2001      	movs	r0, #1
 800f6d4:	e7e7      	b.n	800f6a6 <_raise_r+0x12>
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f6dc:	4620      	mov	r0, r4
 800f6de:	4798      	blx	r3
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	e7e0      	b.n	800f6a6 <_raise_r+0x12>

0800f6e4 <raise>:
 800f6e4:	4b02      	ldr	r3, [pc, #8]	@ (800f6f0 <raise+0xc>)
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	f7ff bfd3 	b.w	800f694 <_raise_r>
 800f6ee:	bf00      	nop
 800f6f0:	20000064 	.word	0x20000064

0800f6f4 <_kill_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4d07      	ldr	r5, [pc, #28]	@ (800f714 <_kill_r+0x20>)
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	4608      	mov	r0, r1
 800f6fe:	4611      	mov	r1, r2
 800f700:	602b      	str	r3, [r5, #0]
 800f702:	f7f5 fec9 	bl	8005498 <_kill>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	d102      	bne.n	800f710 <_kill_r+0x1c>
 800f70a:	682b      	ldr	r3, [r5, #0]
 800f70c:	b103      	cbz	r3, 800f710 <_kill_r+0x1c>
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	bd38      	pop	{r3, r4, r5, pc}
 800f712:	bf00      	nop
 800f714:	20004d5c 	.word	0x20004d5c

0800f718 <_getpid_r>:
 800f718:	f7f5 beb6 	b.w	8005488 <_getpid>

0800f71c <_malloc_usable_size_r>:
 800f71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f720:	1f18      	subs	r0, r3, #4
 800f722:	2b00      	cmp	r3, #0
 800f724:	bfbc      	itt	lt
 800f726:	580b      	ldrlt	r3, [r1, r0]
 800f728:	18c0      	addlt	r0, r0, r3
 800f72a:	4770      	bx	lr

0800f72c <__swhatbuf_r>:
 800f72c:	b570      	push	{r4, r5, r6, lr}
 800f72e:	460c      	mov	r4, r1
 800f730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f734:	2900      	cmp	r1, #0
 800f736:	b096      	sub	sp, #88	@ 0x58
 800f738:	4615      	mov	r5, r2
 800f73a:	461e      	mov	r6, r3
 800f73c:	da0d      	bge.n	800f75a <__swhatbuf_r+0x2e>
 800f73e:	89a3      	ldrh	r3, [r4, #12]
 800f740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f744:	f04f 0100 	mov.w	r1, #0
 800f748:	bf14      	ite	ne
 800f74a:	2340      	movne	r3, #64	@ 0x40
 800f74c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f750:	2000      	movs	r0, #0
 800f752:	6031      	str	r1, [r6, #0]
 800f754:	602b      	str	r3, [r5, #0]
 800f756:	b016      	add	sp, #88	@ 0x58
 800f758:	bd70      	pop	{r4, r5, r6, pc}
 800f75a:	466a      	mov	r2, sp
 800f75c:	f000 f848 	bl	800f7f0 <_fstat_r>
 800f760:	2800      	cmp	r0, #0
 800f762:	dbec      	blt.n	800f73e <__swhatbuf_r+0x12>
 800f764:	9901      	ldr	r1, [sp, #4]
 800f766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f76a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f76e:	4259      	negs	r1, r3
 800f770:	4159      	adcs	r1, r3
 800f772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f776:	e7eb      	b.n	800f750 <__swhatbuf_r+0x24>

0800f778 <__smakebuf_r>:
 800f778:	898b      	ldrh	r3, [r1, #12]
 800f77a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f77c:	079d      	lsls	r5, r3, #30
 800f77e:	4606      	mov	r6, r0
 800f780:	460c      	mov	r4, r1
 800f782:	d507      	bpl.n	800f794 <__smakebuf_r+0x1c>
 800f784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	6123      	str	r3, [r4, #16]
 800f78c:	2301      	movs	r3, #1
 800f78e:	6163      	str	r3, [r4, #20]
 800f790:	b003      	add	sp, #12
 800f792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f794:	ab01      	add	r3, sp, #4
 800f796:	466a      	mov	r2, sp
 800f798:	f7ff ffc8 	bl	800f72c <__swhatbuf_r>
 800f79c:	9f00      	ldr	r7, [sp, #0]
 800f79e:	4605      	mov	r5, r0
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f7ff f912 	bl	800e9cc <_malloc_r>
 800f7a8:	b948      	cbnz	r0, 800f7be <__smakebuf_r+0x46>
 800f7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ae:	059a      	lsls	r2, r3, #22
 800f7b0:	d4ee      	bmi.n	800f790 <__smakebuf_r+0x18>
 800f7b2:	f023 0303 	bic.w	r3, r3, #3
 800f7b6:	f043 0302 	orr.w	r3, r3, #2
 800f7ba:	81a3      	strh	r3, [r4, #12]
 800f7bc:	e7e2      	b.n	800f784 <__smakebuf_r+0xc>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	6020      	str	r0, [r4, #0]
 800f7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7c6:	81a3      	strh	r3, [r4, #12]
 800f7c8:	9b01      	ldr	r3, [sp, #4]
 800f7ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7ce:	b15b      	cbz	r3, 800f7e8 <__smakebuf_r+0x70>
 800f7d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f000 f81d 	bl	800f814 <_isatty_r>
 800f7da:	b128      	cbz	r0, 800f7e8 <__smakebuf_r+0x70>
 800f7dc:	89a3      	ldrh	r3, [r4, #12]
 800f7de:	f023 0303 	bic.w	r3, r3, #3
 800f7e2:	f043 0301 	orr.w	r3, r3, #1
 800f7e6:	81a3      	strh	r3, [r4, #12]
 800f7e8:	89a3      	ldrh	r3, [r4, #12]
 800f7ea:	431d      	orrs	r5, r3
 800f7ec:	81a5      	strh	r5, [r4, #12]
 800f7ee:	e7cf      	b.n	800f790 <__smakebuf_r+0x18>

0800f7f0 <_fstat_r>:
 800f7f0:	b538      	push	{r3, r4, r5, lr}
 800f7f2:	4d07      	ldr	r5, [pc, #28]	@ (800f810 <_fstat_r+0x20>)
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	4608      	mov	r0, r1
 800f7fa:	4611      	mov	r1, r2
 800f7fc:	602b      	str	r3, [r5, #0]
 800f7fe:	f7f5 feab 	bl	8005558 <_fstat>
 800f802:	1c43      	adds	r3, r0, #1
 800f804:	d102      	bne.n	800f80c <_fstat_r+0x1c>
 800f806:	682b      	ldr	r3, [r5, #0]
 800f808:	b103      	cbz	r3, 800f80c <_fstat_r+0x1c>
 800f80a:	6023      	str	r3, [r4, #0]
 800f80c:	bd38      	pop	{r3, r4, r5, pc}
 800f80e:	bf00      	nop
 800f810:	20004d5c 	.word	0x20004d5c

0800f814 <_isatty_r>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	4d06      	ldr	r5, [pc, #24]	@ (800f830 <_isatty_r+0x1c>)
 800f818:	2300      	movs	r3, #0
 800f81a:	4604      	mov	r4, r0
 800f81c:	4608      	mov	r0, r1
 800f81e:	602b      	str	r3, [r5, #0]
 800f820:	f7f5 feaa 	bl	8005578 <_isatty>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <_isatty_r+0x1a>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b103      	cbz	r3, 800f82e <_isatty_r+0x1a>
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	20004d5c 	.word	0x20004d5c

0800f834 <_init>:
 800f834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f836:	bf00      	nop
 800f838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f83a:	bc08      	pop	{r3}
 800f83c:	469e      	mov	lr, r3
 800f83e:	4770      	bx	lr

0800f840 <_fini>:
 800f840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f842:	bf00      	nop
 800f844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f846:	bc08      	pop	{r3}
 800f848:	469e      	mov	lr, r3
 800f84a:	4770      	bx	lr
