
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e4d8  0800d3c0  0800d3c0  0000e3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b898  0801b898  0001d0b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801b898  0801b898  0001c898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8a0  0801b8a0  0001d0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8a0  0801b8a0  0001c8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8a4  0801b8a4  0001c8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0801b8a8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb0  200000b8  0801b960  0001d0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c68  0801b960  0001dc68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0eb  00000000  00000000  0001d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006fca  00000000  00000000  0004b1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002720  00000000  00000000  000521a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e25  00000000  00000000  000548c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030f62  00000000  00000000  000566e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034a03  00000000  00000000  00087647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118a91  00000000  00000000  000bc04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d4adb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad2c  00000000  00000000  001d4b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001df84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d3a8 	.word	0x0800d3a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800d3a8 	.word	0x0800d3a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f004 fafd 	bl	8004c00 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f002 f934 	bl	8002878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f004 fc97 	bl	8004f54 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f002 f924 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000d4 	.word	0x200000d4
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f004 faab 	bl	8004c00 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f002 f8e2 	bl	8002878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f004 fc45 	bl	8004f54 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f002 f8d2 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000011c 	.word	0x2000011c
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f005 fd6d 	bl	800622c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f005 fd42 	bl	800622c <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DAC_Init+0x50>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007da:	f004 feed 	bl	80055b8 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e4:	f002 f848 	bl	8002878 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007f8:	f004 ff64 	bl	80056c4 <HAL_DAC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000802:	f002 f839 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000164 	.word	0x20000164
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_DAC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_DAC_MspInit+0x8c>)
 800087e:	f005 fcd5 	bl	800622c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	2036      	movs	r0, #54	@ 0x36
 8000888:	f004 fe6c 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	@ 0x36
 800088e:	f004 fe85 	bl	800559c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40007400 	.word	0x40007400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_DMA2D_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008de:	f005 f909 	bl	8005af4 <HAL_DMA2D_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e8:	f001 ffc6 	bl	8002878 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008f0:	f005 fb6e 	bl	8005fd0 <HAL_DMA2D_ConfigLayer>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f001 ffbd 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000178 	.word	0x20000178
 8000908:	4002b000 	.word	0x4002b000

0800090c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <HAL_DMA2D_MspInit+0x44>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d113      	bne.n	8000946 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	205a      	movs	r0, #90	@ 0x5a
 800093c:	f004 fe12 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000940:	205a      	movs	r0, #90	@ 0x5a
 8000942:	f004 fe2b 	bl	800559c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	4002b000 	.word	0x4002b000
 8000954:	40023800 	.word	0x40023800

08000958 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FMC_Init+0x9c>)
 8000974:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FMC_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000984:	2204      	movs	r2, #4
 8000986:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FMC_Init+0x98>)
 800098a:	2210      	movs	r2, #16
 800098c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000996:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800099a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_FMC_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009bc:	2307      	movs	r3, #7
 80009be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009da:	f008 fd81 	bl	80094e0 <HAL_SDRAM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e4:	f001 ff48 	bl	8002878 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001b8 	.word	0x200001b8
 80009f4:	a0000140 	.word	0xa0000140

080009f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d16d      	bne.n	8000af0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a14:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a1e:	4a37      	ldr	r2, [pc, #220]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a32:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a36:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FMC_MspInit+0x108>)
 8000a4e:	f005 fbed 	bl	800622c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a52:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a56:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <HAL_FMC_MspInit+0x10c>)
 8000a6e:	f005 fbdd 	bl	800622c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a76:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <HAL_FMC_MspInit+0x110>)
 8000a8e:	f005 fbcd 	bl	800622c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a96:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <HAL_FMC_MspInit+0x114>)
 8000aae:	f005 fbbd 	bl	800622c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ab2:	2328      	movs	r3, #40	@ 0x28
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <HAL_FMC_MspInit+0x118>)
 8000acc:	f005 fbae 	bl	800622c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	@ (8000b14 <HAL_FMC_MspInit+0x11c>)
 8000aea:	f005 fb9f 	bl	800622c <HAL_GPIO_Init>
 8000aee:	e000      	b.n	8000af2 <HAL_FMC_MspInit+0xfa>
    return;
 8000af0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001ec 	.word	0x200001ec
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b20:	f7ff ff6a 	bl	80009f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <vApplicationGetIdleTaskMemory+0x30>)
 8000b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000380 	.word	0x20000380
 8000b5c:	200003d4 	.word	0x200003d4

08000b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b09c      	sub	sp, #112	@ 0x70
 8000b64:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b66:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <MX_FREERTOS_Init+0xa4>)
 8000b68:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000b6c:	461d      	mov	r5, r3
 8000b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00a f824 	bl	800abce <osThreadCreate>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a1f      	ldr	r2, [pc, #124]	@ (8000c08 <MX_FREERTOS_Init+0xa8>)
 8000b8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_FREERTOS_Init+0xac>)
 8000b8e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000b92:	461d      	mov	r5, r3
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8000ba0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f00a f811 	bl	800abce <osThreadCreate>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a18      	ldr	r2, [pc, #96]	@ (8000c10 <MX_FREERTOS_Init+0xb0>)
 8000bb0:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_FREERTOS_Init+0xb4>)
 8000bb4:	f107 041c 	add.w	r4, r7, #28
 8000bb8:	461d      	mov	r5, r3
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f009 fffe 	bl	800abce <osThreadCreate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <MX_FREERTOS_Init+0xb8>)
 8000bd6:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_FREERTOS_Init+0xbc>)
 8000bda:	463c      	mov	r4, r7
 8000bdc:	461d      	mov	r5, r3
 8000bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 8000bea:	463b      	mov	r3, r7
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f009 ffed 	bl	800abce <osThreadCreate>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <MX_FREERTOS_Init+0xc0>)
 8000bf8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bfa:	bf00      	nop
 8000bfc:	3770      	adds	r7, #112	@ 0x70
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0800d3cc 	.word	0x0800d3cc
 8000c08:	20000370 	.word	0x20000370
 8000c0c:	0800d3f4 	.word	0x0800d3f4
 8000c10:	20000374 	.word	0x20000374
 8000c14:	0800d420 	.word	0x0800d420
 8000c18:	20000378 	.word	0x20000378
 8000c1c:	0800d44c 	.word	0x0800d44c
 8000c20:	2000037c 	.word	0x2000037c

08000c24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f00a f81a 	bl	800ac66 <osDelay>
 8000c32:	e7fb      	b.n	8000c2c <StartDefaultTask+0x8>

08000c34 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0b6      	sub	sp, #216	@ 0xd8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8000c3c:	48b3      	ldr	r0, [pc, #716]	@ (8000f0c <StartDisplayTask+0x2d8>)
 8000c3e:	f002 fa3f 	bl	80030c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 8000c42:	f002 f9a5 	bl	8002f90 <BSP_LCD_GetXSize>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c50:	2000      	movs	r0, #0
 8000c52:	f002 fbb5 	bl	80033c0 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 8000c56:	f002 f99b 	bl	8002f90 <BSP_LCD_GetXSize>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f240 1101 	movw	r1, #257	@ 0x101
 8000c64:	2000      	movs	r0, #0
 8000c66:	f002 fbab 	bl	80033c0 <BSP_LCD_DrawHLine>

    char directionText[100];
    // on affiche la direction
    switch (direction) {
 8000c6a:	4ba9      	ldr	r3, [pc, #676]	@ (8000f10 <StartDisplayTask+0x2dc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d826      	bhi.n	8000cc0 <StartDisplayTask+0x8c>
 8000c72:	a201      	add	r2, pc, #4	@ (adr r2, 8000c78 <StartDisplayTask+0x44>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000c89 	.word	0x08000c89
 8000c7c:	08000c97 	.word	0x08000c97
 8000c80:	08000ca5 	.word	0x08000ca5
 8000c84:	08000cb3 	.word	0x08000cb3
      case Up:
        sprintf(directionText, (char *)"Direction: Up   ");
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	49a1      	ldr	r1, [pc, #644]	@ (8000f14 <StartDisplayTask+0x2e0>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f00b fad6 	bl	800c240 <siprintf>
        break;
 8000c94:	e014      	b.n	8000cc0 <StartDisplayTask+0x8c>
      case Down:
        sprintf(directionText, (char *)"Direction: Down ");
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	499f      	ldr	r1, [pc, #636]	@ (8000f18 <StartDisplayTask+0x2e4>)
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f00b facf 	bl	800c240 <siprintf>
        break;
 8000ca2:	e00d      	b.n	8000cc0 <StartDisplayTask+0x8c>
      case Left:
        sprintf(directionText, (char *)"Direction: Left ");
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	499c      	ldr	r1, [pc, #624]	@ (8000f1c <StartDisplayTask+0x2e8>)
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00b fac8 	bl	800c240 <siprintf>
        break;
 8000cb0:	e006      	b.n	8000cc0 <StartDisplayTask+0x8c>
      case Right:
        sprintf(directionText, (char *)"Direction: Right");
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	499a      	ldr	r1, [pc, #616]	@ (8000f20 <StartDisplayTask+0x2ec>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f00b fac1 	bl	800c240 <siprintf>
        break;
 8000cbe:	bf00      	nop
    }
    BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 8000cc0:	f107 020c 	add.w	r2, r7, #12
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f002 fab0 	bl	8003230 <BSP_LCD_DisplayStringAt>

    // On affiche le score a la suite de la direction
    char scoreText[100];
    sprintf(scoreText, (char *)"Score: %d", snakeSize);
 8000cd0:	4b94      	ldr	r3, [pc, #592]	@ (8000f24 <StartDisplayTask+0x2f0>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000cda:	4993      	ldr	r1, [pc, #588]	@ (8000f28 <StartDisplayTask+0x2f4>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00b faaf 	bl	800c240 <siprintf>
    BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8000ce2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000cec:	20c8      	movs	r0, #200	@ 0xc8
 8000cee:	f002 fa9f 	bl	8003230 <BSP_LCD_DisplayStringAt>


    // On affiche la tête du snake
    switch (headPart) {
 8000cf2:	4b8e      	ldr	r3, [pc, #568]	@ (8000f2c <StartDisplayTask+0x2f8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d83a      	bhi.n	8000d70 <StartDisplayTask+0x13c>
 8000cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <StartDisplayTask+0xcc>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d29 	.word	0x08000d29
 8000d04:	08000d11 	.word	0x08000d11
 8000d08:	08000d41 	.word	0x08000d41
 8000d0c:	08000d59 	.word	0x08000d59
      case HeadBottom:
        BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8000d10:	4b87      	ldr	r3, [pc, #540]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	015b      	lsls	r3, r3, #5
 8000d16:	4618      	mov	r0, r3
 8000d18:	4b85      	ldr	r3, [pc, #532]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	015b      	lsls	r3, r3, #5
 8000d1e:	4a85      	ldr	r2, [pc, #532]	@ (8000f34 <StartDisplayTask+0x300>)
 8000d20:	4619      	mov	r1, r3
 8000d22:	f002 fbf3 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000d26:	e023      	b.n	8000d70 <StartDisplayTask+0x13c>
      case HeadTop:
        BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 8000d28:	4b81      	ldr	r3, [pc, #516]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	015b      	lsls	r3, r3, #5
 8000d2e:	4618      	mov	r0, r3
 8000d30:	4b7f      	ldr	r3, [pc, #508]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	015b      	lsls	r3, r3, #5
 8000d36:	4a80      	ldr	r2, [pc, #512]	@ (8000f38 <StartDisplayTask+0x304>)
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f002 fbe7 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000d3e:	e017      	b.n	8000d70 <StartDisplayTask+0x13c>
      case HeadLeft:
        BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8000d40:	4b7b      	ldr	r3, [pc, #492]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	015b      	lsls	r3, r3, #5
 8000d46:	4618      	mov	r0, r3
 8000d48:	4b79      	ldr	r3, [pc, #484]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	015b      	lsls	r3, r3, #5
 8000d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f3c <StartDisplayTask+0x308>)
 8000d50:	4619      	mov	r1, r3
 8000d52:	f002 fbdb 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000d56:	e00b      	b.n	8000d70 <StartDisplayTask+0x13c>
      case HeadRight:
        BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 8000d58:	4b75      	ldr	r3, [pc, #468]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	015b      	lsls	r3, r3, #5
 8000d5e:	4618      	mov	r0, r3
 8000d60:	4b73      	ldr	r3, [pc, #460]	@ (8000f30 <StartDisplayTask+0x2fc>)
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	015b      	lsls	r3, r3, #5
 8000d66:	4a76      	ldr	r2, [pc, #472]	@ (8000f40 <StartDisplayTask+0x30c>)
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f002 fbcf 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000d6e:	bf00      	nop
    }


    // On affiche le corps du snake
    for (int i = 0; i < snakeSize; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000d76:	e08e      	b.n	8000e96 <StartDisplayTask+0x262>
      switch (snakeBodyParts[i]) {
 8000d78:	4a72      	ldr	r2, [pc, #456]	@ (8000f44 <StartDisplayTask+0x310>)
 8000d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000d7e:	4413      	add	r3, r2
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b05      	cmp	r3, #5
 8000d84:	f200 8082 	bhi.w	8000e8c <StartDisplayTask+0x258>
 8000d88:	a201      	add	r2, pc, #4	@ (adr r2, 8000d90 <StartDisplayTask+0x15c>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000da9 	.word	0x08000da9
 8000d94:	08000dcf 	.word	0x08000dcf
 8000d98:	08000df5 	.word	0x08000df5
 8000d9c:	08000e1b 	.word	0x08000e1b
 8000da0:	08000e41 	.word	0x08000e41
 8000da4:	08000e67 	.word	0x08000e67
        case BottomLeft:
          BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8000da8:	4a67      	ldr	r2, [pc, #412]	@ (8000f48 <StartDisplayTask+0x314>)
 8000daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000db2:	015b      	lsls	r3, r3, #5
 8000db4:	4618      	mov	r0, r3
 8000db6:	4a64      	ldr	r2, [pc, #400]	@ (8000f48 <StartDisplayTask+0x314>)
 8000db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	015b      	lsls	r3, r3, #5
 8000dc4:	4a61      	ldr	r2, [pc, #388]	@ (8000f4c <StartDisplayTask+0x318>)
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f002 fba0 	bl	800350c <BSP_LCD_DrawBitmap>
          break;
 8000dcc:	e05e      	b.n	8000e8c <StartDisplayTask+0x258>
        case BottomRight:
          BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8000dce:	4a5e      	ldr	r2, [pc, #376]	@ (8000f48 <StartDisplayTask+0x314>)
 8000dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dd4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000dd8:	015b      	lsls	r3, r3, #5
 8000dda:	4618      	mov	r0, r3
 8000ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8000f48 <StartDisplayTask+0x314>)
 8000dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	015b      	lsls	r3, r3, #5
 8000dea:	4a59      	ldr	r2, [pc, #356]	@ (8000f50 <StartDisplayTask+0x31c>)
 8000dec:	4619      	mov	r1, r3
 8000dee:	f002 fb8d 	bl	800350c <BSP_LCD_DrawBitmap>
          break;
 8000df2:	e04b      	b.n	8000e8c <StartDisplayTask+0x258>
        case BottomTop:
          BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8000df4:	4a54      	ldr	r2, [pc, #336]	@ (8000f48 <StartDisplayTask+0x314>)
 8000df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dfa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000dfe:	015b      	lsls	r3, r3, #5
 8000e00:	4618      	mov	r0, r3
 8000e02:	4a51      	ldr	r2, [pc, #324]	@ (8000f48 <StartDisplayTask+0x314>)
 8000e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	015b      	lsls	r3, r3, #5
 8000e10:	4a50      	ldr	r2, [pc, #320]	@ (8000f54 <StartDisplayTask+0x320>)
 8000e12:	4619      	mov	r1, r3
 8000e14:	f002 fb7a 	bl	800350c <BSP_LCD_DrawBitmap>
          break;
 8000e18:	e038      	b.n	8000e8c <StartDisplayTask+0x258>
        case LeftRight:
          BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 8000e1a:	4a4b      	ldr	r2, [pc, #300]	@ (8000f48 <StartDisplayTask+0x314>)
 8000e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e20:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e24:	015b      	lsls	r3, r3, #5
 8000e26:	4618      	mov	r0, r3
 8000e28:	4a47      	ldr	r2, [pc, #284]	@ (8000f48 <StartDisplayTask+0x314>)
 8000e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	015b      	lsls	r3, r3, #5
 8000e36:	4a48      	ldr	r2, [pc, #288]	@ (8000f58 <StartDisplayTask+0x324>)
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f002 fb67 	bl	800350c <BSP_LCD_DrawBitmap>
          break;
 8000e3e:	e025      	b.n	8000e8c <StartDisplayTask+0x258>
        case LeftTop:
          BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8000e40:	4a41      	ldr	r2, [pc, #260]	@ (8000f48 <StartDisplayTask+0x314>)
 8000e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e46:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f48 <StartDisplayTask+0x314>)
 8000e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	785b      	ldrb	r3, [r3, #1]
 8000e5a:	015b      	lsls	r3, r3, #5
 8000e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f5c <StartDisplayTask+0x328>)
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f002 fb54 	bl	800350c <BSP_LCD_DrawBitmap>
          break;
 8000e64:	e012      	b.n	8000e8c <StartDisplayTask+0x258>
        case RightTop:
          BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 8000e66:	4a38      	ldr	r2, [pc, #224]	@ (8000f48 <StartDisplayTask+0x314>)
 8000e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e6c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e70:	015b      	lsls	r3, r3, #5
 8000e72:	4618      	mov	r0, r3
 8000e74:	4a34      	ldr	r2, [pc, #208]	@ (8000f48 <StartDisplayTask+0x314>)
 8000e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	015b      	lsls	r3, r3, #5
 8000e82:	4a37      	ldr	r2, [pc, #220]	@ (8000f60 <StartDisplayTask+0x32c>)
 8000e84:	4619      	mov	r1, r3
 8000e86:	f002 fb41 	bl	800350c <BSP_LCD_DrawBitmap>
          break;
 8000e8a:	bf00      	nop
    for (int i = 0; i < snakeSize; i++) {
 8000e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e90:	3301      	adds	r3, #1
 8000e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <StartDisplayTask+0x2f0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	f6ff af69 	blt.w	8000d78 <StartDisplayTask+0x144>
      }
    }

    // On affiche la queue du snake
    switch (tailPart) {
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f64 <StartDisplayTask+0x330>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d870      	bhi.n	8000f90 <StartDisplayTask+0x35c>
 8000eae:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb4 <StartDisplayTask+0x280>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000ec5 	.word	0x08000ec5
 8000eb8:	08000edd 	.word	0x08000edd
 8000ebc:	08000ef5 	.word	0x08000ef5
 8000ec0:	08000f79 	.word	0x08000f79
      case TailBottom:
        BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8000ec4:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <StartDisplayTask+0x334>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	015b      	lsls	r3, r3, #5
 8000eca:	4618      	mov	r0, r3
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <StartDisplayTask+0x334>)
 8000ece:	785b      	ldrb	r3, [r3, #1]
 8000ed0:	015b      	lsls	r3, r3, #5
 8000ed2:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <StartDisplayTask+0x338>)
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f002 fb19 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000eda:	e059      	b.n	8000f90 <StartDisplayTask+0x35c>
      case TailTop:
        BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8000edc:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <StartDisplayTask+0x334>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	015b      	lsls	r3, r3, #5
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <StartDisplayTask+0x334>)
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <StartDisplayTask+0x33c>)
 8000eec:	4619      	mov	r1, r3
 8000eee:	f002 fb0d 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000ef2:	e04d      	b.n	8000f90 <StartDisplayTask+0x35c>
      case TailLeft:
        BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <StartDisplayTask+0x334>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	015b      	lsls	r3, r3, #5
 8000efa:	4618      	mov	r0, r3
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <StartDisplayTask+0x334>)
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	015b      	lsls	r3, r3, #5
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <StartDisplayTask+0x340>)
 8000f04:	4619      	mov	r1, r3
 8000f06:	f002 fb01 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000f0a:	e041      	b.n	8000f90 <StartDisplayTask+0x35c>
 8000f0c:	ffa52a2a 	.word	0xffa52a2a
 8000f10:	200001f8 	.word	0x200001f8
 8000f14:	0800d468 	.word	0x0800d468
 8000f18:	0800d47c 	.word	0x0800d47c
 8000f1c:	0800d490 	.word	0x0800d490
 8000f20:	0800d4a4 	.word	0x0800d4a4
 8000f24:	20000274 	.word	0x20000274
 8000f28:	0800d4b8 	.word	0x0800d4b8
 8000f2c:	200001f9 	.word	0x200001f9
 8000f30:	20000004 	.word	0x20000004
 8000f34:	080106fc 	.word	0x080106fc
 8000f38:	08011388 	.word	0x08011388
 8000f3c:	08012014 	.word	0x08012014
 8000f40:	08012ca0 	.word	0x08012ca0
 8000f44:	200001fc 	.word	0x200001fc
 8000f48:	2000027c 	.word	0x2000027c
 8000f4c:	0800e158 	.word	0x0800e158
 8000f50:	0800ede4 	.word	0x0800ede4
 8000f54:	0800fa70 	.word	0x0800fa70
 8000f58:	0801392c 	.word	0x0801392c
 8000f5c:	080145b8 	.word	0x080145b8
 8000f60:	08015244 	.word	0x08015244
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	08015ed0 	.word	0x08015ed0
 8000f70:	08016b5c 	.word	0x08016b5c
 8000f74:	080177e8 	.word	0x080177e8
      case TailRight:
        BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <StartDisplayTask+0x3b8>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4618      	mov	r0, r3
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <StartDisplayTask+0x3b8>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	015b      	lsls	r3, r3, #5
 8000f86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <StartDisplayTask+0x3bc>)
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f002 fabf 	bl	800350c <BSP_LCD_DrawBitmap>
        break;
 8000f8e:	bf00      	nop
    }

    // On efface l'ancienne queue avec un carré vert
    if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <StartDisplayTask+0x3c0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d11a      	bne.n	8000fce <StartDisplayTask+0x39a>
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <StartDisplayTask+0x3c4>)
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <StartDisplayTask+0x3c8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d105      	bne.n	8000fb0 <StartDisplayTask+0x37c>
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <StartDisplayTask+0x3c4>)
 8000fa6:	785a      	ldrb	r2, [r3, #1]
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <StartDisplayTask+0x3c8>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d00e      	beq.n	8000fce <StartDisplayTask+0x39a>
      BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8000fb0:	4813      	ldr	r0, [pc, #76]	@ (8001000 <StartDisplayTask+0x3cc>)
 8000fb2:	f002 f885 	bl	80030c0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <StartDisplayTask+0x3c8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	015b      	lsls	r3, r3, #5
 8000fbc:	b298      	uxth	r0, r3
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <StartDisplayTask+0x3c8>)
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	2220      	movs	r2, #32
 8000fca:	f002 fb51 	bl	8003670 <BSP_LCD_FillRect>
    }
    // On affiche la pomme
    BSP_LCD_DrawBitmap(applePosition[0]*32, applePosition[1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <StartDisplayTask+0x3d0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <StartDisplayTask+0x3d0>)
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	015b      	lsls	r3, r3, #5
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <StartDisplayTask+0x3d4>)
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f002 fa94 	bl	800350c <BSP_LCD_DrawBitmap>


    osDelay(100);
 8000fe4:	2064      	movs	r0, #100	@ 0x64
 8000fe6:	f009 fe3e 	bl	800ac66 <osDelay>
  {
 8000fea:	e627      	b.n	8000c3c <StartDisplayTask+0x8>
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	08018474 	.word	0x08018474
 8000ff4:	20000278 	.word	0x20000278
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	2000036c 	.word	0x2000036c
 8001000:	ff81cd4b 	.word	0xff81cd4b
 8001004:	2000000c 	.word	0x2000000c
 8001008:	0800d4cc 	.word	0x0800d4cc

0800100c <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 8001014:	4b30      	ldr	r3, [pc, #192]	@ (80010d8 <StartJoystickTask+0xcc>)
 8001016:	2208      	movs	r2, #8
 8001018:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800101a:	492f      	ldr	r1, [pc, #188]	@ (80010d8 <StartJoystickTask+0xcc>)
 800101c:	482f      	ldr	r0, [pc, #188]	@ (80010dc <StartJoystickTask+0xd0>)
 800101e:	f003 ff99 	bl	8004f54 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8001022:	482e      	ldr	r0, [pc, #184]	@ (80010dc <StartJoystickTask+0xd0>)
 8001024:	f003 fe30 	bl	8004c88 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001028:	bf00      	nop
 800102a:	2164      	movs	r1, #100	@ 0x64
 800102c:	482b      	ldr	r0, [pc, #172]	@ (80010dc <StartJoystickTask+0xd0>)
 800102e:	f003 fef9 	bl	8004e24 <HAL_ADC_PollForConversion>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f8      	bne.n	800102a <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8001038:	4828      	ldr	r0, [pc, #160]	@ (80010dc <StartJoystickTask+0xd0>)
 800103a:	f003 ff7e 	bl	8004f3a <HAL_ADC_GetValue>
 800103e:	4603      	mov	r3, r0
 8001040:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <StartJoystickTask+0xd4>)
 8001042:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8001044:	4827      	ldr	r0, [pc, #156]	@ (80010e4 <StartJoystickTask+0xd8>)
 8001046:	f003 fe1f 	bl	8004c88 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 800104a:	bf00      	nop
 800104c:	2164      	movs	r1, #100	@ 0x64
 800104e:	4825      	ldr	r0, [pc, #148]	@ (80010e4 <StartJoystickTask+0xd8>)
 8001050:	f003 fee8 	bl	8004e24 <HAL_ADC_PollForConversion>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f8      	bne.n	800104c <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800105a:	4822      	ldr	r0, [pc, #136]	@ (80010e4 <StartJoystickTask+0xd8>)
 800105c:	f003 ff6d 	bl	8004f3a <HAL_ADC_GetValue>
 8001060:	4603      	mov	r3, r0
 8001062:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <StartJoystickTask+0xdc>)
 8001064:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <StartJoystickTask+0xd4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800106e:	d207      	bcs.n	8001080 <StartJoystickTask+0x74>
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <StartJoystickTask+0xe0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <StartJoystickTask+0x74>
      direction = Down;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <StartJoystickTask+0xe4>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e027      	b.n	80010d0 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <StartJoystickTask+0xd4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001088:	4293      	cmp	r3, r2
 800108a:	d907      	bls.n	800109c <StartJoystickTask+0x90>
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <StartJoystickTask+0xe0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d003      	beq.n	800109c <StartJoystickTask+0x90>
      direction = Up;
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <StartJoystickTask+0xe4>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e019      	b.n	80010d0 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <StartJoystickTask+0xdc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010a4:	d207      	bcs.n	80010b6 <StartJoystickTask+0xaa>
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <StartJoystickTask+0xe0>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d003      	beq.n	80010b6 <StartJoystickTask+0xaa>
      direction = Right;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <StartJoystickTask+0xe4>)
 80010b0:	2203      	movs	r2, #3
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e00c      	b.n	80010d0 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <StartJoystickTask+0xdc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80010be:	4293      	cmp	r3, r2
 80010c0:	d906      	bls.n	80010d0 <StartJoystickTask+0xc4>
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <StartJoystickTask+0xe0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d002      	beq.n	80010d0 <StartJoystickTask+0xc4>
      direction = Left;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <StartJoystickTask+0xe4>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	701a      	strb	r2, [r3, #0]
    }
    osDelay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f009 fdc8 	bl	800ac66 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 80010d6:	e79d      	b.n	8001014 <StartJoystickTask+0x8>
 80010d8:	2000072c 	.word	0x2000072c
 80010dc:	2000011c 	.word	0x2000011c
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	200000d4 	.word	0x200000d4
 80010e8:	200001f4 	.word	0x200001f4
 80010ec:	200001f9 	.word	0x200001f9
 80010f0:	200001f8 	.word	0x200001f8

080010f4 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
    // remplir le tableau snakeBodyParts en fonction de snakePosition
    // on doit changer la tete et la bodyPart juste apres la tete, le reste ne change pas
    // on doit aussi faire avancer la queue
    // on avance le snake

    oldTailPosition[0] = snakeTailPosition[0];
 80010fc:	4b9b      	ldr	r3, [pc, #620]	@ (800136c <StartManageBodyParts+0x278>)
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	4b9b      	ldr	r3, [pc, #620]	@ (8001370 <StartManageBodyParts+0x27c>)
 8001102:	701a      	strb	r2, [r3, #0]
    oldTailPosition[1] = snakeTailPosition[1];
 8001104:	4b99      	ldr	r3, [pc, #612]	@ (800136c <StartManageBodyParts+0x278>)
 8001106:	785a      	ldrb	r2, [r3, #1]
 8001108:	4b99      	ldr	r3, [pc, #612]	@ (8001370 <StartManageBodyParts+0x27c>)
 800110a:	705a      	strb	r2, [r3, #1]

    uint8_t oldHeadPosition[2];
    oldHeadPosition[0] = snakeHeadPosition[0];
 800110c:	4b99      	ldr	r3, [pc, #612]	@ (8001374 <StartManageBodyParts+0x280>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	733b      	strb	r3, [r7, #12]
    oldHeadPosition[1] = snakeHeadPosition[1];
 8001112:	4b98      	ldr	r3, [pc, #608]	@ (8001374 <StartManageBodyParts+0x280>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	737b      	strb	r3, [r7, #13]


    // la tête
    switch (direction) {
 8001118:	4b97      	ldr	r3, [pc, #604]	@ (8001378 <StartManageBodyParts+0x284>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d833      	bhi.n	8001188 <StartManageBodyParts+0x94>
 8001120:	a201      	add	r2, pc, #4	@ (adr r2, 8001128 <StartManageBodyParts+0x34>)
 8001122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001126:	bf00      	nop
 8001128:	08001139 	.word	0x08001139
 800112c:	0800114d 	.word	0x0800114d
 8001130:	08001161 	.word	0x08001161
 8001134:	08001175 	.word	0x08001175
      case Up:
        headPart = HeadTop;
 8001138:	4b90      	ldr	r3, [pc, #576]	@ (800137c <StartManageBodyParts+0x288>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
        snakeHeadPosition[1]--;
 800113e:	4b8d      	ldr	r3, [pc, #564]	@ (8001374 <StartManageBodyParts+0x280>)
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	3b01      	subs	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b8b      	ldr	r3, [pc, #556]	@ (8001374 <StartManageBodyParts+0x280>)
 8001148:	705a      	strb	r2, [r3, #1]
        break;
 800114a:	e01d      	b.n	8001188 <StartManageBodyParts+0x94>
      case Down:
        headPart = HeadBottom;
 800114c:	4b8b      	ldr	r3, [pc, #556]	@ (800137c <StartManageBodyParts+0x288>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
        snakeHeadPosition[1]++;
 8001152:	4b88      	ldr	r3, [pc, #544]	@ (8001374 <StartManageBodyParts+0x280>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b86      	ldr	r3, [pc, #536]	@ (8001374 <StartManageBodyParts+0x280>)
 800115c:	705a      	strb	r2, [r3, #1]
        break;
 800115e:	e013      	b.n	8001188 <StartManageBodyParts+0x94>
      case Left:
        headPart = HeadLeft;
 8001160:	4b86      	ldr	r3, [pc, #536]	@ (800137c <StartManageBodyParts+0x288>)
 8001162:	2202      	movs	r2, #2
 8001164:	701a      	strb	r2, [r3, #0]
        snakeHeadPosition[0]--;
 8001166:	4b83      	ldr	r3, [pc, #524]	@ (8001374 <StartManageBodyParts+0x280>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b81      	ldr	r3, [pc, #516]	@ (8001374 <StartManageBodyParts+0x280>)
 8001170:	701a      	strb	r2, [r3, #0]
        break;
 8001172:	e009      	b.n	8001188 <StartManageBodyParts+0x94>
      case Right:
        headPart = HeadRight;
 8001174:	4b81      	ldr	r3, [pc, #516]	@ (800137c <StartManageBodyParts+0x288>)
 8001176:	2203      	movs	r2, #3
 8001178:	701a      	strb	r2, [r3, #0]
        snakeHeadPosition[0]++;
 800117a:	4b7e      	ldr	r3, [pc, #504]	@ (8001374 <StartManageBodyParts+0x280>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b7c      	ldr	r3, [pc, #496]	@ (8001374 <StartManageBodyParts+0x280>)
 8001184:	701a      	strb	r2, [r3, #0]
        break;
 8001186:	bf00      	nop
    }

    // on vérifie si on est mort
    if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001188:	4b7a      	ldr	r3, [pc, #488]	@ (8001374 <StartManageBodyParts+0x280>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	220f      	movs	r2, #15
 800118e:	4293      	cmp	r3, r2
 8001190:	d204      	bcs.n	800119c <StartManageBodyParts+0xa8>
 8001192:	4b78      	ldr	r3, [pc, #480]	@ (8001374 <StartManageBodyParts+0x280>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	2208      	movs	r2, #8
 8001198:	4293      	cmp	r3, r2
 800119a:	d31a      	bcc.n	80011d2 <StartManageBodyParts+0xde>
      snakeSize = 0;
 800119c:	4b78      	ldr	r3, [pc, #480]	@ (8001380 <StartManageBodyParts+0x28c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
      snakeHeadPosition[0] = 7;
 80011a2:	4b74      	ldr	r3, [pc, #464]	@ (8001374 <StartManageBodyParts+0x280>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	701a      	strb	r2, [r3, #0]
      snakeHeadPosition[1] = 6;
 80011a8:	4b72      	ldr	r3, [pc, #456]	@ (8001374 <StartManageBodyParts+0x280>)
 80011aa:	2206      	movs	r2, #6
 80011ac:	705a      	strb	r2, [r3, #1]
      snakeTailPosition[0] = 7;
 80011ae:	4b6f      	ldr	r3, [pc, #444]	@ (800136c <StartManageBodyParts+0x278>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	701a      	strb	r2, [r3, #0]
      snakeTailPosition[1] = 7;
 80011b4:	4b6d      	ldr	r3, [pc, #436]	@ (800136c <StartManageBodyParts+0x278>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	705a      	strb	r2, [r3, #1]
      direction = Up;
 80011ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001378 <StartManageBodyParts+0x284>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
      headPart = HeadTop;
 80011c0:	4b6e      	ldr	r3, [pc, #440]	@ (800137c <StartManageBodyParts+0x288>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
      tailPart = TailTop;
 80011c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001384 <StartManageBodyParts+0x290>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
      BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80011cc:	486e      	ldr	r0, [pc, #440]	@ (8001388 <StartManageBodyParts+0x294>)
 80011ce:	f001 ffc3 	bl	8003158 <BSP_LCD_Clear>
    }
    for (int i = 0; i < snakeSize; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e02e      	b.n	8001236 <StartManageBodyParts+0x142>
      if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 80011d8:	4b66      	ldr	r3, [pc, #408]	@ (8001374 <StartManageBodyParts+0x280>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	496b      	ldr	r1, [pc, #428]	@ (800138c <StartManageBodyParts+0x298>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d123      	bne.n	8001230 <StartManageBodyParts+0x13c>
 80011e8:	4b62      	ldr	r3, [pc, #392]	@ (8001374 <StartManageBodyParts+0x280>)
 80011ea:	785a      	ldrb	r2, [r3, #1]
 80011ec:	4967      	ldr	r1, [pc, #412]	@ (800138c <StartManageBodyParts+0x298>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	440b      	add	r3, r1
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d11a      	bne.n	8001230 <StartManageBodyParts+0x13c>
        snakeSize = 0;
 80011fa:	4b61      	ldr	r3, [pc, #388]	@ (8001380 <StartManageBodyParts+0x28c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
        snakeHeadPosition[0] = 7;
 8001200:	4b5c      	ldr	r3, [pc, #368]	@ (8001374 <StartManageBodyParts+0x280>)
 8001202:	2207      	movs	r2, #7
 8001204:	701a      	strb	r2, [r3, #0]
        snakeHeadPosition[1] = 6;
 8001206:	4b5b      	ldr	r3, [pc, #364]	@ (8001374 <StartManageBodyParts+0x280>)
 8001208:	2206      	movs	r2, #6
 800120a:	705a      	strb	r2, [r3, #1]
        snakeTailPosition[0] = 7;
 800120c:	4b57      	ldr	r3, [pc, #348]	@ (800136c <StartManageBodyParts+0x278>)
 800120e:	2207      	movs	r2, #7
 8001210:	701a      	strb	r2, [r3, #0]
        snakeTailPosition[1] = 7;
 8001212:	4b56      	ldr	r3, [pc, #344]	@ (800136c <StartManageBodyParts+0x278>)
 8001214:	2207      	movs	r2, #7
 8001216:	705a      	strb	r2, [r3, #1]
        direction = Up;
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <StartManageBodyParts+0x284>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
        headPart = HeadTop;
 800121e:	4b57      	ldr	r3, [pc, #348]	@ (800137c <StartManageBodyParts+0x288>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
        tailPart = TailTop;
 8001224:	4b57      	ldr	r3, [pc, #348]	@ (8001384 <StartManageBodyParts+0x290>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800122a:	4857      	ldr	r0, [pc, #348]	@ (8001388 <StartManageBodyParts+0x294>)
 800122c:	f001 ff94 	bl	8003158 <BSP_LCD_Clear>
    for (int i = 0; i < snakeSize; i++) {
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	3301      	adds	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	4b52      	ldr	r3, [pc, #328]	@ (8001380 <StartManageBodyParts+0x28c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	4293      	cmp	r3, r2
 8001240:	dbca      	blt.n	80011d8 <StartManageBodyParts+0xe4>
      }
    }
    if (snakeHeadPosition[0] == snakeTailPosition[0] && snakeHeadPosition[1] == snakeTailPosition[1]) {
 8001242:	4b4c      	ldr	r3, [pc, #304]	@ (8001374 <StartManageBodyParts+0x280>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b49      	ldr	r3, [pc, #292]	@ (800136c <StartManageBodyParts+0x278>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d120      	bne.n	8001290 <StartManageBodyParts+0x19c>
 800124e:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <StartManageBodyParts+0x280>)
 8001250:	785a      	ldrb	r2, [r3, #1]
 8001252:	4b46      	ldr	r3, [pc, #280]	@ (800136c <StartManageBodyParts+0x278>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	429a      	cmp	r2, r3
 8001258:	d11a      	bne.n	8001290 <StartManageBodyParts+0x19c>
      snakeSize = 0;
 800125a:	4b49      	ldr	r3, [pc, #292]	@ (8001380 <StartManageBodyParts+0x28c>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
      snakeHeadPosition[0] = 7;
 8001260:	4b44      	ldr	r3, [pc, #272]	@ (8001374 <StartManageBodyParts+0x280>)
 8001262:	2207      	movs	r2, #7
 8001264:	701a      	strb	r2, [r3, #0]
      snakeHeadPosition[1] = 6;
 8001266:	4b43      	ldr	r3, [pc, #268]	@ (8001374 <StartManageBodyParts+0x280>)
 8001268:	2206      	movs	r2, #6
 800126a:	705a      	strb	r2, [r3, #1]
      snakeTailPosition[0] = 7;
 800126c:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <StartManageBodyParts+0x278>)
 800126e:	2207      	movs	r2, #7
 8001270:	701a      	strb	r2, [r3, #0]
      snakeTailPosition[1] = 7;
 8001272:	4b3e      	ldr	r3, [pc, #248]	@ (800136c <StartManageBodyParts+0x278>)
 8001274:	2207      	movs	r2, #7
 8001276:	705a      	strb	r2, [r3, #1]
      direction = Up;
 8001278:	4b3f      	ldr	r3, [pc, #252]	@ (8001378 <StartManageBodyParts+0x284>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
      headPart = HeadTop;
 800127e:	4b3f      	ldr	r3, [pc, #252]	@ (800137c <StartManageBodyParts+0x288>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
      tailPart = TailTop;
 8001284:	4b3f      	ldr	r3, [pc, #252]	@ (8001384 <StartManageBodyParts+0x290>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
      BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800128a:	483f      	ldr	r0, [pc, #252]	@ (8001388 <StartManageBodyParts+0x294>)
 800128c:	f001 ff64 	bl	8003158 <BSP_LCD_Clear>
    }

    
    // on vérifie si on a mangé la pomme avant de bouger le corps et la queue
    if (snakeHeadPosition[0] == applePosition[0] && snakeHeadPosition[1] == applePosition[1]) {
 8001290:	4b38      	ldr	r3, [pc, #224]	@ (8001374 <StartManageBodyParts+0x280>)
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <StartManageBodyParts+0x29c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 809e 	bne.w	80013da <StartManageBodyParts+0x2e6>
 800129e:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <StartManageBodyParts+0x280>)
 80012a0:	785a      	ldrb	r2, [r3, #1]
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <StartManageBodyParts+0x29c>)
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	f040 8097 	bne.w	80013da <StartManageBodyParts+0x2e6>
      snakeSize++;
 80012ac:	4b34      	ldr	r3, [pc, #208]	@ (8001380 <StartManageBodyParts+0x28c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <StartManageBodyParts+0x28c>)
 80012b6:	701a      	strb	r2, [r3, #0]
      appleEaten = 1;
 80012b8:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <StartManageBodyParts+0x2a0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

      // Generate a random apple position until it is not occupied by the snake
      do {
        applePosition[0] = rand() % gridSizeX;
 80012be:	f00a febf 	bl	800c040 <rand>
 80012c2:	4603      	mov	r3, r0
 80012c4:	220f      	movs	r2, #15
 80012c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80012ca:	fb01 f202 	mul.w	r2, r1, r2
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <StartManageBodyParts+0x29c>)
 80012d4:	701a      	strb	r2, [r3, #0]
        applePosition[1] = rand() % gridSizeY;
 80012d6:	f00a feb3 	bl	800c040 <rand>
 80012da:	4603      	mov	r3, r0
 80012dc:	2208      	movs	r2, #8
 80012de:	fb93 f1f2 	sdiv	r1, r3, r2
 80012e2:	fb01 f202 	mul.w	r2, r1, r2
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <StartManageBodyParts+0x29c>)
 80012ec:	705a      	strb	r2, [r3, #1]
      } while (isSnakePosition(applePosition[0], applePosition[1]));
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <StartManageBodyParts+0x29c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4a27      	ldr	r2, [pc, #156]	@ (8001390 <StartManageBodyParts+0x29c>)
 80012f4:	7852      	ldrb	r2, [r2, #1]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f9ef 	bl	80016dc <isSnakePosition>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1dc      	bne.n	80012be <StartManageBodyParts+0x1ca>

      // on ajoute un bodyPart juste derrière la tête
      for (int i = snakeSize - 1; i > 0; i--) {
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <StartManageBodyParts+0x28c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	e020      	b.n	8001350 <StartManageBodyParts+0x25c>
        snakeBodyParts[i] = snakeBodyParts[i - 1];
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	3b01      	subs	r3, #1
 8001312:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <StartManageBodyParts+0x2a4>)
 8001314:	5cd1      	ldrb	r1, [r2, r3]
 8001316:	4a20      	ldr	r2, [pc, #128]	@ (8001398 <StartManageBodyParts+0x2a4>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	460a      	mov	r2, r1
 800131e:	701a      	strb	r2, [r3, #0]
        snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a19      	ldr	r2, [pc, #100]	@ (800138c <StartManageBodyParts+0x298>)
 8001326:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800132a:	4a18      	ldr	r2, [pc, #96]	@ (800138c <StartManageBodyParts+0x298>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
        snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a15      	ldr	r2, [pc, #84]	@ (800138c <StartManageBodyParts+0x298>)
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	7859      	ldrb	r1, [r3, #1]
 800133e:	4a13      	ldr	r2, [pc, #76]	@ (800138c <StartManageBodyParts+0x298>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	460a      	mov	r2, r1
 8001348:	705a      	strb	r2, [r3, #1]
      for (int i = snakeSize - 1; i > 0; i--) {
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	3b01      	subs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dcdb      	bgt.n	800130e <StartManageBodyParts+0x21a>
      }
      uint8_t backX;
      uint8_t backY;

      if (snakeSize > 1) {
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <StartManageBodyParts+0x28c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d91e      	bls.n	800139c <StartManageBodyParts+0x2a8>
        backX = snakeBodyPosition[0][0];
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <StartManageBodyParts+0x298>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	75fb      	strb	r3, [r7, #23]
        backY = snakeBodyPosition[0][1];
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <StartManageBodyParts+0x298>)
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	75bb      	strb	r3, [r7, #22]
 800136a:	e01d      	b.n	80013a8 <StartManageBodyParts+0x2b4>
 800136c:	20000008 	.word	0x20000008
 8001370:	2000036c 	.word	0x2000036c
 8001374:	20000004 	.word	0x20000004
 8001378:	200001f8 	.word	0x200001f8
 800137c:	200001f9 	.word	0x200001f9
 8001380:	20000274 	.word	0x20000274
 8001384:	20000000 	.word	0x20000000
 8001388:	ff81cd4b 	.word	0xff81cd4b
 800138c:	2000027c 	.word	0x2000027c
 8001390:	2000000c 	.word	0x2000000c
 8001394:	20000278 	.word	0x20000278
 8001398:	200001fc 	.word	0x200001fc
      }
      else {
        backX = snakeTailPosition[0];
 800139c:	4b97      	ldr	r3, [pc, #604]	@ (80015fc <StartManageBodyParts+0x508>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	75fb      	strb	r3, [r7, #23]
        backY = snakeTailPosition[1];
 80013a2:	4b96      	ldr	r3, [pc, #600]	@ (80015fc <StartManageBodyParts+0x508>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	75bb      	strb	r3, [r7, #22]
      }

      snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 80013a8:	4b95      	ldr	r3, [pc, #596]	@ (8001600 <StartManageBodyParts+0x50c>)
 80013aa:	7818      	ldrb	r0, [r3, #0]
 80013ac:	4b94      	ldr	r3, [pc, #592]	@ (8001600 <StartManageBodyParts+0x50c>)
 80013ae:	7859      	ldrb	r1, [r3, #1]
 80013b0:	7b3b      	ldrb	r3, [r7, #12]
 80013b2:	7b7a      	ldrb	r2, [r7, #13]
 80013b4:	7dbd      	ldrb	r5, [r7, #22]
 80013b6:	7dfc      	ldrb	r4, [r7, #23]
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	462b      	mov	r3, r5
 80013be:	4622      	mov	r2, r4
 80013c0:	f000 f92c 	bl	800161c <whatBodyPart>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001604 <StartManageBodyParts+0x510>)
 80013ca:	701a      	strb	r2, [r3, #0]
      snakeBodyPosition[0][0] = oldHeadPosition[0];
 80013cc:	7b3a      	ldrb	r2, [r7, #12]
 80013ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001608 <StartManageBodyParts+0x514>)
 80013d0:	701a      	strb	r2, [r3, #0]
      snakeBodyPosition[0][1] = oldHeadPosition[1];
 80013d2:	7b7a      	ldrb	r2, [r7, #13]
 80013d4:	4b8c      	ldr	r3, [pc, #560]	@ (8001608 <StartManageBodyParts+0x514>)
 80013d6:	705a      	strb	r2, [r3, #1]
    if (snakeHeadPosition[0] == applePosition[0] && snakeHeadPosition[1] == applePosition[1]) {
 80013d8:	e10c      	b.n	80015f4 <StartManageBodyParts+0x500>
    }
    else {
      appleEaten = 0;
 80013da:	4b8c      	ldr	r3, [pc, #560]	@ (800160c <StartManageBodyParts+0x518>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

      // on met a jour la position de la queue
      if (snakeSize > 0) {
 80013e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001610 <StartManageBodyParts+0x51c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d011      	beq.n	800140c <StartManageBodyParts+0x318>
        snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 80013e8:	4b89      	ldr	r3, [pc, #548]	@ (8001610 <StartManageBodyParts+0x51c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	4a86      	ldr	r2, [pc, #536]	@ (8001608 <StartManageBodyParts+0x514>)
 80013f0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013f4:	4b81      	ldr	r3, [pc, #516]	@ (80015fc <StartManageBodyParts+0x508>)
 80013f6:	701a      	strb	r2, [r3, #0]
        snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 80013f8:	4b85      	ldr	r3, [pc, #532]	@ (8001610 <StartManageBodyParts+0x51c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a82      	ldr	r2, [pc, #520]	@ (8001608 <StartManageBodyParts+0x514>)
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	785a      	ldrb	r2, [r3, #1]
 8001406:	4b7d      	ldr	r3, [pc, #500]	@ (80015fc <StartManageBodyParts+0x508>)
 8001408:	705a      	strb	r2, [r3, #1]
 800140a:	e005      	b.n	8001418 <StartManageBodyParts+0x324>
      }
      else {
        snakeTailPosition[0] = oldHeadPosition[0];
 800140c:	7b3a      	ldrb	r2, [r7, #12]
 800140e:	4b7b      	ldr	r3, [pc, #492]	@ (80015fc <StartManageBodyParts+0x508>)
 8001410:	701a      	strb	r2, [r3, #0]
        snakeTailPosition[1] = oldHeadPosition[1];
 8001412:	7b7a      	ldrb	r2, [r7, #13]
 8001414:	4b79      	ldr	r3, [pc, #484]	@ (80015fc <StartManageBodyParts+0x508>)
 8001416:	705a      	strb	r2, [r3, #1]
      }


      // On avance le corps
      for (int i = snakeSize - 1; i > 0; i--) {
 8001418:	4b7d      	ldr	r3, [pc, #500]	@ (8001610 <StartManageBodyParts+0x51c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	e020      	b.n	8001464 <StartManageBodyParts+0x370>
        snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	3b01      	subs	r3, #1
 8001426:	4a77      	ldr	r2, [pc, #476]	@ (8001604 <StartManageBodyParts+0x510>)
 8001428:	5cd1      	ldrb	r1, [r2, r3]
 800142a:	4a76      	ldr	r2, [pc, #472]	@ (8001604 <StartManageBodyParts+0x510>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4413      	add	r3, r2
 8001430:	460a      	mov	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
        snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	3b01      	subs	r3, #1
 8001438:	4a73      	ldr	r2, [pc, #460]	@ (8001608 <StartManageBodyParts+0x514>)
 800143a:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800143e:	4a72      	ldr	r2, [pc, #456]	@ (8001608 <StartManageBodyParts+0x514>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
        snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	3b01      	subs	r3, #1
 800144a:	4a6f      	ldr	r2, [pc, #444]	@ (8001608 <StartManageBodyParts+0x514>)
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	7859      	ldrb	r1, [r3, #1]
 8001452:	4a6d      	ldr	r2, [pc, #436]	@ (8001608 <StartManageBodyParts+0x514>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	460a      	mov	r2, r1
 800145c:	705a      	strb	r2, [r3, #1]
      for (int i = snakeSize - 1; i > 0; i--) {
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	3b01      	subs	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	dcdb      	bgt.n	8001422 <StartManageBodyParts+0x32e>
      }


      // On met a jour le corps
      if (snakeSize > 0) {
 800146a:	4b69      	ldr	r3, [pc, #420]	@ (8001610 <StartManageBodyParts+0x51c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80a1 	beq.w	80015b6 <StartManageBodyParts+0x4c2>
        // On met a jour le premier bodyPart
        snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001474:	4b62      	ldr	r3, [pc, #392]	@ (8001600 <StartManageBodyParts+0x50c>)
 8001476:	7818      	ldrb	r0, [r3, #0]
 8001478:	4b61      	ldr	r3, [pc, #388]	@ (8001600 <StartManageBodyParts+0x50c>)
 800147a:	7859      	ldrb	r1, [r3, #1]
 800147c:	4b62      	ldr	r3, [pc, #392]	@ (8001608 <StartManageBodyParts+0x514>)
 800147e:	781c      	ldrb	r4, [r3, #0]
 8001480:	4b61      	ldr	r3, [pc, #388]	@ (8001608 <StartManageBodyParts+0x514>)
 8001482:	785d      	ldrb	r5, [r3, #1]
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	7b7a      	ldrb	r2, [r7, #13]
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	462b      	mov	r3, r5
 800148e:	4622      	mov	r2, r4
 8001490:	f000 f8c4 	bl	800161c <whatBodyPart>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b5a      	ldr	r3, [pc, #360]	@ (8001604 <StartManageBodyParts+0x510>)
 800149a:	701a      	strb	r2, [r3, #0]
        snakeBodyPosition[0][0] = oldHeadPosition[0];
 800149c:	7b3a      	ldrb	r2, [r7, #12]
 800149e:	4b5a      	ldr	r3, [pc, #360]	@ (8001608 <StartManageBodyParts+0x514>)
 80014a0:	701a      	strb	r2, [r3, #0]
        snakeBodyPosition[0][1] = oldHeadPosition[1];
 80014a2:	7b7a      	ldrb	r2, [r7, #13]
 80014a4:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <StartManageBodyParts+0x514>)
 80014a6:	705a      	strb	r2, [r3, #1]

        // On met a jour la queue
        switch (snakeBodyParts[snakeSize - 1]) {
 80014a8:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <StartManageBodyParts+0x51c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4a55      	ldr	r2, [pc, #340]	@ (8001604 <StartManageBodyParts+0x510>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	2b05      	cmp	r3, #5
 80014b4:	f200 809e 	bhi.w	80015f4 <StartManageBodyParts+0x500>
 80014b8:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <StartManageBodyParts+0x3cc>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014d9 	.word	0x080014d9
 80014c4:	080014fd 	.word	0x080014fd
 80014c8:	08001521 	.word	0x08001521
 80014cc:	08001547 	.word	0x08001547
 80014d0:	0800156b 	.word	0x0800156b
 80014d4:	08001591 	.word	0x08001591
          case BottomLeft:
            // TailTop ou TailRight
            if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 80014d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001610 <StartManageBodyParts+0x51c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a4a      	ldr	r2, [pc, #296]	@ (8001608 <StartManageBodyParts+0x514>)
 80014e0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80014e4:	4b45      	ldr	r3, [pc, #276]	@ (80015fc <StartManageBodyParts+0x508>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d103      	bne.n	80014f4 <StartManageBodyParts+0x400>
              tailPart = TailTop;
 80014ec:	4b49      	ldr	r3, [pc, #292]	@ (8001614 <StartManageBodyParts+0x520>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
            }
            else {
              tailPart = TailRight;
            }
            break;
 80014f2:	e07f      	b.n	80015f4 <StartManageBodyParts+0x500>
              tailPart = TailRight;
 80014f4:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <StartManageBodyParts+0x520>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	701a      	strb	r2, [r3, #0]
            break;
 80014fa:	e07b      	b.n	80015f4 <StartManageBodyParts+0x500>
          case BottomRight:
            // TailBottom ou TailLeft
            if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 80014fc:	4b44      	ldr	r3, [pc, #272]	@ (8001610 <StartManageBodyParts+0x51c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a41      	ldr	r2, [pc, #260]	@ (8001608 <StartManageBodyParts+0x514>)
 8001504:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001508:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <StartManageBodyParts+0x508>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d103      	bne.n	8001518 <StartManageBodyParts+0x424>
              tailPart = TailTop;
 8001510:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <StartManageBodyParts+0x520>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
            }
            else {
              tailPart = TailLeft;
            }
            break;
 8001516:	e06d      	b.n	80015f4 <StartManageBodyParts+0x500>
              tailPart = TailLeft;
 8001518:	4b3e      	ldr	r3, [pc, #248]	@ (8001614 <StartManageBodyParts+0x520>)
 800151a:	2202      	movs	r2, #2
 800151c:	701a      	strb	r2, [r3, #0]
            break;
 800151e:	e069      	b.n	80015f4 <StartManageBodyParts+0x500>
          case BottomTop:
            // TailTop ou TailBottom
            if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001520:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <StartManageBodyParts+0x51c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	4a38      	ldr	r2, [pc, #224]	@ (8001608 <StartManageBodyParts+0x514>)
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	785a      	ldrb	r2, [r3, #1]
 800152e:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <StartManageBodyParts+0x508>)
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	429a      	cmp	r2, r3
 8001534:	d203      	bcs.n	800153e <StartManageBodyParts+0x44a>
              tailPart = TailTop;
 8001536:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <StartManageBodyParts+0x520>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
            }
            else {
              tailPart = TailBottom;
            }
            break;
 800153c:	e05a      	b.n	80015f4 <StartManageBodyParts+0x500>
              tailPart = TailBottom;
 800153e:	4b35      	ldr	r3, [pc, #212]	@ (8001614 <StartManageBodyParts+0x520>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
            break;
 8001544:	e056      	b.n	80015f4 <StartManageBodyParts+0x500>
          case LeftRight:
            // TailRight ou TailLeft
            if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001546:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <StartManageBodyParts+0x51c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	4a2e      	ldr	r2, [pc, #184]	@ (8001608 <StartManageBodyParts+0x514>)
 800154e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001552:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <StartManageBodyParts+0x508>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d203      	bcs.n	8001562 <StartManageBodyParts+0x46e>
              tailPart = TailLeft;
 800155a:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <StartManageBodyParts+0x520>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
            }
            else {
              tailPart = TailRight;
            }
            break;
 8001560:	e048      	b.n	80015f4 <StartManageBodyParts+0x500>
              tailPart = TailRight;
 8001562:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <StartManageBodyParts+0x520>)
 8001564:	2203      	movs	r2, #3
 8001566:	701a      	strb	r2, [r3, #0]
            break;
 8001568:	e044      	b.n	80015f4 <StartManageBodyParts+0x500>
          case LeftTop:
            // TailRight ou TailBottom
            if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 800156a:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <StartManageBodyParts+0x51c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a25      	ldr	r2, [pc, #148]	@ (8001608 <StartManageBodyParts+0x514>)
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	785a      	ldrb	r2, [r3, #1]
 8001578:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <StartManageBodyParts+0x508>)
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	429a      	cmp	r2, r3
 800157e:	d103      	bne.n	8001588 <StartManageBodyParts+0x494>
              tailPart = TailRight;
 8001580:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <StartManageBodyParts+0x520>)
 8001582:	2203      	movs	r2, #3
 8001584:	701a      	strb	r2, [r3, #0]
            }
            else {
              tailPart = TailBottom;
            }
            break;
 8001586:	e035      	b.n	80015f4 <StartManageBodyParts+0x500>
              tailPart = TailBottom;
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <StartManageBodyParts+0x520>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
            break;
 800158e:	e031      	b.n	80015f4 <StartManageBodyParts+0x500>
          case RightTop:
            // TailLeft ou TailBottom
            if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001590:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <StartManageBodyParts+0x51c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <StartManageBodyParts+0x514>)
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	785a      	ldrb	r2, [r3, #1]
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <StartManageBodyParts+0x508>)
 80015a0:	785b      	ldrb	r3, [r3, #1]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d103      	bne.n	80015ae <StartManageBodyParts+0x4ba>
              tailPart = TailLeft;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <StartManageBodyParts+0x520>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	701a      	strb	r2, [r3, #0]
            }
            else {
              tailPart = TailBottom;
            }
            break;
 80015ac:	e022      	b.n	80015f4 <StartManageBodyParts+0x500>
              tailPart = TailBottom;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <StartManageBodyParts+0x520>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
            break;
 80015b4:	e01e      	b.n	80015f4 <StartManageBodyParts+0x500>
        }
      }
      else {
        switch (headPart) {
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <StartManageBodyParts+0x524>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d81a      	bhi.n	80015f4 <StartManageBodyParts+0x500>
 80015be:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <StartManageBodyParts+0x4d0>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015dd 	.word	0x080015dd
 80015cc:	080015e5 	.word	0x080015e5
 80015d0:	080015ed 	.word	0x080015ed
          case HeadTop:
            tailPart = TailTop;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <StartManageBodyParts+0x520>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
            break;
 80015da:	e00b      	b.n	80015f4 <StartManageBodyParts+0x500>
          case HeadBottom:
            tailPart = TailBottom;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <StartManageBodyParts+0x520>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
            break;
 80015e2:	e007      	b.n	80015f4 <StartManageBodyParts+0x500>
          case HeadLeft:
            tailPart = TailLeft;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <StartManageBodyParts+0x520>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	701a      	strb	r2, [r3, #0]
            break;
 80015ea:	e003      	b.n	80015f4 <StartManageBodyParts+0x500>
          case HeadRight:
            tailPart = TailRight;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <StartManageBodyParts+0x520>)
 80015ee:	2203      	movs	r2, #3
 80015f0:	701a      	strb	r2, [r3, #0]
            break;
 80015f2:	bf00      	nop
      }
    }



    osDelay(250);
 80015f4:	20fa      	movs	r0, #250	@ 0xfa
 80015f6:	f009 fb36 	bl	800ac66 <osDelay>
  {
 80015fa:	e57f      	b.n	80010fc <StartManageBodyParts+0x8>
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004
 8001604:	200001fc 	.word	0x200001fc
 8001608:	2000027c 	.word	0x2000027c
 800160c:	20000278 	.word	0x20000278
 8001610:	20000274 	.word	0x20000274
 8001614:	20000000 	.word	0x20000000
 8001618:	200001f9 	.word	0x200001f9

0800161c <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 800161c:	b490      	push	{r4, r7}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	4603      	mov	r3, r0
 8001630:	71bb      	strb	r3, [r7, #6]
 8001632:	460b      	mov	r3, r1
 8001634:	717b      	strb	r3, [r7, #5]
 8001636:	4613      	mov	r3, r2
 8001638:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	797b      	ldrb	r3, [r7, #5]
 800163e:	429a      	cmp	r2, r3
 8001640:	d101      	bne.n	8001646 <whatBodyPart+0x2a>
    return BottomTop;
 8001642:	2302      	movs	r3, #2
 8001644:	e045      	b.n	80016d2 <whatBodyPart+0xb6>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 8001646:	79ba      	ldrb	r2, [r7, #6]
 8001648:	793b      	ldrb	r3, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d101      	bne.n	8001652 <whatBodyPart+0x36>
    return LeftRight;
 800164e:	2303      	movs	r3, #3
 8001650:	e03f      	b.n	80016d2 <whatBodyPart+0xb6>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY)
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	797b      	ldrb	r3, [r7, #5]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20b      	bcs.n	8001672 <whatBodyPart+0x56>
 800165a:	79ba      	ldrb	r2, [r7, #6]
 800165c:	793b      	ldrb	r3, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d907      	bls.n	8001672 <whatBodyPart+0x56>
    if (missingX == frontX)
 8001662:	7c3a      	ldrb	r2, [r7, #16]
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	429a      	cmp	r2, r3
 8001668:	d101      	bne.n	800166e <whatBodyPart+0x52>
      return BottomRight;
 800166a:	2301      	movs	r3, #1
 800166c:	e031      	b.n	80016d2 <whatBodyPart+0xb6>
    else
      return LeftTop;
 800166e:	2304      	movs	r3, #4
 8001670:	e02f      	b.n	80016d2 <whatBodyPart+0xb6>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY)
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20b      	bcs.n	8001692 <whatBodyPart+0x76>
 800167a:	79ba      	ldrb	r2, [r7, #6]
 800167c:	793b      	ldrb	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d207      	bcs.n	8001692 <whatBodyPart+0x76>
    if (missingX == frontX)
 8001682:	7c3a      	ldrb	r2, [r7, #16]
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	429a      	cmp	r2, r3
 8001688:	d101      	bne.n	800168e <whatBodyPart+0x72>
      return RightTop;
 800168a:	2305      	movs	r3, #5
 800168c:	e021      	b.n	80016d2 <whatBodyPart+0xb6>
    else
      return BottomLeft;
 800168e:	2300      	movs	r3, #0
 8001690:	e01f      	b.n	80016d2 <whatBodyPart+0xb6>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY)
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	797b      	ldrb	r3, [r7, #5]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90b      	bls.n	80016b2 <whatBodyPart+0x96>
 800169a:	79ba      	ldrb	r2, [r7, #6]
 800169c:	793b      	ldrb	r3, [r7, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d207      	bcs.n	80016b2 <whatBodyPart+0x96>
    if (missingX == frontX)
 80016a2:	7c3a      	ldrb	r2, [r7, #16]
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d101      	bne.n	80016ae <whatBodyPart+0x92>
      return LeftTop;
 80016aa:	2304      	movs	r3, #4
 80016ac:	e011      	b.n	80016d2 <whatBodyPart+0xb6>
    else
      return BottomRight;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <whatBodyPart+0xb6>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY)
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d90b      	bls.n	80016d2 <whatBodyPart+0xb6>
 80016ba:	79ba      	ldrb	r2, [r7, #6]
 80016bc:	793b      	ldrb	r3, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d907      	bls.n	80016d2 <whatBodyPart+0xb6>
    if (missingX == frontX)
 80016c2:	7c3a      	ldrb	r2, [r7, #16]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d101      	bne.n	80016ce <whatBodyPart+0xb2>
      return BottomLeft;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e001      	b.n	80016d2 <whatBodyPart+0xb6>
    else
      return RightTop;
 80016ce:	2305      	movs	r3, #5
 80016d0:	e7ff      	b.n	80016d2 <whatBodyPart+0xb6>
  
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc90      	pop	{r4, r7}
 80016da:	4770      	bx	lr

080016dc <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	460a      	mov	r2, r1
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <isSnakePosition+0x88>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	79fa      	ldrb	r2, [r7, #7]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d106      	bne.n	8001704 <isSnakePosition+0x28>
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <isSnakePosition+0x88>)
 80016f8:	785b      	ldrb	r3, [r3, #1]
 80016fa:	79ba      	ldrb	r2, [r7, #6]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d101      	bne.n	8001704 <isSnakePosition+0x28>
    return 1;
 8001700:	2301      	movs	r3, #1
 8001702:	e029      	b.n	8001758 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e013      	b.n	8001732 <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 800170a:	4a17      	ldr	r2, [pc, #92]	@ (8001768 <isSnakePosition+0x8c>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	429a      	cmp	r2, r3
 8001716:	d109      	bne.n	800172c <isSnakePosition+0x50>
 8001718:	4a13      	ldr	r2, [pc, #76]	@ (8001768 <isSnakePosition+0x8c>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	79ba      	ldrb	r2, [r7, #6]
 8001724:	429a      	cmp	r2, r3
 8001726:	d101      	bne.n	800172c <isSnakePosition+0x50>
      return 1;
 8001728:	2301      	movs	r3, #1
 800172a:	e015      	b.n	8001758 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <isSnakePosition+0x90>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4293      	cmp	r3, r2
 800173c:	dbe5      	blt.n	800170a <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <isSnakePosition+0x94>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	429a      	cmp	r2, r3
 8001746:	d106      	bne.n	8001756 <isSnakePosition+0x7a>
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <isSnakePosition+0x94>)
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	79ba      	ldrb	r2, [r7, #6]
 800174e:	429a      	cmp	r2, r3
 8001750:	d101      	bne.n	8001756 <isSnakePosition+0x7a>
    return 1;
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <isSnakePosition+0x7c>

  return 0;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	20000004 	.word	0x20000004
 8001768:	2000027c 	.word	0x2000027c
 800176c:	20000274 	.word	0x20000274
 8001770:	20000008 	.word	0x20000008

08001774 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800177e:	20c8      	movs	r0, #200	@ 0xc8
 8001780:	f001 fb8a 	bl	8002e98 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001784:	f000 f9b4 	bl	8001af0 <ft5336_I2C_InitializeIfRequired>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80017b8:	2300      	movs	r3, #0
 80017ba:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80017bc:	f000 f998 	bl	8001af0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e010      	b.n	80017e8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	21a8      	movs	r1, #168	@ 0xa8
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 fb45 	bl	8002e5c <TS_IO_Read>
 80017d2:	4603      	mov	r3, r0
 80017d4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80017d6:	7b7b      	ldrb	r3, [r7, #13]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b51      	cmp	r3, #81	@ 0x51
 80017dc:	d101      	bne.n	80017e2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d802      	bhi.n	80017f4 <ft5336_ReadID+0x4e>
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0e8      	beq.n	80017c6 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80017f4:	7b7b      	ldrb	r3, [r7, #13]
 80017f6:	b2db      	uxtb	r3, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f97f 	bl	8001b10 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f933 	bl	8001a80 <ft5336_TS_DisableIT>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2102      	movs	r1, #2
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fb0f 	bl	8002e5c <TS_IO_Read>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	b2db      	uxtb	r3, r3
 800184c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b05      	cmp	r3, #5
 8001854:	d901      	bls.n	800185a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <ft5336_TS_DetectTouch+0x50>)
 8001860:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001862:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <ft5336_TS_DetectTouch+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	b2db      	uxtb	r3, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200005d4 	.word	0x200005d4

08001878 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800189a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a50 <ft5336_TS_GetXY+0x1d8>)
 800189c:	789a      	ldrb	r2, [r3, #2]
 800189e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a50 <ft5336_TS_GetXY+0x1d8>)
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f080 80cf 	bcs.w	8001a46 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80018a8:	4b69      	ldr	r3, [pc, #420]	@ (8001a50 <ft5336_TS_GetXY+0x1d8>)
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d871      	bhi.n	8001994 <ft5336_TS_GetXY+0x11c>
 80018b0:	a201      	add	r2, pc, #4	@ (adr r2, 80018b8 <ft5336_TS_GetXY+0x40>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	080018e1 	.word	0x080018e1
 80018bc:	080018f3 	.word	0x080018f3
 80018c0:	08001905 	.word	0x08001905
 80018c4:	08001917 	.word	0x08001917
 80018c8:	08001929 	.word	0x08001929
 80018cc:	0800193b 	.word	0x0800193b
 80018d0:	0800194d 	.word	0x0800194d
 80018d4:	0800195f 	.word	0x0800195f
 80018d8:	08001971 	.word	0x08001971
 80018dc:	08001983 	.word	0x08001983
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80018e0:	2304      	movs	r3, #4
 80018e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80018e8:	2306      	movs	r3, #6
 80018ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80018ec:	2305      	movs	r3, #5
 80018ee:	753b      	strb	r3, [r7, #20]
      break;
 80018f0:	e051      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80018f2:	230a      	movs	r3, #10
 80018f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80018f6:	2309      	movs	r3, #9
 80018f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80018fa:	230c      	movs	r3, #12
 80018fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80018fe:	230b      	movs	r3, #11
 8001900:	753b      	strb	r3, [r7, #20]
      break;
 8001902:	e048      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001904:	2310      	movs	r3, #16
 8001906:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001908:	230f      	movs	r3, #15
 800190a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800190c:	2312      	movs	r3, #18
 800190e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001910:	2311      	movs	r3, #17
 8001912:	753b      	strb	r3, [r7, #20]
      break;
 8001914:	e03f      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001916:	2316      	movs	r3, #22
 8001918:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800191a:	2315      	movs	r3, #21
 800191c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800191e:	2318      	movs	r3, #24
 8001920:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001922:	2317      	movs	r3, #23
 8001924:	753b      	strb	r3, [r7, #20]
      break;
 8001926:	e036      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001928:	231c      	movs	r3, #28
 800192a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800192c:	231b      	movs	r3, #27
 800192e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001930:	231e      	movs	r3, #30
 8001932:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001934:	231d      	movs	r3, #29
 8001936:	753b      	strb	r3, [r7, #20]
      break;
 8001938:	e02d      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800193a:	2322      	movs	r3, #34	@ 0x22
 800193c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800193e:	2321      	movs	r3, #33	@ 0x21
 8001940:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001942:	2324      	movs	r3, #36	@ 0x24
 8001944:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001946:	2323      	movs	r3, #35	@ 0x23
 8001948:	753b      	strb	r3, [r7, #20]
      break;
 800194a:	e024      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800194c:	2328      	movs	r3, #40	@ 0x28
 800194e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001950:	2327      	movs	r3, #39	@ 0x27
 8001952:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001954:	232a      	movs	r3, #42	@ 0x2a
 8001956:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001958:	2329      	movs	r3, #41	@ 0x29
 800195a:	753b      	strb	r3, [r7, #20]
      break;
 800195c:	e01b      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800195e:	232e      	movs	r3, #46	@ 0x2e
 8001960:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001962:	232d      	movs	r3, #45	@ 0x2d
 8001964:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001966:	2330      	movs	r3, #48	@ 0x30
 8001968:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800196a:	232f      	movs	r3, #47	@ 0x2f
 800196c:	753b      	strb	r3, [r7, #20]
      break;
 800196e:	e012      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001970:	2334      	movs	r3, #52	@ 0x34
 8001972:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001974:	2333      	movs	r3, #51	@ 0x33
 8001976:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001978:	2336      	movs	r3, #54	@ 0x36
 800197a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800197c:	2335      	movs	r3, #53	@ 0x35
 800197e:	753b      	strb	r3, [r7, #20]
      break;
 8001980:	e009      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001982:	233a      	movs	r3, #58	@ 0x3a
 8001984:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001986:	2339      	movs	r3, #57	@ 0x39
 8001988:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800198a:	233c      	movs	r3, #60	@ 0x3c
 800198c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800198e:	233b      	movs	r3, #59	@ 0x3b
 8001990:	753b      	strb	r3, [r7, #20]
      break;
 8001992:	e000      	b.n	8001996 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001994:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	7dfa      	ldrb	r2, [r7, #23]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 fa5c 	bl	8002e5c <TS_IO_Read>
 80019a4:	4603      	mov	r3, r0
 80019a6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 80019b0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	7dba      	ldrb	r2, [r7, #22]
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fa4e 	bl	8002e5c <TS_IO_Read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80019c4:	7cfb      	ldrb	r3, [r7, #19]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21b      	sxth	r3, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 80019de:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	7d7a      	ldrb	r2, [r7, #21]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 fa33 	bl	8002e5c <TS_IO_Read>
 80019f6:	4603      	mov	r3, r0
 80019f8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 8001a02:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	7d3a      	ldrb	r2, [r7, #20]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 fa25 	bl	8002e5c <TS_IO_Read>
 8001a12:	4603      	mov	r3, r0
 8001a14:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 8001a30:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <ft5336_TS_GetXY+0x1dc>)
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <ft5336_TS_GetXY+0x1d8>)
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <ft5336_TS_GetXY+0x1d8>)
 8001a44:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200005d4 	.word	0x200005d4
 8001a54:	200005d8 	.word	0x200005d8

08001a58 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	21a4      	movs	r1, #164	@ 0xa4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 f9d8 	bl	8002e28 <TS_IO_Write>
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	21a4      	movs	r1, #164	@ 0xa4
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 f9c4 	bl	8002e28 <TS_IO_Write>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200005d4 	.word	0x200005d4

08001af0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001af4:	f7ff fff0 	bl	8001ad8 <ft5336_Get_I2C_InitializedStatus>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d104      	bne.n	8001b08 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001afe:	f001 f989 	bl	8002e14 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001b02:	4b02      	ldr	r3, [pc, #8]	@ (8001b0c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200005d4 	.word	0x200005d4

08001b10 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b090      	sub	sp, #64	@ 0x40
 8001b30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b42:	4baf      	ldr	r3, [pc, #700]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4aae      	ldr	r2, [pc, #696]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4bac      	ldr	r3, [pc, #688]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b5a:	4ba9      	ldr	r3, [pc, #676]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4aa8      	ldr	r2, [pc, #672]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4ba6      	ldr	r3, [pc, #664]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4ba3      	ldr	r3, [pc, #652]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4aa2      	ldr	r2, [pc, #648]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4ba0      	ldr	r3, [pc, #640]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8a:	4b9d      	ldr	r3, [pc, #628]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a9c      	ldr	r2, [pc, #624]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b9a      	ldr	r3, [pc, #616]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b97      	ldr	r3, [pc, #604]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a96      	ldr	r2, [pc, #600]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b94      	ldr	r3, [pc, #592]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b91      	ldr	r3, [pc, #580]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a90      	ldr	r2, [pc, #576]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a8a      	ldr	r2, [pc, #552]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b88      	ldr	r3, [pc, #544]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bea:	4b85      	ldr	r3, [pc, #532]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a84      	ldr	r2, [pc, #528]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b82      	ldr	r3, [pc, #520]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c02:	4b7f      	ldr	r3, [pc, #508]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a7e      	ldr	r2, [pc, #504]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c1a:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a78      	ldr	r2, [pc, #480]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c20:	f043 0320 	orr.w	r3, r3, #32
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c32:	4b73      	ldr	r3, [pc, #460]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a72      	ldr	r2, [pc, #456]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b70      	ldr	r3, [pc, #448]	@ (8001e00 <MX_GPIO_Init+0x2d4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2160      	movs	r1, #96	@ 0x60
 8001c4e:	486d      	ldr	r0, [pc, #436]	@ (8001e04 <MX_GPIO_Init+0x2d8>)
 8001c50:	f004 fda4 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2120      	movs	r1, #32
 8001c58:	486b      	ldr	r0, [pc, #428]	@ (8001e08 <MX_GPIO_Init+0x2dc>)
 8001c5a:	f004 fd9f 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2108      	movs	r1, #8
 8001c62:	4869      	ldr	r0, [pc, #420]	@ (8001e08 <MX_GPIO_Init+0x2dc>)
 8001c64:	f004 fd9a 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2108      	movs	r1, #8
 8001c6c:	4867      	ldr	r0, [pc, #412]	@ (8001e0c <MX_GPIO_Init+0x2e0>)
 8001c6e:	f004 fd95 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c72:	2201      	movs	r2, #1
 8001c74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c78:	4865      	ldr	r0, [pc, #404]	@ (8001e10 <MX_GPIO_Init+0x2e4>)
 8001c7a:	f004 fd8f 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8001c84:	4863      	ldr	r0, [pc, #396]	@ (8001e14 <MX_GPIO_Init+0x2e8>)
 8001c86:	f004 fd89 	bl	800679c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	21c8      	movs	r1, #200	@ 0xc8
 8001c8e:	4862      	ldr	r0, [pc, #392]	@ (8001e18 <MX_GPIO_Init+0x2ec>)
 8001c90:	f004 fd84 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001c94:	2308      	movs	r3, #8
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4857      	ldr	r0, [pc, #348]	@ (8001e04 <MX_GPIO_Init+0x2d8>)
 8001ca8:	f004 fac0 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001cac:	2304      	movs	r3, #4
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cbc:	2309      	movs	r3, #9
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	484f      	ldr	r0, [pc, #316]	@ (8001e04 <MX_GPIO_Init+0x2d8>)
 8001cc8:	f004 fab0 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001ccc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cde:	230b      	movs	r3, #11
 8001ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	484b      	ldr	r0, [pc, #300]	@ (8001e18 <MX_GPIO_Init+0x2ec>)
 8001cea:	f004 fa9f 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001cee:	f643 0323 	movw	r3, #14371	@ 0x3823
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d00:	230a      	movs	r3, #10
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4844      	ldr	r0, [pc, #272]	@ (8001e1c <MX_GPIO_Init+0x2f0>)
 8001d0c:	f004 fa8e 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001d20:	2308      	movs	r3, #8
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4837      	ldr	r0, [pc, #220]	@ (8001e08 <MX_GPIO_Init+0x2dc>)
 8001d2c:	f004 fa7e 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001d30:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d42:	230c      	movs	r3, #12
 8001d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4834      	ldr	r0, [pc, #208]	@ (8001e20 <MX_GPIO_Init+0x2f4>)
 8001d4e:	f004 fa6d 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001d52:	f248 1340 	movw	r3, #33088	@ 0x8140
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d64:	4619      	mov	r1, r3
 8001d66:	482f      	ldr	r0, [pc, #188]	@ (8001e24 <MX_GPIO_Init+0x2f8>)
 8001d68:	f004 fa60 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001d6c:	2360      	movs	r3, #96	@ 0x60
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d80:	4619      	mov	r1, r3
 8001d82:	4820      	ldr	r0, [pc, #128]	@ (8001e04 <MX_GPIO_Init+0x2d8>)
 8001d84:	f004 fa52 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001d88:	2340      	movs	r3, #64	@ 0x40
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	481e      	ldr	r0, [pc, #120]	@ (8001e1c <MX_GPIO_Init+0x2f0>)
 8001da4:	f004 fa42 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	481a      	ldr	r0, [pc, #104]	@ (8001e28 <MX_GPIO_Init+0x2fc>)
 8001dbe:	f004 fa35 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001dc2:	2340      	movs	r3, #64	@ 0x40
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dc6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001dca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <MX_GPIO_Init+0x2dc>)
 8001dd8:	f004 fa28 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001ddc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dee:	230a      	movs	r3, #10
 8001df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	480a      	ldr	r0, [pc, #40]	@ (8001e24 <MX_GPIO_Init+0x2f8>)
 8001dfa:	f004 fa17 	bl	800622c <HAL_GPIO_Init>
 8001dfe:	e015      	b.n	8001e2c <MX_GPIO_Init+0x300>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40020c00 	.word	0x40020c00
 8001e0c:	40022800 	.word	0x40022800
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40021c00 	.word	0x40021c00
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001e2c:	23f0      	movs	r3, #240	@ 0xf0
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e44:	4619      	mov	r1, r3
 8001e46:	4891      	ldr	r0, [pc, #580]	@ (800208c <MX_GPIO_Init+0x560>)
 8001e48:	f004 f9f0 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e5e:	230a      	movs	r3, #10
 8001e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e66:	4619      	mov	r1, r3
 8001e68:	4889      	ldr	r0, [pc, #548]	@ (8002090 <MX_GPIO_Init+0x564>)
 8001e6a:	f004 f9df 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e6e:	2328      	movs	r3, #40	@ 0x28
 8001e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e82:	4619      	mov	r1, r3
 8001e84:	4883      	ldr	r0, [pc, #524]	@ (8002094 <MX_GPIO_Init+0x568>)
 8001e86:	f004 f9d1 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	487e      	ldr	r0, [pc, #504]	@ (8002098 <MX_GPIO_Init+0x56c>)
 8001ea0:	f004 f9c4 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4878      	ldr	r0, [pc, #480]	@ (800209c <MX_GPIO_Init+0x570>)
 8001ebc:	f004 f9b6 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001ec0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ece:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	486e      	ldr	r0, [pc, #440]	@ (8002090 <MX_GPIO_Init+0x564>)
 8001ed6:	f004 f9a9 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001eda:	2310      	movs	r3, #16
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eea:	4619      	mov	r1, r3
 8001eec:	4869      	ldr	r0, [pc, #420]	@ (8002094 <MX_GPIO_Init+0x568>)
 8001eee:	f004 f99d 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f02:	230c      	movs	r3, #12
 8001f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4861      	ldr	r0, [pc, #388]	@ (8002094 <MX_GPIO_Init+0x568>)
 8001f0e:	f004 f98d 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001f12:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f24:	4619      	mov	r1, r3
 8001f26:	485e      	ldr	r0, [pc, #376]	@ (80020a0 <MX_GPIO_Init+0x574>)
 8001f28:	f004 f980 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f42:	4619      	mov	r1, r3
 8001f44:	4851      	ldr	r0, [pc, #324]	@ (800208c <MX_GPIO_Init+0x560>)
 8001f46:	f004 f971 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001f4a:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f60:	4619      	mov	r1, r3
 8001f62:	484f      	ldr	r0, [pc, #316]	@ (80020a0 <MX_GPIO_Init+0x574>)
 8001f64:	f004 f962 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f6e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4843      	ldr	r0, [pc, #268]	@ (800208c <MX_GPIO_Init+0x560>)
 8001f80:	f004 f954 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f84:	2310      	movs	r3, #16
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f94:	230a      	movs	r3, #10
 8001f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4840      	ldr	r0, [pc, #256]	@ (80020a0 <MX_GPIO_Init+0x574>)
 8001fa0:	f004 f944 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001fa4:	23c8      	movs	r3, #200	@ 0xc8
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4835      	ldr	r0, [pc, #212]	@ (8002090 <MX_GPIO_Init+0x564>)
 8001fbc:	f004 f936 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd8:	4619      	mov	r1, r3
 8001fda:	482f      	ldr	r0, [pc, #188]	@ (8002098 <MX_GPIO_Init+0x56c>)
 8001fdc:	f004 f926 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fe0:	2332      	movs	r3, #50	@ 0x32
 8001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ff0:	230b      	movs	r3, #11
 8001ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4827      	ldr	r0, [pc, #156]	@ (8002098 <MX_GPIO_Init+0x56c>)
 8001ffc:	f004 f916 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002000:	2304      	movs	r3, #4
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002010:	2309      	movs	r3, #9
 8002012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	4822      	ldr	r0, [pc, #136]	@ (80020a4 <MX_GPIO_Init+0x578>)
 800201c:	f004 f906 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002020:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002032:	2309      	movs	r3, #9
 8002034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002036:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800203a:	4619      	mov	r1, r3
 800203c:	4815      	ldr	r0, [pc, #84]	@ (8002094 <MX_GPIO_Init+0x568>)
 800203e:	f004 f8f5 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002042:	2386      	movs	r3, #134	@ 0x86
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002052:	230b      	movs	r3, #11
 8002054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205a:	4619      	mov	r1, r3
 800205c:	4812      	ldr	r0, [pc, #72]	@ (80020a8 <MX_GPIO_Init+0x57c>)
 800205e:	f004 f8e5 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002062:	2328      	movs	r3, #40	@ 0x28
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002072:	230a      	movs	r3, #10
 8002074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800207a:	4619      	mov	r1, r3
 800207c:	480a      	ldr	r0, [pc, #40]	@ (80020a8 <MX_GPIO_Init+0x57c>)
 800207e:	f004 f8d5 	bl	800622c <HAL_GPIO_Init>

}
 8002082:	bf00      	nop
 8002084:	3740      	adds	r7, #64	@ 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000
 8002090:	40021800 	.word	0x40021800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40020800 	.word	0x40020800
 800209c:	40022800 	.word	0x40022800
 80020a0:	40021c00 	.word	0x40021c00
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40020000 	.word	0x40020000

080020ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002124 <MX_I2C1_Init+0x78>)
 80020b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002128 <MX_I2C1_Init+0x7c>)
 80020ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020ce:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020e6:	480e      	ldr	r0, [pc, #56]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020e8:	f004 fb72 	bl	80067d0 <HAL_I2C_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020f2:	f000 fbc1 	bl	8002878 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020f6:	2100      	movs	r1, #0
 80020f8:	4809      	ldr	r0, [pc, #36]	@ (8002120 <MX_I2C1_Init+0x74>)
 80020fa:	f005 f8ff 	bl	80072fc <HAL_I2CEx_ConfigAnalogFilter>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002104:	f000 fbb8 	bl	8002878 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002108:	2100      	movs	r1, #0
 800210a:	4805      	ldr	r0, [pc, #20]	@ (8002120 <MX_I2C1_Init+0x74>)
 800210c:	f005 f941 	bl	8007392 <HAL_I2CEx_ConfigDigitalFilter>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002116:	f000 fbaf 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200005dc 	.word	0x200005dc
 8002124:	40005400 	.word	0x40005400
 8002128:	00c0eaff 	.word	0x00c0eaff

0800212c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002130:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <MX_I2C3_Init+0x74>)
 8002132:	4a1c      	ldr	r2, [pc, #112]	@ (80021a4 <MX_I2C3_Init+0x78>)
 8002134:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8002136:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <MX_I2C3_Init+0x74>)
 8002138:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <MX_I2C3_Init+0x7c>)
 800213a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800213c:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <MX_I2C3_Init+0x74>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <MX_I2C3_Init+0x74>)
 8002144:	2201      	movs	r2, #1
 8002146:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002148:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <MX_I2C3_Init+0x74>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800214e:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <MX_I2C3_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <MX_I2C3_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800215a:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <MX_I2C3_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002160:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <MX_I2C3_Init+0x74>)
 8002162:	2200      	movs	r2, #0
 8002164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002166:	480e      	ldr	r0, [pc, #56]	@ (80021a0 <MX_I2C3_Init+0x74>)
 8002168:	f004 fb32 	bl	80067d0 <HAL_I2C_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002172:	f000 fb81 	bl	8002878 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	4809      	ldr	r0, [pc, #36]	@ (80021a0 <MX_I2C3_Init+0x74>)
 800217a:	f005 f8bf 	bl	80072fc <HAL_I2CEx_ConfigAnalogFilter>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002184:	f000 fb78 	bl	8002878 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002188:	2100      	movs	r1, #0
 800218a:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <MX_I2C3_Init+0x74>)
 800218c:	f005 f901 	bl	8007392 <HAL_I2CEx_ConfigDigitalFilter>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002196:	f000 fb6f 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000630 	.word	0x20000630
 80021a4:	40005c00 	.word	0x40005c00
 80021a8:	00c0eaff 	.word	0x00c0eaff

080021ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0ac      	sub	sp, #176	@ 0xb0
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	2284      	movs	r2, #132	@ 0x84
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f00a f89a 	bl	800c306 <memset>
  if(i2cHandle->Instance==I2C1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a44      	ldr	r2, [pc, #272]	@ (80022e8 <HAL_I2C_MspInit+0x13c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d13d      	bne.n	8002258 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f006 f9b2 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021f6:	f000 fb3f 	bl	8002878 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a3b      	ldr	r2, [pc, #236]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b39      	ldr	r3, [pc, #228]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002212:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221a:	2312      	movs	r3, #18
 800221c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222c:	2304      	movs	r3, #4
 800222e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002236:	4619      	mov	r1, r3
 8002238:	482d      	ldr	r0, [pc, #180]	@ (80022f0 <HAL_I2C_MspInit+0x144>)
 800223a:	f003 fff7 	bl	800622c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223e:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a2a      	ldr	r2, [pc, #168]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 8002244:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002256:	e042      	b.n	80022de <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	@ (80022f4 <HAL_I2C_MspInit+0x148>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d13d      	bne.n	80022de <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002266:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226e:	f107 0318 	add.w	r3, r7, #24
 8002272:	4618      	mov	r0, r3
 8002274:	f006 f96e 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800227e:	f000 fafb 	bl	8002878 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a19      	ldr	r2, [pc, #100]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800229a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800229e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a2:	2312      	movs	r3, #18
 80022a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022b4:	2304      	movs	r3, #4
 80022b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022be:	4619      	mov	r1, r3
 80022c0:	480d      	ldr	r0, [pc, #52]	@ (80022f8 <HAL_I2C_MspInit+0x14c>)
 80022c2:	f003 ffb3 	bl	800622c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	4a08      	ldr	r2, [pc, #32]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 80022cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_I2C_MspInit+0x140>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
}
 80022de:	bf00      	nop
 80022e0:	37b0      	adds	r7, #176	@ 0xb0
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40005400 	.word	0x40005400
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40005c00 	.word	0x40005c00
 80022f8:	40021c00 	.word	0x40021c00

080022fc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <HAL_I2C_MspDeInit+0x64>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d110      	bne.n	8002330 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_I2C_MspDeInit+0x68>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <HAL_I2C_MspDeInit+0x68>)
 8002314:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800231a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800231e:	4812      	ldr	r0, [pc, #72]	@ (8002368 <HAL_I2C_MspDeInit+0x6c>)
 8002320:	f004 f930 	bl	8006584 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002328:	480f      	ldr	r0, [pc, #60]	@ (8002368 <HAL_I2C_MspDeInit+0x6c>)
 800232a:	f004 f92b 	bl	8006584 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800232e:	e013      	b.n	8002358 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_I2C_MspDeInit+0x70>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10e      	bne.n	8002358 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_I2C_MspDeInit+0x68>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	4a09      	ldr	r2, [pc, #36]	@ (8002364 <HAL_I2C_MspDeInit+0x68>)
 8002340:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002344:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002346:	2180      	movs	r1, #128	@ 0x80
 8002348:	4809      	ldr	r0, [pc, #36]	@ (8002370 <HAL_I2C_MspDeInit+0x74>)
 800234a:	f004 f91b 	bl	8006584 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800234e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002352:	4807      	ldr	r0, [pc, #28]	@ (8002370 <HAL_I2C_MspDeInit+0x74>)
 8002354:	f004 f916 	bl	8006584 <HAL_GPIO_DeInit>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40005400 	.word	0x40005400
 8002364:	40023800 	.word	0x40023800
 8002368:	40020400 	.word	0x40020400
 800236c:	40005c00 	.word	0x40005c00
 8002370:	40021c00 	.word	0x40021c00

08002374 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	@ 0x38
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2234      	movs	r2, #52	@ 0x34
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f009 ffc0 	bl	800c306 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <MX_LTDC_Init+0xfc>)
 8002388:	4a3a      	ldr	r2, [pc, #232]	@ (8002474 <MX_LTDC_Init+0x100>)
 800238a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800238c:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <MX_LTDC_Init+0xfc>)
 800238e:	2200      	movs	r2, #0
 8002390:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002392:	4b37      	ldr	r3, [pc, #220]	@ (8002470 <MX_LTDC_Init+0xfc>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002398:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <MX_LTDC_Init+0xfc>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800239e:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80023a4:	4b32      	ldr	r3, [pc, #200]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023a6:	2228      	movs	r2, #40	@ 0x28
 80023a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80023aa:	4b31      	ldr	r3, [pc, #196]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023ac:	2209      	movs	r2, #9
 80023ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023b2:	2235      	movs	r2, #53	@ 0x35
 80023b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80023b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023b8:	220b      	movs	r2, #11
 80023ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80023bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023be:	f240 2215 	movw	r2, #533	@ 0x215
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80023c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023c6:	f240 121b 	movw	r2, #283	@ 0x11b
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80023cc:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023ce:	f240 2235 	movw	r2, #565	@ 0x235
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80023d4:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023d6:	f240 121d 	movw	r2, #285	@ 0x11d
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80023ec:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80023f4:	481e      	ldr	r0, [pc, #120]	@ (8002470 <MX_LTDC_Init+0xfc>)
 80023f6:	f005 f819 	bl	800742c <HAL_LTDC_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002400:	f000 fa3a 	bl	8002878 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002408:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800240c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002412:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002416:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002418:	2302      	movs	r3, #2
 800241a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800241c:	23ff      	movs	r3, #255	@ 0xff
 800241e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002424:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002428:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800242a:	2307      	movs	r3, #7
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800242e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002434:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800243a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800243e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2200      	movs	r2, #0
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	@ (8002470 <MX_LTDC_Init+0xfc>)
 800245a:	f005 f979 	bl	8007750 <HAL_LTDC_ConfigLayer>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002464:	f000 fa08 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002468:	bf00      	nop
 800246a:	3738      	adds	r7, #56	@ 0x38
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000684 	.word	0x20000684
 8002474:	40016800 	.word	0x40016800

08002478 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0ae      	sub	sp, #184	@ 0xb8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002490:	f107 0320 	add.w	r3, r7, #32
 8002494:	2284      	movs	r2, #132	@ 0x84
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f009 ff34 	bl	800c306 <memset>
  if(ltdcHandle->Instance==LTDC)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002660 <HAL_LTDC_MspInit+0x1e8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f040 80d6 	bne.w	8002656 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024aa:	2308      	movs	r3, #8
 80024ac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80024ae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80024b4:	2305      	movs	r3, #5
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80024b8:	2302      	movs	r3, #2
 80024ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80024bc:	2303      	movs	r3, #3
 80024be:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80024c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 f840 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80024da:	f000 f9cd 	bl	8002878 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024de:	4b61      	ldr	r3, [pc, #388]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	4a60      	ldr	r2, [pc, #384]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 80024e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 80024fc:	f043 0310 	orr.w	r3, r3, #16
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b58      	ldr	r3, [pc, #352]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800250e:	4b55      	ldr	r3, [pc, #340]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a54      	ldr	r2, [pc, #336]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002514:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b52      	ldr	r3, [pc, #328]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002526:	4b4f      	ldr	r3, [pc, #316]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a4e      	ldr	r2, [pc, #312]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 800252c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b4c      	ldr	r3, [pc, #304]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800253e:	4b49      	ldr	r3, [pc, #292]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002556:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a42      	ldr	r2, [pc, #264]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b40      	ldr	r3, [pc, #256]	@ (8002664 <HAL_LTDC_MspInit+0x1ec>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800256e:	2310      	movs	r3, #16
 8002570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002586:	230e      	movs	r3, #14
 8002588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002590:	4619      	mov	r1, r3
 8002592:	4835      	ldr	r0, [pc, #212]	@ (8002668 <HAL_LTDC_MspInit+0x1f0>)
 8002594:	f003 fe4a 	bl	800622c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002598:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800259c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025b2:	230e      	movs	r3, #14
 80025b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80025b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025bc:	4619      	mov	r1, r3
 80025be:	482b      	ldr	r0, [pc, #172]	@ (800266c <HAL_LTDC_MspInit+0x1f4>)
 80025c0:	f003 fe34 	bl	800622c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80025c4:	23f7      	movs	r3, #247	@ 0xf7
 80025c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025dc:	230e      	movs	r3, #14
 80025de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80025e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4821      	ldr	r0, [pc, #132]	@ (8002670 <HAL_LTDC_MspInit+0x1f8>)
 80025ea:	f003 fe1f 	bl	800622c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80025ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002608:	2309      	movs	r3, #9
 800260a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002612:	4619      	mov	r1, r3
 8002614:	4817      	ldr	r0, [pc, #92]	@ (8002674 <HAL_LTDC_MspInit+0x1fc>)
 8002616:	f003 fe09 	bl	800622c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800261a:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800261e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002634:	230e      	movs	r3, #14
 8002636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800263a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800263e:	4619      	mov	r1, r3
 8002640:	480d      	ldr	r0, [pc, #52]	@ (8002678 <HAL_LTDC_MspInit+0x200>)
 8002642:	f003 fdf3 	bl	800622c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2105      	movs	r1, #5
 800264a:	2058      	movs	r0, #88	@ 0x58
 800264c:	f002 ff8a 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002650:	2058      	movs	r0, #88	@ 0x58
 8002652:	f002 ffa3 	bl	800559c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002656:	bf00      	nop
 8002658:	37b8      	adds	r7, #184	@ 0xb8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40016800 	.word	0x40016800
 8002664:	40023800 	.word	0x40023800
 8002668:	40021000 	.word	0x40021000
 800266c:	40022400 	.word	0x40022400
 8002670:	40022800 	.word	0x40022800
 8002674:	40021800 	.word	0x40021800
 8002678:	40022000 	.word	0x40022000

0800267c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800267c:	b598      	push	{r3, r4, r7, lr}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002680:	4b37      	ldr	r3, [pc, #220]	@ (8002760 <main+0xe4>)
 8002682:	2201      	movs	r2, #1
 8002684:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002686:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <main+0xe4>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800268c:	f002 fa67 	bl	8004b5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002690:	f000 f86e 	bl	8002770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002694:	f7ff fa4a 	bl	8001b2c <MX_GPIO_Init>
  MX_ADC3_Init();
 8002698:	f7fd ffd4 	bl	8000644 <MX_ADC3_Init>
  MX_DMA2D_Init();
 800269c:	f7fe f904 	bl	80008a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80026a0:	f7fe f95a 	bl	8000958 <MX_FMC_Init>
  MX_I2C1_Init();
 80026a4:	f7ff fd02 	bl	80020ac <MX_I2C1_Init>
  MX_I2C3_Init();
 80026a8:	f7ff fd40 	bl	800212c <MX_I2C3_Init>
  MX_LTDC_Init();
 80026ac:	f7ff fe62 	bl	8002374 <MX_LTDC_Init>
  MX_RTC_Init();
 80026b0:	f000 f8e8 	bl	8002884 <MX_RTC_Init>
  MX_SPI2_Init();
 80026b4:	f000 f9b8 	bl	8002a28 <MX_SPI2_Init>
  MX_TIM1_Init();
 80026b8:	f001 fe64 	bl	8004384 <MX_TIM1_Init>
  MX_TIM2_Init();
 80026bc:	f001 feb6 	bl	800442c <MX_TIM2_Init>
  MX_TIM3_Init();
 80026c0:	f001 ff02 	bl	80044c8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80026c4:	f001 ff4e 	bl	8004564 <MX_TIM5_Init>
  MX_TIM8_Init();
 80026c8:	f001 ff9a 	bl	8004600 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80026cc:	f002 f8ae 	bl	800482c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80026d0:	f002 f8dc 	bl	800488c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80026d4:	f7fd ff64 	bl	80005a0 <MX_ADC1_Init>
  MX_DAC_Init();
 80026d8:	f7fe f874 	bl	80007c4 <MX_DAC_Init>
  MX_UART7_Init();
 80026dc:	f002 f876 	bl	80047cc <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80026e0:	f000 fbe6 	bl	8002eb0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80026e4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80026e8:	2000      	movs	r0, #0
 80026ea:	f000 fc79 	bl	8002fe0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 80026ee:	f000 fc4f 	bl	8002f90 <BSP_LCD_GetXSize>
 80026f2:	4604      	mov	r4, r0
 80026f4:	f000 fc60 	bl	8002fb8 <BSP_LCD_GetYSize>
 80026f8:	4603      	mov	r3, r0
 80026fa:	fb04 f303 	mul.w	r3, r4, r3
 80026fe:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4619      	mov	r1, r3
 8002706:	2001      	movs	r0, #1
 8002708:	f000 fc6a 	bl	8002fe0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 800270c:	f001 f82a 	bl	8003764 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8002710:	2000      	movs	r0, #0
 8002712:	f000 fcc5 	bl	80030a0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8002716:	4813      	ldr	r0, [pc, #76]	@ (8002764 <main+0xe8>)
 8002718:	f000 fd1e 	bl	8003158 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 800271c:	2001      	movs	r0, #1
 800271e:	f000 fcbf 	bl	80030a0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8002722:	2000      	movs	r0, #0
 8002724:	f000 fd18 	bl	8003158 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8002728:	480f      	ldr	r0, [pc, #60]	@ (8002768 <main+0xec>)
 800272a:	f000 fcfb 	bl	8003124 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800272e:	480f      	ldr	r0, [pc, #60]	@ (800276c <main+0xf0>)
 8002730:	f000 fcc6 	bl	80030c0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8002734:	2000      	movs	r0, #0
 8002736:	f000 fcdb 	bl	80030f0 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800273a:	f000 fc29 	bl	8002f90 <BSP_LCD_GetXSize>
 800273e:	4603      	mov	r3, r0
 8002740:	b29c      	uxth	r4, r3
 8002742:	f000 fc39 	bl	8002fb8 <BSP_LCD_GetYSize>
 8002746:	4603      	mov	r3, r0
 8002748:	b29b      	uxth	r3, r3
 800274a:	4619      	mov	r1, r3
 800274c:	4620      	mov	r0, r4
 800274e:	f001 fc1b 	bl	8003f88 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002752:	f7fe fa05 	bl	8000b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002756:	f008 fa33 	bl	800abc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800275a:	bf00      	nop
 800275c:	e7fd      	b.n	800275a <main+0xde>
 800275e:	bf00      	nop
 8002760:	2000072c 	.word	0x2000072c
 8002764:	ff81cd4b 	.word	0xff81cd4b
 8002768:	20000040 	.word	0x20000040
 800276c:	ffa52a2a 	.word	0xffa52a2a

08002770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b094      	sub	sp, #80	@ 0x50
 8002774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002776:	f107 0320 	add.w	r3, r7, #32
 800277a:	2230      	movs	r2, #48	@ 0x30
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f009 fdc1 	bl	800c306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002794:	f005 f9c2 	bl	8007b1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	4b2c      	ldr	r3, [pc, #176]	@ (800284c <SystemClock_Config+0xdc>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	4a2b      	ldr	r2, [pc, #172]	@ (800284c <SystemClock_Config+0xdc>)
 800279e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a4:	4b29      	ldr	r3, [pc, #164]	@ (800284c <SystemClock_Config+0xdc>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <SystemClock_Config+0xe0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a26      	ldr	r2, [pc, #152]	@ (8002850 <SystemClock_Config+0xe0>)
 80027b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <SystemClock_Config+0xe0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80027c8:	2309      	movs	r3, #9
 80027ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027d2:	2301      	movs	r3, #1
 80027d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d6:	2302      	movs	r3, #2
 80027d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80027e0:	2319      	movs	r3, #25
 80027e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80027e4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80027e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027ea:	2302      	movs	r3, #2
 80027ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80027ee:	2309      	movs	r3, #9
 80027f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f2:	f107 0320 	add.w	r3, r7, #32
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 f9f0 	bl	8007bdc <HAL_RCC_OscConfig>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002802:	f000 f839 	bl	8002878 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002806:	f005 f999 	bl	8007b3c <HAL_PWREx_EnableOverDrive>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002810:	f000 f832 	bl	8002878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002814:	230f      	movs	r3, #15
 8002816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002818:	2302      	movs	r3, #2
 800281a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002820:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2106      	movs	r1, #6
 8002832:	4618      	mov	r0, r3
 8002834:	f005 fc76 	bl	8008124 <HAL_RCC_ClockConfig>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800283e:	f000 f81b 	bl	8002878 <Error_Handler>
  }
}
 8002842:	bf00      	nop
 8002844:	3750      	adds	r7, #80	@ 0x50
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40007000 	.word	0x40007000

08002854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002866:	f002 f987 	bl	8004b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40001000 	.word	0x40001000

08002878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800287c:	b672      	cpsid	i
}
 800287e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <Error_Handler+0x8>

08002884 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b090      	sub	sp, #64	@ 0x40
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800288a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800289e:	463b      	mov	r3, r7
 80028a0:	2228      	movs	r2, #40	@ 0x28
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f009 fd2e 	bl	800c306 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028aa:	4b46      	ldr	r3, [pc, #280]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028ac:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <MX_RTC_Init+0x144>)
 80028ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028b0:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028b6:	4b43      	ldr	r3, [pc, #268]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028b8:	227f      	movs	r2, #127	@ 0x7f
 80028ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028bc:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028be:	22ff      	movs	r2, #255	@ 0xff
 80028c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028c2:	4b40      	ldr	r3, [pc, #256]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028c8:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ce:	4b3d      	ldr	r3, [pc, #244]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028d4:	483b      	ldr	r0, [pc, #236]	@ (80029c4 <MX_RTC_Init+0x140>)
 80028d6:	f006 fa2d 	bl	8008d34 <HAL_RTC_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80028e0:	f7ff ffca 	bl	8002878 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002902:	2201      	movs	r2, #1
 8002904:	4619      	mov	r1, r3
 8002906:	482f      	ldr	r0, [pc, #188]	@ (80029c4 <MX_RTC_Init+0x140>)
 8002908:	f006 fa98 	bl	8008e3c <HAL_RTC_SetTime>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002912:	f7ff ffb1 	bl	8002878 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800292e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002932:	2201      	movs	r2, #1
 8002934:	4619      	mov	r1, r3
 8002936:	4823      	ldr	r0, [pc, #140]	@ (80029c4 <MX_RTC_Init+0x140>)
 8002938:	f006 fb1a 	bl	8008f70 <HAL_RTC_SetDate>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002942:	f7ff ff99 	bl	8002878 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002946:	2300      	movs	r3, #0
 8002948:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800294a:	2300      	movs	r3, #0
 800294c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800294e:	2300      	movs	r3, #0
 8002950:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002976:	463b      	mov	r3, r7
 8002978:	2201      	movs	r2, #1
 800297a:	4619      	mov	r1, r3
 800297c:	4811      	ldr	r0, [pc, #68]	@ (80029c4 <MX_RTC_Init+0x140>)
 800297e:	f006 fb7b 	bl	8009078 <HAL_RTC_SetAlarm>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002988:	f7ff ff76 	bl	8002878 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800298c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002992:	463b      	mov	r3, r7
 8002994:	2201      	movs	r2, #1
 8002996:	4619      	mov	r1, r3
 8002998:	480a      	ldr	r0, [pc, #40]	@ (80029c4 <MX_RTC_Init+0x140>)
 800299a:	f006 fb6d 	bl	8009078 <HAL_RTC_SetAlarm>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80029a4:	f7ff ff68 	bl	8002878 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80029a8:	2202      	movs	r2, #2
 80029aa:	2100      	movs	r1, #0
 80029ac:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <MX_RTC_Init+0x140>)
 80029ae:	f006 fd2f 	bl	8009410 <HAL_RTCEx_SetTimeStamp>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80029b8:	f7ff ff5e 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029bc:	bf00      	nop
 80029be:	3740      	adds	r7, #64	@ 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000073c 	.word	0x2000073c
 80029c8:	40002800 	.word	0x40002800

080029cc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0a4      	sub	sp, #144	@ 0x90
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	2284      	movs	r2, #132	@ 0x84
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f009 fc92 	bl	800c306 <memset>
  if(rtcHandle->Instance==RTC)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a20 <HAL_RTC_MspInit+0x54>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d114      	bne.n	8002a16 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029ec:	2320      	movs	r3, #32
 80029ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80029f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	4618      	mov	r0, r3
 80029fc:	f005 fdaa 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a06:	f7ff ff37 	bl	8002878 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_RTC_MspInit+0x58>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0e:	4a05      	ldr	r2, [pc, #20]	@ (8002a24 <HAL_RTC_MspInit+0x58>)
 8002a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a14:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a16:	bf00      	nop
 8002a18:	3790      	adds	r7, #144	@ 0x90
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40002800 	.word	0x40002800
 8002a24:	40023800 	.word	0x40023800

08002a28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa0 <MX_SPI2_Init+0x78>)
 8002a30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a32:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a40:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a42:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002a46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a48:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a56:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002a5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a76:	2207      	movs	r2, #7
 8002a78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a82:	2208      	movs	r2, #8
 8002a84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	@ (8002a9c <MX_SPI2_Init+0x74>)
 8002a88:	f006 fdbb 	bl	8009602 <HAL_SPI_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002a92:	f7ff fef1 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000075c 	.word	0x2000075c
 8002aa0:	40003800 	.word	0x40003800

08002aa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	@ 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a25      	ldr	r2, [pc, #148]	@ (8002b58 <HAL_SPI_MspInit+0xb4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d144      	bne.n	8002b50 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ac6:	4b25      	ldr	r3, [pc, #148]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4a24      	ldr	r2, [pc, #144]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad2:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ade:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aea:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a18      	ldr	r2, [pc, #96]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_SPI_MspInit+0xb8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b1e:	2305      	movs	r3, #5
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	480d      	ldr	r0, [pc, #52]	@ (8002b60 <HAL_SPI_MspInit+0xbc>)
 8002b2a:	f003 fb7f 	bl	800622c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002b2e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b40:	2305      	movs	r3, #5
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4806      	ldr	r0, [pc, #24]	@ (8002b64 <HAL_SPI_MspInit+0xc0>)
 8002b4c:	f003 fb6e 	bl	800622c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	@ 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40003800 	.word	0x40003800
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40020400 	.word	0x40020400

08002b68 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	@ 0x30
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a51      	ldr	r2, [pc, #324]	@ (8002cb8 <I2Cx_MspInit+0x150>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d14d      	bne.n	8002c14 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002b78:	4b50      	ldr	r3, [pc, #320]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b84:	4b4d      	ldr	r3, [pc, #308]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002b94:	2312      	movs	r3, #18
 8002b96:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4845      	ldr	r0, [pc, #276]	@ (8002cc0 <I2Cx_MspInit+0x158>)
 8002bac:	f003 fb3e 	bl	800622c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002bb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4840      	ldr	r0, [pc, #256]	@ (8002cc0 <I2Cx_MspInit+0x158>)
 8002bbe:	f003 fb35 	bl	800622c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002bc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002bda:	4b38      	ldr	r3, [pc, #224]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a37      	ldr	r2, [pc, #220]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002be0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002be4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002be6:	4b35      	ldr	r3, [pc, #212]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a34      	ldr	r2, [pc, #208]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002bec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bf0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	210f      	movs	r1, #15
 8002bf6:	2048      	movs	r0, #72	@ 0x48
 8002bf8:	f002 fcb4 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002bfc:	2048      	movs	r0, #72	@ 0x48
 8002bfe:	f002 fccd 	bl	800559c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	210f      	movs	r1, #15
 8002c06:	2049      	movs	r0, #73	@ 0x49
 8002c08:	f002 fcac 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002c0c:	2049      	movs	r0, #73	@ 0x49
 8002c0e:	f002 fcc5 	bl	800559c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002c12:	e04d      	b.n	8002cb0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c18:	4a28      	ldr	r2, [pc, #160]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002c2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c30:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c32:	2312      	movs	r3, #18
 8002c34:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	4619      	mov	r1, r3
 8002c48:	481e      	ldr	r0, [pc, #120]	@ (8002cc4 <I2Cx_MspInit+0x15c>)
 8002c4a:	f003 faef 	bl	800622c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c54:	f107 031c 	add.w	r3, r7, #28
 8002c58:	4619      	mov	r1, r3
 8002c5a:	481a      	ldr	r0, [pc, #104]	@ (8002cc4 <I2Cx_MspInit+0x15c>)
 8002c5c:	f003 fae6 	bl	800622c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002c60:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	4a15      	ldr	r2, [pc, #84]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c82:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a0c      	ldr	r2, [pc, #48]	@ (8002cbc <I2Cx_MspInit+0x154>)
 8002c8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c8e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	210f      	movs	r1, #15
 8002c94:	201f      	movs	r0, #31
 8002c96:	f002 fc65 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002c9a:	201f      	movs	r0, #31
 8002c9c:	f002 fc7e 	bl	800559c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	210f      	movs	r1, #15
 8002ca4:	2020      	movs	r0, #32
 8002ca6:	f002 fc5d 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002caa:	2020      	movs	r0, #32
 8002cac:	f002 fc76 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 8002cb0:	bf00      	nop
 8002cb2:	3730      	adds	r7, #48	@ 0x30
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200007c0 	.word	0x200007c0
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40021c00 	.word	0x40021c00
 8002cc4:	40020400 	.word	0x40020400

08002cc8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f004 f86b 	bl	8006dac <HAL_I2C_GetState>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d125      	bne.n	8002d28 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <I2Cx_Init+0x68>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <I2Cx_Init+0x6c>)
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e002      	b.n	8002cf2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <I2Cx_Init+0x70>)
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <I2Cx_Init+0x74>)
 8002cf6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff23 	bl	8002b68 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f003 fd54 	bl	80067d0 <HAL_I2C_Init>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200007c0 	.word	0x200007c0
 8002d34:	40005c00 	.word	0x40005c00
 8002d38:	40005400 	.word	0x40005400
 8002d3c:	40912732 	.word	0x40912732

08002d40 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	@ 0x28
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	72fb      	strb	r3, [r7, #11]
 8002d52:	460b      	mov	r3, r1
 8002d54:	813b      	strh	r3, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
 8002d60:	b299      	uxth	r1, r3
 8002d62:	88f8      	ldrh	r0, [r7, #6]
 8002d64:	893a      	ldrh	r2, [r7, #8]
 8002d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4603      	mov	r3, r0
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f003 fefe 	bl	8006b78 <HAL_I2C_Mem_Read>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f832 	bl	8002df4 <I2Cx_Error>
  }
  return status;    
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08a      	sub	sp, #40	@ 0x28
 8002d9e:	af04      	add	r7, sp, #16
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	4608      	mov	r0, r1
 8002da4:	4611      	mov	r1, r2
 8002da6:	461a      	mov	r2, r3
 8002da8:	4603      	mov	r3, r0
 8002daa:	72fb      	strb	r3, [r7, #11]
 8002dac:	460b      	mov	r3, r1
 8002dae:	813b      	strh	r3, [r7, #8]
 8002db0:	4613      	mov	r3, r2
 8002db2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	b299      	uxth	r1, r3
 8002dbc:	88f8      	ldrh	r0, [r7, #6]
 8002dbe:	893a      	ldrh	r2, [r7, #8]
 8002dc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4603      	mov	r3, r0
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f003 fdbd 	bl	8006950 <HAL_I2C_Mem_Write>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002de0:	7afb      	ldrb	r3, [r7, #11]
 8002de2:	4619      	mov	r1, r3
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f805 	bl	8002df4 <I2Cx_Error>
  }
  return status;
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f003 fd75 	bl	80068f0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ff5e 	bl	8002cc8 <I2Cx_Init>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002e18:	4802      	ldr	r0, [pc, #8]	@ (8002e24 <TS_IO_Init+0x10>)
 8002e1a:	f7ff ff55 	bl	8002cc8 <I2Cx_Init>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200007c0 	.word	0x200007c0

08002e28 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
 8002e32:	460b      	mov	r3, r1
 8002e34:	71bb      	strb	r3, [r7, #6]
 8002e36:	4613      	mov	r3, r2
 8002e38:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002e3a:	79bb      	ldrb	r3, [r7, #6]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	79f9      	ldrb	r1, [r7, #7]
 8002e40:	2301      	movs	r3, #1
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	1d7b      	adds	r3, r7, #5
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	4803      	ldr	r0, [pc, #12]	@ (8002e58 <TS_IO_Write+0x30>)
 8002e4c:	f7ff ffa5 	bl	8002d9a <I2Cx_WriteMultiple>
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200007c0 	.word	0x200007c0

08002e5c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	4603      	mov	r3, r0
 8002e64:	460a      	mov	r2, r1
 8002e66:	71fb      	strb	r3, [r7, #7]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002e70:	79bb      	ldrb	r3, [r7, #6]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	79f9      	ldrb	r1, [r7, #7]
 8002e76:	2301      	movs	r3, #1
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	f107 030f 	add.w	r3, r7, #15
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2301      	movs	r3, #1
 8002e82:	4804      	ldr	r0, [pc, #16]	@ (8002e94 <TS_IO_Read+0x38>)
 8002e84:	f7ff ff5c 	bl	8002d40 <I2Cx_ReadMultiple>

  return read_value;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200007c0 	.word	0x200007c0

08002e98 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f001 fe89 	bl	8004bb8 <HAL_Delay>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002eb4:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002eb6:	2228      	movs	r2, #40	@ 0x28
 8002eb8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002eba:	4b30      	ldr	r3, [pc, #192]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ebc:	2209      	movs	r2, #9
 8002ebe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ec2:	2235      	movs	r2, #53	@ 0x35
 8002ec4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ec8:	220b      	movs	r2, #11
 8002eca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ece:	f240 121b 	movw	r2, #283	@ 0x11b
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002ed4:	4b29      	ldr	r3, [pc, #164]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ed6:	f240 2215 	movw	r2, #533	@ 0x215
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002edc:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ede:	f240 121d 	movw	r2, #285	@ 0x11d
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002ee4:	4b25      	ldr	r3, [pc, #148]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ee6:	f240 2235 	movw	r2, #565	@ 0x235
 8002eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002eec:	2100      	movs	r1, #0
 8002eee:	4823      	ldr	r0, [pc, #140]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ef0:	f000 fd30 	bl	8003954 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002ef4:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002ef6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002efa:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002efc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002efe:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002f02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002f04:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002f28:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f2e:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <BSP_LCD_Init+0xd0>)
 8002f38:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002f3a:	4810      	ldr	r0, [pc, #64]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f3c:	f004 fc46 	bl	80077cc <HAL_LTDC_GetState>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002f46:	2100      	movs	r1, #0
 8002f48:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f4a:	f000 fc29 	bl	80037a0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002f4e:	480b      	ldr	r0, [pc, #44]	@ (8002f7c <BSP_LCD_Init+0xcc>)
 8002f50:	f004 fa6c 	bl	800742c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002f54:	2201      	movs	r2, #1
 8002f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f5a:	480a      	ldr	r0, [pc, #40]	@ (8002f84 <BSP_LCD_Init+0xd4>)
 8002f5c:	f003 fc1e 	bl	800679c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002f60:	2201      	movs	r2, #1
 8002f62:	2108      	movs	r1, #8
 8002f64:	4808      	ldr	r0, [pc, #32]	@ (8002f88 <BSP_LCD_Init+0xd8>)
 8002f66:	f003 fc19 	bl	800679c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002f6a:	f000 fe57 	bl	8003c1c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002f6e:	4807      	ldr	r0, [pc, #28]	@ (8002f8c <BSP_LCD_Init+0xdc>)
 8002f70:	f000 f8d8 	bl	8003124 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000814 	.word	0x20000814
 8002f80:	40016800 	.word	0x40016800
 8002f84:	40022000 	.word	0x40022000
 8002f88:	40022800 	.word	0x40022800
 8002f8c:	20000038 	.word	0x20000038

08002f90 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <BSP_LCD_GetXSize+0x20>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a06      	ldr	r2, [pc, #24]	@ (8002fb4 <BSP_LCD_GetXSize+0x24>)
 8002f9a:	2134      	movs	r1, #52	@ 0x34
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3360      	adds	r3, #96	@ 0x60
 8002fa4:	681b      	ldr	r3, [r3, #0]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	200008fc 	.word	0x200008fc
 8002fb4:	20000814 	.word	0x20000814

08002fb8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <BSP_LCD_GetYSize+0x20>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a06      	ldr	r2, [pc, #24]	@ (8002fdc <BSP_LCD_GetYSize+0x24>)
 8002fc2:	2134      	movs	r1, #52	@ 0x34
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3364      	adds	r3, #100	@ 0x64
 8002fcc:	681b      	ldr	r3, [r3, #0]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200008fc 	.word	0x200008fc
 8002fdc:	20000814 	.word	0x20000814

08002fe0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b090      	sub	sp, #64	@ 0x40
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002ff0:	f7ff ffce 	bl	8002f90 <BSP_LCD_GetXSize>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002ffc:	f7ff ffdc 	bl	8002fb8 <BSP_LCD_GetYSize>
 8003000:	4603      	mov	r3, r0
 8003002:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 800300c:	23ff      	movs	r3, #255	@ 0xff
 800300e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003026:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800302a:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800302c:	2307      	movs	r3, #7
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003030:	f7ff ffae 	bl	8002f90 <BSP_LCD_GetXSize>
 8003034:	4603      	mov	r3, r0
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003038:	f7ff ffbe 	bl	8002fb8 <BSP_LCD_GetYSize>
 800303c:	4603      	mov	r3, r0
 800303e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003040:	88fa      	ldrh	r2, [r7, #6]
 8003042:	f107 030c 	add.w	r3, r7, #12
 8003046:	4619      	mov	r1, r3
 8003048:	4812      	ldr	r0, [pc, #72]	@ (8003094 <BSP_LCD_LayerDefaultInit+0xb4>)
 800304a:	f004 fb81 	bl	8007750 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	4911      	ldr	r1, [pc, #68]	@ (8003098 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3304      	adds	r3, #4
 800305e:	f04f 32ff 	mov.w	r2, #4294967295
 8003062:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	490c      	ldr	r1, [pc, #48]	@ (8003098 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3308      	adds	r3, #8
 8003074:	4a09      	ldr	r2, [pc, #36]	@ (800309c <BSP_LCD_LayerDefaultInit+0xbc>)
 8003076:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003078:	88fa      	ldrh	r2, [r7, #6]
 800307a:	4907      	ldr	r1, [pc, #28]	@ (8003098 <BSP_LCD_LayerDefaultInit+0xb8>)
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800308a:	601a      	str	r2, [r3, #0]
}
 800308c:	bf00      	nop
 800308e:	3740      	adds	r7, #64	@ 0x40
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000814 	.word	0x20000814
 8003098:	20000900 	.word	0x20000900
 800309c:	20000038 	.word	0x20000038

080030a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <BSP_LCD_SelectLayer+0x1c>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
} 
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200008fc 	.word	0x200008fc

080030c0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80030c8:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <BSP_LCD_SetTextColor+0x28>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4907      	ldr	r1, [pc, #28]	@ (80030ec <BSP_LCD_SetTextColor+0x2c>)
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	200008fc 	.word	0x200008fc
 80030ec:	20000900 	.word	0x20000900

080030f0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80030f8:	4b08      	ldr	r3, [pc, #32]	@ (800311c <BSP_LCD_SetBackColor+0x2c>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4908      	ldr	r1, [pc, #32]	@ (8003120 <BSP_LCD_SetBackColor+0x30>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3304      	adds	r3, #4
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	200008fc 	.word	0x200008fc
 8003120:	20000900 	.word	0x20000900

08003124 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <BSP_LCD_SetFont+0x2c>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4908      	ldr	r1, [pc, #32]	@ (8003154 <BSP_LCD_SetFont+0x30>)
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3308      	adds	r3, #8
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200008fc 	.word	0x200008fc
 8003154:	20000900 	.word	0x20000900

08003158 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315a:	b085      	sub	sp, #20
 800315c:	af02      	add	r7, sp, #8
 800315e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <BSP_LCD_Clear+0x48>)
 8003162:	681c      	ldr	r4, [r3, #0]
 8003164:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <BSP_LCD_Clear+0x48>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0e      	ldr	r2, [pc, #56]	@ (80031a4 <BSP_LCD_Clear+0x4c>)
 800316a:	2134      	movs	r1, #52	@ 0x34
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	335c      	adds	r3, #92	@ 0x5c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461e      	mov	r6, r3
 8003178:	f7ff ff0a 	bl	8002f90 <BSP_LCD_GetXSize>
 800317c:	4605      	mov	r5, r0
 800317e:	f7ff ff1b 	bl	8002fb8 <BSP_LCD_GetYSize>
 8003182:	4602      	mov	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2300      	movs	r3, #0
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	462a      	mov	r2, r5
 8003190:	4631      	mov	r1, r6
 8003192:	4620      	mov	r0, r4
 8003194:	f000 fcb2 	bl	8003afc <LL_FillBuffer>
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a0:	200008fc 	.word	0x200008fc
 80031a4:	20000814 	.word	0x20000814

080031a8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
 80031b2:	460b      	mov	r3, r1
 80031b4:	80bb      	strh	r3, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <BSP_LCD_DisplayChar+0x80>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	491b      	ldr	r1, [pc, #108]	@ (800322c <BSP_LCD_DisplayChar+0x84>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3308      	adds	r3, #8
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80031d6:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <BSP_LCD_DisplayChar+0x80>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4c14      	ldr	r4, [pc, #80]	@ (800322c <BSP_LCD_DisplayChar+0x84>)
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4423      	add	r3, r4
 80031e6:	3308      	adds	r3, #8
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031ec:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80031f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <BSP_LCD_DisplayChar+0x80>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4c0d      	ldr	r4, [pc, #52]	@ (800322c <BSP_LCD_DisplayChar+0x84>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4423      	add	r3, r4
 8003200:	3308      	adds	r3, #8
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	889b      	ldrh	r3, [r3, #4]
 8003206:	3307      	adds	r3, #7
 8003208:	2b00      	cmp	r3, #0
 800320a:	da00      	bge.n	800320e <BSP_LCD_DisplayChar+0x66>
 800320c:	3307      	adds	r3, #7
 800320e:	10db      	asrs	r3, r3, #3
 8003210:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003214:	18ca      	adds	r2, r1, r3
 8003216:	88b9      	ldrh	r1, [r7, #4]
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fbb6 	bl	800398c <DrawChar>
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bd90      	pop	{r4, r7, pc}
 8003228:	200008fc 	.word	0x200008fc
 800322c:	20000900 	.word	0x20000900

08003230 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003230:	b5b0      	push	{r4, r5, r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	60ba      	str	r2, [r7, #8]
 8003238:	461a      	mov	r2, r3
 800323a:	4603      	mov	r3, r0
 800323c:	81fb      	strh	r3, [r7, #14]
 800323e:	460b      	mov	r3, r1
 8003240:	81bb      	strh	r3, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003246:	2301      	movs	r3, #1
 8003248:	83fb      	strh	r3, [r7, #30]
 800324a:	2300      	movs	r3, #0
 800324c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800325a:	e002      	b.n	8003262 <BSP_LCD_DisplayStringAt+0x32>
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	3301      	adds	r3, #1
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	617a      	str	r2, [r7, #20]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f6      	bne.n	800325c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800326e:	f7ff fe8f 	bl	8002f90 <BSP_LCD_GetXSize>
 8003272:	4601      	mov	r1, r0
 8003274:	4b50      	ldr	r3, [pc, #320]	@ (80033b8 <BSP_LCD_DisplayStringAt+0x188>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4850      	ldr	r0, [pc, #320]	@ (80033bc <BSP_LCD_DisplayStringAt+0x18c>)
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4403      	add	r3, r0
 8003284:	3308      	adds	r3, #8
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	889b      	ldrh	r3, [r3, #4]
 800328a:	fbb1 f3f3 	udiv	r3, r1, r3
 800328e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d01c      	beq.n	80032d0 <BSP_LCD_DisplayStringAt+0xa0>
 8003296:	2b03      	cmp	r3, #3
 8003298:	dc33      	bgt.n	8003302 <BSP_LCD_DisplayStringAt+0xd2>
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <BSP_LCD_DisplayStringAt+0x74>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d019      	beq.n	80032d6 <BSP_LCD_DisplayStringAt+0xa6>
 80032a2:	e02e      	b.n	8003302 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad1      	subs	r1, r2, r3
 80032aa:	4b43      	ldr	r3, [pc, #268]	@ (80033b8 <BSP_LCD_DisplayStringAt+0x188>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4843      	ldr	r0, [pc, #268]	@ (80033bc <BSP_LCD_DisplayStringAt+0x18c>)
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4403      	add	r3, r0
 80032ba:	3308      	adds	r3, #8
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	889b      	ldrh	r3, [r3, #4]
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	4413      	add	r3, r2
 80032cc:	83fb      	strh	r3, [r7, #30]
      break;
 80032ce:	e01b      	b.n	8003308 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80032d0:	89fb      	ldrh	r3, [r7, #14]
 80032d2:	83fb      	strh	r3, [r7, #30]
      break;
 80032d4:	e018      	b.n	8003308 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	b299      	uxth	r1, r3
 80032de:	4b36      	ldr	r3, [pc, #216]	@ (80033b8 <BSP_LCD_DisplayStringAt+0x188>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4836      	ldr	r0, [pc, #216]	@ (80033bc <BSP_LCD_DisplayStringAt+0x18c>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4403      	add	r3, r0
 80032ee:	3308      	adds	r3, #8
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	889b      	ldrh	r3, [r3, #4]
 80032f4:	fb11 f303 	smulbb	r3, r1, r3
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	83fb      	strh	r3, [r7, #30]
      break;
 8003300:	e002      	b.n	8003308 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	83fb      	strh	r3, [r7, #30]
      break;
 8003306:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003308:	8bfb      	ldrh	r3, [r7, #30]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <BSP_LCD_DisplayStringAt+0xe6>
 800330e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003312:	2b00      	cmp	r3, #0
 8003314:	da1d      	bge.n	8003352 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800331a:	e01a      	b.n	8003352 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	89b9      	ldrh	r1, [r7, #12]
 8003322:	8bfb      	ldrh	r3, [r7, #30]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff3f 	bl	80031a8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800332a:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <BSP_LCD_DisplayStringAt+0x188>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4923      	ldr	r1, [pc, #140]	@ (80033bc <BSP_LCD_DisplayStringAt+0x18c>)
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3308      	adds	r3, #8
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	889a      	ldrh	r2, [r3, #4]
 8003340:	8bfb      	ldrh	r3, [r7, #30]
 8003342:	4413      	add	r3, r2
 8003344:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3301      	adds	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
    i++;
 800334c:	8bbb      	ldrh	r3, [r7, #28]
 800334e:	3301      	adds	r3, #1
 8003350:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2dc      	uxtb	r4, r3
 8003360:	f7ff fe16 	bl	8002f90 <BSP_LCD_GetXSize>
 8003364:	8bb9      	ldrh	r1, [r7, #28]
 8003366:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <BSP_LCD_DisplayStringAt+0x188>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4d14      	ldr	r5, [pc, #80]	@ (80033bc <BSP_LCD_DisplayStringAt+0x18c>)
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	442b      	add	r3, r5
 8003376:	3308      	adds	r3, #8
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	889b      	ldrh	r3, [r3, #4]
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	1ac3      	subs	r3, r0, r3
 8003382:	b299      	uxth	r1, r3
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <BSP_LCD_DisplayStringAt+0x188>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	480c      	ldr	r0, [pc, #48]	@ (80033bc <BSP_LCD_DisplayStringAt+0x18c>)
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4403      	add	r3, r0
 8003394:	3308      	adds	r3, #8
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	889b      	ldrh	r3, [r3, #4]
 800339a:	4299      	cmp	r1, r3
 800339c:	bf2c      	ite	cs
 800339e:	2301      	movcs	r3, #1
 80033a0:	2300      	movcc	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4023      	ands	r3, r4
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1b7      	bne.n	800331c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200008fc 	.word	0x200008fc
 80033bc:	20000900 	.word	0x20000900

080033c0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80033c0:	b5b0      	push	{r4, r5, r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	4603      	mov	r3, r0
 80033c8:	80fb      	strh	r3, [r7, #6]
 80033ca:	460b      	mov	r3, r1
 80033cc:	80bb      	strh	r3, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80033d6:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <BSP_LCD_DrawHLine+0xb0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a26      	ldr	r2, [pc, #152]	@ (8003474 <BSP_LCD_DrawHLine+0xb4>)
 80033dc:	2134      	movs	r1, #52	@ 0x34
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3348      	adds	r3, #72	@ 0x48
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d114      	bne.n	8003416 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80033ec:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <BSP_LCD_DrawHLine+0xb0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a20      	ldr	r2, [pc, #128]	@ (8003474 <BSP_LCD_DrawHLine+0xb4>)
 80033f2:	2134      	movs	r1, #52	@ 0x34
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	335c      	adds	r3, #92	@ 0x5c
 80033fc:	681c      	ldr	r4, [r3, #0]
 80033fe:	f7ff fdc7 	bl	8002f90 <BSP_LCD_GetXSize>
 8003402:	4602      	mov	r2, r0
 8003404:	88bb      	ldrh	r3, [r7, #4]
 8003406:	fb03 f202 	mul.w	r2, r3, r2
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	4413      	add	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4423      	add	r3, r4
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e013      	b.n	800343e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003416:	4b16      	ldr	r3, [pc, #88]	@ (8003470 <BSP_LCD_DrawHLine+0xb0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a16      	ldr	r2, [pc, #88]	@ (8003474 <BSP_LCD_DrawHLine+0xb4>)
 800341c:	2134      	movs	r1, #52	@ 0x34
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	335c      	adds	r3, #92	@ 0x5c
 8003426:	681c      	ldr	r4, [r3, #0]
 8003428:	f7ff fdb2 	bl	8002f90 <BSP_LCD_GetXSize>
 800342c:	4602      	mov	r2, r0
 800342e:	88bb      	ldrh	r3, [r7, #4]
 8003430:	fb03 f202 	mul.w	r2, r3, r2
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4423      	add	r3, r4
 800343c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800343e:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <BSP_LCD_DrawHLine+0xb0>)
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	887c      	ldrh	r4, [r7, #2]
 8003446:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <BSP_LCD_DrawHLine+0xb0>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4d0b      	ldr	r5, [pc, #44]	@ (8003478 <BSP_LCD_DrawHLine+0xb8>)
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	442b      	add	r3, r5
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2300      	movs	r3, #0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2301      	movs	r3, #1
 8003460:	4622      	mov	r2, r4
 8003462:	f000 fb4b 	bl	8003afc <LL_FillBuffer>
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bdb0      	pop	{r4, r5, r7, pc}
 800346e:	bf00      	nop
 8003470:	200008fc 	.word	0x200008fc
 8003474:	20000814 	.word	0x20000814
 8003478:	20000900 	.word	0x20000900

0800347c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	603a      	str	r2, [r7, #0]
 8003486:	80fb      	strh	r3, [r7, #6]
 8003488:	460b      	mov	r3, r1
 800348a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800348c:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <BSP_LCD_DrawPixel+0x88>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <BSP_LCD_DrawPixel+0x8c>)
 8003492:	2134      	movs	r1, #52	@ 0x34
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3348      	adds	r3, #72	@ 0x48
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d116      	bne.n	80034d0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80034a2:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <BSP_LCD_DrawPixel+0x88>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <BSP_LCD_DrawPixel+0x8c>)
 80034a8:	2134      	movs	r1, #52	@ 0x34
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	335c      	adds	r3, #92	@ 0x5c
 80034b2:	681c      	ldr	r4, [r3, #0]
 80034b4:	88bd      	ldrh	r5, [r7, #4]
 80034b6:	f7ff fd6b 	bl	8002f90 <BSP_LCD_GetXSize>
 80034ba:	4603      	mov	r3, r0
 80034bc:	fb03 f205 	mul.w	r2, r3, r5
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	4413      	add	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4423      	add	r3, r4
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b292      	uxth	r2, r2
 80034cc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80034ce:	e015      	b.n	80034fc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80034d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <BSP_LCD_DrawPixel+0x88>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003508 <BSP_LCD_DrawPixel+0x8c>)
 80034d6:	2134      	movs	r1, #52	@ 0x34
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	335c      	adds	r3, #92	@ 0x5c
 80034e0:	681c      	ldr	r4, [r3, #0]
 80034e2:	88bd      	ldrh	r5, [r7, #4]
 80034e4:	f7ff fd54 	bl	8002f90 <BSP_LCD_GetXSize>
 80034e8:	4603      	mov	r3, r0
 80034ea:	fb03 f205 	mul.w	r2, r3, r5
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4423      	add	r3, r4
 80034f6:	461a      	mov	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6013      	str	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bdb0      	pop	{r4, r5, r7, pc}
 8003504:	200008fc 	.word	0x200008fc
 8003508:	20000814 	.word	0x20000814

0800350c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b08b      	sub	sp, #44	@ 0x2c
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	330a      	adds	r3, #10
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	330b      	adds	r3, #11
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	330c      	adds	r3, #12
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	441a      	add	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	330d      	adds	r3, #13
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	061b      	lsls	r3, r3, #24
 8003550:	4413      	add	r3, r2
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3312      	adds	r3, #18
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3313      	adds	r3, #19
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3314      	adds	r3, #20
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3315      	adds	r3, #21
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	061b      	lsls	r3, r3, #24
 8003578:	4413      	add	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3316      	adds	r3, #22
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3317      	adds	r3, #23
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3318      	adds	r3, #24
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	441a      	add	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3319      	adds	r3, #25
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	331c      	adds	r3, #28
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	331d      	adds	r3, #29
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4413      	add	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80035b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003668 <BSP_LCD_DrawBitmap+0x15c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2b      	ldr	r2, [pc, #172]	@ (800366c <BSP_LCD_DrawBitmap+0x160>)
 80035be:	2134      	movs	r1, #52	@ 0x34
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	335c      	adds	r3, #92	@ 0x5c
 80035c8:	681c      	ldr	r4, [r3, #0]
 80035ca:	f7ff fce1 	bl	8002f90 <BSP_LCD_GetXSize>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	fb03 f202 	mul.w	r2, r3, r2
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4423      	add	r3, r4
 80035de:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	3b20      	subs	r3, #32
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	d802      	bhi.n	80035ee <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e008      	b.n	8003600 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	3b10      	subs	r3, #16
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	d802      	bhi.n	80035fc <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80035f6:	2302      	movs	r3, #2
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e001      	b.n	8003600 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3b01      	subs	r3, #1
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	08d2      	lsrs	r2, r2, #3
 800360e:	fb03 f202 	mul.w	r2, r3, r2
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	4413      	add	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003620:	e018      	b.n	8003654 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003622:	6a39      	ldr	r1, [r7, #32]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fab3 	bl	8003b94 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800362e:	f7ff fcaf 	bl	8002f90 <BSP_LCD_GetXSize>
 8003632:	4603      	mov	r3, r0
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	4413      	add	r3, r2
 800363a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	08db      	lsrs	r3, r3, #3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	425b      	negs	r3, r3
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	3301      	adds	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
 8003654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d3e2      	bcc.n	8003622 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	372c      	adds	r7, #44	@ 0x2c
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}
 8003666:	bf00      	nop
 8003668:	200008fc 	.word	0x200008fc
 800366c:	20000814 	.word	0x20000814

08003670 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af02      	add	r7, sp, #8
 8003678:	4604      	mov	r4, r0
 800367a:	4608      	mov	r0, r1
 800367c:	4611      	mov	r1, r2
 800367e:	461a      	mov	r2, r3
 8003680:	4623      	mov	r3, r4
 8003682:	80fb      	strh	r3, [r7, #6]
 8003684:	4603      	mov	r3, r0
 8003686:	80bb      	strh	r3, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003694:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <BSP_LCD_FillRect+0xe8>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4930      	ldr	r1, [pc, #192]	@ (800375c <BSP_LCD_FillRect+0xec>)
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fd0a 	bl	80030c0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003758 <BSP_LCD_FillRect+0xe8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003760 <BSP_LCD_FillRect+0xf0>)
 80036b2:	2134      	movs	r1, #52	@ 0x34
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3348      	adds	r3, #72	@ 0x48
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d114      	bne.n	80036ec <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036c2:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <BSP_LCD_FillRect+0xe8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a26      	ldr	r2, [pc, #152]	@ (8003760 <BSP_LCD_FillRect+0xf0>)
 80036c8:	2134      	movs	r1, #52	@ 0x34
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	335c      	adds	r3, #92	@ 0x5c
 80036d2:	681c      	ldr	r4, [r3, #0]
 80036d4:	f7ff fc5c 	bl	8002f90 <BSP_LCD_GetXSize>
 80036d8:	4602      	mov	r2, r0
 80036da:	88bb      	ldrh	r3, [r7, #4]
 80036dc:	fb03 f202 	mul.w	r2, r3, r2
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	4413      	add	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	4423      	add	r3, r4
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e013      	b.n	8003714 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <BSP_LCD_FillRect+0xe8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003760 <BSP_LCD_FillRect+0xf0>)
 80036f2:	2134      	movs	r1, #52	@ 0x34
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	335c      	adds	r3, #92	@ 0x5c
 80036fc:	681c      	ldr	r4, [r3, #0]
 80036fe:	f7ff fc47 	bl	8002f90 <BSP_LCD_GetXSize>
 8003702:	4602      	mov	r2, r0
 8003704:	88bb      	ldrh	r3, [r7, #4]
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4423      	add	r3, r4
 8003712:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <BSP_LCD_FillRect+0xe8>)
 8003716:	681c      	ldr	r4, [r3, #0]
 8003718:	68fd      	ldr	r5, [r7, #12]
 800371a:	887e      	ldrh	r6, [r7, #2]
 800371c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003720:	f7ff fc36 	bl	8002f90 <BSP_LCD_GetXSize>
 8003724:	4602      	mov	r2, r0
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	1ad1      	subs	r1, r2, r3
 800372a:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <BSP_LCD_FillRect+0xe8>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	480b      	ldr	r0, [pc, #44]	@ (800375c <BSP_LCD_FillRect+0xec>)
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	9100      	str	r1, [sp, #0]
 8003740:	4643      	mov	r3, r8
 8003742:	4632      	mov	r2, r6
 8003744:	4629      	mov	r1, r5
 8003746:	4620      	mov	r0, r4
 8003748:	f000 f9d8 	bl	8003afc <LL_FillBuffer>
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003756:	bf00      	nop
 8003758:	200008fc 	.word	0x200008fc
 800375c:	20000900 	.word	0x20000900
 8003760:	20000814 	.word	0x20000814

08003764 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003768:	4b0a      	ldr	r3, [pc, #40]	@ (8003794 <BSP_LCD_DisplayOn+0x30>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <BSP_LCD_DisplayOn+0x30>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003778:	2201      	movs	r2, #1
 800377a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800377e:	4806      	ldr	r0, [pc, #24]	@ (8003798 <BSP_LCD_DisplayOn+0x34>)
 8003780:	f003 f80c 	bl	800679c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003784:	2201      	movs	r2, #1
 8003786:	2108      	movs	r1, #8
 8003788:	4804      	ldr	r0, [pc, #16]	@ (800379c <BSP_LCD_DisplayOn+0x38>)
 800378a:	f003 f807 	bl	800679c <HAL_GPIO_WritePin>
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000814 	.word	0x20000814
 8003798:	40022000 	.word	0x40022000
 800379c:	40022800 	.word	0x40022800

080037a0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b090      	sub	sp, #64	@ 0x40
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80037aa:	4b64      	ldr	r3, [pc, #400]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	4a63      	ldr	r2, [pc, #396]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037b6:	4b61      	ldr	r3, [pc, #388]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80037c2:	4b5e      	ldr	r3, [pc, #376]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	4a5d      	ldr	r2, [pc, #372]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ce:	4b5b      	ldr	r3, [pc, #364]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037da:	4b58      	ldr	r3, [pc, #352]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	4a57      	ldr	r2, [pc, #348]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037e0:	f043 0310 	orr.w	r3, r3, #16
 80037e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037e6:	4b55      	ldr	r3, [pc, #340]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037f2:	4b52      	ldr	r3, [pc, #328]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	4a51      	ldr	r2, [pc, #324]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 80037f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fe:	4b4f      	ldr	r3, [pc, #316]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800380a:	4b4c      	ldr	r3, [pc, #304]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	4a4b      	ldr	r2, [pc, #300]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003814:	6313      	str	r3, [r2, #48]	@ 0x30
 8003816:	4b49      	ldr	r3, [pc, #292]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003822:	4b46      	ldr	r3, [pc, #280]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	4a45      	ldr	r2, [pc, #276]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003828:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800382c:	6313      	str	r3, [r2, #48]	@ 0x30
 800382e:	4b43      	ldr	r3, [pc, #268]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800383a:	4b40      	ldr	r3, [pc, #256]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	4a3f      	ldr	r2, [pc, #252]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003844:	6313      	str	r3, [r2, #48]	@ 0x30
 8003846:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003852:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	4a39      	ldr	r2, [pc, #228]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385c:	6313      	str	r3, [r2, #48]	@ 0x30
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800386a:	4b34      	ldr	r3, [pc, #208]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	4a33      	ldr	r2, [pc, #204]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003870:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003874:	6313      	str	r3, [r2, #48]	@ 0x30
 8003876:	4b31      	ldr	r3, [pc, #196]	@ (800393c <BSP_LCD_MspInit+0x19c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003882:	2310      	movs	r3, #16
 8003884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800388e:	2302      	movs	r3, #2
 8003890:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003892:	230e      	movs	r3, #14
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003896:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800389a:	4619      	mov	r1, r3
 800389c:	4828      	ldr	r0, [pc, #160]	@ (8003940 <BSP_LCD_MspInit+0x1a0>)
 800389e:	f002 fcc5 	bl	800622c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80038a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038a8:	2302      	movs	r3, #2
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80038ac:	2309      	movs	r3, #9
 80038ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80038b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038b4:	4619      	mov	r1, r3
 80038b6:	4823      	ldr	r0, [pc, #140]	@ (8003944 <BSP_LCD_MspInit+0x1a4>)
 80038b8:	f002 fcb8 	bl	800622c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80038bc:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80038c6:	230e      	movs	r3, #14
 80038c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80038ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	481d      	ldr	r0, [pc, #116]	@ (8003948 <BSP_LCD_MspInit+0x1a8>)
 80038d2:	f002 fcab 	bl	800622c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80038d6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80038e0:	230e      	movs	r3, #14
 80038e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80038e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038e8:	4619      	mov	r1, r3
 80038ea:	4818      	ldr	r0, [pc, #96]	@ (800394c <BSP_LCD_MspInit+0x1ac>)
 80038ec:	f002 fc9e 	bl	800622c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80038f0:	23f7      	movs	r3, #247	@ 0xf7
 80038f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80038f8:	230e      	movs	r3, #14
 80038fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80038fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003900:	4619      	mov	r1, r3
 8003902:	4813      	ldr	r0, [pc, #76]	@ (8003950 <BSP_LCD_MspInit+0x1b0>)
 8003904:	f002 fc92 	bl	800622c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800390e:	2301      	movs	r3, #1
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003916:	4619      	mov	r1, r3
 8003918:	480b      	ldr	r0, [pc, #44]	@ (8003948 <BSP_LCD_MspInit+0x1a8>)
 800391a:	f002 fc87 	bl	800622c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800391e:	2308      	movs	r3, #8
 8003920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003922:	2301      	movs	r3, #1
 8003924:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003926:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800392a:	4619      	mov	r1, r3
 800392c:	4808      	ldr	r0, [pc, #32]	@ (8003950 <BSP_LCD_MspInit+0x1b0>)
 800392e:	f002 fc7d 	bl	800622c <HAL_GPIO_Init>
}
 8003932:	bf00      	nop
 8003934:	3740      	adds	r7, #64	@ 0x40
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	40021000 	.word	0x40021000
 8003944:	40021800 	.word	0x40021800
 8003948:	40022000 	.word	0x40022000
 800394c:	40022400 	.word	0x40022400
 8003950:	40022800 	.word	0x40022800

08003954 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800395e:	4b0a      	ldr	r3, [pc, #40]	@ (8003988 <BSP_LCD_ClockConfig+0x34>)
 8003960:	2208      	movs	r2, #8
 8003962:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003964:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <BSP_LCD_ClockConfig+0x34>)
 8003966:	22c0      	movs	r2, #192	@ 0xc0
 8003968:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800396a:	4b07      	ldr	r3, [pc, #28]	@ (8003988 <BSP_LCD_ClockConfig+0x34>)
 800396c:	2205      	movs	r2, #5
 800396e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <BSP_LCD_ClockConfig+0x34>)
 8003972:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003976:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003978:	4803      	ldr	r0, [pc, #12]	@ (8003988 <BSP_LCD_ClockConfig+0x34>)
 800397a:	f004 fdeb 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000918 	.word	0x20000918

0800398c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	603a      	str	r2, [r7, #0]
 8003996:	80fb      	strh	r3, [r7, #6]
 8003998:	460b      	mov	r3, r1
 800399a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80039a4:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <DrawChar+0x168>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4953      	ldr	r1, [pc, #332]	@ (8003af8 <DrawChar+0x16c>)
 80039aa:	4613      	mov	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3308      	adds	r3, #8
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	88db      	ldrh	r3, [r3, #6]
 80039ba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80039bc:	4b4d      	ldr	r3, [pc, #308]	@ (8003af4 <DrawChar+0x168>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	494d      	ldr	r1, [pc, #308]	@ (8003af8 <DrawChar+0x16c>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3308      	adds	r3, #8
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	889b      	ldrh	r3, [r3, #4]
 80039d2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80039d4:	8a3b      	ldrh	r3, [r7, #16]
 80039d6:	3307      	adds	r3, #7
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da00      	bge.n	80039de <DrawChar+0x52>
 80039dc:	3307      	adds	r3, #7
 80039de:	10db      	asrs	r3, r3, #3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	8a3b      	ldrh	r3, [r7, #16]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e076      	b.n	8003ae2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80039f4:	8a3b      	ldrh	r3, [r7, #16]
 80039f6:	3307      	adds	r3, #7
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da00      	bge.n	80039fe <DrawChar+0x72>
 80039fc:	3307      	adds	r3, #7
 80039fe:	10db      	asrs	r3, r3, #3
 8003a00:	461a      	mov	r2, r3
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003a0e:	8a3b      	ldrh	r3, [r7, #16]
 8003a10:	3307      	adds	r3, #7
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da00      	bge.n	8003a18 <DrawChar+0x8c>
 8003a16:	3307      	adds	r3, #7
 8003a18:	10db      	asrs	r3, r3, #3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d002      	beq.n	8003a24 <DrawChar+0x98>
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d004      	beq.n	8003a2c <DrawChar+0xa0>
 8003a22:	e00c      	b.n	8003a3e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	617b      	str	r3, [r7, #20]
      break;
 8003a2a:	e016      	b.n	8003a5a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	3201      	adds	r2, #1
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
      break;
 8003a3c:	e00d      	b.n	8003a5a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	041a      	lsls	r2, r3, #16
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	3301      	adds	r3, #1
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	3202      	adds	r2, #2
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
      break;
 8003a58:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e036      	b.n	8003ace <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003a60:	8a3a      	ldrh	r2, [r7, #16]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	1ad2      	subs	r2, r2, r3
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d012      	beq.n	8003aa2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	4413      	add	r3, r2
 8003a84:	b298      	uxth	r0, r3
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <DrawChar+0x168>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	491b      	ldr	r1, [pc, #108]	@ (8003af8 <DrawChar+0x16c>)
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	88bb      	ldrh	r3, [r7, #4]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f7ff fcee 	bl	800347c <BSP_LCD_DrawPixel>
 8003aa0:	e012      	b.n	8003ac8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	b298      	uxth	r0, r3
 8003aac:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <DrawChar+0x168>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4911      	ldr	r1, [pc, #68]	@ (8003af8 <DrawChar+0x16c>)
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3304      	adds	r3, #4
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	88bb      	ldrh	r3, [r7, #4]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7ff fcda 	bl	800347c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	8a3b      	ldrh	r3, [r7, #16]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3c4      	bcc.n	8003a60 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003ad6:	88bb      	ldrh	r3, [r7, #4]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	8a7b      	ldrh	r3, [r7, #18]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d384      	bcc.n	80039f4 <DrawChar+0x68>
  }
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	200008fc 	.word	0x200008fc
 8003af8:	20000900 	.word	0x20000900

08003afc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b0c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b10:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b12:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <LL_FillBuffer+0x8c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <LL_FillBuffer+0x90>)
 8003b18:	2134      	movs	r1, #52	@ 0x34
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3348      	adds	r3, #72	@ 0x48
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d103      	bne.n	8003b30 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003b28:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	e002      	b.n	8003b36 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003b36:	4a13      	ldr	r2, [pc, #76]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b3e:	4a14      	ldr	r2, [pc, #80]	@ (8003b90 <LL_FillBuffer+0x94>)
 8003b40:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003b42:	4810      	ldr	r0, [pc, #64]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b44:	f001 ffd6 	bl	8005af4 <HAL_DMA2D_Init>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d115      	bne.n	8003b7a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	480c      	ldr	r0, [pc, #48]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b52:	f002 fa3d 	bl	8005fd0 <HAL_DMA2D_ConfigLayer>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10e      	bne.n	8003b7a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69f9      	ldr	r1, [r7, #28]
 8003b66:	4807      	ldr	r0, [pc, #28]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b68:	f002 f80e 	bl	8005b88 <HAL_DMA2D_Start>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003b72:	210a      	movs	r1, #10
 8003b74:	4803      	ldr	r0, [pc, #12]	@ (8003b84 <LL_FillBuffer+0x88>)
 8003b76:	f002 f832 	bl	8005bde <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200008bc 	.word	0x200008bc
 8003b88:	200008fc 	.word	0x200008fc
 8003b8c:	20000814 	.word	0x20000814
 8003b90:	4002b000 	.word	0x4002b000

08003b94 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003ba4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ba8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003bb0:	4b18      	ldr	r3, [pc, #96]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003bb6:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003bbc:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bbe:	22ff      	movs	r2, #255	@ 0xff
 8003bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003bc2:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003bce:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bd0:	4a11      	ldr	r2, [pc, #68]	@ (8003c18 <LL_ConvertLineToARGB8888+0x84>)
 8003bd2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003bd4:	480f      	ldr	r0, [pc, #60]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bd6:	f001 ff8d 	bl	8005af4 <HAL_DMA2D_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d115      	bne.n	8003c0c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003be0:	2101      	movs	r1, #1
 8003be2:	480c      	ldr	r0, [pc, #48]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003be4:	f002 f9f4 	bl	8005fd0 <HAL_DMA2D_ConfigLayer>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10e      	bne.n	8003c0c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4806      	ldr	r0, [pc, #24]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003bfa:	f001 ffc5 	bl	8005b88 <HAL_DMA2D_Start>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d103      	bne.n	8003c0c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003c04:	210a      	movs	r1, #10
 8003c06:	4803      	ldr	r0, [pc, #12]	@ (8003c14 <LL_ConvertLineToARGB8888+0x80>)
 8003c08:	f001 ffe9 	bl	8005bde <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	200008bc 	.word	0x200008bc
 8003c18:	4002b000 	.word	0x4002b000

08003c1c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003c20:	4b29      	ldr	r3, [pc, #164]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c22:	4a2a      	ldr	r2, [pc, #168]	@ (8003ccc <BSP_SDRAM_Init+0xb0>)
 8003c24:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003c26:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c28:	2202      	movs	r2, #2
 8003c2a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003c2c:	4b28      	ldr	r3, [pc, #160]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c2e:	2207      	movs	r2, #7
 8003c30:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003c32:	4b27      	ldr	r3, [pc, #156]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c34:	2204      	movs	r2, #4
 8003c36:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003c38:	4b25      	ldr	r3, [pc, #148]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003c3e:	4b24      	ldr	r3, [pc, #144]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c40:	2202      	movs	r2, #2
 8003c42:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003c44:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c46:	2202      	movs	r2, #2
 8003c48:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003c4a:	4b21      	ldr	r3, [pc, #132]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003c56:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c5e:	2204      	movs	r2, #4
 8003c60:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003c62:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c64:	2210      	movs	r2, #16
 8003c66:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003c68:	4b17      	ldr	r3, [pc, #92]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003c6e:	4b16      	ldr	r3, [pc, #88]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c74:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003c76:	4b14      	ldr	r3, [pc, #80]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c82:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003c84:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003c92:	2100      	movs	r1, #0
 8003c94:	480c      	ldr	r0, [pc, #48]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c96:	f000 f87f 	bl	8003d98 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003c9a:	490d      	ldr	r1, [pc, #52]	@ (8003cd0 <BSP_SDRAM_Init+0xb4>)
 8003c9c:	480a      	ldr	r0, [pc, #40]	@ (8003cc8 <BSP_SDRAM_Init+0xac>)
 8003c9e:	f005 fc1f 	bl	80094e0 <HAL_SDRAM_Init>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <BSP_SDRAM_Init+0xb8>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e002      	b.n	8003cb6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <BSP_SDRAM_Init+0xb8>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003cb6:	f240 6003 	movw	r0, #1539	@ 0x603
 8003cba:	f000 f80d 	bl	8003cd8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <BSP_SDRAM_Init+0xb8>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000099c 	.word	0x2000099c
 8003ccc:	a0000140 	.word	0xa0000140
 8003cd0:	200009d0 	.word	0x200009d0
 8003cd4:	20000048 	.word	0x20000048

08003cd8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cea:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cec:	2210      	movs	r2, #16
 8003cee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003cf6:	4b26      	ldr	r3, [pc, #152]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d00:	4923      	ldr	r1, [pc, #140]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d02:	4824      	ldr	r0, [pc, #144]	@ (8003d94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d04:	f005 fc20 	bl	8009548 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f000 ff55 	bl	8004bb8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d10:	2202      	movs	r2, #2
 8003d12:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d16:	2210      	movs	r2, #16
 8003d18:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d2a:	4919      	ldr	r1, [pc, #100]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d2c:	4819      	ldr	r0, [pc, #100]	@ (8003d94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d2e:	f005 fc0b 	bl	8009548 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003d32:	4b17      	ldr	r3, [pc, #92]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d34:	2203      	movs	r2, #3
 8003d36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d38:	4b15      	ldr	r3, [pc, #84]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d40:	2208      	movs	r2, #8
 8003d42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003d44:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4e:	4910      	ldr	r1, [pc, #64]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d50:	4810      	ldr	r0, [pc, #64]	@ (8003d94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d52:	f005 fbf9 	bl	8009548 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003d56:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8003d5a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d5e:	2204      	movs	r2, #4
 8003d60:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d64:	2210      	movs	r2, #16
 8003d66:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d72:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d78:	4905      	ldr	r1, [pc, #20]	@ (8003d90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d7a:	4806      	ldr	r0, [pc, #24]	@ (8003d94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d7c:	f005 fbe4 	bl	8009548 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4804      	ldr	r0, [pc, #16]	@ (8003d94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d84:	f005 fc15 	bl	80095b2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200009ec 	.word	0x200009ec
 8003d94:	2000099c 	.word	0x2000099c

08003d98 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b090      	sub	sp, #64	@ 0x40
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003da2:	4b70      	ldr	r3, [pc, #448]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	4a6f      	ldr	r2, [pc, #444]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6393      	str	r3, [r2, #56]	@ 0x38
 8003dae:	4b6d      	ldr	r3, [pc, #436]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003dba:	4b6a      	ldr	r3, [pc, #424]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	4a69      	ldr	r2, [pc, #420]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003dc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc6:	4b67      	ldr	r3, [pc, #412]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd2:	4b64      	ldr	r3, [pc, #400]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4a63      	ldr	r2, [pc, #396]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4b61      	ldr	r3, [pc, #388]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dea:	4b5e      	ldr	r3, [pc, #376]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4a5d      	ldr	r2, [pc, #372]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003df0:	f043 0308 	orr.w	r3, r3, #8
 8003df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e02:	4b58      	ldr	r3, [pc, #352]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	4a57      	ldr	r2, [pc, #348]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e08:	f043 0310 	orr.w	r3, r3, #16
 8003e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e0e:	4b55      	ldr	r3, [pc, #340]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e1a:	4b52      	ldr	r3, [pc, #328]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	4a51      	ldr	r2, [pc, #324]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e20:	f043 0320 	orr.w	r3, r3, #32
 8003e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e26:	4b4f      	ldr	r3, [pc, #316]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e32:	4b4c      	ldr	r3, [pc, #304]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	4a4b      	ldr	r2, [pc, #300]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e3e:	4b49      	ldr	r3, [pc, #292]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e4a:	4b46      	ldr	r3, [pc, #280]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	4a45      	ldr	r2, [pc, #276]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e56:	4b43      	ldr	r3, [pc, #268]	@ (8003f64 <BSP_SDRAM_MspInit+0x1cc>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003e66:	2301      	movs	r3, #1
 8003e68:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003e6e:	230c      	movs	r3, #12
 8003e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003e72:	2308      	movs	r3, #8
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	483a      	ldr	r0, [pc, #232]	@ (8003f68 <BSP_SDRAM_MspInit+0x1d0>)
 8003e7e:	f002 f9d5 	bl	800622c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003e82:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4837      	ldr	r0, [pc, #220]	@ (8003f6c <BSP_SDRAM_MspInit+0x1d4>)
 8003e90:	f002 f9cc 	bl	800622c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003e94:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4833      	ldr	r0, [pc, #204]	@ (8003f70 <BSP_SDRAM_MspInit+0x1d8>)
 8003ea2:	f002 f9c3 	bl	800622c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003ea6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4830      	ldr	r0, [pc, #192]	@ (8003f74 <BSP_SDRAM_MspInit+0x1dc>)
 8003eb4:	f002 f9ba 	bl	800622c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003eb8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	482c      	ldr	r0, [pc, #176]	@ (8003f78 <BSP_SDRAM_MspInit+0x1e0>)
 8003ec6:	f002 f9b1 	bl	800622c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003eca:	2328      	movs	r3, #40	@ 0x28
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003ece:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4829      	ldr	r0, [pc, #164]	@ (8003f7c <BSP_SDRAM_MspInit+0x1e4>)
 8003ed6:	f002 f9a9 	bl	800622c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003eda:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003ee0:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003ee2:	2280      	movs	r2, #128	@ 0x80
 8003ee4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003ee6:	4b26      	ldr	r3, [pc, #152]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eec:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003eee:	4b24      	ldr	r3, [pc, #144]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ef4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ef6:	4b22      	ldr	r3, [pc, #136]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003ef8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003efc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003efe:	4b20      	ldr	r3, [pc, #128]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f04:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003f06:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f12:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003f1a:	4b19      	ldr	r3, [pc, #100]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003f20:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003f26:	4b16      	ldr	r3, [pc, #88]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f2e:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <BSP_SDRAM_MspInit+0x1ec>)
 8003f30:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a12      	ldr	r2, [pc, #72]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f38:	4a11      	ldr	r2, [pc, #68]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003f3e:	4810      	ldr	r0, [pc, #64]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f40:	f001 fcc8 	bl	80058d4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003f44:	480e      	ldr	r0, [pc, #56]	@ (8003f80 <BSP_SDRAM_MspInit+0x1e8>)
 8003f46:	f001 fc17 	bl	8005778 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	210f      	movs	r1, #15
 8003f4e:	2038      	movs	r0, #56	@ 0x38
 8003f50:	f001 fb08 	bl	8005564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003f54:	2038      	movs	r0, #56	@ 0x38
 8003f56:	f001 fb21 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	3740      	adds	r7, #64	@ 0x40
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40020800 	.word	0x40020800
 8003f6c:	40020c00 	.word	0x40020c00
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40021400 	.word	0x40021400
 8003f78:	40021800 	.word	0x40021800
 8003f7c:	40021c00 	.word	0x40021c00
 8003f80:	200009fc 	.word	0x200009fc
 8003f84:	40026410 	.word	0x40026410

08003f88 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	460a      	mov	r2, r1
 8003f92:	80fb      	strh	r3, [r7, #6]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003f9c:	4a14      	ldr	r2, [pc, #80]	@ (8003ff0 <BSP_TS_Init+0x68>)
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003fa2:	4a14      	ldr	r2, [pc, #80]	@ (8003ff4 <BSP_TS_Init+0x6c>)
 8003fa4:	88bb      	ldrh	r3, [r7, #4]
 8003fa6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003fa8:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <BSP_TS_Init+0x70>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2070      	movs	r0, #112	@ 0x70
 8003fae:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <BSP_TS_Init+0x70>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2070      	movs	r0, #112	@ 0x70
 8003fb6:	4798      	blx	r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b51      	cmp	r3, #81	@ 0x51
 8003fbc:	d110      	bne.n	8003fe0 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <BSP_TS_Init+0x74>)
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <BSP_TS_Init+0x70>)
 8003fc2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004000 <BSP_TS_Init+0x78>)
 8003fc6:	2270      	movs	r2, #112	@ 0x70
 8003fc8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003fca:	4b0e      	ldr	r3, [pc, #56]	@ (8004004 <BSP_TS_Init+0x7c>)
 8003fcc:	2208      	movs	r2, #8
 8003fce:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <BSP_TS_Init+0x74>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <BSP_TS_Init+0x78>)
 8003fd8:	7812      	ldrb	r2, [r2, #0]
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4798      	blx	r3
 8003fde:	e001      	b.n	8003fe4 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000a60 	.word	0x20000a60
 8003ff4:	20000a62 	.word	0x20000a62
 8003ff8:	20000010 	.word	0x20000010
 8003ffc:	20000a5c 	.word	0x20000a5c
 8004000:	20000a65 	.word	0x20000a65
 8004004:	20000a64 	.word	0x20000a64

08004008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <HAL_MspInit+0x4c>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	4a10      	ldr	r2, [pc, #64]	@ (8004054 <HAL_MspInit+0x4c>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	@ 0x40
 800401a:	4b0e      	ldr	r3, [pc, #56]	@ (8004054 <HAL_MspInit+0x4c>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004026:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <HAL_MspInit+0x4c>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	4a0a      	ldr	r2, [pc, #40]	@ (8004054 <HAL_MspInit+0x4c>)
 800402c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004030:	6453      	str	r3, [r2, #68]	@ 0x44
 8004032:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <HAL_MspInit+0x4c>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	210f      	movs	r1, #15
 8004042:	f06f 0001 	mvn.w	r0, #1
 8004046:	f001 fa8d 	bl	8005564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800

08004058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	@ 0x38
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004068:	4b33      	ldr	r3, [pc, #204]	@ (8004138 <HAL_InitTick+0xe0>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	4a32      	ldr	r2, [pc, #200]	@ (8004138 <HAL_InitTick+0xe0>)
 800406e:	f043 0310 	orr.w	r3, r3, #16
 8004072:	6413      	str	r3, [r2, #64]	@ 0x40
 8004074:	4b30      	ldr	r3, [pc, #192]	@ (8004138 <HAL_InitTick+0xe0>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004080:	f107 0210 	add.w	r2, r7, #16
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f004 fa30 	bl	80084f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800409a:	f004 fa01 	bl	80084a0 <HAL_RCC_GetPCLK1Freq>
 800409e:	6378      	str	r0, [r7, #52]	@ 0x34
 80040a0:	e004      	b.n	80040ac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80040a2:	f004 f9fd 	bl	80084a0 <HAL_RCC_GetPCLK1Freq>
 80040a6:	4603      	mov	r3, r0
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_InitTick+0xe4>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	0c9b      	lsrs	r3, r3, #18
 80040b6:	3b01      	subs	r3, #1
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80040ba:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <HAL_InitTick+0xe8>)
 80040bc:	4a21      	ldr	r2, [pc, #132]	@ (8004144 <HAL_InitTick+0xec>)
 80040be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80040c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <HAL_InitTick+0xe8>)
 80040c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80040c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80040c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <HAL_InitTick+0xe8>)
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <HAL_InitTick+0xe8>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_InitTick+0xe8>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040da:	4b19      	ldr	r3, [pc, #100]	@ (8004140 <HAL_InitTick+0xe8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80040e0:	4817      	ldr	r0, [pc, #92]	@ (8004140 <HAL_InitTick+0xe8>)
 80040e2:	f005 fb39 	bl	8009758 <HAL_TIM_Base_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80040ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d11b      	bne.n	800412c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80040f4:	4812      	ldr	r0, [pc, #72]	@ (8004140 <HAL_InitTick+0xe8>)
 80040f6:	f005 fb87 	bl	8009808 <HAL_TIM_Base_Start_IT>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004100:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004104:	2b00      	cmp	r3, #0
 8004106:	d111      	bne.n	800412c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004108:	2036      	movs	r0, #54	@ 0x36
 800410a:	f001 fa47 	bl	800559c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d808      	bhi.n	8004126 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004114:	2200      	movs	r2, #0
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	2036      	movs	r0, #54	@ 0x36
 800411a:	f001 fa23 	bl	8005564 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800411e:	4a0a      	ldr	r2, [pc, #40]	@ (8004148 <HAL_InitTick+0xf0>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e002      	b.n	800412c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800412c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004130:	4618      	mov	r0, r3
 8004132:	3738      	adds	r7, #56	@ 0x38
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40023800 	.word	0x40023800
 800413c:	431bde83 	.word	0x431bde83
 8004140:	20000a68 	.word	0x20000a68
 8004144:	40001000 	.word	0x40001000
 8004148:	20000050 	.word	0x20000050

0800414c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <NMI_Handler+0x4>

08004154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <HardFault_Handler+0x4>

0800415c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <MemManage_Handler+0x4>

08004164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <BusFault_Handler+0x4>

0800416c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <UsageFault_Handler+0x4>

08004174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <TIM6_DAC_IRQHandler+0x20>)
 800418a:	791b      	ldrb	r3, [r3, #4]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004192:	4804      	ldr	r0, [pc, #16]	@ (80041a4 <TIM6_DAC_IRQHandler+0x20>)
 8004194:	f001 fa32 	bl	80055fc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004198:	4803      	ldr	r0, [pc, #12]	@ (80041a8 <TIM6_DAC_IRQHandler+0x24>)
 800419a:	f005 fbad 	bl	80098f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000164 	.word	0x20000164
 80041a8:	20000a68 	.word	0x20000a68

080041ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80041b0:	4802      	ldr	r0, [pc, #8]	@ (80041bc <LTDC_IRQHandler+0x10>)
 80041b2:	f003 fa0b 	bl	80075cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000684 	.word	0x20000684

080041c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80041c4:	4802      	ldr	r0, [pc, #8]	@ (80041d0 <DMA2D_IRQHandler+0x10>)
 80041c6:	f001 fdf3 	bl	8005db0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000178 	.word	0x20000178

080041d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	return 1;
 80041d8:	2301      	movs	r3, #1
}
 80041da:	4618      	mov	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_kill>:

int _kill(int pid, int sig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041ee:	f008 f8d9 	bl	800c3a4 <__errno>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2216      	movs	r2, #22
 80041f6:	601a      	str	r2, [r3, #0]
	return -1;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_exit>:

void _exit (int status)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800420c:	f04f 31ff 	mov.w	r1, #4294967295
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ffe7 	bl	80041e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004216:	bf00      	nop
 8004218:	e7fd      	b.n	8004216 <_exit+0x12>

0800421a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e00a      	b.n	8004242 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800422c:	f3af 8000 	nop.w
 8004230:	4601      	mov	r1, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	60ba      	str	r2, [r7, #8]
 8004238:	b2ca      	uxtb	r2, r1
 800423a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3301      	adds	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	429a      	cmp	r2, r3
 8004248:	dbf0      	blt.n	800422c <_read+0x12>
	}

return len;
 800424a:	687b      	ldr	r3, [r7, #4]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e009      	b.n	800427a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	60ba      	str	r2, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3301      	adds	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	dbf1      	blt.n	8004266 <_write+0x12>
	}
	return len;
 8004282:	687b      	ldr	r3, [r7, #4]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_close>:

int _close(int file)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	return -1;
 8004294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042b4:	605a      	str	r2, [r3, #4]
	return 0;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <_isatty>:

int _isatty(int file)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	return 1;
 80042cc:	2301      	movs	r3, #1
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
	return 0;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <_sbrk+0x5c>)
 80042fe:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <_sbrk+0x60>)
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004308:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004310:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <_sbrk+0x64>)
 8004312:	4a12      	ldr	r2, [pc, #72]	@ (800435c <_sbrk+0x68>)
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <_sbrk+0x64>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d207      	bcs.n	8004334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004324:	f008 f83e 	bl	800c3a4 <__errno>
 8004328:	4603      	mov	r3, r0
 800432a:	220c      	movs	r2, #12
 800432c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e009      	b.n	8004348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004334:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <_sbrk+0x64>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <_sbrk+0x64>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	4a05      	ldr	r2, [pc, #20]	@ (8004358 <_sbrk+0x64>)
 8004344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20050000 	.word	0x20050000
 8004354:	00000400 	.word	0x00000400
 8004358:	20000ab4 	.word	0x20000ab4
 800435c:	20004c68 	.word	0x20004c68

08004360 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004364:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <SystemInit+0x20>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	4a05      	ldr	r2, [pc, #20]	@ (8004380 <SystemInit+0x20>)
 800436c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800438a:	f107 0310 	add.w	r3, r7, #16
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	605a      	str	r2, [r3, #4]
 8004394:	609a      	str	r2, [r3, #8]
 8004396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043a2:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043a4:	4a20      	ldr	r2, [pc, #128]	@ (8004428 <MX_TIM1_Init+0xa4>)
 80043a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043bc:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043c2:	4b18      	ldr	r3, [pc, #96]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043c8:	4b16      	ldr	r3, [pc, #88]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043ce:	4815      	ldr	r0, [pc, #84]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043d0:	f005 f9c2 	bl	8009758 <HAL_TIM_Base_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80043da:	f7fe fa4d 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043e4:	f107 0310 	add.w	r3, r7, #16
 80043e8:	4619      	mov	r1, r3
 80043ea:	480e      	ldr	r0, [pc, #56]	@ (8004424 <MX_TIM1_Init+0xa0>)
 80043ec:	f005 fba4 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80043f6:	f7fe fa3f 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4806      	ldr	r0, [pc, #24]	@ (8004424 <MX_TIM1_Init+0xa0>)
 800440c:	f005 fdc0 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004416:	f7fe fa2f 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800441a:	bf00      	nop
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000ab8 	.word	0x20000ab8
 8004428:	40010000 	.word	0x40010000

0800442c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004432:	f107 0310 	add.w	r3, r7, #16
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	609a      	str	r2, [r3, #8]
 800443e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800444a:	4b1e      	ldr	r3, [pc, #120]	@ (80044c4 <MX_TIM2_Init+0x98>)
 800444c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004450:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004452:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <MX_TIM2_Init+0x98>)
 8004454:	2200      	movs	r2, #0
 8004456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004458:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <MX_TIM2_Init+0x98>)
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800445e:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <MX_TIM2_Init+0x98>)
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004466:	4b17      	ldr	r3, [pc, #92]	@ (80044c4 <MX_TIM2_Init+0x98>)
 8004468:	2200      	movs	r2, #0
 800446a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800446c:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <MX_TIM2_Init+0x98>)
 800446e:	2200      	movs	r2, #0
 8004470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004472:	4814      	ldr	r0, [pc, #80]	@ (80044c4 <MX_TIM2_Init+0x98>)
 8004474:	f005 f970 	bl	8009758 <HAL_TIM_Base_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800447e:	f7fe f9fb 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004488:	f107 0310 	add.w	r3, r7, #16
 800448c:	4619      	mov	r1, r3
 800448e:	480d      	ldr	r0, [pc, #52]	@ (80044c4 <MX_TIM2_Init+0x98>)
 8004490:	f005 fb52 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800449a:	f7fe f9ed 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4806      	ldr	r0, [pc, #24]	@ (80044c4 <MX_TIM2_Init+0x98>)
 80044ac:	f005 fd70 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80044b6:	f7fe f9df 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044ba:	bf00      	nop
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000b04 	.word	0x20000b04

080044c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044ce:	f107 0310 	add.w	r3, r7, #16
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044e6:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <MX_TIM3_Init+0x94>)
 80044e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004560 <MX_TIM3_Init+0x98>)
 80044ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044ec:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <MX_TIM3_Init+0x94>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f2:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <MX_TIM3_Init+0x94>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80044f8:	4b18      	ldr	r3, [pc, #96]	@ (800455c <MX_TIM3_Init+0x94>)
 80044fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004500:	4b16      	ldr	r3, [pc, #88]	@ (800455c <MX_TIM3_Init+0x94>)
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <MX_TIM3_Init+0x94>)
 8004508:	2200      	movs	r2, #0
 800450a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800450c:	4813      	ldr	r0, [pc, #76]	@ (800455c <MX_TIM3_Init+0x94>)
 800450e:	f005 f923 	bl	8009758 <HAL_TIM_Base_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004518:	f7fe f9ae 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800451c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004522:	f107 0310 	add.w	r3, r7, #16
 8004526:	4619      	mov	r1, r3
 8004528:	480c      	ldr	r0, [pc, #48]	@ (800455c <MX_TIM3_Init+0x94>)
 800452a:	f005 fb05 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004534:	f7fe f9a0 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004538:	2300      	movs	r3, #0
 800453a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4805      	ldr	r0, [pc, #20]	@ (800455c <MX_TIM3_Init+0x94>)
 8004546:	f005 fd23 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004550:	f7fe f992 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004554:	bf00      	nop
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000b50 	.word	0x20000b50
 8004560:	40000400 	.word	0x40000400

08004564 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800456a:	f107 0310 	add.w	r3, r7, #16
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004578:	1d3b      	adds	r3, r7, #4
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004582:	4b1d      	ldr	r3, [pc, #116]	@ (80045f8 <MX_TIM5_Init+0x94>)
 8004584:	4a1d      	ldr	r2, [pc, #116]	@ (80045fc <MX_TIM5_Init+0x98>)
 8004586:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <MX_TIM5_Init+0x94>)
 800458a:	2200      	movs	r2, #0
 800458c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458e:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <MX_TIM5_Init+0x94>)
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004594:	4b18      	ldr	r3, [pc, #96]	@ (80045f8 <MX_TIM5_Init+0x94>)
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459c:	4b16      	ldr	r3, [pc, #88]	@ (80045f8 <MX_TIM5_Init+0x94>)
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a2:	4b15      	ldr	r3, [pc, #84]	@ (80045f8 <MX_TIM5_Init+0x94>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80045a8:	4813      	ldr	r0, [pc, #76]	@ (80045f8 <MX_TIM5_Init+0x94>)
 80045aa:	f005 f8d5 	bl	8009758 <HAL_TIM_Base_Init>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80045b4:	f7fe f960 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80045be:	f107 0310 	add.w	r3, r7, #16
 80045c2:	4619      	mov	r1, r3
 80045c4:	480c      	ldr	r0, [pc, #48]	@ (80045f8 <MX_TIM5_Init+0x94>)
 80045c6:	f005 fab7 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80045d0:	f7fe f952 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4805      	ldr	r0, [pc, #20]	@ (80045f8 <MX_TIM5_Init+0x94>)
 80045e2:	f005 fcd5 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80045ec:	f7fe f944 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80045f0:	bf00      	nop
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000b9c 	.word	0x20000b9c
 80045fc:	40000c00 	.word	0x40000c00

08004600 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004606:	f107 0310 	add.w	r3, r7, #16
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800461e:	4b20      	ldr	r3, [pc, #128]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 8004620:	4a20      	ldr	r2, [pc, #128]	@ (80046a4 <MX_TIM8_Init+0xa4>)
 8004622:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004624:	4b1e      	ldr	r3, [pc, #120]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 8004626:	2200      	movs	r2, #0
 8004628:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800462a:	4b1d      	ldr	r3, [pc, #116]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004630:	4b1b      	ldr	r3, [pc, #108]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 8004632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004636:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800463e:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004644:	4b16      	ldr	r3, [pc, #88]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800464a:	4815      	ldr	r0, [pc, #84]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 800464c:	f005 f884 	bl	8009758 <HAL_TIM_Base_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8004656:	f7fe f90f 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800465a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800465e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	4619      	mov	r1, r3
 8004666:	480e      	ldr	r0, [pc, #56]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 8004668:	f005 fa66 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004672:	f7fe f901 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4806      	ldr	r0, [pc, #24]	@ (80046a0 <MX_TIM8_Init+0xa0>)
 8004688:	f005 fc82 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004692:	f7fe f8f1 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004696:	bf00      	nop
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000be8 	.word	0x20000be8
 80046a4:	40010400 	.word	0x40010400

080046a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	@ 0x38
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3b      	ldr	r2, [pc, #236]	@ (80047b4 <HAL_TIM_Base_MspInit+0x10c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046ca:	4b3b      	ldr	r3, [pc, #236]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	4a3a      	ldr	r2, [pc, #232]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046d6:	4b38      	ldr	r3, [pc, #224]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80046e2:	e062      	b.n	80047aa <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ec:	d10c      	bne.n	8004708 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046ee:	4b32      	ldr	r3, [pc, #200]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	4a31      	ldr	r2, [pc, #196]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046fa:	4b2f      	ldr	r3, [pc, #188]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	69fb      	ldr	r3, [r7, #28]
}
 8004706:	e050      	b.n	80047aa <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2b      	ldr	r2, [pc, #172]	@ (80047bc <HAL_TIM_Base_MspInit+0x114>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d10c      	bne.n	800472c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004712:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	4a28      	ldr	r2, [pc, #160]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004718:	f043 0302 	orr.w	r3, r3, #2
 800471c:	6413      	str	r3, [r2, #64]	@ 0x40
 800471e:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	69bb      	ldr	r3, [r7, #24]
}
 800472a:	e03e      	b.n	80047aa <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a23      	ldr	r2, [pc, #140]	@ (80047c0 <HAL_TIM_Base_MspInit+0x118>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004736:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	4a1f      	ldr	r2, [pc, #124]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	6413      	str	r3, [r2, #64]	@ 0x40
 8004742:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	697b      	ldr	r3, [r7, #20]
}
 800474e:	e02c      	b.n	80047aa <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1b      	ldr	r2, [pc, #108]	@ (80047c4 <HAL_TIM_Base_MspInit+0x11c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d127      	bne.n	80047aa <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800475a:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	4a16      	ldr	r2, [pc, #88]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	6453      	str	r3, [r2, #68]	@ 0x44
 8004766:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004772:	4b11      	ldr	r3, [pc, #68]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	4a10      	ldr	r2, [pc, #64]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477c:	6313      	str	r3, [r2, #48]	@ 0x30
 800477e:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <HAL_TIM_Base_MspInit+0x110>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800478a:	2304      	movs	r3, #4
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	2302      	movs	r3, #2
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004796:	2300      	movs	r3, #0
 8004798:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800479a:	2303      	movs	r3, #3
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800479e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047a2:	4619      	mov	r1, r3
 80047a4:	4808      	ldr	r0, [pc, #32]	@ (80047c8 <HAL_TIM_Base_MspInit+0x120>)
 80047a6:	f001 fd41 	bl	800622c <HAL_GPIO_Init>
}
 80047aa:	bf00      	nop
 80047ac:	3738      	adds	r7, #56	@ 0x38
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40022000 	.word	0x40022000

080047cc <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80047d0:	4b14      	ldr	r3, [pc, #80]	@ (8004824 <MX_UART7_Init+0x58>)
 80047d2:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <MX_UART7_Init+0x5c>)
 80047d4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <MX_UART7_Init+0x58>)
 80047d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047dc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80047de:	4b11      	ldr	r3, [pc, #68]	@ (8004824 <MX_UART7_Init+0x58>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80047e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <MX_UART7_Init+0x58>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80047ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004824 <MX_UART7_Init+0x58>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80047f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <MX_UART7_Init+0x58>)
 80047f2:	220c      	movs	r2, #12
 80047f4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <MX_UART7_Init+0x58>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80047fc:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <MX_UART7_Init+0x58>)
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004802:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <MX_UART7_Init+0x58>)
 8004804:	2200      	movs	r2, #0
 8004806:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <MX_UART7_Init+0x58>)
 800480a:	2200      	movs	r2, #0
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800480e:	4805      	ldr	r0, [pc, #20]	@ (8004824 <MX_UART7_Init+0x58>)
 8004810:	f005 fc6a 	bl	800a0e8 <HAL_UART_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800481a:	f7fe f82d 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000c34 	.word	0x20000c34
 8004828:	40007800 	.word	0x40007800

0800482c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004830:	4b14      	ldr	r3, [pc, #80]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004832:	4a15      	ldr	r2, [pc, #84]	@ (8004888 <MX_USART1_UART_Init+0x5c>)
 8004834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004836:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800483c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800483e:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004840:	2200      	movs	r2, #0
 8004842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004844:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004846:	2200      	movs	r2, #0
 8004848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800484a:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 800484c:	2200      	movs	r2, #0
 800484e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004852:	220c      	movs	r2, #12
 8004854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004858:	2200      	movs	r2, #0
 800485a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800485c:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 800485e:	2200      	movs	r2, #0
 8004860:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004862:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004864:	2200      	movs	r2, #0
 8004866:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004868:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 800486a:	2200      	movs	r2, #0
 800486c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800486e:	4805      	ldr	r0, [pc, #20]	@ (8004884 <MX_USART1_UART_Init+0x58>)
 8004870:	f005 fc3a 	bl	800a0e8 <HAL_UART_Init>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800487a:	f7fd fffd 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000cbc 	.word	0x20000cbc
 8004888:	40011000 	.word	0x40011000

0800488c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004890:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 8004892:	4a15      	ldr	r2, [pc, #84]	@ (80048e8 <MX_USART6_UART_Init+0x5c>)
 8004894:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004896:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 8004898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800489c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800489e:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80048b0:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048b2:	220c      	movs	r2, #12
 80048b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80048bc:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048be:	2200      	movs	r2, #0
 80048c0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048c2:	4b08      	ldr	r3, [pc, #32]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80048ce:	4805      	ldr	r0, [pc, #20]	@ (80048e4 <MX_USART6_UART_Init+0x58>)
 80048d0:	f005 fc0a 	bl	800a0e8 <HAL_UART_Init>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80048da:	f7fd ffcd 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000d44 	.word	0x20000d44
 80048e8:	40011400 	.word	0x40011400

080048ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b0b0      	sub	sp, #192	@ 0xc0
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	609a      	str	r2, [r3, #8]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004904:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004908:	2284      	movs	r2, #132	@ 0x84
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f007 fcfa 	bl	800c306 <memset>
  if(uartHandle->Instance==UART7)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a75      	ldr	r2, [pc, #468]	@ (8004aec <HAL_UART_MspInit+0x200>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d13d      	bne.n	8004998 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800491c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004920:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004922:	2300      	movs	r3, #0
 8004924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800492c:	4618      	mov	r0, r3
 800492e:	f003 fe11 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004938:	f7fd ff9e 	bl	8002878 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800493c:	4b6c      	ldr	r3, [pc, #432]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	4a6b      	ldr	r2, [pc, #428]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004942:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004946:	6413      	str	r3, [r2, #64]	@ 0x40
 8004948:	4b69      	ldr	r3, [pc, #420]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004954:	4b66      	ldr	r3, [pc, #408]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	4a65      	ldr	r2, [pc, #404]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 800495a:	f043 0320 	orr.w	r3, r3, #32
 800495e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004960:	4b63      	ldr	r3, [pc, #396]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800496c:	23c0      	movs	r3, #192	@ 0xc0
 800496e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004972:	2302      	movs	r3, #2
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004978:	2300      	movs	r3, #0
 800497a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497e:	2303      	movs	r3, #3
 8004980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004984:	2308      	movs	r3, #8
 8004986:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800498a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800498e:	4619      	mov	r1, r3
 8004990:	4858      	ldr	r0, [pc, #352]	@ (8004af4 <HAL_UART_MspInit+0x208>)
 8004992:	f001 fc4b 	bl	800622c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004996:	e0a4      	b.n	8004ae2 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a56      	ldr	r2, [pc, #344]	@ (8004af8 <HAL_UART_MspInit+0x20c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d15d      	bne.n	8004a5e <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049a2:	2340      	movs	r3, #64	@ 0x40
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80049a6:	2300      	movs	r3, #0
 80049a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049ae:	4618      	mov	r0, r3
 80049b0:	f003 fdd0 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80049ba:	f7fd ff5d 	bl	8002878 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80049be:	4b4c      	ldr	r3, [pc, #304]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c2:	4a4b      	ldr	r2, [pc, #300]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049c4:	f043 0310 	orr.w	r3, r3, #16
 80049c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ca:	4b49      	ldr	r3, [pc, #292]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	4b46      	ldr	r3, [pc, #280]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	4a45      	ldr	r2, [pc, #276]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049e2:	4b43      	ldr	r3, [pc, #268]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ee:	4b40      	ldr	r3, [pc, #256]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	4a3f      	ldr	r2, [pc, #252]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049fa:	4b3d      	ldr	r3, [pc, #244]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a1e:	2307      	movs	r3, #7
 8004a20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004a24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4834      	ldr	r0, [pc, #208]	@ (8004afc <HAL_UART_MspInit+0x210>)
 8004a2c:	f001 fbfe 	bl	800622c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a4a:	2307      	movs	r3, #7
 8004a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004a50:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004a54:	4619      	mov	r1, r3
 8004a56:	482a      	ldr	r0, [pc, #168]	@ (8004b00 <HAL_UART_MspInit+0x214>)
 8004a58:	f001 fbe8 	bl	800622c <HAL_GPIO_Init>
}
 8004a5c:	e041      	b.n	8004ae2 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a28      	ldr	r2, [pc, #160]	@ (8004b04 <HAL_UART_MspInit+0x218>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d13c      	bne.n	8004ae2 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004a68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f003 fd6b 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004a84:	f7fd fef8 	bl	8002878 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004a88:	4b19      	ldr	r3, [pc, #100]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8c:	4a18      	ldr	r2, [pc, #96]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004a8e:	f043 0320 	orr.w	r3, r3, #32
 8004a92:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a94:	4b16      	ldr	r3, [pc, #88]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aa0:	4b13      	ldr	r3, [pc, #76]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	4a12      	ldr	r2, [pc, #72]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004aa6:	f043 0304 	orr.w	r3, r3, #4
 8004aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aac:	4b10      	ldr	r3, [pc, #64]	@ (8004af0 <HAL_UART_MspInit+0x204>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004ab8:	23c0      	movs	r3, #192	@ 0xc0
 8004aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aca:	2303      	movs	r3, #3
 8004acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ad6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004ada:	4619      	mov	r1, r3
 8004adc:	480a      	ldr	r0, [pc, #40]	@ (8004b08 <HAL_UART_MspInit+0x21c>)
 8004ade:	f001 fba5 	bl	800622c <HAL_GPIO_Init>
}
 8004ae2:	bf00      	nop
 8004ae4:	37c0      	adds	r7, #192	@ 0xc0
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40007800 	.word	0x40007800
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40021400 	.word	0x40021400
 8004af8:	40011000 	.word	0x40011000
 8004afc:	40020400 	.word	0x40020400
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40011400 	.word	0x40011400
 8004b08:	40020800 	.word	0x40020800

08004b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b10:	480d      	ldr	r0, [pc, #52]	@ (8004b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b12:	490e      	ldr	r1, [pc, #56]	@ (8004b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b14:	4a0e      	ldr	r2, [pc, #56]	@ (8004b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b18:	e002      	b.n	8004b20 <LoopCopyDataInit>

08004b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b1e:	3304      	adds	r3, #4

08004b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b24:	d3f9      	bcc.n	8004b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b26:	4a0b      	ldr	r2, [pc, #44]	@ (8004b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b28:	4c0b      	ldr	r4, [pc, #44]	@ (8004b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b2c:	e001      	b.n	8004b32 <LoopFillZerobss>

08004b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b30:	3204      	adds	r2, #4

08004b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b34:	d3fb      	bcc.n	8004b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b36:	f7ff fc13 	bl	8004360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b3a:	f007 fc39 	bl	800c3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b3e:	f7fd fd9d 	bl	800267c <main>
  bx  lr    
 8004b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b4c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8004b50:	0801b8a8 	.word	0x0801b8a8
  ldr r2, =_sbss
 8004b54:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8004b58:	20004c68 	.word	0x20004c68

08004b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b5c:	e7fe      	b.n	8004b5c <ADC_IRQHandler>

08004b5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b62:	2003      	movs	r0, #3
 8004b64:	f000 fcf3 	bl	800554e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b68:	200f      	movs	r0, #15
 8004b6a:	f7ff fa75 	bl	8004058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b6e:	f7ff fa4b 	bl	8004008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_IncTick+0x20>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <HAL_IncTick+0x24>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4413      	add	r3, r2
 8004b88:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <HAL_IncTick+0x24>)
 8004b8a:	6013      	str	r3, [r2, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000054 	.word	0x20000054
 8004b9c:	20000dcc 	.word	0x20000dcc

08004ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	@ (8004bb4 <HAL_GetTick+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000dcc 	.word	0x20000dcc

08004bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	f7ff ffee 	bl	8004ba0 <HAL_GetTick>
 8004bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d005      	beq.n	8004bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <HAL_Delay+0x44>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bde:	bf00      	nop
 8004be0:	f7ff ffde 	bl	8004ba0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d8f7      	bhi.n	8004be0 <HAL_Delay+0x28>
  {
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000054 	.word	0x20000054

08004c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e031      	b.n	8004c7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fb fd62 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d116      	bne.n	8004c6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c42:	4b10      	ldr	r3, [pc, #64]	@ (8004c84 <HAL_ADC_Init+0x84>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	f043 0202 	orr.w	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fad6 	bl	8005200 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c6a:	e001      	b.n	8004c70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	ffffeefd 	.word	0xffffeefd

08004c88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_ADC_Start+0x1a>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0ad      	b.n	8004dfe <HAL_ADC_Start+0x176>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d018      	beq.n	8004cea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004cc8:	4b50      	ldr	r3, [pc, #320]	@ (8004e0c <HAL_ADC_Start+0x184>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a50      	ldr	r2, [pc, #320]	@ (8004e10 <HAL_ADC_Start+0x188>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0c9a      	lsrs	r2, r3, #18
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004cdc:	e002      	b.n	8004ce4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f9      	bne.n	8004cde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d175      	bne.n	8004de4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cfc:	4b45      	ldr	r3, [pc, #276]	@ (8004e14 <HAL_ADC_Start+0x18c>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d32:	d106      	bne.n	8004d42 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d38:	f023 0206 	bic.w	r2, r3, #6
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d40:	e002      	b.n	8004d48 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004d58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e18 <HAL_ADC_Start+0x190>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d143      	bne.n	8004dfc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	e03a      	b.n	8004dfc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a24      	ldr	r2, [pc, #144]	@ (8004e1c <HAL_ADC_Start+0x194>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10e      	bne.n	8004dae <HAL_ADC_Start+0x126>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d107      	bne.n	8004dae <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004dac:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004dae:	4b1a      	ldr	r3, [pc, #104]	@ (8004e18 <HAL_ADC_Start+0x190>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d120      	bne.n	8004dfc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a18      	ldr	r2, [pc, #96]	@ (8004e20 <HAL_ADC_Start+0x198>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d11b      	bne.n	8004dfc <HAL_ADC_Start+0x174>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d114      	bne.n	8004dfc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	e00b      	b.n	8004dfc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	f043 0210 	orr.w	r2, r3, #16
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df4:	f043 0201 	orr.w	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	2000004c 	.word	0x2000004c
 8004e10:	431bde83 	.word	0x431bde83
 8004e14:	fffff8fe 	.word	0xfffff8fe
 8004e18:	40012300 	.word	0x40012300
 8004e1c:	40012000 	.word	0x40012000
 8004e20:	40012200 	.word	0x40012200

08004e24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e40:	d113      	bne.n	8004e6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e50:	d10b      	bne.n	8004e6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e063      	b.n	8004f32 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004e6a:	f7ff fe99 	bl	8004ba0 <HAL_GetTick>
 8004e6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e70:	e021      	b.n	8004eb6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d01d      	beq.n	8004eb6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_ADC_PollForConversion+0x6c>
 8004e80:	f7ff fe8e 	bl	8004ba0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d212      	bcs.n	8004eb6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f043 0204 	orr.w	r2, r3, #4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e03d      	b.n	8004f32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d1d6      	bne.n	8004e72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0212 	mvn.w	r2, #18
 8004ecc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d123      	bne.n	8004f30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d11f      	bne.n	8004f30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d006      	beq.n	8004f0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d111      	bne.n	8004f30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	f043 0201 	orr.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x1c>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e136      	b.n	80051de <HAL_ADC_ConfigChannel+0x28a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b09      	cmp	r3, #9
 8004f7e:	d93a      	bls.n	8004ff6 <HAL_ADC_ConfigChannel+0xa2>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f88:	d035      	beq.n	8004ff6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68d9      	ldr	r1, [r3, #12]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	4613      	mov	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3b1e      	subs	r3, #30
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	400a      	ands	r2, r1
 8004fae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a8d      	ldr	r2, [pc, #564]	@ (80051ec <HAL_ADC_ConfigChannel+0x298>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68d9      	ldr	r1, [r3, #12]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	061a      	lsls	r2, r3, #24
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fce:	e035      	b.n	800503c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68d9      	ldr	r1, [r3, #12]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4403      	add	r3, r0
 8004fe8:	3b1e      	subs	r3, #30
 8004fea:	409a      	lsls	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ff4:	e022      	b.n	800503c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6919      	ldr	r1, [r3, #16]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	2207      	movs	r2, #7
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43da      	mvns	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	400a      	ands	r2, r1
 8005018:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6919      	ldr	r1, [r3, #16]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	4618      	mov	r0, r3
 800502c:	4603      	mov	r3, r0
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4403      	add	r3, r0
 8005032:	409a      	lsls	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b06      	cmp	r3, #6
 8005042:	d824      	bhi.n	800508e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	3b05      	subs	r3, #5
 8005056:	221f      	movs	r2, #31
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43da      	mvns	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	400a      	ands	r2, r1
 8005064:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	4618      	mov	r0, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	3b05      	subs	r3, #5
 8005080:	fa00 f203 	lsl.w	r2, r0, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	635a      	str	r2, [r3, #52]	@ 0x34
 800508c:	e04c      	b.n	8005128 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d824      	bhi.n	80050e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	3b23      	subs	r3, #35	@ 0x23
 80050a8:	221f      	movs	r2, #31
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43da      	mvns	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	400a      	ands	r2, r1
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4618      	mov	r0, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	3b23      	subs	r3, #35	@ 0x23
 80050d2:	fa00 f203 	lsl.w	r2, r0, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80050de:	e023      	b.n	8005128 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	3b41      	subs	r3, #65	@ 0x41
 80050f2:	221f      	movs	r2, #31
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43da      	mvns	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	400a      	ands	r2, r1
 8005100:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	4618      	mov	r0, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	3b41      	subs	r3, #65	@ 0x41
 800511c:	fa00 f203 	lsl.w	r2, r0, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a30      	ldr	r2, [pc, #192]	@ (80051f0 <HAL_ADC_ConfigChannel+0x29c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10a      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x1f4>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800513a:	d105      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800513c:	4b2d      	ldr	r3, [pc, #180]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a2c      	ldr	r2, [pc, #176]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005142:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005146:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a28      	ldr	r2, [pc, #160]	@ (80051f0 <HAL_ADC_ConfigChannel+0x29c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10f      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x21e>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b12      	cmp	r3, #18
 8005158:	d10b      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800515a:	4b26      	ldr	r3, [pc, #152]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4a25      	ldr	r2, [pc, #148]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005160:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005164:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005166:	4b23      	ldr	r3, [pc, #140]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4a22      	ldr	r2, [pc, #136]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800516c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005170:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1e      	ldr	r2, [pc, #120]	@ (80051f0 <HAL_ADC_ConfigChannel+0x29c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d12b      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x280>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1a      	ldr	r2, [pc, #104]	@ (80051ec <HAL_ADC_ConfigChannel+0x298>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <HAL_ADC_ConfigChannel+0x23a>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b11      	cmp	r3, #17
 800518c:	d122      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800518e:	4b19      	ldr	r3, [pc, #100]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4a18      	ldr	r2, [pc, #96]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005194:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005198:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800519a:	4b16      	ldr	r3, [pc, #88]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80051a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a10      	ldr	r2, [pc, #64]	@ (80051ec <HAL_ADC_ConfigChannel+0x298>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d111      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80051b0:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a11      	ldr	r2, [pc, #68]	@ (80051fc <HAL_ADC_ConfigChannel+0x2a8>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	0c9a      	lsrs	r2, r3, #18
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80051c6:	e002      	b.n	80051ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f9      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	10000012 	.word	0x10000012
 80051f0:	40012000 	.word	0x40012000
 80051f4:	40012300 	.word	0x40012300
 80051f8:	2000004c 	.word	0x2000004c
 80051fc:	431bde83 	.word	0x431bde83

08005200 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005208:	4b78      	ldr	r3, [pc, #480]	@ (80053ec <ADC_Init+0x1ec>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4a77      	ldr	r2, [pc, #476]	@ (80053ec <ADC_Init+0x1ec>)
 800520e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005212:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005214:	4b75      	ldr	r3, [pc, #468]	@ (80053ec <ADC_Init+0x1ec>)
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4973      	ldr	r1, [pc, #460]	@ (80053ec <ADC_Init+0x1ec>)
 800521e:	4313      	orrs	r3, r2
 8005220:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6859      	ldr	r1, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	021a      	lsls	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6899      	ldr	r1, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528e:	4a58      	ldr	r2, [pc, #352]	@ (80053f0 <ADC_Init+0x1f0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d022      	beq.n	80052da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6899      	ldr	r1, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80052c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	e00f      	b.n	80052fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80052f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0202 	bic.w	r2, r2, #2
 8005308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6899      	ldr	r1, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	005a      	lsls	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005336:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	3b01      	subs	r3, #1
 8005354:	035a      	lsls	r2, r3, #13
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	e007      	b.n	8005370 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800536e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800537e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	3b01      	subs	r3, #1
 800538c:	051a      	lsls	r2, r3, #20
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80053a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6899      	ldr	r1, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053b2:	025a      	lsls	r2, r3, #9
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6899      	ldr	r1, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	029a      	lsls	r2, r3, #10
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40012300 	.word	0x40012300
 80053f0:	0f000001 	.word	0x0f000001

080053f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005404:	4b0b      	ldr	r3, [pc, #44]	@ (8005434 <__NVIC_SetPriorityGrouping+0x40>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005410:	4013      	ands	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800541c:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 800541e:	4313      	orrs	r3, r2
 8005420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005422:	4a04      	ldr	r2, [pc, #16]	@ (8005434 <__NVIC_SetPriorityGrouping+0x40>)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	60d3      	str	r3, [r2, #12]
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000ed00 	.word	0xe000ed00
 8005438:	05fa0000 	.word	0x05fa0000

0800543c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <__NVIC_GetPriorityGrouping+0x18>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 0307 	and.w	r3, r3, #7
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	2b00      	cmp	r3, #0
 8005468:	db0b      	blt.n	8005482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	f003 021f 	and.w	r2, r3, #31
 8005470:	4907      	ldr	r1, [pc, #28]	@ (8005490 <__NVIC_EnableIRQ+0x38>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2001      	movs	r0, #1
 800547a:	fa00 f202 	lsl.w	r2, r0, r2
 800547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e100 	.word	0xe000e100

08005494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db0a      	blt.n	80054be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	490c      	ldr	r1, [pc, #48]	@ (80054e0 <__NVIC_SetPriority+0x4c>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	440b      	add	r3, r1
 80054b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054bc:	e00a      	b.n	80054d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4908      	ldr	r1, [pc, #32]	@ (80054e4 <__NVIC_SetPriority+0x50>)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3b04      	subs	r3, #4
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	761a      	strb	r2, [r3, #24]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	@ 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f1c3 0307 	rsb	r3, r3, #7
 8005502:	2b04      	cmp	r3, #4
 8005504:	bf28      	it	cs
 8005506:	2304      	movcs	r3, #4
 8005508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3304      	adds	r3, #4
 800550e:	2b06      	cmp	r3, #6
 8005510:	d902      	bls.n	8005518 <NVIC_EncodePriority+0x30>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3b03      	subs	r3, #3
 8005516:	e000      	b.n	800551a <NVIC_EncodePriority+0x32>
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	401a      	ands	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005530:	f04f 31ff 	mov.w	r1, #4294967295
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	43d9      	mvns	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	4313      	orrs	r3, r2
         );
}
 8005542:	4618      	mov	r0, r3
 8005544:	3724      	adds	r7, #36	@ 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff4c 	bl	80053f4 <__NVIC_SetPriorityGrouping>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005576:	f7ff ff61 	bl	800543c <__NVIC_GetPriorityGrouping>
 800557a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	6978      	ldr	r0, [r7, #20]
 8005582:	f7ff ffb1 	bl	80054e8 <NVIC_EncodePriority>
 8005586:	4602      	mov	r2, r0
 8005588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff ff80 	bl	8005494 <__NVIC_SetPriority>
}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ff54 	bl	8005458 <__NVIC_EnableIRQ>
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e014      	b.n	80055f4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	791b      	ldrb	r3, [r3, #4]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fb f91c 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800560e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005612:	d120      	bne.n	8005656 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005622:	d118      	bne.n	8005656 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2204      	movs	r2, #4
 8005628:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f043 0201 	orr.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800563e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800564e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f82d 	bl	80056b0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005664:	d120      	bne.n	80056a8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005674:	d118      	bne.n	80056a8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2204      	movs	r2, #4
 800567a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f043 0202 	orr.w	r2, r3, #2
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005690:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80056a0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f85d 	bl	8005762 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	795b      	ldrb	r3, [r3, #5]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_DAC_ConfigChannel+0x18>
 80056d8:	2302      	movs	r3, #2
 80056da:	e03c      	b.n	8005756 <HAL_DAC_ConfigChannel+0x92>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2202      	movs	r2, #2
 80056e6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4013      	ands	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6819      	ldr	r1, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	22c0      	movs	r2, #192	@ 0xc0
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43da      	mvns	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	400a      	ands	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7ff fa0c 	bl	8004ba0 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e099      	b.n	80058c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057b4:	e00f      	b.n	80057d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057b6:	f7ff f9f3 	bl	8004ba0 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d908      	bls.n	80057d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2203      	movs	r2, #3
 80057ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e078      	b.n	80058c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e8      	bne.n	80057b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4b38      	ldr	r3, [pc, #224]	@ (80058d0 <HAL_DMA_Init+0x158>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800580e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	2b04      	cmp	r3, #4
 800582e:	d107      	bne.n	8005840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	4313      	orrs	r3, r2
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0307 	bic.w	r3, r3, #7
 8005856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005866:	2b04      	cmp	r3, #4
 8005868:	d117      	bne.n	800589a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00e      	beq.n	800589a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f8bd 	bl	80059fc <DMA_CheckFifoParam>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2240      	movs	r2, #64	@ 0x40
 800588c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005896:	2301      	movs	r3, #1
 8005898:	e016      	b.n	80058c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f874 	bl	8005990 <DMA_CalcBaseAndBitshift>
 80058a8:	4603      	mov	r3, r0
 80058aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	223f      	movs	r2, #63	@ 0x3f
 80058b2:	409a      	lsls	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	f010803f 	.word	0xf010803f

080058d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e050      	b.n	8005988 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d101      	bne.n	80058f6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
 80058f4:	e048      	b.n	8005988 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2221      	movs	r2, #33	@ 0x21
 8005934:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f82a 	bl	8005990 <DMA_CalcBaseAndBitshift>
 800593c:	4603      	mov	r3, r0
 800593e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005944:	223f      	movs	r2, #63	@ 0x3f
 8005946:	409a      	lsls	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	3b10      	subs	r3, #16
 80059a0:	4a13      	ldr	r2, [pc, #76]	@ (80059f0 <DMA_CalcBaseAndBitshift+0x60>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059aa:	4a12      	ldr	r2, [pc, #72]	@ (80059f4 <DMA_CalcBaseAndBitshift+0x64>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d908      	bls.n	80059d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <DMA_CalcBaseAndBitshift+0x68>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	1d1a      	adds	r2, r3, #4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80059ce:	e006      	b.n	80059de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b08      	ldr	r3, [pc, #32]	@ (80059f8 <DMA_CalcBaseAndBitshift+0x68>)
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	aaaaaaab 	.word	0xaaaaaaab
 80059f4:	0801b7b0 	.word	0x0801b7b0
 80059f8:	fffffc00 	.word	0xfffffc00

080059fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d11f      	bne.n	8005a56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d856      	bhi.n	8005aca <DMA_CheckFifoParam+0xce>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <DMA_CheckFifoParam+0x28>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a47 	.word	0x08005a47
 8005a2c:	08005a35 	.word	0x08005a35
 8005a30:	08005acb 	.word	0x08005acb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d046      	beq.n	8005ace <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a44:	e043      	b.n	8005ace <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a4e:	d140      	bne.n	8005ad2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a54:	e03d      	b.n	8005ad2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5e:	d121      	bne.n	8005aa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d837      	bhi.n	8005ad6 <DMA_CheckFifoParam+0xda>
 8005a66:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <DMA_CheckFifoParam+0x70>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a83 	.word	0x08005a83
 8005a74:	08005a7d 	.word	0x08005a7d
 8005a78:	08005a95 	.word	0x08005a95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e030      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d025      	beq.n	8005ada <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a92:	e022      	b.n	8005ada <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a9c:	d11f      	bne.n	8005ade <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005aa2:	e01c      	b.n	8005ade <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d903      	bls.n	8005ab2 <DMA_CheckFifoParam+0xb6>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d003      	beq.n	8005ab8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ab0:	e018      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab6:	e015      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac8:	e00b      	b.n	8005ae2 <DMA_CheckFifoParam+0xe6>
      break;
 8005aca:	bf00      	nop
 8005acc:	e00a      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ace:	bf00      	nop
 8005ad0:	e008      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e006      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e004      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ada:	bf00      	nop
 8005adc:	e002      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ae2:	bf00      	nop
    }
  } 
  
  return status; 
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e039      	b.n	8005b7a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fa fef6 	bl	800090c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b44:	f023 0107 	bic.w	r1, r3, #7
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <HAL_DMA2D_Init+0x90>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68d1      	ldr	r1, [r2, #12]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	ffffc000 	.word	0xffffc000

08005b88 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_DMA2D_Start+0x1c>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e018      	b.n	8005bd6 <HAL_DMA2D_Start+0x4e>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fa98 	bl	80060f4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d056      	beq.n	8005ca8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bfa:	f7fe ffd1 	bl	8004ba0 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c00:	e04b      	b.n	8005c9a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d023      	beq.n	8005c5c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c22:	f043 0202 	orr.w	r2, r3, #2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c38:	f043 0201 	orr.w	r2, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2221      	movs	r2, #33	@ 0x21
 8005c46:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0a5      	b.n	8005da8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d01a      	beq.n	8005c9a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c64:	f7fe ff9c 	bl	8004ba0 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d302      	bcc.n	8005c7a <HAL_DMA2D_PollForTransfer+0x9c>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10f      	bne.n	8005c9a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e086      	b.n	8005da8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ac      	beq.n	8005c02 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d061      	beq.n	8005d8e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cca:	f7fe ff69 	bl	8004ba0 <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005cd0:	e056      	b.n	8005d80 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02e      	beq.n	8005d42 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf2:	f043 0204 	orr.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d08:	f043 0202 	orr.w	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1e:	f043 0201 	orr.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2229      	movs	r2, #41	@ 0x29
 8005d2c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2204      	movs	r2, #4
 8005d32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e032      	b.n	8005da8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d01a      	beq.n	8005d80 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fe ff29 	bl	8004ba0 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <HAL_DMA2D_PollForTransfer+0x182>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d64:	f043 0220 	orr.w	r2, r3, #32
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e013      	b.n	8005da8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0a1      	beq.n	8005cd2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2212      	movs	r2, #18
 8005d94:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d026      	beq.n	8005e20 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d021      	beq.n	8005e20 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2204      	movs	r2, #4
 8005e04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d026      	beq.n	8005e78 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d021      	beq.n	8005e78 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e42:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	f043 0202 	orr.w	r2, r3, #2
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d026      	beq.n	8005ed0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d021      	beq.n	8005ed0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	f043 0204 	orr.w	r2, r3, #4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d013      	beq.n	8005f02 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00e      	beq.n	8005f02 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2204      	movs	r2, #4
 8005efa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f853 	bl	8005fa8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d024      	beq.n	8005f56 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01f      	beq.n	8005f56 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005f24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01f      	beq.n	8005fa0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01a      	beq.n	8005fa0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2210      	movs	r2, #16
 8005f80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f80e 	bl	8005fbc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_DMA2D_ConfigLayer+0x20>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e079      	b.n	80060e4 <HAL_DMA2D_ConfigLayer+0x114>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	3318      	adds	r3, #24
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	041b      	lsls	r3, r3, #16
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800601a:	4b35      	ldr	r3, [pc, #212]	@ (80060f0 <HAL_DMA2D_ConfigLayer+0x120>)
 800601c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b0a      	cmp	r3, #10
 8006024:	d003      	beq.n	800602e <HAL_DMA2D_ConfigLayer+0x5e>
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b09      	cmp	r3, #9
 800602c:	d107      	bne.n	800603e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	e005      	b.n	800604a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	061b      	lsls	r3, r3, #24
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d120      	bne.n	8006092 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	43db      	mvns	r3, r3
 800605a:	ea02 0103 	and.w	r1, r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	430a      	orrs	r2, r1
 8006066:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b0a      	cmp	r3, #10
 8006078:	d003      	beq.n	8006082 <HAL_DMA2D_ConfigLayer+0xb2>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b09      	cmp	r3, #9
 8006080:	d127      	bne.n	80060d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800608e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006090:	e01f      	b.n	80060d2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	43db      	mvns	r3, r3
 800609c:	ea02 0103 	and.w	r1, r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b0a      	cmp	r3, #10
 80060ba:	d003      	beq.n	80060c4 <HAL_DMA2D_ConfigLayer+0xf4>
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	d106      	bne.n	80060d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80060d0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	ff03000f 	.word	0xff03000f

080060f4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b08b      	sub	sp, #44	@ 0x2c
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006108:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	041a      	lsls	r2, r3, #16
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	431a      	orrs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800612c:	d174      	bne.n	8006218 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006134:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800613c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006144:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d108      	bne.n	8006166 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	431a      	orrs	r2, r3
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	4313      	orrs	r3, r2
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
 8006164:	e053      	b.n	800620e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d106      	bne.n	800617c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4313      	orrs	r3, r2
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	627b      	str	r3, [r7, #36]	@ 0x24
 800617a:	e048      	b.n	800620e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d111      	bne.n	80061a8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	0cdb      	lsrs	r3, r3, #19
 8006188:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	0a9b      	lsrs	r3, r3, #10
 800618e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	08db      	lsrs	r3, r3, #3
 8006194:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	02db      	lsls	r3, r3, #11
 800619e:	4313      	orrs	r3, r2
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a6:	e032      	b.n	800620e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d117      	bne.n	80061e0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	0fdb      	lsrs	r3, r3, #31
 80061b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	0cdb      	lsrs	r3, r3, #19
 80061ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	0adb      	lsrs	r3, r3, #11
 80061c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	029b      	lsls	r3, r3, #10
 80061d0:	431a      	orrs	r2, r3
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	03db      	lsls	r3, r3, #15
 80061d6:	4313      	orrs	r3, r2
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061de:	e016      	b.n	800620e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	0f1b      	lsrs	r3, r3, #28
 80061e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	0d1b      	lsrs	r3, r3, #20
 80061ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	0b1b      	lsrs	r3, r3, #12
 80061f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	011a      	lsls	r2, r3, #4
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	431a      	orrs	r2, r3
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	031b      	lsls	r3, r3, #12
 8006206:	4313      	orrs	r3, r2
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006214:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006216:	e003      	b.n	8006220 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	60da      	str	r2, [r3, #12]
}
 8006220:	bf00      	nop
 8006222:	372c      	adds	r7, #44	@ 0x2c
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	@ 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800623e:	2300      	movs	r3, #0
 8006240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	e175      	b.n	8006538 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800624c:	2201      	movs	r2, #1
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4013      	ands	r3, r2
 800625e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	f040 8164 	bne.w	8006532 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d005      	beq.n	8006282 <HAL_GPIO_Init+0x56>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d130      	bne.n	80062e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	2203      	movs	r2, #3
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062b8:	2201      	movs	r2, #1
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	43db      	mvns	r3, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	4013      	ands	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 0201 	and.w	r2, r3, #1
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d017      	beq.n	8006320 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	2203      	movs	r2, #3
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4313      	orrs	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d123      	bne.n	8006374 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	08da      	lsrs	r2, r3, #3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3208      	adds	r2, #8
 8006334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	220f      	movs	r2, #15
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4013      	ands	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4313      	orrs	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	08da      	lsrs	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3208      	adds	r2, #8
 800636e:	69b9      	ldr	r1, [r7, #24]
 8006370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	2203      	movs	r2, #3
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	43db      	mvns	r3, r3
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4013      	ands	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0203 	and.w	r2, r3, #3
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4313      	orrs	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 80be 	beq.w	8006532 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b6:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <HAL_GPIO_Init+0x324>)
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	4a65      	ldr	r2, [pc, #404]	@ (8006550 <HAL_GPIO_Init+0x324>)
 80063bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80063c2:	4b63      	ldr	r3, [pc, #396]	@ (8006550 <HAL_GPIO_Init+0x324>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80063ce:	4a61      	ldr	r2, [pc, #388]	@ (8006554 <HAL_GPIO_Init+0x328>)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	089b      	lsrs	r3, r3, #2
 80063d4:	3302      	adds	r3, #2
 80063d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	220f      	movs	r2, #15
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43db      	mvns	r3, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4013      	ands	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a58      	ldr	r2, [pc, #352]	@ (8006558 <HAL_GPIO_Init+0x32c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d037      	beq.n	800646a <HAL_GPIO_Init+0x23e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a57      	ldr	r2, [pc, #348]	@ (800655c <HAL_GPIO_Init+0x330>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d031      	beq.n	8006466 <HAL_GPIO_Init+0x23a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a56      	ldr	r2, [pc, #344]	@ (8006560 <HAL_GPIO_Init+0x334>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d02b      	beq.n	8006462 <HAL_GPIO_Init+0x236>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a55      	ldr	r2, [pc, #340]	@ (8006564 <HAL_GPIO_Init+0x338>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d025      	beq.n	800645e <HAL_GPIO_Init+0x232>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a54      	ldr	r2, [pc, #336]	@ (8006568 <HAL_GPIO_Init+0x33c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01f      	beq.n	800645a <HAL_GPIO_Init+0x22e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a53      	ldr	r2, [pc, #332]	@ (800656c <HAL_GPIO_Init+0x340>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d019      	beq.n	8006456 <HAL_GPIO_Init+0x22a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a52      	ldr	r2, [pc, #328]	@ (8006570 <HAL_GPIO_Init+0x344>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_GPIO_Init+0x226>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a51      	ldr	r2, [pc, #324]	@ (8006574 <HAL_GPIO_Init+0x348>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00d      	beq.n	800644e <HAL_GPIO_Init+0x222>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a50      	ldr	r2, [pc, #320]	@ (8006578 <HAL_GPIO_Init+0x34c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <HAL_GPIO_Init+0x21e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a4f      	ldr	r2, [pc, #316]	@ (800657c <HAL_GPIO_Init+0x350>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d101      	bne.n	8006446 <HAL_GPIO_Init+0x21a>
 8006442:	2309      	movs	r3, #9
 8006444:	e012      	b.n	800646c <HAL_GPIO_Init+0x240>
 8006446:	230a      	movs	r3, #10
 8006448:	e010      	b.n	800646c <HAL_GPIO_Init+0x240>
 800644a:	2308      	movs	r3, #8
 800644c:	e00e      	b.n	800646c <HAL_GPIO_Init+0x240>
 800644e:	2307      	movs	r3, #7
 8006450:	e00c      	b.n	800646c <HAL_GPIO_Init+0x240>
 8006452:	2306      	movs	r3, #6
 8006454:	e00a      	b.n	800646c <HAL_GPIO_Init+0x240>
 8006456:	2305      	movs	r3, #5
 8006458:	e008      	b.n	800646c <HAL_GPIO_Init+0x240>
 800645a:	2304      	movs	r3, #4
 800645c:	e006      	b.n	800646c <HAL_GPIO_Init+0x240>
 800645e:	2303      	movs	r3, #3
 8006460:	e004      	b.n	800646c <HAL_GPIO_Init+0x240>
 8006462:	2302      	movs	r3, #2
 8006464:	e002      	b.n	800646c <HAL_GPIO_Init+0x240>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <HAL_GPIO_Init+0x240>
 800646a:	2300      	movs	r3, #0
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	f002 0203 	and.w	r2, r2, #3
 8006472:	0092      	lsls	r2, r2, #2
 8006474:	4093      	lsls	r3, r2
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4313      	orrs	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800647c:	4935      	ldr	r1, [pc, #212]	@ (8006554 <HAL_GPIO_Init+0x328>)
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	089b      	lsrs	r3, r3, #2
 8006482:	3302      	adds	r3, #2
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800648a:	4b3d      	ldr	r3, [pc, #244]	@ (8006580 <HAL_GPIO_Init+0x354>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	43db      	mvns	r3, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	4013      	ands	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064ae:	4a34      	ldr	r2, [pc, #208]	@ (8006580 <HAL_GPIO_Init+0x354>)
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064b4:	4b32      	ldr	r3, [pc, #200]	@ (8006580 <HAL_GPIO_Init+0x354>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	43db      	mvns	r3, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4013      	ands	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064d8:	4a29      	ldr	r2, [pc, #164]	@ (8006580 <HAL_GPIO_Init+0x354>)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064de:	4b28      	ldr	r3, [pc, #160]	@ (8006580 <HAL_GPIO_Init+0x354>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	43db      	mvns	r3, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	4013      	ands	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006502:	4a1f      	ldr	r2, [pc, #124]	@ (8006580 <HAL_GPIO_Init+0x354>)
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006508:	4b1d      	ldr	r3, [pc, #116]	@ (8006580 <HAL_GPIO_Init+0x354>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	43db      	mvns	r3, r3
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4013      	ands	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800652c:	4a14      	ldr	r2, [pc, #80]	@ (8006580 <HAL_GPIO_Init+0x354>)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3301      	adds	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b0f      	cmp	r3, #15
 800653c:	f67f ae86 	bls.w	800624c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	3724      	adds	r7, #36	@ 0x24
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40023800 	.word	0x40023800
 8006554:	40013800 	.word	0x40013800
 8006558:	40020000 	.word	0x40020000
 800655c:	40020400 	.word	0x40020400
 8006560:	40020800 	.word	0x40020800
 8006564:	40020c00 	.word	0x40020c00
 8006568:	40021000 	.word	0x40021000
 800656c:	40021400 	.word	0x40021400
 8006570:	40021800 	.word	0x40021800
 8006574:	40021c00 	.word	0x40021c00
 8006578:	40022000 	.word	0x40022000
 800657c:	40022400 	.word	0x40022400
 8006580:	40013c00 	.word	0x40013c00

08006584 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e0d9      	b.n	8006754 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80065a0:	2201      	movs	r2, #1
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4013      	ands	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	f040 80c9 	bne.w	800674e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80065bc:	4a6b      	ldr	r2, [pc, #428]	@ (800676c <HAL_GPIO_DeInit+0x1e8>)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	089b      	lsrs	r3, r3, #2
 80065c2:	3302      	adds	r3, #2
 80065c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	220f      	movs	r2, #15
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a63      	ldr	r2, [pc, #396]	@ (8006770 <HAL_GPIO_DeInit+0x1ec>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d037      	beq.n	8006656 <HAL_GPIO_DeInit+0xd2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a62      	ldr	r2, [pc, #392]	@ (8006774 <HAL_GPIO_DeInit+0x1f0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d031      	beq.n	8006652 <HAL_GPIO_DeInit+0xce>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a61      	ldr	r2, [pc, #388]	@ (8006778 <HAL_GPIO_DeInit+0x1f4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d02b      	beq.n	800664e <HAL_GPIO_DeInit+0xca>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a60      	ldr	r2, [pc, #384]	@ (800677c <HAL_GPIO_DeInit+0x1f8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d025      	beq.n	800664a <HAL_GPIO_DeInit+0xc6>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a5f      	ldr	r2, [pc, #380]	@ (8006780 <HAL_GPIO_DeInit+0x1fc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01f      	beq.n	8006646 <HAL_GPIO_DeInit+0xc2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a5e      	ldr	r2, [pc, #376]	@ (8006784 <HAL_GPIO_DeInit+0x200>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d019      	beq.n	8006642 <HAL_GPIO_DeInit+0xbe>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a5d      	ldr	r2, [pc, #372]	@ (8006788 <HAL_GPIO_DeInit+0x204>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_GPIO_DeInit+0xba>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a5c      	ldr	r2, [pc, #368]	@ (800678c <HAL_GPIO_DeInit+0x208>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00d      	beq.n	800663a <HAL_GPIO_DeInit+0xb6>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a5b      	ldr	r2, [pc, #364]	@ (8006790 <HAL_GPIO_DeInit+0x20c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <HAL_GPIO_DeInit+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a5a      	ldr	r2, [pc, #360]	@ (8006794 <HAL_GPIO_DeInit+0x210>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <HAL_GPIO_DeInit+0xae>
 800662e:	2309      	movs	r3, #9
 8006630:	e012      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 8006632:	230a      	movs	r3, #10
 8006634:	e010      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 8006636:	2308      	movs	r3, #8
 8006638:	e00e      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 800663a:	2307      	movs	r3, #7
 800663c:	e00c      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 800663e:	2306      	movs	r3, #6
 8006640:	e00a      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 8006642:	2305      	movs	r3, #5
 8006644:	e008      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 8006646:	2304      	movs	r3, #4
 8006648:	e006      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 800664a:	2303      	movs	r3, #3
 800664c:	e004      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 800664e:	2302      	movs	r3, #2
 8006650:	e002      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <HAL_GPIO_DeInit+0xd4>
 8006656:	2300      	movs	r3, #0
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	f002 0203 	and.w	r2, r2, #3
 800665e:	0092      	lsls	r2, r2, #2
 8006660:	4093      	lsls	r3, r2
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d132      	bne.n	80066ce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006668:	4b4b      	ldr	r3, [pc, #300]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	43db      	mvns	r3, r3
 8006670:	4949      	ldr	r1, [pc, #292]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 8006672:	4013      	ands	r3, r2
 8006674:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006676:	4b48      	ldr	r3, [pc, #288]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	43db      	mvns	r3, r3
 800667e:	4946      	ldr	r1, [pc, #280]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 8006680:	4013      	ands	r3, r2
 8006682:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006684:	4b44      	ldr	r3, [pc, #272]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	43db      	mvns	r3, r3
 800668c:	4942      	ldr	r1, [pc, #264]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 800668e:	4013      	ands	r3, r2
 8006690:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006692:	4b41      	ldr	r3, [pc, #260]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	43db      	mvns	r3, r3
 800669a:	493f      	ldr	r1, [pc, #252]	@ (8006798 <HAL_GPIO_DeInit+0x214>)
 800669c:	4013      	ands	r3, r2
 800669e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	220f      	movs	r2, #15
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80066b0:	4a2e      	ldr	r2, [pc, #184]	@ (800676c <HAL_GPIO_DeInit+0x1e8>)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	089b      	lsrs	r3, r3, #2
 80066b6:	3302      	adds	r3, #2
 80066b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	43da      	mvns	r2, r3
 80066c0:	482a      	ldr	r0, [pc, #168]	@ (800676c <HAL_GPIO_DeInit+0x1e8>)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	089b      	lsrs	r3, r3, #2
 80066c6:	400a      	ands	r2, r1
 80066c8:	3302      	adds	r3, #2
 80066ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	2103      	movs	r1, #3
 80066d8:	fa01 f303 	lsl.w	r3, r1, r3
 80066dc:	43db      	mvns	r3, r3
 80066de:	401a      	ands	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	08da      	lsrs	r2, r3, #3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3208      	adds	r2, #8
 80066ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	220f      	movs	r2, #15
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	43db      	mvns	r3, r3
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	08d2      	lsrs	r2, r2, #3
 8006704:	4019      	ands	r1, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3208      	adds	r2, #8
 800670a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	2103      	movs	r1, #3
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	2101      	movs	r1, #1
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	fa01 f303 	lsl.w	r3, r1, r3
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	2103      	movs	r1, #3
 8006742:	fa01 f303 	lsl.w	r3, r1, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	401a      	ands	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	3301      	adds	r3, #1
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b0f      	cmp	r3, #15
 8006758:	f67f af22 	bls.w	80065a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40013800 	.word	0x40013800
 8006770:	40020000 	.word	0x40020000
 8006774:	40020400 	.word	0x40020400
 8006778:	40020800 	.word	0x40020800
 800677c:	40020c00 	.word	0x40020c00
 8006780:	40021000 	.word	0x40021000
 8006784:	40021400 	.word	0x40021400
 8006788:	40021800 	.word	0x40021800
 800678c:	40021c00 	.word	0x40021c00
 8006790:	40022000 	.word	0x40022000
 8006794:	40022400 	.word	0x40022400
 8006798:	40013c00 	.word	0x40013c00

0800679c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
 80067a8:	4613      	mov	r3, r2
 80067aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067ac:	787b      	ldrb	r3, [r7, #1]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80067b8:	e003      	b.n	80067c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80067ba:	887b      	ldrh	r3, [r7, #2]
 80067bc:	041a      	lsls	r2, r3, #16
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	619a      	str	r2, [r3, #24]
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e07f      	b.n	80068e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fb fcd8 	bl	80021ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	@ 0x24
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d107      	bne.n	800684a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006846:	609a      	str	r2, [r3, #8]
 8006848:	e006      	b.n	8006858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d104      	bne.n	800686a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006868:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6859      	ldr	r1, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b1d      	ldr	r3, [pc, #116]	@ (80068ec <HAL_I2C_Init+0x11c>)
 8006876:	430b      	orrs	r3, r1
 8006878:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006888:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69d9      	ldr	r1, [r3, #28]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	02008000 	.word	0x02008000

080068f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e021      	b.n	8006946 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2224      	movs	r2, #36	@ 0x24
 8006906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fb fcee 	bl	80022fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	4608      	mov	r0, r1
 800695a:	4611      	mov	r1, r2
 800695c:	461a      	mov	r2, r3
 800695e:	4603      	mov	r3, r0
 8006960:	817b      	strh	r3, [r7, #10]
 8006962:	460b      	mov	r3, r1
 8006964:	813b      	strh	r3, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b20      	cmp	r3, #32
 8006974:	f040 80f9 	bne.w	8006b6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_I2C_Mem_Write+0x34>
 800697e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0ed      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_I2C_Mem_Write+0x4e>
 800699a:	2302      	movs	r3, #2
 800699c:	e0e6      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069a6:	f7fe f8fb 	bl	8004ba0 <HAL_GetTick>
 80069aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2319      	movs	r3, #25
 80069b2:	2201      	movs	r2, #1
 80069b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fad1 	bl	8006f60 <I2C_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0d1      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2221      	movs	r2, #33	@ 0x21
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2240      	movs	r2, #64	@ 0x40
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a3a      	ldr	r2, [r7, #32]
 80069e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80069e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069f0:	88f8      	ldrh	r0, [r7, #6]
 80069f2:	893a      	ldrh	r2, [r7, #8]
 80069f4:	8979      	ldrh	r1, [r7, #10]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	4603      	mov	r3, r0
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f9e1 	bl	8006dc8 <I2C_RequestMemoryWrite>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0a9      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2bff      	cmp	r3, #255	@ 0xff
 8006a20:	d90e      	bls.n	8006a40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	22ff      	movs	r2, #255	@ 0xff
 8006a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	8979      	ldrh	r1, [r7, #10]
 8006a30:	2300      	movs	r3, #0
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 fc2d 	bl	8007298 <I2C_TransferConfig>
 8006a3e:	e00f      	b.n	8006a60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	8979      	ldrh	r1, [r7, #10]
 8006a52:	2300      	movs	r3, #0
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fc1c 	bl	8007298 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fabb 	bl	8006fe0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e07b      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a78:	781a      	ldrb	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d034      	beq.n	8006b18 <HAL_I2C_Mem_Write+0x1c8>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d130      	bne.n	8006b18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	2200      	movs	r2, #0
 8006abe:	2180      	movs	r1, #128	@ 0x80
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fa4d 	bl	8006f60 <I2C_WaitOnFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e04d      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2bff      	cmp	r3, #255	@ 0xff
 8006ad8:	d90e      	bls.n	8006af8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	22ff      	movs	r2, #255	@ 0xff
 8006ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	8979      	ldrh	r1, [r7, #10]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fbd1 	bl	8007298 <I2C_TransferConfig>
 8006af6:	e00f      	b.n	8006b18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	8979      	ldrh	r1, [r7, #10]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fbc0 	bl	8007298 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d19e      	bne.n	8006a60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fa9a 	bl	8007060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e01a      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6859      	ldr	r1, [r3, #4]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <HAL_I2C_Mem_Write+0x224>)
 8006b4a:	400b      	ands	r3, r1
 8006b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	fe00e800 	.word	0xfe00e800

08006b78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	461a      	mov	r2, r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	817b      	strh	r3, [r7, #10]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	813b      	strh	r3, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	f040 80fd 	bne.w	8006d9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_I2C_Mem_Read+0x34>
 8006ba6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0f1      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_I2C_Mem_Read+0x4e>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e0ea      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bce:	f7fd ffe7 	bl	8004ba0 <HAL_GetTick>
 8006bd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	2319      	movs	r3, #25
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f9bd 	bl	8006f60 <I2C_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e0d5      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2222      	movs	r2, #34	@ 0x22
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2240      	movs	r2, #64	@ 0x40
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a3a      	ldr	r2, [r7, #32]
 8006c0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c18:	88f8      	ldrh	r0, [r7, #6]
 8006c1a:	893a      	ldrh	r2, [r7, #8]
 8006c1c:	8979      	ldrh	r1, [r7, #10]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	4603      	mov	r3, r0
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f921 	bl	8006e70 <I2C_RequestMemoryRead>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e0ad      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2bff      	cmp	r3, #255	@ 0xff
 8006c48:	d90e      	bls.n	8006c68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	22ff      	movs	r2, #255	@ 0xff
 8006c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	8979      	ldrh	r1, [r7, #10]
 8006c58:	4b52      	ldr	r3, [pc, #328]	@ (8006da4 <HAL_I2C_Mem_Read+0x22c>)
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fb19 	bl	8007298 <I2C_TransferConfig>
 8006c66:	e00f      	b.n	8006c88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	8979      	ldrh	r1, [r7, #10]
 8006c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8006da4 <HAL_I2C_Mem_Read+0x22c>)
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fb08 	bl	8007298 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2104      	movs	r1, #4
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f964 	bl	8006f60 <I2C_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e07c      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d034      	beq.n	8006d48 <HAL_I2C_Mem_Read+0x1d0>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d130      	bne.n	8006d48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	2200      	movs	r2, #0
 8006cee:	2180      	movs	r1, #128	@ 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f935 	bl	8006f60 <I2C_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e04d      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2bff      	cmp	r3, #255	@ 0xff
 8006d08:	d90e      	bls.n	8006d28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	22ff      	movs	r2, #255	@ 0xff
 8006d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	8979      	ldrh	r1, [r7, #10]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fab9 	bl	8007298 <I2C_TransferConfig>
 8006d26:	e00f      	b.n	8006d48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	8979      	ldrh	r1, [r7, #10]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 faa8 	bl	8007298 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d19a      	bne.n	8006c88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f982 	bl	8007060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e01a      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6859      	ldr	r1, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <HAL_I2C_Mem_Read+0x230>)
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	80002400 	.word	0x80002400
 8006da8:	fe00e800 	.word	0xfe00e800

08006dac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dba:	b2db      	uxtb	r3, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	817b      	strh	r3, [r7, #10]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	813b      	strh	r3, [r7, #8]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	8979      	ldrh	r1, [r7, #10]
 8006de8:	4b20      	ldr	r3, [pc, #128]	@ (8006e6c <I2C_RequestMemoryWrite+0xa4>)
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fa51 	bl	8007298 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	69b9      	ldr	r1, [r7, #24]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f8f0 	bl	8006fe0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e02c      	b.n	8006e64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d105      	bne.n	8006e1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e10:	893b      	ldrh	r3, [r7, #8]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e1a:	e015      	b.n	8006e48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e1c:	893b      	ldrh	r3, [r7, #8]
 8006e1e:	0a1b      	lsrs	r3, r3, #8
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	69b9      	ldr	r1, [r7, #24]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f8d6 	bl	8006fe0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e012      	b.n	8006e64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e3e:	893b      	ldrh	r3, [r7, #8]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2180      	movs	r1, #128	@ 0x80
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f884 	bl	8006f60 <I2C_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	80002000 	.word	0x80002000

08006e70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	8979      	ldrh	r1, [r7, #10]
 8006e90:	4b20      	ldr	r3, [pc, #128]	@ (8006f14 <I2C_RequestMemoryRead+0xa4>)
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	2300      	movs	r3, #0
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f9fe 	bl	8007298 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	69b9      	ldr	r1, [r7, #24]
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f89d 	bl	8006fe0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e02c      	b.n	8006f0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eb0:	88fb      	ldrh	r3, [r7, #6]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d105      	bne.n	8006ec2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb6:	893b      	ldrh	r3, [r7, #8]
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ec0:	e015      	b.n	8006eee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ec2:	893b      	ldrh	r3, [r7, #8]
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	69b9      	ldr	r1, [r7, #24]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f883 	bl	8006fe0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e012      	b.n	8006f0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ee4:	893b      	ldrh	r3, [r7, #8]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2140      	movs	r1, #64	@ 0x40
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f831 	bl	8006f60 <I2C_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	80002000 	.word	0x80002000

08006f18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d103      	bne.n	8006f36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d007      	beq.n	8006f54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	619a      	str	r2, [r3, #24]
  }
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f70:	e022      	b.n	8006fb8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d01e      	beq.n	8006fb8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7a:	f7fd fe11 	bl	8004ba0 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d302      	bcc.n	8006f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d113      	bne.n	8006fb8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f94:	f043 0220 	orr.w	r2, r3, #32
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e00f      	b.n	8006fd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	bf0c      	ite	eq
 8006fc8:	2301      	moveq	r3, #1
 8006fca:	2300      	movne	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d0cd      	beq.n	8006f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fec:	e02c      	b.n	8007048 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f870 	bl	80070d8 <I2C_IsErrorOccurred>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e02a      	b.n	8007058 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d01e      	beq.n	8007048 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700a:	f7fd fdc9 	bl	8004ba0 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	429a      	cmp	r2, r3
 8007018:	d302      	bcc.n	8007020 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d113      	bne.n	8007048 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007024:	f043 0220 	orr.w	r2, r3, #32
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e007      	b.n	8007058 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d1cb      	bne.n	8006fee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800706c:	e028      	b.n	80070c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f830 	bl	80070d8 <I2C_IsErrorOccurred>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e026      	b.n	80070d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007082:	f7fd fd8d 	bl	8004ba0 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	d302      	bcc.n	8007098 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d113      	bne.n	80070c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e007      	b.n	80070d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d1cf      	bne.n	800706e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	@ 0x28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b00      	cmp	r3, #0
 8007102:	d068      	beq.n	80071d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2210      	movs	r2, #16
 800710a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800710c:	e049      	b.n	80071a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d045      	beq.n	80071a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007116:	f7fd fd43 	bl	8004ba0 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <I2C_IsErrorOccurred+0x54>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d13a      	bne.n	80071a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007136:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800713e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800714a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714e:	d121      	bne.n	8007194 <I2C_IsErrorOccurred+0xbc>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007156:	d01d      	beq.n	8007194 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	2b20      	cmp	r3, #32
 800715c:	d01a      	beq.n	8007194 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800716c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800716e:	f7fd fd17 	bl	8004ba0 <HAL_GetTick>
 8007172:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007174:	e00e      	b.n	8007194 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007176:	f7fd fd13 	bl	8004ba0 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b19      	cmp	r3, #25
 8007182:	d907      	bls.n	8007194 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	f043 0320 	orr.w	r3, r3, #32
 800718a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007192:	e006      	b.n	80071a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d1e9      	bne.n	8007176 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d003      	beq.n	80071b8 <I2C_IsErrorOccurred+0xe0>
 80071b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0aa      	beq.n	800710e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80071b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2220      	movs	r2, #32
 80071c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	f043 0304 	orr.w	r3, r3, #4
 80071ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f043 0308 	orr.w	r3, r3, #8
 8007210:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800721a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	f043 0302 	orr.w	r3, r3, #2
 8007232:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800723c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01c      	beq.n	8007286 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fe63 	bl	8006f18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6859      	ldr	r1, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b0d      	ldr	r3, [pc, #52]	@ (8007294 <I2C_IsErrorOccurred+0x1bc>)
 800725e:	400b      	ands	r3, r1
 8007260:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	431a      	orrs	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800728a:	4618      	mov	r0, r3
 800728c:	3728      	adds	r7, #40	@ 0x28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	fe00e800 	.word	0xfe00e800

08007298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	817b      	strh	r3, [r7, #10]
 80072a6:	4613      	mov	r3, r2
 80072a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072aa:	897b      	ldrh	r3, [r7, #10]
 80072ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072b0:	7a7b      	ldrb	r3, [r7, #9]
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	0d5b      	lsrs	r3, r3, #21
 80072d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80072d6:	4b08      	ldr	r3, [pc, #32]	@ (80072f8 <I2C_TransferConfig+0x60>)
 80072d8:	430b      	orrs	r3, r1
 80072da:	43db      	mvns	r3, r3
 80072dc:	ea02 0103 	and.w	r1, r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	03ff63ff 	.word	0x03ff63ff

080072fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b20      	cmp	r3, #32
 8007310:	d138      	bne.n	8007384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800731c:	2302      	movs	r3, #2
 800731e:	e032      	b.n	8007386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2224      	movs	r2, #36	@ 0x24
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800734e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6819      	ldr	r1, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	e000      	b.n	8007386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007384:	2302      	movs	r3, #2
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d139      	bne.n	800741c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e033      	b.n	800741e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2224      	movs	r2, #36	@ 0x24
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0201 	bic.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80073e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	e000      	b.n	800741e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800741c:	2302      	movs	r3, #2
  }
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e0bf      	b.n	80075be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fb f810 	bl	8002478 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800746e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6999      	ldr	r1, [r3, #24]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007484:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6899      	ldr	r1, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b4a      	ldr	r3, [pc, #296]	@ (80075c8 <HAL_LTDC_Init+0x19c>)
 80074a0:	400b      	ands	r3, r1
 80074a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6899      	ldr	r1, [r3, #8]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68d9      	ldr	r1, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	4b3e      	ldr	r3, [pc, #248]	@ (80075c8 <HAL_LTDC_Init+0x19c>)
 80074ce:	400b      	ands	r3, r1
 80074d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68d9      	ldr	r1, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6919      	ldr	r1, [r3, #16]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b33      	ldr	r3, [pc, #204]	@ (80075c8 <HAL_LTDC_Init+0x19c>)
 80074fc:	400b      	ands	r3, r1
 80074fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6919      	ldr	r1, [r3, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6959      	ldr	r1, [r3, #20]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4b27      	ldr	r3, [pc, #156]	@ (80075c8 <HAL_LTDC_Init+0x19c>)
 800752a:	400b      	ands	r3, r1
 800752c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6959      	ldr	r1, [r3, #20]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800756e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0206 	orr.w	r2, r2, #6
 800759a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	f000f800 	.word	0xf000f800

080075cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d023      	beq.n	8007636 <HAL_LTDC_IRQHandler+0x6a>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01e      	beq.n	8007636 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0204 	bic.w	r2, r2, #4
 8007606:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2204      	movs	r2, #4
 800760e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007616:	f043 0201 	orr.w	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2204      	movs	r2, #4
 8007624:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f86f 	bl	8007714 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d023      	beq.n	8007688 <HAL_LTDC_IRQHandler+0xbc>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01e      	beq.n	8007688 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0202 	bic.w	r2, r2, #2
 8007658:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2202      	movs	r2, #2
 8007660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007668:	f043 0202 	orr.w	r2, r3, #2
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2204      	movs	r2, #4
 8007676:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f846 	bl	8007714 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01b      	beq.n	80076ca <HAL_LTDC_IRQHandler+0xfe>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d016      	beq.n	80076ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0201 	bic.w	r2, r2, #1
 80076aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2201      	movs	r2, #1
 80076b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f82f 	bl	8007728 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01b      	beq.n	800770c <HAL_LTDC_IRQHandler+0x140>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0208 	bic.w	r2, r2, #8
 80076ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2208      	movs	r2, #8
 80076f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f818 	bl	800773c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800770c:	bf00      	nop
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007750:	b5b0      	push	{r4, r5, r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_LTDC_ConfigLayer+0x1a>
 8007766:	2302      	movs	r3, #2
 8007768:	e02c      	b.n	80077c4 <HAL_LTDC_ConfigLayer+0x74>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2134      	movs	r1, #52	@ 0x34
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4614      	mov	r4, r2
 800778e:	461d      	mov	r5, r3
 8007790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800779a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f81f 	bl	80077e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2201      	movs	r2, #1
 80077b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bdb0      	pop	{r4, r5, r7, pc}

080077cc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80077da:	b2db      	uxtb	r3, r3
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b089      	sub	sp, #36	@ 0x24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007804:	4413      	add	r3, r2
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	01db      	lsls	r3, r3, #7
 8007814:	4413      	add	r3, r2
 8007816:	3384      	adds	r3, #132	@ 0x84
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	4611      	mov	r1, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	01d2      	lsls	r2, r2, #7
 8007824:	440a      	add	r2, r1
 8007826:	3284      	adds	r2, #132	@ 0x84
 8007828:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800782c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	0c1b      	lsrs	r3, r3, #16
 800783a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800783e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007840:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4619      	mov	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	01db      	lsls	r3, r3, #7
 800784c:	440b      	add	r3, r1
 800784e:	3384      	adds	r3, #132	@ 0x84
 8007850:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007856:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007866:	4413      	add	r3, r2
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	01db      	lsls	r3, r3, #7
 8007876:	4413      	add	r3, r2
 8007878:	3384      	adds	r3, #132	@ 0x84
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	4611      	mov	r1, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	01d2      	lsls	r2, r2, #7
 8007886:	440a      	add	r2, r1
 8007888:	3284      	adds	r2, #132	@ 0x84
 800788a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800788e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800789e:	4413      	add	r3, r2
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	01db      	lsls	r3, r3, #7
 80078ac:	440b      	add	r3, r1
 80078ae:	3384      	adds	r3, #132	@ 0x84
 80078b0:	4619      	mov	r1, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	01db      	lsls	r3, r3, #7
 80078c2:	4413      	add	r3, r2
 80078c4:	3384      	adds	r3, #132	@ 0x84
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	4611      	mov	r1, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	01d2      	lsls	r2, r2, #7
 80078d2:	440a      	add	r2, r1
 80078d4:	3284      	adds	r2, #132	@ 0x84
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	01db      	lsls	r3, r3, #7
 80078e6:	4413      	add	r3, r2
 80078e8:	3384      	adds	r3, #132	@ 0x84
 80078ea:	461a      	mov	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	061b      	lsls	r3, r3, #24
 800790c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	4413      	add	r3, r2
 800791a:	3384      	adds	r3, #132	@ 0x84
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	4413      	add	r3, r2
 800792a:	3384      	adds	r3, #132	@ 0x84
 800792c:	461a      	mov	r2, r3
 800792e:	2300      	movs	r3, #0
 8007930:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007938:	461a      	mov	r2, r3
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	431a      	orrs	r2, r3
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	431a      	orrs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4619      	mov	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	01db      	lsls	r3, r3, #7
 800794c:	440b      	add	r3, r1
 800794e:	3384      	adds	r3, #132	@ 0x84
 8007950:	4619      	mov	r1, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	01db      	lsls	r3, r3, #7
 8007962:	4413      	add	r3, r2
 8007964:	3384      	adds	r3, #132	@ 0x84
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	4611      	mov	r1, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	01d2      	lsls	r2, r2, #7
 8007972:	440a      	add	r2, r1
 8007974:	3284      	adds	r2, #132	@ 0x84
 8007976:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800797a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	01db      	lsls	r3, r3, #7
 8007986:	4413      	add	r3, r2
 8007988:	3384      	adds	r3, #132	@ 0x84
 800798a:	461a      	mov	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	01db      	lsls	r3, r3, #7
 800799c:	4413      	add	r3, r2
 800799e:	3384      	adds	r3, #132	@ 0x84
 80079a0:	69da      	ldr	r2, [r3, #28]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	01db      	lsls	r3, r3, #7
 80079ac:	440b      	add	r3, r1
 80079ae:	3384      	adds	r3, #132	@ 0x84
 80079b0:	4619      	mov	r1, r3
 80079b2:	4b58      	ldr	r3, [pc, #352]	@ (8007b14 <LTDC_SetConfig+0x32c>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	6809      	ldr	r1, [r1, #0]
 80079c4:	4608      	mov	r0, r1
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	01c9      	lsls	r1, r1, #7
 80079ca:	4401      	add	r1, r0
 80079cc:	3184      	adds	r1, #132	@ 0x84
 80079ce:	4313      	orrs	r3, r2
 80079d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	01db      	lsls	r3, r3, #7
 80079dc:	4413      	add	r3, r2
 80079de:	3384      	adds	r3, #132	@ 0x84
 80079e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	01db      	lsls	r3, r3, #7
 80079ec:	4413      	add	r3, r2
 80079ee:	3384      	adds	r3, #132	@ 0x84
 80079f0:	461a      	mov	r2, r3
 80079f2:	2300      	movs	r3, #0
 80079f4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	01db      	lsls	r3, r3, #7
 8007a00:	4413      	add	r3, r2
 8007a02:	3384      	adds	r3, #132	@ 0x84
 8007a04:	461a      	mov	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007a14:	2304      	movs	r3, #4
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	e01b      	b.n	8007a52 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d102      	bne.n	8007a28 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007a22:	2303      	movs	r3, #3
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	e014      	b.n	8007a52 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d00b      	beq.n	8007a48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d007      	beq.n	8007a48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d003      	beq.n	8007a48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	d102      	bne.n	8007a4e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e001      	b.n	8007a52 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	01db      	lsls	r3, r3, #7
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3384      	adds	r3, #132	@ 0x84
 8007a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	4611      	mov	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	01d2      	lsls	r2, r2, #7
 8007a6c:	440a      	add	r2, r1
 8007a6e:	3284      	adds	r2, #132	@ 0x84
 8007a70:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007a74:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	fb02 f303 	mul.w	r3, r2, r3
 8007a80:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6859      	ldr	r1, [r3, #4]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	1acb      	subs	r3, r1, r3
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6809      	ldr	r1, [r1, #0]
 8007a98:	4608      	mov	r0, r1
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	01c9      	lsls	r1, r1, #7
 8007a9e:	4401      	add	r1, r0
 8007aa0:	3184      	adds	r1, #132	@ 0x84
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	01db      	lsls	r3, r3, #7
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3384      	adds	r3, #132	@ 0x84
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	01db      	lsls	r3, r3, #7
 8007ac0:	440b      	add	r3, r1
 8007ac2:	3384      	adds	r3, #132	@ 0x84
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4b14      	ldr	r3, [pc, #80]	@ (8007b18 <LTDC_SetConfig+0x330>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	01db      	lsls	r3, r3, #7
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3384      	adds	r3, #132	@ 0x84
 8007ada:	461a      	mov	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	01db      	lsls	r3, r3, #7
 8007aec:	4413      	add	r3, r2
 8007aee:	3384      	adds	r3, #132	@ 0x84
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	4611      	mov	r1, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	01d2      	lsls	r2, r2, #7
 8007afc:	440a      	add	r2, r1
 8007afe:	3284      	adds	r2, #132	@ 0x84
 8007b00:	f043 0301 	orr.w	r3, r3, #1
 8007b04:	6013      	str	r3, [r2, #0]
}
 8007b06:	bf00      	nop
 8007b08:	3724      	adds	r7, #36	@ 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	fffff8f8 	.word	0xfffff8f8
 8007b18:	fffff800 	.word	0xfffff800

08007b1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b20:	4b05      	ldr	r3, [pc, #20]	@ (8007b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a04      	ldr	r2, [pc, #16]	@ (8007b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b2a:	6013      	str	r3, [r2, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40007000 	.word	0x40007000

08007b3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b46:	4b23      	ldr	r3, [pc, #140]	@ (8007bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	4a22      	ldr	r2, [pc, #136]	@ (8007bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b52:	4b20      	ldr	r3, [pc, #128]	@ (8007bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b6a:	f7fd f819 	bl	8004ba0 <HAL_GetTick>
 8007b6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b70:	e009      	b.n	8007b86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b72:	f7fd f815 	bl	8004ba0 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b80:	d901      	bls.n	8007b86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e022      	b.n	8007bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b86:	4b14      	ldr	r3, [pc, #80]	@ (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b92:	d1ee      	bne.n	8007b72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b94:	4b10      	ldr	r3, [pc, #64]	@ (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a0f      	ldr	r2, [pc, #60]	@ (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ba0:	f7fc fffe 	bl	8004ba0 <HAL_GetTick>
 8007ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ba6:	e009      	b.n	8007bbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ba8:	f7fc fffa 	bl	8004ba0 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bb6:	d901      	bls.n	8007bbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e007      	b.n	8007bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007bbc:	4b06      	ldr	r3, [pc, #24]	@ (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc8:	d1ee      	bne.n	8007ba8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000

08007bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007be4:	2300      	movs	r3, #0
 8007be6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e291      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8087 	beq.w	8007d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c00:	4b96      	ldr	r3, [pc, #600]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d00c      	beq.n	8007c26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c0c:	4b93      	ldr	r3, [pc, #588]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 030c 	and.w	r3, r3, #12
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d112      	bne.n	8007c3e <HAL_RCC_OscConfig+0x62>
 8007c18:	4b90      	ldr	r3, [pc, #576]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c24:	d10b      	bne.n	8007c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c26:	4b8d      	ldr	r3, [pc, #564]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d06c      	beq.n	8007d0c <HAL_RCC_OscConfig+0x130>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d168      	bne.n	8007d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e26b      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c46:	d106      	bne.n	8007c56 <HAL_RCC_OscConfig+0x7a>
 8007c48:	4b84      	ldr	r3, [pc, #528]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a83      	ldr	r2, [pc, #524]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	e02e      	b.n	8007cb4 <HAL_RCC_OscConfig+0xd8>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10c      	bne.n	8007c78 <HAL_RCC_OscConfig+0x9c>
 8007c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a7e      	ldr	r2, [pc, #504]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	4b7c      	ldr	r3, [pc, #496]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a7b      	ldr	r2, [pc, #492]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	e01d      	b.n	8007cb4 <HAL_RCC_OscConfig+0xd8>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c80:	d10c      	bne.n	8007c9c <HAL_RCC_OscConfig+0xc0>
 8007c82:	4b76      	ldr	r3, [pc, #472]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a75      	ldr	r2, [pc, #468]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4b73      	ldr	r3, [pc, #460]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a72      	ldr	r2, [pc, #456]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	e00b      	b.n	8007cb4 <HAL_RCC_OscConfig+0xd8>
 8007c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a6e      	ldr	r2, [pc, #440]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a6b      	ldr	r2, [pc, #428]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d013      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cbc:	f7fc ff70 	bl	8004ba0 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cc4:	f7fc ff6c 	bl	8004ba0 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b64      	cmp	r3, #100	@ 0x64
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e21f      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cd6:	4b61      	ldr	r3, [pc, #388]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCC_OscConfig+0xe8>
 8007ce2:	e014      	b.n	8007d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce4:	f7fc ff5c 	bl	8004ba0 <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cec:	f7fc ff58 	bl	8004ba0 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b64      	cmp	r3, #100	@ 0x64
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e20b      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cfe:	4b57      	ldr	r3, [pc, #348]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <HAL_RCC_OscConfig+0x110>
 8007d0a:	e000      	b.n	8007d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d069      	beq.n	8007dee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d1a:	4b50      	ldr	r3, [pc, #320]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d26:	4b4d      	ldr	r3, [pc, #308]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 030c 	and.w	r3, r3, #12
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d11c      	bne.n	8007d6c <HAL_RCC_OscConfig+0x190>
 8007d32:	4b4a      	ldr	r3, [pc, #296]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d116      	bne.n	8007d6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d3e:	4b47      	ldr	r3, [pc, #284]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_RCC_OscConfig+0x17a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d001      	beq.n	8007d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e1df      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d56:	4b41      	ldr	r3, [pc, #260]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	493d      	ldr	r1, [pc, #244]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d6a:	e040      	b.n	8007dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d023      	beq.n	8007dbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d74:	4b39      	ldr	r3, [pc, #228]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a38      	ldr	r2, [pc, #224]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fc ff0e 	bl	8004ba0 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d88:	f7fc ff0a 	bl	8004ba0 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e1bd      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d9a:	4b30      	ldr	r3, [pc, #192]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0f0      	beq.n	8007d88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4929      	ldr	r1, [pc, #164]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]
 8007dba:	e018      	b.n	8007dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dbc:	4b27      	ldr	r3, [pc, #156]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a26      	ldr	r2, [pc, #152]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007dc2:	f023 0301 	bic.w	r3, r3, #1
 8007dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc8:	f7fc feea 	bl	8004ba0 <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dce:	e008      	b.n	8007de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dd0:	f7fc fee6 	bl	8004ba0 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e199      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007de2:	4b1e      	ldr	r3, [pc, #120]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1f0      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d038      	beq.n	8007e6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d019      	beq.n	8007e36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e02:	4b16      	ldr	r3, [pc, #88]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e06:	4a15      	ldr	r2, [pc, #84]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e08:	f043 0301 	orr.w	r3, r3, #1
 8007e0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0e:	f7fc fec7 	bl	8004ba0 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e16:	f7fc fec3 	bl	8004ba0 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e176      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e28:	4b0c      	ldr	r3, [pc, #48]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0f0      	beq.n	8007e16 <HAL_RCC_OscConfig+0x23a>
 8007e34:	e01a      	b.n	8007e6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e36:	4b09      	ldr	r3, [pc, #36]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3a:	4a08      	ldr	r2, [pc, #32]	@ (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e3c:	f023 0301 	bic.w	r3, r3, #1
 8007e40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e42:	f7fc fead 	bl	8004ba0 <HAL_GetTick>
 8007e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e48:	e00a      	b.n	8007e60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e4a:	f7fc fea9 	bl	8004ba0 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d903      	bls.n	8007e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e15c      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
 8007e5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e60:	4b91      	ldr	r3, [pc, #580]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1ee      	bne.n	8007e4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 80a4 	beq.w	8007fc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10d      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e86:	4b88      	ldr	r3, [pc, #544]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8a:	4a87      	ldr	r2, [pc, #540]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e92:	4b85      	ldr	r3, [pc, #532]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e9a:	60bb      	str	r3, [r7, #8]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ea2:	4b82      	ldr	r3, [pc, #520]	@ (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d118      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007eae:	4b7f      	ldr	r3, [pc, #508]	@ (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eba:	f7fc fe71 	bl	8004ba0 <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ec0:	e008      	b.n	8007ed4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec2:	f7fc fe6d 	bl	8004ba0 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b64      	cmp	r3, #100	@ 0x64
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e120      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ed4:	4b75      	ldr	r3, [pc, #468]	@ (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0f0      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d106      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x31a>
 8007ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eec:	4a6e      	ldr	r2, [pc, #440]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ef4:	e02d      	b.n	8007f52 <HAL_RCC_OscConfig+0x376>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10c      	bne.n	8007f18 <HAL_RCC_OscConfig+0x33c>
 8007efe:	4b6a      	ldr	r3, [pc, #424]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f02:	4a69      	ldr	r2, [pc, #420]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f0a:	4b67      	ldr	r3, [pc, #412]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f0e:	4a66      	ldr	r2, [pc, #408]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f10:	f023 0304 	bic.w	r3, r3, #4
 8007f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f16:	e01c      	b.n	8007f52 <HAL_RCC_OscConfig+0x376>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b05      	cmp	r3, #5
 8007f1e:	d10c      	bne.n	8007f3a <HAL_RCC_OscConfig+0x35e>
 8007f20:	4b61      	ldr	r3, [pc, #388]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f24:	4a60      	ldr	r2, [pc, #384]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f26:	f043 0304 	orr.w	r3, r3, #4
 8007f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f30:	4a5d      	ldr	r2, [pc, #372]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f38:	e00b      	b.n	8007f52 <HAL_RCC_OscConfig+0x376>
 8007f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f46:	4b58      	ldr	r3, [pc, #352]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4a:	4a57      	ldr	r2, [pc, #348]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f4c:	f023 0304 	bic.w	r3, r3, #4
 8007f50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d015      	beq.n	8007f86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5a:	f7fc fe21 	bl	8004ba0 <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f60:	e00a      	b.n	8007f78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f62:	f7fc fe1d 	bl	8004ba0 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e0ce      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f78:	4b4b      	ldr	r3, [pc, #300]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0ee      	beq.n	8007f62 <HAL_RCC_OscConfig+0x386>
 8007f84:	e014      	b.n	8007fb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f86:	f7fc fe0b 	bl	8004ba0 <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f8c:	e00a      	b.n	8007fa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f8e:	f7fc fe07 	bl	8004ba0 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0b8      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa4:	4b40      	ldr	r3, [pc, #256]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1ee      	bne.n	8007f8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fba:	4a3b      	ldr	r2, [pc, #236]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fc0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 80a4 	beq.w	8008114 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fcc:	4b36      	ldr	r3, [pc, #216]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 030c 	and.w	r3, r3, #12
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d06b      	beq.n	80080b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d149      	bne.n	8008074 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe0:	4b31      	ldr	r3, [pc, #196]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a30      	ldr	r2, [pc, #192]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fec:	f7fc fdd8 	bl	8004ba0 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff4:	f7fc fdd4 	bl	8004ba0 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e087      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008006:	4b28      	ldr	r3, [pc, #160]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f0      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008020:	019b      	lsls	r3, r3, #6
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	3b01      	subs	r3, #1
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	061b      	lsls	r3, r3, #24
 8008036:	4313      	orrs	r3, r2
 8008038:	4a1b      	ldr	r2, [pc, #108]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 800803a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800803e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008040:	4b19      	ldr	r3, [pc, #100]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a18      	ldr	r2, [pc, #96]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800804a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804c:	f7fc fda8 	bl	8004ba0 <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008054:	f7fc fda4 	bl	8004ba0 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e057      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008066:	4b10      	ldr	r3, [pc, #64]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0f0      	beq.n	8008054 <HAL_RCC_OscConfig+0x478>
 8008072:	e04f      	b.n	8008114 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008074:	4b0c      	ldr	r3, [pc, #48]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a0b      	ldr	r2, [pc, #44]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 800807a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800807e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008080:	f7fc fd8e 	bl	8004ba0 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008088:	f7fc fd8a 	bl	8004ba0 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e03d      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800809a:	4b03      	ldr	r3, [pc, #12]	@ (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f0      	bne.n	8008088 <HAL_RCC_OscConfig+0x4ac>
 80080a6:	e035      	b.n	8008114 <HAL_RCC_OscConfig+0x538>
 80080a8:	40023800 	.word	0x40023800
 80080ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80080b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008120 <HAL_RCC_OscConfig+0x544>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d028      	beq.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d121      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d11a      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080e0:	4013      	ands	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d111      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	3b01      	subs	r3, #1
 80080fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d107      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800810c:	429a      	cmp	r2, r3
 800810e:	d001      	beq.n	8008114 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	40023800 	.word	0x40023800

08008124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e0d0      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800813c:	4b6a      	ldr	r3, [pc, #424]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d910      	bls.n	800816c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800814a:	4b67      	ldr	r3, [pc, #412]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f023 020f 	bic.w	r2, r3, #15
 8008152:	4965      	ldr	r1, [pc, #404]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	4313      	orrs	r3, r2
 8008158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800815a:	4b63      	ldr	r3, [pc, #396]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d001      	beq.n	800816c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e0b8      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d020      	beq.n	80081ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008184:	4b59      	ldr	r3, [pc, #356]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a58      	ldr	r2, [pc, #352]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 800818a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800818e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800819c:	4b53      	ldr	r3, [pc, #332]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	4a52      	ldr	r2, [pc, #328]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80081a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081a8:	4b50      	ldr	r3, [pc, #320]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	494d      	ldr	r1, [pc, #308]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d040      	beq.n	8008248 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d107      	bne.n	80081de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ce:	4b47      	ldr	r3, [pc, #284]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d115      	bne.n	8008206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e07f      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d107      	bne.n	80081f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081e6:	4b41      	ldr	r3, [pc, #260]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e073      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081f6:	4b3d      	ldr	r3, [pc, #244]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e06b      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008206:	4b39      	ldr	r3, [pc, #228]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f023 0203 	bic.w	r2, r3, #3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	4936      	ldr	r1, [pc, #216]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008214:	4313      	orrs	r3, r2
 8008216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008218:	f7fc fcc2 	bl	8004ba0 <HAL_GetTick>
 800821c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800821e:	e00a      	b.n	8008236 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008220:	f7fc fcbe 	bl	8004ba0 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800822e:	4293      	cmp	r3, r2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e053      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008236:	4b2d      	ldr	r3, [pc, #180]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 020c 	and.w	r2, r3, #12
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	429a      	cmp	r2, r3
 8008246:	d1eb      	bne.n	8008220 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008248:	4b27      	ldr	r3, [pc, #156]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d210      	bcs.n	8008278 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008256:	4b24      	ldr	r3, [pc, #144]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f023 020f 	bic.w	r2, r3, #15
 800825e:	4922      	ldr	r1, [pc, #136]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008266:	4b20      	ldr	r3, [pc, #128]	@ (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d001      	beq.n	8008278 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e032      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d008      	beq.n	8008296 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008284:	4b19      	ldr	r3, [pc, #100]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	4916      	ldr	r1, [pc, #88]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008292:	4313      	orrs	r3, r2
 8008294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d009      	beq.n	80082b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80082a2:	4b12      	ldr	r3, [pc, #72]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	490e      	ldr	r1, [pc, #56]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80082b6:	f000 f821 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 80082ba:	4602      	mov	r2, r0
 80082bc:	4b0b      	ldr	r3, [pc, #44]	@ (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	490a      	ldr	r1, [pc, #40]	@ (80082f0 <HAL_RCC_ClockConfig+0x1cc>)
 80082c8:	5ccb      	ldrb	r3, [r1, r3]
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	4a09      	ldr	r2, [pc, #36]	@ (80082f4 <HAL_RCC_ClockConfig+0x1d0>)
 80082d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80082d2:	4b09      	ldr	r3, [pc, #36]	@ (80082f8 <HAL_RCC_ClockConfig+0x1d4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fb febe 	bl	8004058 <HAL_InitTick>

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40023c00 	.word	0x40023c00
 80082ec:	40023800 	.word	0x40023800
 80082f0:	0801b798 	.word	0x0801b798
 80082f4:	2000004c 	.word	0x2000004c
 80082f8:	20000050 	.word	0x20000050

080082fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008300:	b090      	sub	sp, #64	@ 0x40
 8008302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
 8008308:	2300      	movs	r3, #0
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800830c:	2300      	movs	r3, #0
 800830e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008314:	4b59      	ldr	r3, [pc, #356]	@ (800847c <HAL_RCC_GetSysClockFreq+0x180>)
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 030c 	and.w	r3, r3, #12
 800831c:	2b08      	cmp	r3, #8
 800831e:	d00d      	beq.n	800833c <HAL_RCC_GetSysClockFreq+0x40>
 8008320:	2b08      	cmp	r3, #8
 8008322:	f200 80a1 	bhi.w	8008468 <HAL_RCC_GetSysClockFreq+0x16c>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <HAL_RCC_GetSysClockFreq+0x34>
 800832a:	2b04      	cmp	r3, #4
 800832c:	d003      	beq.n	8008336 <HAL_RCC_GetSysClockFreq+0x3a>
 800832e:	e09b      	b.n	8008468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008330:	4b53      	ldr	r3, [pc, #332]	@ (8008480 <HAL_RCC_GetSysClockFreq+0x184>)
 8008332:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008334:	e09b      	b.n	800846e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008336:	4b53      	ldr	r3, [pc, #332]	@ (8008484 <HAL_RCC_GetSysClockFreq+0x188>)
 8008338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800833a:	e098      	b.n	800846e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800833c:	4b4f      	ldr	r3, [pc, #316]	@ (800847c <HAL_RCC_GetSysClockFreq+0x180>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008344:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008346:	4b4d      	ldr	r3, [pc, #308]	@ (800847c <HAL_RCC_GetSysClockFreq+0x180>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d028      	beq.n	80083a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008352:	4b4a      	ldr	r3, [pc, #296]	@ (800847c <HAL_RCC_GetSysClockFreq+0x180>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	099b      	lsrs	r3, r3, #6
 8008358:	2200      	movs	r2, #0
 800835a:	623b      	str	r3, [r7, #32]
 800835c:	627a      	str	r2, [r7, #36]	@ 0x24
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008364:	2100      	movs	r1, #0
 8008366:	4b47      	ldr	r3, [pc, #284]	@ (8008484 <HAL_RCC_GetSysClockFreq+0x188>)
 8008368:	fb03 f201 	mul.w	r2, r3, r1
 800836c:	2300      	movs	r3, #0
 800836e:	fb00 f303 	mul.w	r3, r0, r3
 8008372:	4413      	add	r3, r2
 8008374:	4a43      	ldr	r2, [pc, #268]	@ (8008484 <HAL_RCC_GetSysClockFreq+0x188>)
 8008376:	fba0 1202 	umull	r1, r2, r0, r2
 800837a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800837c:	460a      	mov	r2, r1
 800837e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008382:	4413      	add	r3, r2
 8008384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008388:	2200      	movs	r2, #0
 800838a:	61bb      	str	r3, [r7, #24]
 800838c:	61fa      	str	r2, [r7, #28]
 800838e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008396:	f7f7 ff8b 	bl	80002b0 <__aeabi_uldivmod>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4613      	mov	r3, r2
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083a2:	e053      	b.n	800844c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083a4:	4b35      	ldr	r3, [pc, #212]	@ (800847c <HAL_RCC_GetSysClockFreq+0x180>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	099b      	lsrs	r3, r3, #6
 80083aa:	2200      	movs	r2, #0
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	617a      	str	r2, [r7, #20]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80083b6:	f04f 0b00 	mov.w	fp, #0
 80083ba:	4652      	mov	r2, sl
 80083bc:	465b      	mov	r3, fp
 80083be:	f04f 0000 	mov.w	r0, #0
 80083c2:	f04f 0100 	mov.w	r1, #0
 80083c6:	0159      	lsls	r1, r3, #5
 80083c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083cc:	0150      	lsls	r0, r2, #5
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	ebb2 080a 	subs.w	r8, r2, sl
 80083d6:	eb63 090b 	sbc.w	r9, r3, fp
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80083e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80083ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80083ee:	ebb2 0408 	subs.w	r4, r2, r8
 80083f2:	eb63 0509 	sbc.w	r5, r3, r9
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	00eb      	lsls	r3, r5, #3
 8008400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008404:	00e2      	lsls	r2, r4, #3
 8008406:	4614      	mov	r4, r2
 8008408:	461d      	mov	r5, r3
 800840a:	eb14 030a 	adds.w	r3, r4, sl
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	eb45 030b 	adc.w	r3, r5, fp
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	f04f 0200 	mov.w	r2, #0
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008422:	4629      	mov	r1, r5
 8008424:	028b      	lsls	r3, r1, #10
 8008426:	4621      	mov	r1, r4
 8008428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800842c:	4621      	mov	r1, r4
 800842e:	028a      	lsls	r2, r1, #10
 8008430:	4610      	mov	r0, r2
 8008432:	4619      	mov	r1, r3
 8008434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008436:	2200      	movs	r2, #0
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	60fa      	str	r2, [r7, #12]
 800843c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008440:	f7f7 ff36 	bl	80002b0 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4613      	mov	r3, r2
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800844c:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <HAL_RCC_GetSysClockFreq+0x180>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	0c1b      	lsrs	r3, r3, #16
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	3301      	adds	r3, #1
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800845c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008466:	e002      	b.n	800846e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008468:	4b05      	ldr	r3, [pc, #20]	@ (8008480 <HAL_RCC_GetSysClockFreq+0x184>)
 800846a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800846c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800846e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008470:	4618      	mov	r0, r3
 8008472:	3740      	adds	r7, #64	@ 0x40
 8008474:	46bd      	mov	sp, r7
 8008476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800847a:	bf00      	nop
 800847c:	40023800 	.word	0x40023800
 8008480:	00f42400 	.word	0x00f42400
 8008484:	017d7840 	.word	0x017d7840

08008488 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800848c:	4b03      	ldr	r3, [pc, #12]	@ (800849c <HAL_RCC_GetHCLKFreq+0x14>)
 800848e:	681b      	ldr	r3, [r3, #0]
}
 8008490:	4618      	mov	r0, r3
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	2000004c 	.word	0x2000004c

080084a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80084a4:	f7ff fff0 	bl	8008488 <HAL_RCC_GetHCLKFreq>
 80084a8:	4602      	mov	r2, r0
 80084aa:	4b05      	ldr	r3, [pc, #20]	@ (80084c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	0a9b      	lsrs	r3, r3, #10
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	4903      	ldr	r1, [pc, #12]	@ (80084c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084b6:	5ccb      	ldrb	r3, [r1, r3]
 80084b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084bc:	4618      	mov	r0, r3
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	40023800 	.word	0x40023800
 80084c4:	0801b7a8 	.word	0x0801b7a8

080084c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80084cc:	f7ff ffdc 	bl	8008488 <HAL_RCC_GetHCLKFreq>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4b05      	ldr	r3, [pc, #20]	@ (80084e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	0b5b      	lsrs	r3, r3, #13
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	4903      	ldr	r1, [pc, #12]	@ (80084ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80084de:	5ccb      	ldrb	r3, [r1, r3]
 80084e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40023800 	.word	0x40023800
 80084ec:	0801b7a8 	.word	0x0801b7a8

080084f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	220f      	movs	r2, #15
 80084fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008500:	4b12      	ldr	r3, [pc, #72]	@ (800854c <HAL_RCC_GetClockConfig+0x5c>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f003 0203 	and.w	r2, r3, #3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800850c:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <HAL_RCC_GetClockConfig+0x5c>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008518:	4b0c      	ldr	r3, [pc, #48]	@ (800854c <HAL_RCC_GetClockConfig+0x5c>)
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008524:	4b09      	ldr	r3, [pc, #36]	@ (800854c <HAL_RCC_GetClockConfig+0x5c>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	08db      	lsrs	r3, r3, #3
 800852a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008532:	4b07      	ldr	r3, [pc, #28]	@ (8008550 <HAL_RCC_GetClockConfig+0x60>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 020f 	and.w	r2, r3, #15
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	601a      	str	r2, [r3, #0]
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	40023800 	.word	0x40023800
 8008550:	40023c00 	.word	0x40023c00

08008554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	d012      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800857c:	4b69      	ldr	r3, [pc, #420]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	4a68      	ldr	r2, [pc, #416]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008582:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008586:	6093      	str	r3, [r2, #8]
 8008588:	4b66      	ldr	r3, [pc, #408]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008590:	4964      	ldr	r1, [pc, #400]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008592:	4313      	orrs	r3, r2
 8008594:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800859e:	2301      	movs	r3, #1
 80085a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d017      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085ae:	4b5d      	ldr	r3, [pc, #372]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085bc:	4959      	ldr	r1, [pc, #356]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085cc:	d101      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80085da:	2301      	movs	r3, #1
 80085dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d017      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085ea:	4b4e      	ldr	r3, [pc, #312]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f8:	494a      	ldr	r1, [pc, #296]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008608:	d101      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008616:	2301      	movs	r3, #1
 8008618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008626:	2301      	movs	r3, #1
 8008628:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 808b 	beq.w	800874e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008638:	4b3a      	ldr	r3, [pc, #232]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	4a39      	ldr	r2, [pc, #228]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800863e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008642:	6413      	str	r3, [r2, #64]	@ 0x40
 8008644:	4b37      	ldr	r3, [pc, #220]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800864c:	60bb      	str	r3, [r7, #8]
 800864e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008650:	4b35      	ldr	r3, [pc, #212]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a34      	ldr	r2, [pc, #208]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800865a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800865c:	f7fc faa0 	bl	8004ba0 <HAL_GetTick>
 8008660:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008662:	e008      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008664:	f7fc fa9c 	bl	8004ba0 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b64      	cmp	r3, #100	@ 0x64
 8008670:	d901      	bls.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e357      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008676:	4b2c      	ldr	r3, [pc, #176]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f0      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008682:	4b28      	ldr	r3, [pc, #160]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800868a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d035      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	429a      	cmp	r2, r3
 800869e:	d02e      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086a0:	4b20      	ldr	r3, [pc, #128]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80086c2:	4a18      	ldr	r2, [pc, #96]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086c8:	4b16      	ldr	r3, [pc, #88]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d114      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d4:	f7fc fa64 	bl	8004ba0 <HAL_GetTick>
 80086d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086da:	e00a      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086dc:	f7fc fa60 	bl	8004ba0 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e319      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0ee      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800870a:	d111      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800870c:	4b05      	ldr	r3, [pc, #20]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008718:	4b04      	ldr	r3, [pc, #16]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800871a:	400b      	ands	r3, r1
 800871c:	4901      	ldr	r1, [pc, #4]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]
 8008722:	e00b      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008724:	40023800 	.word	0x40023800
 8008728:	40007000 	.word	0x40007000
 800872c:	0ffffcff 	.word	0x0ffffcff
 8008730:	4baa      	ldr	r3, [pc, #680]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4aa9      	ldr	r2, [pc, #676]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008736:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800873a:	6093      	str	r3, [r2, #8]
 800873c:	4ba7      	ldr	r3, [pc, #668]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800873e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008748:	49a4      	ldr	r1, [pc, #656]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800874a:	4313      	orrs	r3, r2
 800874c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0310 	and.w	r3, r3, #16
 8008756:	2b00      	cmp	r3, #0
 8008758:	d010      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800875a:	4ba0      	ldr	r3, [pc, #640]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800875c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008760:	4a9e      	ldr	r2, [pc, #632]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008766:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800876a:	4b9c      	ldr	r3, [pc, #624]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008774:	4999      	ldr	r1, [pc, #612]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008776:	4313      	orrs	r3, r2
 8008778:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008788:	4b94      	ldr	r3, [pc, #592]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800878a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800878e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008796:	4991      	ldr	r1, [pc, #580]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008798:	4313      	orrs	r3, r2
 800879a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80087aa:	4b8c      	ldr	r3, [pc, #560]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087b8:	4988      	ldr	r1, [pc, #544]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087cc:	4b83      	ldr	r3, [pc, #524]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087da:	4980      	ldr	r1, [pc, #512]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087ee:	4b7b      	ldr	r3, [pc, #492]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087fc:	4977      	ldr	r1, [pc, #476]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008810:	4b72      	ldr	r3, [pc, #456]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008816:	f023 0203 	bic.w	r2, r3, #3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881e:	496f      	ldr	r1, [pc, #444]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008820:	4313      	orrs	r3, r2
 8008822:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008832:	4b6a      	ldr	r3, [pc, #424]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008838:	f023 020c 	bic.w	r2, r3, #12
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008840:	4966      	ldr	r1, [pc, #408]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008842:	4313      	orrs	r3, r2
 8008844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008854:	4b61      	ldr	r3, [pc, #388]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800885a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008862:	495e      	ldr	r1, [pc, #376]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008864:	4313      	orrs	r3, r2
 8008866:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008876:	4b59      	ldr	r3, [pc, #356]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008884:	4955      	ldr	r1, [pc, #340]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008886:	4313      	orrs	r3, r2
 8008888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008898:	4b50      	ldr	r3, [pc, #320]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800889a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800889e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a6:	494d      	ldr	r1, [pc, #308]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80088ba:	4b48      	ldr	r3, [pc, #288]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088c8:	4944      	ldr	r1, [pc, #272]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80088dc:	4b3f      	ldr	r3, [pc, #252]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ea:	493c      	ldr	r1, [pc, #240]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80088fe:	4b37      	ldr	r3, [pc, #220]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008904:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800890c:	4933      	ldr	r1, [pc, #204]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008920:	4b2e      	ldr	r3, [pc, #184]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008926:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800892e:	492b      	ldr	r1, [pc, #172]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d011      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008942:	4b26      	ldr	r3, [pc, #152]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008948:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008950:	4922      	ldr	r1, [pc, #136]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800895c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008960:	d101      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008962:	2301      	movs	r3, #1
 8008964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008972:	2301      	movs	r3, #1
 8008974:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008982:	4b16      	ldr	r3, [pc, #88]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008988:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008990:	4912      	ldr	r1, [pc, #72]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80089a4:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b4:	4909      	ldr	r1, [pc, #36]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d006      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80d9 	beq.w	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80089d0:	4b02      	ldr	r3, [pc, #8]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a01      	ldr	r2, [pc, #4]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089da:	e001      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80089dc:	40023800 	.word	0x40023800
 80089e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e2:	f7fc f8dd 	bl	8004ba0 <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089e8:	e008      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089ea:	f7fc f8d9 	bl	8004ba0 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b64      	cmp	r3, #100	@ 0x64
 80089f6:	d901      	bls.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e194      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089fc:	4b6c      	ldr	r3, [pc, #432]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1f0      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d021      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11d      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a1c:	4b64      	ldr	r3, [pc, #400]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a22:	0c1b      	lsrs	r3, r3, #16
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a2a:	4b61      	ldr	r3, [pc, #388]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a30:	0e1b      	lsrs	r3, r3, #24
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	019a      	lsls	r2, r3, #6
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	431a      	orrs	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	061b      	lsls	r3, r3, #24
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	071b      	lsls	r3, r3, #28
 8008a50:	4957      	ldr	r1, [pc, #348]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a6c:	d00a      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d02e      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a82:	d129      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a84:	4b4a      	ldr	r3, [pc, #296]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a8a:	0c1b      	lsrs	r3, r3, #16
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a92:	4b47      	ldr	r3, [pc, #284]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a98:	0f1b      	lsrs	r3, r3, #28
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	019a      	lsls	r2, r3, #6
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	041b      	lsls	r3, r3, #16
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	061b      	lsls	r3, r3, #24
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	071b      	lsls	r3, r3, #28
 8008ab8:	493d      	ldr	r1, [pc, #244]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ac6:	f023 021f 	bic.w	r2, r3, #31
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4937      	ldr	r1, [pc, #220]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01d      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008ae4:	4b32      	ldr	r3, [pc, #200]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aea:	0e1b      	lsrs	r3, r3, #24
 8008aec:	f003 030f 	and.w	r3, r3, #15
 8008af0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008af2:	4b2f      	ldr	r3, [pc, #188]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af8:	0f1b      	lsrs	r3, r3, #28
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	019a      	lsls	r2, r3, #6
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	041b      	lsls	r3, r3, #16
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	061b      	lsls	r3, r3, #24
 8008b12:	431a      	orrs	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	071b      	lsls	r3, r3, #28
 8008b18:	4925      	ldr	r1, [pc, #148]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d011      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	019a      	lsls	r2, r3, #6
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	061b      	lsls	r3, r3, #24
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	071b      	lsls	r3, r3, #28
 8008b48:	4919      	ldr	r1, [pc, #100]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b50:	4b17      	ldr	r3, [pc, #92]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a16      	ldr	r2, [pc, #88]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b5c:	f7fc f820 	bl	8004ba0 <HAL_GetTick>
 8008b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b62:	e008      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b64:	f7fc f81c 	bl	8004ba0 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b64      	cmp	r3, #100	@ 0x64
 8008b70:	d901      	bls.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e0d7      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b76:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f0      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	f040 80cd 	bne.w	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008b8a:	4b09      	ldr	r3, [pc, #36]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a08      	ldr	r2, [pc, #32]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b96:	f7fc f803 	bl	8004ba0 <HAL_GetTick>
 8008b9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b9c:	e00a      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b9e:	f7fb ffff 	bl	8004ba0 <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	2b64      	cmp	r3, #100	@ 0x64
 8008baa:	d903      	bls.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e0ba      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008bb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc0:	d0ed      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d02e      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d12a      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bea:	4b51      	ldr	r3, [pc, #324]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf0:	0c1b      	lsrs	r3, r3, #16
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfe:	0f1b      	lsrs	r3, r3, #28
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	019a      	lsls	r2, r3, #6
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	041b      	lsls	r3, r3, #16
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	061b      	lsls	r3, r3, #24
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	071b      	lsls	r3, r3, #28
 8008c1e:	4944      	ldr	r1, [pc, #272]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c26:	4b42      	ldr	r3, [pc, #264]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c34:	3b01      	subs	r3, #1
 8008c36:	021b      	lsls	r3, r3, #8
 8008c38:	493d      	ldr	r1, [pc, #244]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d022      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c54:	d11d      	bne.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c56:	4b36      	ldr	r3, [pc, #216]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c5c:	0e1b      	lsrs	r3, r3, #24
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c64:	4b32      	ldr	r3, [pc, #200]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6a:	0f1b      	lsrs	r3, r3, #28
 8008c6c:	f003 0307 	and.w	r3, r3, #7
 8008c70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	019a      	lsls	r2, r3, #6
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	041b      	lsls	r3, r3, #16
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	061b      	lsls	r3, r3, #24
 8008c84:	431a      	orrs	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	071b      	lsls	r3, r3, #28
 8008c8a:	4929      	ldr	r1, [pc, #164]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d028      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c9e:	4b24      	ldr	r3, [pc, #144]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca4:	0e1b      	lsrs	r3, r3, #24
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008cac:	4b20      	ldr	r3, [pc, #128]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb2:	0c1b      	lsrs	r3, r3, #16
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	019a      	lsls	r2, r3, #6
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	041b      	lsls	r3, r3, #16
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	061b      	lsls	r3, r3, #24
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	071b      	lsls	r3, r3, #28
 8008cd2:	4917      	ldr	r1, [pc, #92]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008cda:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ce0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce8:	4911      	ldr	r1, [pc, #68]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cfc:	f7fb ff50 	bl	8004ba0 <HAL_GetTick>
 8008d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d02:	e008      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d04:	f7fb ff4c 	bl	8004ba0 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b64      	cmp	r3, #100	@ 0x64
 8008d10:	d901      	bls.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e007      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d16:	4b06      	ldr	r3, [pc, #24]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d22:	d1ef      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	40023800 	.word	0x40023800

08008d34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e071      	b.n	8008e2e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7f5b      	ldrb	r3, [r3, #29]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7f9 fe36 	bl	80029cc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f003 0310 	and.w	r3, r3, #16
 8008d70:	2b10      	cmp	r3, #16
 8008d72:	d053      	beq.n	8008e1c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	22ca      	movs	r2, #202	@ 0xca
 8008d7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2253      	movs	r2, #83	@ 0x53
 8008d82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fac9 	bl	800931c <RTC_EnterInitMode>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d12a      	bne.n	8008dea <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6899      	ldr	r1, [r3, #8]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b26      	ldr	r3, [pc, #152]	@ (8008e38 <HAL_RTC_Init+0x104>)
 8008da0:	400b      	ands	r3, r1
 8008da2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6899      	ldr	r1, [r3, #8]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68d2      	ldr	r2, [r2, #12]
 8008dca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6919      	ldr	r1, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	041a      	lsls	r2, r3, #16
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fad2 	bl	800938a <RTC_ExitInitMode>
 8008de6:	4603      	mov	r3, r0
 8008de8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d110      	bne.n	8008e12 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0208 	bic.w	r2, r2, #8
 8008dfe:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699a      	ldr	r2, [r3, #24]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	22ff      	movs	r2, #255	@ 0xff
 8008e18:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e1a:	e001      	b.n	8008e20 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d102      	bne.n	8008e2c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	ff8fffbf 	.word	0xff8fffbf

08008e3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e3c:	b590      	push	{r4, r7, lr}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	7f1b      	ldrb	r3, [r3, #28]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_RTC_SetTime+0x1c>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e085      	b.n	8008f64 <HAL_RTC_SetTime+0x128>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2202      	movs	r2, #2
 8008e62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d126      	bne.n	8008eb8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 faa6 	bl	80093d4 <RTC_ByteToBcd2>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fa9f 	bl	80093d4 <RTC_ByteToBcd2>
 8008e96:	4603      	mov	r3, r0
 8008e98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008e9a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	789b      	ldrb	r3, [r3, #2]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fa97 	bl	80093d4 <RTC_ByteToBcd2>
 8008ea6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ea8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	78db      	ldrb	r3, [r3, #3]
 8008eb0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	e018      	b.n	8008eea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ed8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008ede:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	78db      	ldrb	r3, [r3, #3]
 8008ee4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	22ca      	movs	r2, #202	@ 0xca
 8008ef0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2253      	movs	r2, #83	@ 0x53
 8008ef8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fa0e 	bl	800931c <RTC_EnterInitMode>
 8008f00:	4603      	mov	r3, r0
 8008f02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008f04:	7cfb      	ldrb	r3, [r7, #19]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d11e      	bne.n	8008f48 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	6979      	ldr	r1, [r7, #20]
 8008f10:	4b16      	ldr	r3, [pc, #88]	@ (8008f6c <HAL_RTC_SetTime+0x130>)
 8008f12:	400b      	ands	r3, r1
 8008f14:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008f24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6899      	ldr	r1, [r3, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 fa23 	bl	800938a <RTC_ExitInitMode>
 8008f44:	4603      	mov	r3, r0
 8008f46:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008f48:	7cfb      	ldrb	r3, [r7, #19]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	22ff      	movs	r2, #255	@ 0xff
 8008f5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	771a      	strb	r2, [r3, #28]

  return status;
 8008f62:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	371c      	adds	r7, #28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd90      	pop	{r4, r7, pc}
 8008f6c:	007f7f7f 	.word	0x007f7f7f

08008f70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f70:	b590      	push	{r4, r7, lr}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	7f1b      	ldrb	r3, [r3, #28]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_RTC_SetDate+0x1c>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e06f      	b.n	800906c <HAL_RTC_SetDate+0xfc>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10e      	bne.n	8008fbc <HAL_RTC_SetDate+0x4c>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	785b      	ldrb	r3, [r3, #1]
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	785b      	ldrb	r3, [r3, #1]
 8008fae:	f023 0310 	bic.w	r3, r3, #16
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	330a      	adds	r3, #10
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d11c      	bne.n	8008ffc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	78db      	ldrb	r3, [r3, #3]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fa04 	bl	80093d4 <RTC_ByteToBcd2>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f9fd 	bl	80093d4 <RTC_ByteToBcd2>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008fde:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	789b      	ldrb	r3, [r3, #2]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f9f5 	bl	80093d4 <RTC_ByteToBcd2>
 8008fea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e00e      	b.n	800901a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	78db      	ldrb	r3, [r3, #3]
 8009000:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009008:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800900e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009016:	4313      	orrs	r3, r2
 8009018:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	22ca      	movs	r2, #202	@ 0xca
 8009020:	625a      	str	r2, [r3, #36]	@ 0x24
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2253      	movs	r2, #83	@ 0x53
 8009028:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f976 	bl	800931c <RTC_EnterInitMode>
 8009030:	4603      	mov	r3, r0
 8009032:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009034:	7cfb      	ldrb	r3, [r7, #19]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	6979      	ldr	r1, [r7, #20]
 8009040:	4b0c      	ldr	r3, [pc, #48]	@ (8009074 <HAL_RTC_SetDate+0x104>)
 8009042:	400b      	ands	r3, r1
 8009044:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 f99f 	bl	800938a <RTC_ExitInitMode>
 800904c:	4603      	mov	r3, r0
 800904e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009050:	7cfb      	ldrb	r3, [r7, #19]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d102      	bne.n	800905c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	22ff      	movs	r2, #255	@ 0xff
 8009062:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	771a      	strb	r2, [r3, #28]

  return status;
 800906a:	7cfb      	ldrb	r3, [r7, #19]
}
 800906c:	4618      	mov	r0, r3
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	bd90      	pop	{r4, r7, pc}
 8009074:	00ffff3f 	.word	0x00ffff3f

08009078 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009078:	b590      	push	{r4, r7, lr}
 800907a:	b089      	sub	sp, #36	@ 0x24
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	7f1b      	ldrb	r3, [r3, #28]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_RTC_SetAlarm+0x24>
 8009098:	2302      	movs	r3, #2
 800909a:	e113      	b.n	80092c4 <HAL_RTC_SetAlarm+0x24c>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2202      	movs	r2, #2
 80090a6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d137      	bne.n	800911e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2200      	movs	r2, #0
 80090c0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f984 	bl	80093d4 <RTC_ByteToBcd2>
 80090cc:	4603      	mov	r3, r0
 80090ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f97d 	bl	80093d4 <RTC_ByteToBcd2>
 80090da:	4603      	mov	r3, r0
 80090dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	789b      	ldrb	r3, [r3, #2]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 f975 	bl	80093d4 <RTC_ByteToBcd2>
 80090ea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090ec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	78db      	ldrb	r3, [r3, #3]
 80090f4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80090f6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f967 	bl	80093d4 <RTC_ByteToBcd2>
 8009106:	4603      	mov	r3, r0
 8009108:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800910a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009112:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009118:	4313      	orrs	r3, r2
 800911a:	61fb      	str	r3, [r7, #28]
 800911c:	e023      	b.n	8009166 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800913e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009144:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	78db      	ldrb	r3, [r3, #3]
 800914a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800914c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009154:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009156:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800915c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009162:	4313      	orrs	r3, r2
 8009164:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	22ca      	movs	r2, #202	@ 0xca
 8009178:	625a      	str	r2, [r3, #36]	@ 0x24
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2253      	movs	r2, #83	@ 0x53
 8009180:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918a:	d148      	bne.n	800921e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800919a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80091aa:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80091bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091be:	f7fb fcef 	bl	8004ba0 <HAL_GetTick>
 80091c2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80091c4:	e013      	b.n	80091ee <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091c6:	f7fb fceb 	bl	8004ba0 <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091d4:	d90b      	bls.n	80091ee <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	22ff      	movs	r2, #255	@ 0xff
 80091dc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2203      	movs	r2, #3
 80091e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e06a      	b.n	80092c4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0e4      	beq.n	80091c6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	e047      	b.n	80092ae <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800922c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800923c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	b2da      	uxtb	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800924e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009250:	f7fb fca6 	bl	8004ba0 <HAL_GetTick>
 8009254:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009256:	e013      	b.n	8009280 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009258:	f7fb fca2 	bl	8004ba0 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009266:	d90b      	bls.n	8009280 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	22ff      	movs	r2, #255	@ 0xff
 800926e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2203      	movs	r2, #3
 8009274:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e021      	b.n	80092c4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0e4      	beq.n	8009258 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	22ff      	movs	r2, #255	@ 0xff
 80092b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3724      	adds	r7, #36	@ 0x24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd90      	pop	{r4, r7, pc}

080092cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80092e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092e8:	f7fb fc5a 	bl	8004ba0 <HAL_GetTick>
 80092ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092ee:	e009      	b.n	8009304 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092f0:	f7fb fc56 	bl	8004ba0 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092fe:	d901      	bls.n	8009304 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e007      	b.n	8009314 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0ee      	beq.n	80092f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d122      	bne.n	8009380 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009348:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800934a:	f7fb fc29 	bl	8004ba0 <HAL_GetTick>
 800934e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009350:	e00c      	b.n	800936c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009352:	f7fb fc25 	bl	8004ba0 <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009360:	d904      	bls.n	800936c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2204      	movs	r2, #4
 8009366:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009376:	2b00      	cmp	r3, #0
 8009378:	d102      	bne.n	8009380 <RTC_EnterInitMode+0x64>
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d1e8      	bne.n	8009352 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff ff89 	bl	80092cc <HAL_RTC_WaitForSynchro>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d004      	beq.n	80093ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2204      	movs	r2, #4
 80093c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80093e2:	e005      	b.n	80093f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3301      	adds	r3, #1
 80093e8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	3b0a      	subs	r3, #10
 80093ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	2b09      	cmp	r3, #9
 80093f4:	d8f6      	bhi.n	80093e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	4313      	orrs	r3, r2
 8009402:	b2db      	uxtb	r3, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	7f1b      	ldrb	r3, [r3, #28]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009428:	2302      	movs	r3, #2
 800942a:	e050      	b.n	80094ce <HAL_RTCEx_SetTimeStamp+0xbe>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2202      	movs	r2, #2
 8009436:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0206 	bic.w	r2, r2, #6
 8009446:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	430a      	orrs	r2, r1
 8009456:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	4b1f      	ldr	r3, [pc, #124]	@ (80094dc <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009460:	4013      	ands	r3, r2
 8009462:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	22ca      	movs	r2, #202	@ 0xca
 8009472:	625a      	str	r2, [r3, #36]	@ 0x24
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2253      	movs	r2, #83	@ 0x53
 800947a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	b2da      	uxtb	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009494:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	b2da      	uxtb	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80094a6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094b6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	22ff      	movs	r2, #255	@ 0xff
 80094be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2201      	movs	r2, #1
 80094c4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	fffff7f7 	.word	0xfffff7f7

080094e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e025      	b.n	8009540 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d106      	bne.n	800950e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7f7 fb05 	bl	8000b18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3304      	adds	r3, #4
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f001 fa33 	bl	800a98c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	461a      	mov	r2, r3
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	f001 fa87 	bl	800aa44 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800955a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d101      	bne.n	8009566 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009562:	2302      	movs	r3, #2
 8009564:	e021      	b.n	80095aa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d002      	beq.n	8009572 <HAL_SDRAM_SendCommand+0x2a>
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b05      	cmp	r3, #5
 8009570:	d118      	bne.n	80095a4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2202      	movs	r2, #2
 8009576:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	68b9      	ldr	r1, [r7, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fac8 	bl	800ab18 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d104      	bne.n	800959a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2205      	movs	r2, #5
 8009594:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009598:	e006      	b.n	80095a8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095a2:	e001      	b.n	80095a8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e000      	b.n	80095aa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d101      	bne.n	80095cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80095c8:	2302      	movs	r3, #2
 80095ca:	e016      	b.n	80095fa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d10f      	bne.n	80095f8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 faba 	bl	800ab60 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e000      	b.n	80095fa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e09d      	b.n	8009750 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d108      	bne.n	800962e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009624:	d009      	beq.n	800963a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	61da      	str	r2, [r3, #28]
 800962c:	e005      	b.n	800963a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7f9 fa25 	bl	8002aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009670:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800967a:	d902      	bls.n	8009682 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	e002      	b.n	8009688 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009686:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009690:	d007      	beq.n	80096a2 <HAL_SPI_Init+0xa0>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800969a:	d002      	beq.n	80096a2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e4:	ea42 0103 	orr.w	r1, r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	f003 0204 	and.w	r2, r3, #4
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009706:	f003 0310 	and.w	r3, r3, #16
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009710:	f003 0308 	and.w	r3, r3, #8
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800971e:	ea42 0103 	orr.w	r1, r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	430a      	orrs	r2, r1
 800972e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69da      	ldr	r2, [r3, #28]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800973e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e049      	b.n	80097fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d106      	bne.n	8009784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7fa ff92 	bl	80046a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3304      	adds	r3, #4
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f000 fac0 	bl	8009d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b01      	cmp	r3, #1
 800981a:	d001      	beq.n	8009820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e054      	b.n	80098ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2202      	movs	r2, #2
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a26      	ldr	r2, [pc, #152]	@ (80098d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d022      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x80>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800984a:	d01d      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x80>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a22      	ldr	r2, [pc, #136]	@ (80098dc <HAL_TIM_Base_Start_IT+0xd4>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d018      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x80>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a21      	ldr	r2, [pc, #132]	@ (80098e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d013      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x80>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a1f      	ldr	r2, [pc, #124]	@ (80098e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00e      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x80>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a1e      	ldr	r2, [pc, #120]	@ (80098e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d009      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x80>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a1c      	ldr	r2, [pc, #112]	@ (80098ec <HAL_TIM_Base_Start_IT+0xe4>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d004      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x80>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a1b      	ldr	r2, [pc, #108]	@ (80098f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d115      	bne.n	80098b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689a      	ldr	r2, [r3, #8]
 800988e:	4b19      	ldr	r3, [pc, #100]	@ (80098f4 <HAL_TIM_Base_Start_IT+0xec>)
 8009890:	4013      	ands	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b06      	cmp	r3, #6
 8009898:	d015      	beq.n	80098c6 <HAL_TIM_Base_Start_IT+0xbe>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098a0:	d011      	beq.n	80098c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f042 0201 	orr.w	r2, r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b2:	e008      	b.n	80098c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0201 	orr.w	r2, r2, #1
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	e000      	b.n	80098c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40010000 	.word	0x40010000
 80098dc:	40000400 	.word	0x40000400
 80098e0:	40000800 	.word	0x40000800
 80098e4:	40000c00 	.word	0x40000c00
 80098e8:	40010400 	.word	0x40010400
 80098ec:	40014000 	.word	0x40014000
 80098f0:	40001800 	.word	0x40001800
 80098f4:	00010007 	.word	0x00010007

080098f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b02      	cmp	r3, #2
 800990c:	d122      	bne.n	8009954 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f003 0302 	and.w	r3, r3, #2
 8009918:	2b02      	cmp	r3, #2
 800991a:	d11b      	bne.n	8009954 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f06f 0202 	mvn.w	r2, #2
 8009924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f9d0 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 8009940:	e005      	b.n	800994e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9c2 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f9d3 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f003 0304 	and.w	r3, r3, #4
 800995e:	2b04      	cmp	r3, #4
 8009960:	d122      	bne.n	80099a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b04      	cmp	r3, #4
 800996e:	d11b      	bne.n	80099a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f06f 0204 	mvn.w	r2, #4
 8009978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2202      	movs	r2, #2
 800997e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f9a6 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 8009994:	e005      	b.n	80099a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f998 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f9a9 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0308 	and.w	r3, r3, #8
 80099b2:	2b08      	cmp	r3, #8
 80099b4:	d122      	bne.n	80099fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f003 0308 	and.w	r3, r3, #8
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d11b      	bne.n	80099fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f06f 0208 	mvn.w	r2, #8
 80099cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2204      	movs	r2, #4
 80099d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f97c 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 80099e8:	e005      	b.n	80099f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f96e 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f97f 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0310 	and.w	r3, r3, #16
 8009a06:	2b10      	cmp	r3, #16
 8009a08:	d122      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d11b      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f06f 0210 	mvn.w	r2, #16
 8009a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2208      	movs	r2, #8
 8009a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f952 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 8009a3c:	e005      	b.n	8009a4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f944 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f955 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d10e      	bne.n	8009a7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d107      	bne.n	8009a7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f06f 0201 	mvn.w	r2, #1
 8009a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7f8 feec 	bl	8002854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a86:	2b80      	cmp	r3, #128	@ 0x80
 8009a88:	d10e      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a94:	2b80      	cmp	r3, #128	@ 0x80
 8009a96:	d107      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fb0c 	bl	800a0c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ab6:	d10e      	bne.n	8009ad6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ac2:	2b80      	cmp	r3, #128	@ 0x80
 8009ac4:	d107      	bne.n	8009ad6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 faff 	bl	800a0d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae0:	2b40      	cmp	r3, #64	@ 0x40
 8009ae2:	d10e      	bne.n	8009b02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aee:	2b40      	cmp	r3, #64	@ 0x40
 8009af0:	d107      	bne.n	8009b02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f903 	bl	8009d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d10e      	bne.n	8009b2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d107      	bne.n	8009b2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f06f 0220 	mvn.w	r2, #32
 8009b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fabf 	bl	800a0ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b2e:	bf00      	nop
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d101      	bne.n	8009b54 <HAL_TIM_ConfigClockSource+0x1c>
 8009b50:	2302      	movs	r3, #2
 8009b52:	e0b4      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x186>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	4b56      	ldr	r3, [pc, #344]	@ (8009cc8 <HAL_TIM_ConfigClockSource+0x190>)
 8009b70:	4013      	ands	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b8c:	d03e      	beq.n	8009c0c <HAL_TIM_ConfigClockSource+0xd4>
 8009b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b92:	f200 8087 	bhi.w	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b9a:	f000 8086 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x172>
 8009b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ba2:	d87f      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba4:	2b70      	cmp	r3, #112	@ 0x70
 8009ba6:	d01a      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0xa6>
 8009ba8:	2b70      	cmp	r3, #112	@ 0x70
 8009baa:	d87b      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bac:	2b60      	cmp	r3, #96	@ 0x60
 8009bae:	d050      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0x11a>
 8009bb0:	2b60      	cmp	r3, #96	@ 0x60
 8009bb2:	d877      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb4:	2b50      	cmp	r3, #80	@ 0x50
 8009bb6:	d03c      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0xfa>
 8009bb8:	2b50      	cmp	r3, #80	@ 0x50
 8009bba:	d873      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bbc:	2b40      	cmp	r3, #64	@ 0x40
 8009bbe:	d058      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0x13a>
 8009bc0:	2b40      	cmp	r3, #64	@ 0x40
 8009bc2:	d86f      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc4:	2b30      	cmp	r3, #48	@ 0x30
 8009bc6:	d064      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x15a>
 8009bc8:	2b30      	cmp	r3, #48	@ 0x30
 8009bca:	d86b      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d060      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x15a>
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	d867      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d05c      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x15a>
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d05a      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x15a>
 8009bdc:	e062      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bee:	f000 f9af 	bl	8009f50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	609a      	str	r2, [r3, #8]
      break;
 8009c0a:	e04f      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c1c:	f000 f998 	bl	8009f50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689a      	ldr	r2, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c2e:	609a      	str	r2, [r3, #8]
      break;
 8009c30:	e03c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f000 f90c 	bl	8009e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2150      	movs	r1, #80	@ 0x50
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f965 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 8009c50:	e02c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f000 f92b 	bl	8009eba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2160      	movs	r1, #96	@ 0x60
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 f955 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 8009c70:	e01c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f000 f8ec 	bl	8009e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2140      	movs	r1, #64	@ 0x40
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 f945 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 8009c90:	e00c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f000 f93c 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 8009ca2:	e003      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca8:	e000      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	fffeff88 	.word	0xfffeff88

08009ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a40      	ldr	r2, [pc, #256]	@ (8009e30 <TIM_Base_SetConfig+0x114>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d013      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d3a:	d00f      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8009e34 <TIM_Base_SetConfig+0x118>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00b      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a3c      	ldr	r2, [pc, #240]	@ (8009e38 <TIM_Base_SetConfig+0x11c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d007      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8009e3c <TIM_Base_SetConfig+0x120>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a3a      	ldr	r2, [pc, #232]	@ (8009e40 <TIM_Base_SetConfig+0x124>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d108      	bne.n	8009d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a2f      	ldr	r2, [pc, #188]	@ (8009e30 <TIM_Base_SetConfig+0x114>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d02b      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d7c:	d027      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2c      	ldr	r2, [pc, #176]	@ (8009e34 <TIM_Base_SetConfig+0x118>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d023      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a2b      	ldr	r2, [pc, #172]	@ (8009e38 <TIM_Base_SetConfig+0x11c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d01f      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a2a      	ldr	r2, [pc, #168]	@ (8009e3c <TIM_Base_SetConfig+0x120>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d01b      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a29      	ldr	r2, [pc, #164]	@ (8009e40 <TIM_Base_SetConfig+0x124>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d017      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a28      	ldr	r2, [pc, #160]	@ (8009e44 <TIM_Base_SetConfig+0x128>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d013      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a27      	ldr	r2, [pc, #156]	@ (8009e48 <TIM_Base_SetConfig+0x12c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00f      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a26      	ldr	r2, [pc, #152]	@ (8009e4c <TIM_Base_SetConfig+0x130>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d00b      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a25      	ldr	r2, [pc, #148]	@ (8009e50 <TIM_Base_SetConfig+0x134>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d007      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a24      	ldr	r2, [pc, #144]	@ (8009e54 <TIM_Base_SetConfig+0x138>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d003      	beq.n	8009dce <TIM_Base_SetConfig+0xb2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a23      	ldr	r2, [pc, #140]	@ (8009e58 <TIM_Base_SetConfig+0x13c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d108      	bne.n	8009de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a0a      	ldr	r2, [pc, #40]	@ (8009e30 <TIM_Base_SetConfig+0x114>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d003      	beq.n	8009e14 <TIM_Base_SetConfig+0xf8>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8009e40 <TIM_Base_SetConfig+0x124>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d103      	bne.n	8009e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	615a      	str	r2, [r3, #20]
}
 8009e22:	bf00      	nop
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	40010000 	.word	0x40010000
 8009e34:	40000400 	.word	0x40000400
 8009e38:	40000800 	.word	0x40000800
 8009e3c:	40000c00 	.word	0x40000c00
 8009e40:	40010400 	.word	0x40010400
 8009e44:	40014000 	.word	0x40014000
 8009e48:	40014400 	.word	0x40014400
 8009e4c:	40014800 	.word	0x40014800
 8009e50:	40001800 	.word	0x40001800
 8009e54:	40001c00 	.word	0x40001c00
 8009e58:	40002000 	.word	0x40002000

08009e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f023 0201 	bic.w	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	011b      	lsls	r3, r3, #4
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f023 030a 	bic.w	r3, r3, #10
 8009e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	621a      	str	r2, [r3, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b087      	sub	sp, #28
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f023 0210 	bic.w	r2, r3, #16
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	031b      	lsls	r3, r3, #12
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	621a      	str	r2, [r3, #32]
}
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	f043 0307 	orr.w	r3, r3, #7
 8009f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	609a      	str	r2, [r3, #8]
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	021a      	lsls	r2, r3, #8
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	431a      	orrs	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	609a      	str	r2, [r3, #8]
}
 8009f84:	bf00      	nop
 8009f86:	371c      	adds	r7, #28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e06d      	b.n	800a084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a30      	ldr	r2, [pc, #192]	@ (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a2f      	ldr	r2, [pc, #188]	@ (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d108      	bne.n	8009fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009fe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a20      	ldr	r2, [pc, #128]	@ (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d022      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a01a:	d01d      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1d      	ldr	r2, [pc, #116]	@ (800a098 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d018      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a1c      	ldr	r2, [pc, #112]	@ (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d013      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a1a      	ldr	r2, [pc, #104]	@ (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d00e      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a15      	ldr	r2, [pc, #84]	@ (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d009      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a16      	ldr	r2, [pc, #88]	@ (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d004      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a15      	ldr	r2, [pc, #84]	@ (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d10c      	bne.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a05e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	4313      	orrs	r3, r2
 800a068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	40010000 	.word	0x40010000
 800a094:	40010400 	.word	0x40010400
 800a098:	40000400 	.word	0x40000400
 800a09c:	40000800 	.word	0x40000800
 800a0a0:	40000c00 	.word	0x40000c00
 800a0a4:	40014000 	.word	0x40014000
 800a0a8:	40001800 	.word	0x40001800

0800a0ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e040      	b.n	800a17c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7fa fbee 	bl	80048ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2224      	movs	r2, #36	@ 0x24
 800a114:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0201 	bic.w	r2, r2, #1
 800a124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f82c 	bl	800a184 <UART_SetConfig>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e022      	b.n	800a17c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa84 	bl	800a64c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0201 	orr.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fb0b 	bl	800a790 <UART_CheckIdleState>
 800a17a:	4603      	mov	r3, r0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689a      	ldr	r2, [r3, #8]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4ba6      	ldr	r3, [pc, #664]	@ (800a448 <UART_SetConfig+0x2c4>)
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	6979      	ldr	r1, [r7, #20]
 800a1b8:	430b      	orrs	r3, r1
 800a1ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a94      	ldr	r2, [pc, #592]	@ (800a44c <UART_SetConfig+0x2c8>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d120      	bne.n	800a242 <UART_SetConfig+0xbe>
 800a200:	4b93      	ldr	r3, [pc, #588]	@ (800a450 <UART_SetConfig+0x2cc>)
 800a202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d816      	bhi.n	800a23c <UART_SetConfig+0xb8>
 800a20e:	a201      	add	r2, pc, #4	@ (adr r2, 800a214 <UART_SetConfig+0x90>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a225 	.word	0x0800a225
 800a218:	0800a231 	.word	0x0800a231
 800a21c:	0800a22b 	.word	0x0800a22b
 800a220:	0800a237 	.word	0x0800a237
 800a224:	2301      	movs	r3, #1
 800a226:	77fb      	strb	r3, [r7, #31]
 800a228:	e150      	b.n	800a4cc <UART_SetConfig+0x348>
 800a22a:	2302      	movs	r3, #2
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e14d      	b.n	800a4cc <UART_SetConfig+0x348>
 800a230:	2304      	movs	r3, #4
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e14a      	b.n	800a4cc <UART_SetConfig+0x348>
 800a236:	2308      	movs	r3, #8
 800a238:	77fb      	strb	r3, [r7, #31]
 800a23a:	e147      	b.n	800a4cc <UART_SetConfig+0x348>
 800a23c:	2310      	movs	r3, #16
 800a23e:	77fb      	strb	r3, [r7, #31]
 800a240:	e144      	b.n	800a4cc <UART_SetConfig+0x348>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a83      	ldr	r2, [pc, #524]	@ (800a454 <UART_SetConfig+0x2d0>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d132      	bne.n	800a2b2 <UART_SetConfig+0x12e>
 800a24c:	4b80      	ldr	r3, [pc, #512]	@ (800a450 <UART_SetConfig+0x2cc>)
 800a24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a252:	f003 030c 	and.w	r3, r3, #12
 800a256:	2b0c      	cmp	r3, #12
 800a258:	d828      	bhi.n	800a2ac <UART_SetConfig+0x128>
 800a25a:	a201      	add	r2, pc, #4	@ (adr r2, 800a260 <UART_SetConfig+0xdc>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a295 	.word	0x0800a295
 800a264:	0800a2ad 	.word	0x0800a2ad
 800a268:	0800a2ad 	.word	0x0800a2ad
 800a26c:	0800a2ad 	.word	0x0800a2ad
 800a270:	0800a2a1 	.word	0x0800a2a1
 800a274:	0800a2ad 	.word	0x0800a2ad
 800a278:	0800a2ad 	.word	0x0800a2ad
 800a27c:	0800a2ad 	.word	0x0800a2ad
 800a280:	0800a29b 	.word	0x0800a29b
 800a284:	0800a2ad 	.word	0x0800a2ad
 800a288:	0800a2ad 	.word	0x0800a2ad
 800a28c:	0800a2ad 	.word	0x0800a2ad
 800a290:	0800a2a7 	.word	0x0800a2a7
 800a294:	2300      	movs	r3, #0
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	e118      	b.n	800a4cc <UART_SetConfig+0x348>
 800a29a:	2302      	movs	r3, #2
 800a29c:	77fb      	strb	r3, [r7, #31]
 800a29e:	e115      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e112      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	77fb      	strb	r3, [r7, #31]
 800a2aa:	e10f      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	77fb      	strb	r3, [r7, #31]
 800a2b0:	e10c      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a68      	ldr	r2, [pc, #416]	@ (800a458 <UART_SetConfig+0x2d4>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d120      	bne.n	800a2fe <UART_SetConfig+0x17a>
 800a2bc:	4b64      	ldr	r3, [pc, #400]	@ (800a450 <UART_SetConfig+0x2cc>)
 800a2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a2c6:	2b30      	cmp	r3, #48	@ 0x30
 800a2c8:	d013      	beq.n	800a2f2 <UART_SetConfig+0x16e>
 800a2ca:	2b30      	cmp	r3, #48	@ 0x30
 800a2cc:	d814      	bhi.n	800a2f8 <UART_SetConfig+0x174>
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	d009      	beq.n	800a2e6 <UART_SetConfig+0x162>
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d810      	bhi.n	800a2f8 <UART_SetConfig+0x174>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <UART_SetConfig+0x15c>
 800a2da:	2b10      	cmp	r3, #16
 800a2dc:	d006      	beq.n	800a2ec <UART_SetConfig+0x168>
 800a2de:	e00b      	b.n	800a2f8 <UART_SetConfig+0x174>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	77fb      	strb	r3, [r7, #31]
 800a2e4:	e0f2      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	77fb      	strb	r3, [r7, #31]
 800a2ea:	e0ef      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2ec:	2304      	movs	r3, #4
 800a2ee:	77fb      	strb	r3, [r7, #31]
 800a2f0:	e0ec      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2f2:	2308      	movs	r3, #8
 800a2f4:	77fb      	strb	r3, [r7, #31]
 800a2f6:	e0e9      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	77fb      	strb	r3, [r7, #31]
 800a2fc:	e0e6      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a56      	ldr	r2, [pc, #344]	@ (800a45c <UART_SetConfig+0x2d8>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d120      	bne.n	800a34a <UART_SetConfig+0x1c6>
 800a308:	4b51      	ldr	r3, [pc, #324]	@ (800a450 <UART_SetConfig+0x2cc>)
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a30e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a312:	2bc0      	cmp	r3, #192	@ 0xc0
 800a314:	d013      	beq.n	800a33e <UART_SetConfig+0x1ba>
 800a316:	2bc0      	cmp	r3, #192	@ 0xc0
 800a318:	d814      	bhi.n	800a344 <UART_SetConfig+0x1c0>
 800a31a:	2b80      	cmp	r3, #128	@ 0x80
 800a31c:	d009      	beq.n	800a332 <UART_SetConfig+0x1ae>
 800a31e:	2b80      	cmp	r3, #128	@ 0x80
 800a320:	d810      	bhi.n	800a344 <UART_SetConfig+0x1c0>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <UART_SetConfig+0x1a8>
 800a326:	2b40      	cmp	r3, #64	@ 0x40
 800a328:	d006      	beq.n	800a338 <UART_SetConfig+0x1b4>
 800a32a:	e00b      	b.n	800a344 <UART_SetConfig+0x1c0>
 800a32c:	2300      	movs	r3, #0
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e0cc      	b.n	800a4cc <UART_SetConfig+0x348>
 800a332:	2302      	movs	r3, #2
 800a334:	77fb      	strb	r3, [r7, #31]
 800a336:	e0c9      	b.n	800a4cc <UART_SetConfig+0x348>
 800a338:	2304      	movs	r3, #4
 800a33a:	77fb      	strb	r3, [r7, #31]
 800a33c:	e0c6      	b.n	800a4cc <UART_SetConfig+0x348>
 800a33e:	2308      	movs	r3, #8
 800a340:	77fb      	strb	r3, [r7, #31]
 800a342:	e0c3      	b.n	800a4cc <UART_SetConfig+0x348>
 800a344:	2310      	movs	r3, #16
 800a346:	77fb      	strb	r3, [r7, #31]
 800a348:	e0c0      	b.n	800a4cc <UART_SetConfig+0x348>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a44      	ldr	r2, [pc, #272]	@ (800a460 <UART_SetConfig+0x2dc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d125      	bne.n	800a3a0 <UART_SetConfig+0x21c>
 800a354:	4b3e      	ldr	r3, [pc, #248]	@ (800a450 <UART_SetConfig+0x2cc>)
 800a356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a35a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a35e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a362:	d017      	beq.n	800a394 <UART_SetConfig+0x210>
 800a364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a368:	d817      	bhi.n	800a39a <UART_SetConfig+0x216>
 800a36a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a36e:	d00b      	beq.n	800a388 <UART_SetConfig+0x204>
 800a370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a374:	d811      	bhi.n	800a39a <UART_SetConfig+0x216>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <UART_SetConfig+0x1fe>
 800a37a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a37e:	d006      	beq.n	800a38e <UART_SetConfig+0x20a>
 800a380:	e00b      	b.n	800a39a <UART_SetConfig+0x216>
 800a382:	2300      	movs	r3, #0
 800a384:	77fb      	strb	r3, [r7, #31]
 800a386:	e0a1      	b.n	800a4cc <UART_SetConfig+0x348>
 800a388:	2302      	movs	r3, #2
 800a38a:	77fb      	strb	r3, [r7, #31]
 800a38c:	e09e      	b.n	800a4cc <UART_SetConfig+0x348>
 800a38e:	2304      	movs	r3, #4
 800a390:	77fb      	strb	r3, [r7, #31]
 800a392:	e09b      	b.n	800a4cc <UART_SetConfig+0x348>
 800a394:	2308      	movs	r3, #8
 800a396:	77fb      	strb	r3, [r7, #31]
 800a398:	e098      	b.n	800a4cc <UART_SetConfig+0x348>
 800a39a:	2310      	movs	r3, #16
 800a39c:	77fb      	strb	r3, [r7, #31]
 800a39e:	e095      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a2f      	ldr	r2, [pc, #188]	@ (800a464 <UART_SetConfig+0x2e0>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d125      	bne.n	800a3f6 <UART_SetConfig+0x272>
 800a3aa:	4b29      	ldr	r3, [pc, #164]	@ (800a450 <UART_SetConfig+0x2cc>)
 800a3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a3b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3b8:	d017      	beq.n	800a3ea <UART_SetConfig+0x266>
 800a3ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3be:	d817      	bhi.n	800a3f0 <UART_SetConfig+0x26c>
 800a3c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3c4:	d00b      	beq.n	800a3de <UART_SetConfig+0x25a>
 800a3c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3ca:	d811      	bhi.n	800a3f0 <UART_SetConfig+0x26c>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <UART_SetConfig+0x254>
 800a3d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3d4:	d006      	beq.n	800a3e4 <UART_SetConfig+0x260>
 800a3d6:	e00b      	b.n	800a3f0 <UART_SetConfig+0x26c>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	77fb      	strb	r3, [r7, #31]
 800a3dc:	e076      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3de:	2302      	movs	r3, #2
 800a3e0:	77fb      	strb	r3, [r7, #31]
 800a3e2:	e073      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	77fb      	strb	r3, [r7, #31]
 800a3e8:	e070      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3ea:	2308      	movs	r3, #8
 800a3ec:	77fb      	strb	r3, [r7, #31]
 800a3ee:	e06d      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3f0:	2310      	movs	r3, #16
 800a3f2:	77fb      	strb	r3, [r7, #31]
 800a3f4:	e06a      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a468 <UART_SetConfig+0x2e4>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d138      	bne.n	800a472 <UART_SetConfig+0x2ee>
 800a400:	4b13      	ldr	r3, [pc, #76]	@ (800a450 <UART_SetConfig+0x2cc>)
 800a402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a406:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a40a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a40e:	d017      	beq.n	800a440 <UART_SetConfig+0x2bc>
 800a410:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a414:	d82a      	bhi.n	800a46c <UART_SetConfig+0x2e8>
 800a416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a41a:	d00b      	beq.n	800a434 <UART_SetConfig+0x2b0>
 800a41c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a420:	d824      	bhi.n	800a46c <UART_SetConfig+0x2e8>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <UART_SetConfig+0x2aa>
 800a426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42a:	d006      	beq.n	800a43a <UART_SetConfig+0x2b6>
 800a42c:	e01e      	b.n	800a46c <UART_SetConfig+0x2e8>
 800a42e:	2300      	movs	r3, #0
 800a430:	77fb      	strb	r3, [r7, #31]
 800a432:	e04b      	b.n	800a4cc <UART_SetConfig+0x348>
 800a434:	2302      	movs	r3, #2
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	e048      	b.n	800a4cc <UART_SetConfig+0x348>
 800a43a:	2304      	movs	r3, #4
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	e045      	b.n	800a4cc <UART_SetConfig+0x348>
 800a440:	2308      	movs	r3, #8
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e042      	b.n	800a4cc <UART_SetConfig+0x348>
 800a446:	bf00      	nop
 800a448:	efff69f3 	.word	0xefff69f3
 800a44c:	40011000 	.word	0x40011000
 800a450:	40023800 	.word	0x40023800
 800a454:	40004400 	.word	0x40004400
 800a458:	40004800 	.word	0x40004800
 800a45c:	40004c00 	.word	0x40004c00
 800a460:	40005000 	.word	0x40005000
 800a464:	40011400 	.word	0x40011400
 800a468:	40007800 	.word	0x40007800
 800a46c:	2310      	movs	r3, #16
 800a46e:	77fb      	strb	r3, [r7, #31]
 800a470:	e02c      	b.n	800a4cc <UART_SetConfig+0x348>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a72      	ldr	r2, [pc, #456]	@ (800a640 <UART_SetConfig+0x4bc>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d125      	bne.n	800a4c8 <UART_SetConfig+0x344>
 800a47c:	4b71      	ldr	r3, [pc, #452]	@ (800a644 <UART_SetConfig+0x4c0>)
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a482:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a486:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a48a:	d017      	beq.n	800a4bc <UART_SetConfig+0x338>
 800a48c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a490:	d817      	bhi.n	800a4c2 <UART_SetConfig+0x33e>
 800a492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a496:	d00b      	beq.n	800a4b0 <UART_SetConfig+0x32c>
 800a498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a49c:	d811      	bhi.n	800a4c2 <UART_SetConfig+0x33e>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <UART_SetConfig+0x326>
 800a4a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4a6:	d006      	beq.n	800a4b6 <UART_SetConfig+0x332>
 800a4a8:	e00b      	b.n	800a4c2 <UART_SetConfig+0x33e>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	77fb      	strb	r3, [r7, #31]
 800a4ae:	e00d      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	77fb      	strb	r3, [r7, #31]
 800a4b4:	e00a      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4b6:	2304      	movs	r3, #4
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e007      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	77fb      	strb	r3, [r7, #31]
 800a4c0:	e004      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4c2:	2310      	movs	r3, #16
 800a4c4:	77fb      	strb	r3, [r7, #31]
 800a4c6:	e001      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4d4:	d15b      	bne.n	800a58e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a4d6:	7ffb      	ldrb	r3, [r7, #31]
 800a4d8:	2b08      	cmp	r3, #8
 800a4da:	d828      	bhi.n	800a52e <UART_SetConfig+0x3aa>
 800a4dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e4 <UART_SetConfig+0x360>)
 800a4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e2:	bf00      	nop
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a511 	.word	0x0800a511
 800a4ec:	0800a519 	.word	0x0800a519
 800a4f0:	0800a52f 	.word	0x0800a52f
 800a4f4:	0800a51f 	.word	0x0800a51f
 800a4f8:	0800a52f 	.word	0x0800a52f
 800a4fc:	0800a52f 	.word	0x0800a52f
 800a500:	0800a52f 	.word	0x0800a52f
 800a504:	0800a527 	.word	0x0800a527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a508:	f7fd ffca 	bl	80084a0 <HAL_RCC_GetPCLK1Freq>
 800a50c:	61b8      	str	r0, [r7, #24]
        break;
 800a50e:	e013      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a510:	f7fd ffda 	bl	80084c8 <HAL_RCC_GetPCLK2Freq>
 800a514:	61b8      	str	r0, [r7, #24]
        break;
 800a516:	e00f      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a518:	4b4b      	ldr	r3, [pc, #300]	@ (800a648 <UART_SetConfig+0x4c4>)
 800a51a:	61bb      	str	r3, [r7, #24]
        break;
 800a51c:	e00c      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a51e:	f7fd feed 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 800a522:	61b8      	str	r0, [r7, #24]
        break;
 800a524:	e008      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a52a:	61bb      	str	r3, [r7, #24]
        break;
 800a52c:	e004      	b.n	800a538 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a52e:	2300      	movs	r3, #0
 800a530:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	77bb      	strb	r3, [r7, #30]
        break;
 800a536:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d074      	beq.n	800a628 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	005a      	lsls	r2, r3, #1
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	085b      	lsrs	r3, r3, #1
 800a548:	441a      	add	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	2b0f      	cmp	r3, #15
 800a558:	d916      	bls.n	800a588 <UART_SetConfig+0x404>
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a560:	d212      	bcs.n	800a588 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	b29b      	uxth	r3, r3
 800a566:	f023 030f 	bic.w	r3, r3, #15
 800a56a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	085b      	lsrs	r3, r3, #1
 800a570:	b29b      	uxth	r3, r3
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	b29a      	uxth	r2, r3
 800a578:	89fb      	ldrh	r3, [r7, #14]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	89fa      	ldrh	r2, [r7, #14]
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	e04f      	b.n	800a628 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	77bb      	strb	r3, [r7, #30]
 800a58c:	e04c      	b.n	800a628 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d828      	bhi.n	800a5e6 <UART_SetConfig+0x462>
 800a594:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <UART_SetConfig+0x418>)
 800a596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59a:	bf00      	nop
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c9 	.word	0x0800a5c9
 800a5a4:	0800a5d1 	.word	0x0800a5d1
 800a5a8:	0800a5e7 	.word	0x0800a5e7
 800a5ac:	0800a5d7 	.word	0x0800a5d7
 800a5b0:	0800a5e7 	.word	0x0800a5e7
 800a5b4:	0800a5e7 	.word	0x0800a5e7
 800a5b8:	0800a5e7 	.word	0x0800a5e7
 800a5bc:	0800a5df 	.word	0x0800a5df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5c0:	f7fd ff6e 	bl	80084a0 <HAL_RCC_GetPCLK1Freq>
 800a5c4:	61b8      	str	r0, [r7, #24]
        break;
 800a5c6:	e013      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c8:	f7fd ff7e 	bl	80084c8 <HAL_RCC_GetPCLK2Freq>
 800a5cc:	61b8      	str	r0, [r7, #24]
        break;
 800a5ce:	e00f      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a648 <UART_SetConfig+0x4c4>)
 800a5d2:	61bb      	str	r3, [r7, #24]
        break;
 800a5d4:	e00c      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5d6:	f7fd fe91 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 800a5da:	61b8      	str	r0, [r7, #24]
        break;
 800a5dc:	e008      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5e2:	61bb      	str	r3, [r7, #24]
        break;
 800a5e4:	e004      	b.n	800a5f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	77bb      	strb	r3, [r7, #30]
        break;
 800a5ee:	bf00      	nop
    }

    if (pclk != 0U)
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d018      	beq.n	800a628 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	085a      	lsrs	r2, r3, #1
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	441a      	add	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	fbb2 f3f3 	udiv	r3, r2, r3
 800a608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	2b0f      	cmp	r3, #15
 800a60e:	d909      	bls.n	800a624 <UART_SetConfig+0x4a0>
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a616:	d205      	bcs.n	800a624 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e001      	b.n	800a628 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a634:	7fbb      	ldrb	r3, [r7, #30]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40007c00 	.word	0x40007c00
 800a644:	40023800 	.word	0x40023800
 800a648:	00f42400 	.word	0x00f42400

0800a64c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00a      	beq.n	800a676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00a      	beq.n	800a6ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00a      	beq.n	800a6dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01a      	beq.n	800a762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a74a:	d10a      	bne.n	800a762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af02      	add	r7, sp, #8
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7a0:	f7fa f9fe 	bl	8004ba0 <HAL_GetTick>
 800a7a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10e      	bne.n	800a7d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f81b 	bl	800a7fe <UART_WaitOnFlagUntilTimeout>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e011      	b.n	800a7f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b09c      	sub	sp, #112	@ 0x70
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	603b      	str	r3, [r7, #0]
 800a80a:	4613      	mov	r3, r2
 800a80c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a80e:	e0a7      	b.n	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	f000 80a3 	beq.w	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a81a:	f7fa f9c1 	bl	8004ba0 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a826:	429a      	cmp	r2, r3
 800a828:	d302      	bcc.n	800a830 <UART_WaitOnFlagUntilTimeout+0x32>
 800a82a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d13f      	bne.n	800a8b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a83e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a840:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a844:	667b      	str	r3, [r7, #100]	@ 0x64
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a84e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a850:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a854:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e6      	bne.n	800a830 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3308      	adds	r3, #8
 800a868:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	f023 0301 	bic.w	r3, r3, #1
 800a878:	663b      	str	r3, [r7, #96]	@ 0x60
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3308      	adds	r3, #8
 800a880:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a882:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a884:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e5      	bne.n	800a862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2220      	movs	r2, #32
 800a89a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2220      	movs	r2, #32
 800a8a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e068      	b.n	800a982 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0304 	and.w	r3, r3, #4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d050      	beq.n	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8cc:	d148      	bne.n	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a8ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8f8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e6      	bne.n	800a8d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	613b      	str	r3, [r7, #16]
   return(result);
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f023 0301 	bic.w	r3, r3, #1
 800a920:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a92a:	623a      	str	r2, [r7, #32]
 800a92c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	69f9      	ldr	r1, [r7, #28]
 800a930:	6a3a      	ldr	r2, [r7, #32]
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	61bb      	str	r3, [r7, #24]
   return(result);
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e5      	bne.n	800a90a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2220      	movs	r2, #32
 800a942:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2220      	movs	r2, #32
 800a948:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2220      	movs	r2, #32
 800a950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e010      	b.n	800a982 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	69da      	ldr	r2, [r3, #28]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	4013      	ands	r3, r2
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	bf0c      	ite	eq
 800a970:	2301      	moveq	r3, #1
 800a972:	2300      	movne	r3, #0
 800a974:	b2db      	uxtb	r3, r3
 800a976:	461a      	mov	r2, r3
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	f43f af48 	beq.w	800a810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3770      	adds	r7, #112	@ 0x70
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d121      	bne.n	800a9e2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	4b27      	ldr	r3, [pc, #156]	@ (800aa40 <FMC_SDRAM_Init+0xb4>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	6851      	ldr	r1, [r2, #4]
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	6892      	ldr	r2, [r2, #8]
 800a9ae:	4311      	orrs	r1, r2
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	68d2      	ldr	r2, [r2, #12]
 800a9b4:	4311      	orrs	r1, r2
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	6912      	ldr	r2, [r2, #16]
 800a9ba:	4311      	orrs	r1, r2
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	6952      	ldr	r2, [r2, #20]
 800a9c0:	4311      	orrs	r1, r2
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	6992      	ldr	r2, [r2, #24]
 800a9c6:	4311      	orrs	r1, r2
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	69d2      	ldr	r2, [r2, #28]
 800a9cc:	4311      	orrs	r1, r2
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	6a12      	ldr	r2, [r2, #32]
 800a9d2:	4311      	orrs	r1, r2
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	e026      	b.n	800aa30 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	69d9      	ldr	r1, [r3, #28]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	4319      	orrs	r1, r3
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	4b0e      	ldr	r3, [pc, #56]	@ (800aa40 <FMC_SDRAM_Init+0xb4>)
 800aa06:	4013      	ands	r3, r2
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	6851      	ldr	r1, [r2, #4]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	6892      	ldr	r2, [r2, #8]
 800aa10:	4311      	orrs	r1, r2
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	68d2      	ldr	r2, [r2, #12]
 800aa16:	4311      	orrs	r1, r2
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	6912      	ldr	r2, [r2, #16]
 800aa1c:	4311      	orrs	r1, r2
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	6952      	ldr	r2, [r2, #20]
 800aa22:	4311      	orrs	r1, r2
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	6992      	ldr	r2, [r2, #24]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	ffff8000 	.word	0xffff8000

0800aa44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d128      	bne.n	800aaa8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	1e59      	subs	r1, r3, #1
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	011b      	lsls	r3, r3, #4
 800aa6c:	4319      	orrs	r1, r3
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	4319      	orrs	r1, r3
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	031b      	lsls	r3, r3, #12
 800aa80:	4319      	orrs	r1, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	4319      	orrs	r1, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	051b      	lsls	r3, r3, #20
 800aa94:	4319      	orrs	r1, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	061b      	lsls	r3, r3, #24
 800aa9e:	430b      	orrs	r3, r1
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	609a      	str	r2, [r3, #8]
 800aaa6:	e02d      	b.n	800ab04 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	4b19      	ldr	r3, [pc, #100]	@ (800ab14 <FMC_SDRAM_Timing_Init+0xd0>)
 800aaae:	4013      	ands	r3, r2
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	68d2      	ldr	r2, [r2, #12]
 800aab4:	3a01      	subs	r2, #1
 800aab6:	0311      	lsls	r1, r2, #12
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	6952      	ldr	r2, [r2, #20]
 800aabc:	3a01      	subs	r2, #1
 800aabe:	0512      	lsls	r2, r2, #20
 800aac0:	430a      	orrs	r2, r1
 800aac2:	431a      	orrs	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	1e59      	subs	r1, r3, #1
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	3b01      	subs	r3, #1
 800aadc:	011b      	lsls	r3, r3, #4
 800aade:	4319      	orrs	r1, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	021b      	lsls	r3, r3, #8
 800aae8:	4319      	orrs	r1, r3
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	041b      	lsls	r3, r3, #16
 800aaf2:	4319      	orrs	r1, r3
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	061b      	lsls	r3, r3, #24
 800aafc:	430b      	orrs	r3, r1
 800aafe:	431a      	orrs	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	ff0f0fff 	.word	0xff0f0fff

0800ab18 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	4b0c      	ldr	r3, [pc, #48]	@ (800ab5c <FMC_SDRAM_SendCommand+0x44>)
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	6811      	ldr	r1, [r2, #0]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	6852      	ldr	r2, [r2, #4]
 800ab34:	4311      	orrs	r1, r2
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	6892      	ldr	r2, [r2, #8]
 800ab3a:	3a01      	subs	r2, #1
 800ab3c:	0152      	lsls	r2, r2, #5
 800ab3e:	4311      	orrs	r1, r2
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	68d2      	ldr	r2, [r2, #12]
 800ab44:	0252      	lsls	r2, r2, #9
 800ab46:	430a      	orrs	r2, r1
 800ab48:	431a      	orrs	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	ffc00000 	.word	0xffc00000

0800ab60 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	695a      	ldr	r2, [r3, #20]
 800ab6e:	4b07      	ldr	r3, [pc, #28]	@ (800ab8c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	0052      	lsls	r2, r2, #1
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	ffffc001 	.word	0xffffc001

0800ab90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ab9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aba2:	2b84      	cmp	r3, #132	@ 0x84
 800aba4:	d005      	beq.n	800abb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aba6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	3303      	adds	r3, #3
 800abb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800abb2:	68fb      	ldr	r3, [r7, #12]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800abc4:	f000 faee 	bl	800b1a4 <vTaskStartScheduler>
  
  return osOK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	bd80      	pop	{r7, pc}

0800abce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800abce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd0:	b089      	sub	sp, #36	@ 0x24
 800abd2:	af04      	add	r7, sp, #16
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d020      	beq.n	800ac22 <osThreadCreate+0x54>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d01c      	beq.n	800ac22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685c      	ldr	r4, [r3, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	691e      	ldr	r6, [r3, #16]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff ffc8 	bl	800ab90 <makeFreeRtosPriority>
 800ac00:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac0a:	9202      	str	r2, [sp, #8]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	9100      	str	r1, [sp, #0]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	4632      	mov	r2, r6
 800ac14:	4629      	mov	r1, r5
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f8ed 	bl	800adf6 <xTaskCreateStatic>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	e01c      	b.n	800ac5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685c      	ldr	r4, [r3, #4]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac2e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff ffaa 	bl	800ab90 <makeFreeRtosPriority>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	f107 030c 	add.w	r3, r7, #12
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	9200      	str	r2, [sp, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	4632      	mov	r2, r6
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 f938 	bl	800aec2 <xTaskCreate>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d001      	beq.n	800ac5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e000      	b.n	800ac5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <osDelay+0x16>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	e000      	b.n	800ac7e <osDelay+0x18>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 fa58 	bl	800b134 <vTaskDelay>
  
  return osOK;
 800ac84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b083      	sub	sp, #12
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f103 0208 	add.w	r2, r3, #8
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f04f 32ff 	mov.w	r2, #4294967295
 800aca6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f103 0208 	add.w	r2, r3, #8
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f103 0208 	add.w	r2, r3, #8
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	689a      	ldr	r2, [r3, #8]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	601a      	str	r2, [r3, #0]
}
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad46:	d103      	bne.n	800ad50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	e00c      	b.n	800ad6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3308      	adds	r3, #8
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	e002      	b.n	800ad5e <vListInsert+0x2e>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d2f6      	bcs.n	800ad58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	601a      	str	r2, [r3, #0]
}
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	6892      	ldr	r2, [r2, #8]
 800adb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	6852      	ldr	r2, [r2, #4]
 800adc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d103      	bne.n	800add6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	1e5a      	subs	r2, r3, #1
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b08e      	sub	sp, #56	@ 0x38
 800adfa:	af04      	add	r7, sp, #16
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	607a      	str	r2, [r7, #4]
 800ae02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10d      	bne.n	800ae26 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0e:	b672      	cpsid	i
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	b662      	cpsie	i
 800ae1e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10d      	bne.n	800ae48 <xTaskCreateStatic+0x52>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	b672      	cpsid	i
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	b662      	cpsie	i
 800ae40:	61fb      	str	r3, [r7, #28]
}
 800ae42:	bf00      	nop
 800ae44:	bf00      	nop
 800ae46:	e7fd      	b.n	800ae44 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae48:	2354      	movs	r3, #84	@ 0x54
 800ae4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	2b54      	cmp	r3, #84	@ 0x54
 800ae50:	d00d      	beq.n	800ae6e <xTaskCreateStatic+0x78>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae56:	b672      	cpsid	i
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	b662      	cpsie	i
 800ae66:	61bb      	str	r3, [r7, #24]
}
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	e7fd      	b.n	800ae6a <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d01e      	beq.n	800aeb4 <xTaskCreateStatic+0xbe>
 800ae76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01b      	beq.n	800aeb4 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae84:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	2202      	movs	r2, #2
 800ae8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae94:	9302      	str	r3, [sp, #8]
 800ae96:	f107 0314 	add.w	r3, r7, #20
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f000 f850 	bl	800af4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aeae:	f000 f8d7 	bl	800b060 <prvAddNewTaskToReadyList>
 800aeb2:	e001      	b.n	800aeb8 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aeb8:	697b      	ldr	r3, [r7, #20]
	}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3728      	adds	r7, #40	@ 0x28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b08c      	sub	sp, #48	@ 0x30
 800aec6:	af04      	add	r7, sp, #16
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	4613      	mov	r3, r2
 800aed0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aed2:	88fb      	ldrh	r3, [r7, #6]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 fec8 	bl	800bc6c <pvPortMalloc>
 800aedc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00e      	beq.n	800af02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aee4:	2054      	movs	r0, #84	@ 0x54
 800aee6:	f000 fec1 	bl	800bc6c <pvPortMalloc>
 800aeea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	631a      	str	r2, [r3, #48]	@ 0x30
 800aef8:	e005      	b.n	800af06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aefa:	6978      	ldr	r0, [r7, #20]
 800aefc:	f000 ff84 	bl	800be08 <vPortFree>
 800af00:	e001      	b.n	800af06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d017      	beq.n	800af3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af14:	88fa      	ldrh	r2, [r7, #6]
 800af16:	2300      	movs	r3, #0
 800af18:	9303      	str	r3, [sp, #12]
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	9302      	str	r3, [sp, #8]
 800af1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 f80e 	bl	800af4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af30:	69f8      	ldr	r0, [r7, #28]
 800af32:	f000 f895 	bl	800b060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af36:	2301      	movs	r3, #1
 800af38:	61bb      	str	r3, [r7, #24]
 800af3a:	e002      	b.n	800af42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af3c:	f04f 33ff 	mov.w	r3, #4294967295
 800af40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af42:	69bb      	ldr	r3, [r7, #24]
	}
 800af44:	4618      	mov	r0, r3
 800af46:	3720      	adds	r7, #32
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af64:	440b      	add	r3, r1
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	f023 0307 	bic.w	r3, r3, #7
 800af72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00d      	beq.n	800af9a <prvInitialiseNewTask+0x4e>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af82:	b672      	cpsid	i
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	b662      	cpsie	i
 800af92:	617b      	str	r3, [r7, #20]
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop
 800af98:	e7fd      	b.n	800af96 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d01f      	beq.n	800afe0 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afa0:	2300      	movs	r3, #0
 800afa2:	61fb      	str	r3, [r7, #28]
 800afa4:	e012      	b.n	800afcc <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	4413      	add	r3, r2
 800afac:	7819      	ldrb	r1, [r3, #0]
 800afae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	4413      	add	r3, r2
 800afb4:	3334      	adds	r3, #52	@ 0x34
 800afb6:	460a      	mov	r2, r1
 800afb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d006      	beq.n	800afd4 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	3301      	adds	r3, #1
 800afca:	61fb      	str	r3, [r7, #28]
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	2b0f      	cmp	r3, #15
 800afd0:	d9e9      	bls.n	800afa6 <prvInitialiseNewTask+0x5a>
 800afd2:	e000      	b.n	800afd6 <prvInitialiseNewTask+0x8a>
			{
				break;
 800afd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800afde:	e003      	b.n	800afe8 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afea:	2b06      	cmp	r3, #6
 800afec:	d901      	bls.n	800aff2 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afee:	2306      	movs	r3, #6
 800aff0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aff6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800affc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800affe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b000:	2200      	movs	r2, #0
 800b002:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b006:	3304      	adds	r3, #4
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fe60 	bl	800acce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b010:	3318      	adds	r3, #24
 800b012:	4618      	mov	r0, r3
 800b014:	f7ff fe5b 	bl	800acce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b020:	f1c3 0207 	rsb	r2, r3, #7
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b02c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	2200      	movs	r2, #0
 800b032:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	69b8      	ldr	r0, [r7, #24]
 800b042:	f000 fc1b 	bl	800b87c <pxPortInitialiseStack>
 800b046:	4602      	mov	r2, r0
 800b048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b056:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b058:	bf00      	nop
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b068:	f000 fd18 	bl	800ba9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b06c:	4b2a      	ldr	r3, [pc, #168]	@ (800b118 <prvAddNewTaskToReadyList+0xb8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	4a29      	ldr	r2, [pc, #164]	@ (800b118 <prvAddNewTaskToReadyList+0xb8>)
 800b074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b076:	4b29      	ldr	r3, [pc, #164]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b07e:	4a27      	ldr	r2, [pc, #156]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b084:	4b24      	ldr	r3, [pc, #144]	@ (800b118 <prvAddNewTaskToReadyList+0xb8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d110      	bne.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b08c:	f000 fad0 	bl	800b630 <prvInitialiseTaskLists>
 800b090:	e00d      	b.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b092:	4b23      	ldr	r3, [pc, #140]	@ (800b120 <prvAddNewTaskToReadyList+0xc0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d109      	bne.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b09a:	4b20      	ldr	r3, [pc, #128]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d802      	bhi.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b124 <prvAddNewTaskToReadyList+0xc4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b124 <prvAddNewTaskToReadyList+0xc4>)
 800b0b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0bc:	2201      	movs	r2, #1
 800b0be:	409a      	lsls	r2, r3
 800b0c0:	4b19      	ldr	r3, [pc, #100]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	4a18      	ldr	r2, [pc, #96]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4a15      	ldr	r2, [pc, #84]	@ (800b12c <prvAddNewTaskToReadyList+0xcc>)
 800b0d8:	441a      	add	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	f7ff fe01 	bl	800ace8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0e6:	f000 fd0f 	bl	800bb08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b120 <prvAddNewTaskToReadyList+0xc0>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00e      	beq.n	800b110 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d207      	bcs.n	800b110 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b100:	4b0b      	ldr	r3, [pc, #44]	@ (800b130 <prvAddNewTaskToReadyList+0xd0>)
 800b102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20000ed0 	.word	0x20000ed0
 800b11c:	20000dd0 	.word	0x20000dd0
 800b120:	20000edc 	.word	0x20000edc
 800b124:	20000eec 	.word	0x20000eec
 800b128:	20000ed8 	.word	0x20000ed8
 800b12c:	20000dd4 	.word	0x20000dd4
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d01a      	beq.n	800b17c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b146:	4b15      	ldr	r3, [pc, #84]	@ (800b19c <vTaskDelay+0x68>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00d      	beq.n	800b16a <vTaskDelay+0x36>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	b672      	cpsid	i
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	b662      	cpsie	i
 800b162:	60bb      	str	r3, [r7, #8]
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	e7fd      	b.n	800b166 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b16a:	f000 f881 	bl	800b270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b16e:	2100      	movs	r1, #0
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fb1d 	bl	800b7b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b176:	f000 f889 	bl	800b28c <xTaskResumeAll>
 800b17a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d107      	bne.n	800b192 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b182:	4b07      	ldr	r3, [pc, #28]	@ (800b1a0 <vTaskDelay+0x6c>)
 800b184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b192:	bf00      	nop
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20000ef8 	.word	0x20000ef8
 800b1a0:	e000ed04 	.word	0xe000ed04

0800b1a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08a      	sub	sp, #40	@ 0x28
 800b1a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1b2:	463a      	mov	r2, r7
 800b1b4:	1d39      	adds	r1, r7, #4
 800b1b6:	f107 0308 	add.w	r3, r7, #8
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7f5 fcb6 	bl	8000b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	9202      	str	r2, [sp, #8]
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	460a      	mov	r2, r1
 800b1d2:	4921      	ldr	r1, [pc, #132]	@ (800b258 <vTaskStartScheduler+0xb4>)
 800b1d4:	4821      	ldr	r0, [pc, #132]	@ (800b25c <vTaskStartScheduler+0xb8>)
 800b1d6:	f7ff fe0e 	bl	800adf6 <xTaskCreateStatic>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	4a20      	ldr	r2, [pc, #128]	@ (800b260 <vTaskStartScheduler+0xbc>)
 800b1de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1e0:	4b1f      	ldr	r3, [pc, #124]	@ (800b260 <vTaskStartScheduler+0xbc>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	e001      	b.n	800b1f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d118      	bne.n	800b22a <vTaskStartScheduler+0x86>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fc:	b672      	cpsid	i
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	b662      	cpsie	i
 800b20c:	613b      	str	r3, [r7, #16]
}
 800b20e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b210:	4b14      	ldr	r3, [pc, #80]	@ (800b264 <vTaskStartScheduler+0xc0>)
 800b212:	f04f 32ff 	mov.w	r2, #4294967295
 800b216:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b218:	4b13      	ldr	r3, [pc, #76]	@ (800b268 <vTaskStartScheduler+0xc4>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b21e:	4b13      	ldr	r3, [pc, #76]	@ (800b26c <vTaskStartScheduler+0xc8>)
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b224:	f000 fbbc 	bl	800b9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b228:	e011      	b.n	800b24e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b230:	d10d      	bne.n	800b24e <vTaskStartScheduler+0xaa>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b236:	b672      	cpsid	i
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	b662      	cpsie	i
 800b246:	60fb      	str	r3, [r7, #12]
}
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
 800b24c:	e7fd      	b.n	800b24a <vTaskStartScheduler+0xa6>
}
 800b24e:	bf00      	nop
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	0800d4c4 	.word	0x0800d4c4
 800b25c:	0800b601 	.word	0x0800b601
 800b260:	20000ef4 	.word	0x20000ef4
 800b264:	20000ef0 	.word	0x20000ef0
 800b268:	20000edc 	.word	0x20000edc
 800b26c:	20000ed4 	.word	0x20000ed4

0800b270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b270:	b480      	push	{r7}
 800b272:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b274:	4b04      	ldr	r3, [pc, #16]	@ (800b288 <vTaskSuspendAll+0x18>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3301      	adds	r3, #1
 800b27a:	4a03      	ldr	r2, [pc, #12]	@ (800b288 <vTaskSuspendAll+0x18>)
 800b27c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b27e:	bf00      	nop
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	20000ef8 	.word	0x20000ef8

0800b28c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b296:	2300      	movs	r3, #0
 800b298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b29a:	4b43      	ldr	r3, [pc, #268]	@ (800b3a8 <xTaskResumeAll+0x11c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10d      	bne.n	800b2be <xTaskResumeAll+0x32>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	b672      	cpsid	i
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	b662      	cpsie	i
 800b2b6:	603b      	str	r3, [r7, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
 800b2bc:	e7fd      	b.n	800b2ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2be:	f000 fbed 	bl	800ba9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2c2:	4b39      	ldr	r3, [pc, #228]	@ (800b3a8 <xTaskResumeAll+0x11c>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	4a37      	ldr	r2, [pc, #220]	@ (800b3a8 <xTaskResumeAll+0x11c>)
 800b2ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2cc:	4b36      	ldr	r3, [pc, #216]	@ (800b3a8 <xTaskResumeAll+0x11c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d161      	bne.n	800b398 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2d4:	4b35      	ldr	r3, [pc, #212]	@ (800b3ac <xTaskResumeAll+0x120>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d05d      	beq.n	800b398 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2dc:	e02e      	b.n	800b33c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2de:	4b34      	ldr	r3, [pc, #208]	@ (800b3b0 <xTaskResumeAll+0x124>)
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3318      	adds	r3, #24
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff fd59 	bl	800ada2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fd54 	bl	800ada2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fe:	2201      	movs	r2, #1
 800b300:	409a      	lsls	r2, r3
 800b302:	4b2c      	ldr	r3, [pc, #176]	@ (800b3b4 <xTaskResumeAll+0x128>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4313      	orrs	r3, r2
 800b308:	4a2a      	ldr	r2, [pc, #168]	@ (800b3b4 <xTaskResumeAll+0x128>)
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4a27      	ldr	r2, [pc, #156]	@ (800b3b8 <xTaskResumeAll+0x12c>)
 800b31a:	441a      	add	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3304      	adds	r3, #4
 800b320:	4619      	mov	r1, r3
 800b322:	4610      	mov	r0, r2
 800b324:	f7ff fce0 	bl	800ace8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32c:	4b23      	ldr	r3, [pc, #140]	@ (800b3bc <xTaskResumeAll+0x130>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b332:	429a      	cmp	r2, r3
 800b334:	d302      	bcc.n	800b33c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b336:	4b22      	ldr	r3, [pc, #136]	@ (800b3c0 <xTaskResumeAll+0x134>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b33c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3b0 <xTaskResumeAll+0x124>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1cc      	bne.n	800b2de <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b34a:	f000 fa11 	bl	800b770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b34e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3c4 <xTaskResumeAll+0x138>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d010      	beq.n	800b37c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b35a:	f000 f837 	bl	800b3cc <xTaskIncrementTick>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b364:	4b16      	ldr	r3, [pc, #88]	@ (800b3c0 <xTaskResumeAll+0x134>)
 800b366:	2201      	movs	r2, #1
 800b368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1f1      	bne.n	800b35a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b376:	4b13      	ldr	r3, [pc, #76]	@ (800b3c4 <xTaskResumeAll+0x138>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b37c:	4b10      	ldr	r3, [pc, #64]	@ (800b3c0 <xTaskResumeAll+0x134>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b384:	2301      	movs	r3, #1
 800b386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b388:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c8 <xTaskResumeAll+0x13c>)
 800b38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b398:	f000 fbb6 	bl	800bb08 <vPortExitCritical>

	return xAlreadyYielded;
 800b39c:	68bb      	ldr	r3, [r7, #8]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20000ef8 	.word	0x20000ef8
 800b3ac:	20000ed0 	.word	0x20000ed0
 800b3b0:	20000e90 	.word	0x20000e90
 800b3b4:	20000ed8 	.word	0x20000ed8
 800b3b8:	20000dd4 	.word	0x20000dd4
 800b3bc:	20000dd0 	.word	0x20000dd0
 800b3c0:	20000ee4 	.word	0x20000ee4
 800b3c4:	20000ee0 	.word	0x20000ee0
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3d6:	4b50      	ldr	r3, [pc, #320]	@ (800b518 <xTaskIncrementTick+0x14c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f040 808b 	bne.w	800b4f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3e0:	4b4e      	ldr	r3, [pc, #312]	@ (800b51c <xTaskIncrementTick+0x150>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3e8:	4a4c      	ldr	r2, [pc, #304]	@ (800b51c <xTaskIncrementTick+0x150>)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d123      	bne.n	800b43c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3f4:	4b4a      	ldr	r3, [pc, #296]	@ (800b520 <xTaskIncrementTick+0x154>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00d      	beq.n	800b41a <xTaskIncrementTick+0x4e>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b402:	b672      	cpsid	i
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	b662      	cpsie	i
 800b412:	603b      	str	r3, [r7, #0]
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	e7fd      	b.n	800b416 <xTaskIncrementTick+0x4a>
 800b41a:	4b41      	ldr	r3, [pc, #260]	@ (800b520 <xTaskIncrementTick+0x154>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	4b40      	ldr	r3, [pc, #256]	@ (800b524 <xTaskIncrementTick+0x158>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a3e      	ldr	r2, [pc, #248]	@ (800b520 <xTaskIncrementTick+0x154>)
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	4a3e      	ldr	r2, [pc, #248]	@ (800b524 <xTaskIncrementTick+0x158>)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	4b3e      	ldr	r3, [pc, #248]	@ (800b528 <xTaskIncrementTick+0x15c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3301      	adds	r3, #1
 800b434:	4a3c      	ldr	r2, [pc, #240]	@ (800b528 <xTaskIncrementTick+0x15c>)
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	f000 f99a 	bl	800b770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b43c:	4b3b      	ldr	r3, [pc, #236]	@ (800b52c <xTaskIncrementTick+0x160>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	429a      	cmp	r2, r3
 800b444:	d348      	bcc.n	800b4d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b446:	4b36      	ldr	r3, [pc, #216]	@ (800b520 <xTaskIncrementTick+0x154>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d104      	bne.n	800b45a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b450:	4b36      	ldr	r3, [pc, #216]	@ (800b52c <xTaskIncrementTick+0x160>)
 800b452:	f04f 32ff 	mov.w	r2, #4294967295
 800b456:	601a      	str	r2, [r3, #0]
					break;
 800b458:	e03e      	b.n	800b4d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b45a:	4b31      	ldr	r3, [pc, #196]	@ (800b520 <xTaskIncrementTick+0x154>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d203      	bcs.n	800b47a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b472:	4a2e      	ldr	r2, [pc, #184]	@ (800b52c <xTaskIncrementTick+0x160>)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b478:	e02e      	b.n	800b4d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff fc8f 	bl	800ada2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	3318      	adds	r3, #24
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff fc86 	bl	800ada2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49a:	2201      	movs	r2, #1
 800b49c:	409a      	lsls	r2, r3
 800b49e:	4b24      	ldr	r3, [pc, #144]	@ (800b530 <xTaskIncrementTick+0x164>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	4a22      	ldr	r2, [pc, #136]	@ (800b530 <xTaskIncrementTick+0x164>)
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b534 <xTaskIncrementTick+0x168>)
 800b4b6:	441a      	add	r2, r3
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4610      	mov	r0, r2
 800b4c0:	f7ff fc12 	bl	800ace8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b538 <xTaskIncrementTick+0x16c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d3b9      	bcc.n	800b446 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4d6:	e7b6      	b.n	800b446 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4d8:	4b17      	ldr	r3, [pc, #92]	@ (800b538 <xTaskIncrementTick+0x16c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4de:	4915      	ldr	r1, [pc, #84]	@ (800b534 <xTaskIncrementTick+0x168>)
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	440b      	add	r3, r1
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d907      	bls.n	800b500 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	e004      	b.n	800b500 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b4f6:	4b11      	ldr	r3, [pc, #68]	@ (800b53c <xTaskIncrementTick+0x170>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	4a0f      	ldr	r2, [pc, #60]	@ (800b53c <xTaskIncrementTick+0x170>)
 800b4fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b500:	4b0f      	ldr	r3, [pc, #60]	@ (800b540 <xTaskIncrementTick+0x174>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b508:	2301      	movs	r3, #1
 800b50a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b50c:	697b      	ldr	r3, [r7, #20]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20000ef8 	.word	0x20000ef8
 800b51c:	20000ed4 	.word	0x20000ed4
 800b520:	20000e88 	.word	0x20000e88
 800b524:	20000e8c 	.word	0x20000e8c
 800b528:	20000ee8 	.word	0x20000ee8
 800b52c:	20000ef0 	.word	0x20000ef0
 800b530:	20000ed8 	.word	0x20000ed8
 800b534:	20000dd4 	.word	0x20000dd4
 800b538:	20000dd0 	.word	0x20000dd0
 800b53c:	20000ee0 	.word	0x20000ee0
 800b540:	20000ee4 	.word	0x20000ee4

0800b544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b54a:	4b28      	ldr	r3, [pc, #160]	@ (800b5ec <vTaskSwitchContext+0xa8>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b552:	4b27      	ldr	r3, [pc, #156]	@ (800b5f0 <vTaskSwitchContext+0xac>)
 800b554:	2201      	movs	r2, #1
 800b556:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b558:	e042      	b.n	800b5e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b55a:	4b25      	ldr	r3, [pc, #148]	@ (800b5f0 <vTaskSwitchContext+0xac>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b560:	4b24      	ldr	r3, [pc, #144]	@ (800b5f4 <vTaskSwitchContext+0xb0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	fab3 f383 	clz	r3, r3
 800b56c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b56e:	7afb      	ldrb	r3, [r7, #11]
 800b570:	f1c3 031f 	rsb	r3, r3, #31
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	4920      	ldr	r1, [pc, #128]	@ (800b5f8 <vTaskSwitchContext+0xb4>)
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10d      	bne.n	800b5a6 <vTaskSwitchContext+0x62>
	__asm volatile
 800b58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58e:	b672      	cpsid	i
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	b662      	cpsie	i
 800b59e:	607b      	str	r3, [r7, #4]
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <vTaskSwitchContext+0x5e>
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4a11      	ldr	r2, [pc, #68]	@ (800b5f8 <vTaskSwitchContext+0xb4>)
 800b5b2:	4413      	add	r3, r2
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	605a      	str	r2, [r3, #4]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	3308      	adds	r3, #8
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d104      	bne.n	800b5d6 <vTaskSwitchContext+0x92>
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	605a      	str	r2, [r3, #4]
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	4a07      	ldr	r2, [pc, #28]	@ (800b5fc <vTaskSwitchContext+0xb8>)
 800b5de:	6013      	str	r3, [r2, #0]
}
 800b5e0:	bf00      	nop
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	20000ef8 	.word	0x20000ef8
 800b5f0:	20000ee4 	.word	0x20000ee4
 800b5f4:	20000ed8 	.word	0x20000ed8
 800b5f8:	20000dd4 	.word	0x20000dd4
 800b5fc:	20000dd0 	.word	0x20000dd0

0800b600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b608:	f000 f852 	bl	800b6b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b60c:	4b06      	ldr	r3, [pc, #24]	@ (800b628 <prvIdleTask+0x28>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d9f9      	bls.n	800b608 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b614:	4b05      	ldr	r3, [pc, #20]	@ (800b62c <prvIdleTask+0x2c>)
 800b616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b624:	e7f0      	b.n	800b608 <prvIdleTask+0x8>
 800b626:	bf00      	nop
 800b628:	20000dd4 	.word	0x20000dd4
 800b62c:	e000ed04 	.word	0xe000ed04

0800b630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b636:	2300      	movs	r3, #0
 800b638:	607b      	str	r3, [r7, #4]
 800b63a:	e00c      	b.n	800b656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4a12      	ldr	r2, [pc, #72]	@ (800b690 <prvInitialiseTaskLists+0x60>)
 800b648:	4413      	add	r3, r2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7ff fb1f 	bl	800ac8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	3301      	adds	r3, #1
 800b654:	607b      	str	r3, [r7, #4]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b06      	cmp	r3, #6
 800b65a:	d9ef      	bls.n	800b63c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b65c:	480d      	ldr	r0, [pc, #52]	@ (800b694 <prvInitialiseTaskLists+0x64>)
 800b65e:	f7ff fb16 	bl	800ac8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b662:	480d      	ldr	r0, [pc, #52]	@ (800b698 <prvInitialiseTaskLists+0x68>)
 800b664:	f7ff fb13 	bl	800ac8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b668:	480c      	ldr	r0, [pc, #48]	@ (800b69c <prvInitialiseTaskLists+0x6c>)
 800b66a:	f7ff fb10 	bl	800ac8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b66e:	480c      	ldr	r0, [pc, #48]	@ (800b6a0 <prvInitialiseTaskLists+0x70>)
 800b670:	f7ff fb0d 	bl	800ac8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b674:	480b      	ldr	r0, [pc, #44]	@ (800b6a4 <prvInitialiseTaskLists+0x74>)
 800b676:	f7ff fb0a 	bl	800ac8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b67a:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a8 <prvInitialiseTaskLists+0x78>)
 800b67c:	4a05      	ldr	r2, [pc, #20]	@ (800b694 <prvInitialiseTaskLists+0x64>)
 800b67e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b680:	4b0a      	ldr	r3, [pc, #40]	@ (800b6ac <prvInitialiseTaskLists+0x7c>)
 800b682:	4a05      	ldr	r2, [pc, #20]	@ (800b698 <prvInitialiseTaskLists+0x68>)
 800b684:	601a      	str	r2, [r3, #0]
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20000dd4 	.word	0x20000dd4
 800b694:	20000e60 	.word	0x20000e60
 800b698:	20000e74 	.word	0x20000e74
 800b69c:	20000e90 	.word	0x20000e90
 800b6a0:	20000ea4 	.word	0x20000ea4
 800b6a4:	20000ebc 	.word	0x20000ebc
 800b6a8:	20000e88 	.word	0x20000e88
 800b6ac:	20000e8c 	.word	0x20000e8c

0800b6b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6b6:	e019      	b.n	800b6ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6b8:	f000 f9f0 	bl	800ba9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6bc:	4b10      	ldr	r3, [pc, #64]	@ (800b700 <prvCheckTasksWaitingTermination+0x50>)
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff fb6a 	bl	800ada2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b704 <prvCheckTasksWaitingTermination+0x54>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	4a0b      	ldr	r2, [pc, #44]	@ (800b704 <prvCheckTasksWaitingTermination+0x54>)
 800b6d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b708 <prvCheckTasksWaitingTermination+0x58>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	4a0a      	ldr	r2, [pc, #40]	@ (800b708 <prvCheckTasksWaitingTermination+0x58>)
 800b6e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6e2:	f000 fa11 	bl	800bb08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f810 	bl	800b70c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6ec:	4b06      	ldr	r3, [pc, #24]	@ (800b708 <prvCheckTasksWaitingTermination+0x58>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e1      	bne.n	800b6b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20000ea4 	.word	0x20000ea4
 800b704:	20000ed0 	.word	0x20000ed0
 800b708:	20000eb8 	.word	0x20000eb8

0800b70c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d108      	bne.n	800b730 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b722:	4618      	mov	r0, r3
 800b724:	f000 fb70 	bl	800be08 <vPortFree>
				vPortFree( pxTCB );
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fb6d 	bl	800be08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b72e:	e01b      	b.n	800b768 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b736:	2b01      	cmp	r3, #1
 800b738:	d103      	bne.n	800b742 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fb64 	bl	800be08 <vPortFree>
	}
 800b740:	e012      	b.n	800b768 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d00d      	beq.n	800b768 <prvDeleteTCB+0x5c>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b750:	b672      	cpsid	i
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	b662      	cpsie	i
 800b760:	60fb      	str	r3, [r7, #12]
}
 800b762:	bf00      	nop
 800b764:	bf00      	nop
 800b766:	e7fd      	b.n	800b764 <prvDeleteTCB+0x58>
	}
 800b768:	bf00      	nop
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b776:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a8 <prvResetNextTaskUnblockTime+0x38>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d104      	bne.n	800b78a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b780:	4b0a      	ldr	r3, [pc, #40]	@ (800b7ac <prvResetNextTaskUnblockTime+0x3c>)
 800b782:	f04f 32ff 	mov.w	r2, #4294967295
 800b786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b788:	e008      	b.n	800b79c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b78a:	4b07      	ldr	r3, [pc, #28]	@ (800b7a8 <prvResetNextTaskUnblockTime+0x38>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	4a04      	ldr	r2, [pc, #16]	@ (800b7ac <prvResetNextTaskUnblockTime+0x3c>)
 800b79a:	6013      	str	r3, [r2, #0]
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	20000e88 	.word	0x20000e88
 800b7ac:	20000ef0 	.word	0x20000ef0

0800b7b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7ba:	4b29      	ldr	r3, [pc, #164]	@ (800b860 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7c0:	4b28      	ldr	r3, [pc, #160]	@ (800b864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff faeb 	bl	800ada2 <uxListRemove>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10b      	bne.n	800b7ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b7d2:	4b24      	ldr	r3, [pc, #144]	@ (800b864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d8:	2201      	movs	r2, #1
 800b7da:	fa02 f303 	lsl.w	r3, r2, r3
 800b7de:	43da      	mvns	r2, r3
 800b7e0:	4b21      	ldr	r3, [pc, #132]	@ (800b868 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	4a20      	ldr	r2, [pc, #128]	@ (800b868 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b7e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d10a      	bne.n	800b808 <prvAddCurrentTaskToDelayedList+0x58>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d007      	beq.n	800b808 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	4619      	mov	r1, r3
 800b800:	481a      	ldr	r0, [pc, #104]	@ (800b86c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b802:	f7ff fa71 	bl	800ace8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b806:	e026      	b.n	800b856 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b810:	4b14      	ldr	r3, [pc, #80]	@ (800b864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d209      	bcs.n	800b834 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b820:	4b13      	ldr	r3, [pc, #76]	@ (800b870 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	4b0f      	ldr	r3, [pc, #60]	@ (800b864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3304      	adds	r3, #4
 800b82a:	4619      	mov	r1, r3
 800b82c:	4610      	mov	r0, r2
 800b82e:	f7ff fa7f 	bl	800ad30 <vListInsert>
}
 800b832:	e010      	b.n	800b856 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b834:	4b0f      	ldr	r3, [pc, #60]	@ (800b874 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	4b0a      	ldr	r3, [pc, #40]	@ (800b864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4619      	mov	r1, r3
 800b840:	4610      	mov	r0, r2
 800b842:	f7ff fa75 	bl	800ad30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b846:	4b0c      	ldr	r3, [pc, #48]	@ (800b878 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d202      	bcs.n	800b856 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b850:	4a09      	ldr	r2, [pc, #36]	@ (800b878 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	6013      	str	r3, [r2, #0]
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000ed4 	.word	0x20000ed4
 800b864:	20000dd0 	.word	0x20000dd0
 800b868:	20000ed8 	.word	0x20000ed8
 800b86c:	20000ebc 	.word	0x20000ebc
 800b870:	20000e8c 	.word	0x20000e8c
 800b874:	20000e88 	.word	0x20000e88
 800b878:	20000ef0 	.word	0x20000ef0

0800b87c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3b04      	subs	r3, #4
 800b88c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3b04      	subs	r3, #4
 800b89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f023 0201 	bic.w	r2, r3, #1
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3b04      	subs	r3, #4
 800b8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8ac:	4a0c      	ldr	r2, [pc, #48]	@ (800b8e0 <pxPortInitialiseStack+0x64>)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3b14      	subs	r3, #20
 800b8b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3b04      	subs	r3, #4
 800b8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f06f 0202 	mvn.w	r2, #2
 800b8ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3b20      	subs	r3, #32
 800b8d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	0800b8e5 	.word	0x0800b8e5

0800b8e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8ee:	4b15      	ldr	r3, [pc, #84]	@ (800b944 <prvTaskExitError+0x60>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f6:	d00d      	beq.n	800b914 <prvTaskExitError+0x30>
	__asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fc:	b672      	cpsid	i
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	b662      	cpsie	i
 800b90c:	60fb      	str	r3, [r7, #12]
}
 800b90e:	bf00      	nop
 800b910:	bf00      	nop
 800b912:	e7fd      	b.n	800b910 <prvTaskExitError+0x2c>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b918:	b672      	cpsid	i
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	b662      	cpsie	i
 800b928:	60bb      	str	r3, [r7, #8]
}
 800b92a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b92c:	bf00      	nop
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0fc      	beq.n	800b92e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20000058 	.word	0x20000058
	...

0800b950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b950:	4b07      	ldr	r3, [pc, #28]	@ (800b970 <pxCurrentTCBConst2>)
 800b952:	6819      	ldr	r1, [r3, #0]
 800b954:	6808      	ldr	r0, [r1, #0]
 800b956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95a:	f380 8809 	msr	PSP, r0
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f04f 0000 	mov.w	r0, #0
 800b966:	f380 8811 	msr	BASEPRI, r0
 800b96a:	4770      	bx	lr
 800b96c:	f3af 8000 	nop.w

0800b970 <pxCurrentTCBConst2>:
 800b970:	20000dd0 	.word	0x20000dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop

0800b978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b978:	4808      	ldr	r0, [pc, #32]	@ (800b99c <prvPortStartFirstTask+0x24>)
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	6800      	ldr	r0, [r0, #0]
 800b97e:	f380 8808 	msr	MSP, r0
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f380 8814 	msr	CONTROL, r0
 800b98a:	b662      	cpsie	i
 800b98c:	b661      	cpsie	f
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	df00      	svc	0
 800b998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b99a:	bf00      	nop
 800b99c:	e000ed08 	.word	0xe000ed08

0800b9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b9a6:	4b37      	ldr	r3, [pc, #220]	@ (800ba84 <xPortStartScheduler+0xe4>)
 800b9a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	22ff      	movs	r2, #255	@ 0xff
 800b9b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	4b2f      	ldr	r3, [pc, #188]	@ (800ba88 <xPortStartScheduler+0xe8>)
 800b9cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9ce:	4b2f      	ldr	r3, [pc, #188]	@ (800ba8c <xPortStartScheduler+0xec>)
 800b9d0:	2207      	movs	r2, #7
 800b9d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9d4:	e009      	b.n	800b9ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b9d6:	4b2d      	ldr	r3, [pc, #180]	@ (800ba8c <xPortStartScheduler+0xec>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	4a2b      	ldr	r2, [pc, #172]	@ (800ba8c <xPortStartScheduler+0xec>)
 800b9de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9ea:	78fb      	ldrb	r3, [r7, #3]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9f2:	2b80      	cmp	r3, #128	@ 0x80
 800b9f4:	d0ef      	beq.n	800b9d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9f6:	4b25      	ldr	r3, [pc, #148]	@ (800ba8c <xPortStartScheduler+0xec>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f1c3 0307 	rsb	r3, r3, #7
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d00d      	beq.n	800ba1e <xPortStartScheduler+0x7e>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba06:	b672      	cpsid	i
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	b662      	cpsie	i
 800ba16:	60bb      	str	r3, [r7, #8]
}
 800ba18:	bf00      	nop
 800ba1a:	bf00      	nop
 800ba1c:	e7fd      	b.n	800ba1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba1e:	4b1b      	ldr	r3, [pc, #108]	@ (800ba8c <xPortStartScheduler+0xec>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	021b      	lsls	r3, r3, #8
 800ba24:	4a19      	ldr	r2, [pc, #100]	@ (800ba8c <xPortStartScheduler+0xec>)
 800ba26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba28:	4b18      	ldr	r3, [pc, #96]	@ (800ba8c <xPortStartScheduler+0xec>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba30:	4a16      	ldr	r2, [pc, #88]	@ (800ba8c <xPortStartScheduler+0xec>)
 800ba32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	b2da      	uxtb	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba3c:	4b14      	ldr	r3, [pc, #80]	@ (800ba90 <xPortStartScheduler+0xf0>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a13      	ldr	r2, [pc, #76]	@ (800ba90 <xPortStartScheduler+0xf0>)
 800ba42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ba46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba48:	4b11      	ldr	r3, [pc, #68]	@ (800ba90 <xPortStartScheduler+0xf0>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a10      	ldr	r2, [pc, #64]	@ (800ba90 <xPortStartScheduler+0xf0>)
 800ba4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ba52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba54:	f000 f8dc 	bl	800bc10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba58:	4b0e      	ldr	r3, [pc, #56]	@ (800ba94 <xPortStartScheduler+0xf4>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba5e:	f000 f8fb 	bl	800bc58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba62:	4b0d      	ldr	r3, [pc, #52]	@ (800ba98 <xPortStartScheduler+0xf8>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a0c      	ldr	r2, [pc, #48]	@ (800ba98 <xPortStartScheduler+0xf8>)
 800ba68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ba6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba6e:	f7ff ff83 	bl	800b978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba72:	f7ff fd67 	bl	800b544 <vTaskSwitchContext>
	prvTaskExitError();
 800ba76:	f7ff ff35 	bl	800b8e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	e000e400 	.word	0xe000e400
 800ba88:	20000efc 	.word	0x20000efc
 800ba8c:	20000f00 	.word	0x20000f00
 800ba90:	e000ed20 	.word	0xe000ed20
 800ba94:	20000058 	.word	0x20000058
 800ba98:	e000ef34 	.word	0xe000ef34

0800ba9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	b672      	cpsid	i
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	b662      	cpsie	i
 800bab6:	607b      	str	r3, [r7, #4]
}
 800bab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800baba:	4b11      	ldr	r3, [pc, #68]	@ (800bb00 <vPortEnterCritical+0x64>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3301      	adds	r3, #1
 800bac0:	4a0f      	ldr	r2, [pc, #60]	@ (800bb00 <vPortEnterCritical+0x64>)
 800bac2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bac4:	4b0e      	ldr	r3, [pc, #56]	@ (800bb00 <vPortEnterCritical+0x64>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d112      	bne.n	800baf2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bacc:	4b0d      	ldr	r3, [pc, #52]	@ (800bb04 <vPortEnterCritical+0x68>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00d      	beq.n	800baf2 <vPortEnterCritical+0x56>
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bada:	b672      	cpsid	i
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	b662      	cpsie	i
 800baea:	603b      	str	r3, [r7, #0]
}
 800baec:	bf00      	nop
 800baee:	bf00      	nop
 800baf0:	e7fd      	b.n	800baee <vPortEnterCritical+0x52>
	}
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	20000058 	.word	0x20000058
 800bb04:	e000ed04 	.word	0xe000ed04

0800bb08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb0e:	4b13      	ldr	r3, [pc, #76]	@ (800bb5c <vPortExitCritical+0x54>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10d      	bne.n	800bb32 <vPortExitCritical+0x2a>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	b672      	cpsid	i
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	b662      	cpsie	i
 800bb2a:	607b      	str	r3, [r7, #4]
}
 800bb2c:	bf00      	nop
 800bb2e:	bf00      	nop
 800bb30:	e7fd      	b.n	800bb2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bb32:	4b0a      	ldr	r3, [pc, #40]	@ (800bb5c <vPortExitCritical+0x54>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3b01      	subs	r3, #1
 800bb38:	4a08      	ldr	r2, [pc, #32]	@ (800bb5c <vPortExitCritical+0x54>)
 800bb3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb3c:	4b07      	ldr	r3, [pc, #28]	@ (800bb5c <vPortExitCritical+0x54>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d105      	bne.n	800bb50 <vPortExitCritical+0x48>
 800bb44:	2300      	movs	r3, #0
 800bb46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	20000058 	.word	0x20000058

0800bb60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb60:	f3ef 8009 	mrs	r0, PSP
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	4b15      	ldr	r3, [pc, #84]	@ (800bbc0 <pxCurrentTCBConst>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	f01e 0f10 	tst.w	lr, #16
 800bb70:	bf08      	it	eq
 800bb72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7a:	6010      	str	r0, [r2, #0]
 800bb7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bb84:	b672      	cpsid	i
 800bb86:	f380 8811 	msr	BASEPRI, r0
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	b662      	cpsie	i
 800bb94:	f7ff fcd6 	bl	800b544 <vTaskSwitchContext>
 800bb98:	f04f 0000 	mov.w	r0, #0
 800bb9c:	f380 8811 	msr	BASEPRI, r0
 800bba0:	bc09      	pop	{r0, r3}
 800bba2:	6819      	ldr	r1, [r3, #0]
 800bba4:	6808      	ldr	r0, [r1, #0]
 800bba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbaa:	f01e 0f10 	tst.w	lr, #16
 800bbae:	bf08      	it	eq
 800bbb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bbb4:	f380 8809 	msr	PSP, r0
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop

0800bbc0 <pxCurrentTCBConst>:
 800bbc0:	20000dd0 	.word	0x20000dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop

0800bbc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd2:	b672      	cpsid	i
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	b662      	cpsie	i
 800bbe2:	607b      	str	r3, [r7, #4]
}
 800bbe4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bbe6:	f7ff fbf1 	bl	800b3cc <xTaskIncrementTick>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbf0:	4b06      	ldr	r3, [pc, #24]	@ (800bc0c <SysTick_Handler+0x44>)
 800bbf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	f383 8811 	msr	BASEPRI, r3
}
 800bc02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc04:	bf00      	nop
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	e000ed04 	.word	0xe000ed04

0800bc10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc10:	b480      	push	{r7}
 800bc12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc14:	4b0b      	ldr	r3, [pc, #44]	@ (800bc44 <vPortSetupTimerInterrupt+0x34>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc48 <vPortSetupTimerInterrupt+0x38>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc20:	4b0a      	ldr	r3, [pc, #40]	@ (800bc4c <vPortSetupTimerInterrupt+0x3c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a0a      	ldr	r2, [pc, #40]	@ (800bc50 <vPortSetupTimerInterrupt+0x40>)
 800bc26:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2a:	099b      	lsrs	r3, r3, #6
 800bc2c:	4a09      	ldr	r2, [pc, #36]	@ (800bc54 <vPortSetupTimerInterrupt+0x44>)
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc32:	4b04      	ldr	r3, [pc, #16]	@ (800bc44 <vPortSetupTimerInterrupt+0x34>)
 800bc34:	2207      	movs	r2, #7
 800bc36:	601a      	str	r2, [r3, #0]
}
 800bc38:	bf00      	nop
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	e000e010 	.word	0xe000e010
 800bc48:	e000e018 	.word	0xe000e018
 800bc4c:	2000004c 	.word	0x2000004c
 800bc50:	10624dd3 	.word	0x10624dd3
 800bc54:	e000e014 	.word	0xe000e014

0800bc58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bc68 <vPortEnableVFP+0x10>
 800bc5c:	6801      	ldr	r1, [r0, #0]
 800bc5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bc62:	6001      	str	r1, [r0, #0]
 800bc64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc66:	bf00      	nop
 800bc68:	e000ed88 	.word	0xe000ed88

0800bc6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b08a      	sub	sp, #40	@ 0x28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc78:	f7ff fafa 	bl	800b270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc7c:	4b5d      	ldr	r3, [pc, #372]	@ (800bdf4 <pvPortMalloc+0x188>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc84:	f000 f920 	bl	800bec8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc88:	4b5b      	ldr	r3, [pc, #364]	@ (800bdf8 <pvPortMalloc+0x18c>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4013      	ands	r3, r2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f040 8094 	bne.w	800bdbe <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d020      	beq.n	800bcde <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800bc9c:	2208      	movs	r2, #8
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d017      	beq.n	800bcde <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f023 0307 	bic.w	r3, r3, #7
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f003 0307 	and.w	r3, r3, #7
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00d      	beq.n	800bcde <pvPortMalloc+0x72>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc6:	b672      	cpsid	i
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	b662      	cpsie	i
 800bcd6:	617b      	str	r3, [r7, #20]
}
 800bcd8:	bf00      	nop
 800bcda:	bf00      	nop
 800bcdc:	e7fd      	b.n	800bcda <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d06c      	beq.n	800bdbe <pvPortMalloc+0x152>
 800bce4:	4b45      	ldr	r3, [pc, #276]	@ (800bdfc <pvPortMalloc+0x190>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d867      	bhi.n	800bdbe <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcee:	4b44      	ldr	r3, [pc, #272]	@ (800be00 <pvPortMalloc+0x194>)
 800bcf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcf2:	4b43      	ldr	r3, [pc, #268]	@ (800be00 <pvPortMalloc+0x194>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcf8:	e004      	b.n	800bd04 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d903      	bls.n	800bd16 <pvPortMalloc+0xaa>
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1f1      	bne.n	800bcfa <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd16:	4b37      	ldr	r3, [pc, #220]	@ (800bdf4 <pvPortMalloc+0x188>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d04e      	beq.n	800bdbe <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2208      	movs	r2, #8
 800bd26:	4413      	add	r3, r2
 800bd28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	1ad2      	subs	r2, r2, r3
 800bd3a:	2308      	movs	r3, #8
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d922      	bls.n	800bd88 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4413      	add	r3, r2
 800bd48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	f003 0307 	and.w	r3, r3, #7
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00d      	beq.n	800bd70 <pvPortMalloc+0x104>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd58:	b672      	cpsid	i
 800bd5a:	f383 8811 	msr	BASEPRI, r3
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	b662      	cpsie	i
 800bd68:	613b      	str	r3, [r7, #16]
}
 800bd6a:	bf00      	nop
 800bd6c:	bf00      	nop
 800bd6e:	e7fd      	b.n	800bd6c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	1ad2      	subs	r2, r2, r3
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd82:	69b8      	ldr	r0, [r7, #24]
 800bd84:	f000 f902 	bl	800bf8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd88:	4b1c      	ldr	r3, [pc, #112]	@ (800bdfc <pvPortMalloc+0x190>)
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	4a1a      	ldr	r2, [pc, #104]	@ (800bdfc <pvPortMalloc+0x190>)
 800bd94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd96:	4b19      	ldr	r3, [pc, #100]	@ (800bdfc <pvPortMalloc+0x190>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	4b1a      	ldr	r3, [pc, #104]	@ (800be04 <pvPortMalloc+0x198>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d203      	bcs.n	800bdaa <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bda2:	4b16      	ldr	r3, [pc, #88]	@ (800bdfc <pvPortMalloc+0x190>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a17      	ldr	r2, [pc, #92]	@ (800be04 <pvPortMalloc+0x198>)
 800bda8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	4b12      	ldr	r3, [pc, #72]	@ (800bdf8 <pvPortMalloc+0x18c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bdbe:	f7ff fa65 	bl	800b28c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	f003 0307 	and.w	r3, r3, #7
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00d      	beq.n	800bde8 <pvPortMalloc+0x17c>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd0:	b672      	cpsid	i
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	b662      	cpsie	i
 800bde0:	60fb      	str	r3, [r7, #12]
}
 800bde2:	bf00      	nop
 800bde4:	bf00      	nop
 800bde6:	e7fd      	b.n	800bde4 <pvPortMalloc+0x178>
	return pvReturn;
 800bde8:	69fb      	ldr	r3, [r7, #28]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3728      	adds	r7, #40	@ 0x28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20004b0c 	.word	0x20004b0c
 800bdf8:	20004b18 	.word	0x20004b18
 800bdfc:	20004b10 	.word	0x20004b10
 800be00:	20004b04 	.word	0x20004b04
 800be04:	20004b14 	.word	0x20004b14

0800be08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d04e      	beq.n	800beb8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be1a:	2308      	movs	r3, #8
 800be1c:	425b      	negs	r3, r3
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	4413      	add	r3, r2
 800be22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	4b24      	ldr	r3, [pc, #144]	@ (800bec0 <vPortFree+0xb8>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4013      	ands	r3, r2
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10d      	bne.n	800be52 <vPortFree+0x4a>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3a:	b672      	cpsid	i
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	b662      	cpsie	i
 800be4a:	60fb      	str	r3, [r7, #12]
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	e7fd      	b.n	800be4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00d      	beq.n	800be76 <vPortFree+0x6e>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5e:	b672      	cpsid	i
 800be60:	f383 8811 	msr	BASEPRI, r3
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	b662      	cpsie	i
 800be6e:	60bb      	str	r3, [r7, #8]
}
 800be70:	bf00      	nop
 800be72:	bf00      	nop
 800be74:	e7fd      	b.n	800be72 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	4b11      	ldr	r3, [pc, #68]	@ (800bec0 <vPortFree+0xb8>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4013      	ands	r3, r2
 800be80:	2b00      	cmp	r3, #0
 800be82:	d019      	beq.n	800beb8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d115      	bne.n	800beb8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	685a      	ldr	r2, [r3, #4]
 800be90:	4b0b      	ldr	r3, [pc, #44]	@ (800bec0 <vPortFree+0xb8>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	43db      	mvns	r3, r3
 800be96:	401a      	ands	r2, r3
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be9c:	f7ff f9e8 	bl	800b270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	4b07      	ldr	r3, [pc, #28]	@ (800bec4 <vPortFree+0xbc>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4413      	add	r3, r2
 800beaa:	4a06      	ldr	r2, [pc, #24]	@ (800bec4 <vPortFree+0xbc>)
 800beac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800beae:	6938      	ldr	r0, [r7, #16]
 800beb0:	f000 f86c 	bl	800bf8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800beb4:	f7ff f9ea 	bl	800b28c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800beb8:	bf00      	nop
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20004b18 	.word	0x20004b18
 800bec4:	20004b10 	.word	0x20004b10

0800bec8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bece:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bed2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bed4:	4b27      	ldr	r3, [pc, #156]	@ (800bf74 <prvHeapInit+0xac>)
 800bed6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f003 0307 	and.w	r3, r3, #7
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00c      	beq.n	800befc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3307      	adds	r3, #7
 800bee6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f023 0307 	bic.w	r3, r3, #7
 800beee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	4a1f      	ldr	r2, [pc, #124]	@ (800bf74 <prvHeapInit+0xac>)
 800bef8:	4413      	add	r3, r2
 800befa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf00:	4a1d      	ldr	r2, [pc, #116]	@ (800bf78 <prvHeapInit+0xb0>)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf06:	4b1c      	ldr	r3, [pc, #112]	@ (800bf78 <prvHeapInit+0xb0>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	4413      	add	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf14:	2208      	movs	r2, #8
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	1a9b      	subs	r3, r3, r2
 800bf1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f023 0307 	bic.w	r3, r3, #7
 800bf22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4a15      	ldr	r2, [pc, #84]	@ (800bf7c <prvHeapInit+0xb4>)
 800bf28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf2a:	4b14      	ldr	r3, [pc, #80]	@ (800bf7c <prvHeapInit+0xb4>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf32:	4b12      	ldr	r3, [pc, #72]	@ (800bf7c <prvHeapInit+0xb4>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	1ad2      	subs	r2, r2, r3
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf48:	4b0c      	ldr	r3, [pc, #48]	@ (800bf7c <prvHeapInit+0xb4>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	4a0a      	ldr	r2, [pc, #40]	@ (800bf80 <prvHeapInit+0xb8>)
 800bf56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	4a09      	ldr	r2, [pc, #36]	@ (800bf84 <prvHeapInit+0xbc>)
 800bf5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf60:	4b09      	ldr	r3, [pc, #36]	@ (800bf88 <prvHeapInit+0xc0>)
 800bf62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf66:	601a      	str	r2, [r3, #0]
}
 800bf68:	bf00      	nop
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20000f04 	.word	0x20000f04
 800bf78:	20004b04 	.word	0x20004b04
 800bf7c:	20004b0c 	.word	0x20004b0c
 800bf80:	20004b14 	.word	0x20004b14
 800bf84:	20004b10 	.word	0x20004b10
 800bf88:	20004b18 	.word	0x20004b18

0800bf8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf94:	4b28      	ldr	r3, [pc, #160]	@ (800c038 <prvInsertBlockIntoFreeList+0xac>)
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	e002      	b.n	800bfa0 <prvInsertBlockIntoFreeList+0x14>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d8f7      	bhi.n	800bf9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d108      	bne.n	800bfce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	441a      	add	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	441a      	add	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d118      	bne.n	800c014 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	4b15      	ldr	r3, [pc, #84]	@ (800c03c <prvInsertBlockIntoFreeList+0xb0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d00d      	beq.n	800c00a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	441a      	add	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	e008      	b.n	800c01c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c00a:	4b0c      	ldr	r3, [pc, #48]	@ (800c03c <prvInsertBlockIntoFreeList+0xb0>)
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	601a      	str	r2, [r3, #0]
 800c012:	e003      	b.n	800c01c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	429a      	cmp	r2, r3
 800c022:	d002      	beq.n	800c02a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c02a:	bf00      	nop
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	20004b04 	.word	0x20004b04
 800c03c:	20004b0c 	.word	0x20004b0c

0800c040 <rand>:
 800c040:	4b16      	ldr	r3, [pc, #88]	@ (800c09c <rand+0x5c>)
 800c042:	b510      	push	{r4, lr}
 800c044:	681c      	ldr	r4, [r3, #0]
 800c046:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c048:	b9b3      	cbnz	r3, 800c078 <rand+0x38>
 800c04a:	2018      	movs	r0, #24
 800c04c:	f000 fa4e 	bl	800c4ec <malloc>
 800c050:	4602      	mov	r2, r0
 800c052:	6320      	str	r0, [r4, #48]	@ 0x30
 800c054:	b920      	cbnz	r0, 800c060 <rand+0x20>
 800c056:	4b12      	ldr	r3, [pc, #72]	@ (800c0a0 <rand+0x60>)
 800c058:	4812      	ldr	r0, [pc, #72]	@ (800c0a4 <rand+0x64>)
 800c05a:	2152      	movs	r1, #82	@ 0x52
 800c05c:	f000 f9de 	bl	800c41c <__assert_func>
 800c060:	4911      	ldr	r1, [pc, #68]	@ (800c0a8 <rand+0x68>)
 800c062:	4b12      	ldr	r3, [pc, #72]	@ (800c0ac <rand+0x6c>)
 800c064:	e9c0 1300 	strd	r1, r3, [r0]
 800c068:	4b11      	ldr	r3, [pc, #68]	@ (800c0b0 <rand+0x70>)
 800c06a:	6083      	str	r3, [r0, #8]
 800c06c:	230b      	movs	r3, #11
 800c06e:	8183      	strh	r3, [r0, #12]
 800c070:	2100      	movs	r1, #0
 800c072:	2001      	movs	r0, #1
 800c074:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c078:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c07a:	480e      	ldr	r0, [pc, #56]	@ (800c0b4 <rand+0x74>)
 800c07c:	690b      	ldr	r3, [r1, #16]
 800c07e:	694c      	ldr	r4, [r1, #20]
 800c080:	4a0d      	ldr	r2, [pc, #52]	@ (800c0b8 <rand+0x78>)
 800c082:	4358      	muls	r0, r3
 800c084:	fb02 0004 	mla	r0, r2, r4, r0
 800c088:	fba3 3202 	umull	r3, r2, r3, r2
 800c08c:	3301      	adds	r3, #1
 800c08e:	eb40 0002 	adc.w	r0, r0, r2
 800c092:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c096:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c09a:	bd10      	pop	{r4, pc}
 800c09c:	20000068 	.word	0x20000068
 800c0a0:	0801b7b8 	.word	0x0801b7b8
 800c0a4:	0801b7cf 	.word	0x0801b7cf
 800c0a8:	abcd330e 	.word	0xabcd330e
 800c0ac:	e66d1234 	.word	0xe66d1234
 800c0b0:	0005deec 	.word	0x0005deec
 800c0b4:	5851f42d 	.word	0x5851f42d
 800c0b8:	4c957f2d 	.word	0x4c957f2d

0800c0bc <std>:
 800c0bc:	2300      	movs	r3, #0
 800c0be:	b510      	push	{r4, lr}
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c0c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0ca:	6083      	str	r3, [r0, #8]
 800c0cc:	8181      	strh	r1, [r0, #12]
 800c0ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800c0d0:	81c2      	strh	r2, [r0, #14]
 800c0d2:	6183      	str	r3, [r0, #24]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	2208      	movs	r2, #8
 800c0d8:	305c      	adds	r0, #92	@ 0x5c
 800c0da:	f000 f914 	bl	800c306 <memset>
 800c0de:	4b0d      	ldr	r3, [pc, #52]	@ (800c114 <std+0x58>)
 800c0e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c118 <std+0x5c>)
 800c0e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c0e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c11c <std+0x60>)
 800c0e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c120 <std+0x64>)
 800c0ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800c0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c124 <std+0x68>)
 800c0f0:	6224      	str	r4, [r4, #32]
 800c0f2:	429c      	cmp	r4, r3
 800c0f4:	d006      	beq.n	800c104 <std+0x48>
 800c0f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c0fa:	4294      	cmp	r4, r2
 800c0fc:	d002      	beq.n	800c104 <std+0x48>
 800c0fe:	33d0      	adds	r3, #208	@ 0xd0
 800c100:	429c      	cmp	r4, r3
 800c102:	d105      	bne.n	800c110 <std+0x54>
 800c104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c10c:	f000 b974 	b.w	800c3f8 <__retarget_lock_init_recursive>
 800c110:	bd10      	pop	{r4, pc}
 800c112:	bf00      	nop
 800c114:	0800c281 	.word	0x0800c281
 800c118:	0800c2a3 	.word	0x0800c2a3
 800c11c:	0800c2db 	.word	0x0800c2db
 800c120:	0800c2ff 	.word	0x0800c2ff
 800c124:	20004b1c 	.word	0x20004b1c

0800c128 <stdio_exit_handler>:
 800c128:	4a02      	ldr	r2, [pc, #8]	@ (800c134 <stdio_exit_handler+0xc>)
 800c12a:	4903      	ldr	r1, [pc, #12]	@ (800c138 <stdio_exit_handler+0x10>)
 800c12c:	4803      	ldr	r0, [pc, #12]	@ (800c13c <stdio_exit_handler+0x14>)
 800c12e:	f000 b869 	b.w	800c204 <_fwalk_sglue>
 800c132:	bf00      	nop
 800c134:	2000005c 	.word	0x2000005c
 800c138:	0800cd2d 	.word	0x0800cd2d
 800c13c:	2000006c 	.word	0x2000006c

0800c140 <cleanup_stdio>:
 800c140:	6841      	ldr	r1, [r0, #4]
 800c142:	4b0c      	ldr	r3, [pc, #48]	@ (800c174 <cleanup_stdio+0x34>)
 800c144:	4299      	cmp	r1, r3
 800c146:	b510      	push	{r4, lr}
 800c148:	4604      	mov	r4, r0
 800c14a:	d001      	beq.n	800c150 <cleanup_stdio+0x10>
 800c14c:	f000 fdee 	bl	800cd2c <_fflush_r>
 800c150:	68a1      	ldr	r1, [r4, #8]
 800c152:	4b09      	ldr	r3, [pc, #36]	@ (800c178 <cleanup_stdio+0x38>)
 800c154:	4299      	cmp	r1, r3
 800c156:	d002      	beq.n	800c15e <cleanup_stdio+0x1e>
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 fde7 	bl	800cd2c <_fflush_r>
 800c15e:	68e1      	ldr	r1, [r4, #12]
 800c160:	4b06      	ldr	r3, [pc, #24]	@ (800c17c <cleanup_stdio+0x3c>)
 800c162:	4299      	cmp	r1, r3
 800c164:	d004      	beq.n	800c170 <cleanup_stdio+0x30>
 800c166:	4620      	mov	r0, r4
 800c168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c16c:	f000 bdde 	b.w	800cd2c <_fflush_r>
 800c170:	bd10      	pop	{r4, pc}
 800c172:	bf00      	nop
 800c174:	20004b1c 	.word	0x20004b1c
 800c178:	20004b84 	.word	0x20004b84
 800c17c:	20004bec 	.word	0x20004bec

0800c180 <global_stdio_init.part.0>:
 800c180:	b510      	push	{r4, lr}
 800c182:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b0 <global_stdio_init.part.0+0x30>)
 800c184:	4c0b      	ldr	r4, [pc, #44]	@ (800c1b4 <global_stdio_init.part.0+0x34>)
 800c186:	4a0c      	ldr	r2, [pc, #48]	@ (800c1b8 <global_stdio_init.part.0+0x38>)
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	4620      	mov	r0, r4
 800c18c:	2200      	movs	r2, #0
 800c18e:	2104      	movs	r1, #4
 800c190:	f7ff ff94 	bl	800c0bc <std>
 800c194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c198:	2201      	movs	r2, #1
 800c19a:	2109      	movs	r1, #9
 800c19c:	f7ff ff8e 	bl	800c0bc <std>
 800c1a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1aa:	2112      	movs	r1, #18
 800c1ac:	f7ff bf86 	b.w	800c0bc <std>
 800c1b0:	20004c54 	.word	0x20004c54
 800c1b4:	20004b1c 	.word	0x20004b1c
 800c1b8:	0800c129 	.word	0x0800c129

0800c1bc <__sfp_lock_acquire>:
 800c1bc:	4801      	ldr	r0, [pc, #4]	@ (800c1c4 <__sfp_lock_acquire+0x8>)
 800c1be:	f000 b91c 	b.w	800c3fa <__retarget_lock_acquire_recursive>
 800c1c2:	bf00      	nop
 800c1c4:	20004c5d 	.word	0x20004c5d

0800c1c8 <__sfp_lock_release>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	@ (800c1d0 <__sfp_lock_release+0x8>)
 800c1ca:	f000 b917 	b.w	800c3fc <__retarget_lock_release_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	20004c5d 	.word	0x20004c5d

0800c1d4 <__sinit>:
 800c1d4:	b510      	push	{r4, lr}
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	f7ff fff0 	bl	800c1bc <__sfp_lock_acquire>
 800c1dc:	6a23      	ldr	r3, [r4, #32]
 800c1de:	b11b      	cbz	r3, 800c1e8 <__sinit+0x14>
 800c1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1e4:	f7ff bff0 	b.w	800c1c8 <__sfp_lock_release>
 800c1e8:	4b04      	ldr	r3, [pc, #16]	@ (800c1fc <__sinit+0x28>)
 800c1ea:	6223      	str	r3, [r4, #32]
 800c1ec:	4b04      	ldr	r3, [pc, #16]	@ (800c200 <__sinit+0x2c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1f5      	bne.n	800c1e0 <__sinit+0xc>
 800c1f4:	f7ff ffc4 	bl	800c180 <global_stdio_init.part.0>
 800c1f8:	e7f2      	b.n	800c1e0 <__sinit+0xc>
 800c1fa:	bf00      	nop
 800c1fc:	0800c141 	.word	0x0800c141
 800c200:	20004c54 	.word	0x20004c54

0800c204 <_fwalk_sglue>:
 800c204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c208:	4607      	mov	r7, r0
 800c20a:	4688      	mov	r8, r1
 800c20c:	4614      	mov	r4, r2
 800c20e:	2600      	movs	r6, #0
 800c210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c214:	f1b9 0901 	subs.w	r9, r9, #1
 800c218:	d505      	bpl.n	800c226 <_fwalk_sglue+0x22>
 800c21a:	6824      	ldr	r4, [r4, #0]
 800c21c:	2c00      	cmp	r4, #0
 800c21e:	d1f7      	bne.n	800c210 <_fwalk_sglue+0xc>
 800c220:	4630      	mov	r0, r6
 800c222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c226:	89ab      	ldrh	r3, [r5, #12]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d907      	bls.n	800c23c <_fwalk_sglue+0x38>
 800c22c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c230:	3301      	adds	r3, #1
 800c232:	d003      	beq.n	800c23c <_fwalk_sglue+0x38>
 800c234:	4629      	mov	r1, r5
 800c236:	4638      	mov	r0, r7
 800c238:	47c0      	blx	r8
 800c23a:	4306      	orrs	r6, r0
 800c23c:	3568      	adds	r5, #104	@ 0x68
 800c23e:	e7e9      	b.n	800c214 <_fwalk_sglue+0x10>

0800c240 <siprintf>:
 800c240:	b40e      	push	{r1, r2, r3}
 800c242:	b500      	push	{lr}
 800c244:	b09c      	sub	sp, #112	@ 0x70
 800c246:	ab1d      	add	r3, sp, #116	@ 0x74
 800c248:	9002      	str	r0, [sp, #8]
 800c24a:	9006      	str	r0, [sp, #24]
 800c24c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c250:	4809      	ldr	r0, [pc, #36]	@ (800c278 <siprintf+0x38>)
 800c252:	9107      	str	r1, [sp, #28]
 800c254:	9104      	str	r1, [sp, #16]
 800c256:	4909      	ldr	r1, [pc, #36]	@ (800c27c <siprintf+0x3c>)
 800c258:	f853 2b04 	ldr.w	r2, [r3], #4
 800c25c:	9105      	str	r1, [sp, #20]
 800c25e:	6800      	ldr	r0, [r0, #0]
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	a902      	add	r1, sp, #8
 800c264:	f000 fa54 	bl	800c710 <_svfiprintf_r>
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	2200      	movs	r2, #0
 800c26c:	701a      	strb	r2, [r3, #0]
 800c26e:	b01c      	add	sp, #112	@ 0x70
 800c270:	f85d eb04 	ldr.w	lr, [sp], #4
 800c274:	b003      	add	sp, #12
 800c276:	4770      	bx	lr
 800c278:	20000068 	.word	0x20000068
 800c27c:	ffff0208 	.word	0xffff0208

0800c280 <__sread>:
 800c280:	b510      	push	{r4, lr}
 800c282:	460c      	mov	r4, r1
 800c284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c288:	f000 f868 	bl	800c35c <_read_r>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	bfab      	itete	ge
 800c290:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c292:	89a3      	ldrhlt	r3, [r4, #12]
 800c294:	181b      	addge	r3, r3, r0
 800c296:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c29a:	bfac      	ite	ge
 800c29c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c29e:	81a3      	strhlt	r3, [r4, #12]
 800c2a0:	bd10      	pop	{r4, pc}

0800c2a2 <__swrite>:
 800c2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a6:	461f      	mov	r7, r3
 800c2a8:	898b      	ldrh	r3, [r1, #12]
 800c2aa:	05db      	lsls	r3, r3, #23
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	4616      	mov	r6, r2
 800c2b2:	d505      	bpl.n	800c2c0 <__swrite+0x1e>
 800c2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f000 f83c 	bl	800c338 <_lseek_r>
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	4632      	mov	r2, r6
 800c2ce:	463b      	mov	r3, r7
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d6:	f000 b853 	b.w	800c380 <_write_r>

0800c2da <__sseek>:
 800c2da:	b510      	push	{r4, lr}
 800c2dc:	460c      	mov	r4, r1
 800c2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e2:	f000 f829 	bl	800c338 <_lseek_r>
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	bf15      	itete	ne
 800c2ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c2ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c2f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c2f6:	81a3      	strheq	r3, [r4, #12]
 800c2f8:	bf18      	it	ne
 800c2fa:	81a3      	strhne	r3, [r4, #12]
 800c2fc:	bd10      	pop	{r4, pc}

0800c2fe <__sclose>:
 800c2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c302:	f000 b809 	b.w	800c318 <_close_r>

0800c306 <memset>:
 800c306:	4402      	add	r2, r0
 800c308:	4603      	mov	r3, r0
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d100      	bne.n	800c310 <memset+0xa>
 800c30e:	4770      	bx	lr
 800c310:	f803 1b01 	strb.w	r1, [r3], #1
 800c314:	e7f9      	b.n	800c30a <memset+0x4>
	...

0800c318 <_close_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4d06      	ldr	r5, [pc, #24]	@ (800c334 <_close_r+0x1c>)
 800c31c:	2300      	movs	r3, #0
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	f7f7 ffb2 	bl	800428c <_close>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_close_r+0x1a>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_close_r+0x1a>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	20004c58 	.word	0x20004c58

0800c338 <_lseek_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d07      	ldr	r5, [pc, #28]	@ (800c358 <_lseek_r+0x20>)
 800c33c:	4604      	mov	r4, r0
 800c33e:	4608      	mov	r0, r1
 800c340:	4611      	mov	r1, r2
 800c342:	2200      	movs	r2, #0
 800c344:	602a      	str	r2, [r5, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	f7f7 ffc7 	bl	80042da <_lseek>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_lseek_r+0x1e>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_lseek_r+0x1e>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	20004c58 	.word	0x20004c58

0800c35c <_read_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4d07      	ldr	r5, [pc, #28]	@ (800c37c <_read_r+0x20>)
 800c360:	4604      	mov	r4, r0
 800c362:	4608      	mov	r0, r1
 800c364:	4611      	mov	r1, r2
 800c366:	2200      	movs	r2, #0
 800c368:	602a      	str	r2, [r5, #0]
 800c36a:	461a      	mov	r2, r3
 800c36c:	f7f7 ff55 	bl	800421a <_read>
 800c370:	1c43      	adds	r3, r0, #1
 800c372:	d102      	bne.n	800c37a <_read_r+0x1e>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	b103      	cbz	r3, 800c37a <_read_r+0x1e>
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	20004c58 	.word	0x20004c58

0800c380 <_write_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d07      	ldr	r5, [pc, #28]	@ (800c3a0 <_write_r+0x20>)
 800c384:	4604      	mov	r4, r0
 800c386:	4608      	mov	r0, r1
 800c388:	4611      	mov	r1, r2
 800c38a:	2200      	movs	r2, #0
 800c38c:	602a      	str	r2, [r5, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	f7f7 ff60 	bl	8004254 <_write>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	d102      	bne.n	800c39e <_write_r+0x1e>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	b103      	cbz	r3, 800c39e <_write_r+0x1e>
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	20004c58 	.word	0x20004c58

0800c3a4 <__errno>:
 800c3a4:	4b01      	ldr	r3, [pc, #4]	@ (800c3ac <__errno+0x8>)
 800c3a6:	6818      	ldr	r0, [r3, #0]
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	20000068 	.word	0x20000068

0800c3b0 <__libc_init_array>:
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	4d0d      	ldr	r5, [pc, #52]	@ (800c3e8 <__libc_init_array+0x38>)
 800c3b4:	4c0d      	ldr	r4, [pc, #52]	@ (800c3ec <__libc_init_array+0x3c>)
 800c3b6:	1b64      	subs	r4, r4, r5
 800c3b8:	10a4      	asrs	r4, r4, #2
 800c3ba:	2600      	movs	r6, #0
 800c3bc:	42a6      	cmp	r6, r4
 800c3be:	d109      	bne.n	800c3d4 <__libc_init_array+0x24>
 800c3c0:	4d0b      	ldr	r5, [pc, #44]	@ (800c3f0 <__libc_init_array+0x40>)
 800c3c2:	4c0c      	ldr	r4, [pc, #48]	@ (800c3f4 <__libc_init_array+0x44>)
 800c3c4:	f000 fff0 	bl	800d3a8 <_init>
 800c3c8:	1b64      	subs	r4, r4, r5
 800c3ca:	10a4      	asrs	r4, r4, #2
 800c3cc:	2600      	movs	r6, #0
 800c3ce:	42a6      	cmp	r6, r4
 800c3d0:	d105      	bne.n	800c3de <__libc_init_array+0x2e>
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d8:	4798      	blx	r3
 800c3da:	3601      	adds	r6, #1
 800c3dc:	e7ee      	b.n	800c3bc <__libc_init_array+0xc>
 800c3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e2:	4798      	blx	r3
 800c3e4:	3601      	adds	r6, #1
 800c3e6:	e7f2      	b.n	800c3ce <__libc_init_array+0x1e>
 800c3e8:	0801b8a0 	.word	0x0801b8a0
 800c3ec:	0801b8a0 	.word	0x0801b8a0
 800c3f0:	0801b8a0 	.word	0x0801b8a0
 800c3f4:	0801b8a4 	.word	0x0801b8a4

0800c3f8 <__retarget_lock_init_recursive>:
 800c3f8:	4770      	bx	lr

0800c3fa <__retarget_lock_acquire_recursive>:
 800c3fa:	4770      	bx	lr

0800c3fc <__retarget_lock_release_recursive>:
 800c3fc:	4770      	bx	lr

0800c3fe <memcpy>:
 800c3fe:	440a      	add	r2, r1
 800c400:	4291      	cmp	r1, r2
 800c402:	f100 33ff 	add.w	r3, r0, #4294967295
 800c406:	d100      	bne.n	800c40a <memcpy+0xc>
 800c408:	4770      	bx	lr
 800c40a:	b510      	push	{r4, lr}
 800c40c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c410:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c414:	4291      	cmp	r1, r2
 800c416:	d1f9      	bne.n	800c40c <memcpy+0xe>
 800c418:	bd10      	pop	{r4, pc}
	...

0800c41c <__assert_func>:
 800c41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c41e:	4614      	mov	r4, r2
 800c420:	461a      	mov	r2, r3
 800c422:	4b09      	ldr	r3, [pc, #36]	@ (800c448 <__assert_func+0x2c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4605      	mov	r5, r0
 800c428:	68d8      	ldr	r0, [r3, #12]
 800c42a:	b954      	cbnz	r4, 800c442 <__assert_func+0x26>
 800c42c:	4b07      	ldr	r3, [pc, #28]	@ (800c44c <__assert_func+0x30>)
 800c42e:	461c      	mov	r4, r3
 800c430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c434:	9100      	str	r1, [sp, #0]
 800c436:	462b      	mov	r3, r5
 800c438:	4905      	ldr	r1, [pc, #20]	@ (800c450 <__assert_func+0x34>)
 800c43a:	f000 fc9f 	bl	800cd7c <fiprintf>
 800c43e:	f000 fcd9 	bl	800cdf4 <abort>
 800c442:	4b04      	ldr	r3, [pc, #16]	@ (800c454 <__assert_func+0x38>)
 800c444:	e7f4      	b.n	800c430 <__assert_func+0x14>
 800c446:	bf00      	nop
 800c448:	20000068 	.word	0x20000068
 800c44c:	0801b862 	.word	0x0801b862
 800c450:	0801b834 	.word	0x0801b834
 800c454:	0801b827 	.word	0x0801b827

0800c458 <_free_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4605      	mov	r5, r0
 800c45c:	2900      	cmp	r1, #0
 800c45e:	d041      	beq.n	800c4e4 <_free_r+0x8c>
 800c460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c464:	1f0c      	subs	r4, r1, #4
 800c466:	2b00      	cmp	r3, #0
 800c468:	bfb8      	it	lt
 800c46a:	18e4      	addlt	r4, r4, r3
 800c46c:	f000 f8e8 	bl	800c640 <__malloc_lock>
 800c470:	4a1d      	ldr	r2, [pc, #116]	@ (800c4e8 <_free_r+0x90>)
 800c472:	6813      	ldr	r3, [r2, #0]
 800c474:	b933      	cbnz	r3, 800c484 <_free_r+0x2c>
 800c476:	6063      	str	r3, [r4, #4]
 800c478:	6014      	str	r4, [r2, #0]
 800c47a:	4628      	mov	r0, r5
 800c47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c480:	f000 b8e4 	b.w	800c64c <__malloc_unlock>
 800c484:	42a3      	cmp	r3, r4
 800c486:	d908      	bls.n	800c49a <_free_r+0x42>
 800c488:	6820      	ldr	r0, [r4, #0]
 800c48a:	1821      	adds	r1, r4, r0
 800c48c:	428b      	cmp	r3, r1
 800c48e:	bf01      	itttt	eq
 800c490:	6819      	ldreq	r1, [r3, #0]
 800c492:	685b      	ldreq	r3, [r3, #4]
 800c494:	1809      	addeq	r1, r1, r0
 800c496:	6021      	streq	r1, [r4, #0]
 800c498:	e7ed      	b.n	800c476 <_free_r+0x1e>
 800c49a:	461a      	mov	r2, r3
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	b10b      	cbz	r3, 800c4a4 <_free_r+0x4c>
 800c4a0:	42a3      	cmp	r3, r4
 800c4a2:	d9fa      	bls.n	800c49a <_free_r+0x42>
 800c4a4:	6811      	ldr	r1, [r2, #0]
 800c4a6:	1850      	adds	r0, r2, r1
 800c4a8:	42a0      	cmp	r0, r4
 800c4aa:	d10b      	bne.n	800c4c4 <_free_r+0x6c>
 800c4ac:	6820      	ldr	r0, [r4, #0]
 800c4ae:	4401      	add	r1, r0
 800c4b0:	1850      	adds	r0, r2, r1
 800c4b2:	4283      	cmp	r3, r0
 800c4b4:	6011      	str	r1, [r2, #0]
 800c4b6:	d1e0      	bne.n	800c47a <_free_r+0x22>
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	6053      	str	r3, [r2, #4]
 800c4be:	4408      	add	r0, r1
 800c4c0:	6010      	str	r0, [r2, #0]
 800c4c2:	e7da      	b.n	800c47a <_free_r+0x22>
 800c4c4:	d902      	bls.n	800c4cc <_free_r+0x74>
 800c4c6:	230c      	movs	r3, #12
 800c4c8:	602b      	str	r3, [r5, #0]
 800c4ca:	e7d6      	b.n	800c47a <_free_r+0x22>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	1821      	adds	r1, r4, r0
 800c4d0:	428b      	cmp	r3, r1
 800c4d2:	bf04      	itt	eq
 800c4d4:	6819      	ldreq	r1, [r3, #0]
 800c4d6:	685b      	ldreq	r3, [r3, #4]
 800c4d8:	6063      	str	r3, [r4, #4]
 800c4da:	bf04      	itt	eq
 800c4dc:	1809      	addeq	r1, r1, r0
 800c4de:	6021      	streq	r1, [r4, #0]
 800c4e0:	6054      	str	r4, [r2, #4]
 800c4e2:	e7ca      	b.n	800c47a <_free_r+0x22>
 800c4e4:	bd38      	pop	{r3, r4, r5, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20004c64 	.word	0x20004c64

0800c4ec <malloc>:
 800c4ec:	4b02      	ldr	r3, [pc, #8]	@ (800c4f8 <malloc+0xc>)
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	f000 b825 	b.w	800c540 <_malloc_r>
 800c4f6:	bf00      	nop
 800c4f8:	20000068 	.word	0x20000068

0800c4fc <sbrk_aligned>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	4e0f      	ldr	r6, [pc, #60]	@ (800c53c <sbrk_aligned+0x40>)
 800c500:	460c      	mov	r4, r1
 800c502:	6831      	ldr	r1, [r6, #0]
 800c504:	4605      	mov	r5, r0
 800c506:	b911      	cbnz	r1, 800c50e <sbrk_aligned+0x12>
 800c508:	f000 fc64 	bl	800cdd4 <_sbrk_r>
 800c50c:	6030      	str	r0, [r6, #0]
 800c50e:	4621      	mov	r1, r4
 800c510:	4628      	mov	r0, r5
 800c512:	f000 fc5f 	bl	800cdd4 <_sbrk_r>
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	d103      	bne.n	800c522 <sbrk_aligned+0x26>
 800c51a:	f04f 34ff 	mov.w	r4, #4294967295
 800c51e:	4620      	mov	r0, r4
 800c520:	bd70      	pop	{r4, r5, r6, pc}
 800c522:	1cc4      	adds	r4, r0, #3
 800c524:	f024 0403 	bic.w	r4, r4, #3
 800c528:	42a0      	cmp	r0, r4
 800c52a:	d0f8      	beq.n	800c51e <sbrk_aligned+0x22>
 800c52c:	1a21      	subs	r1, r4, r0
 800c52e:	4628      	mov	r0, r5
 800c530:	f000 fc50 	bl	800cdd4 <_sbrk_r>
 800c534:	3001      	adds	r0, #1
 800c536:	d1f2      	bne.n	800c51e <sbrk_aligned+0x22>
 800c538:	e7ef      	b.n	800c51a <sbrk_aligned+0x1e>
 800c53a:	bf00      	nop
 800c53c:	20004c60 	.word	0x20004c60

0800c540 <_malloc_r>:
 800c540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c544:	1ccd      	adds	r5, r1, #3
 800c546:	f025 0503 	bic.w	r5, r5, #3
 800c54a:	3508      	adds	r5, #8
 800c54c:	2d0c      	cmp	r5, #12
 800c54e:	bf38      	it	cc
 800c550:	250c      	movcc	r5, #12
 800c552:	2d00      	cmp	r5, #0
 800c554:	4606      	mov	r6, r0
 800c556:	db01      	blt.n	800c55c <_malloc_r+0x1c>
 800c558:	42a9      	cmp	r1, r5
 800c55a:	d904      	bls.n	800c566 <_malloc_r+0x26>
 800c55c:	230c      	movs	r3, #12
 800c55e:	6033      	str	r3, [r6, #0]
 800c560:	2000      	movs	r0, #0
 800c562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c63c <_malloc_r+0xfc>
 800c56a:	f000 f869 	bl	800c640 <__malloc_lock>
 800c56e:	f8d8 3000 	ldr.w	r3, [r8]
 800c572:	461c      	mov	r4, r3
 800c574:	bb44      	cbnz	r4, 800c5c8 <_malloc_r+0x88>
 800c576:	4629      	mov	r1, r5
 800c578:	4630      	mov	r0, r6
 800c57a:	f7ff ffbf 	bl	800c4fc <sbrk_aligned>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	4604      	mov	r4, r0
 800c582:	d158      	bne.n	800c636 <_malloc_r+0xf6>
 800c584:	f8d8 4000 	ldr.w	r4, [r8]
 800c588:	4627      	mov	r7, r4
 800c58a:	2f00      	cmp	r7, #0
 800c58c:	d143      	bne.n	800c616 <_malloc_r+0xd6>
 800c58e:	2c00      	cmp	r4, #0
 800c590:	d04b      	beq.n	800c62a <_malloc_r+0xea>
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	4639      	mov	r1, r7
 800c596:	4630      	mov	r0, r6
 800c598:	eb04 0903 	add.w	r9, r4, r3
 800c59c:	f000 fc1a 	bl	800cdd4 <_sbrk_r>
 800c5a0:	4581      	cmp	r9, r0
 800c5a2:	d142      	bne.n	800c62a <_malloc_r+0xea>
 800c5a4:	6821      	ldr	r1, [r4, #0]
 800c5a6:	1a6d      	subs	r5, r5, r1
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7ff ffa6 	bl	800c4fc <sbrk_aligned>
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d03a      	beq.n	800c62a <_malloc_r+0xea>
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	442b      	add	r3, r5
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	bb62      	cbnz	r2, 800c61c <_malloc_r+0xdc>
 800c5c2:	f8c8 7000 	str.w	r7, [r8]
 800c5c6:	e00f      	b.n	800c5e8 <_malloc_r+0xa8>
 800c5c8:	6822      	ldr	r2, [r4, #0]
 800c5ca:	1b52      	subs	r2, r2, r5
 800c5cc:	d420      	bmi.n	800c610 <_malloc_r+0xd0>
 800c5ce:	2a0b      	cmp	r2, #11
 800c5d0:	d917      	bls.n	800c602 <_malloc_r+0xc2>
 800c5d2:	1961      	adds	r1, r4, r5
 800c5d4:	42a3      	cmp	r3, r4
 800c5d6:	6025      	str	r5, [r4, #0]
 800c5d8:	bf18      	it	ne
 800c5da:	6059      	strne	r1, [r3, #4]
 800c5dc:	6863      	ldr	r3, [r4, #4]
 800c5de:	bf08      	it	eq
 800c5e0:	f8c8 1000 	streq.w	r1, [r8]
 800c5e4:	5162      	str	r2, [r4, r5]
 800c5e6:	604b      	str	r3, [r1, #4]
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f000 f82f 	bl	800c64c <__malloc_unlock>
 800c5ee:	f104 000b 	add.w	r0, r4, #11
 800c5f2:	1d23      	adds	r3, r4, #4
 800c5f4:	f020 0007 	bic.w	r0, r0, #7
 800c5f8:	1ac2      	subs	r2, r0, r3
 800c5fa:	bf1c      	itt	ne
 800c5fc:	1a1b      	subne	r3, r3, r0
 800c5fe:	50a3      	strne	r3, [r4, r2]
 800c600:	e7af      	b.n	800c562 <_malloc_r+0x22>
 800c602:	6862      	ldr	r2, [r4, #4]
 800c604:	42a3      	cmp	r3, r4
 800c606:	bf0c      	ite	eq
 800c608:	f8c8 2000 	streq.w	r2, [r8]
 800c60c:	605a      	strne	r2, [r3, #4]
 800c60e:	e7eb      	b.n	800c5e8 <_malloc_r+0xa8>
 800c610:	4623      	mov	r3, r4
 800c612:	6864      	ldr	r4, [r4, #4]
 800c614:	e7ae      	b.n	800c574 <_malloc_r+0x34>
 800c616:	463c      	mov	r4, r7
 800c618:	687f      	ldr	r7, [r7, #4]
 800c61a:	e7b6      	b.n	800c58a <_malloc_r+0x4a>
 800c61c:	461a      	mov	r2, r3
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	42a3      	cmp	r3, r4
 800c622:	d1fb      	bne.n	800c61c <_malloc_r+0xdc>
 800c624:	2300      	movs	r3, #0
 800c626:	6053      	str	r3, [r2, #4]
 800c628:	e7de      	b.n	800c5e8 <_malloc_r+0xa8>
 800c62a:	230c      	movs	r3, #12
 800c62c:	6033      	str	r3, [r6, #0]
 800c62e:	4630      	mov	r0, r6
 800c630:	f000 f80c 	bl	800c64c <__malloc_unlock>
 800c634:	e794      	b.n	800c560 <_malloc_r+0x20>
 800c636:	6005      	str	r5, [r0, #0]
 800c638:	e7d6      	b.n	800c5e8 <_malloc_r+0xa8>
 800c63a:	bf00      	nop
 800c63c:	20004c64 	.word	0x20004c64

0800c640 <__malloc_lock>:
 800c640:	4801      	ldr	r0, [pc, #4]	@ (800c648 <__malloc_lock+0x8>)
 800c642:	f7ff beda 	b.w	800c3fa <__retarget_lock_acquire_recursive>
 800c646:	bf00      	nop
 800c648:	20004c5c 	.word	0x20004c5c

0800c64c <__malloc_unlock>:
 800c64c:	4801      	ldr	r0, [pc, #4]	@ (800c654 <__malloc_unlock+0x8>)
 800c64e:	f7ff bed5 	b.w	800c3fc <__retarget_lock_release_recursive>
 800c652:	bf00      	nop
 800c654:	20004c5c 	.word	0x20004c5c

0800c658 <__ssputs_r>:
 800c658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c65c:	688e      	ldr	r6, [r1, #8]
 800c65e:	461f      	mov	r7, r3
 800c660:	42be      	cmp	r6, r7
 800c662:	680b      	ldr	r3, [r1, #0]
 800c664:	4682      	mov	sl, r0
 800c666:	460c      	mov	r4, r1
 800c668:	4690      	mov	r8, r2
 800c66a:	d82d      	bhi.n	800c6c8 <__ssputs_r+0x70>
 800c66c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c670:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c674:	d026      	beq.n	800c6c4 <__ssputs_r+0x6c>
 800c676:	6965      	ldr	r5, [r4, #20]
 800c678:	6909      	ldr	r1, [r1, #16]
 800c67a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c67e:	eba3 0901 	sub.w	r9, r3, r1
 800c682:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c686:	1c7b      	adds	r3, r7, #1
 800c688:	444b      	add	r3, r9
 800c68a:	106d      	asrs	r5, r5, #1
 800c68c:	429d      	cmp	r5, r3
 800c68e:	bf38      	it	cc
 800c690:	461d      	movcc	r5, r3
 800c692:	0553      	lsls	r3, r2, #21
 800c694:	d527      	bpl.n	800c6e6 <__ssputs_r+0x8e>
 800c696:	4629      	mov	r1, r5
 800c698:	f7ff ff52 	bl	800c540 <_malloc_r>
 800c69c:	4606      	mov	r6, r0
 800c69e:	b360      	cbz	r0, 800c6fa <__ssputs_r+0xa2>
 800c6a0:	6921      	ldr	r1, [r4, #16]
 800c6a2:	464a      	mov	r2, r9
 800c6a4:	f7ff feab 	bl	800c3fe <memcpy>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b2:	81a3      	strh	r3, [r4, #12]
 800c6b4:	6126      	str	r6, [r4, #16]
 800c6b6:	6165      	str	r5, [r4, #20]
 800c6b8:	444e      	add	r6, r9
 800c6ba:	eba5 0509 	sub.w	r5, r5, r9
 800c6be:	6026      	str	r6, [r4, #0]
 800c6c0:	60a5      	str	r5, [r4, #8]
 800c6c2:	463e      	mov	r6, r7
 800c6c4:	42be      	cmp	r6, r7
 800c6c6:	d900      	bls.n	800c6ca <__ssputs_r+0x72>
 800c6c8:	463e      	mov	r6, r7
 800c6ca:	6820      	ldr	r0, [r4, #0]
 800c6cc:	4632      	mov	r2, r6
 800c6ce:	4641      	mov	r1, r8
 800c6d0:	f000 fb66 	bl	800cda0 <memmove>
 800c6d4:	68a3      	ldr	r3, [r4, #8]
 800c6d6:	1b9b      	subs	r3, r3, r6
 800c6d8:	60a3      	str	r3, [r4, #8]
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	4433      	add	r3, r6
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e6:	462a      	mov	r2, r5
 800c6e8:	f000 fb8b 	bl	800ce02 <_realloc_r>
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d1e0      	bne.n	800c6b4 <__ssputs_r+0x5c>
 800c6f2:	6921      	ldr	r1, [r4, #16]
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	f7ff feaf 	bl	800c458 <_free_r>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	f8ca 3000 	str.w	r3, [sl]
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	f04f 30ff 	mov.w	r0, #4294967295
 800c70c:	e7e9      	b.n	800c6e2 <__ssputs_r+0x8a>
	...

0800c710 <_svfiprintf_r>:
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	4698      	mov	r8, r3
 800c716:	898b      	ldrh	r3, [r1, #12]
 800c718:	061b      	lsls	r3, r3, #24
 800c71a:	b09d      	sub	sp, #116	@ 0x74
 800c71c:	4607      	mov	r7, r0
 800c71e:	460d      	mov	r5, r1
 800c720:	4614      	mov	r4, r2
 800c722:	d510      	bpl.n	800c746 <_svfiprintf_r+0x36>
 800c724:	690b      	ldr	r3, [r1, #16]
 800c726:	b973      	cbnz	r3, 800c746 <_svfiprintf_r+0x36>
 800c728:	2140      	movs	r1, #64	@ 0x40
 800c72a:	f7ff ff09 	bl	800c540 <_malloc_r>
 800c72e:	6028      	str	r0, [r5, #0]
 800c730:	6128      	str	r0, [r5, #16]
 800c732:	b930      	cbnz	r0, 800c742 <_svfiprintf_r+0x32>
 800c734:	230c      	movs	r3, #12
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	b01d      	add	sp, #116	@ 0x74
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	2340      	movs	r3, #64	@ 0x40
 800c744:	616b      	str	r3, [r5, #20]
 800c746:	2300      	movs	r3, #0
 800c748:	9309      	str	r3, [sp, #36]	@ 0x24
 800c74a:	2320      	movs	r3, #32
 800c74c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c750:	f8cd 800c 	str.w	r8, [sp, #12]
 800c754:	2330      	movs	r3, #48	@ 0x30
 800c756:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8f4 <_svfiprintf_r+0x1e4>
 800c75a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c75e:	f04f 0901 	mov.w	r9, #1
 800c762:	4623      	mov	r3, r4
 800c764:	469a      	mov	sl, r3
 800c766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c76a:	b10a      	cbz	r2, 800c770 <_svfiprintf_r+0x60>
 800c76c:	2a25      	cmp	r2, #37	@ 0x25
 800c76e:	d1f9      	bne.n	800c764 <_svfiprintf_r+0x54>
 800c770:	ebba 0b04 	subs.w	fp, sl, r4
 800c774:	d00b      	beq.n	800c78e <_svfiprintf_r+0x7e>
 800c776:	465b      	mov	r3, fp
 800c778:	4622      	mov	r2, r4
 800c77a:	4629      	mov	r1, r5
 800c77c:	4638      	mov	r0, r7
 800c77e:	f7ff ff6b 	bl	800c658 <__ssputs_r>
 800c782:	3001      	adds	r0, #1
 800c784:	f000 80a7 	beq.w	800c8d6 <_svfiprintf_r+0x1c6>
 800c788:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c78a:	445a      	add	r2, fp
 800c78c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c78e:	f89a 3000 	ldrb.w	r3, [sl]
 800c792:	2b00      	cmp	r3, #0
 800c794:	f000 809f 	beq.w	800c8d6 <_svfiprintf_r+0x1c6>
 800c798:	2300      	movs	r3, #0
 800c79a:	f04f 32ff 	mov.w	r2, #4294967295
 800c79e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a2:	f10a 0a01 	add.w	sl, sl, #1
 800c7a6:	9304      	str	r3, [sp, #16]
 800c7a8:	9307      	str	r3, [sp, #28]
 800c7aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7b0:	4654      	mov	r4, sl
 800c7b2:	2205      	movs	r2, #5
 800c7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b8:	484e      	ldr	r0, [pc, #312]	@ (800c8f4 <_svfiprintf_r+0x1e4>)
 800c7ba:	f7f3 fd29 	bl	8000210 <memchr>
 800c7be:	9a04      	ldr	r2, [sp, #16]
 800c7c0:	b9d8      	cbnz	r0, 800c7fa <_svfiprintf_r+0xea>
 800c7c2:	06d0      	lsls	r0, r2, #27
 800c7c4:	bf44      	itt	mi
 800c7c6:	2320      	movmi	r3, #32
 800c7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7cc:	0711      	lsls	r1, r2, #28
 800c7ce:	bf44      	itt	mi
 800c7d0:	232b      	movmi	r3, #43	@ 0x2b
 800c7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c7da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7dc:	d015      	beq.n	800c80a <_svfiprintf_r+0xfa>
 800c7de:	9a07      	ldr	r2, [sp, #28]
 800c7e0:	4654      	mov	r4, sl
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	f04f 0c0a 	mov.w	ip, #10
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ee:	3b30      	subs	r3, #48	@ 0x30
 800c7f0:	2b09      	cmp	r3, #9
 800c7f2:	d94b      	bls.n	800c88c <_svfiprintf_r+0x17c>
 800c7f4:	b1b0      	cbz	r0, 800c824 <_svfiprintf_r+0x114>
 800c7f6:	9207      	str	r2, [sp, #28]
 800c7f8:	e014      	b.n	800c824 <_svfiprintf_r+0x114>
 800c7fa:	eba0 0308 	sub.w	r3, r0, r8
 800c7fe:	fa09 f303 	lsl.w	r3, r9, r3
 800c802:	4313      	orrs	r3, r2
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	46a2      	mov	sl, r4
 800c808:	e7d2      	b.n	800c7b0 <_svfiprintf_r+0xa0>
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	1d19      	adds	r1, r3, #4
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	9103      	str	r1, [sp, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	bfbb      	ittet	lt
 800c816:	425b      	neglt	r3, r3
 800c818:	f042 0202 	orrlt.w	r2, r2, #2
 800c81c:	9307      	strge	r3, [sp, #28]
 800c81e:	9307      	strlt	r3, [sp, #28]
 800c820:	bfb8      	it	lt
 800c822:	9204      	strlt	r2, [sp, #16]
 800c824:	7823      	ldrb	r3, [r4, #0]
 800c826:	2b2e      	cmp	r3, #46	@ 0x2e
 800c828:	d10a      	bne.n	800c840 <_svfiprintf_r+0x130>
 800c82a:	7863      	ldrb	r3, [r4, #1]
 800c82c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c82e:	d132      	bne.n	800c896 <_svfiprintf_r+0x186>
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	1d1a      	adds	r2, r3, #4
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	9203      	str	r2, [sp, #12]
 800c838:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c83c:	3402      	adds	r4, #2
 800c83e:	9305      	str	r3, [sp, #20]
 800c840:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c904 <_svfiprintf_r+0x1f4>
 800c844:	7821      	ldrb	r1, [r4, #0]
 800c846:	2203      	movs	r2, #3
 800c848:	4650      	mov	r0, sl
 800c84a:	f7f3 fce1 	bl	8000210 <memchr>
 800c84e:	b138      	cbz	r0, 800c860 <_svfiprintf_r+0x150>
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	eba0 000a 	sub.w	r0, r0, sl
 800c856:	2240      	movs	r2, #64	@ 0x40
 800c858:	4082      	lsls	r2, r0
 800c85a:	4313      	orrs	r3, r2
 800c85c:	3401      	adds	r4, #1
 800c85e:	9304      	str	r3, [sp, #16]
 800c860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c864:	4824      	ldr	r0, [pc, #144]	@ (800c8f8 <_svfiprintf_r+0x1e8>)
 800c866:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c86a:	2206      	movs	r2, #6
 800c86c:	f7f3 fcd0 	bl	8000210 <memchr>
 800c870:	2800      	cmp	r0, #0
 800c872:	d036      	beq.n	800c8e2 <_svfiprintf_r+0x1d2>
 800c874:	4b21      	ldr	r3, [pc, #132]	@ (800c8fc <_svfiprintf_r+0x1ec>)
 800c876:	bb1b      	cbnz	r3, 800c8c0 <_svfiprintf_r+0x1b0>
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	3307      	adds	r3, #7
 800c87c:	f023 0307 	bic.w	r3, r3, #7
 800c880:	3308      	adds	r3, #8
 800c882:	9303      	str	r3, [sp, #12]
 800c884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c886:	4433      	add	r3, r6
 800c888:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88a:	e76a      	b.n	800c762 <_svfiprintf_r+0x52>
 800c88c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c890:	460c      	mov	r4, r1
 800c892:	2001      	movs	r0, #1
 800c894:	e7a8      	b.n	800c7e8 <_svfiprintf_r+0xd8>
 800c896:	2300      	movs	r3, #0
 800c898:	3401      	adds	r4, #1
 800c89a:	9305      	str	r3, [sp, #20]
 800c89c:	4619      	mov	r1, r3
 800c89e:	f04f 0c0a 	mov.w	ip, #10
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8a8:	3a30      	subs	r2, #48	@ 0x30
 800c8aa:	2a09      	cmp	r2, #9
 800c8ac:	d903      	bls.n	800c8b6 <_svfiprintf_r+0x1a6>
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0c6      	beq.n	800c840 <_svfiprintf_r+0x130>
 800c8b2:	9105      	str	r1, [sp, #20]
 800c8b4:	e7c4      	b.n	800c840 <_svfiprintf_r+0x130>
 800c8b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e7f0      	b.n	800c8a2 <_svfiprintf_r+0x192>
 800c8c0:	ab03      	add	r3, sp, #12
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c900 <_svfiprintf_r+0x1f0>)
 800c8c8:	a904      	add	r1, sp, #16
 800c8ca:	4638      	mov	r0, r7
 800c8cc:	f3af 8000 	nop.w
 800c8d0:	1c42      	adds	r2, r0, #1
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	d1d6      	bne.n	800c884 <_svfiprintf_r+0x174>
 800c8d6:	89ab      	ldrh	r3, [r5, #12]
 800c8d8:	065b      	lsls	r3, r3, #25
 800c8da:	f53f af2d 	bmi.w	800c738 <_svfiprintf_r+0x28>
 800c8de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8e0:	e72c      	b.n	800c73c <_svfiprintf_r+0x2c>
 800c8e2:	ab03      	add	r3, sp, #12
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	462a      	mov	r2, r5
 800c8e8:	4b05      	ldr	r3, [pc, #20]	@ (800c900 <_svfiprintf_r+0x1f0>)
 800c8ea:	a904      	add	r1, sp, #16
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f000 f879 	bl	800c9e4 <_printf_i>
 800c8f2:	e7ed      	b.n	800c8d0 <_svfiprintf_r+0x1c0>
 800c8f4:	0801b863 	.word	0x0801b863
 800c8f8:	0801b86d 	.word	0x0801b86d
 800c8fc:	00000000 	.word	0x00000000
 800c900:	0800c659 	.word	0x0800c659
 800c904:	0801b869 	.word	0x0801b869

0800c908 <_printf_common>:
 800c908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	4616      	mov	r6, r2
 800c90e:	4698      	mov	r8, r3
 800c910:	688a      	ldr	r2, [r1, #8]
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c918:	4293      	cmp	r3, r2
 800c91a:	bfb8      	it	lt
 800c91c:	4613      	movlt	r3, r2
 800c91e:	6033      	str	r3, [r6, #0]
 800c920:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c924:	4607      	mov	r7, r0
 800c926:	460c      	mov	r4, r1
 800c928:	b10a      	cbz	r2, 800c92e <_printf_common+0x26>
 800c92a:	3301      	adds	r3, #1
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	0699      	lsls	r1, r3, #26
 800c932:	bf42      	ittt	mi
 800c934:	6833      	ldrmi	r3, [r6, #0]
 800c936:	3302      	addmi	r3, #2
 800c938:	6033      	strmi	r3, [r6, #0]
 800c93a:	6825      	ldr	r5, [r4, #0]
 800c93c:	f015 0506 	ands.w	r5, r5, #6
 800c940:	d106      	bne.n	800c950 <_printf_common+0x48>
 800c942:	f104 0a19 	add.w	sl, r4, #25
 800c946:	68e3      	ldr	r3, [r4, #12]
 800c948:	6832      	ldr	r2, [r6, #0]
 800c94a:	1a9b      	subs	r3, r3, r2
 800c94c:	42ab      	cmp	r3, r5
 800c94e:	dc26      	bgt.n	800c99e <_printf_common+0x96>
 800c950:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c954:	6822      	ldr	r2, [r4, #0]
 800c956:	3b00      	subs	r3, #0
 800c958:	bf18      	it	ne
 800c95a:	2301      	movne	r3, #1
 800c95c:	0692      	lsls	r2, r2, #26
 800c95e:	d42b      	bmi.n	800c9b8 <_printf_common+0xb0>
 800c960:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c964:	4641      	mov	r1, r8
 800c966:	4638      	mov	r0, r7
 800c968:	47c8      	blx	r9
 800c96a:	3001      	adds	r0, #1
 800c96c:	d01e      	beq.n	800c9ac <_printf_common+0xa4>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	6922      	ldr	r2, [r4, #16]
 800c972:	f003 0306 	and.w	r3, r3, #6
 800c976:	2b04      	cmp	r3, #4
 800c978:	bf02      	ittt	eq
 800c97a:	68e5      	ldreq	r5, [r4, #12]
 800c97c:	6833      	ldreq	r3, [r6, #0]
 800c97e:	1aed      	subeq	r5, r5, r3
 800c980:	68a3      	ldr	r3, [r4, #8]
 800c982:	bf0c      	ite	eq
 800c984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c988:	2500      	movne	r5, #0
 800c98a:	4293      	cmp	r3, r2
 800c98c:	bfc4      	itt	gt
 800c98e:	1a9b      	subgt	r3, r3, r2
 800c990:	18ed      	addgt	r5, r5, r3
 800c992:	2600      	movs	r6, #0
 800c994:	341a      	adds	r4, #26
 800c996:	42b5      	cmp	r5, r6
 800c998:	d11a      	bne.n	800c9d0 <_printf_common+0xc8>
 800c99a:	2000      	movs	r0, #0
 800c99c:	e008      	b.n	800c9b0 <_printf_common+0xa8>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	4641      	mov	r1, r8
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	47c8      	blx	r9
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d103      	bne.n	800c9b4 <_printf_common+0xac>
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b4:	3501      	adds	r5, #1
 800c9b6:	e7c6      	b.n	800c946 <_printf_common+0x3e>
 800c9b8:	18e1      	adds	r1, r4, r3
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	2030      	movs	r0, #48	@ 0x30
 800c9be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9c2:	4422      	add	r2, r4
 800c9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9cc:	3302      	adds	r3, #2
 800c9ce:	e7c7      	b.n	800c960 <_printf_common+0x58>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	4641      	mov	r1, r8
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	47c8      	blx	r9
 800c9da:	3001      	adds	r0, #1
 800c9dc:	d0e6      	beq.n	800c9ac <_printf_common+0xa4>
 800c9de:	3601      	adds	r6, #1
 800c9e0:	e7d9      	b.n	800c996 <_printf_common+0x8e>
	...

0800c9e4 <_printf_i>:
 800c9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	7e0f      	ldrb	r7, [r1, #24]
 800c9ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c9ec:	2f78      	cmp	r7, #120	@ 0x78
 800c9ee:	4691      	mov	r9, r2
 800c9f0:	4680      	mov	r8, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	469a      	mov	sl, r3
 800c9f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c9fa:	d807      	bhi.n	800ca0c <_printf_i+0x28>
 800c9fc:	2f62      	cmp	r7, #98	@ 0x62
 800c9fe:	d80a      	bhi.n	800ca16 <_printf_i+0x32>
 800ca00:	2f00      	cmp	r7, #0
 800ca02:	f000 80d2 	beq.w	800cbaa <_printf_i+0x1c6>
 800ca06:	2f58      	cmp	r7, #88	@ 0x58
 800ca08:	f000 80b9 	beq.w	800cb7e <_printf_i+0x19a>
 800ca0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca14:	e03a      	b.n	800ca8c <_printf_i+0xa8>
 800ca16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca1a:	2b15      	cmp	r3, #21
 800ca1c:	d8f6      	bhi.n	800ca0c <_printf_i+0x28>
 800ca1e:	a101      	add	r1, pc, #4	@ (adr r1, 800ca24 <_printf_i+0x40>)
 800ca20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca24:	0800ca7d 	.word	0x0800ca7d
 800ca28:	0800ca91 	.word	0x0800ca91
 800ca2c:	0800ca0d 	.word	0x0800ca0d
 800ca30:	0800ca0d 	.word	0x0800ca0d
 800ca34:	0800ca0d 	.word	0x0800ca0d
 800ca38:	0800ca0d 	.word	0x0800ca0d
 800ca3c:	0800ca91 	.word	0x0800ca91
 800ca40:	0800ca0d 	.word	0x0800ca0d
 800ca44:	0800ca0d 	.word	0x0800ca0d
 800ca48:	0800ca0d 	.word	0x0800ca0d
 800ca4c:	0800ca0d 	.word	0x0800ca0d
 800ca50:	0800cb91 	.word	0x0800cb91
 800ca54:	0800cabb 	.word	0x0800cabb
 800ca58:	0800cb4b 	.word	0x0800cb4b
 800ca5c:	0800ca0d 	.word	0x0800ca0d
 800ca60:	0800ca0d 	.word	0x0800ca0d
 800ca64:	0800cbb3 	.word	0x0800cbb3
 800ca68:	0800ca0d 	.word	0x0800ca0d
 800ca6c:	0800cabb 	.word	0x0800cabb
 800ca70:	0800ca0d 	.word	0x0800ca0d
 800ca74:	0800ca0d 	.word	0x0800ca0d
 800ca78:	0800cb53 	.word	0x0800cb53
 800ca7c:	6833      	ldr	r3, [r6, #0]
 800ca7e:	1d1a      	adds	r2, r3, #4
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	6032      	str	r2, [r6, #0]
 800ca84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e09d      	b.n	800cbcc <_printf_i+0x1e8>
 800ca90:	6833      	ldr	r3, [r6, #0]
 800ca92:	6820      	ldr	r0, [r4, #0]
 800ca94:	1d19      	adds	r1, r3, #4
 800ca96:	6031      	str	r1, [r6, #0]
 800ca98:	0606      	lsls	r6, r0, #24
 800ca9a:	d501      	bpl.n	800caa0 <_printf_i+0xbc>
 800ca9c:	681d      	ldr	r5, [r3, #0]
 800ca9e:	e003      	b.n	800caa8 <_printf_i+0xc4>
 800caa0:	0645      	lsls	r5, r0, #25
 800caa2:	d5fb      	bpl.n	800ca9c <_printf_i+0xb8>
 800caa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800caa8:	2d00      	cmp	r5, #0
 800caaa:	da03      	bge.n	800cab4 <_printf_i+0xd0>
 800caac:	232d      	movs	r3, #45	@ 0x2d
 800caae:	426d      	negs	r5, r5
 800cab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cab4:	4859      	ldr	r0, [pc, #356]	@ (800cc1c <_printf_i+0x238>)
 800cab6:	230a      	movs	r3, #10
 800cab8:	e011      	b.n	800cade <_printf_i+0xfa>
 800caba:	6821      	ldr	r1, [r4, #0]
 800cabc:	6833      	ldr	r3, [r6, #0]
 800cabe:	0608      	lsls	r0, r1, #24
 800cac0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cac4:	d402      	bmi.n	800cacc <_printf_i+0xe8>
 800cac6:	0649      	lsls	r1, r1, #25
 800cac8:	bf48      	it	mi
 800caca:	b2ad      	uxthmi	r5, r5
 800cacc:	2f6f      	cmp	r7, #111	@ 0x6f
 800cace:	4853      	ldr	r0, [pc, #332]	@ (800cc1c <_printf_i+0x238>)
 800cad0:	6033      	str	r3, [r6, #0]
 800cad2:	bf14      	ite	ne
 800cad4:	230a      	movne	r3, #10
 800cad6:	2308      	moveq	r3, #8
 800cad8:	2100      	movs	r1, #0
 800cada:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cade:	6866      	ldr	r6, [r4, #4]
 800cae0:	60a6      	str	r6, [r4, #8]
 800cae2:	2e00      	cmp	r6, #0
 800cae4:	bfa2      	ittt	ge
 800cae6:	6821      	ldrge	r1, [r4, #0]
 800cae8:	f021 0104 	bicge.w	r1, r1, #4
 800caec:	6021      	strge	r1, [r4, #0]
 800caee:	b90d      	cbnz	r5, 800caf4 <_printf_i+0x110>
 800caf0:	2e00      	cmp	r6, #0
 800caf2:	d04b      	beq.n	800cb8c <_printf_i+0x1a8>
 800caf4:	4616      	mov	r6, r2
 800caf6:	fbb5 f1f3 	udiv	r1, r5, r3
 800cafa:	fb03 5711 	mls	r7, r3, r1, r5
 800cafe:	5dc7      	ldrb	r7, [r0, r7]
 800cb00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb04:	462f      	mov	r7, r5
 800cb06:	42bb      	cmp	r3, r7
 800cb08:	460d      	mov	r5, r1
 800cb0a:	d9f4      	bls.n	800caf6 <_printf_i+0x112>
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	d10b      	bne.n	800cb28 <_printf_i+0x144>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	07df      	lsls	r7, r3, #31
 800cb14:	d508      	bpl.n	800cb28 <_printf_i+0x144>
 800cb16:	6923      	ldr	r3, [r4, #16]
 800cb18:	6861      	ldr	r1, [r4, #4]
 800cb1a:	4299      	cmp	r1, r3
 800cb1c:	bfde      	ittt	le
 800cb1e:	2330      	movle	r3, #48	@ 0x30
 800cb20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb28:	1b92      	subs	r2, r2, r6
 800cb2a:	6122      	str	r2, [r4, #16]
 800cb2c:	f8cd a000 	str.w	sl, [sp]
 800cb30:	464b      	mov	r3, r9
 800cb32:	aa03      	add	r2, sp, #12
 800cb34:	4621      	mov	r1, r4
 800cb36:	4640      	mov	r0, r8
 800cb38:	f7ff fee6 	bl	800c908 <_printf_common>
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d14a      	bne.n	800cbd6 <_printf_i+0x1f2>
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	b004      	add	sp, #16
 800cb46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	f043 0320 	orr.w	r3, r3, #32
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	4833      	ldr	r0, [pc, #204]	@ (800cc20 <_printf_i+0x23c>)
 800cb54:	2778      	movs	r7, #120	@ 0x78
 800cb56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	6831      	ldr	r1, [r6, #0]
 800cb5e:	061f      	lsls	r7, r3, #24
 800cb60:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb64:	d402      	bmi.n	800cb6c <_printf_i+0x188>
 800cb66:	065f      	lsls	r7, r3, #25
 800cb68:	bf48      	it	mi
 800cb6a:	b2ad      	uxthmi	r5, r5
 800cb6c:	6031      	str	r1, [r6, #0]
 800cb6e:	07d9      	lsls	r1, r3, #31
 800cb70:	bf44      	itt	mi
 800cb72:	f043 0320 	orrmi.w	r3, r3, #32
 800cb76:	6023      	strmi	r3, [r4, #0]
 800cb78:	b11d      	cbz	r5, 800cb82 <_printf_i+0x19e>
 800cb7a:	2310      	movs	r3, #16
 800cb7c:	e7ac      	b.n	800cad8 <_printf_i+0xf4>
 800cb7e:	4827      	ldr	r0, [pc, #156]	@ (800cc1c <_printf_i+0x238>)
 800cb80:	e7e9      	b.n	800cb56 <_printf_i+0x172>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	f023 0320 	bic.w	r3, r3, #32
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	e7f6      	b.n	800cb7a <_printf_i+0x196>
 800cb8c:	4616      	mov	r6, r2
 800cb8e:	e7bd      	b.n	800cb0c <_printf_i+0x128>
 800cb90:	6833      	ldr	r3, [r6, #0]
 800cb92:	6825      	ldr	r5, [r4, #0]
 800cb94:	6961      	ldr	r1, [r4, #20]
 800cb96:	1d18      	adds	r0, r3, #4
 800cb98:	6030      	str	r0, [r6, #0]
 800cb9a:	062e      	lsls	r6, r5, #24
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	d501      	bpl.n	800cba4 <_printf_i+0x1c0>
 800cba0:	6019      	str	r1, [r3, #0]
 800cba2:	e002      	b.n	800cbaa <_printf_i+0x1c6>
 800cba4:	0668      	lsls	r0, r5, #25
 800cba6:	d5fb      	bpl.n	800cba0 <_printf_i+0x1bc>
 800cba8:	8019      	strh	r1, [r3, #0]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6123      	str	r3, [r4, #16]
 800cbae:	4616      	mov	r6, r2
 800cbb0:	e7bc      	b.n	800cb2c <_printf_i+0x148>
 800cbb2:	6833      	ldr	r3, [r6, #0]
 800cbb4:	1d1a      	adds	r2, r3, #4
 800cbb6:	6032      	str	r2, [r6, #0]
 800cbb8:	681e      	ldr	r6, [r3, #0]
 800cbba:	6862      	ldr	r2, [r4, #4]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f7f3 fb26 	bl	8000210 <memchr>
 800cbc4:	b108      	cbz	r0, 800cbca <_printf_i+0x1e6>
 800cbc6:	1b80      	subs	r0, r0, r6
 800cbc8:	6060      	str	r0, [r4, #4]
 800cbca:	6863      	ldr	r3, [r4, #4]
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	2300      	movs	r3, #0
 800cbd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbd4:	e7aa      	b.n	800cb2c <_printf_i+0x148>
 800cbd6:	6923      	ldr	r3, [r4, #16]
 800cbd8:	4632      	mov	r2, r6
 800cbda:	4649      	mov	r1, r9
 800cbdc:	4640      	mov	r0, r8
 800cbde:	47d0      	blx	sl
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d0ad      	beq.n	800cb40 <_printf_i+0x15c>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	079b      	lsls	r3, r3, #30
 800cbe8:	d413      	bmi.n	800cc12 <_printf_i+0x22e>
 800cbea:	68e0      	ldr	r0, [r4, #12]
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	4298      	cmp	r0, r3
 800cbf0:	bfb8      	it	lt
 800cbf2:	4618      	movlt	r0, r3
 800cbf4:	e7a6      	b.n	800cb44 <_printf_i+0x160>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4632      	mov	r2, r6
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	47d0      	blx	sl
 800cc00:	3001      	adds	r0, #1
 800cc02:	d09d      	beq.n	800cb40 <_printf_i+0x15c>
 800cc04:	3501      	adds	r5, #1
 800cc06:	68e3      	ldr	r3, [r4, #12]
 800cc08:	9903      	ldr	r1, [sp, #12]
 800cc0a:	1a5b      	subs	r3, r3, r1
 800cc0c:	42ab      	cmp	r3, r5
 800cc0e:	dcf2      	bgt.n	800cbf6 <_printf_i+0x212>
 800cc10:	e7eb      	b.n	800cbea <_printf_i+0x206>
 800cc12:	2500      	movs	r5, #0
 800cc14:	f104 0619 	add.w	r6, r4, #25
 800cc18:	e7f5      	b.n	800cc06 <_printf_i+0x222>
 800cc1a:	bf00      	nop
 800cc1c:	0801b874 	.word	0x0801b874
 800cc20:	0801b885 	.word	0x0801b885

0800cc24 <__sflush_r>:
 800cc24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2c:	0716      	lsls	r6, r2, #28
 800cc2e:	4605      	mov	r5, r0
 800cc30:	460c      	mov	r4, r1
 800cc32:	d454      	bmi.n	800ccde <__sflush_r+0xba>
 800cc34:	684b      	ldr	r3, [r1, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dc02      	bgt.n	800cc40 <__sflush_r+0x1c>
 800cc3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dd48      	ble.n	800ccd2 <__sflush_r+0xae>
 800cc40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc42:	2e00      	cmp	r6, #0
 800cc44:	d045      	beq.n	800ccd2 <__sflush_r+0xae>
 800cc46:	2300      	movs	r3, #0
 800cc48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc4c:	682f      	ldr	r7, [r5, #0]
 800cc4e:	6a21      	ldr	r1, [r4, #32]
 800cc50:	602b      	str	r3, [r5, #0]
 800cc52:	d030      	beq.n	800ccb6 <__sflush_r+0x92>
 800cc54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	0759      	lsls	r1, r3, #29
 800cc5a:	d505      	bpl.n	800cc68 <__sflush_r+0x44>
 800cc5c:	6863      	ldr	r3, [r4, #4]
 800cc5e:	1ad2      	subs	r2, r2, r3
 800cc60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc62:	b10b      	cbz	r3, 800cc68 <__sflush_r+0x44>
 800cc64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc66:	1ad2      	subs	r2, r2, r3
 800cc68:	2300      	movs	r3, #0
 800cc6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc6c:	6a21      	ldr	r1, [r4, #32]
 800cc6e:	4628      	mov	r0, r5
 800cc70:	47b0      	blx	r6
 800cc72:	1c43      	adds	r3, r0, #1
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	d106      	bne.n	800cc86 <__sflush_r+0x62>
 800cc78:	6829      	ldr	r1, [r5, #0]
 800cc7a:	291d      	cmp	r1, #29
 800cc7c:	d82b      	bhi.n	800ccd6 <__sflush_r+0xb2>
 800cc7e:	4a2a      	ldr	r2, [pc, #168]	@ (800cd28 <__sflush_r+0x104>)
 800cc80:	410a      	asrs	r2, r1
 800cc82:	07d6      	lsls	r6, r2, #31
 800cc84:	d427      	bmi.n	800ccd6 <__sflush_r+0xb2>
 800cc86:	2200      	movs	r2, #0
 800cc88:	6062      	str	r2, [r4, #4]
 800cc8a:	04d9      	lsls	r1, r3, #19
 800cc8c:	6922      	ldr	r2, [r4, #16]
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	d504      	bpl.n	800cc9c <__sflush_r+0x78>
 800cc92:	1c42      	adds	r2, r0, #1
 800cc94:	d101      	bne.n	800cc9a <__sflush_r+0x76>
 800cc96:	682b      	ldr	r3, [r5, #0]
 800cc98:	b903      	cbnz	r3, 800cc9c <__sflush_r+0x78>
 800cc9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc9e:	602f      	str	r7, [r5, #0]
 800cca0:	b1b9      	cbz	r1, 800ccd2 <__sflush_r+0xae>
 800cca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cca6:	4299      	cmp	r1, r3
 800cca8:	d002      	beq.n	800ccb0 <__sflush_r+0x8c>
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f7ff fbd4 	bl	800c458 <_free_r>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccb4:	e00d      	b.n	800ccd2 <__sflush_r+0xae>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b0      	blx	r6
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	1c50      	adds	r0, r2, #1
 800ccc0:	d1c9      	bne.n	800cc56 <__sflush_r+0x32>
 800ccc2:	682b      	ldr	r3, [r5, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d0c6      	beq.n	800cc56 <__sflush_r+0x32>
 800ccc8:	2b1d      	cmp	r3, #29
 800ccca:	d001      	beq.n	800ccd0 <__sflush_r+0xac>
 800cccc:	2b16      	cmp	r3, #22
 800ccce:	d11e      	bne.n	800cd0e <__sflush_r+0xea>
 800ccd0:	602f      	str	r7, [r5, #0]
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e022      	b.n	800cd1c <__sflush_r+0xf8>
 800ccd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccda:	b21b      	sxth	r3, r3
 800ccdc:	e01b      	b.n	800cd16 <__sflush_r+0xf2>
 800ccde:	690f      	ldr	r7, [r1, #16]
 800cce0:	2f00      	cmp	r7, #0
 800cce2:	d0f6      	beq.n	800ccd2 <__sflush_r+0xae>
 800cce4:	0793      	lsls	r3, r2, #30
 800cce6:	680e      	ldr	r6, [r1, #0]
 800cce8:	bf08      	it	eq
 800ccea:	694b      	ldreq	r3, [r1, #20]
 800ccec:	600f      	str	r7, [r1, #0]
 800ccee:	bf18      	it	ne
 800ccf0:	2300      	movne	r3, #0
 800ccf2:	eba6 0807 	sub.w	r8, r6, r7
 800ccf6:	608b      	str	r3, [r1, #8]
 800ccf8:	f1b8 0f00 	cmp.w	r8, #0
 800ccfc:	dde9      	ble.n	800ccd2 <__sflush_r+0xae>
 800ccfe:	6a21      	ldr	r1, [r4, #32]
 800cd00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd02:	4643      	mov	r3, r8
 800cd04:	463a      	mov	r2, r7
 800cd06:	4628      	mov	r0, r5
 800cd08:	47b0      	blx	r6
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	dc08      	bgt.n	800cd20 <__sflush_r+0xfc>
 800cd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd16:	81a3      	strh	r3, [r4, #12]
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd20:	4407      	add	r7, r0
 800cd22:	eba8 0800 	sub.w	r8, r8, r0
 800cd26:	e7e7      	b.n	800ccf8 <__sflush_r+0xd4>
 800cd28:	dfbffffe 	.word	0xdfbffffe

0800cd2c <_fflush_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	690b      	ldr	r3, [r1, #16]
 800cd30:	4605      	mov	r5, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	b913      	cbnz	r3, 800cd3c <_fflush_r+0x10>
 800cd36:	2500      	movs	r5, #0
 800cd38:	4628      	mov	r0, r5
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	b118      	cbz	r0, 800cd46 <_fflush_r+0x1a>
 800cd3e:	6a03      	ldr	r3, [r0, #32]
 800cd40:	b90b      	cbnz	r3, 800cd46 <_fflush_r+0x1a>
 800cd42:	f7ff fa47 	bl	800c1d4 <__sinit>
 800cd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0f3      	beq.n	800cd36 <_fflush_r+0xa>
 800cd4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd50:	07d0      	lsls	r0, r2, #31
 800cd52:	d404      	bmi.n	800cd5e <_fflush_r+0x32>
 800cd54:	0599      	lsls	r1, r3, #22
 800cd56:	d402      	bmi.n	800cd5e <_fflush_r+0x32>
 800cd58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd5a:	f7ff fb4e 	bl	800c3fa <__retarget_lock_acquire_recursive>
 800cd5e:	4628      	mov	r0, r5
 800cd60:	4621      	mov	r1, r4
 800cd62:	f7ff ff5f 	bl	800cc24 <__sflush_r>
 800cd66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd68:	07da      	lsls	r2, r3, #31
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	d4e4      	bmi.n	800cd38 <_fflush_r+0xc>
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	059b      	lsls	r3, r3, #22
 800cd72:	d4e1      	bmi.n	800cd38 <_fflush_r+0xc>
 800cd74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd76:	f7ff fb41 	bl	800c3fc <__retarget_lock_release_recursive>
 800cd7a:	e7dd      	b.n	800cd38 <_fflush_r+0xc>

0800cd7c <fiprintf>:
 800cd7c:	b40e      	push	{r1, r2, r3}
 800cd7e:	b503      	push	{r0, r1, lr}
 800cd80:	4601      	mov	r1, r0
 800cd82:	ab03      	add	r3, sp, #12
 800cd84:	4805      	ldr	r0, [pc, #20]	@ (800cd9c <fiprintf+0x20>)
 800cd86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd8a:	6800      	ldr	r0, [r0, #0]
 800cd8c:	9301      	str	r3, [sp, #4]
 800cd8e:	f000 f88f 	bl	800ceb0 <_vfiprintf_r>
 800cd92:	b002      	add	sp, #8
 800cd94:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd98:	b003      	add	sp, #12
 800cd9a:	4770      	bx	lr
 800cd9c:	20000068 	.word	0x20000068

0800cda0 <memmove>:
 800cda0:	4288      	cmp	r0, r1
 800cda2:	b510      	push	{r4, lr}
 800cda4:	eb01 0402 	add.w	r4, r1, r2
 800cda8:	d902      	bls.n	800cdb0 <memmove+0x10>
 800cdaa:	4284      	cmp	r4, r0
 800cdac:	4623      	mov	r3, r4
 800cdae:	d807      	bhi.n	800cdc0 <memmove+0x20>
 800cdb0:	1e43      	subs	r3, r0, #1
 800cdb2:	42a1      	cmp	r1, r4
 800cdb4:	d008      	beq.n	800cdc8 <memmove+0x28>
 800cdb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdbe:	e7f8      	b.n	800cdb2 <memmove+0x12>
 800cdc0:	4402      	add	r2, r0
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	428a      	cmp	r2, r1
 800cdc6:	d100      	bne.n	800cdca <memmove+0x2a>
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdd2:	e7f7      	b.n	800cdc4 <memmove+0x24>

0800cdd4 <_sbrk_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4d06      	ldr	r5, [pc, #24]	@ (800cdf0 <_sbrk_r+0x1c>)
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4604      	mov	r4, r0
 800cddc:	4608      	mov	r0, r1
 800cdde:	602b      	str	r3, [r5, #0]
 800cde0:	f7f7 fa88 	bl	80042f4 <_sbrk>
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	d102      	bne.n	800cdee <_sbrk_r+0x1a>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	b103      	cbz	r3, 800cdee <_sbrk_r+0x1a>
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	bd38      	pop	{r3, r4, r5, pc}
 800cdf0:	20004c58 	.word	0x20004c58

0800cdf4 <abort>:
 800cdf4:	b508      	push	{r3, lr}
 800cdf6:	2006      	movs	r0, #6
 800cdf8:	f000 fa2e 	bl	800d258 <raise>
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	f7f7 fa01 	bl	8004204 <_exit>

0800ce02 <_realloc_r>:
 800ce02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce06:	4680      	mov	r8, r0
 800ce08:	4615      	mov	r5, r2
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	b921      	cbnz	r1, 800ce18 <_realloc_r+0x16>
 800ce0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce12:	4611      	mov	r1, r2
 800ce14:	f7ff bb94 	b.w	800c540 <_malloc_r>
 800ce18:	b92a      	cbnz	r2, 800ce26 <_realloc_r+0x24>
 800ce1a:	f7ff fb1d 	bl	800c458 <_free_r>
 800ce1e:	2400      	movs	r4, #0
 800ce20:	4620      	mov	r0, r4
 800ce22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce26:	f000 fa33 	bl	800d290 <_malloc_usable_size_r>
 800ce2a:	4285      	cmp	r5, r0
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	d802      	bhi.n	800ce36 <_realloc_r+0x34>
 800ce30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce34:	d8f4      	bhi.n	800ce20 <_realloc_r+0x1e>
 800ce36:	4629      	mov	r1, r5
 800ce38:	4640      	mov	r0, r8
 800ce3a:	f7ff fb81 	bl	800c540 <_malloc_r>
 800ce3e:	4607      	mov	r7, r0
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d0ec      	beq.n	800ce1e <_realloc_r+0x1c>
 800ce44:	42b5      	cmp	r5, r6
 800ce46:	462a      	mov	r2, r5
 800ce48:	4621      	mov	r1, r4
 800ce4a:	bf28      	it	cs
 800ce4c:	4632      	movcs	r2, r6
 800ce4e:	f7ff fad6 	bl	800c3fe <memcpy>
 800ce52:	4621      	mov	r1, r4
 800ce54:	4640      	mov	r0, r8
 800ce56:	f7ff faff 	bl	800c458 <_free_r>
 800ce5a:	463c      	mov	r4, r7
 800ce5c:	e7e0      	b.n	800ce20 <_realloc_r+0x1e>

0800ce5e <__sfputc_r>:
 800ce5e:	6893      	ldr	r3, [r2, #8]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	b410      	push	{r4}
 800ce66:	6093      	str	r3, [r2, #8]
 800ce68:	da08      	bge.n	800ce7c <__sfputc_r+0x1e>
 800ce6a:	6994      	ldr	r4, [r2, #24]
 800ce6c:	42a3      	cmp	r3, r4
 800ce6e:	db01      	blt.n	800ce74 <__sfputc_r+0x16>
 800ce70:	290a      	cmp	r1, #10
 800ce72:	d103      	bne.n	800ce7c <__sfputc_r+0x1e>
 800ce74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce78:	f000 b932 	b.w	800d0e0 <__swbuf_r>
 800ce7c:	6813      	ldr	r3, [r2, #0]
 800ce7e:	1c58      	adds	r0, r3, #1
 800ce80:	6010      	str	r0, [r2, #0]
 800ce82:	7019      	strb	r1, [r3, #0]
 800ce84:	4608      	mov	r0, r1
 800ce86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <__sfputs_r>:
 800ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8e:	4606      	mov	r6, r0
 800ce90:	460f      	mov	r7, r1
 800ce92:	4614      	mov	r4, r2
 800ce94:	18d5      	adds	r5, r2, r3
 800ce96:	42ac      	cmp	r4, r5
 800ce98:	d101      	bne.n	800ce9e <__sfputs_r+0x12>
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	e007      	b.n	800ceae <__sfputs_r+0x22>
 800ce9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea2:	463a      	mov	r2, r7
 800cea4:	4630      	mov	r0, r6
 800cea6:	f7ff ffda 	bl	800ce5e <__sfputc_r>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	d1f3      	bne.n	800ce96 <__sfputs_r+0xa>
 800ceae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ceb0 <_vfiprintf_r>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	b09d      	sub	sp, #116	@ 0x74
 800ceb8:	4614      	mov	r4, r2
 800ceba:	4698      	mov	r8, r3
 800cebc:	4606      	mov	r6, r0
 800cebe:	b118      	cbz	r0, 800cec8 <_vfiprintf_r+0x18>
 800cec0:	6a03      	ldr	r3, [r0, #32]
 800cec2:	b90b      	cbnz	r3, 800cec8 <_vfiprintf_r+0x18>
 800cec4:	f7ff f986 	bl	800c1d4 <__sinit>
 800cec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceca:	07d9      	lsls	r1, r3, #31
 800cecc:	d405      	bmi.n	800ceda <_vfiprintf_r+0x2a>
 800cece:	89ab      	ldrh	r3, [r5, #12]
 800ced0:	059a      	lsls	r2, r3, #22
 800ced2:	d402      	bmi.n	800ceda <_vfiprintf_r+0x2a>
 800ced4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ced6:	f7ff fa90 	bl	800c3fa <__retarget_lock_acquire_recursive>
 800ceda:	89ab      	ldrh	r3, [r5, #12]
 800cedc:	071b      	lsls	r3, r3, #28
 800cede:	d501      	bpl.n	800cee4 <_vfiprintf_r+0x34>
 800cee0:	692b      	ldr	r3, [r5, #16]
 800cee2:	b99b      	cbnz	r3, 800cf0c <_vfiprintf_r+0x5c>
 800cee4:	4629      	mov	r1, r5
 800cee6:	4630      	mov	r0, r6
 800cee8:	f000 f938 	bl	800d15c <__swsetup_r>
 800ceec:	b170      	cbz	r0, 800cf0c <_vfiprintf_r+0x5c>
 800ceee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cef0:	07dc      	lsls	r4, r3, #31
 800cef2:	d504      	bpl.n	800cefe <_vfiprintf_r+0x4e>
 800cef4:	f04f 30ff 	mov.w	r0, #4294967295
 800cef8:	b01d      	add	sp, #116	@ 0x74
 800cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefe:	89ab      	ldrh	r3, [r5, #12]
 800cf00:	0598      	lsls	r0, r3, #22
 800cf02:	d4f7      	bmi.n	800cef4 <_vfiprintf_r+0x44>
 800cf04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf06:	f7ff fa79 	bl	800c3fc <__retarget_lock_release_recursive>
 800cf0a:	e7f3      	b.n	800cef4 <_vfiprintf_r+0x44>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf10:	2320      	movs	r3, #32
 800cf12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf16:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf1a:	2330      	movs	r3, #48	@ 0x30
 800cf1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d0cc <_vfiprintf_r+0x21c>
 800cf20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf24:	f04f 0901 	mov.w	r9, #1
 800cf28:	4623      	mov	r3, r4
 800cf2a:	469a      	mov	sl, r3
 800cf2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf30:	b10a      	cbz	r2, 800cf36 <_vfiprintf_r+0x86>
 800cf32:	2a25      	cmp	r2, #37	@ 0x25
 800cf34:	d1f9      	bne.n	800cf2a <_vfiprintf_r+0x7a>
 800cf36:	ebba 0b04 	subs.w	fp, sl, r4
 800cf3a:	d00b      	beq.n	800cf54 <_vfiprintf_r+0xa4>
 800cf3c:	465b      	mov	r3, fp
 800cf3e:	4622      	mov	r2, r4
 800cf40:	4629      	mov	r1, r5
 800cf42:	4630      	mov	r0, r6
 800cf44:	f7ff ffa2 	bl	800ce8c <__sfputs_r>
 800cf48:	3001      	adds	r0, #1
 800cf4a:	f000 80a7 	beq.w	800d09c <_vfiprintf_r+0x1ec>
 800cf4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf50:	445a      	add	r2, fp
 800cf52:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf54:	f89a 3000 	ldrb.w	r3, [sl]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f000 809f 	beq.w	800d09c <_vfiprintf_r+0x1ec>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	f04f 32ff 	mov.w	r2, #4294967295
 800cf64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf68:	f10a 0a01 	add.w	sl, sl, #1
 800cf6c:	9304      	str	r3, [sp, #16]
 800cf6e:	9307      	str	r3, [sp, #28]
 800cf70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf74:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf76:	4654      	mov	r4, sl
 800cf78:	2205      	movs	r2, #5
 800cf7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7e:	4853      	ldr	r0, [pc, #332]	@ (800d0cc <_vfiprintf_r+0x21c>)
 800cf80:	f7f3 f946 	bl	8000210 <memchr>
 800cf84:	9a04      	ldr	r2, [sp, #16]
 800cf86:	b9d8      	cbnz	r0, 800cfc0 <_vfiprintf_r+0x110>
 800cf88:	06d1      	lsls	r1, r2, #27
 800cf8a:	bf44      	itt	mi
 800cf8c:	2320      	movmi	r3, #32
 800cf8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf92:	0713      	lsls	r3, r2, #28
 800cf94:	bf44      	itt	mi
 800cf96:	232b      	movmi	r3, #43	@ 0x2b
 800cf98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfa2:	d015      	beq.n	800cfd0 <_vfiprintf_r+0x120>
 800cfa4:	9a07      	ldr	r2, [sp, #28]
 800cfa6:	4654      	mov	r4, sl
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	f04f 0c0a 	mov.w	ip, #10
 800cfae:	4621      	mov	r1, r4
 800cfb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfb4:	3b30      	subs	r3, #48	@ 0x30
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d94b      	bls.n	800d052 <_vfiprintf_r+0x1a2>
 800cfba:	b1b0      	cbz	r0, 800cfea <_vfiprintf_r+0x13a>
 800cfbc:	9207      	str	r2, [sp, #28]
 800cfbe:	e014      	b.n	800cfea <_vfiprintf_r+0x13a>
 800cfc0:	eba0 0308 	sub.w	r3, r0, r8
 800cfc4:	fa09 f303 	lsl.w	r3, r9, r3
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	9304      	str	r3, [sp, #16]
 800cfcc:	46a2      	mov	sl, r4
 800cfce:	e7d2      	b.n	800cf76 <_vfiprintf_r+0xc6>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	1d19      	adds	r1, r3, #4
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	9103      	str	r1, [sp, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	bfbb      	ittet	lt
 800cfdc:	425b      	neglt	r3, r3
 800cfde:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe2:	9307      	strge	r3, [sp, #28]
 800cfe4:	9307      	strlt	r3, [sp, #28]
 800cfe6:	bfb8      	it	lt
 800cfe8:	9204      	strlt	r2, [sp, #16]
 800cfea:	7823      	ldrb	r3, [r4, #0]
 800cfec:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfee:	d10a      	bne.n	800d006 <_vfiprintf_r+0x156>
 800cff0:	7863      	ldrb	r3, [r4, #1]
 800cff2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cff4:	d132      	bne.n	800d05c <_vfiprintf_r+0x1ac>
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	1d1a      	adds	r2, r3, #4
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	9203      	str	r2, [sp, #12]
 800cffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d002:	3402      	adds	r4, #2
 800d004:	9305      	str	r3, [sp, #20]
 800d006:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0dc <_vfiprintf_r+0x22c>
 800d00a:	7821      	ldrb	r1, [r4, #0]
 800d00c:	2203      	movs	r2, #3
 800d00e:	4650      	mov	r0, sl
 800d010:	f7f3 f8fe 	bl	8000210 <memchr>
 800d014:	b138      	cbz	r0, 800d026 <_vfiprintf_r+0x176>
 800d016:	9b04      	ldr	r3, [sp, #16]
 800d018:	eba0 000a 	sub.w	r0, r0, sl
 800d01c:	2240      	movs	r2, #64	@ 0x40
 800d01e:	4082      	lsls	r2, r0
 800d020:	4313      	orrs	r3, r2
 800d022:	3401      	adds	r4, #1
 800d024:	9304      	str	r3, [sp, #16]
 800d026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d02a:	4829      	ldr	r0, [pc, #164]	@ (800d0d0 <_vfiprintf_r+0x220>)
 800d02c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d030:	2206      	movs	r2, #6
 800d032:	f7f3 f8ed 	bl	8000210 <memchr>
 800d036:	2800      	cmp	r0, #0
 800d038:	d03f      	beq.n	800d0ba <_vfiprintf_r+0x20a>
 800d03a:	4b26      	ldr	r3, [pc, #152]	@ (800d0d4 <_vfiprintf_r+0x224>)
 800d03c:	bb1b      	cbnz	r3, 800d086 <_vfiprintf_r+0x1d6>
 800d03e:	9b03      	ldr	r3, [sp, #12]
 800d040:	3307      	adds	r3, #7
 800d042:	f023 0307 	bic.w	r3, r3, #7
 800d046:	3308      	adds	r3, #8
 800d048:	9303      	str	r3, [sp, #12]
 800d04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d04c:	443b      	add	r3, r7
 800d04e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d050:	e76a      	b.n	800cf28 <_vfiprintf_r+0x78>
 800d052:	fb0c 3202 	mla	r2, ip, r2, r3
 800d056:	460c      	mov	r4, r1
 800d058:	2001      	movs	r0, #1
 800d05a:	e7a8      	b.n	800cfae <_vfiprintf_r+0xfe>
 800d05c:	2300      	movs	r3, #0
 800d05e:	3401      	adds	r4, #1
 800d060:	9305      	str	r3, [sp, #20]
 800d062:	4619      	mov	r1, r3
 800d064:	f04f 0c0a 	mov.w	ip, #10
 800d068:	4620      	mov	r0, r4
 800d06a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d06e:	3a30      	subs	r2, #48	@ 0x30
 800d070:	2a09      	cmp	r2, #9
 800d072:	d903      	bls.n	800d07c <_vfiprintf_r+0x1cc>
 800d074:	2b00      	cmp	r3, #0
 800d076:	d0c6      	beq.n	800d006 <_vfiprintf_r+0x156>
 800d078:	9105      	str	r1, [sp, #20]
 800d07a:	e7c4      	b.n	800d006 <_vfiprintf_r+0x156>
 800d07c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d080:	4604      	mov	r4, r0
 800d082:	2301      	movs	r3, #1
 800d084:	e7f0      	b.n	800d068 <_vfiprintf_r+0x1b8>
 800d086:	ab03      	add	r3, sp, #12
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	462a      	mov	r2, r5
 800d08c:	4b12      	ldr	r3, [pc, #72]	@ (800d0d8 <_vfiprintf_r+0x228>)
 800d08e:	a904      	add	r1, sp, #16
 800d090:	4630      	mov	r0, r6
 800d092:	f3af 8000 	nop.w
 800d096:	4607      	mov	r7, r0
 800d098:	1c78      	adds	r0, r7, #1
 800d09a:	d1d6      	bne.n	800d04a <_vfiprintf_r+0x19a>
 800d09c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d09e:	07d9      	lsls	r1, r3, #31
 800d0a0:	d405      	bmi.n	800d0ae <_vfiprintf_r+0x1fe>
 800d0a2:	89ab      	ldrh	r3, [r5, #12]
 800d0a4:	059a      	lsls	r2, r3, #22
 800d0a6:	d402      	bmi.n	800d0ae <_vfiprintf_r+0x1fe>
 800d0a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0aa:	f7ff f9a7 	bl	800c3fc <__retarget_lock_release_recursive>
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	065b      	lsls	r3, r3, #25
 800d0b2:	f53f af1f 	bmi.w	800cef4 <_vfiprintf_r+0x44>
 800d0b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b8:	e71e      	b.n	800cef8 <_vfiprintf_r+0x48>
 800d0ba:	ab03      	add	r3, sp, #12
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	462a      	mov	r2, r5
 800d0c0:	4b05      	ldr	r3, [pc, #20]	@ (800d0d8 <_vfiprintf_r+0x228>)
 800d0c2:	a904      	add	r1, sp, #16
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f7ff fc8d 	bl	800c9e4 <_printf_i>
 800d0ca:	e7e4      	b.n	800d096 <_vfiprintf_r+0x1e6>
 800d0cc:	0801b863 	.word	0x0801b863
 800d0d0:	0801b86d 	.word	0x0801b86d
 800d0d4:	00000000 	.word	0x00000000
 800d0d8:	0800ce8d 	.word	0x0800ce8d
 800d0dc:	0801b869 	.word	0x0801b869

0800d0e0 <__swbuf_r>:
 800d0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e2:	460e      	mov	r6, r1
 800d0e4:	4614      	mov	r4, r2
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	b118      	cbz	r0, 800d0f2 <__swbuf_r+0x12>
 800d0ea:	6a03      	ldr	r3, [r0, #32]
 800d0ec:	b90b      	cbnz	r3, 800d0f2 <__swbuf_r+0x12>
 800d0ee:	f7ff f871 	bl	800c1d4 <__sinit>
 800d0f2:	69a3      	ldr	r3, [r4, #24]
 800d0f4:	60a3      	str	r3, [r4, #8]
 800d0f6:	89a3      	ldrh	r3, [r4, #12]
 800d0f8:	071a      	lsls	r2, r3, #28
 800d0fa:	d501      	bpl.n	800d100 <__swbuf_r+0x20>
 800d0fc:	6923      	ldr	r3, [r4, #16]
 800d0fe:	b943      	cbnz	r3, 800d112 <__swbuf_r+0x32>
 800d100:	4621      	mov	r1, r4
 800d102:	4628      	mov	r0, r5
 800d104:	f000 f82a 	bl	800d15c <__swsetup_r>
 800d108:	b118      	cbz	r0, 800d112 <__swbuf_r+0x32>
 800d10a:	f04f 37ff 	mov.w	r7, #4294967295
 800d10e:	4638      	mov	r0, r7
 800d110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	6922      	ldr	r2, [r4, #16]
 800d116:	1a98      	subs	r0, r3, r2
 800d118:	6963      	ldr	r3, [r4, #20]
 800d11a:	b2f6      	uxtb	r6, r6
 800d11c:	4283      	cmp	r3, r0
 800d11e:	4637      	mov	r7, r6
 800d120:	dc05      	bgt.n	800d12e <__swbuf_r+0x4e>
 800d122:	4621      	mov	r1, r4
 800d124:	4628      	mov	r0, r5
 800d126:	f7ff fe01 	bl	800cd2c <_fflush_r>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d1ed      	bne.n	800d10a <__swbuf_r+0x2a>
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	3b01      	subs	r3, #1
 800d132:	60a3      	str	r3, [r4, #8]
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	1c5a      	adds	r2, r3, #1
 800d138:	6022      	str	r2, [r4, #0]
 800d13a:	701e      	strb	r6, [r3, #0]
 800d13c:	6962      	ldr	r2, [r4, #20]
 800d13e:	1c43      	adds	r3, r0, #1
 800d140:	429a      	cmp	r2, r3
 800d142:	d004      	beq.n	800d14e <__swbuf_r+0x6e>
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	07db      	lsls	r3, r3, #31
 800d148:	d5e1      	bpl.n	800d10e <__swbuf_r+0x2e>
 800d14a:	2e0a      	cmp	r6, #10
 800d14c:	d1df      	bne.n	800d10e <__swbuf_r+0x2e>
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	f7ff fdeb 	bl	800cd2c <_fflush_r>
 800d156:	2800      	cmp	r0, #0
 800d158:	d0d9      	beq.n	800d10e <__swbuf_r+0x2e>
 800d15a:	e7d6      	b.n	800d10a <__swbuf_r+0x2a>

0800d15c <__swsetup_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4b29      	ldr	r3, [pc, #164]	@ (800d204 <__swsetup_r+0xa8>)
 800d160:	4605      	mov	r5, r0
 800d162:	6818      	ldr	r0, [r3, #0]
 800d164:	460c      	mov	r4, r1
 800d166:	b118      	cbz	r0, 800d170 <__swsetup_r+0x14>
 800d168:	6a03      	ldr	r3, [r0, #32]
 800d16a:	b90b      	cbnz	r3, 800d170 <__swsetup_r+0x14>
 800d16c:	f7ff f832 	bl	800c1d4 <__sinit>
 800d170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d174:	0719      	lsls	r1, r3, #28
 800d176:	d422      	bmi.n	800d1be <__swsetup_r+0x62>
 800d178:	06da      	lsls	r2, r3, #27
 800d17a:	d407      	bmi.n	800d18c <__swsetup_r+0x30>
 800d17c:	2209      	movs	r2, #9
 800d17e:	602a      	str	r2, [r5, #0]
 800d180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d184:	81a3      	strh	r3, [r4, #12]
 800d186:	f04f 30ff 	mov.w	r0, #4294967295
 800d18a:	e033      	b.n	800d1f4 <__swsetup_r+0x98>
 800d18c:	0758      	lsls	r0, r3, #29
 800d18e:	d512      	bpl.n	800d1b6 <__swsetup_r+0x5a>
 800d190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d192:	b141      	cbz	r1, 800d1a6 <__swsetup_r+0x4a>
 800d194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d198:	4299      	cmp	r1, r3
 800d19a:	d002      	beq.n	800d1a2 <__swsetup_r+0x46>
 800d19c:	4628      	mov	r0, r5
 800d19e:	f7ff f95b 	bl	800c458 <_free_r>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1ac:	81a3      	strh	r3, [r4, #12]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	6063      	str	r3, [r4, #4]
 800d1b2:	6923      	ldr	r3, [r4, #16]
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	f043 0308 	orr.w	r3, r3, #8
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	b94b      	cbnz	r3, 800d1d6 <__swsetup_r+0x7a>
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1cc:	d003      	beq.n	800d1d6 <__swsetup_r+0x7a>
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f000 f88b 	bl	800d2ec <__smakebuf_r>
 800d1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1da:	f013 0201 	ands.w	r2, r3, #1
 800d1de:	d00a      	beq.n	800d1f6 <__swsetup_r+0x9a>
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	60a2      	str	r2, [r4, #8]
 800d1e4:	6962      	ldr	r2, [r4, #20]
 800d1e6:	4252      	negs	r2, r2
 800d1e8:	61a2      	str	r2, [r4, #24]
 800d1ea:	6922      	ldr	r2, [r4, #16]
 800d1ec:	b942      	cbnz	r2, 800d200 <__swsetup_r+0xa4>
 800d1ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1f2:	d1c5      	bne.n	800d180 <__swsetup_r+0x24>
 800d1f4:	bd38      	pop	{r3, r4, r5, pc}
 800d1f6:	0799      	lsls	r1, r3, #30
 800d1f8:	bf58      	it	pl
 800d1fa:	6962      	ldrpl	r2, [r4, #20]
 800d1fc:	60a2      	str	r2, [r4, #8]
 800d1fe:	e7f4      	b.n	800d1ea <__swsetup_r+0x8e>
 800d200:	2000      	movs	r0, #0
 800d202:	e7f7      	b.n	800d1f4 <__swsetup_r+0x98>
 800d204:	20000068 	.word	0x20000068

0800d208 <_raise_r>:
 800d208:	291f      	cmp	r1, #31
 800d20a:	b538      	push	{r3, r4, r5, lr}
 800d20c:	4605      	mov	r5, r0
 800d20e:	460c      	mov	r4, r1
 800d210:	d904      	bls.n	800d21c <_raise_r+0x14>
 800d212:	2316      	movs	r3, #22
 800d214:	6003      	str	r3, [r0, #0]
 800d216:	f04f 30ff 	mov.w	r0, #4294967295
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d21e:	b112      	cbz	r2, 800d226 <_raise_r+0x1e>
 800d220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d224:	b94b      	cbnz	r3, 800d23a <_raise_r+0x32>
 800d226:	4628      	mov	r0, r5
 800d228:	f000 f830 	bl	800d28c <_getpid_r>
 800d22c:	4622      	mov	r2, r4
 800d22e:	4601      	mov	r1, r0
 800d230:	4628      	mov	r0, r5
 800d232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d236:	f000 b817 	b.w	800d268 <_kill_r>
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d00a      	beq.n	800d254 <_raise_r+0x4c>
 800d23e:	1c59      	adds	r1, r3, #1
 800d240:	d103      	bne.n	800d24a <_raise_r+0x42>
 800d242:	2316      	movs	r3, #22
 800d244:	6003      	str	r3, [r0, #0]
 800d246:	2001      	movs	r0, #1
 800d248:	e7e7      	b.n	800d21a <_raise_r+0x12>
 800d24a:	2100      	movs	r1, #0
 800d24c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d250:	4620      	mov	r0, r4
 800d252:	4798      	blx	r3
 800d254:	2000      	movs	r0, #0
 800d256:	e7e0      	b.n	800d21a <_raise_r+0x12>

0800d258 <raise>:
 800d258:	4b02      	ldr	r3, [pc, #8]	@ (800d264 <raise+0xc>)
 800d25a:	4601      	mov	r1, r0
 800d25c:	6818      	ldr	r0, [r3, #0]
 800d25e:	f7ff bfd3 	b.w	800d208 <_raise_r>
 800d262:	bf00      	nop
 800d264:	20000068 	.word	0x20000068

0800d268 <_kill_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d07      	ldr	r5, [pc, #28]	@ (800d288 <_kill_r+0x20>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	4611      	mov	r1, r2
 800d274:	602b      	str	r3, [r5, #0]
 800d276:	f7f6 ffb5 	bl	80041e4 <_kill>
 800d27a:	1c43      	adds	r3, r0, #1
 800d27c:	d102      	bne.n	800d284 <_kill_r+0x1c>
 800d27e:	682b      	ldr	r3, [r5, #0]
 800d280:	b103      	cbz	r3, 800d284 <_kill_r+0x1c>
 800d282:	6023      	str	r3, [r4, #0]
 800d284:	bd38      	pop	{r3, r4, r5, pc}
 800d286:	bf00      	nop
 800d288:	20004c58 	.word	0x20004c58

0800d28c <_getpid_r>:
 800d28c:	f7f6 bfa2 	b.w	80041d4 <_getpid>

0800d290 <_malloc_usable_size_r>:
 800d290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d294:	1f18      	subs	r0, r3, #4
 800d296:	2b00      	cmp	r3, #0
 800d298:	bfbc      	itt	lt
 800d29a:	580b      	ldrlt	r3, [r1, r0]
 800d29c:	18c0      	addlt	r0, r0, r3
 800d29e:	4770      	bx	lr

0800d2a0 <__swhatbuf_r>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	b096      	sub	sp, #88	@ 0x58
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	461e      	mov	r6, r3
 800d2b0:	da0d      	bge.n	800d2ce <__swhatbuf_r+0x2e>
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2b8:	f04f 0100 	mov.w	r1, #0
 800d2bc:	bf14      	ite	ne
 800d2be:	2340      	movne	r3, #64	@ 0x40
 800d2c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	6031      	str	r1, [r6, #0]
 800d2c8:	602b      	str	r3, [r5, #0]
 800d2ca:	b016      	add	sp, #88	@ 0x58
 800d2cc:	bd70      	pop	{r4, r5, r6, pc}
 800d2ce:	466a      	mov	r2, sp
 800d2d0:	f000 f848 	bl	800d364 <_fstat_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	dbec      	blt.n	800d2b2 <__swhatbuf_r+0x12>
 800d2d8:	9901      	ldr	r1, [sp, #4]
 800d2da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2e2:	4259      	negs	r1, r3
 800d2e4:	4159      	adcs	r1, r3
 800d2e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ea:	e7eb      	b.n	800d2c4 <__swhatbuf_r+0x24>

0800d2ec <__smakebuf_r>:
 800d2ec:	898b      	ldrh	r3, [r1, #12]
 800d2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2f0:	079d      	lsls	r5, r3, #30
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	d507      	bpl.n	800d308 <__smakebuf_r+0x1c>
 800d2f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	6123      	str	r3, [r4, #16]
 800d300:	2301      	movs	r3, #1
 800d302:	6163      	str	r3, [r4, #20]
 800d304:	b003      	add	sp, #12
 800d306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d308:	ab01      	add	r3, sp, #4
 800d30a:	466a      	mov	r2, sp
 800d30c:	f7ff ffc8 	bl	800d2a0 <__swhatbuf_r>
 800d310:	9f00      	ldr	r7, [sp, #0]
 800d312:	4605      	mov	r5, r0
 800d314:	4639      	mov	r1, r7
 800d316:	4630      	mov	r0, r6
 800d318:	f7ff f912 	bl	800c540 <_malloc_r>
 800d31c:	b948      	cbnz	r0, 800d332 <__smakebuf_r+0x46>
 800d31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d322:	059a      	lsls	r2, r3, #22
 800d324:	d4ee      	bmi.n	800d304 <__smakebuf_r+0x18>
 800d326:	f023 0303 	bic.w	r3, r3, #3
 800d32a:	f043 0302 	orr.w	r3, r3, #2
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	e7e2      	b.n	800d2f8 <__smakebuf_r+0xc>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	6020      	str	r0, [r4, #0]
 800d336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	9b01      	ldr	r3, [sp, #4]
 800d33e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d342:	b15b      	cbz	r3, 800d35c <__smakebuf_r+0x70>
 800d344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 f81d 	bl	800d388 <_isatty_r>
 800d34e:	b128      	cbz	r0, 800d35c <__smakebuf_r+0x70>
 800d350:	89a3      	ldrh	r3, [r4, #12]
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	f043 0301 	orr.w	r3, r3, #1
 800d35a:	81a3      	strh	r3, [r4, #12]
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	431d      	orrs	r5, r3
 800d360:	81a5      	strh	r5, [r4, #12]
 800d362:	e7cf      	b.n	800d304 <__smakebuf_r+0x18>

0800d364 <_fstat_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4d07      	ldr	r5, [pc, #28]	@ (800d384 <_fstat_r+0x20>)
 800d368:	2300      	movs	r3, #0
 800d36a:	4604      	mov	r4, r0
 800d36c:	4608      	mov	r0, r1
 800d36e:	4611      	mov	r1, r2
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	f7f6 ff97 	bl	80042a4 <_fstat>
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	d102      	bne.n	800d380 <_fstat_r+0x1c>
 800d37a:	682b      	ldr	r3, [r5, #0]
 800d37c:	b103      	cbz	r3, 800d380 <_fstat_r+0x1c>
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	bd38      	pop	{r3, r4, r5, pc}
 800d382:	bf00      	nop
 800d384:	20004c58 	.word	0x20004c58

0800d388 <_isatty_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4d06      	ldr	r5, [pc, #24]	@ (800d3a4 <_isatty_r+0x1c>)
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	f7f6 ff96 	bl	80042c4 <_isatty>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_isatty_r+0x1a>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_isatty_r+0x1a>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	20004c58 	.word	0x20004c58

0800d3a8 <_init>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	bf00      	nop
 800d3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ae:	bc08      	pop	{r3}
 800d3b0:	469e      	mov	lr, r3
 800d3b2:	4770      	bx	lr

0800d3b4 <_fini>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	bf00      	nop
 800d3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ba:	bc08      	pop	{r3}
 800d3bc:	469e      	mov	lr, r3
 800d3be:	4770      	bx	lr
